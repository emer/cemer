// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "ta_css.h"
#include "ta_def.h"
#include "ta_string.h"
#include "ta_stdef.h"
#include "ifont.h"
#include "ta_list.h"
#include "ta_filer.h"
#include "icolor.h"
#include "ta_type.h"
#include "ta_base.h"
#include "ta_matrix.h"
#include "ta_group.h"
#include "ta_dump.h"
#include "ta_defaults.h"
#include "ta_script.h"
#include "ta_qt.h"
#include "ta_qtdata_def.h"
#include "ta_qtdata.h"
#include "ta_qtdialog.h"
#include "ta_qttype_def.h"
#include "ta_qttype.h"
#include "ta_qtclipdata.h"
#include "ta_qtbrowse_def.h"
#include "ta_qtviewer.h"
#include "ta_qtbrowse.h"
#include "ta_classbrowse.h"
#include "ta_qtgroup.h"
#include "ta_seledit.h"
#include "igeometry.h"
#include "ta_TA_type.h"
#include "ta_TA_inst.h"


// Types

TypeDef TA_void("void", 1, 0, 0, 0, 1, 0);
TypeDef TA_int("int", 1, 0, 0, 0, 1, sizeof(int));
TypeDef TA_short("short", 1, 0, 0, 0, 1, sizeof(short));
TypeDef TA_long("long", 1, 0, 0, 0, 1, sizeof(long));
TypeDef TA_char("char", 1, 0, 0, 0, 1, sizeof(char));
TypeDef TA_signed_char("signed_char", 1, 0, 0, 0, 1, sizeof(signed char));
TypeDef TA_unsigned_char("unsigned_char", 1, 0, 0, 0, 1, sizeof(unsigned char));
TypeDef TA_unsigned("unsigned", 1, 0, 0, 0, 1, sizeof(unsigned));
TypeDef TA_signed("signed", 1, 0, 0, 0, 1, sizeof(signed));
TypeDef TA_float("float", 1, 0, 0, 0, 1, sizeof(float));
TypeDef TA_double("double", 1, 0, 0, 0, 1, sizeof(double));
TypeDef TA_bool("bool", 1, 0, 0, 0, 1, sizeof(bool));
TypeDef TA_const("const", 1, 0, 0, 0, 1, 0);
TypeDef TA_enum("enum", 1, 0, 0, 1, 1, 0);
TypeDef TA_struct("struct", 1, 0, 0, 1, 1, 0);
TypeDef TA_union("union", 1, 0, 0, 1, 1, 0);
TypeDef TA_class("class", 1, 0, 0, 1, 1, 0);
TypeDef TA_template("template", 1, 0, 0, 1, 1, 0);
TypeDef TA_templ_inst("templ_inst", 1, 0, 0, 1, 1, 0);
TypeDef TA_ta_array("ta_array", 1, 0, 0, 1, 1, 0);
TypeDef TA_taBase("taBase", " Base type for all type-aware classes Base type for all type-aware classes ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taBase), (void**)&TAI_taBase, 0, 0, 0,1);
TypeDef TA_taRegFun("taRegFun", 1, 0, 0, 0, 1, 0);
TypeDef TA_TypeDef("TypeDef", 1, 0, 0, 0, 1, 0);
TypeDef TA_taString("taString", " StrRep - internal String representation Note: this structure is allocated via malloc(), so there must be no constructor/destructor.  reference counted string", 
	"", "", "", sizeof(taString), (void**)0, 1, 0, 0,1);
TypeDef TA_void_ptr("void_ptr", 1, 1, 0, 1, 1, 0);
TypeDef TA_streambuf("streambuf", " In case some header files defines these as macros.", 
	"", "", "", sizeof(streambuf), (void**)0, 0, 0, 0,1);
TypeDef TA_signed_long("signed_long", 1, 0, 0, 0, 1, 0);
TypeDef TA_signed_long_long("signed_long_long", 1, 0, 0, 0, 1, 0);
TypeDef TA_signed_long_long_int("signed_long_long_int", 1, 0, 0, 0, 1, 0);
TypeDef TA_streampos("streampos", "", 
	"", "", "", sizeof(streampos), (void**)0, 0, 0, 0,1);
TypeDef TA_streamoff("streamoff", "", 
	"", "", "", sizeof(streamoff), (void**)0, 0, 0, 0,1);
TypeDef TA_streamsize("streamsize", " 27.4.2.1.3 Type ios_base::iostate", 
	"", "", "", sizeof(streamsize), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Fmtflags("_Ios_Fmtflags", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Openmode("_Ios_Openmode", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Iostate("_Ios_Iostate", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Seekdir("_Ios_Seekdir", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_void_ptr_ref("void_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_long_ref("long_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ios("ios", "", 
	"", "", "", sizeof(ios), (void**)0, 1, 0, 0,1);
TypeDef TA_ostream("ostream", "", 
	"", "", "", sizeof(ostream), (void**)0, 1, 0, 0,1);
TypeDef TA_istream("istream", "", 
	"", "", "", sizeof(istream), (void**)0, 1, 0, 0,1);
TypeDef TA_ostream_ref("ostream_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ostream_ptr("ostream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_char("const_char", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_char_ptr("const_char_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_istream_ref("istream_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_char_ptr("char_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iostream("iostream", "", 
	"", "MULT_INHERIT ", "", sizeof(iostream), (void**)0, 1, 0, 0,1);
TypeDef TA_ifstream("ifstream", "", 
	"", "", "", sizeof(ifstream), (void**)0, 1, 0, 0,1);
TypeDef TA_ofstream("ofstream", "", 
	"", "", "", sizeof(ofstream), (void**)0, 1, 0, 0,1);
TypeDef TA_fstream("fstream", "", 
	"", "", "", sizeof(fstream), (void**)0, 1, 0, 0,1);
TypeDef TA_istringstream("istringstream", "", 
	"", "", "", sizeof(istringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_ostringstream("ostringstream", "", 
	"", "", "", sizeof(ostringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_stringstream("stringstream", "", 
	"", "", "", sizeof(stringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_taStrRep("taStrRep", "", 
	"", "", "", sizeof(taStrRep), (void**)0, 1, 0, 0,1);
TypeDef TA_char_ary("char_ary", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taString("const_taString", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taString_ref("const_taString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taStrRep_ptr("taStrRep_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_unsigned_long("unsigned_long", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_QString_ref("const_QString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taString_ref("taString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_unsigned_int("unsigned_int", 1, 0, 0, 0, 1, 0);
TypeDef TA_char_ref("char_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QFont_ref("const_QFont_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iFont("iFont", "   ", 
	"", "", "", sizeof(iFont), (void**)0, 0, 0, 0,1);
TypeDef TA_taDataLink("taDataLink", "  interface for taiDataLink and descendants", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS VIRT_BASE ", "", sizeof(taDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_iFont_ref("iFont_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iFont("const_iFont", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_impl("taPtrList_impl", " implementation of the pointer list class", 
	"", "", "", sizeof(taPtrList_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_iFont_ref("const_iFont_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_impl_ptr("taPtrList_impl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TALPtr("TALPtr", "", 
	"", "", "", sizeof(taPtrList_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_DataChangedReason("DataChangedReason", " reason why DataChanged being called, as well as defining ops (also used by taBase and other classes) -- some data change operations will emit multiple DataChanged calls ", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_taListItr("taListItr", " pseudo class, compatible with the FOR_ITR_EL macro in ta_group", 
	"", "", "", sizeof(taListItr), (void**)0, 0, 0, 0,1);
TypeDef TA_taHashVal("taHashVal", "", 
	"", "", "", sizeof(taHashVal), (void**)0, 0, 0, 0,1);
TypeDef TA_const_void("const_void", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_void_ptr("const_void_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_void_ptr_ptr("void_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_const_taPtrList_impl("const_taPtrList_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taPtrList_impl_ref("const_taPtrList_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TypeDef_ptr_ref("TypeDef_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_int_ref("int_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taDataLink_ptr_ptr("taDataLink_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_taListItr_ref("taListItr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taFixedArray_impl("taFixedArray_impl", " basic subtype for FixedArray, no tokens of which are ever kept", 
	"NO_INSTANCE ", "VIRT_BASE NO_INSTANCE ", "", sizeof(taFixedArray_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taFixedArray_impl("const_taFixedArray_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_taFixedArray("taFixedArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taFixedArray_impl_ref("const_taFixedArray_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taFixedArray_int_("taFixedArray_int_", " rudimentary array, primarily intended as an OO replacement for C arrays", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taFixedArray<int>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taFixedArray("const_taFixedArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_int("const_int", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taFixedArray_ref("const_taFixedArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_int_ref("const_int_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_int_FixedArray("int_FixedArray", "", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(int_FixedArray), (void**)0, 0, 0, 0,1);
TypeDef TA_int_FixedArray_ref("int_FixedArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_int_FixedArray("const_int_FixedArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_taArray_impl("taArray_impl", " Base Type for Arrays, no tokens of which are ever kept", 
	"", "", "", sizeof(taArray_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_int_FixedArray_ref("const_int_FixedArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taArray_impl("const_taArray_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taArray_impl_ref("const_taArray_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList("taPtrList", 1, 0, 0, 0, 1, 0);
TypeDef TA_taHashEl("taHashEl", " holds information for one entry of the hash table", 
	"", "", "", sizeof(taHashEl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taPtrList("const_taPtrList", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_taHashEl_("taPtrList_taHashEl_", " ", 
	"", "", "", sizeof(taPtrList<taHashEl>), (void**)&TAI_taPtrList_taHashEl_, 0, 0, 0,1);
TypeDef TA_const_taPtrList_ref("const_taPtrList_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taHashEl_ptr("taHashEl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taHashBucket("taHashBucket", " holds a set of hash table entries that all have the same hash_code modulo value", 
	"", "", "", sizeof(taHashBucket), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_taHashBucket_("taPtrList_taHashBucket_", " ", 
	"", "", "", sizeof(taPtrList<taHashBucket>), (void**)&TAI_taPtrList_taHashBucket_, 0, 0, 0,1);
TypeDef TA_int_ary("int_ary", 1, 1, 0, 0, 1, 0);
TypeDef TA_taHashTable("taHashTable", "  table has a number of buckets, each with some hash values", 
	"", "", "", sizeof(taHashTable), (void**)0, 0, 0, 0,1);
TypeDef TA_taHashBucket_ptr("taHashBucket_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taHashTable_ptr("taHashTable_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taHashTable("const_taHashTable", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taHashTable_ref("const_taHashTable_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_base("taPtrList_base", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taPtrList_base("const_taPtrList_base", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPlainArray("taPlainArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taPtrList_base_ref("const_taPtrList_base_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taFiler("taFiler", " //////////////////////////////// associate this with each file that is managed", 
	"", "", "", sizeof(taFiler), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taPlainArray("const_taPlainArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_FilerOperation("FilerOperation", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taPlainArray_ref("const_taPlainArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ifstream_ptr("ifstream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ofstream_ptr("ofstream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_fstream_ptr("fstream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_istream_ptr("istream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taFiler_ref("taFiler_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taFiler("const_taFiler", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taFiler_ref("const_taFiler_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iColor_ptr("const_iColor_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_float_ref("float_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iColor_ref("const_iColor_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QColor_ref("const_QColor_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QColor_ptr("const_QColor_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taDataLinkItr("taDataLinkItr", " iterator for datalink clients -- use as a value type", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taDataLinkItr), (void**)&TAI_taDataLinkItr, 0, 0, 0,1);
TypeDef TA_taiDataLink("taiDataLink", "   interface for viewing system", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taiDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_css_fun_stub_ptr("css_fun_stub_ptr", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_ta_void_fun("ta_void_fun", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_ta_memb_ptr_class("ta_memb_ptr_class", "", 
	"", "", "", sizeof(ta_memb_ptr_class), (void**)0, 1, 0, 0,1);
TypeDef TA_int_ta_memb_ptr_class("int_ta_memb_ptr_class", 1, 0, 0, 0, 1, 0);
TypeDef TA_ta_memb_ptr("ta_memb_ptr", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_taBase_ptr("taBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TAPtr("TAPtr", " pointer to a taBase type", 
	"", "", "", sizeof(taBase*), (void**)&TAI_TAPtr, 0, 1, 0,1);
TypeDef TA_taPlainArray_taString_("taPlainArray_taString_", " ", 
	"", "", "", sizeof(taPlainArray<taString>), (void**)&TAI_taPlainArray_taString_, 0, 0, 0,1);
TypeDef TA_String_PArray("String_PArray", "", 
	"", "", "", sizeof(String_PArray), (void**)0, 0, 0, 0,1);
TypeDef TA_taPlainArray_int_("taPlainArray_int_", " ", 
	"", "", "", sizeof(taPlainArray<int>), (void**)&TAI_taPlainArray_int_, 0, 0, 0,1);
TypeDef TA_const_String_PArray("const_String_PArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_int_PArray("int_PArray", "", 
	"", "", "", sizeof(int_PArray), (void**)0, 0, 0, 0,1);
TypeDef TA_const_String_PArray_ref("const_String_PArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_IApp("IApp", " basic methods that the root/app object must support", 
	"", "", "", sizeof(IApp), (void**)0, 1, 0, 0,1);
TypeDef TA_IApp_ptr("IApp_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_String_PArray_ref("String_PArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taMisc("taMisc", " miscellanous global parameters and functions for type access system", 
	"", "", "", sizeof(taMisc), (void**)&TAI_taMisc, 0, 0, 0,1);
TypeDef TA_taRefN("taRefN", " reference counting base class", 
	"", "NO_MEMBERS NO_CSS ", "", sizeof(taRefN), (void**)0, 0, 0, 0,1);
TypeDef TA_ITypedObject("ITypedObject", " ", 
	"", "NO_INSTANCE NO_CSS NO_MEMBERS VIRT_BASE ", "", sizeof(ITypedObject), (void**)0, 0, 0, 0,1);
TypeDef TA_taRefN_ref("taRefN_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taRefN_ptr("taRefN_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiDataLink_ptr("taiDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_IDataLinkClient("IDataLinkClient", " ", 
	"", "NO_INSTANCE NO_CSS NO_MEMBERS VIRT_BASE ", "", sizeof(IDataLinkClient), (void**)0, 0, 0, 0,1);
TypeDef TA_taDataLink_ptr("taDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taPtrList_IDataLinkClient_("taPtrList_IDataLinkClient_", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<IDataLinkClient>), (void**)0, 0, 0, 0,1);
TypeDef TA_IDataLinkClient_PtrList("IDataLinkClient_PtrList", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(IDataLinkClient_PtrList), (void**)0, 0, 0, 0,1);
TypeDef TA_IDataLinkClient_ptr("IDataLinkClient_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taDataLink_ptr_ref("taDataLink_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_const_TypeDef_ptr("const_TypeDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taPtrList_EnumDef_("taPtrList_EnumDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<EnumDef>), (void**)&TAI_taPtrList_EnumDef_, 0, 0, 0,1);
TypeDef TA_EnumSpace("EnumSpace", " space of enums", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(EnumSpace), (void**)&TAI_EnumSpace, 0, 0, 0,1);
TypeDef TA_const_EnumSpace("const_EnumSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_EnumSpace_ref("const_EnumSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_void_("taPtrList_void_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<void>), (void**)&TAI_taPtrList_void_, 0, 0, 0,1);
TypeDef TA_TokenSpace("TokenSpace", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(TokenSpace), (void**)&TAI_TokenSpace, 0, 0, 0,1);
TypeDef TA_taPtrList_MemberDef_("taPtrList_MemberDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<MemberDef>), (void**)&TAI_taPtrList_MemberDef_, 0, 0, 0,1);
TypeDef TA_const_TokenSpace("const_TokenSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_MemberSpace("MemberSpace", " space of members", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(MemberSpace), (void**)&TAI_MemberSpace, 0, 0, 0,1);
TypeDef TA_const_TokenSpace_ref("const_TokenSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_MemberSpace("const_MemberSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MemberSpace_ref("const_MemberSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_MethodDef_("taPtrList_MethodDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<MethodDef>), (void**)&TAI_taPtrList_MethodDef_, 0, 0, 0,1);
TypeDef TA_MethodSpace("MethodSpace", " space of methods", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(MethodSpace), (void**)&TAI_MethodSpace, 0, 0, 0,1);
TypeDef TA_const_MethodSpace("const_MethodSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MethodSpace_ref("const_MethodSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_TypeDef_("taPtrList_TypeDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<TypeDef>), (void**)&TAI_taPtrList_TypeDef_, 0, 0, 0,1);
TypeDef TA_TypeSpace("TypeSpace", " space of types; uses default string-based hashing", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(TypeSpace), (void**)&TAI_TypeSpace, 0, 0, 0,1);
TypeDef TA_const_TypeSpace("const_TypeSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_TypeItem("TypeItem", " base class for TypeDef, MemberDef, MethodDef, EnumDef, and TypedefDef", 
	"NO_MEMBERS NO_CSS ", "NO_MEMBERS NO_CSS ", "", sizeof(TypeItem), (void**)&TAI_TypeItem, 0, 0, 0,1);
TypeDef TA_const_TypeSpace_ref("const_TypeSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_EnumSpace_ptr("EnumSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_MethodDef("MethodDef", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TypeItem("const_TypeItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_MethodDef_ptr("MethodDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TypeItem_ref("const_TypeItem_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_EnumDef("EnumDef", " defines an enum member", 
	"NO_MEMBERS NO_CSS ", "NO_MEMBERS NO_CSS ", "", sizeof(EnumDef), (void**)&TAI_EnumDef, 0, 0, 0,1);
TypeDef TA_MemberDef("MemberDef", 1, 0, 0, 0, 1, 0);
TypeDef TA_EnumDef_ptr("EnumDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_EnumDef("const_EnumDef", 1, 0, 0, 0, 1, 0);
TypeDef TA_MemberDef_ptr("MemberDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_EnumDef_ref("const_EnumDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MemberSpace_ptr("MemberSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_MemberDef("const_MemberDef", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MemberDef_ref("const_MemberDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MethodSpace_ptr("MethodSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_MethodDef("const_MethodDef", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MethodDef_ref("const_MethodDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TypeSpace_ptr("TypeSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TypeDef_ref("const_TypeDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MemberDef_ptr_ptr("MemberDef_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_taiMimeSource("taiMimeSource", "  a delegate/wrapper that is used for dealing with generic Mime data, as well as decoding the tacss mime types -- acts like an iterator (for all properties marked ITER)", 
	"", "", "", sizeof(taiMimeSource), (void**)0, 1, 0, 0,1);
TypeDef TA_taOBase("taOBase", " owned base class of taBase", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taOBase), (void**)&TAI_taOBase, 0, 0, 0,1);
TypeDef TA_taDataView("taDataView", " base class for views of an object", 
	"", "MULT_INHERIT ", "", sizeof(taDataView), (void**)&TAI_taDataView, 0, 0, 0,1);
TypeDef TA_taNBase("taNBase", " Named, owned base class of taBase", 
	"", "", "", sizeof(taNBase), (void**)&TAI_taNBase, 0, 0, 0,1);
TypeDef TA_SelectEdit("SelectEdit", " Selectively edit members from different objects", 
	"EXT_edit ", "EXT_edit ", "", sizeof(SelectEdit), (void**)&TAI_SelectEdit, 1, 0, 0,1);
TypeDef TA_tabMisc("tabMisc", " miscellaneous useful stuff for taBase", 
	"", "", "", sizeof(tabMisc), (void**)&TAI_tabMisc, 0, 0, 0,1);
TypeDef TA_taBase_ref("taBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TAPtr_ptr("TAPtr_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_MemberDef_ptr("const_MemberDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taBase("const_taBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taBase_ptr("const_taBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMimeSource_ptr("taiMimeSource_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taiMimeSource("const_taiMimeSource", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taiMimeSource_ptr("const_taiMimeSource_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taBase_ref("const_taBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MemberDef_ptr_ref("MemberDef_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_taDataView_ptr("taDataView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taFiler_ptr("taFiler_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_QPixmap_ptr("const_QPixmap_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_bool_ref("bool_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SelectEdit_ptr("SelectEdit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taPtr_impl("taPtr_impl", " 'safe' ptr for taBase objects -- automatically does ref counts", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taPtr_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_taOBase_ptr("taOBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taOBase("const_taOBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taOBase_ref("const_taOBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taDataView("const_taDataView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taDataView_ref("const_taDataView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taNBase("const_taNBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taNBase_ref("const_taNBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taNBase_ptr("taNBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TANPtr("TANPtr", " this comment needed for maketa parser", 
	"", "", "", sizeof(taNBase*), (void**)&TAI_TANPtr, 0, 1, 0,1);
TypeDef TA_taFBase("taFBase", " named/owned base class of taBase, with filename", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taFBase), (void**)&TAI_taFBase, 0, 0, 0,1);
TypeDef TA_taPtrList_taBase_("taPtrList_taBase_", " ", 
	"", "", "", sizeof(taPtrList<taBase>), (void**)&TAI_taPtrList_taBase_, 0, 0, 0,1);
TypeDef TA_const_taFBase("const_taFBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_base_taBase_("taPtrList_base_taBase_", " ", 
	"", "", "", sizeof(taPtrList_base<taBase>), (void**)&TAI_taPtrList_base_taBase_, 0, 0, 0,1);
TypeDef TA_const_taFBase_ref("const_taFBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taBase_PtrList("taBase_PtrList", " a primitive taBase list type, used for global lists that manage taBase objects, ex. in win_base.h", 
	"", "", "", sizeof(taBase_PtrList), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_ta_base("taPtrList_ta_base", " this comment needed for maketa parser", 
	"", "", "", sizeof(taPtrList_ta_base), (void**)0, 0, 0, 0,1);
TypeDef TA_taList_impl("taList_impl", " implementation for a taBase list class", 
	"", "MULT_INHERIT NO_UPDATE_AFTER ", "", sizeof(taList_impl), (void**)&TAI_taList_impl, 0, 0, 0,1);
TypeDef TA_taList_impl_ptr("taList_impl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TABLPtr("TABLPtr", " this comment needed for maketa parser", 
	"", "", "", sizeof(taList_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_const_taList_impl("const_taList_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taList_impl_ref("const_taList_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList("taList", 1, 0, 0, 0, 1, 0);
TypeDef TA_taList_taBase_("taList_taBase_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taList<taBase>), (void**)&TAI_taList_taBase_, 0, 0, 0,1);
TypeDef TA_const_taList("const_taList", 1, 0, 0, 0, 1, 0);
TypeDef TA_taBase_List("taBase_List", " list of objects", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taBase_List), (void**)&TAI_taBase_List, 0, 0, 0,1);
TypeDef TA_const_taList_ref("const_taList_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taBase_List_ptr("taBase_List_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taBase_List("const_taBase_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taBase_List_ref("const_taBase_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taArray_base("taArray_base", " base for arrays (from taBase)", 
	"", "MULT_INHERIT VIRT_BASE NO_INSTANCE NO_UPDATE_AFTER ", "", sizeof(taArray_base), (void**)0, 0, 0, 0,1);
TypeDef TA_taArray("taArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taArray_base("const_taArray_base", 1, 0, 0, 0, 1, 0);
TypeDef TA_taArray_int_("taArray_int_", " ", 
	"", "VIRT_BASE NO_INSTANCE NO_UPDATE_AFTER ", "", sizeof(taArray<int>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taArray_base_ref("const_taArray_base_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_int_Array("int_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(int_Array), (void**)&TAI_int_Array, 0, 0, 0,1);
TypeDef TA_taArray_float_("taArray_float_", " ", 
	"", "VIRT_BASE NO_INSTANCE NO_UPDATE_AFTER ", "", sizeof(taArray<float>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_int_Array("const_int_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_int_Array_ref("const_int_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_float("const_float", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_float_ref("const_float_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_float_Array("float_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(float_Array), (void**)&TAI_float_Array, 0, 0, 0,1);
TypeDef TA_taArray_double_("taArray_double_", " ", 
	"", "VIRT_BASE NO_INSTANCE NO_UPDATE_AFTER ", "", sizeof(taArray<double>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_float_Array("const_float_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_float_Array_ref("const_float_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_double_ref("double_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_double("const_double", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_double_ref("const_double_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_double_Array("double_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(double_Array), (void**)&TAI_double_Array, 0, 0, 0,1);
TypeDef TA_taArray_taString_("taArray_taString_", " ", 
	"", "VIRT_BASE NO_INSTANCE NO_UPDATE_AFTER ", "", sizeof(taArray<taString>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_double_Array("const_double_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_double_Array_ref("const_double_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_String_Array("String_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(String_Array), (void**)&TAI_String_Array, 0, 0, 0,1);
TypeDef TA_const_String_Array("const_String_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_SArg_Array("SArg_Array", " string argument array: has labels for each argument to make it easier in the interface", 
	"", "", "", sizeof(SArg_Array), (void**)&TAI_SArg_Array, 0, 0, 0,1);
TypeDef TA_const_String_Array_ref("const_String_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taArray_long_("taArray_long_", " ", 
	"", "VIRT_BASE NO_INSTANCE NO_UPDATE_AFTER ", "", sizeof(taArray<long>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_SArg_Array("const_SArg_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SArg_Array_ref("const_SArg_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_long("const_long", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_long_ref("const_long_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_long_Array("long_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(long_Array), (void**)&TAI_long_Array, 0, 0, 0,1);
TypeDef TA_voidptr("voidptr", " for maketa, which chokes on void* in a template", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_const_long_Array("const_long_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_taArray_voidptr_("taArray_voidptr_", " ", 
	"", "VIRT_BASE NO_INSTANCE NO_UPDATE_AFTER ", "", sizeof(taArray<void*>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_long_Array_ref("const_long_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_voidptr_ref("voidptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_const_voidptr("const_voidptr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_voidptr_ref("const_voidptr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_voidptr_Array("voidptr_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(voidptr_Array), (void**)&TAI_voidptr_Array, 0, 0, 0,1);
TypeDef TA_const_voidptr_Array("const_voidptr_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_voidptr_Array_ref("const_voidptr_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taMatrix_impl("taMatrix_impl", " ref counted multi-dimensional data array", 
	"NO_INSTANCE ", "VIRT_BASE NO_INSTANCE ", "", sizeof(taMatrix_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taMatrix_impl("const_taMatrix_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_taMatrix("taMatrix", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taMatrix_impl_ref("const_taMatrix_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taMatrix_impl_ptr("taMatrix_impl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taMatrix("const_taMatrix", 1, 0, 0, 0, 1, 0);
TypeDef TA_MatrixPtr_impl("MatrixPtr_impl", " 'safe' ptr for Matrix objects -- automatically does ref counts", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(MatrixPtr_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taMatrix_ref("const_taMatrix_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MatrixPtr_impl_ref("MatrixPtr_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MatrixPtr("MatrixPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_taMatrix_byte_("taMatrix_byte_", "", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taMatrix<byte>), (void**)0, 0, 0, 0,1);
TypeDef TA_MatrixPtr_ref("MatrixPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_byte_Matrix("byte_Matrix", "", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(byte_Matrix), (void**)0, 0, 0, 0,1);
TypeDef TA_const_byte_Matrix("const_byte_Matrix", 1, 0, 0, 0, 1, 0);
TypeDef TA_byte_Matrix_ref("byte_Matrix_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_byte_Matrix_ref("const_byte_Matrix_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MatrixPtr_byte_Matrix_("MatrixPtr_byte_Matrix_", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(MatrixPtr<byte_Matrix>), (void**)0, 0, 0, 0,1);
TypeDef TA_ByteMatrixPtr("ByteMatrixPtr", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(ByteMatrixPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_taMatrix_float_("taMatrix_float_", "", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taMatrix<float>), (void**)0, 0, 0, 0,1);
TypeDef TA_float_Matrix("float_Matrix", " Matrix -- a specialized, richer implementation of Array Matrix is a ref-counted N-dimensional array of data, 1 <= N <= MAX_MATRIX_DIMS. Each concrete class holds one specific type of data, ex. byte or float. The number of dimensions is set at create time, and is lifetime-invariant. The number of elements in each dimension is usually fixed. Data is stored such that the highest dimension items are adjacent, ex: [2][3]: 00, 01, 02, 10, 11, 12 The value for the first dimension (geom[0]) is special: if geom[0]=0 then no allocation is made, and the data will resize if geom[0]=N, then data is allocated at creation -- note that the allocated data is uninitialized The object supports partially filled arrays, but not ragged arrays. Storage in Matrix is based on an instance of the taArray<> template. NOTE: Matrix in its current form is not streamable. Matrix vs. Array 'Array' classes are typically 1-d vectors or interpreted as 2-d arrays. Array supports dynamic operations, like inserting, sorting, etc. Matrix is ref-counted, and intended for sharing/moving raw data around. Matrix explicitly supports dimensionality and dimensional access. ", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(float_Matrix), (void**)0, 0, 0, 0,1);
TypeDef TA_const_float_Matrix("const_float_Matrix", 1, 0, 0, 0, 1, 0);
TypeDef TA_float_Matrix_ref("float_Matrix_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_float_Matrix_ref("const_float_Matrix_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MatrixPtr_float_Matrix_("MatrixPtr_float_Matrix_", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(MatrixPtr<float_Matrix>), (void**)0, 0, 0, 0,1);
TypeDef TA_FloatMatrixPtr("FloatMatrixPtr", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(FloatMatrixPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_taGroup_impl("taGroup_impl", " pre-declare implementation of a group forwards this file:", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup_impl), (void**)&TAI_taGroup_impl, 0, 0, 0,1);
TypeDef TA_taGroup_impl_ptr("taGroup_impl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TAGPtr("TAGPtr", "", 
	"", "", "", sizeof(taGroup_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_taList_taGroup_impl_("taList_taGroup_impl_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taList<taGroup_impl>), (void**)&TAI_taList_taGroup_impl_, 0, 0, 0,1);
TypeDef TA_TALOG("TALOG", " list of groups (LOG)", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(TALOG), (void**)&TAI_TALOG, 0, 0, 0,1);
TypeDef TA_taSubGroup("taSubGroup", " has the sub-groups for a group", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taSubGroup), (void**)&TAI_taSubGroup, 0, 0, 0,1);
TypeDef TA_taGroupItr("taGroupItr", "", 
	"", "", "", sizeof(taGroupItr), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taSubGroup("const_taSubGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_taLeafItr("taLeafItr", " contains the indicies for iterating over leafs", 
	"", "", "", sizeof(taLeafItr), (void**)0, 1, 0, 0,1);
TypeDef TA_const_taSubGroup_ref("const_taSubGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TALOG_ptr("TALOG_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taLeafItr_ref("taLeafItr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taGroup_impl("const_taGroup_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taGroup_impl_ref("const_taGroup_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DMemShareVar("DMemShareVar", " definition of a variable of a given type (FLOAT, DOUBLE, INT) that each proc has some instances of (can be multiple members of a given object) -- these can all be Allgather'ed to sync across procs", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DMemShareVar), (void**)&TAI_DMemShareVar, 0, 0, 0,1);
TypeDef TA_taPtrList_impl_ref("taPtrList_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_DMemShareVar("const_DMemShareVar", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DMemShareVar_ref("const_DMemShareVar_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DMemShare("DMemShare", " collection of objects that are shared across distributed processes: link the objects into this list to share them", 
	"NO_UPDATE_AFTER NO_CSS NO_MEMBERS ", "NO_UPDATE_AFTER NO_CSS NO_MEMBERS ", "", sizeof(DMemShare), (void**)&TAI_DMemShare, 0, 0, 0,1);
TypeDef TA_const_DMemShare("const_DMemShare", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DMemShare_ref("const_DMemShare_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup("taGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_taGroup_taBase_("taGroup_taBase_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taGroup<taBase>), (void**)&TAI_taGroup_taBase_, 0, 0, 0,1);
TypeDef TA_const_taGroup("const_taGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_taGroup_ptr("taGroup_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taGroup_ref("const_taGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taBase_Group("taBase_Group", " group of objects", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taBase_Group), (void**)&TAI_taBase_Group, 0, 0, 0,1);
TypeDef TA_const_taBase_Group("const_taBase_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taBase_Group_ref("const_taBase_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_dumpMisc("dumpMisc", " miscellaneous stuff for dump files", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(dumpMisc), (void**)0, 0, 0, 0,1);
TypeDef TA_VPUnref("VPUnref", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(VPUnref), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_VPUnref_("taPtrList_VPUnref_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<VPUnref>), (void**)&TAI_taPtrList_VPUnref_, 0, 0, 0,1);
TypeDef TA_VPUnref_ptr("VPUnref_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_VPUList("VPUList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(VPUList), (void**)0, 0, 0, 0,1);
TypeDef TA_DumpPathSub("DumpPathSub", " Path element substitution", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathSub), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_DumpPathSub_("taPtrList_DumpPathSub_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<DumpPathSub>), (void**)&TAI_taPtrList_DumpPathSub_, 0, 0, 0,1);
TypeDef TA_DumpPathSub_ptr("DumpPathSub_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_DumpPathSubList("DumpPathSubList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathSubList), (void**)0, 0, 0, 0,1);
TypeDef TA_DumpPathToken("DumpPathToken", " Path tokens for quicker loading", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathToken), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_DumpPathToken_("taPtrList_DumpPathToken_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<DumpPathToken>), (void**)&TAI_taPtrList_DumpPathToken_, 0, 0, 0,1);
TypeDef TA_DumpPathToken_ptr("DumpPathToken_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_DumpPathTokenList("DumpPathTokenList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathTokenList), (void**)0, 0, 0, 0,1);
TypeDef TA_NameValue("NameValue", " name/value pair", 
	"", "NO_UPDATE_AFTER ", "", sizeof(NameValue), (void**)&TAI_NameValue, 0, 0, 0,1);
TypeDef TA_unsigned_long_ary("unsigned_long_ary", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_NameValue("const_NameValue", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NameValue_ref("const_NameValue_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TypeDefault("TypeDefault", " Contains a default object of a type", 
	"EXT_def ", "EXT_def NO_UPDATE_AFTER ", "", sizeof(TypeDefault), (void**)&TAI_TypeDefault, 0, 0, 0,1);
TypeDef TA_taiMenuEl("taiMenuEl", " holds menu data -- can be the root item of a submenu", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMenuEl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_TypeDefault("const_TypeDefault", 1, 0, 0, 0, 1, 0);
TypeDef TA_cssProgSpace("cssProgSpace", " ", 
	"", "NO_INSTANCE ", "", sizeof(cssProgSpace), (void**)0, 0, 0, 0,1);
TypeDef TA_const_TypeDefault_ref("const_TypeDefault_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_cssProgSpace_ptr("cssProgSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ScriptBase("ScriptBase", " class for adding a script to other objects", 
	"", "", "", sizeof(ScriptBase), (void**)0, 1, 0, 0,1);
TypeDef TA_taPtrList_ScriptBase_("taPtrList_ScriptBase_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taPtrList<ScriptBase>), (void**)&TAI_taPtrList_ScriptBase_, 0, 0, 0,1);
TypeDef TA_ScriptBase_ref("ScriptBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ScriptBase("const_ScriptBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_ScriptBase_List("ScriptBase_List", " list of script base objects (doesn't own anything)", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(ScriptBase_List), (void**)0, 0, 0, 0,1);
TypeDef TA_const_ScriptBase_ref("const_ScriptBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Script("Script", " an object for maintaining and running arbitrary scripts", 
	"EXT_scr ", "MULT_INHERIT EXT_scr ", "", sizeof(Script), (void**)&TAI_Script, 1, 0, 0,1);
TypeDef TA_taGroup_Script_("taGroup_Script_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup<Script>), (void**)&TAI_taGroup_Script_, 0, 0, 0,1);
TypeDef TA_const_Script("const_Script", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Script_ref("const_Script_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiMenuEl_ptr("taiMenuEl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Script_MGroup("Script_MGroup", "", 
	"", "", "", sizeof(Script_MGroup), (void**)&TAI_Script_MGroup, 0, 0, 0,1);
TypeDef TA_taiData("taiData", " base class for data elements", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiData), (void**)&TAI_taiData, 0, 0, 0,1);
TypeDef TA_const_Script_MGroup("const_Script_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_Dialog("Dialog", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(Dialog), (void**)0, 0, 0, 0,1);
TypeDef TA_const_Script_MGroup_ref("const_Script_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiMisc("taiMisc", " miscellaneous stuff for tai", 
	"", "", "", sizeof(taiMisc), (void**)&TAI_taiMisc, 0, 0, 0,1);
TypeDef TA_taiDataHost("taiDataHost", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_taiAction("taiAction", " taiAction is for generic parameterless callbacks", 
	"", "", "", sizeof(taiAction), (void**)0, 1, 0, 0,1);
TypeDef TA_taiEditDataHost("taiEditDataHost", "  // edit host for classes -- default is to assume a EditDataPanel as the widget, but the Edit subclasses override that", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiEditDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMenuAction("taiMenuAction", " taiMenuAction takes a MenuEl as a parameter", 
	"", "", "", sizeof(taiMenuAction), (void**)0, 1, 0, 0,1);
TypeDef TA_taiEditDataHost_ptr("taiEditDataHost_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMenu("taiMenu", " (possibly) hierarchical menu for selecting a single item ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_iAction_List("iAction_List", " corresponds to a menu item and/or toolbar button -- items are stickily created as needed (browsewin creates the common set)", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iAction_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMethodData("taiMethodData", " all representations of member functions must inherit from this one", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMethodData), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taiAction("const_taiAction", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taiAction_ref("const_taiAction_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiAction_ref("taiAction_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiMenuAction_ref("taiMenuAction_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taiMenuAction("const_taiMenuAction", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taiMenuAction_ref("const_taiMenuAction_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiDataHost_ptr("taiDataHost_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiData_ptr("taiData_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taPtrList_taiData_("taPtrList_taiData_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taiData>), (void**)&TAI_taPtrList_taiData_, 0, 0, 0,1);
TypeDef TA_taiDataList("taiDataList", " taiData list, OBJECTS ARE DELETED ON REMOVAL", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiDataList), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMenu_ptr("taiMenu_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiEditButton("taiEditButton", " actually an edit menu... -- flgReadOnly creates menu which only allows for members", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS EDIT_READ_ONLY ", "", sizeof(taiEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_taiToggle("taiToggle", " class taiLabel;", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiToggle), (void**)0, 0, 0, 0,1);
TypeDef TA_taiTypeHier("taiTypeHier", " for menus of type hierarchy for menus of type hierarchy //////////////////////////////// ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTypeHier), (void**)0, 0, 0, 0,1);
TypeDef TA_taiCompData("taiCompData", " base class for composite data elements", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS NO_INSTANCE ", "", sizeof(taiCompData), (void**)0, 0, 0, 0,1);
TypeDef TA_taiField("taiField", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiField), (void**)0, 0, 0, 0,1);
TypeDef TA_taiIncrField("taiIncrField", " increment/decrement field", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiIncrField), (void**)0, 0, 0, 0,1);
TypeDef TA_taiPlusToggle("taiPlusToggle", " a regular field plus a toggle..", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiPlusToggle), (void**)0, 0, 0, 0,1);
TypeDef TA_taiComboBox("taiComboBox", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiComboBox), (void**)0, 0, 0, 0,1);
TypeDef TA_taiBitBox("taiBitBox", " supports enums that are bit fields (TODO: maybe support int fields too)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiBitBox), (void**)0, 0, 0, 0,1);
TypeDef TA_taiPolyData("taiPolyData", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiPolyData), (void**)0, 0, 0, 0,1);
TypeDef TA_taiDataDeck("taiDataDeck", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiDataDeck), (void**)0, 0, 0, 0,1);
TypeDef TA_const_QObject_ptr("const_QObject_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taiAction_ptr("const_taiAction_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taiMenuAction_ptr("const_taiMenuAction_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiSubMenuEl("taiSubMenuEl", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiSubMenuEl), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_taiMenuEl_("taPtrList_taiMenuEl_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taiMenuEl>), (void**)&TAI_taPtrList_taiMenuEl_, 0, 0, 0,1);
TypeDef TA_taiMenuEl_List("taiMenuEl_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMenuEl_List), (void**)0, 0, 0, 0,1);
TypeDef TA_const_QKeySequence_ptr("const_QKeySequence_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiSubMenuEl_ptr("taiSubMenuEl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taPtrList_taiMenu_("taPtrList_taiMenu_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taiMenu>), (void**)&TAI_taPtrList_taiMenu_, 0, 0, 0,1);
TypeDef TA_taiMenu_List("taiMenu_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMenu_List), (void**)0, 0, 0, 0,1);
TypeDef TA_const_QIconSet_ref("const_QIconSet_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_TAPtr("const_TAPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_taiObjChooser("taiObjChooser", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiObjChooser), (void**)0, 0, 0, 0,1);
TypeDef TA_taiFileButton("taiFileButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiFileButton), (void**)0, 0, 0, 0,1);
TypeDef TA_taiObjChooser_ptr("taiObjChooser_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMenuAction_ptr("taiMenuAction_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiElBase("taiElBase", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiElBase), (void**)0, 0, 0, 0,1);
TypeDef TA_taiSubToken("taiSubToken", " Menu for sub tokens of a giventype", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiSubToken), (void**)0, 0, 0, 0,1);
TypeDef TA_taiToken("taiToken", " for making menus of tokens for making menus of tokens", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiToken), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMemberDefMenu("taiMemberDefMenu", " Menu for memberdefs of a typedef in the object with a MDTYPE_xxx option", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMemberDefMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMethodDefMenu("taiMethodDefMenu", " Menu for memberdefs of a typedef in the object with a MDTYPE_xxx option", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMethodDefMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMethMenu("taiMethMenu", " all representations of member functions must inherit from this one", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMethMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMethButton("taiMethButton", " button representation of a method -- uses the QPushButton, and sets it as the Rep as well", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMethButton), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMethToggle("taiMethToggle", " toggle representation of a method (does not call directly, but checks flag)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMethToggle), (void**)0, 0, 0, 0,1);
TypeDef TA_iDataPanel("iDataPanel", 1, 0, 0, 0, 1, 0);
TypeDef TA_HiLightButton("HiLightButton", " combines v3.2 Script Button and HiLightButton -- set script_ to script name, to enable ScriptButton functionality", 
	"", "", "", sizeof(HiLightButton), (void**)0, 1, 0, 0,1);
TypeDef TA_iContextLabel("iContextLabel", "", 
	"", "", "", sizeof(iContextLabel), (void**)0, 1, 0, 0,1);
TypeDef TA_taiChoiceDialog("taiChoiceDialog", "", 
	"", "", "", sizeof(taiChoiceDialog), (void**)0, 1, 0, 0,1);
TypeDef TA_EditDataPanel("EditDataPanel", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(EditDataPanel), (void**)0, 0, 0, 0,1);
TypeDef TA_HiLightButton_ptr("HiLightButton_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Dialog_ptr("Dialog_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iContextLabel_ptr("iContextLabel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Dialog_ptr_ref("Dialog_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_Member_List("Member_List", " list of members -- simpler than MemberSpace, no ownership", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(Member_List), (void**)&TAI_Member_List, 0, 0, 0,1);
TypeDef TA_EditDataPanel_ptr("EditDataPanel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiDataList_ptr("taiDataList_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taiDataList("const_taiDataList", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taiDataList_ref("const_taiDataList_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiMethodData_ptr("taiMethodData_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iDataPanelFrame("iDataPanelFrame", " interface for panel frames", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iDataPanelFrame), (void**)0, 0, 0, 0,1);
TypeDef TA_iDataPanelSet("iDataPanelSet", "  contains 0 or more sub-data-panels, and a small control bar for selecting panels", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "IGNORE NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iDataPanelSet), (void**)0, 0, 0, 0,1);
TypeDef TA_taiTypeBase("taiTypeBase", " graphically represents a type", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTypeBase), (void**)&TAI_taiTypeBase, 0, 0, 0,1);
TypeDef TA_taiTypeBase_ptr("taiTypeBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiViewType("taiViewType", "  viewer services for the type", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiViewType), (void**)&TAI_taiViewType, 0, 0, 0,1);
TypeDef TA_taiType("taiType", "  graphically represents a type", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiType), (void**)&TAI_taiType, 0, 0, 0,1);
TypeDef TA_taiViewType_ptr("taiViewType_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMember("taiMember", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMember), (void**)&TAI_taiMember, 0, 0, 0,1);
TypeDef TA_taiEdit("taiEdit", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiEdit), (void**)&TAI_taiEdit, 0, 0, 0,1);
TypeDef TA_taiMember_ptr("taiMember_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiType_ptr_ptr("taiType_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_taiEdit_ptr("taiEdit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiViewType_ptr_ptr("taiViewType_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_taiType_ptr("taiType_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMethod("taiMethod", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMethod), (void**)&TAI_taiMethod, 0, 0, 0,1);
TypeDef TA_iDataPanel_ptr("iDataPanel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMethod_ptr("taiMethod_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iDataPanelFrame_ptr("iDataPanelFrame_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iDataPanelSet_ptr("iDataPanelSet_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiEdit_ptr_ptr("taiEdit_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_taiArgType("taiArgType", " unlike taiTypes, these are created and destroyed each time", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiArgType), (void**)&TAI_taiArgType, 0, 0, 0,1);
TypeDef TA_taPtrList_taiType_("taPtrList_taiType_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taiType>), (void**)&TAI_taPtrList_taiType_, 0, 0, 0,1);
TypeDef TA_taiType_List("taiType_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiType_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taiIntType("taiIntType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiIntType), (void**)&TAI_taiIntType, 0, 0, 0,1);
TypeDef TA_taiEnumType("taiEnumType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiEnumType), (void**)&TAI_taiEnumType, 0, 0, 0,1);
TypeDef TA_taiBoolType("taiBoolType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiBoolType), (void**)&TAI_taiBoolType, 0, 0, 0,1);
TypeDef TA_taiClassType("taiClassType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiClassType), (void**)&TAI_taiClassType, 0, 0, 0,1);
TypeDef TA_taiStringType("taiStringType", " note: inherits handlesReadOnly==true", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiStringType), (void**)&TAI_taiStringType, 0, 0, 0,1);
TypeDef TA_gpiListType("gpiListType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiListType), (void**)&TAI_gpiListType, 0, 0, 0,1);
TypeDef TA_gpiGroupType("gpiGroupType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiGroupType), (void**)&TAI_gpiGroupType, 0, 0, 0,1);
TypeDef TA_gpiArray_Type("gpiArray_Type", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiArray_Type), (void**)&TAI_gpiArray_Type, 0, 0, 0,1);
TypeDef TA_taiTokenPtrType("taiTokenPtrType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTokenPtrType), (void**)&TAI_taiTokenPtrType, 0, 0, 0,1);
TypeDef TA_taiTypePtr("taiTypePtr", " typedef pointer", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTypePtr), (void**)&TAI_taiTypePtr, 0, 0, 0,1);
TypeDef TA_taiFilePtrType("taiFilePtrType", " ptr to tai_getFiles", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiFilePtrType), (void**)&TAI_taiFilePtrType, 0, 0, 0,1);
TypeDef TA_taiDefaultEdit("taiDefaultEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiDefaultEdit), (void**)&TAI_taiDefaultEdit, 0, 0, 0,1);
TypeDef TA_taiMember_ptr_ptr("taiMember_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_taiTokenPtrMember("taiTokenPtrMember", " for taBase pointer members (allows scoping by owner obj)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTokenPtrMember), (void**)&TAI_taiTokenPtrMember, 0, 0, 0,1);
TypeDef TA_TypeDefault_ptr("TypeDefault_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiDefaultToken("taiDefaultToken", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiDefaultToken), (void**)&TAI_taiDefaultToken, 0, 0, 0,1);
TypeDef TA_taiSubTokenPtrMember("taiSubTokenPtrMember", " a token ptr that points to sub-objects of current object", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiSubTokenPtrMember), (void**)&TAI_taiSubTokenPtrMember, 0, 0, 0,1);
TypeDef TA_taiTypePtrMember("taiTypePtrMember", " typedef ptrs that have member-comment directives", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTypePtrMember), (void**)&TAI_taiTypePtrMember, 0, 0, 0,1);
TypeDef TA_taiMemberDefPtrMember("taiMemberDefPtrMember", " pointer to a member-def", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMemberDefPtrMember), (void**)&TAI_taiMemberDefPtrMember, 0, 0, 0,1);
TypeDef TA_taiFunPtrMember("taiFunPtrMember", " pointer to a function", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiFunPtrMember), (void**)&TAI_taiFunPtrMember, 0, 0, 0,1);
TypeDef TA_taiCondEditMember("taiCondEditMember", " conditional editing member", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiCondEditMember), (void**)&TAI_taiCondEditMember, 0, 0, 0,1);
TypeDef TA_taiTDefaultMember("taiTDefaultMember", " special for the TypeDefault member (add the 'active' box)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTDefaultMember), (void**)&TAI_taiTDefaultMember, 0, 0, 0,1);
TypeDef TA_taiMethod_ptr_ptr("taiMethod_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_taiButtonMethod("taiButtonMethod", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiButtonMethod), (void**)&TAI_taiButtonMethod, 0, 0, 0,1);
TypeDef TA_taiMenuMethod("taiMenuMethod", " covers MENU and MENU_BUTTON types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMenuMethod), (void**)&TAI_taiMenuMethod, 0, 0, 0,1);
TypeDef TA_taiArgType_ptr("taiArgType_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiStreamArgType("taiStreamArgType", " for ios derived args (uses a file-requestor)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiStreamArgType), (void**)&TAI_taiStreamArgType, 0, 0, 0,1);
TypeDef TA_taiBoolArgType("taiBoolArgType", " for bool int types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiBoolArgType), (void**)&TAI_taiBoolArgType, 0, 0, 0,1);
TypeDef TA_taiTokenPtrArgType("taiTokenPtrArgType", " for pointers to tokens (uses appropriate scoping)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTokenPtrArgType), (void**)&TAI_taiTokenPtrArgType, 0, 0, 0,1);
TypeDef TA_taiTypePtrArgType("taiTypePtrArgType", " for typedef ptr types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiTypePtrArgType), (void**)&TAI_taiTypePtrArgType, 0, 0, 0,1);
TypeDef TA_taiMemberPtrArgType("taiMemberPtrArgType", " for memberdef ptr types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMemberPtrArgType), (void**)&TAI_taiMemberPtrArgType, 0, 0, 0,1);
TypeDef TA_taiMethodPtrArgType("taiMethodPtrArgType", " for methoddef ptr types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taiMethodPtrArgType), (void**)&TAI_taiMethodPtrArgType, 0, 0, 0,1);
TypeDef TA_gpiDefaultEl("gpiDefaultEl", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiDefaultEl), (void**)&TAI_gpiDefaultEl, 0, 0, 0,1);
TypeDef TA_gpiLinkGP("gpiLinkGP", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiLinkGP), (void**)&TAI_gpiLinkGP, 0, 0, 0,1);
TypeDef TA_gpiLinkList("gpiLinkList", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiLinkList), (void**)&TAI_gpiLinkList, 0, 0, 0,1);
TypeDef TA_gpiFromGpTokenPtrMember("gpiFromGpTokenPtrMember", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiFromGpTokenPtrMember), (void**)&TAI_gpiFromGpTokenPtrMember, 0, 0, 0,1);
TypeDef TA_gpiTAPtrArgType("gpiTAPtrArgType", " for taBase pointers in groups, sets the typedef to be the right one..", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiTAPtrArgType), (void**)&TAI_gpiTAPtrArgType, 0, 0, 0,1);
TypeDef TA_gpiInObjArgType("gpiInObjArgType", " for taBase pointers in groups with ARG_IN_OBJ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiInObjArgType), (void**)&TAI_gpiInObjArgType, 0, 0, 0,1);
TypeDef TA_gpiFromGpArgType("gpiFromGpArgType", " for taBase pointers with FROM_GROUP_xxx", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiFromGpArgType), (void**)&TAI_gpiFromGpArgType, 0, 0, 0,1);
TypeDef TA_gpiListEdit("gpiListEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiListEdit), (void**)&TAI_gpiListEdit, 0, 0, 0,1);
TypeDef TA_gpiGroupEdit("gpiGroupEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiGroupEdit), (void**)&TAI_gpiGroupEdit, 0, 0, 0,1);
TypeDef TA_gpiArrayEdit("gpiArrayEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiArrayEdit), (void**)&TAI_gpiArrayEdit, 0, 0, 0,1);
TypeDef TA_SArgEdit("SArgEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SArgEdit), (void**)&TAI_SArgEdit, 0, 0, 0,1);
TypeDef TA_gpiSelectEdit("gpiSelectEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiSelectEdit), (void**)&TAI_gpiSelectEdit, 0, 0, 0,1);
TypeDef TA_tabViewType("tabViewType", " for taBase and descendants", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(tabViewType), (void**)&TAI_tabViewType, 0, 0, 0,1);
TypeDef TA_tabOViewType("tabOViewType", " for taOBase and descendants", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(tabOViewType), (void**)&TAI_tabOViewType, 0, 0, 0,1);
TypeDef TA_tabListViewType("tabListViewType", " for taList", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(tabListViewType), (void**)&TAI_tabListViewType, 0, 0, 0,1);
TypeDef TA_tabGroupViewType("tabGroupViewType", " for taGroup", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(tabGroupViewType), (void**)&TAI_tabGroupViewType, 0, 0, 0,1);
TypeDef TA_taiMimeItem("taiMimeItem", " we inherit from QObject so the instance can be notified if source bails -- we create an interface and multiple subclasses to keep dependencies clear (also minimizes member data, but that is usually not important)", 
	"", "", "", sizeof(taiMimeItem), (void**)0, 1, 0, 0,1);
TypeDef TA_taiMimeItem_ptr("taiMimeItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiClipData("taiClipData", "", 
	"", "", "", sizeof(taiClipData), (void**)0, 1, 0, 0,1);
TypeDef TA_taiSingleClipData("taiSingleClipData", " ClipData for a single object -- simplest, most common case", 
	"", "", "", sizeof(taiSingleClipData), (void**)0, 1, 0, 0,1);
TypeDef TA_taiMultiClipData("taiMultiClipData", " ClipData for multi selection of objects", 
	"", "", "", sizeof(taiMultiClipData), (void**)0, 1, 0, 0,1);
TypeDef TA_taPtrList_taiMimeItem_("taPtrList_taiMimeItem_", " ", 
	"", "", "", sizeof(taPtrList<taiMimeItem>), (void**)&TAI_taPtrList_taiMimeItem_, 0, 0, 0,1);
TypeDef TA_tabSndMimeItem("tabSndMimeItem", " specialized for taBase sending", 
	"", "", "", sizeof(tabSndMimeItem), (void**)0, 1, 0, 0,1);
TypeDef TA_taiMimeItem_List("taiMimeItem_List", " ////////////////////////////////", 
	"", "", "", sizeof(taiMimeItem_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taiRcvMimeItem("taiRcvMimeItem", " specialized for tacss receiving", 
	"", "", "", sizeof(taiRcvMimeItem), (void**)0, 1, 0, 0,1);
TypeDef TA_taiMimeItem_List_ptr("taiMimeItem_List_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_QMimeSource_ptr("const_QMimeSource_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiClipData_ptr("taiClipData_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_istringstream_ref("istringstream_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiIntMimeSource("taiIntMimeSource", " a taiMimeSource that wraps our own in-process taiClipData", 
	"", "", "", sizeof(taiIntMimeSource), (void**)0, 1, 0, 0,1);
TypeDef TA_taiExtMimeSource("taiExtMimeSource", " a taiMime that wraps data from the clipboard etc.", 
	"", "", "", sizeof(taiExtMimeSource), (void**)0, 1, 0, 0,1);
TypeDef TA_taiMimeSourcePtr("taiMimeSourcePtr", "", 
	"", "", "", sizeof(taiMimeSource*), (void**)0, 0, 1, 0,1);
TypeDef TA_NodeBitmapFlags("NodeBitmapFlags", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_tabDataLink("tabDataLink", " DataLink for taBase objects", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(tabDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taiToolBar("taiToolBar", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taiToolBar), (void**)0, 0, 0, 0,1);
TypeDef TA_taiToolBar_List("taiToolBar_List", " each BrowseWin maintains its existent toolbars in this list", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taiToolBar_List), (void**)0, 0, 0, 0,1);
TypeDef TA_WinGeometry("WinGeometry", " Window geometry (position, size) saved in 1.0f-relative coordinates", 
	"", "INLINE ", "", sizeof(WinGeometry), (void**)&TAI_WinGeometry, 0, 0, 0,1);
TypeDef TA_ToolBar("ToolBar", " proxy for Toolbars", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(ToolBar), (void**)0, 0, 0, 0,1);
TypeDef TA_DataViewer("DataViewer", " the base type for objects with a top-level window or panel and a menu", 
	"", "VIRT_BASE ", "", sizeof(DataViewer), (void**)&TAI_DataViewer, 0, 0, 0,1);
TypeDef TA_ISelectable("ISelectable", " ", 
	"", "", "", sizeof(ISelectable), (void**)0, 1, 0, 0,1);
TypeDef TA_IDataViewHost("IDataViewHost", "", 
	"", "", "", sizeof(IDataViewHost), (void**)0, 1, 0, 0,1);
TypeDef TA_iListViewItem("iListViewItem", "  base class for Tree and List nodes", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "MULT_INHERIT NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iListViewItem), (void**)0, 0, 0, 0,1);
TypeDef TA_taiListDataNode("taiListDataNode", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taiListDataNode), (void**)0, 0, 0, 0,1);
TypeDef TA_iListDataPanel("iListDataPanel", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iListDataPanel), (void**)0, 0, 0, 0,1);
TypeDef TA_DataLink_QObj("DataLink_QObj", "", 
	"", "", "", sizeof(DataLink_QObj), (void**)0, 1, 0, 0,1);
TypeDef TA_DataLink_QObj_ptr("DataLink_QObj_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_tabODataLink("tabODataLink", " DataLink for taOBase objects", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(tabODataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_ToolBar_ptr("ToolBar_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_tabListDataLink("tabListDataLink", " DataLink for taList objects -- note that it also manages the ListView nodes", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(tabListDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taiToolBar_ptr("taiToolBar_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_tabGroupDataLink("tabGroupDataLink", " DataLink for taGroup objects -- adds additional 'subgroups' node under the 'items' node, for any subgroups", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(tabGroupDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_IDataViewHost_ptr("IDataViewHost_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taPtrList_ISelectable_("taPtrList_ISelectable_", " ", 
	"", "", "", sizeof(taPtrList<ISelectable>), (void**)&TAI_taPtrList_ISelectable_, 0, 0, 0,1);
TypeDef TA_ISelectable_ptr("ISelectable_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ISelectable_PtrList("ISelectable_PtrList", " for selection lists", 
	"", "", "", sizeof(ISelectable_PtrList), (void**)0, 0, 0, 0,1);
TypeDef TA_DataViewer_ptr("DataViewer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_ISelectable_PtrList("const_ISelectable_PtrList", 1, 0, 0, 0, 1, 0);
TypeDef TA_ISelectable_PtrList_ref("ISelectable_PtrList_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ISelectable_PtrList_ref("const_ISelectable_PtrList_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ToolBar("const_ToolBar", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ToolBar_ref("const_ToolBar_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_ToolBar_("taList_ToolBar_", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_UPDATE_AFTER NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taList<ToolBar>), (void**)0, 0, 0, 0,1);
TypeDef TA_ToolBar_List("ToolBar_List", " each BrowseWin maintains its existent toolbars in this list", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(ToolBar_List), (void**)0, 0, 0, 0,1);
TypeDef TA_const_ToolBar_List("const_ToolBar_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_WinGeometry("const_WinGeometry", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ToolBar_List_ref("const_ToolBar_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_WinGeometry_ref("const_WinGeometry_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_DataViewer("const_DataViewer", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataViewer_ref("const_DataViewer_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_DataViewer_("taList_DataViewer_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<DataViewer>), (void**)&TAI_taList_DataViewer_, 0, 0, 0,1);
TypeDef TA_DataViewer_List("DataViewer_List", " ", 
	"", "", "", sizeof(DataViewer_List), (void**)&TAI_DataViewer_List, 0, 0, 0,1);
TypeDef TA_iTabDataViewer("iTabDataViewer", " viewer window used for class browsing", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iTabDataViewer), (void**)0, 0, 0, 0,1);
TypeDef TA_const_DataViewer_List("const_DataViewer_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_iDataPanel_("taPtrList_iDataPanel_", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<iDataPanel>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_DataViewer_List_ref("const_DataViewer_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iTabDataViewer_ptr("iTabDataViewer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iDataPanel_PtrList("iDataPanel_PtrList", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iDataPanel_PtrList), (void**)0, 0, 0, 0,1);
TypeDef TA_iViewPanelFrame("iViewPanelFrame", " frame for gui interface to a view element -- usually posted by the view, and locked", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iViewPanelFrame), (void**)0, 0, 0, 0,1);
TypeDef TA_iListViewItem_ptr("iListViewItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iListDataPanel_ptr("iListDataPanel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiListDataNode_ptr("taiListDataNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_QPoint_ref("const_QPoint_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiTreeDataNode("taiTreeDataNode", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taiTreeDataNode), (void**)0, 0, 0, 0,1);
TypeDef TA_tabTreeDataNode("tabTreeDataNode", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(tabTreeDataNode), (void**)0, 0, 0, 0,1);
TypeDef TA_tabListTreeDataNode("tabListTreeDataNode", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(tabListTreeDataNode), (void**)0, 0, 0, 0,1);
TypeDef TA_tabGroupTreeDataNode("tabGroupTreeDataNode", "", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(tabGroupTreeDataNode), (void**)0, 0, 0, 0,1);
TypeDef TA_iDataBrowserBase("iDataBrowserBase", " base of viewer window used for class browsing", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iDataBrowserBase), (void**)0, 0, 0, 0,1);
TypeDef TA_iDataBrowser("iDataBrowser", " viewer window used for class browsing of taBase objects", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iDataBrowser), (void**)0, 0, 0, 0,1);
TypeDef TA_DataBrowser("DataBrowser", "  the base type for objects with a top-level window or panel and a menu", 
	"", "", "", sizeof(DataBrowser), (void**)&TAI_DataBrowser, 0, 0, 0,1);
TypeDef TA_taiTreeDataNode_ptr("taiTreeDataNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iDataBrowserBase_ptr("iDataBrowserBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_tabDataLink_ptr("tabDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_tabListDataLink_ptr("tabListDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_tabGroupDataLink_ptr("tabGroupDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_DataBrowser_ptr("DataBrowser_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iDataBrowser_ptr("iDataBrowser_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_DataBrowser("const_DataBrowser", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataBrowser_ref("const_DataBrowser_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taTypeInfoTreeDataNode("taTypeInfoTreeDataNode", " node for type info, like type, enum, method, etc.", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taTypeInfoTreeDataNode), (void**)0, 0, 0, 0,1);
TypeDef TA_taTypeSpaceTreeDataNode("taTypeSpaceTreeDataNode", " node for spaces, ex. enumspace, typespace, etc.", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taTypeSpaceTreeDataNode), (void**)0, 0, 0, 0,1);
TypeDef TA_iClassBrowser("iClassBrowser", " viewer window used for class browsing", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(iClassBrowser), (void**)0, 0, 0, 0,1);
TypeDef TA_ClassBrowser("ClassBrowser", " the base type for objects with a top-level window or panel and a menu", 
	"", "", "", sizeof(ClassBrowser), (void**)&TAI_ClassBrowser, 0, 0, 0,1);
TypeDef TA_TypeInfoKind("TypeInfoKind", " used in switch statements to particularize instances", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_const_TypeInfoKind("const_TypeInfoKind", 1, 0, 0, 0, 1, 0);
TypeDef TA_taClassDataLink("taClassDataLink", " DataLink for TypeInfo objects", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taClassDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_TypeItem_ptr("TypeItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taTypeInfoDataLink("taTypeInfoDataLink", " DataLink for TypeInfo objects", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taTypeInfoDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taTypeSpaceDataLink_Base("taTypeSpaceDataLink_Base", " DataLink for XxxSpace objects -- note that it also manages the ListView nodes", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taTypeSpaceDataLink_Base), (void**)0, 0, 0, 0,1);
TypeDef TA_taEnumSpaceDataLink("taEnumSpaceDataLink", " DataLink for EnumSpace objects -- note that it also manages the ListView nodes", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taEnumSpaceDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taTypeSpaceDataLink("taTypeSpaceDataLink", " DataLink for TypeSpace objects -- note that it also manages the ListView nodes", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taTypeSpaceDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taMethodSpaceDataLink("taMethodSpaceDataLink", " DataLink for MethodSpace objects -- note that it also manages the ListView nodes", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taMethodSpaceDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taMemberSpaceDataLink("taMemberSpaceDataLink", " DataLink for MemberSpace objects -- note that it also manages the ListView nodes", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taMemberSpaceDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taTypeInfoDataLink_ptr("taTypeInfoDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taTypeSpaceDataLink_ptr("taTypeSpaceDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ClassBrowser_ptr("ClassBrowser_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iClassBrowser_ptr("iClassBrowser_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_ClassBrowser("const_ClassBrowser", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ClassBrowser_ref("const_ClassBrowser_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_gpiListEditButton("gpiListEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiListEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiGroupEditButton("gpiGroupEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiGroupEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiSubEditButton("gpiSubEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiSubEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiLinkEditButton("gpiLinkEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiLinkEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiListLinkEditButton("gpiListLinkEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiListLinkEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiArrayEditButton("gpiArrayEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiArrayEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiListEls("gpiListEls", " menu of elements in the list", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiListEls), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiGroupEls("gpiGroupEls", " menu of elements in the group", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiGroupEls), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiSubGroups("gpiSubGroups", " menu of sub-groups within a group", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiSubGroups), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiElTypes("gpiElTypes", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiElTypes), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiNewFuns("gpiNewFuns", " functions to call during New", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiNewFuns), (void**)0, 0, 0, 0,1);
TypeDef TA_taiIncrField_ptr("taiIncrField_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_gpiNewFuns_ptr("gpiNewFuns_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_gpiElTypes_ptr("gpiElTypes_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_gpiListNew("gpiListNew", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiListNew), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiSubGroups_ptr("gpiSubGroups_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_gpiGroupNew("gpiGroupNew", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiGroupNew), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiList_ElData("gpiList_ElData", " contains data_els for one member of List", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiList_ElData), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_gpiList_ElData_("taPtrList_gpiList_ElData_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<gpiList_ElData>), (void**)&TAI_taPtrList_gpiList_ElData_, 0, 0, 0,1);
TypeDef TA_gpiList_ElDataList("gpiList_ElDataList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiList_ElDataList), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiMultiEditDataHost("gpiMultiEditDataHost", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiMultiEditDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiListDataHost("gpiListDataHost", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiListDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiGroupDataHost("gpiGroupDataHost", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiGroupDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiArrayEditDataHost("gpiArrayEditDataHost", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiArrayEditDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_SArgEditDataHost("SArgEditDataHost", " ", 
	"NO_CSS NO_MEMBERS NO_INSTANCE ", "NO_CSS NO_MEMBERS NO_INSTANCE ", "", sizeof(SArgEditDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_gpiSelectEditDataHost("gpiSelectEditDataHost", " edit only selected items from a range of ta-base objects", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpiSelectEditDataHost), (void**)0, 0, 0, 0,1);
TypeDef TA_SelectEditConfig("SelectEditConfig", " special parameters for controlling the select edit display", 
	"", "EDIT_INLINE ", "", sizeof(SelectEditConfig), (void**)&TAI_SelectEditConfig, 0, 0, 0,1);
TypeDef TA_const_SelectEdit("const_SelectEdit", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SelectEditConfig("const_SelectEditConfig", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SelectEdit_ref("const_SelectEdit_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SelectEditConfig_ref("const_SelectEditConfig_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbVec2s_ref("const_SbVec2s_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iPoint("iPoint", "   ", 
	"", "", "", sizeof(iPoint), (void**)&TAI_iPoint, 0, 0, 0,1);
TypeDef TA_iVec2i("iVec2i", " synonym", 
	"", "", "", sizeof(iVec2i), (void**)0, 0, 0, 0,1);
TypeDef TA_iPoint_ref("iPoint_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iPoint("const_iPoint", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_iPoint_ref("const_iPoint_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbVec3s_ref("const_SbVec3s_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iVec3i("iVec3i", " ", 
	"", "", "", sizeof(iVec3i), (void**)&TAI_iVec3i, 0, 0, 0,1);
TypeDef TA_const_QSize_ref("const_QSize_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iVec3i_ref("iVec3i_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iVec3i("const_iVec3i", 1, 0, 0, 0, 1, 0);
TypeDef TA_iSize("iSize", "   ", 
	"", "", "", sizeof(iSize), (void**)&TAI_iSize, 0, 0, 0,1);
TypeDef TA_const_iVec3i_ref("const_iVec3i_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iSize("const_iSize", 1, 0, 0, 0, 1, 0);
TypeDef TA_iSize_ref("iSize_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iSize_ref("const_iSize_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QRect_ref("const_QRect_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iRect("iRect", "   ", 
	"", "", "", sizeof(iRect), (void**)&TAI_iRect, 0, 0, 0,1);
TypeDef TA_iRect_ref("iRect_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iRect("const_iRect", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_iRect_ref("const_iRect_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbVec3f_ref("const_SbVec3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iVec3f("iVec3f", " 3d vector, for things like points and sizes", 
	"", "", "", sizeof(iVec3f), (void**)&TAI_iVec3f, 0, 0, 0,1);
TypeDef TA_const_iVec3f("const_iVec3f", 1, 0, 0, 0, 1, 0);
TypeDef TA_iVec3f_ref("iVec3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iVec3f_ref("const_iVec3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iBox3f("iBox3f", " 3d box, typically used for a bounding box in a normalized coordinate system", 
	"", "", "", sizeof(iBox3f), (void**)&TAI_iBox3f, 0, 0, 0,1);
TypeDef TA_TypeDef_ptr("TypeDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iBox3f_ref("iBox3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iBox3f("const_iBox3f", 1, 0, 0, 0, 1, 0);
TypeDef TA_uint("uint", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_iBox3f_ref("const_iBox3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_QWidget_ptr("QWidget_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QWidget("QWidget", 1, 0, 0, 0, 1, 0);
TypeDef TA_taBaseAdapter_ptr("taBaseAdapter_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taBaseAdapter("taBaseAdapter", 1, 0, 0, 0, 1, 0);
TypeDef TA_QMimeSource("QMimeSource", 1, 0, 0, 0, 1, 0);
TypeDef TA_byte("byte", 1, 0, 0, 0, 1, 0);
TypeDef TA_QObject("QObject", 1, 0, 0, 0, 1, 0);
TypeDef TA_QMenuItem_ptr("QMenuItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QMenuItem("QMenuItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_QPopupMenu_ptr("QPopupMenu_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QPopupMenu("QPopupMenu", 1, 0, 0, 0, 1, 0);
TypeDef TA_QObject_ptr("QObject_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QEvent_ptr("QEvent_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QEvent("QEvent", 1, 0, 0, 0, 1, 0);
TypeDef TA_QScrollView_ptr("QScrollView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QScrollView("QScrollView", 1, 0, 0, 0, 1, 0);
TypeDef TA_QVBoxLayout_ptr("QVBoxLayout_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QVBoxLayout("QVBoxLayout", 1, 0, 0, 0, 1, 0);
TypeDef TA_QLabel_ptr("QLabel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QLabel("QLabel", 1, 0, 0, 0, 1, 0);
TypeDef TA_QSplitter_ptr("QSplitter_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QSplitter("QSplitter", 1, 0, 0, 0, 1, 0);
TypeDef TA_QGridLayout_ptr("QGridLayout_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QGridLayout("QGridLayout", 1, 0, 0, 0, 1, 0);
TypeDef TA_QFrame_ptr("QFrame_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QFrame("QFrame", 1, 0, 0, 0, 1, 0);
TypeDef TA_iFlowLayout_ptr("iFlowLayout_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iFlowLayout("iFlowLayout", 1, 0, 0, 0, 1, 0);
TypeDef TA_QHBoxLayout_ptr("QHBoxLayout_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QHBoxLayout("QHBoxLayout", 1, 0, 0, 0, 1, 0);
TypeDef TA_iColor_ptr("iColor_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iColor("iColor", 1, 0, 0, 0, 1, 0);
TypeDef TA_QDialog("QDialog", 1, 0, 0, 0, 1, 0);
TypeDef TA_iDataViewer_ptr("iDataViewer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iDataViewer("iDataViewer", 1, 0, 0, 0, 1, 0);
TypeDef TA_QMenuData_ptr("QMenuData_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QMenuData("QMenuData", 1, 0, 0, 0, 1, 0);
TypeDef TA_QMenuBar_ptr("QMenuBar_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QMenuBar("QMenuBar", 1, 0, 0, 0, 1, 0);
TypeDef TA_QPtrList_iAction_("QPtrList_iAction_", 1, 0, 0, 0, 1, 0);
TypeDef TA_cssClass_ptr("cssClass_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_cssClass("cssClass", 1, 0, 0, 0, 1, 0);
TypeDef TA_cssiArgDialog_ptr("cssiArgDialog_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_cssiArgDialog("cssiArgDialog", 1, 0, 0, 0, 1, 0);
TypeDef TA_QPushButton_ptr("QPushButton_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QPushButton("QPushButton", 1, 0, 0, 0, 1, 0);
TypeDef TA_cssEl_ptr("cssEl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_cssEl("cssEl", 1, 0, 0, 0, 1, 0);
TypeDef TA_iCheckBox_ptr("iCheckBox_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iCheckBox("iCheckBox", 1, 0, 0, 0, 1, 0);
TypeDef TA_QLayout_ptr("QLayout_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QLayout("QLayout", 1, 0, 0, 0, 1, 0);
TypeDef TA_iLineEdit_ptr("iLineEdit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iLineEdit("iLineEdit", 1, 0, 0, 0, 1, 0);
TypeDef TA_iSpinBox_ptr("iSpinBox_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iSpinBox("iSpinBox", 1, 0, 0, 0, 1, 0);
TypeDef TA_QCheckBox_ptr("QCheckBox_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QCheckBox("QCheckBox", 1, 0, 0, 0, 1, 0);
TypeDef TA_iComboBox_ptr("iComboBox_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iComboBox("iComboBox", 1, 0, 0, 0, 1, 0);
TypeDef TA_QWidgetStack_ptr("QWidgetStack_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QWidgetStack("QWidgetStack", 1, 0, 0, 0, 1, 0);
TypeDef TA_QListBox_ptr("QListBox_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QListBox("QListBox", 1, 0, 0, 0, 1, 0);
TypeDef TA_QLineEdit_ptr("QLineEdit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QLineEdit("QLineEdit", 1, 0, 0, 0, 1, 0);
TypeDef TA_iTabView_ptr("iTabView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iTabView("iTabView", 1, 0, 0, 0, 1, 0);
TypeDef TA_QFocusEvent_ptr("QFocusEvent_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QFocusEvent("QFocusEvent", 1, 0, 0, 0, 1, 0);
TypeDef TA_QButtonGroup_ptr("QButtonGroup_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QButtonGroup("QButtonGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_QDragObject("QDragObject", 1, 0, 0, 0, 1, 0);
TypeDef TA_QToolBar("QToolBar", 1, 0, 0, 0, 1, 0);
TypeDef TA_QPtrList_taiToolBar_("QPtrList_taiToolBar_", 1, 0, 0, 0, 1, 0);
TypeDef TA_QListViewItem("QListViewItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_QListViewItem_ptr("QListViewItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QString("QString", 1, 0, 0, 0, 1, 0);
TypeDef TA_QListView_ptr("QListView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QListView("QListView", 1, 0, 0, 0, 1, 0);
TypeDef TA_DynMethod_PtrList("DynMethod_PtrList", 1, 0, 0, 0, 1, 0);
TypeDef TA_iAction_ptr("iAction_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iAction("iAction", 1, 0, 0, 0, 1, 0);
TypeDef TA_iTabView_PtrList_ptr("iTabView_PtrList_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iTabView_PtrList("iTabView_PtrList", 1, 0, 0, 0, 1, 0);
TypeDef TA_QVBox_ptr("QVBox_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QVBox("QVBox", 1, 0, 0, 0, 1, 0);
TypeDef TA_iEditGrid_ptr("iEditGrid_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iEditGrid("iEditGrid", 1, 0, 0, 0, 1, 0);

// Instances

taBase*		 TAI_taBase=NULL;
  static cssEl* cssElCFun_taBase_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taBase*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taBase*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taBase_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((taBase*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_taBase_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_taBase_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((taBase*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_taBase_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taBase_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taBase*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taBase_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_taBase_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_taBase_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taBase*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taBase_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taBase*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taBase*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taBase*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taBase_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taBase_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taBase_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taBase_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taBase_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taBase*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taBase_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taBase*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taBase_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taBase_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taBase_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_taBase_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taBase*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taBase_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((taBase*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taBase_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taBase_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taBase_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taBase_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taBase_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_setRep_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->setRep((taStrRep*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_length_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->length());
    return rval;}
  static cssEl* cssElCFun_taString_empty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->empty());
    return rval;}
  static cssEl* cssElCFun_taString_isInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->isInt());
    return rval;}
  static cssEl* cssElCFun_taString_allocation_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->allocation());
    return rval;}
  static cssEl* cssElCFun_taString_assertLength_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->assertLength());
    return rval;}
  static cssEl* cssElCFun_taString_chars_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taString*)ths)->chars(), 1);
    return rval;}
  static cssEl* cssElCFun_taString_chars_ptr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taString*)ths)->chars_ptr(), 1);
    return rval;}
  static cssEl* cssElCFun_taString_makeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->makeUnique((uint)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_pack_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->pack();
    return rval;}
  static cssEl* cssElCFun_taString_convert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->convert((double)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->convert((double)*arg[1], (const char*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->set((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_cat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->cat((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_prepend_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->prepend((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_index_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_contains_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->contains((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_matches_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->matches((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->matches((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_freq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->freq((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_at_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->at((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_before_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_through_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_from_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_after_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_del_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->del((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taString_remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taString*)ths)->remove((const char*)*arg[1]);}
    if(na == 2) {
      ((taString*)ths)->remove((const char*)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_taString_gsub_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->gsub((const char*)*arg[1], (const char*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_reverse_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->reverse());
    return rval;}
  static cssEl* cssElCFun_taString_upcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->upcase());
    return rval;}
  static cssEl* cssElCFun_taString_downcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->downcase());
    return rval;}
  static cssEl* cssElCFun_taString_capitalize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->capitalize());
    return rval;}
  static cssEl* cssElCFun_taString_truncate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->truncate((uint)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_elem_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->elem((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_firstchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->firstchar());
    return rval;}
  static cssEl* cssElCFun_taString_lastchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->lastchar());
    return rval;}
  static cssEl* cssElCFun_taString_error_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->error((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_flags_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->flags();
    return rval;}
  static cssEl* cssElCFun_ios_setf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->setf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_unsetf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->unsetf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_tie_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ios*)ths)->tie((ostream*)*arg[1]), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_ios_precision_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->precision((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ios_width_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->width((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ios_clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ios*)ths)->clear();}
    if(na == 1) {
      ((ios*)ths)->clear((ios::iostate)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ios_setstate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->setstate((ios::iostate)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_good_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->good());
    return rval;}
  static cssEl* cssElCFun_ios_eof_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->eof());
    return rval;}
  static cssEl* cssElCFun_ios_fail_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->fail());
    return rval;}
  static cssEl* cssElCFun_ios_bad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->bad());
    return rval;}
  static cssEl* cssElCFun_ios_pword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ios*)ths)->pword((int)*arg[1]), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_ios_iword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->iword((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ostream_flush_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->flush();
    return rval;}
  static cssEl* cssElCFun_ostream_put_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->put((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ostream_write_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->write((const char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ostream_seekp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->seekp((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ostream_tellp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ostream*)ths)->tellp());
    return rval;}
  static cssEl* cssElCFun_istream_getline_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((istream*)ths)->getline((char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((istream*)ths)->getline((char*)*arg[1], (int)*arg[2], (char)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_istream_read_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->read((char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_istream_get_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->get());
    return rval;}
  static cssEl* cssElCFun_istream_peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->peek());
    return rval;}
  static cssEl* cssElCFun_istream_ignore_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((istream*)ths)->ignore();}
    if(na == 1) {
      ((istream*)ths)->ignore((int)*arg[1]);}
    if(na == 2) {
      ((istream*)ths)->ignore((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_istream_sync_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->sync());
    return rval;}
  static cssEl* cssElCFun_istream_seekg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->seekg((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_istream_tellg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->tellg());
    return rval;}
  static cssEl* cssElCFun_istream_putback_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->putback((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_istream_unget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->unget();
    return rval;}
  static cssEl* cssElCFun_iostream_flags_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->flags();
    return rval;}
  static cssEl* cssElCFun_iostream_setf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->setf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_unsetf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->unsetf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_tie_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iostream*)ths)->tie((ostream*)*arg[1]), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_iostream_precision_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->precision((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_width_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->width((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((iostream*)ths)->clear();}
    if(na == 1) {
      ((iostream*)ths)->clear((ios::iostate)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_iostream_setstate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->setstate((ios::iostate)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_good_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->good());
    return rval;}
  static cssEl* cssElCFun_iostream_eof_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->eof());
    return rval;}
  static cssEl* cssElCFun_iostream_fail_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->fail());
    return rval;}
  static cssEl* cssElCFun_iostream_bad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->bad());
    return rval;}
  static cssEl* cssElCFun_iostream_pword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iostream*)ths)->pword((int)*arg[1]), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_iostream_iword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->iword((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_getline_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((iostream*)ths)->getline((char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((iostream*)ths)->getline((char*)*arg[1], (int)*arg[2], (char)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_iostream_read_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->read((char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_get_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->get());
    return rval;}
  static cssEl* cssElCFun_iostream_peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->peek());
    return rval;}
  static cssEl* cssElCFun_iostream_ignore_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((iostream*)ths)->ignore();}
    if(na == 1) {
      ((iostream*)ths)->ignore((int)*arg[1]);}
    if(na == 2) {
      ((iostream*)ths)->ignore((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_iostream_sync_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->sync());
    return rval;}
  static cssEl* cssElCFun_iostream_seekg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->seekg((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_tellg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->tellg());
    return rval;}
  static cssEl* cssElCFun_iostream_putback_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->putback((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_unget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->unget();
    return rval;}
  static cssEl* cssElCFun_iostream_flush_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->flush();
    return rval;}
  static cssEl* cssElCFun_iostream_put_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->put((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_write_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->write((const char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_seekp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->seekp((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_tellp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->tellp());
    return rval;}
  static cssEl* cssElCFun_ifstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ifstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_ifstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ifstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_ifstream_open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ifstream*)ths)->open((const char*)*arg[1]);}
    if(na == 2) {
      ((ifstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ofstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ofstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_ofstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ofstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_ofstream_open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ofstream*)ths)->open((const char*)*arg[1]);}
    if(na == 2) {
      ((ofstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_fstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((fstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_fstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((fstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_fstream_open_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((fstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iFont_bold_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iFont*)ths)->bold());
    return rval;}
  static cssEl* cssElCFun_iFont_setBold_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setBold((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_italic_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iFont*)ths)->italic());
    return rval;}
  static cssEl* cssElCFun_iFont_setItalic_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setItalic((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_setPointSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setPointSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_setStretch_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setStretch((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_underline_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iFont*)ths)->underline());
    return rval;}
  static cssEl* cssElCFun_iFont_setUnderline_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setUnderline((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_copy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->copy(*(iFont*)arg[1]->GetVoidPtrOfType(&TA_iFont));
    return rval;}
  static cssEl* cssElCFun_iFont_setRawName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setRawName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Indenter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taPtrList_impl*)ths)->Indenter(refarg_0, (const char*)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_GetTA_Element__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TypeDef* refarg_1=(TypeDef*)*arg[2];
    rval=new cssTA((void*)((taPtrList_impl*)ths)->GetTA_Element_((int)*arg[1], refarg_1), 1, &TA_void);
    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_DataChanged_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taPtrList_impl*)ths)->DataChanged((int)*arg[1]);}
    if(na == 2) {
      ((taPtrList_impl*)ths)->DataChanged((int)*arg[1], (void*)(void*)*arg[2]);}
    if(na == 3) {
      ((taPtrList_impl*)ths)->DataChanged((int)*arg[1], (void*)(void*)*arg[2], (void*)(void*)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_IsEmpty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->IsEmpty());
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BuildHashTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BuildHashTable((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->RemoveName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveLast_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->RemoveLast());
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Swap_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Swap((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_PopAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->PopAll();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->Sort();}
    if(na == 1) {
      ((taPtrList_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Sort__stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->Sort_();}
    if(na == 1) {
      ((taPtrList_impl*)ths)->Sort_((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_UpdateAllIndicies_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->UpdateAllIndicies();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taPtrList_impl*)ths)->FirstEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taPtrList_impl*)ths)->NextEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->DupeUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->DupeUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Stealth_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Stealth_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUnique(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Common(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_NumListCols_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->NumListCols());
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_GetColHeading_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPtrList_impl*)ths)->GetColHeading((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_ChildGetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssString(((taPtrList_impl*)ths)->ChildGetColText((void*)(void*)*arg[1], (TypeDef*)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssString(((taPtrList_impl*)ths)->ChildGetColText((void*)(void*)*arg[1], (TypeDef*)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taPtrList_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taFixedArray_impl_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFixedArray_impl*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taFixedArray_impl_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray_impl*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFixedArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFixedArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFixedArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taFixedArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taFixedArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taFixedArray<int>*)ths)->Find((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taFixedArray<int>*)ths)->Find((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_impl*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taArray_impl_BlankEl__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taArray_impl*)ths)->BlankEl_(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_AddBlank_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->AddBlank();}
    if(na == 1) {
      ((taArray_impl*)ths)->AddBlank((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray_impl*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray_impl*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_impl*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->Sort();}
    if(na == 1) {
      ((taArray_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_ShiftLeft_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->ShiftLeft((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_ShiftLeftPct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->ShiftLeftPct((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_V_Flip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_impl*)ths)->V_Flip((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_DupeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->DupeUnique(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Copy_Common(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Copy_Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_CopyVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));}
    if(na == 2) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2]);}
    if(na == 3) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taArray_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_InitFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->InitFromString((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taHashEl_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taHashEl*)ths)->Initialize();
    return rval;}
taPtrList<taHashEl>*		 TAI_taPtrList_taHashEl_=NULL;
  static cssEl* cssElCFun_taPtrList_taHashEl__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FastEl((int)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Edit_El((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taHashEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taHashEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Pop(), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Peek(), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->AddUniqNameOld((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->LinkUniqNameOld((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->FindEl((const taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->AddEl((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Add((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->AddUnique((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->AddUniqNameNew((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Insert((taHashEl*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Replace((int)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceName((const char*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->RemoveEl((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->DuplicateEl((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Link((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->LinkUnique((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->LinkUniqNameNew((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->InsertLink((taHashEl*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->InsertLink((taHashEl*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceLink((int)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceLinkEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceLinkName((const char*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Push((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->MoveEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Transfer((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->MoveBefore((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->MoveAfter((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashBucket_Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashBucket*)ths)->Find((taHashVal)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashBucket_FindIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashBucket*)ths)->FindIndex((taHashVal)*arg[1]));
    return rval;}
taPtrList<taHashBucket>*		 TAI_taPtrList_taHashBucket_=NULL;
  static cssEl* cssElCFun_taPtrList_taHashBucket__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FastEl((int)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Edit_El((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taHashBucket);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taHashBucket);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Pop(), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Peek(), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->AddUniqNameOld((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->LinkUniqNameOld((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->FindEl((const taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->AddEl((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Add((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->AddUnique((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->AddUniqNameNew((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Insert((taHashBucket*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Replace((int)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceName((const char*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->RemoveEl((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->DuplicateEl((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Link((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->LinkUnique((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->LinkUniqNameNew((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->InsertLink((taHashBucket*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->InsertLink((taHashBucket*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceLink((int)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceLinkEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceLinkName((const char*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Push((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->MoveEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Transfer((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->MoveBefore((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->MoveAfter((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->Remove((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->Add((taHashVal)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taHashTable_FindIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->FindIndex((taHashVal)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_UpdateIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->UpdateIndex((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_InitList__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->InitList_();
    return rval;}
  static cssEl* cssElCFun_taFiler_open_read_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taFiler*)ths)->open_read(), 1, &TA_istream);
    return rval;}
  static cssEl* cssElCFun_taFiler_open_write_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taFiler*)ths)->open_write(), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_taFiler_open_append_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taFiler*)ths)->open_append(), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_taFiler_open_write_exist_check_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFiler*)ths)->open_write_exist_check());
    return rval;}
  static cssEl* cssElCFun_taFiler_Init_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taFiler*)ths)->Init();}
    if(na == 1) {
      ((taFiler*)ths)->Init(arg[1]->GetStr());}
    if(na == 2) {
      ((taFiler*)ths)->Init(arg[1]->GetStr(), arg[2]->GetStr());}
    if(na == 3) {
      ((taFiler*)ths)->Init(arg[1]->GetStr(), arg[2]->GetStr(), (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taFiler_Open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFiler*)ths)->Open(), 1, &TA_istream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFiler*)ths)->Open((const char*)*arg[1]), 1, &TA_istream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFiler*)ths)->Open((const char*)*arg[1], (bool)*arg[2]), 1, &TA_istream);}
    return rval;}
  static cssEl* cssElCFun_taFiler_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFiler*)ths)->Save(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFiler*)ths)->Save((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFiler*)ths)->Save((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taFiler_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFiler*)ths)->SaveAs(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFiler*)ths)->SaveAs((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFiler*)ths)->SaveAs((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taFiler_Append_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFiler*)ths)->Append(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFiler*)ths)->Append((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFiler*)ths)->Append((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taFiler_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taFiler_AutoOpen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->AutoOpen();
    return rval;}
  static cssEl* cssElCFun_taFiler_IsOpen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFiler*)ths)->IsOpen());
    return rval;}
  static cssEl* cssElCFun_taFiler_GetFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    rval=new cssInt((int)((taFiler*)ths)->GetFileName(refarg_0, (FilerOperation)(int)*arg[2]));
    *arg[1]=(String)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taFiler_FixFileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->FixFileName();
    return rval;}
  static cssEl* cssElCFun_taFiler_GetDir_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->GetDir();
    return rval;}
taDataLinkItr*		 TAI_taDataLinkItr=NULL;
taBase**		 TAI_TAPtr=NULL;
taPlainArray<taString>*		 TAI_taPlainArray_taString_=NULL;
  static cssEl* cssElCFun_taPlainArray_taString__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Set((int)*arg[1], arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Add(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<taString>*)ths)->AddUnique(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Push(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taPlainArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taPlainArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Find(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Find(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<taString>*)ths)->RemoveEl(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_String_PArray_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((String_PArray*)ths)->Add((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_String_PArray_AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((String_PArray*)ths)->AddUnique((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_String_PArray_FindContains_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((String_PArray*)ths)->FindContains((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((String_PArray*)ths)->FindContains((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_String_PArray_AsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((String_PArray*)ths)->AsString((const char*)*arg[1]));
    return rval;}
taPlainArray<int>*		 TAI_taPlainArray_int_=NULL;
  static cssEl* cssElCFun_taPlainArray_int__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Push((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taPlainArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taPlainArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Find((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Find((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->RemoveEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_IApp_Settings_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IApp*)ths)->Settings();
    return rval;}
  static cssEl* cssElCFun_IApp_SaveConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IApp*)ths)->SaveConfig();
    return rval;}
  static cssEl* cssElCFun_IApp_LoadConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IApp*)ths)->LoadConfig();
    return rval;}
  static cssEl* cssElCFun_IApp_Info_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IApp*)ths)->Info();
    return rval;}
  static cssEl* cssElCFun_IApp_Quit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IApp*)ths)->Quit();
    return rval;}
  static cssEl* cssElCFun_IApp_SaveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IApp*)ths)->SaveAll();
    return rval;}
taMisc*		 TAI_taMisc=NULL;
  static cssEl* cssElCFun_taMisc_SaveConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->SaveConfig();
    return rval;}
  static cssEl* cssElCFun_taMisc_LoadConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->LoadConfig();
    return rval;}
  static cssEl* cssElCFun_taMisc_Error_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taMisc*)ths)->Error((const char*)*arg[1]);}
    if(na == 2) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2]);}
    if(na == 3) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]);}
    if(na == 4) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]);}
    if(na == 5) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]);}
    if(na == 6) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]);}
    if(na == 7) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]);}
    if(na == 8) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]);}
    if(na == 9) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]);}
    if(na == 10) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10]);}
    if(na == 11) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10], (const char*)*arg[11]);}
    if(na == 12) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10], (const char*)*arg[11], (const char*)*arg[12]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_Choice_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taMisc*)ths)->Choice());}
    if(na == 1) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]));}
    if(na == 5) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]));}
    if(na == 6) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]));}
    if(na == 7) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]));}
    if(na == 8) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]));}
    if(na == 9) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]));}
    if(na == 10) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10]));}
    if(na == 11) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10], (const char*)*arg[11]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_DelayedMenuUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->DelayedMenuUpdate((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taMisc_Busy_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->Busy();
    return rval;}
  static cssEl* cssElCFun_taMisc_DoneBusy_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->DoneBusy();
    return rval;}
  static cssEl* cssElCFun_taMisc_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->Initialize();
    return rval;}
  static cssEl* cssElCFun_taMisc_InitializeTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->InitializeTypes();
    return rval;}
  static cssEl* cssElCFun_taMisc_MallocInfo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->MallocInfo(refarg_0);
    return rval;}
  static cssEl* cssElCFun_taMisc_ListAllTokens_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->ListAllTokens(refarg_0);
    return rval;}
  static cssEl* cssElCFun_taMisc_ReplaceAllPtrs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMisc*)ths)->ReplaceAllPtrs((TypeDef*)*arg[1], (void*)(void*)*arg[2], (void*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taMisc_ReplaceAllPtrsWithToken_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMisc*)ths)->ReplaceAllPtrsWithToken((TypeDef*)*arg[1], (void*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_Decode_Signal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->Decode_Signal((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taMisc_CharToStrArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    String_PArray& refarg_0=*(String_PArray*)arg[1]->GetVoidPtrOfType(&TA_String_PArray);
    ((taMisc*)ths)->CharToStrArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_StrArrayToChar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StrArrayToChar(*(String_PArray*)arg[1]->GetVoidPtrOfType(&TA_String_PArray)));
    return rval;}
  static cssEl* cssElCFun_taMisc_SpaceLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    ((taMisc*)ths)->SpaceLabel(refarg_0);
    *arg[1]=(String)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taMisc_LeadingZeros_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->LeadingZeros((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_FormatValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FormatValue((float)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StringMaxLen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StringMaxLen(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StringEnforceLen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StringEnforceLen(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StartRecording_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->StartRecording((ostream*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taMisc_StopRecording_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->StopRecording();
    return rval;}
  static cssEl* cssElCFun_taMisc_RecordScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMisc*)ths)->RecordScript((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMisc_ScriptRecordAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->ScriptRecordAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_SRIAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->SRIAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_SREAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->SREAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_remove_name_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    rval=new cssString(((taMisc*)ths)->remove_name(refarg_0));
    *arg[1]=(String)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taMisc_FindFileInclude_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FindFileInclude((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_white_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_white_noeol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white_noeol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white_noeol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_word_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_word(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_word(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_alnum_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_alnum_noeol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum_noeol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum_noeol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_eol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_eol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_eol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_lbracket_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lbracket(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lbracket(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_lb_or_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lb_or_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lb_or_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_rbracket_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rbracket(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rbracket(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_rb_or_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rb_or_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rb_or_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_quote_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_quote_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_past_err_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_past_err_rb_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err_rb(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err_rb(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_indent_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->indent(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->indent(refarg_0, (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_fmt_sep_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->fmt_sep(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->fmt_sep(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_fancy_list_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->fancy_list(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4], (int)*arg[5]);
    return rval;}
taPtrList<EnumDef>*		 TAI_taPtrList_EnumDef_=NULL;
EnumSpace*		 TAI_EnumSpace=NULL;
taPtrList<void>*		 TAI_taPtrList_void_=NULL;
TokenSpace*		 TAI_TokenSpace=NULL;
taPtrList<MemberDef>*		 TAI_taPtrList_MemberDef_=NULL;
MemberSpace*		 TAI_MemberSpace=NULL;
taPtrList<MethodDef>*		 TAI_taPtrList_MethodDef_=NULL;
MethodSpace*		 TAI_MethodSpace=NULL;
taPtrList<TypeDef>*		 TAI_taPtrList_TypeDef_=NULL;
TypeSpace*		 TAI_TypeSpace=NULL;
TypeItem*		 TAI_TypeItem=NULL;
EnumDef*		 TAI_EnumDef=NULL;
  static cssEl* cssElCFun_taiMimeSource_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiMimeSource*)ths)->New((const QMimeSource*)(void*)*arg[1]), 1, &TA_taiMimeSource);
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_New2_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiMimeSource*)ths)->New2((taiClipData*)(void*)*arg[1]), 1, &TA_taiMimeSource);
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_src_action_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->src_action());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_is_multi_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->is_multi());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_is_tacss_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->is_tacss());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_count_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->count());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_index_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->index());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_setIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taiMimeSource*)ths)->setIndex((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_type_name_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taiMimeSource*)ths)->type_name());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_td_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiMimeSource*)ths)->td(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_object_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiMimeSource*)ths)->object(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_tab_object_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taiMimeSource*)ths)->tab_object(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_path_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taiMimeSource*)ths)->path());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_is_tab_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->is_tab());
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_loc_data_taken_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taiMimeSource*)ths)->loc_data_taken();
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_rem_data_taken_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taiMimeSource*)ths)->rem_data_taken();
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_format_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssCPtr_char((void*)((taiMimeSource*)ths)->format(), 1);}
    if(na == 1) {
      rval=new cssCPtr_char((void*)((taiMimeSource*)ths)->format((int)*arg[1]), 1);}
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_provides_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->provides((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taiMimeSource_IsThisProcess_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeSource*)ths)->IsThisProcess());
    return rval;}
taOBase*		 TAI_taOBase=NULL;
  static cssEl* cssElCFun_taOBase_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taOBase*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taOBase_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taOBase*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taOBase_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taOBase*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
taDataView*		 TAI_taDataView=NULL;
  static cssEl* cssElCFun_taDataView_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taDataView*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taDataView*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((taDataView*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_taDataView_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_taDataView_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((taDataView*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_taDataView_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taDataView_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_taDataView_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_taDataView_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taDataView*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taDataView*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taDataView*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taDataView*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((taDataView*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taDataView*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taDataView*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taDataView_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taDataView_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taDataView_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taDataView_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taDataView*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taDataView*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taDataView*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taDataView_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taDataView*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taDataView_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_taDataView_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taDataView*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((taDataView*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taDataView_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((taDataView*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taDataView_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taDataView_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taDataView_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taDataView_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taDataView_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taDataView_This_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->This(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taDataView_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->link(), 1, &TA_taiDataLink);
    return rval;}
  static cssEl* cssElCFun_taDataView_DataLinkDestroying_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataLinkDestroying((taDataLink*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_DataDataChanged_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataDataChanged((taDataLink*)(void*)*arg[1], (int)*arg[2], (void*)(void*)*arg[3], (void*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetDataTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->GetDataTypeDef(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taDataView_IsDataView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->IsDataView());
    return rval;}
  static cssEl* cssElCFun_taDataView_data_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taDataView*)ths)->data(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taDataView_SetData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->SetData((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_dbu_cnt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->dbu_cnt());
    return rval;}
  static cssEl* cssElCFun_taDataView_md_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->md(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_taDataView_par_dbu_cnt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->par_dbu_cnt());
    return rval;}
  static cssEl* cssElCFun_taDataView_parent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taDataView*)ths)->parent(), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetDataMemberDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->GetDataMemberDef(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetLabel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taDataView*)ths)->GetLabel());
    return rval;}
  static cssEl* cssElCFun_taDataView_DataDestroying_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataDestroying();
    return rval;}
  static cssEl* cssElCFun_taDataView_ChildClearing_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->ChildClearing((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_ChildRendered_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->ChildRendered((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_Clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taDataView*)ths)->Clear();}
    if(na == 1) {
      ((taDataView*)ths)->Clear((taDataView*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taDataView_CloseChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->CloseChild((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_Render_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Render();
    return rval;}
  static cssEl* cssElCFun_taDataView_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taDataView_ItemRemoving_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->ItemRemoving((taDataView*)(void*)*arg[1]);
    return rval;}
taNBase*		 TAI_taNBase=NULL;
SelectEdit*		 TAI_SelectEdit=NULL;
  static cssEl* cssElCFun_SelectEdit_FindMbrBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->FindMbrBase((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMember_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMember((taBase*)(void*)*arg[1], (MemberDef*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMemberNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMemberNm((taBase*)(void*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_FindMethBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->FindMethBase((taBase*)(void*)*arg[1], (MethodDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMethod_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMethod((taBase*)(void*)*arg[1], (MethodDef*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMethodNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMethodNm((taBase*)(void*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_UpdateAllBases_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->UpdateAllBases();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_RemoveField_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->RemoveField((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_MoveField_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->MoveField((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_RemoveFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->RemoveFun((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_MoveFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->MoveFun((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_NewEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->NewEdit();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMembsFmStrs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->GetMembsFmStrs();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMethsFmStrs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->GetMethsFmStrs();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetAllPaths_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->GetAllPaths();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseClosing_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->BaseClosing((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseClosingAll_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->BaseClosingAll((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseChangeSave_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->BaseChangeSave();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseChangeReShow_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->BaseChangeReShow();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMbrLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((SelectEdit*)ths)->GetMbrLabel((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMethLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((SelectEdit*)ths)->GetMethLabel((int)*arg[1]));
    return rval;}
tabMisc*		 TAI_tabMisc=NULL;
  static cssEl* cssElCFun_tabMisc_Close_Obj_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->Close_Obj((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_tabMisc_WaitProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((tabMisc*)ths)->WaitProc());
    return rval;}
  static cssEl* cssElCFun_tabMisc_NotifyEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((tabMisc*)ths)->NotifyEdits((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_tabMisc_DelayedUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->DelayedUpdateAfterEdit((taBase*)(void*)*arg[1]);
    return rval;}
taNBase**		 TAI_TANPtr=NULL;
taFBase*		 TAI_taFBase=NULL;
taPtrList<taBase>*		 TAI_taPtrList_taBase_=NULL;
  static cssEl* cssElCFun_taPtrList_taBase__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->Edit_El((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->Pop(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->Peek(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->AddUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->LinkUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->FindEl((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->AddEl((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->Replace((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->ReplaceName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->ReplaceLink((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->ReplaceLinkName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
taPtrList_base<taBase>*		 TAI_taPtrList_base_taBase_=NULL;
  static cssEl* cssElCFun_taPtrList_base_taBase__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Find((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->FindEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->AddEl((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Replace((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceLink((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceLinkName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
taList_impl*		 TAI_taList_impl=NULL;
  static cssEl* cssElCFun_taList_impl_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taList_impl*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taList_impl*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((taList_impl*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((taList_impl*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_taList_impl_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taList_impl*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taList_impl_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_taList_impl_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_taList_impl_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList_impl*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taList_impl*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taList_impl*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taList_impl*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_impl_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taList_impl_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taList_impl_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taList_impl*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taList_impl*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taList_impl_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taList_impl*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taList_impl_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((taList_impl*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taList_impl_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taList_impl_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taList_impl*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetTA_Element__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TypeDef* refarg_1=(TypeDef*)*arg[2];
    rval=new cssTA((void*)((taList_impl*)ths)->GetTA_Element_((int)*arg[1], refarg_1), 1, &TA_void);
    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taList_impl_DataChanged_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taList_impl*)ths)->DataChanged((int)*arg[1]);}
    if(na == 2) {
      ((taList_impl*)ths)->DataChanged((int)*arg[1], (void*)(void*)*arg[2]);}
    if(na == 3) {
      ((taList_impl*)ths)->DataChanged((int)*arg[1], (void*)(void*)*arg[2], (void*)(void*)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taList_impl_IsEmpty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->IsEmpty());
    return rval;}
  static cssEl* cssElCFun_taList_impl_BuildHashTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BuildHashTable((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->RemoveName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveLast_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->RemoveLast());
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Swap_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Swap((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_PopAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->PopAll();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->Sort();}
    if(na == 1) {
      ((taList_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Sort__stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->Sort_();}
    if(na == 1) {
      ((taList_impl*)ths)->Sort_((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_UpdateAllIndicies_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UpdateAllIndicies();
    return rval;}
  static cssEl* cssElCFun_taList_impl_FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taList_impl*)ths)->FirstEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taList_impl_NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taList_impl*)ths)->NextEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taList_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DupeUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DupeUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Stealth_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Stealth_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUnique(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Common(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_NumListCols_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->NumListCols());
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetColHeading_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taList_impl*)ths)->GetColHeading((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChildGetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssString(((taList_impl*)ths)->ChildGetColText((void*)(void*)*arg[1], (TypeDef*)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssString(((taList_impl*)ths)->ChildGetColText((void*)(void*)*arg[1], (TypeDef*)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taList_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->FindEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->AddEl((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Replace((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taList_impl*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceLink((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceLinkName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Dump_Save_PathR_impl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Dump_Save_PathR_impl(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Dump_Save_PathR_impl(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Dump_Save_PathR_impl(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultElName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultElName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultElType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultElType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceType();
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceSameStru_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceSameStru(*(taList_impl*)arg[1]->GetVoidPtrOfType(&TA_taList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChangeType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ChangeType((taBase*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceType((TypeDef*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetBaseType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetBaseType((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReturnFindMd_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taList_impl*)ths)->ReturnFindMd(), 1, &TA_MemberDef);
    return rval;}
taList<taBase>*		 TAI_taList_taBase_=NULL;
  static cssEl* cssElCFun_taList_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->DefaultEl(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Edit_El((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Pop(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Peek(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->AddUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->LinkUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
taBase_List*		 TAI_taBase_List=NULL;
  static cssEl* cssElCFun_taArray_base_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taArray_base*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taArray_base*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((taArray_base*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_taArray_base_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((taArray_base*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_taArray_base_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taArray_base*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taArray_base_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_taArray_base_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_taArray_base_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taArray_base*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taArray_base*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taArray_base*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taArray_base*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taArray_base_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taArray_base_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taArray_base_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray_base*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taArray_base*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taArray_base_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_taArray_base_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taArray_base*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((taArray_base*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taArray_base_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taArray_base_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taArray_base_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taArray_base*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taArray_base_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taArray_base_BlankEl__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taArray_base*)ths)->BlankEl_(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taArray_base_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_AddBlank_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->AddBlank();}
    if(na == 1) {
      ((taArray_base*)ths)->AddBlank((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray_base*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taArray_base_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->Sort();}
    if(na == 1) {
      ((taArray_base*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_ShiftLeft_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->ShiftLeft((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_ShiftLeftPct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->ShiftLeftPct((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_V_Flip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->V_Flip((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_DupeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->DupeUnique(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Copy_Common(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Copy_Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));}
    if(na == 2) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2]);}
    if(na == 3) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taArray_base*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_InitFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->InitFromString((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_int__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Push((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_int__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<int>*)ths)->Find((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<int>*)ths)->Find((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_int__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->RemoveEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1]);}
    if(na == 2) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
int_Array*		 TAI_int_Array=NULL;
  static cssEl* cssElCFun_int_Array_FillSeq_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((int_Array*)ths)->FillSeq();}
    if(na == 1) {
      ((int_Array*)ths)->FillSeq((int)*arg[1]);}
    if(na == 2) {
      ((int_Array*)ths)->FillSeq((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_taArray_float__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_float__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_float__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Set((int)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Add((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<float>*)ths)->AddUnique((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Push((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<float>*)ths)->Insert((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<float>*)ths)->Insert((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_float__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<float>*)ths)->Find((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<float>*)ths)->Find((float)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_float__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<float>*)ths)->RemoveEl((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1]);}
    if(na == 2) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
float_Array*		 TAI_float_Array=NULL;
  static cssEl* cssElCFun_taArray_double__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_double__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_double__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Set((int)*arg[1], (double)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Add((double)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<double>*)ths)->AddUnique((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Push((double)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<double>*)ths)->Insert((double)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<double>*)ths)->Insert((double)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_double__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<double>*)ths)->Find((double)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<double>*)ths)->Find((double)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_double__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<double>*)ths)->RemoveEl((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1]);}
    if(na == 2) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
double_Array*		 TAI_double_Array=NULL;
  static cssEl* cssElCFun_taArray_taString__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Set((int)*arg[1], arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Add(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<taString>*)ths)->AddUnique(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Push(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<taString>*)ths)->Find(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<taString>*)ths)->Find(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_taString__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<taString>*)ths)->RemoveEl(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr());}
    if(na == 2) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
String_Array*		 TAI_String_Array=NULL;
SArg_Array*		 TAI_SArg_Array=NULL;
  static cssEl* cssElCFun_taArray_long__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_long__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_long__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<long>*)ths)->Set((int)*arg[1], (long)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_long__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<long>*)ths)->Add((long)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_long__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->AddUnique((long)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<long>*)ths)->Push((long)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_long__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<long>*)ths)->Insert((long)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<long>*)ths)->Insert((long)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_long__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<long>*)ths)->Find((long)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<long>*)ths)->Find((long)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_long__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->RemoveEl((long)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<long>*)ths)->InitVals((long)*arg[1]);}
    if(na == 2) {
      ((taArray<long>*)ths)->InitVals((long)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<long>*)ths)->InitVals((long)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
long_Array*		 TAI_long_Array=NULL;
  static cssEl* cssElCFun_long_Array_FillSeq_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((long_Array*)ths)->FillSeq();}
    if(na == 1) {
      ((long_Array*)ths)->FillSeq((long)*arg[1]);}
    if(na == 2) {
      ((long_Array*)ths)->FillSeq((long)*arg[1], (long)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->SafeEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->FastEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->RevEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Pop();
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Peek();
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Set((int)*arg[1], (void*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Add((void*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<void*>*)ths)->AddUnique((void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Push((void*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<void*>*)ths)->Insert((void*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<void*>*)ths)->Insert((void*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<void*>*)ths)->Find((void*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<void*>*)ths)->Find((void*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<void*>*)ths)->RemoveEl((void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<void*>*)ths)->InitVals((void*)(void*)*arg[1]);}
    if(na == 2) {
      ((taArray<void*>*)ths)->InitVals((void*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<void*>*)ths)->InitVals((void*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
voidptr_Array*		 TAI_voidptr_Array=NULL;
  static cssEl* cssElCFun_taMatrix_impl_dims_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMatrix_impl*)ths)->dims());
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_geom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMatrix_impl*)ths)->geom((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_setGeom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMatrix_impl*)ths)->setGeom((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMatrix_impl*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_GetTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taMatrix_impl*)ths)->GetTypeDef(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_Ref_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMatrix_impl*)ths)->Ref();
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_Unref_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMatrix_impl*)ths)->Unref();
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_SafeEl__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taMatrix_impl*)ths)->SafeEl_((int)*arg[1]), 1, &TA_const_void);
    return rval;}
  static cssEl* cssElCFun_taMatrix_impl_FastEl__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taMatrix_impl*)ths)->FastEl_((int)*arg[1]), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taMatrix_byte__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMatrix<byte>*)ths)->SafeEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taMatrix_byte__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMatrix<byte>*)ths)->FastEl((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_byte_Matrix_data_type_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((byte_Matrix*)ths)->data_type(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_byte_Matrix_StatTypeDef_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((byte_Matrix*)ths)->StatTypeDef((int)*arg[1]), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taMatrix_float__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taMatrix<float>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMatrix_float__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taMatrix<float>*)ths)->FastEl((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_float_Matrix_data_type_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((float_Matrix*)ths)->data_type(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_float_Matrix_StatTypeDef_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((float_Matrix*)ths)->StatTypeDef((int)*arg[1]), 1, &TA_TypeDef);
    return rval;}
taGroup_impl*		 TAI_taGroup_impl=NULL;
  static cssEl* cssElCFun_taGroup_impl_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Duplicate(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->DupeUniqNameNew(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->DupeUniqNameOld(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Borrow(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->BorrowUnique(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->BorrowUniqNameNew(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->BorrowUniqNameOld(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Copy_Common(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Copy_Duplicate(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Copy_Borrow(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_EnforceSameStru_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->EnforceSameStru(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_InitLeafGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->InitLeafGp();
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveLeaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveLeaf((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveLeafName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveLeafName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveLeafEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveLeafEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveGp((taGroup_impl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_EditSubGps_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup_impl*)ths)->EditSubGps(), 1, &TA_TALOG);
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_EnforceLeaves_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->EnforceLeaves((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_FindLeaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->FindLeaf((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_FindLeafEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->FindLeafEl((taBase*)(void*)*arg[1]));
    return rval;}
taList<taGroup_impl>*		 TAI_taList_taGroup_impl_=NULL;
  static cssEl* cssElCFun_taList_taGroup_impl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taGroup_impl>*)ths)->MoveBefore((taGroup_impl*)(void*)*arg[1], (taGroup_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taGroup_impl>*)ths)->MoveAfter((taGroup_impl*)(void*)*arg[1], (taGroup_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FastEl((int)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->DefaultEl(), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->Edit_El((taGroup_impl*)(void*)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taGroup_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taGroup_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taGroup_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taGroup_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->Pop(), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->Peek(), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->AddUniqNameOld((taGroup_impl*)(void*)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->LinkUniqNameOld((taGroup_impl*)(void*)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
TALOG*		 TAI_TALOG=NULL;
taSubGroup*		 TAI_taSubGroup=NULL;
  static cssEl* cssElCFun_taSubGroup_Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taSubGroup*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
DMemShareVar*		 TAI_DMemShareVar=NULL;
DMemShare*		 TAI_DMemShare=NULL;
taGroup<taBase>*		 TAI_taGroup_taBase_=NULL;
  static cssEl* cssElCFun_taGroup_taBase__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FirstEl(refarg_0), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NextEl(refarg_0), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->DefaultEl(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Edit_El((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Leaf((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewEl(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewEl((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Pop(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Peek(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->AddUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->LinkUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
taBase_Group*		 TAI_taBase_Group=NULL;
taPtrList<VPUnref>*		 TAI_taPtrList_VPUnref_=NULL;
taPtrList<DumpPathSub>*		 TAI_taPtrList_DumpPathSub_=NULL;
taPtrList<DumpPathToken>*		 TAI_taPtrList_DumpPathToken_=NULL;
NameValue*		 TAI_NameValue=NULL;
TypeDefault*		 TAI_TypeDefault=NULL;
  static cssEl* cssElCFun_TypeDefault_SetActive_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TypeDefault*)ths)->SetActive((char*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_TypeDefault_GetActive_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TypeDefault*)ths)->GetActive((char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TypeDefault_UpdateToNameValue_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TypeDefault*)ths)->UpdateToNameValue();
    return rval;}
  static cssEl* cssElCFun_TypeDefault_UpdateFromNameValue_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TypeDefault*)ths)->UpdateFromNameValue();
    return rval;}
  static cssEl* cssElCFun_ScriptBase_HasScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptBase*)ths)->HasScript());
    return rval;}
  static cssEl* cssElCFun_ScriptBase_RunScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptBase*)ths)->RunScript());
    return rval;}
  static cssEl* cssElCFun_ScriptBase_SetScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptBase*)ths)->SetScript((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptBase_LoadScript_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptBase*)ths)->LoadScript();}
    if(na == 1) {
      ((ScriptBase*)ths)->LoadScript((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptBase_LoadScriptString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptBase*)ths)->LoadScriptString();}
    if(na == 1) {
      ((ScriptBase*)ths)->LoadScriptString((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptBase_InteractScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptBase*)ths)->InteractScript();
    return rval;}
taPtrList<ScriptBase>*		 TAI_taPtrList_ScriptBase_=NULL;
  static cssEl* cssElCFun_taPtrList_ScriptBase__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->Edit_El((ScriptBase*)(void*)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->FindName((const char*)*arg[1]), 1, &TA_ScriptBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_ScriptBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->Pop(), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->Peek(), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->AddUniqNameOld((ScriptBase*)(void*)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->LinkUniqNameOld((ScriptBase*)(void*)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->FindEl((const ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->AddEl((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->Add((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->AddUnique((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->AddUniqNameNew((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Insert((ScriptBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Replace((int)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceEl((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceName((const char*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->RemoveEl((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->DuplicateEl((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->Link((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->LinkUnique((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->LinkUniqNameNew((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->InsertLink((ScriptBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->InsertLink((ScriptBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceLink((int)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceLinkEl((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceLinkName((const char*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->Push((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->MoveEl((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Transfer((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->MoveBefore((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->MoveAfter((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
Script*		 TAI_Script=NULL;
  static cssEl* cssElCFun_Script_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((Script*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((Script*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Script_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((Script*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_Script_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_Script_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((Script*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_Script_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Script_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Script*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_Script_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_Script_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_Script_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Script*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_Script_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((Script*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((Script*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((Script*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Script_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((Script*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Script*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Script*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Script_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((Script*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((Script*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Script*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_Script_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_Script_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_Script_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Script*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Script_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Script*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((Script*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Script_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Script_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Script_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Script_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_Script_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_Script_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((Script*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((Script*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_Script_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_Script_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((Script*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_Script_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_Script_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Script_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Script_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_Script_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Script*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_Script_HasScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->HasScript());
    return rval;}
  static cssEl* cssElCFun_Script_RunScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->RunScript());
    return rval;}
  static cssEl* cssElCFun_Script_SetScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->SetScript((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_LoadScript_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Script*)ths)->LoadScript();}
    if(na == 1) {
      ((Script*)ths)->LoadScript((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Script_LoadScriptString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Script*)ths)->LoadScriptString();}
    if(na == 1) {
      ((Script*)ths)->LoadScriptString((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Script_InteractScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->InteractScript();
    return rval;}
  static cssEl* cssElCFun_Script_Run_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->Run());
    return rval;}
  static cssEl* cssElCFun_Script_Record_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Script*)ths)->Record();}
    if(na == 1) {
      ((Script*)ths)->Record((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Script_StopRecording_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->StopRecording();
    return rval;}
  static cssEl* cssElCFun_Script_Interact_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Interact();
    return rval;}
  static cssEl* cssElCFun_Script_Clear_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Clear();
    return rval;}
  static cssEl* cssElCFun_Script_Compile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Compile();
    return rval;}
  static cssEl* cssElCFun_Script_ScriptAllWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->ScriptAllWinPos();
    return rval;}
  static cssEl* cssElCFun_Script_AutoRun_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->AutoRun();
    return rval;}
taGroup<Script>*		 TAI_taGroup_Script_=NULL;
  static cssEl* cssElCFun_taGroup_Script__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FirstEl(refarg_0), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NextEl(refarg_0), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Script>*)ths)->MoveBefore((Script*)(void*)*arg[1], (Script*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Script>*)ths)->MoveAfter((Script*)(void*)*arg[1], (Script*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FastEl((int)*arg[1]), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->DefaultEl(), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->Edit_El((Script*)(void*)*arg[1]), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->Leaf((int)*arg[1]), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NewEl(), 1, &TA_Script);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NewEl((int)*arg[1]), 1, &TA_Script);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Script);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Script);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Script);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Script);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Script);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->Pop(), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->Peek(), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->AddUniqNameOld((Script*)(void*)*arg[1]), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->LinkUniqNameOld((Script*)(void*)*arg[1]), 1, &TA_Script);
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Script);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Script);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Script__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Script);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Script>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Script);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Script_MGroup*		 TAI_Script_MGroup=NULL;
  static cssEl* cssElCFun_Script_MGroup_StopRecording_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script_MGroup*)ths)->StopRecording();
    return rval;}
  static cssEl* cssElCFun_Script_MGroup_AutoRun_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script_MGroup*)ths)->AutoRun();
    return rval;}
  static cssEl* cssElCFun_Script_MGroup_Run_mc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script_MGroup*)ths)->Run_mc((taiMenuEl*)(void*)*arg[1]);
    return rval;}
taiData*		 TAI_taiData=NULL;
taiMisc*		 TAI_taiMisc=NULL;
  static cssEl* cssElCFun_taiMisc_OpenWindows_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taiMisc*)ths)->OpenWindows();
    return rval;}
  static cssEl* cssElCFun_taiMisc_WaitProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMisc*)ths)->WaitProc());
    return rval;}
  static cssEl* cssElCFun_taiMisc_ScriptIconify_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taiMisc*)ths)->ScriptIconify((void*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taiMisc_SetIconify_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMisc*)ths)->SetIconify((void*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taiMisc_RunPending_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMisc*)ths)->RunPending());
    return rval;}
  static cssEl* cssElCFun_taiMisc_PurgeDialogs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taiMisc*)ths)->PurgeDialogs();
    return rval;}
  static cssEl* cssElCFun_taiMisc_RevertEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMisc*)ths)->RevertEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taiMisc_CloseEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMisc*)ths)->CloseEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taiMisc_NotifyEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMisc*)ths)->NotifyEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taiMisc_ReShowEdits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssInt((int)((taiMisc*)ths)->ReShowEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taiMisc*)ths)->ReShowEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2], (bool)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taiMisc_FindEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA((void*)((taiMisc*)ths)->FindEdit((void*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taiEditDataHost);}
    if(na == 3) {
      rval=new cssTA((void*)((taiMisc*)ths)->FindEdit((void*)(void*)*arg[1], (TypeDef*)*arg[2], (iDataViewer*)(void*)*arg[3]), 1, &TA_taiEditDataHost);}
    return rval;}
  static cssEl* cssElCFun_taiMisc_InitMetrics_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taiMisc*)ths)->InitMetrics();
    return rval;}
  static cssEl* cssElCFun_taiMisc_AdjustFont_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    iFont& refarg_1=*(iFont*)arg[2]->GetVoidPtrOfType(&TA_iFont);
    ((taiMisc*)ths)->AdjustFont((int)*arg[1], refarg_1);
    return rval;}
  static cssEl* cssElCFun_taiAction_connect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taiAction*)ths)->connect((QObject*)(void*)*arg[1], (const char*)*arg[2]);
    return rval;}
taPtrList<taiData>*		 TAI_taPtrList_taiData_=NULL;
taPtrList<taiMenuEl>*		 TAI_taPtrList_taiMenuEl_=NULL;
taPtrList<taiMenu>*		 TAI_taPtrList_taiMenu_=NULL;
  static cssEl* cssElCFun_HiLightButton_hiLight_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((HiLightButton*)ths)->hiLight());
    return rval;}
  static cssEl* cssElCFun_HiLightButton_setHiLight_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((HiLightButton*)ths)->setHiLight((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iContextLabel_index_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iContextLabel*)ths)->index());
    return rval;}
  static cssEl* cssElCFun_taiChoiceDialog_ChoiceDialog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taiChoiceDialog*)ths)->ChoiceDialog((QWidget*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taiChoiceDialog*)ths)->ChoiceDialog((QWidget*)(void*)*arg[1], (const char*)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taiChoiceDialog*)ths)->ChoiceDialog((QWidget*)(void*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((taiChoiceDialog*)ths)->ChoiceDialog((QWidget*)(void*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (bool)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_taiChoiceDialog_ErrorDialog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taiChoiceDialog*)ths)->ErrorDialog((QWidget*)(void*)*arg[1], (const char*)*arg[2]);}
    if(na == 3) {
      ((taiChoiceDialog*)ths)->ErrorDialog((QWidget*)(void*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]);}
    return rval;}
Member_List*		 TAI_Member_List=NULL;
taiTypeBase*		 TAI_taiTypeBase=NULL;
taiViewType*		 TAI_taiViewType=NULL;
taiType*		 TAI_taiType=NULL;
taiMember*		 TAI_taiMember=NULL;
taiEdit*		 TAI_taiEdit=NULL;
taiMethod*		 TAI_taiMethod=NULL;
taiArgType*		 TAI_taiArgType=NULL;
taPtrList<taiType>*		 TAI_taPtrList_taiType_=NULL;
taiIntType*		 TAI_taiIntType=NULL;
taiEnumType*		 TAI_taiEnumType=NULL;
taiBoolType*		 TAI_taiBoolType=NULL;
taiClassType*		 TAI_taiClassType=NULL;
taiStringType*		 TAI_taiStringType=NULL;
gpiListType*		 TAI_gpiListType=NULL;
gpiGroupType*		 TAI_gpiGroupType=NULL;
gpiArray_Type*		 TAI_gpiArray_Type=NULL;
taiTokenPtrType*		 TAI_taiTokenPtrType=NULL;
taiTypePtr*		 TAI_taiTypePtr=NULL;
taiFilePtrType*		 TAI_taiFilePtrType=NULL;
taiDefaultEdit*		 TAI_taiDefaultEdit=NULL;
taiTokenPtrMember*		 TAI_taiTokenPtrMember=NULL;
taiDefaultToken*		 TAI_taiDefaultToken=NULL;
taiSubTokenPtrMember*		 TAI_taiSubTokenPtrMember=NULL;
taiTypePtrMember*		 TAI_taiTypePtrMember=NULL;
taiMemberDefPtrMember*		 TAI_taiMemberDefPtrMember=NULL;
taiFunPtrMember*		 TAI_taiFunPtrMember=NULL;
taiCondEditMember*		 TAI_taiCondEditMember=NULL;
taiTDefaultMember*		 TAI_taiTDefaultMember=NULL;
taiButtonMethod*		 TAI_taiButtonMethod=NULL;
taiMenuMethod*		 TAI_taiMenuMethod=NULL;
taiStreamArgType*		 TAI_taiStreamArgType=NULL;
taiBoolArgType*		 TAI_taiBoolArgType=NULL;
taiTokenPtrArgType*		 TAI_taiTokenPtrArgType=NULL;
taiTypePtrArgType*		 TAI_taiTypePtrArgType=NULL;
taiMemberPtrArgType*		 TAI_taiMemberPtrArgType=NULL;
taiMethodPtrArgType*		 TAI_taiMethodPtrArgType=NULL;
gpiDefaultEl*		 TAI_gpiDefaultEl=NULL;
gpiLinkGP*		 TAI_gpiLinkGP=NULL;
gpiLinkList*		 TAI_gpiLinkList=NULL;
gpiFromGpTokenPtrMember*		 TAI_gpiFromGpTokenPtrMember=NULL;
gpiTAPtrArgType*		 TAI_gpiTAPtrArgType=NULL;
gpiInObjArgType*		 TAI_gpiInObjArgType=NULL;
gpiFromGpArgType*		 TAI_gpiFromGpArgType=NULL;
gpiListEdit*		 TAI_gpiListEdit=NULL;
gpiGroupEdit*		 TAI_gpiGroupEdit=NULL;
gpiArrayEdit*		 TAI_gpiArrayEdit=NULL;
SArgEdit*		 TAI_SArgEdit=NULL;
gpiSelectEdit*		 TAI_gpiSelectEdit=NULL;
tabViewType*		 TAI_tabViewType=NULL;
tabOViewType*		 TAI_tabOViewType=NULL;
tabListViewType*		 TAI_tabListViewType=NULL;
tabGroupViewType*		 TAI_tabGroupViewType=NULL;
  static cssEl* cssElCFun_taiMimeItem_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiMimeItem*)ths)->New((taBase*)(void*)*arg[1]), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taiMimeItem_obj_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiMimeItem*)ths)->obj(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taiMimeItem_td_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiMimeItem*)ths)->td(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taiMimeItem_type_name_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taiMimeItem*)ths)->type_name());
    return rval;}
  static cssEl* cssElCFun_taiMimeItem_is_tab_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMimeItem*)ths)->is_tab());
    return rval;}
  static cssEl* cssElCFun_taiMimeItem_path_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taiMimeItem*)ths)->path());
    return rval;}
  static cssEl* cssElCFun_taiMimeItem_obj_destroyed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taiMimeItem*)ths)->obj_destroyed();
    return rval;}
  static cssEl* cssElCFun_taiClipData_count_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiClipData*)ths)->count());
    return rval;}
  static cssEl* cssElCFun_taiClipData_is_multi_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiClipData*)ths)->is_multi());
    return rval;}
  static cssEl* cssElCFun_taiClipData_items_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taiClipData*)ths)->items((int)*arg[1]), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taiClipData_ClipOpToSrcCode_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taiClipData*)ths)->ClipOpToSrcCode((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taiClipData_format_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssCPtr_char((void*)((taiClipData*)ths)->format(), 1);}
    if(na == 1) {
      rval=new cssCPtr_char((void*)((taiClipData*)ths)->format((int)*arg[1]), 1);}
    return rval;}
taPtrList<taiMimeItem>*		 TAI_taPtrList_taiMimeItem_=NULL;
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->FastEl((int)*arg[1]), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->Edit_El((taiMimeItem*)(void*)*arg[1]), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taiMimeItem);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taiMimeItem);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->Pop(), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->Peek(), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->AddUniqNameOld((taiMimeItem*)(void*)*arg[1]), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taiMimeItem>*)ths)->LinkUniqNameOld((taiMimeItem*)(void*)*arg[1]), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->FindEl((const taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taiMimeItem>*)ths)->AddEl((taiMimeItem*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taiMimeItem>*)ths)->Add((taiMimeItem*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->AddUnique((taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->AddUniqNameNew((taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->Insert((taiMimeItem*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->Replace((int)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->ReplaceEl((taiMimeItem*)(void*)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->ReplaceName((const char*)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->RemoveEl((taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->DuplicateEl((taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taiMimeItem>*)ths)->Link((taiMimeItem*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->LinkUnique((taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->LinkUniqNameNew((taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->InsertLink((taiMimeItem*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->InsertLink((taiMimeItem*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->ReplaceLink((int)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->ReplaceLinkEl((taiMimeItem*)(void*)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->ReplaceLinkName((const char*)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taiMimeItem>*)ths)->Push((taiMimeItem*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->MoveEl((taiMimeItem*)(void*)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->Transfer((taiMimeItem*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->MoveBefore((taiMimeItem*)(void*)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taiMimeItem__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taiMimeItem>*)ths)->MoveAfter((taiMimeItem*)(void*)*arg[1], (taiMimeItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taiMimeItem_List_El_Done__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taiMimeItem_List*)ths)->El_Done_((void*)(void*)*arg[1]);
    return rval;}
WinGeometry*		 TAI_WinGeometry=NULL;
  static cssEl* cssElCFun_WinGeometry_GetOwner_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((WinGeometry*)ths)->GetOwner(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_WinGeometry_Offs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((WinGeometry*)ths)->Offs((float)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_WinGeometry_GetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinGeometry*)ths)->GetWinPos();
    return rval;}
  static cssEl* cssElCFun_WinGeometry_SetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinGeometry*)ths)->SetWinPos();
    return rval;}
  static cssEl* cssElCFun_WinGeometry_ScriptWinPos_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinGeometry*)ths)->ScriptWinPos();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((WinGeometry*)ths)->ScriptWinPos(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_ToolBar_viewer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ToolBar*)ths)->viewer(), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_ToolBar_viewer_win_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ToolBar*)ths)->viewer_win(), 1, &TA_iDataViewer);
    return rval;}
  static cssEl* cssElCFun_ToolBar_GetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ToolBar*)ths)->GetWinPos();
    return rval;}
  static cssEl* cssElCFun_ToolBar_SetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ToolBar*)ths)->SetWinPos();
    return rval;}
  static cssEl* cssElCFun_ToolBar_Dock_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ToolBar*)ths)->Dock();
    return rval;}
  static cssEl* cssElCFun_ToolBar_Undock_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ToolBar*)ths)->Undock();
    return rval;}
  static cssEl* cssElCFun_ToolBar_Show_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ToolBar*)ths)->Show();
    return rval;}
  static cssEl* cssElCFun_ToolBar_Hide_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ToolBar*)ths)->Hide();
    return rval;}
DataViewer*		 TAI_DataViewer=NULL;
  static cssEl* cssElCFun_DataViewer_GetDataLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA((void*)((DataViewer*)ths)->GetDataLink((void*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taiDataLink);}
    if(na == 3) {
      rval=new cssTA((void*)((DataViewer*)ths)->GetDataLink((void*)(void*)*arg[1], (TypeDef*)*arg[2], (int)*arg[3]), 1, &TA_taiDataLink);}
    return rval;}
  static cssEl* cssElCFun_DataViewer_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((DataViewer*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((DataViewer*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((DataViewer*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_DataViewer_Edit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((DataViewer*)ths)->Edit());}
    if(na == 1) {
      rval=new cssInt((int)((DataViewer*)ths)->Edit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_DataViewer_Clear_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->Clear();
    return rval;}
  static cssEl* cssElCFun_DataViewer_HasChanges_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataViewer*)ths)->HasChanges());
    return rval;}
  static cssEl* cssElCFun_DataViewer_Changed_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((DataViewer*)ths)->Changed();}
    if(na == 1) {
      ((DataViewer*)ths)->Changed((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_DataViewer_Print_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((DataViewer*)ths)->Print((DataViewer::PrintFmt)(int)*arg[1]);}
    if(na == 2) {
      ((DataViewer*)ths)->Print((DataViewer::PrintFmt)(int)*arg[1], (const char*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_DataViewer_Print_Data_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((DataViewer*)ths)->Print_Data((DataViewer::PrintFmt)(int)*arg[1]);}
    if(na == 2) {
      ((DataViewer*)ths)->Print_Data((DataViewer::PrintFmt)(int)*arg[1], (const char*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_DataViewer_ScriptWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->ScriptWinPos();
    return rval;}
  static cssEl* cssElCFun_DataViewer_Iconify_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->Iconify();
    return rval;}
  static cssEl* cssElCFun_DataViewer_DeIconify_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->DeIconify();
    return rval;}
  static cssEl* cssElCFun_DataViewer_IsMapped_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataViewer*)ths)->IsMapped());
    return rval;}
  static cssEl* cssElCFun_DataViewer_ViewWindow_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->ViewWindow();
    return rval;}
  static cssEl* cssElCFun_DataViewer_GetPrintFileExt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((DataViewer*)ths)->GetPrintFileExt((DataViewer::PrintFmt)(int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataViewer_Raise_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->Raise();
    return rval;}
  static cssEl* cssElCFun_DataViewer_Lower_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->Lower();
    return rval;}
  static cssEl* cssElCFun_DataViewer_WinInit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataViewer*)ths)->WinInit();
    return rval;}
  static cssEl* cssElCFun_ISelectable_md_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable*)ths)->md(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_ISelectable_par_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable*)ths)->par_link(), 1, &TA_taiDataLink);
    return rval;}
  static cssEl* cssElCFun_ISelectable_par_md_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable*)ths)->par_md(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_ISelectable_host_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable*)ths)->host(), 1, &TA_IDataViewHost);
    return rval;}
  static cssEl* cssElCFun_ISelectable_view_name_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((ISelectable*)ths)->view_name());
    return rval;}
  static cssEl* cssElCFun_ISelectable_widget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable*)ths)->widget(), 1, &TA_QWidget);
    return rval;}
  static cssEl* cssElCFun_ISelectable_EditAction__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ISelectable_PtrList& refarg_0=*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList);
    rval=new cssInt((int)((ISelectable*)ths)->EditAction_(refarg_0, (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ISelectable_FillContextMenu_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ISelectable_PtrList& refarg_0=*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList);
    ((ISelectable*)ths)->FillContextMenu(refarg_0, (taiMenu*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ISelectable_GetClipData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable*)ths)->GetClipData(*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList), (int)*arg[2], (bool)*arg[3]), 1, &TA_taiClipData);
    return rval;}
  static cssEl* cssElCFun_ISelectable_GetEditActions__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ISelectable*)ths)->GetEditActions_(*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList)));
    return rval;}
  static cssEl* cssElCFun_ISelectable_GetMimeItem_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable*)ths)->GetMimeItem(), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_ISelectable_RefUnref_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ISelectable*)ths)->RefUnref((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_IDataViewHost_This_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((IDataViewHost*)ths)->This(), 1, &TA_QWidget);
    return rval;}
  static cssEl* cssElCFun_IDataViewHost_ObjectRemoving_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((IDataViewHost*)ths)->ObjectRemoving((ISelectable*)(void*)*arg[1]));
    return rval;}
taPtrList<ISelectable>*		 TAI_taPtrList_ISelectable_=NULL;
  static cssEl* cssElCFun_taPtrList_ISelectable__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->SafeEl((int)*arg[1]), 1, &TA_ISelectable);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->FastEl((int)*arg[1]), 1, &TA_ISelectable);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->Edit_El((ISelectable*)(void*)*arg[1]), 1, &TA_ISelectable);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->FindName((const char*)*arg[1]), 1, &TA_ISelectable);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_ISelectable);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->Pop(), 1, &TA_ISelectable);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->Peek(), 1, &TA_ISelectable);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->AddUniqNameOld((ISelectable*)(void*)*arg[1]), 1, &TA_ISelectable);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ISelectable>*)ths)->LinkUniqNameOld((ISelectable*)(void*)*arg[1]), 1, &TA_ISelectable);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->FindEl((const ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ISelectable>*)ths)->AddEl((ISelectable*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ISelectable>*)ths)->Add((ISelectable*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->AddUnique((ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->AddUniqNameNew((ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->Insert((ISelectable*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->Replace((int)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->ReplaceEl((ISelectable*)(void*)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->ReplaceName((const char*)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->RemoveEl((ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->DuplicateEl((ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ISelectable>*)ths)->Link((ISelectable*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->LinkUnique((ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->LinkUniqNameNew((ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->InsertLink((ISelectable*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->InsertLink((ISelectable*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->ReplaceLink((int)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->ReplaceLinkEl((ISelectable*)(void*)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->ReplaceLinkName((const char*)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ISelectable>*)ths)->Push((ISelectable*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->MoveEl((ISelectable*)(void*)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->Transfer((ISelectable*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->MoveBefore((ISelectable*)(void*)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ISelectable__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ISelectable>*)ths)->MoveAfter((ISelectable*)(void*)*arg[1], (ISelectable*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ISelectable_PtrList_Type1_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable_PtrList*)ths)->Type1(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_ISelectable_PtrList_CommonSubtype1N_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable_PtrList*)ths)->CommonSubtype1N(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_ISelectable_PtrList_CommonSubtype2N_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ISelectable_PtrList*)ths)->CommonSubtype2N(), 1, &TA_TypeDef);
    return rval;}
taList<DataViewer>*		 TAI_taList_DataViewer_=NULL;
  static cssEl* cssElCFun_taList_DataViewer__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<DataViewer>*)ths)->MoveBefore((DataViewer*)(void*)*arg[1], (DataViewer*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<DataViewer>*)ths)->MoveAfter((DataViewer*)(void*)*arg[1], (DataViewer*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->FastEl((int)*arg[1]), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->DefaultEl(), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->Edit_El((DataViewer*)(void*)*arg[1]), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->FindName((const char*)*arg[1]), 1, &TA_DataViewer);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_DataViewer);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_DataViewer);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_DataViewer);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->Pop(), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->Peek(), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->AddUniqNameOld((DataViewer*)(void*)*arg[1]), 1, &TA_DataViewer);
    return rval;}
  static cssEl* cssElCFun_taList_DataViewer__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataViewer>*)ths)->LinkUniqNameOld((DataViewer*)(void*)*arg[1]), 1, &TA_DataViewer);
    return rval;}
DataViewer_List*		 TAI_DataViewer_List=NULL;
DataBrowser*		 TAI_DataBrowser=NULL;
  static cssEl* cssElCFun_DataBrowser_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((DataBrowser*)ths)->New((void*)(void*)*arg[1], (MemberDef*)*arg[2], (TypeDef*)*arg[3]), 1, &TA_DataBrowser);}
    if(na == 4) {
      rval=new cssTA_Base((void*)((DataBrowser*)ths)->New((void*)(void*)*arg[1], (MemberDef*)*arg[2], (TypeDef*)*arg[3], (bool)*arg[4]), 1, &TA_DataBrowser);}
    return rval;}
ClassBrowser*		 TAI_ClassBrowser=NULL;
  static cssEl* cssElCFun_ClassBrowser_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ClassBrowser*)ths)->New((void*)(void*)*arg[1], (TypeInfoKind)(int)*arg[2]), 1, &TA_ClassBrowser);
    return rval;}
  static cssEl* cssElCFun_ClassBrowser_StatGetDataLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ClassBrowser*)ths)->StatGetDataLink((void*)(void*)*arg[1], (TypeInfoKind)(int)*arg[2]), 1, &TA_taiDataLink);
    return rval;}
  static cssEl* cssElCFun_ClassBrowser_browser_win_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ClassBrowser*)ths)->browser_win(), 1, &TA_iClassBrowser);
    return rval;}
taPtrList<gpiList_ElData>*		 TAI_taPtrList_gpiList_ElData_=NULL;
SelectEditConfig*		 TAI_SelectEditConfig=NULL;
iPoint*		 TAI_iPoint=NULL;
  static cssEl* cssElCFun_iPoint_getArrayIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iPoint*)ths)->getArrayIndex((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_iPoint_isEqual_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iPoint*)ths)->isEqual((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_iPoint_getValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];
    ((iPoint*)ths)->getValue(refarg_0, refarg_1);
    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_iPoint_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iPoint*)ths)->setValue((int)*arg[1], (int)*arg[2]);
    return rval;}
iVec3i*		 TAI_iVec3i=NULL;
  static cssEl* cssElCFun_iVec3i_isEqual_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iVec3i*)ths)->isEqual((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_iVec3i_getValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((iVec3i*)ths)->getValue(refarg_0, refarg_1, refarg_2);
    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_iVec3i_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iVec3i*)ths)->setValue((int)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
iSize*		 TAI_iSize=NULL;
  static cssEl* cssElCFun_iSize_height_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iSize*)ths)->height());
    return rval;}
  static cssEl* cssElCFun_iSize_width_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iSize*)ths)->width());
    return rval;}
iRect*		 TAI_iRect=NULL;
  static cssEl* cssElCFun_iRect_topLeft_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iRect*)ths)->topLeft();
    return rval;}
  static cssEl* cssElCFun_iRect_size_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iRect*)ths)->size();
    return rval;}
  static cssEl* cssElCFun_iRect_left_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->left());
    return rval;}
  static cssEl* cssElCFun_iRect_top_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->top());
    return rval;}
  static cssEl* cssElCFun_iRect_width_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->width());
    return rval;}
  static cssEl* cssElCFun_iRect_height_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->height());
    return rval;}
iVec3f*		 TAI_iVec3f=NULL;
  static cssEl* cssElCFun_iVec3f_isEqual_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iVec3f*)ths)->isEqual((float)*arg[1], (float)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_iVec3f_isUnity_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iVec3f*)ths)->isUnity());
    return rval;}
  static cssEl* cssElCFun_iVec3f_isZero_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iVec3f*)ths)->isZero());
    return rval;}
  static cssEl* cssElCFun_iVec3f_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iVec3f*)ths)->setValue((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
iBox3f*		 TAI_iBox3f=NULL;
  static cssEl* cssElCFun_iBox3f_center_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->center();
    return rval;}
  static cssEl* cssElCFun_iBox3f_size_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->size();
    return rval;}
  static cssEl* cssElCFun_iBox3f_isZero_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iBox3f*)ths)->isZero());
    return rval;}
  static cssEl* cssElCFun_iBox3f_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->setValue(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), *(iVec3f*)arg[2]->GetVoidPtrOfType(&TA_iVec3f));
    return rval;}
  static cssEl* cssElCFun_iBox3f_setValueCS_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->setValueCS(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), *(iVec3f*)arg[2]->GetVoidPtrOfType(&TA_iVec3f));
    return rval;}

// Type Data

static EnumDef_data TA_taBase_Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taBase_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_taBase_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taBase_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taBase_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taBase_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taBase_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taBase_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taBase_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taBase_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_taBase_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taBase_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_taBase_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taBase_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taBase_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taBase_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taBase_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taBase_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taBase_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taBase_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_taBase_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taBase_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taBase_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taBase_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taBase_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taBase_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_taBase_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taBase_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taBase_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taBase_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodDef_data TA_taBase_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_taBase_GetColText_stub,TA_taBase_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_taBase_ChildQueryEditActions_stub,TA_taBase_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_taBase_ChildEditAction_stub,TA_taBase_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_taBase_QueryEditActions_stub,TA_taBase_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_taBase_EditAction_stub,TA_taBase_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_taBase_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_taBase_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_taBase_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_taBase_UnSafeCopy_stub,TA_taBase_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_taBase_CastCopyTo_stub,TA_taBase_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    1,1,-1,0,NULL,cssElCFun_taBase_GetOwner_stub,TA_taBase_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_taBase_GetPath_stub,TA_taBase_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_taBase_FindFromPath_stub,TA_taBase_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_taBase_New_stub,TA_taBase_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_taBase_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_taBase_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taBase_StructUpdate_stub,TA_taBase_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taBase_DataUpdate_stub,TA_taBase_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taBase_AddDataView_stub,TA_taBase_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taBase_RemoveDataView_stub,TA_taBase_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_taBase_InheritsFrom_stub,TA_taBase_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_taBase_GetEnumString_stub,TA_taBase_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_taBase_GetEnumVal_stub,TA_taBase_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_taBase_Load_stub,TA_taBase_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_taBase_Save_stub,TA_taBase_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_taBase_SaveAs_stub,TA_taBase_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_taBase_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_taBase_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_taBase_ReShowEdit_stub,TA_taBase_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_taBase_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taBase_CopyFrom_stub,TA_taBase_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taBase_CopyTo_stub,TA_taBase_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_taBase_ChildUpdateAfterEdit_stub,TA_taBase_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taBase_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taBase_ChangeMyType_stub,TA_taBase_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_taBase_SelectForEdit_stub,TA_taBase_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taBase_SelectFunForEdit_stub,TA_taBase_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taBase_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_taBase_CallFun_stub,TA_taBase_CallFun_MethArgs},
  NULL};
static MethodArgs_data TA_taString_setRep_MethArgs[]={
  {&TA_taStrRep_ptr,NULL,"rep_",""},
  NULL};
static MethodArgs_data TA_taString_makeUnique_MethArgs[]={
  {&TA_uint,NULL,"min_new_sz",""},
  NULL};
static MethodArgs_data TA_taString_convert_MethArgs[]={
  {&TA_double,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"format"," %lg"},
  NULL};
static MethodArgs_data TA_taString_set_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_cat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_prepend_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_index_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_contains_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_matches_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"pos"," 0"},
  NULL};
static MethodArgs_data TA_taString_freq_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_at_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_before_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_through_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_from_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_after_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_del_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_remove_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_gsub_MethArgs[]={
  {&TA_const_char_ptr,NULL,"pat",""},
  {&TA_const_char_ptr,NULL,"repl",""},
  NULL};
static MethodArgs_data TA_taString_truncate_MethArgs[]={
  {&TA_uint,NULL,"new_len",""},
  NULL};
static MethodArgs_data TA_taString_elem_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taString_error_MethArgs[]={
  {&TA_const_char_ptr,NULL,"msg",""},
  NULL};
static MethodDef_data TA_taString_MethodDef[]={
  {&TA_void,NULL,"setRep"," for replacing rep (non-constructor) -- rep_ must be non-null","","",
    0,1,-1,0,NULL,cssElCFun_taString_setRep_stub,TA_taString_setRep_MethArgs},
  {&TA_unsigned_int,NULL,"length"," how many characters in the string","","",
    0,0,-1,0,NULL,cssElCFun_taString_length_stub,NULL},
  {&TA_bool,NULL,"empty"," true if the string is empty","","",
    0,0,-1,0,NULL,cssElCFun_taString_empty_stub,NULL},
  {&TA_bool,NULL,"isInt"," true if the string contains a value that can be interpreted as an integer [+-]dd*","","",
    0,0,-1,0,NULL,cssElCFun_taString_isInt_stub,NULL},
  {&TA_int,NULL,"allocation","","","",
    0,0,-1,0,NULL,cssElCFun_taString_allocation_stub,NULL},
  {&TA_int,NULL,"assertLength"," call after manual buffer operations, to set length from null term -- **WARNING** only use on ref==1, and where there is a null term in the buff, and sz is not overflowed","","",
    0,0,-1,0,NULL,cssElCFun_taString_assertLength_stub,NULL},
  {&TA_const_char_ptr,NULL,"chars"," returns null-terminated string DO NOT MODIFY","","",
    0,0,-1,0,NULL,cssElCFun_taString_chars_stub,NULL},
  {&TA_char_ptr,NULL,"chars_ptr"," returns point to the string, for in-place mods -- **this makeUnique() first, so you have a unique instance to overwrite**","","",
    0,0,-1,0,NULL,cssElCFun_taString_chars_ptr_stub,NULL},
  {&TA_void,NULL,"makeUnique"," make sure we are only owner of mrep makeUnique(), but force sz to be at least new_sz","","",
    1,1,-1,0,NULL,cssElCFun_taString_makeUnique_stub,TA_taString_makeUnique_MethArgs},
  {&TA_void,NULL,"pack"," if there is any extra space (above a small threshold), release it","","",
    0,0,-1,0,NULL,cssElCFun_taString_pack_stub,NULL},
  {&TA_taString_ref,NULL,"convert","","","",
    3,2,1,0,NULL,cssElCFun_taString_convert_stub,TA_taString_convert_MethArgs},
  {&TA_taString_ref,NULL,"set"," parameterized set -- used in assigns","","",
    0,2,-1,0,NULL,cssElCFun_taString_set_stub,TA_taString_set_MethArgs},
  {&TA_taString_ref,NULL,"cat","","","",
    2,1,-1,0,NULL,cssElCFun_taString_cat_stub,TA_taString_cat_MethArgs},
  {&TA_taString_ref,NULL,"prepend"," add to beginning of string","","",
    2,1,-1,0,NULL,cssElCFun_taString_prepend_stub,TA_taString_prepend_MethArgs},
  {&TA_int,NULL,"index"," return position of target in string or -1 for failure","","",
    2,2,1,0,NULL,cssElCFun_taString_index_stub,TA_taString_index_MethArgs},
  {&TA_bool,NULL,"contains"," return 'true' if target appears anyhere in String return 'true' if target appears anywhere after position pos (or before, if pos is negative) in String","","",
    5,1,-1,0,NULL,cssElCFun_taString_contains_stub,TA_taString_contains_MethArgs},
  {&TA_bool,NULL,"matches"," return 'true' if target appears at position pos in String","","",
    2,2,1,0,NULL,cssElCFun_taString_matches_stub,TA_taString_matches_MethArgs},
  {&TA_int,NULL,"freq"," return number of occurences of target in String","","",
    2,1,-1,0,NULL,cssElCFun_taString_freq_stub,TA_taString_freq_MethArgs},
  {&TA_taString,NULL,"at"," substring at position for length","","",
    3,2,-1,0,NULL,cssElCFun_taString_at_stub,TA_taString_at_MethArgs},
  {&TA_taString,NULL,"before"," substring before (not including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_before_stub,TA_taString_before_MethArgs},
  {&TA_taString,NULL,"through"," substring through (including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_through_stub,TA_taString_through_MethArgs},
  {&TA_taString,NULL,"from"," substring from (including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_from_stub,TA_taString_from_MethArgs},
  {&TA_taString,NULL,"after"," substring after (not including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_after_stub,TA_taString_after_MethArgs},
  {&TA_void,NULL,"del"," delete len chars starting at pos","","",
    3,2,-1,0,NULL,cssElCFun_taString_del_stub,TA_taString_del_MethArgs},
  {&TA_void,NULL,"remove"," remove target string from string","","",
    0,2,1,0,NULL,cssElCFun_taString_remove_stub,TA_taString_remove_MethArgs},
  {&TA_int,NULL,"gsub"," global substitution: substitute all occurrences of pat with repl","","",
    2,2,-1,0,NULL,cssElCFun_taString_gsub_stub,TA_taString_gsub_MethArgs},
  {&TA_taString_ref,NULL,"reverse"," reverse order of string","","",
    0,0,-1,0,NULL,cssElCFun_taString_reverse_stub,NULL},
  {&TA_taString_ref,NULL,"upcase"," convert all letters to upper case","","",
    0,0,-1,0,NULL,cssElCFun_taString_upcase_stub,NULL},
  {&TA_taString_ref,NULL,"downcase"," convert all letters to lower case","","",
    0,0,-1,0,NULL,cssElCFun_taString_downcase_stub,NULL},
  {&TA_taString_ref,NULL,"capitalize"," capitalize the first letter of each word","","",
    0,0,-1,0,NULL,cssElCFun_taString_capitalize_stub,NULL},
  {&TA_void,NULL,"truncate"," shortens the string to new_len (if less than curr)","","",
    0,1,-1,0,NULL,cssElCFun_taString_truncate_stub,TA_taString_truncate_MethArgs},
  {&TA_char,NULL,"elem"," get the character at index i","","",
    0,1,-1,0,NULL,cssElCFun_taString_elem_stub,TA_taString_elem_MethArgs},
  {&TA_char,NULL,"firstchar"," get the first character","","",
    0,0,-1,0,NULL,cssElCFun_taString_firstchar_stub,NULL},
  {&TA_char,NULL,"lastchar"," get the last character","","",
    0,0,-1,0,NULL,cssElCFun_taString_lastchar_stub,NULL},
  {&TA_void,NULL,"error"," obs int OK() const;	// check if the string is allocated properly, etc.","","",
    0,1,-1,0,NULL,cssElCFun_taString_error_stub,TA_taString_error_MethArgs},
  NULL};
static EnumDef_data TA__Ios_Fmtflags_EnumDef[]={
  {"boolalpha","","",1},
  {"dec","","",2},
  {"fixed","","",4},
  {"hex","","",8},
  {"internal","","",16},
  {"left","","",32},
  {"oct","","",64},
  {"right","","",128},
  {"scientific","","",256},
  {"showbase","","",512},
  {"showpoint","","",1024},
  {"showpos","","",2048},
  {"skipws","","",4096},
  {"unitbuf","","",8192},
  {"uppercase","","",16384},
  {"adjustfield","","",0},
  {"b0","","",1},
  {"basefield","","",4},
  {"a","","",5},
  {"floatfield","","",260},
  NULL};
static EnumDef_data TA__Ios_Openmode_EnumDef[]={
  {"app","","",1},
  {"ate","","",2},
  {"binary","","",4},
  {"in","","",8},
  {"out","","",16},
  {"trunc","","",32},
  NULL};
static EnumDef_data TA__Ios_Iostate_EnumDef[]={
  {"badbit","","",1},
  {"eofbit","","",2},
  {"failbit","","",4},
  {"goodbit","","",0},
  NULL};
static EnumDef_data TA__Ios_Seekdir_EnumDef[]={
  {"beg","","",0},
  {"cur"," 1","",1},
  {"end"," 2","",2},
  NULL};
static EnumDef_data TA_ios_fmtflags[]={
  {"boolalpha","","",1},
  {"dec","","",2},
  {"fixed","","",4},
  {"hex","","",8},
  {"internal","","",16},
  {"left","","",32},
  {"oct","","",64},
  {"right","","",128},
  {"scientific","","",256},
  {"showbase","","",512},
  {"showpoint","","",1024},
  {"showpos","","",2048},
  {"skipws","","",4096},
  {"unitbuf","","",8192},
  {"uppercase","","",16384},
  {"adjustfield","","",0},
  {"b0","","",1},
  {"basefield","","",4},
  {"a","","",5},
  {"floatfield","","",260},
  NULL};
static EnumDef_data TA_ios_iostate[]={
  {"badbit","","",1},
  {"eofbit","","",2},
  {"failbit","","",4},
  {"goodbit","","",0},
  NULL};
static EnumDef_data TA_ios_openmode[]={
  {"app","","",1},
  {"ate","","",2},
  {"binary","","",4},
  {"in","","",8},
  {"out","","",16},
  {"trunc","","",32},
  NULL};
static EnumDef_data TA_ios_seekdir[]={
  {"beg","","",0},
  {"cur"," 1","",1},
  {"end"," 2","",2},
  NULL};
static MethodArgs_data TA_ios_setf_MethArgs[]={
  {NULL,"::fmtflags","val",""},
  NULL};
static MethodArgs_data TA_ios_unsetf_MethArgs[]={
  {NULL,"::fmtflags","mask",""},
  NULL};
static MethodArgs_data TA_ios_tie_MethArgs[]={
  {&TA_ostream_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ios_precision_MethArgs[]={
  {&TA_int,NULL,"newp",""},
  NULL};
static MethodArgs_data TA_ios_width_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ios_clear_MethArgs[]={
  {NULL,"::iostate","state"," 0"},
  NULL};
static MethodArgs_data TA_ios_setstate_MethArgs[]={
  {NULL,"::iostate","flag",""},
  NULL};
static MethodArgs_data TA_ios_pword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ios_iword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodDef_data TA_ios_MethodDef[]={
  {&TA__Ios_Fmtflags,NULL,"flags","","","",
    0,0,-1,0,NULL,cssElCFun_ios_flags_stub,NULL},
  {&TA__Ios_Fmtflags,NULL,"setf","","","",
    0,1,-1,0,NULL,cssElCFun_ios_setf_stub,TA_ios_setf_MethArgs},
  {&TA_void,NULL,"unsetf","","","",
    0,1,-1,0,NULL,cssElCFun_ios_unsetf_stub,TA_ios_unsetf_MethArgs},
  {&TA_ostream_ptr,NULL,"tie","","","",
    1,1,-1,0,NULL,cssElCFun_ios_tie_stub,TA_ios_tie_MethArgs},
  {&TA_int,NULL,"precision","","","",
    1,1,-1,0,NULL,cssElCFun_ios_precision_stub,TA_ios_precision_MethArgs},
  {&TA_int,NULL,"width","","","",
    1,1,-1,0,NULL,cssElCFun_ios_width_stub,TA_ios_width_MethArgs},
  {&TA_void,NULL,"clear","","","",
    0,1,0,0,NULL,cssElCFun_ios_clear_stub,TA_ios_clear_MethArgs},
  {&TA_void,NULL,"setstate","","","",
    0,1,-1,0,NULL,cssElCFun_ios_setstate_stub,TA_ios_setstate_MethArgs},
  {&TA_int,NULL,"good","","","",
    0,0,-1,0,NULL,cssElCFun_ios_good_stub,NULL},
  {&TA_int,NULL,"eof","","","",
    0,0,-1,0,NULL,cssElCFun_ios_eof_stub,NULL},
  {&TA_int,NULL,"fail","","","",
    0,0,-1,0,NULL,cssElCFun_ios_fail_stub,NULL},
  {&TA_int,NULL,"bad","","","",
    0,0,-1,0,NULL,cssElCFun_ios_bad_stub,NULL},
  {&TA_void_ptr_ref,NULL,"pword","","","",
    0,1,-1,0,NULL,cssElCFun_ios_pword_stub,TA_ios_pword_MethArgs},
  {&TA_long_ref,NULL,"iword","","","",
    0,1,-1,0,NULL,cssElCFun_ios_iword_stub,TA_ios_iword_MethArgs},
  NULL};
static MethodArgs_data TA_ostream_put_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_ostream_write_MethArgs[]={
  {&TA_const_char_ptr,NULL,"s",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_ostream_seekp_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodDef_data TA_ostream_MethodDef[]={
  {&TA_ostream_ref,NULL,"flush","","","",
    0,0,-1,0,NULL,cssElCFun_ostream_flush_stub,NULL},
  {&TA_ostream_ref,NULL,"put","","","",
    0,1,-1,0,NULL,cssElCFun_ostream_put_stub,TA_ostream_put_MethArgs},
  {&TA_ostream_ref,NULL,"write","","","",
    0,2,-1,0,NULL,cssElCFun_ostream_write_stub,TA_ostream_write_MethArgs},
  {&TA_ostream_ref,NULL,"seekp","","","",
    0,2,-1,0,NULL,cssElCFun_ostream_seekp_stub,TA_ostream_seekp_MethArgs},
  {&TA_streampos,NULL,"tellp","","","",
    0,0,-1,0,NULL,cssElCFun_ostream_tellp_stub,NULL},
  NULL};
static MethodArgs_data TA_istream_getline_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_int,NULL,"len",""},
  {&TA_char,NULL,"delim"," '\n'"},
  NULL};
static MethodArgs_data TA_istream_read_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_istream_ignore_MethArgs[]={
  {&TA_int,NULL,"n","1"},
  {&TA_int,NULL,"delim"," (-1)"},
  NULL};
static MethodArgs_data TA_istream_seekg_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodArgs_data TA_istream_putback_MethArgs[]={
  {&TA_char,NULL,"ch",""},
  NULL};
static MethodDef_data TA_istream_MethodDef[]={
  {&TA_istream_ref,NULL,"getline","","","",
    0,3,2,0,NULL,cssElCFun_istream_getline_stub,TA_istream_getline_MethArgs},
  {&TA_istream_ref,NULL,"read","","","",
    0,2,-1,0,NULL,cssElCFun_istream_read_stub,TA_istream_read_MethArgs},
  {&TA_int,NULL,"get","","","",
    0,0,-1,0,NULL,cssElCFun_istream_get_stub,NULL},
  {&TA_int,NULL,"peek","","","",
    0,0,-1,0,NULL,cssElCFun_istream_peek_stub,NULL},
  {&TA_istream_ref,NULL,"ignore","","","",
    0,2,0,0,NULL,cssElCFun_istream_ignore_stub,TA_istream_ignore_MethArgs},
  {&TA_int,NULL,"sync","","","",
    0,0,-1,0,NULL,cssElCFun_istream_sync_stub,NULL},
  {&TA_istream_ref,NULL,"seekg","","","",
    0,2,-1,0,NULL,cssElCFun_istream_seekg_stub,TA_istream_seekg_MethArgs},
  {&TA_streampos,NULL,"tellg","","","",
    0,0,-1,0,NULL,cssElCFun_istream_tellg_stub,NULL},
  {&TA_istream_ref,NULL,"putback","","","",
    0,1,-1,0,NULL,cssElCFun_istream_putback_stub,TA_istream_putback_MethArgs},
  {&TA_istream_ref,NULL,"unget","","","",
    0,0,-1,0,NULL,cssElCFun_istream_unget_stub,NULL},
  NULL};
static MethodArgs_data TA_iostream_setf_MethArgs[]={
  {NULL,"ios::fmtflags","val",""},
  NULL};
static MethodArgs_data TA_iostream_unsetf_MethArgs[]={
  {NULL,"ios::fmtflags","mask",""},
  NULL};
static MethodArgs_data TA_iostream_tie_MethArgs[]={
  {&TA_ostream_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_iostream_precision_MethArgs[]={
  {&TA_int,NULL,"newp",""},
  NULL};
static MethodArgs_data TA_iostream_width_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_iostream_clear_MethArgs[]={
  {NULL,"ios::iostate","state"," 0"},
  NULL};
static MethodArgs_data TA_iostream_setstate_MethArgs[]={
  {NULL,"ios::iostate","flag",""},
  NULL};
static MethodArgs_data TA_iostream_pword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_iostream_iword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_iostream_getline_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_int,NULL,"len",""},
  {&TA_char,NULL,"delim"," '\n'"},
  NULL};
static MethodArgs_data TA_iostream_read_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_iostream_ignore_MethArgs[]={
  {&TA_int,NULL,"n","1"},
  {&TA_int,NULL,"delim"," (-1)"},
  NULL};
static MethodArgs_data TA_iostream_seekg_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodArgs_data TA_iostream_putback_MethArgs[]={
  {&TA_char,NULL,"ch",""},
  NULL};
static MethodArgs_data TA_iostream_put_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_iostream_write_MethArgs[]={
  {&TA_const_char_ptr,NULL,"s",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_iostream_seekp_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodDef_data TA_iostream_MethodDef[]={
  {&TA__Ios_Fmtflags,NULL,"flags","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_flags_stub,NULL},
  {&TA__Ios_Fmtflags,NULL,"setf","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_setf_stub,TA_iostream_setf_MethArgs},
  {&TA_void,NULL,"unsetf","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_unsetf_stub,TA_iostream_unsetf_MethArgs},
  {&TA_ostream_ptr,NULL,"tie","","","",
    1,1,-1,0,NULL,cssElCFun_iostream_tie_stub,TA_iostream_tie_MethArgs},
  {&TA_int,NULL,"precision","","","",
    1,1,-1,0,NULL,cssElCFun_iostream_precision_stub,TA_iostream_precision_MethArgs},
  {&TA_int,NULL,"width","","","",
    1,1,-1,0,NULL,cssElCFun_iostream_width_stub,TA_iostream_width_MethArgs},
  {&TA_void,NULL,"clear","","","",
    0,1,0,0,NULL,cssElCFun_iostream_clear_stub,TA_iostream_clear_MethArgs},
  {&TA_void,NULL,"setstate","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_setstate_stub,TA_iostream_setstate_MethArgs},
  {&TA_int,NULL,"good","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_good_stub,NULL},
  {&TA_int,NULL,"eof","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_eof_stub,NULL},
  {&TA_int,NULL,"fail","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_fail_stub,NULL},
  {&TA_int,NULL,"bad","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_bad_stub,NULL},
  {&TA_void_ptr_ref,NULL,"pword","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_pword_stub,TA_iostream_pword_MethArgs},
  {&TA_long_ref,NULL,"iword","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_iword_stub,TA_iostream_iword_MethArgs},
  {&TA_istream_ref,NULL,"getline","","","",
    0,3,2,0,NULL,cssElCFun_iostream_getline_stub,TA_iostream_getline_MethArgs},
  {&TA_istream_ref,NULL,"read","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_read_stub,TA_iostream_read_MethArgs},
  {&TA_int,NULL,"get","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_get_stub,NULL},
  {&TA_int,NULL,"peek","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_peek_stub,NULL},
  {&TA_istream_ref,NULL,"ignore","","","",
    0,2,0,0,NULL,cssElCFun_iostream_ignore_stub,TA_iostream_ignore_MethArgs},
  {&TA_int,NULL,"sync","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_sync_stub,NULL},
  {&TA_istream_ref,NULL,"seekg","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_seekg_stub,TA_iostream_seekg_MethArgs},
  {&TA_streampos,NULL,"tellg","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_tellg_stub,NULL},
  {&TA_istream_ref,NULL,"putback","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_putback_stub,TA_iostream_putback_MethArgs},
  {&TA_istream_ref,NULL,"unget","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_unget_stub,NULL},
  {&TA_ostream_ref,NULL,"flush","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_flush_stub,NULL},
  {&TA_ostream_ref,NULL,"put","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_put_stub,TA_iostream_put_MethArgs},
  {&TA_ostream_ref,NULL,"write","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_write_stub,TA_iostream_write_MethArgs},
  {&TA_ostream_ref,NULL,"seekp","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_seekp_stub,TA_iostream_seekp_MethArgs},
  {&TA_streampos,NULL,"tellp","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_tellp_stub,NULL},
  NULL};
static MethodArgs_data TA_ifstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode"," 0x08"},
  NULL};
static MethodDef_data TA_ifstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,NULL,cssElCFun_ifstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,NULL,cssElCFun_ifstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,1,0,NULL,cssElCFun_ifstream_open_stub,TA_ifstream_open_MethArgs},
  NULL};
static MethodArgs_data TA_ofstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode"," 0x10"},
  NULL};
static MethodDef_data TA_ofstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,NULL,cssElCFun_ofstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,NULL,cssElCFun_ofstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,1,0,NULL,cssElCFun_ofstream_open_stub,TA_ofstream_open_MethArgs},
  NULL};
static MethodArgs_data TA_fstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode",""},
  NULL};
static MethodDef_data TA_fstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,NULL,cssElCFun_fstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,NULL,cssElCFun_fstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,-1,0,NULL,cssElCFun_fstream_open_stub,TA_fstream_open_MethArgs},
  NULL};
static int taStrRep::* TA_taStrRep_MbrOff;
static MemberDef_data TA_taStrRep_MemberDef[]={
  {&TA_uint,NULL,"len"," string length (not including null terminator)","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::len))),0,NULL,0},
  {&TA_uint,NULL,"sz"," allocated space ((not including null terminator)","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::sz))),0,NULL,0},
  {&TA_uint,NULL,"cnt"," reference count (when goes to 0, instance is deleted)","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::cnt))),0,NULL,0},
  {&TA_char_ary,NULL,"s"," the string starts here, null terminator always maintained","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::s))),0,NULL,0},
  NULL};
static EnumDef_data TA_iFont_Attributes[]={
  {"Bold","","",1},
  {"Italic","","",2},
  {"Underline","","",4},
  NULL};
static int iFont::* TA_iFont_MbrOff;
static MemberDef_data TA_iFont_MemberDef[]={
  {&TA_taString,NULL,"fontName"," family name of the font, such as 'Helvetica' or 'Arial'","","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::fontName))),0,NULL,0},
  {NULL,"::Attributes","attribs"," font modifiers","BITS ","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::attribs))),0,NULL,0},
  {&TA_float,NULL,"pointSize"," point size of the font -- will be aproximated in 3D","","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::pointSize))),0,NULL,0},
  {&TA_int,NULL,"stretch"," the degree of stretch, less is narrower","DETAIL DEF_100 ","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::stretch))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iFont_setBold_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setItalic_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setPointSize_MethArgs[]={
  {&TA_int,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setStretch_MethArgs[]={
  {&TA_int,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setUnderline_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_copy_MethArgs[]={
  {&TA_const_iFont_ref,NULL,"src",""},
  NULL};
static MethodArgs_data TA_iFont_setRawName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"raw_name",""},
  NULL};
static MethodDef_data TA_iFont_MethodDef[]={
  {&TA_bool,NULL,"bold","","","",
    0,0,-1,0,NULL,cssElCFun_iFont_bold_stub,NULL},
  {&TA_void,NULL,"setBold","","","",
    0,1,-1,0,NULL,cssElCFun_iFont_setBold_stub,TA_iFont_setBold_MethArgs},
  {&TA_bool,NULL,"italic","","","",
    0,0,-1,0,NULL,cssElCFun_iFont_italic_stub,NULL},
  {&TA_void,NULL,"setItalic","","","",
    0,1,-1,0,NULL,cssElCFun_iFont_setItalic_stub,TA_iFont_setItalic_MethArgs},
  {&TA_void,NULL,"setPointSize","","","",
    1,1,-1,0,NULL,cssElCFun_iFont_setPointSize_stub,TA_iFont_setPointSize_MethArgs},
  {&TA_void,NULL,"setStretch","","","",
    0,1,-1,0,NULL,cssElCFun_iFont_setStretch_stub,TA_iFont_setStretch_MethArgs},
  {&TA_bool,NULL,"underline","","","",
    0,0,-1,0,NULL,cssElCFun_iFont_underline_stub,NULL},
  {&TA_void,NULL,"setUnderline","","","",
    0,1,-1,0,NULL,cssElCFun_iFont_setUnderline_stub,TA_iFont_setUnderline_MethArgs},
  {&TA_void,NULL,"copy","","","",
    0,1,-1,0,NULL,cssElCFun_iFont_copy_stub,TA_iFont_copy_MethArgs},
  {&TA_void,NULL,"setRawName","","","",
    0,1,-1,0,NULL,cssElCFun_iFont_setRawName_stub,TA_iFont_setRawName_MethArgs},
  NULL};
static int taPtrList_impl::* TA_taPtrList_impl_MbrOff;
static MemberDef_data TA_taPtrList_impl_MemberDef[]={
  {&TA_void_ptr_ptr,NULL,"el"," the elements themselves","READ_ONLY NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::el))),0,NULL,0},
  {&TA_int,NULL,"alloc_size"," allocation size","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::alloc_size))),0,NULL,0},
  {&TA_taHashTable_ptr,NULL,"hash_table"," a hash table (NULL if not used)","READ_ONLY NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::hash_table))),0,NULL,0},
  {&TA_int,NULL,"size"," number of elements in the list","READ_ONLY NO_SAVE SHOW ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::size))),0,NULL,0},
  {&TA_int,NULL,"Idx"," pass to find if you don't want one","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&taPtrList_impl::Idx),0},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Indenter_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_char_ptr,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"prln",""},
  {&TA_int,NULL,"tabs",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_GetTA_Element__MethArgs[]={
  {&TA_int,NULL,"i",""},
  {&TA_TypeDef_ptr_ref,NULL,"eltd",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_DataChanged_MethArgs[]={
  {&TA_int,NULL,"dcr",""},
  {&TA_void_ptr,NULL,"op1"," ((void *)0)"},
  {&TA_void_ptr,NULL,"op2"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BuildHashTable_MethArgs[]={
  {&TA_int,NULL,"n_buckets",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_RemoveName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Swap_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Sort__MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taPtrList_impl_FirstEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_NextEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Stealth_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Common_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_GetColHeading_MethArgs[]={
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_ChildGetColText_MethArgs[]={
  {&TA_void_ptr,NULL,"child",""},
  {&TA_TypeDef_ptr,NULL,"typ",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm","cout"},
  NULL};
static MethodDef_data TA_taPtrList_impl_MethodDef[]={
  {&TA_ostream_ref,NULL,"Indenter","","","",
    0,5,-1,1,(ta_void_fun)(taPtrList_impl::Indenter),cssElCFun_taPtrList_impl_Indenter_stub,TA_taPtrList_impl_Indenter_MethArgs},
  {&TA_void_ptr,NULL,"GetTA_Element_","","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_impl_GetTA_Element__stub,TA_taPtrList_impl_GetTA_Element__MethArgs},
  {&TA_void,NULL,"DataChanged"," called when list has changed -- more fine-grained than Dirty(), and may be multiple calls per event","","",
    0,3,1,0,NULL,cssElCFun_taPtrList_impl_DataChanged_stub,TA_taPtrList_impl_DataChanged_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Alloc_stub,TA_taPtrList_impl_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list (remove all elements)","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_Reset_stub,NULL},
  {&TA_bool,NULL,"IsEmpty","","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_IsEmpty_stub,NULL},
  {&TA_void,NULL,"BuildHashTable"," build a hash table with given number of buckets (not dynamic, so make it big)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BuildHashTable_stub,TA_taPtrList_impl_BuildHashTable_MethArgs},
  {&TA_int,NULL,"Find"," find named element in list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Find_stub,TA_taPtrList_impl_Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index","","",
    1,1,-1,0,NULL,cssElCFun_taPtrList_impl_Remove_stub,TA_taPtrList_impl_Remove_MethArgs},
  {&TA_bool,NULL,"RemoveName"," remove given named element from list (if on list)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_RemoveName_stub,TA_taPtrList_impl_RemoveName_MethArgs},
  {&TA_bool,NULL,"RemoveLast"," remove the last element on the list","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_RemoveLast_stub,NULL},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_RemoveAll_stub,NULL},
  {&TA_bool,NULL,"Move"," Move element from (from) to position (to) in list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_impl_Move_stub,TA_taPtrList_impl_Move_MethArgs},
  {&TA_bool,NULL,"Swap"," Swap the elements in the two given positions on the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_impl_Swap_stub,TA_taPtrList_impl_Swap_MethArgs},
  {&TA_void,NULL,"PopAll"," pop all elements off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_PopAll_stub,NULL},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the items in the list in alpha order according to name (or El_Compare_)","MENU CONFIRM UPDATE_MENUS ","",
    0,1,0,0,NULL,cssElCFun_taPtrList_impl_Sort_stub,TA_taPtrList_impl_Sort_MethArgs},
  {&TA_void,NULL,"Sort_"," implementation of sorting function","","",
    0,1,0,0,NULL,cssElCFun_taPtrList_impl_Sort__stub,TA_taPtrList_impl_Sort__MethArgs},
  {&TA_void,NULL,"UpdateAllIndicies"," update all indices of elements in list","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_UpdateAllIndicies_stub,NULL},
  {&TA_void_ptr,NULL,"FirstEl"," for ta_group::FOR_ITR_EL macro","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_FirstEl_stub,TA_taPtrList_impl_FirstEl_MethArgs},
  {&TA_void_ptr,NULL,"NextEl"," for ta_group::FOR_ITR_EL macro","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_NextEl_stub,TA_taPtrList_impl_NextEl_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Duplicate_stub,TA_taPtrList_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_DupeUniqNameNew_stub,TA_taPtrList_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_DupeUniqNameOld_stub,TA_taPtrList_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Stealth_Borrow"," borrow without referencing the borrowed elements (i.e. use AddEl_())","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Stealth_Borrow_stub,TA_taPtrList_impl_Stealth_Borrow_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Borrow_stub,TA_taPtrList_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BorrowUnique_stub,TA_taPtrList_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BorrowUniqNameNew_stub,TA_taPtrList_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BorrowUniqNameOld_stub,TA_taPtrList_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Copy_Common_stub,TA_taPtrList_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Copy_Duplicate_stub,TA_taPtrList_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Copy_Borrow_stub,TA_taPtrList_impl_Copy_Borrow_MethArgs},
  {&TA_int,NULL,"NumListCols"," number of columns in a list view for this item type","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_NumListCols_stub,NULL},
  {&TA_taString,NULL,"GetColHeading"," header text for the indicated column","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_GetColHeading_stub,TA_taPtrList_impl_GetColHeading_MethArgs},
  {&TA_taString,NULL,"ChildGetColText"," itm_idx is a hint from source, -1 means not specified or ignore","","",
    0,4,3,0,NULL,cssElCFun_taPtrList_impl_ChildGetColText_stub,TA_taPtrList_impl_ChildGetColText_MethArgs},
  {&TA_void,NULL,"List"," List the group items","","",
    0,1,0,0,NULL,cssElCFun_taPtrList_impl_List_stub,TA_taPtrList_impl_List_MethArgs},
  NULL};
static EnumDef_data TA_DataChangedReason_EnumDef[]={
  {"DCR_UPDATE_AFTER_EDIT"," after user edits (or load) ex. taBase::UpdateAfterEdit call; ops not used","",0},
  {"DCR_UPDATE_VIEWS"," after data has changed ex. taBase::UpdateAllViews call; ops not used","",1},
  {"DCR_LIST_INIT","","",2},
  {"DCR_LIST_ITEM_INSERT"," op1=item, op2=item_after, null=at beginning","",3},
  {"DCR_LIST_ITEM_REMOVE"," op1=item -- note, item not DisOwned yet, but has been removed from list","",4},
  {"DCR_LIST_ITEM_MOVED"," op1=item, op2=item_after, null=at beginning","",5},
  {"DCR_LIST_ITEMS_SWAP"," op1=item1, op2=item2","",6},
  {"DCR_LIST_SORTED"," after sorting; ops not used","",7},
  {"DCR_GROUP_INSERT"," op1=group, op2=group_after, null=at beginning","",8},
  {"DCR_GROUP_REMOVE"," op1=group -- note, item not DisOwned yet, but has been removed from list","",9},
  {"DCR_GROUP_MOVED"," op1=group, op2=group_after, null=at beginning","",10},
  {"DCR_GROUPS_SWAP"," op1=group1, op2=group2","",11},
  {"DCR_GROUP_ITEM_INSERT"," op1=item, op2=item_after, null=at beginning","",12},
  {"DCR_GROUP_ITEM_REMOVE"," op1=item -- note, item not DisOwned yet, but has been removed from list","",13},
  {"DCR_GROUP_ITEM_MOVED"," op1=item, op2=item_after, null=at beginning","",14},
  {"DCR_GROUP_ITEMS_SWAP"," op1=item1, op2=item2","",15},
  {"DCR_GROUP_LIST_SORTED"," after sorting; ops not used","",16},
  {"DCR_STRUCT_UPDATE_BEGIN"," for some updating, like doing Layer->Build, better for gui to just do one","",17},
  {"DCR_STRUCT_UPDATE_END"," update operation at the end of everything","",18},
  {"DCR_DATA_UPDATE_BEGIN"," for some data changes, like various log updates, better for gui to just do one","",19},
  {"DCR_DATA_UPDATE_END"," update operation at the end of everything","",20},
  NULL};
static int taFixedArray_impl::* TA_taFixedArray_impl_MbrOff;
static MemberDef_data TA_taFixedArray_impl_MemberDef[]={
  {&TA_int,NULL,"size"," number of elements in the array","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFixedArray_impl_MbrOff=(int taFixedArray_impl::*)(&taFixedArray_impl::size))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taFixedArray_impl_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taFixedArray_impl_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodDef_data TA_taFixedArray_impl_MethodDef[]={
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,NULL,cssElCFun_taFixedArray_impl_InRange_stub,TA_taFixedArray_impl_InRange_MethArgs},
  {&TA_void,NULL,"Reset"," //////////////////////////////////////////////","","",
    0,0,-1,0,NULL,cssElCFun_taFixedArray_impl_Reset_stub,NULL},
  {&TA_void,NULL,"EnforceSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,0,NULL,cssElCFun_taFixedArray_impl_EnforceSize_stub,TA_taFixedArray_impl_EnforceSize_MethArgs},
  NULL};
static int taFixedArray<int>::* TA_taFixedArray_int__MbrOff;
static MemberDef_data TA_taFixedArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taFixedArray_int__MbrOff=(int taFixedArray<int>::*)(&taFixedArray<int>::el))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taFixedArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Find_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodDef_data TA_taFixedArray_int__MethodDef[]={
  {NULL,"::const_int_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,NULL,cssElCFun_taFixedArray_int__SafeEl_stub,TA_taFixedArray_int__SafeEl_MethArgs},
  {NULL,"::const_int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taFixedArray_int__FastEl_stub,TA_taFixedArray_int__FastEl_MethArgs},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taFixedArray_int__Set_stub,TA_taFixedArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taFixedArray_int__Add_stub,TA_taFixedArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taFixedArray_int__AddUnique_stub,TA_taFixedArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taFixedArray_int__Insert_stub,TA_taFixedArray_int__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taFixedArray_int__Find_stub,TA_taFixedArray_int__Find_MethArgs},
  NULL};
static MemberDef_data TA_int_FixedArray_MemberDef[]={
  {&TA_int,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&int_FixedArray::blank),0},
  NULL};
static int taArray_impl::* TA_taArray_impl_MbrOff;
static MemberDef_data TA_taArray_impl_MemberDef[]={
  {&TA_int,NULL,"size"," number of elements in the array","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taArray_impl_MbrOff=(int taArray_impl::*)(&taArray_impl::size))),0,NULL,0},
  {&TA_int,NULL,"alloc_size"," allocated (physical) size","READ_ONLY NO_SAVE DETAIL ","",
    *((ta_memb_ptr*)&(TA_taArray_impl_MbrOff=(int taArray_impl::*)(&taArray_impl::alloc_size))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_impl_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_taArray_impl_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taArray_impl_AddBlank_MethArgs[]={
  {&TA_int,NULL,"n_els"," 1"},
  NULL};
static MethodArgs_data TA_taArray_impl_Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_impl_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taArray_impl_ShiftLeft_MethArgs[]={
  {&TA_int,NULL,"nshift",""},
  NULL};
static MethodArgs_data TA_taArray_impl_ShiftLeftPct_MethArgs[]={
  {&TA_float,NULL,"pct",""},
  NULL};
static MethodArgs_data TA_taArray_impl_V_Flip_MethArgs[]={
  {&TA_int,NULL,"width",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_DupeUnique_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Copy_Common_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_CopyVals_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"from",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  {&TA_int,NULL,"at","0"},
  NULL};
static MethodArgs_data TA_taArray_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_taArray_impl_InitFromString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodDef_data TA_taArray_impl_MethodDef[]={
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_InRange_stub,TA_taArray_impl_InRange_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate storage for at least the given size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Alloc_stub,TA_taArray_impl_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list to zero size (does not free memory)","","",
    0,0,-1,0,NULL,cssElCFun_taArray_impl_Reset_stub,NULL},
  {&TA_void_ptr,NULL,"BlankEl_"," address of a blank element, for initializing empty items","","",
    0,0,-1,0,NULL,cssElCFun_taArray_impl_BlankEl__stub,NULL},
  {&TA_void,NULL,"EnforceSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_EnforceSize_stub,TA_taArray_impl_EnforceSize_MethArgs},
  {&TA_void,NULL,"AddBlank"," Add n_els empty elements to the end of the array","MENU MENU_ON_Edit ","",
    0,1,0,0,NULL,cssElCFun_taArray_impl_AddBlank_stub,TA_taArray_impl_AddBlank_MethArgs},
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    0,2,1,0,NULL,cssElCFun_taArray_impl_Remove_stub,TA_taArray_impl_Remove_MethArgs},
  {&TA_bool,NULL,"Move"," move item from index to index","MENU ","",
    0,2,-1,0,NULL,cssElCFun_taArray_impl_Move_stub,TA_taArray_impl_Move_MethArgs},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taArray_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the list in ascending order (or descending if switched)","MENU ","",
    0,1,0,0,NULL,cssElCFun_taArray_impl_Sort_stub,TA_taArray_impl_Sort_MethArgs},
  {&TA_void,NULL,"ShiftLeft"," shift all the elements in the array to the left by given number of items","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_ShiftLeft_stub,TA_taArray_impl_ShiftLeft_MethArgs},
  {&TA_void,NULL,"ShiftLeftPct"," shift the array to the left by given percentage of current size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_ShiftLeftPct_stub,TA_taArray_impl_ShiftLeftPct_MethArgs},
  {&TA_int,NULL,"V_Flip"," vertically flip the array as if it was arrange in a matrix of width","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_V_Flip_stub,TA_taArray_impl_V_Flip_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate the items in the list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Duplicate_stub,TA_taArray_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUnique"," duplicate so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_DupeUnique_stub,TA_taArray_impl_DupeUnique_MethArgs},
  {&TA_void,NULL,"Copy_Common"," copy elements in common","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Copy_Common_stub,TA_taArray_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," copy elements in common, duplicating (if necc) any extra on cp","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Copy_Duplicate_stub,TA_taArray_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"CopyVals"," copy values from other array at given start and end points, and putting at given point in this","","",
    0,4,1,0,NULL,cssElCFun_taArray_impl_CopyVals_stub,TA_taArray_impl_CopyVals_MethArgs},
  {&TA_void,NULL,"List"," print out all of the elements in the array","","",
    0,1,0,0,NULL,cssElCFun_taArray_impl_List_stub,TA_taArray_impl_List_MethArgs},
  {&TA_void,NULL,"InitFromString"," initialize an array from given string (does reset first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_InitFromString_stub,TA_taArray_impl_InitFromString_MethArgs},
  NULL};
static int taHashEl::* TA_taHashEl_MbrOff;
static MemberDef_data TA_taHashEl_MemberDef[]={
  {&TA_taHashVal,NULL,"hash_code"," hash-coded value of name","","",
    *((ta_memb_ptr*)&(TA_taHashEl_MbrOff=(int taHashEl::*)(&taHashEl::hash_code))),0,NULL,0},
  {&TA_int,NULL,"list_idx"," index of item in list","","",
    *((ta_memb_ptr*)&(TA_taHashEl_MbrOff=(int taHashEl::*)(&taHashEl::list_idx))),0,NULL,0},
  NULL};
static MethodDef_data TA_taHashEl_MethodDef[]={
  {&TA_void,NULL,"Initialize","","","",
    0,0,-1,0,NULL,cssElCFun_taHashEl_Initialize_stub,NULL},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Edit_El_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUniqNameOld_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FindEl_MethArgs[]={
  {NULL,"::const_taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Add_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUnique_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUniqNameNew_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Insert_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","old_it",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__RemoveEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__DuplicateEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Link_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUnique_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__InsertLink_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","old_it",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Push_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","from",""},
  {NULL,"::taHashEl_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Transfer_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveBefore_MethArgs[]={
  {NULL,"::taHashEl_ptr","trg",""},
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveAfter_MethArgs[]={
  {NULL,"::taHashEl_ptr","trg",""},
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taHashEl__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Find_stub,TA_taPtrList_taHashEl__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Remove_stub,TA_taPtrList_taHashEl__Remove_MethArgs},
  {NULL,"::taHashEl_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__SafeEl_stub,TA_taPtrList_taHashEl__SafeEl_MethArgs},
  {NULL,"::taHashEl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__FastEl_stub,TA_taPtrList_taHashEl__FastEl_MethArgs},
  {NULL,"::taHashEl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Edit_El_stub,TA_taPtrList_taHashEl__Edit_El_MethArgs},
  {NULL,"::taHashEl_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashEl__FindName_stub,TA_taPtrList_taHashEl__FindName_MethArgs},
  {NULL,"::taHashEl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Pop_stub,NULL},
  {NULL,"::taHashEl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Peek_stub,NULL},
  {NULL,"::taHashEl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUniqNameOld_stub,TA_taPtrList_taHashEl__AddUniqNameOld_MethArgs},
  {NULL,"::taHashEl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUniqNameOld_stub,TA_taPtrList_taHashEl__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__FindEl_stub,TA_taPtrList_taHashEl__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddEl_stub,TA_taPtrList_taHashEl__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Add_stub,TA_taPtrList_taHashEl__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUnique_stub,TA_taPtrList_taHashEl__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUniqNameNew_stub,TA_taPtrList_taHashEl__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Insert_stub,TA_taPtrList_taHashEl__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Replace_stub,TA_taPtrList_taHashEl__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceEl_stub,TA_taPtrList_taHashEl__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceName_stub,TA_taPtrList_taHashEl__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__RemoveEl_stub,TA_taPtrList_taHashEl__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__DuplicateEl_stub,TA_taPtrList_taHashEl__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Link_stub,TA_taPtrList_taHashEl__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUnique_stub,TA_taPtrList_taHashEl__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUniqNameNew_stub,TA_taPtrList_taHashEl__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashEl__InsertLink_stub,TA_taPtrList_taHashEl__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLink_stub,TA_taPtrList_taHashEl__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLinkEl_stub,TA_taPtrList_taHashEl__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLinkName_stub,TA_taPtrList_taHashEl__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Push_stub,TA_taPtrList_taHashEl__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveEl_stub,TA_taPtrList_taHashEl__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Transfer_stub,TA_taPtrList_taHashEl__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveBefore_stub,TA_taPtrList_taHashEl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveAfter_stub,TA_taPtrList_taHashEl__MoveAfter_MethArgs},
  NULL};
static MethodArgs_data TA_taHashBucket_Find_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodArgs_data TA_taHashBucket_FindIndex_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodDef_data TA_taHashBucket_MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there) find index of item (in the bucket) with given hash code value","","",
    5,1,-1,0,NULL,cssElCFun_taHashBucket_Find_stub,TA_taHashBucket_Find_MethArgs},
  {&TA_int,NULL,"FindIndex"," find index of item (list_idx) with given hash code value","","",
    0,1,-1,0,NULL,cssElCFun_taHashBucket_FindIndex_stub,TA_taHashBucket_FindIndex_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Edit_El_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUniqNameOld_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FindEl_MethArgs[]={
  {NULL,"::const_taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Add_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUnique_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUniqNameNew_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Insert_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","old_it",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__RemoveEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__DuplicateEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Link_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUnique_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__InsertLink_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","old_it",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Push_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","from",""},
  {NULL,"::taHashBucket_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Transfer_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveBefore_MethArgs[]={
  {NULL,"::taHashBucket_ptr","trg",""},
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveAfter_MethArgs[]={
  {NULL,"::taHashBucket_ptr","trg",""},
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taHashBucket__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Find_stub,TA_taPtrList_taHashBucket__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Remove_stub,TA_taPtrList_taHashBucket__Remove_MethArgs},
  {NULL,"::taHashBucket_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__SafeEl_stub,TA_taPtrList_taHashBucket__SafeEl_MethArgs},
  {NULL,"::taHashBucket_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__FastEl_stub,TA_taPtrList_taHashBucket__FastEl_MethArgs},
  {NULL,"::taHashBucket_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Edit_El_stub,TA_taPtrList_taHashBucket__Edit_El_MethArgs},
  {NULL,"::taHashBucket_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashBucket__FindName_stub,TA_taPtrList_taHashBucket__FindName_MethArgs},
  {NULL,"::taHashBucket_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Pop_stub,NULL},
  {NULL,"::taHashBucket_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Peek_stub,NULL},
  {NULL,"::taHashBucket_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUniqNameOld_stub,TA_taPtrList_taHashBucket__AddUniqNameOld_MethArgs},
  {NULL,"::taHashBucket_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUniqNameOld_stub,TA_taPtrList_taHashBucket__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__FindEl_stub,TA_taPtrList_taHashBucket__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddEl_stub,TA_taPtrList_taHashBucket__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Add_stub,TA_taPtrList_taHashBucket__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUnique_stub,TA_taPtrList_taHashBucket__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUniqNameNew_stub,TA_taPtrList_taHashBucket__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Insert_stub,TA_taPtrList_taHashBucket__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Replace_stub,TA_taPtrList_taHashBucket__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceEl_stub,TA_taPtrList_taHashBucket__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceName_stub,TA_taPtrList_taHashBucket__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__RemoveEl_stub,TA_taPtrList_taHashBucket__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__DuplicateEl_stub,TA_taPtrList_taHashBucket__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Link_stub,TA_taPtrList_taHashBucket__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUnique_stub,TA_taPtrList_taHashBucket__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUniqNameNew_stub,TA_taPtrList_taHashBucket__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashBucket__InsertLink_stub,TA_taPtrList_taHashBucket__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLink_stub,TA_taPtrList_taHashBucket__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLinkEl_stub,TA_taPtrList_taHashBucket__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLinkName_stub,TA_taPtrList_taHashBucket__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Push_stub,TA_taPtrList_taHashBucket__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveEl_stub,TA_taPtrList_taHashBucket__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Transfer_stub,TA_taPtrList_taHashBucket__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveBefore_stub,TA_taPtrList_taHashBucket__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveAfter_stub,TA_taPtrList_taHashBucket__MoveAfter_MethArgs},
  NULL};
static EnumDef_data TA_taHashTable_KeyType[]={
  {"KT_NAME"," use item name; the legacy default","",0},
  {"KT_PTR"," use the item pointer","",1},
  NULL};
static int taHashTable::* TA_taHashTable_MbrOff;
static MemberDef_data TA_taHashTable_MemberDef[]={
  {&TA_int_ary,NULL,"n_bucket_primes"," prime numbers for number of buckets","","",
    (ta_memb_ptr)NULL,1,(void*)(&taHashTable::n_bucket_primes),0},
  {&TA_int,NULL,"n_primes"," number of prime numbers (86)","","",
    (ta_memb_ptr)NULL,1,(void*)(&taHashTable::n_primes),0},
  {&TA_int,NULL,"bucket_max"," maximum size of any bucket","","",
    *((ta_memb_ptr*)&(TA_taHashTable_MbrOff=(int taHashTable::*)(&taHashTable::bucket_max))),0,NULL,0},
  {NULL,"::KeyType","key_type","","","",
    *((ta_memb_ptr*)&(TA_taHashTable_MbrOff=(int taHashTable::*)(&taHashTable::key_type))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taHashTable_Remove_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string",""},
  NULL};
static MethodArgs_data TA_taHashTable_Add_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_taHashTable_FindIndex_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodArgs_data TA_taHashTable_UpdateIndex_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodDef_data TA_taHashTable_MethodDef[]={
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index remove given hash code from table remove given string from table","","",
    8,1,-1,0,NULL,cssElCFun_taHashTable_Remove_stub,TA_taHashTable_Remove_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item add a new item to the hash table","","",
    2,2,-1,0,NULL,cssElCFun_taHashTable_Add_stub,TA_taHashTable_Add_MethArgs},
  {&TA_int,NULL,"FindIndex"," find index from given hash value (-1 if not found)","","",
    0,1,-1,0,NULL,cssElCFun_taHashTable_FindIndex_stub,TA_taHashTable_FindIndex_MethArgs},
  {&TA_bool,NULL,"UpdateIndex"," update index associated with item update index associated with item","","",
    1,2,-1,0,NULL,cssElCFun_taHashTable_UpdateIndex_stub,TA_taHashTable_UpdateIndex_MethArgs},
  {&TA_void,NULL,"InitList_","","","",
    0,0,-1,0,NULL,cssElCFun_taHashTable_InitList__stub,NULL},
  NULL};
static EnumDef_data TA_taFiler_OpenMode[]={
  {"NO_AUTO"," don't automatically open","",0},
  {"READ"," auto open in READ mode..","",1},
  {"WRITE","","",2},
  {"APPEND","","",3},
  NULL};
static int taFiler::* TA_taFiler_MbrOff;
static MemberDef_data TA_taFiler_MemberDef[]={
  {&TA_int,NULL,"buf_size"," size of the buffer for input operations","","",
    (ta_memb_ptr)NULL,1,(void*)(&taFiler::buf_size),0},
  {&TA_taString,NULL,"last_fname"," last file name processed","","",
    (ta_memb_ptr)NULL,1,(void*)(&taFiler::last_fname),0},
  {&TA_taString,NULL,"last_dir"," last directory name processed","","",
    (ta_memb_ptr)NULL,1,(void*)(&taFiler::last_dir),0},
  {&TA_taString,NULL,"filter","","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::filter))),0,NULL,0},
  {&TA_taString,NULL,"dir","","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::dir))),0,NULL,0},
  {&TA_taString,NULL,"fname","","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::fname))),0,NULL,0},
  {&TA_bool,NULL,"compress"," true if file should be auto-compressed","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::compress))),0,NULL,0},
  {&TA_bool,NULL,"select_only"," file is to be selected only (not opened)","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::select_only))),0,NULL,0},
  {&TA_ifstream_ptr,NULL,"ifstrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::ifstrm))),0,NULL,0},
  {&TA_ofstream_ptr,NULL,"ofstrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::ofstrm))),0,NULL,0},
  {&TA_fstream_ptr,NULL,"fstrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::fstrm))),0,NULL,0},
  {&TA_istream_ptr,NULL,"istrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::istrm))),0,NULL,0},
  {&TA_ostream_ptr,NULL,"ostrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::ostrm))),0,NULL,0},
  {&TA_bool,NULL,"open_file"," true if there is an open file somewhere","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::open_file))),0,NULL,0},
  {&TA_bool,NULL,"file_selected"," true if a file was selected last time..","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::file_selected))),0,NULL,0},
  {NULL,"::OpenMode","mode"," auto-open file in this mode (for auto)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::mode))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taFiler_Init_MethArgs[]={
  {&TA_const_taString_ref,NULL,"dir_"," ."},
  {&TA_const_taString_ref,NULL,"filter_"," "},
  {&TA_bool,NULL,"compress_"," false"},
  NULL};
static MethodArgs_data TA_taFiler_Open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_taFiler_Save_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_taFiler_SaveAs_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_taFiler_Append_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_taFiler_GetFileName_MethArgs[]={
  {&TA_taString_ref,NULL,"fname",""},
  {&TA_FilerOperation,NULL,"filerOperation",""},
  NULL};
static MethodDef_data TA_taFiler_MethodDef[]={
  {&TA_istream_ptr,NULL,"open_read","","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_open_read_stub,NULL},
  {&TA_ostream_ptr,NULL,"open_write","","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_open_write_stub,NULL},
  {&TA_ostream_ptr,NULL,"open_append","","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_open_append_stub,NULL},
  {&TA_bool,NULL,"open_write_exist_check"," returns true if file already exists for writing","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_open_write_exist_check_stub,NULL},
  {&TA_void,NULL,"Init"," same as constructor","","",
    0,3,0,0,NULL,cssElCFun_taFiler_Init_stub,TA_taFiler_Init_MethArgs},
  {&TA_istream_ptr,NULL,"Open"," to get a file for reading (already exists)","","",
    0,2,0,0,NULL,cssElCFun_taFiler_Open_stub,TA_taFiler_Open_MethArgs},
  {&TA_ostream_ptr,NULL,"Save"," to save to an existing file","","",
    0,2,0,0,NULL,cssElCFun_taFiler_Save_stub,TA_taFiler_Save_MethArgs},
  {&TA_ostream_ptr,NULL,"SaveAs"," to save with a new file","","",
    0,2,0,0,NULL,cssElCFun_taFiler_SaveAs_stub,TA_taFiler_SaveAs_MethArgs},
  {&TA_ostream_ptr,NULL,"Append"," to save a file for appending (already exists)","","",
    0,2,0,0,NULL,cssElCFun_taFiler_Append_stub,TA_taFiler_Append_MethArgs},
  {&TA_void,NULL,"Close"," close the stream","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_Close_stub,NULL},
  {&TA_void,NULL,"AutoOpen"," auto-open a file based on mode","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_AutoOpen_stub,NULL},
  {&TA_bool,NULL,"IsOpen"," check if file is open","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_IsOpen_stub,NULL},
  {&TA_bool,NULL,"GetFileName"," gui-dependent routine to get filename from user","","",
    0,2,-1,0,NULL,cssElCFun_taFiler_GetFileName_stub,TA_taFiler_GetFileName_MethArgs},
  {&TA_void,NULL,"FixFileName"," make sure suffix is right","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_FixFileName_stub,NULL},
  {&TA_void,NULL,"GetDir"," get directory from file name","","",
    0,0,-1,0,NULL,cssElCFun_taFiler_GetDir_stub,NULL},
  NULL};
static EnumDef_data TA_FilerOperation_EnumDef[]={
  {"foOpen","","",0},
  {"foSave","","",1},
  {"foSaveAs","","",2},
  {"foAppend","","",3},
  NULL};
static int taPlainArray<taString>::* TA_taPlainArray_taString__MbrOff;
static MemberDef_data TA_taPlainArray_taString__MemberDef[]={
  {NULL,"::taString_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_taString__MbrOff=(int taPlainArray<taString>::*)(&taPlainArray<taString>::el))),0,NULL,0},
  {&TA_taString,NULL,"err"," what is returned when out of range -- MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_taString__MbrOff=(int taPlainArray<taString>::*)(&taPlainArray<taString>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Add_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__AddUnique_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Push_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Insert_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Find_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__RemoveEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodDef_data TA_taPlainArray_taString__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taPlainArray_taString__Remove_stub,TA_taPlainArray_taString__Remove_MethArgs},
  {NULL,"::taString_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__SafeEl_stub,TA_taPlainArray_taString__SafeEl_MethArgs},
  {NULL,"::taString_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__FastEl_stub,TA_taPlainArray_taString__FastEl_MethArgs},
  {NULL,"::taString_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__RevEl_stub,TA_taPlainArray_taString__RevEl_MethArgs},
  {&TA_taString,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_taString__Pop_stub,NULL},
  {NULL,"::taString_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_taString__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taPlainArray_taString__Set_stub,TA_taPlainArray_taString__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__Add_stub,TA_taPlainArray_taString__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__AddUnique_stub,TA_taPlainArray_taString__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__Push_stub,TA_taPlainArray_taString__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taPlainArray_taString__Insert_stub,TA_taPlainArray_taString__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taPlainArray_taString__Find_stub,TA_taPlainArray_taString__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__RemoveEl_stub,TA_taPlainArray_taString__RemoveEl_MethArgs},
  NULL};
static MethodArgs_data TA_String_PArray_Add_MethArgs[]={
  {&TA_const_char_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_String_PArray_AddUnique_MethArgs[]={
  {&TA_const_char_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_String_PArray_FindContains_MethArgs[]={
  {&TA_const_char_ptr,NULL,"op",""},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_String_PArray_AsString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"sep",""},
  NULL};
static MethodDef_data TA_String_PArray_MethodDef[]={
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    2,1,-1,0,NULL,cssElCFun_String_PArray_Add_stub,TA_String_PArray_Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    2,1,-1,0,NULL,cssElCFun_String_PArray_AddUnique_stub,TA_String_PArray_AddUnique_MethArgs},
  {&TA_int,NULL,"FindContains","","","",
    0,2,1,0,NULL,cssElCFun_String_PArray_FindContains_stub,TA_String_PArray_FindContains_MethArgs},
  {&TA_taString,NULL,"AsString","","","",
    0,1,-1,0,NULL,cssElCFun_String_PArray_AsString_stub,TA_String_PArray_AsString_MethArgs},
  NULL};
static int taPlainArray<int>::* TA_taPlainArray_int__MbrOff;
static MemberDef_data TA_taPlainArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_int__MbrOff=(int taPlainArray<int>::*)(&taPlainArray<int>::el))),0,NULL,0},
  {&TA_int,NULL,"err"," what is returned when out of range -- MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_int__MbrOff=(int taPlainArray<int>::*)(&taPlainArray<int>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Push_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Find_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__RemoveEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodDef_data TA_taPlainArray_int__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taPlainArray_int__Remove_stub,TA_taPlainArray_int__Remove_MethArgs},
  {NULL,"::int_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__SafeEl_stub,TA_taPlainArray_int__SafeEl_MethArgs},
  {NULL,"::int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__FastEl_stub,TA_taPlainArray_int__FastEl_MethArgs},
  {NULL,"::int_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__RevEl_stub,TA_taPlainArray_int__RevEl_MethArgs},
  {&TA_int,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_int__Pop_stub,NULL},
  {NULL,"::int_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_int__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taPlainArray_int__Set_stub,TA_taPlainArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__Add_stub,TA_taPlainArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__AddUnique_stub,TA_taPlainArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__Push_stub,TA_taPlainArray_int__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taPlainArray_int__Insert_stub,TA_taPlainArray_int__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taPlainArray_int__Find_stub,TA_taPlainArray_int__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__RemoveEl_stub,TA_taPlainArray_int__RemoveEl_MethArgs},
  NULL};
static MethodDef_data TA_IApp_MethodDef[]={
  {&TA_void,NULL,"Settings"," edit global settings/parameters (taMisc)","MENU MENU_ON_Object ","",
    0,0,-1,0,NULL,cssElCFun_IApp_Settings_stub,NULL},
  {&TA_void,NULL,"SaveConfig"," save current configuration to file ~/.pdpconfig that is automatically loaded at startup: IMPORTANT: DO NOT HAVE A PROJECT LOADED!","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_IApp_SaveConfig_stub,NULL},
  {&TA_void,NULL,"LoadConfig"," load current configuration from file ~/.pdpconfig that is automatically loaded at startup","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_IApp_LoadConfig_stub,NULL},
  {&TA_void,NULL,"Info"," get information/copyright notice","MENU ","",
    0,0,-1,0,NULL,cssElCFun_IApp_Info_stub,NULL},
  {&TA_void,NULL,"Quit"," quit from software..","MENU CONFIRM MENU_SEP_BEFORE NO_REVERT_AFTER ","",
    0,0,-1,0,NULL,cssElCFun_IApp_Quit_stub,NULL},
  {&TA_void,NULL,"SaveAll"," saves all the contents of the app object","","",
    0,0,-1,0,NULL,cssElCFun_IApp_SaveAll_stub,NULL},
  NULL};
static EnumDef_data TA_taMisc_ShowMembs[]={
  {"NO_HIDDEN","","",1},
  {"NO_READ_ONLY","","",2},
  {"NO_DETAIL","","",4},
  {"NO_NORMAL","","",8},
  {"ALL_MEMBS","","",0},
  {"NO_HID_RO","","",3},
  {"NO_HID_DET","","",5},
  {"NO_RO_DET","","",6},
  {"NO_HID_RO_DET","","",7},
  {"NORM_MEMBS","","",7},
  {"USE_SHOW_DEF"," use default from taMisc::show","",128},
  NULL};
static EnumDef_data TA_taMisc_TypeInfo[]={
  {"MEMB_OFFSETS"," display all including member offsets","",0},
  {"ALL_INFO"," display all type information","",1},
  {"NO_OPTIONS"," don't display options","",2},
  {"NO_LISTS"," don't display lists","",3},
  {"NO_OPTIONS_LISTS"," don't display options or lists","",4},
  NULL};
static EnumDef_data TA_taMisc_KeepTokens[]={
  {"Tokens"," keep tokens as specified by the type","",0},
  {"NoTokens"," don't keep any tokens","",1},
  {"ForceTokens"," force to keep all tokens","",2},
  NULL};
static EnumDef_data TA_taMisc_SaveFormat[]={
  {"PLAIN"," dump files are not formatted for easy reading","",0},
  {"PRETTY"," dump files should be more readable by humans","",1},
  NULL};
static EnumDef_data TA_taMisc_LoadVerbosity[]={
  {"QUIET"," don't say anything except errors","",0},
  {"MESSAGES"," display informative messages during load","",1},
  {"TRACE"," and show a trace of objects loaded","",2},
  {"SOURCE"," and show the source of the load as its loaded","",3},
  NULL};
static EnumDef_data TA_taMisc_AutoRevert[]={
  {"AUTO_APPLY"," automatically apply changes before auto-reverting","",0},
  {"AUTO_REVERT"," automatically revert, losing changes","",1},
  {"CONFIRM_REVERT"," put up a confirmatory message before reverting","",2},
  NULL};
static MemberDef_data TA_taMisc_MemberDef[]={
  {&TA_taString,NULL,"version_no"," version number of ta/css","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::version_no),0},
  {&TA_TypeSpace,NULL,"types"," list of all the active types","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::types),0},
  {&TA_bool,NULL,"in_init"," true if in ta initialization function","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::in_init),0},
  {&TA_bool,NULL,"not_constr"," true if ta types are not yet constructed (or are destructed)","READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::not_constr),0},
  {&TA_bool,NULL,"gui_active"," if gui has been started up or not","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::gui_active),0},
  {&TA_bool,NULL,"is_loading"," true if currently loading an object","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_loading),0},
  {&TA_bool,NULL,"is_saving"," true if currently saving an object","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_saving),0},
  {&TA_bool,NULL,"is_duplicating"," true if currently duplicating an object","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_duplicating),0},
  {&TA_int,NULL,"dmem_proc"," distributed memory process number (rank in MPI, always 0 for no dmem)","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_proc),0},
  {&TA_int,NULL,"dmem_nprocs"," distributed memory number of processes (comm_size in MPI, 1 for no dmem)","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_nprocs),0},
  {&TA_int,NULL,"display_width"," width of shell display (in chars)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::display_width),0},
  {&TA_int,NULL,"sep_tabs"," number of tabs to separate items by","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::sep_tabs),0},
  {&TA_int,NULL,"max_menu"," maximum number of items in a menu","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::max_menu),0},
  {&TA_int,NULL,"search_depth"," depth recursive find will search for a path object","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::search_depth),0},
  {&TA_int,NULL,"color_scale_size"," number of colors to put in a color scale","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::color_scale_size),0},
  {&TA_int,NULL,"mono_scale_size"," number of monochrome bit-patterns to put in a color scale","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::mono_scale_size),0},
  {&TA_float,NULL,"window_decor_offset_x"," some window managers (e.g., KDE) add an offset to location of windows -- add this amount to x position to compensate","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::window_decor_offset_x),0},
  {&TA_float,NULL,"window_decor_offset_y"," some window managers (e.g., KDE) add an offset to location of windows -- add this amount to y position to compensate","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::window_decor_offset_y),0},
  {&TA_float,NULL,"mswin_scale"," window size scaling parameter for MS Windows","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::mswin_scale),0},
  {&TA_int,NULL,"jpeg_quality"," jpeg quality for dumping jpeg files (1-100; 85 default)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::jpeg_quality),0},
  {NULL,"::ShowMembs","show"," what to show in general (eg. css)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::show),0},
  {NULL,"::ShowMembs","show_gui"," what to show in the gui","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::show_gui),0},
  {NULL,"::TypeInfo","type_info"," what to show when displaying type information","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::type_info),0},
  {NULL,"::KeepTokens","keep_tokens"," default for keeping tokens","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::keep_tokens),0},
  {NULL,"::SaveFormat","save_format"," format to use when saving things (dump files)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::save_format),0},
  {NULL,"::LoadVerbosity","verbose_load"," report the names of things during loading","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::verbose_load),0},
  {NULL,"::LoadVerbosity","gui_verbose_load"," what to report in the load dialog","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::gui_verbose_load),0},
  {&TA_bool,NULL,"dmem_debug"," turn on debug messages for distributed memory processing","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_debug),0},
  {&TA_TypeDef_ptr,NULL,"default_scope"," type of object to use to determine if two objects are in the same scope","","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::default_scope),0},
  {&TA_bool,NULL,"auto_edit"," automatic edit dialog after creation?","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::auto_edit),0},
  {NULL,"::AutoRevert","auto_revert"," when dialogs are automatically updated (reverted), what to do about changes?","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::auto_revert),0},
  {&TA_String_PArray,NULL,"include_paths"," paths to be used for finding files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::include_paths),0},
  {&TA_taString,NULL,"pdp_dir"," normal install path ('/usr/local/pdp++' on unix)","","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::pdp_dir),0},
  {&TA_taString,NULL,"tmp_dir"," location of temporary files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::tmp_dir),0},
  {&TA_taString,NULL,"compress_cmd"," command to use for compressing files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::compress_cmd),0},
  {&TA_taString,NULL,"uncompress_cmd"," for uncompressing files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::uncompress_cmd),0},
  {&TA_taString,NULL,"compress_sfx"," suffix to use for compressing files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::compress_sfx),0},
  {&TA_taString,NULL,"help_file_tmplt"," template for converting type name into a help file (%t = type name)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::help_file_tmplt),0},
  {&TA_taString,NULL,"help_cmd"," how to run html browser to get help, %s is entire path to help file","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::help_cmd),0},
  {&TA_ostream_ptr,NULL,"record_script"," stream to use for recording a script of interface activity (NULL if no record)","","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::record_script),0},
  {&TA_void,NULL,"Busy_Hook"," gui callback when prog goes busy/unbusy; var is 'busy'","","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::Busy_Hook),1},
  {&TA_void,NULL,"ScriptRecordingGui_Hook"," gui callback when script starts/stops; var is 'start'","","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::ScriptRecordingGui_Hook),1},
  {&TA_void,NULL,"DelayedMenuUpdate_Hook"," gui callback -- avoids zillions of gui ifdefs everywhere","","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::DelayedMenuUpdate_Hook),1},
  {&TA_taString,NULL,"LexBuf"," a buffer, contains last thing read by read_ funs","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::LexBuf),0},
  NULL};
static MethodArgs_data TA_taMisc_Error_MethArgs[]={
  {&TA_const_char_ptr,NULL,"a",""},
  {&TA_const_char_ptr,NULL,"b",""},
  {&TA_const_char_ptr,NULL,"c",""},
  {&TA_const_char_ptr,NULL,"d",""},
  {&TA_const_char_ptr,NULL,"e",""},
  {&TA_const_char_ptr,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"g",""},
  {&TA_const_char_ptr,NULL,"h",""},
  {&TA_const_char_ptr,NULL,"i",""},
  {&TA_const_char_ptr,NULL,"j",""},
  {&TA_const_char_ptr,NULL,"k",""},
  {&TA_const_char_ptr,NULL,"l",""},
  NULL};
static MethodArgs_data TA_taMisc_Choice_MethArgs[]={
  {&TA_const_char_ptr,NULL,"text","Choice"},
  {&TA_const_char_ptr,NULL,"a","Ok"},
  {&TA_const_char_ptr,NULL,"b",""},
  {&TA_const_char_ptr,NULL,"c",""},
  {&TA_const_char_ptr,NULL,"d",""},
  {&TA_const_char_ptr,NULL,"e",""},
  {&TA_const_char_ptr,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"g",""},
  {&TA_const_char_ptr,NULL,"h",""},
  {&TA_const_char_ptr,NULL,"i",""},
  {&TA_const_char_ptr,NULL,"j",""},
  NULL};
static MethodArgs_data TA_taMisc_DelayedMenuUpdate_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_taMisc_MallocInfo_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_ListAllTokens_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_ReplaceAllPtrs_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"obj_typ",""},
  {&TA_void_ptr,NULL,"old_ptr",""},
  {&TA_void_ptr,NULL,"new_ptr",""},
  NULL};
static MethodArgs_data TA_taMisc_ReplaceAllPtrsWithToken_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"obj_typ",""},
  {&TA_void_ptr,NULL,"old_ptr",""},
  NULL};
static MethodArgs_data TA_taMisc_Decode_Signal_MethArgs[]={
  {&TA_int,NULL,"err",""},
  NULL};
static MethodArgs_data TA_taMisc_CharToStrArray_MethArgs[]={
  {&TA_String_PArray_ref,NULL,"sa",""},
  {&TA_const_char_ptr,NULL,"ch",""},
  NULL};
static MethodArgs_data TA_taMisc_StrArrayToChar_MethArgs[]={
  {&TA_const_String_PArray_ref,NULL,"sa",""},
  NULL};
static MethodArgs_data TA_taMisc_SpaceLabel_MethArgs[]={
  {&TA_taString_ref,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_taMisc_LeadingZeros_MethArgs[]={
  {&TA_int,NULL,"num",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_FormatValue_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"width",""},
  {&TA_int,NULL,"precision",""},
  NULL};
static MethodArgs_data TA_taMisc_StringMaxLen_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_StringEnforceLen_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_StartRecording_MethArgs[]={
  {&TA_ostream_ptr,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_RecordScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"cmd",""},
  NULL};
static MethodArgs_data TA_taMisc_ScriptRecordAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taMisc_SRIAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taMisc_SREAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taMisc_remove_name_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  NULL};
static MethodArgs_data TA_taMisc_FindFileInclude_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fname",""},
  NULL};
static MethodArgs_data TA_taMisc_skip_white_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_white_noeol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_word_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_alnum_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_alnum_noeol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_eol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_lbracket_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_lb_or_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_rbracket_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_rb_or_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_quote_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_quote_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_past_err_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_past_err_rb_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_indent_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"indent",""},
  {&TA_int,NULL,"tsp","2"},
  NULL};
static MethodArgs_data TA_taMisc_fmt_sep_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_taString_ref,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"indent",""},
  {&TA_int,NULL,"tsp","2"},
  NULL};
static MethodArgs_data TA_taMisc_fancy_list_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_taString_ref,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"prln",""},
  {&TA_int,NULL,"tabs",""},
  NULL};
static MethodDef_data TA_taMisc_MethodDef[]={
  {&TA_void,NULL,"SaveConfig"," save configuration defaults to ~/.taconfig file that is loaded automatically at startup","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_taMisc_SaveConfig_stub,NULL},
  {&TA_void,NULL,"LoadConfig"," load configuration defaults from ~/.taconfig file (which is loaded automatically at startup)","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_taMisc_LoadConfig_stub,NULL},
  {&TA_void,NULL,"Error"," displays error either in a window if iv_active or to stdout","","",
    0,12,1,1,(ta_void_fun)(taMisc::Error),cssElCFun_taMisc_Error_stub,TA_taMisc_Error_MethArgs},
  {&TA_int,NULL,"Choice"," allows user to choose among different options in window if iv_active or stdin/out","","",
    0,11,0,1,(ta_void_fun)(taMisc::Choice),cssElCFun_taMisc_Choice_stub,TA_taMisc_Choice_MethArgs},
  {&TA_void,NULL,"DelayedMenuUpdate"," add object to list to be updated later (by Wait_UpdateMenus)","","",
    0,1,-1,1,(ta_void_fun)(taMisc::DelayedMenuUpdate),cssElCFun_taMisc_DelayedMenuUpdate_stub,TA_taMisc_DelayedMenuUpdate_MethArgs},
  {&TA_void,NULL,"Busy"," puts system in a 'busy' state","","",
    0,0,-1,1,(ta_void_fun)(taMisc::Busy),cssElCFun_taMisc_Busy_stub,NULL},
  {&TA_void,NULL,"DoneBusy"," when no longer busy, call this function","","",
    0,0,-1,1,(ta_void_fun)(taMisc::DoneBusy),cssElCFun_taMisc_DoneBusy_stub,NULL},
  {&TA_void,NULL,"Initialize"," initialize type system, called in ta_TA.cc","","",
    0,0,-1,1,(ta_void_fun)(taMisc::Initialize),cssElCFun_taMisc_Initialize_stub,NULL},
  {&TA_void,NULL,"InitializeTypes"," called after all type info has been loaded into types","","",
    0,0,-1,1,(ta_void_fun)(taMisc::InitializeTypes),cssElCFun_taMisc_InitializeTypes_stub,NULL},
  {&TA_void,NULL,"MallocInfo"," generate malloc memory statistic information to given stream","","",
    0,1,-1,1,(ta_void_fun)(taMisc::MallocInfo),cssElCFun_taMisc_MallocInfo_stub,TA_taMisc_MallocInfo_MethArgs},
  {&TA_void,NULL,"ListAllTokens"," generate a list and count of all types that keep tokens, with a count of tokens","","",
    0,1,-1,1,(ta_void_fun)(taMisc::ListAllTokens),cssElCFun_taMisc_ListAllTokens_stub,TA_taMisc_ListAllTokens_MethArgs},
  {&TA_int,NULL,"ReplaceAllPtrs"," search through all tokens in all types and replace any pointer to object of type obj_typ address old_ptr with new_ptr","","",
    0,3,-1,1,(ta_void_fun)(taMisc::ReplaceAllPtrs),cssElCFun_taMisc_ReplaceAllPtrs_stub,TA_taMisc_ReplaceAllPtrs_MethArgs},
  {&TA_int,NULL,"ReplaceAllPtrsWithToken"," search through all tokens in all types and replace any pointer to old_ptr with first other token in same scope of same type","","",
    0,2,-1,1,(ta_void_fun)(taMisc::ReplaceAllPtrsWithToken),cssElCFun_taMisc_ReplaceAllPtrsWithToken_stub,TA_taMisc_ReplaceAllPtrsWithToken_MethArgs},
  {&TA_void,NULL,"Decode_Signal"," printout translation of signal on cerr","","",
    0,1,-1,1,(ta_void_fun)(taMisc::Decode_Signal),cssElCFun_taMisc_Decode_Signal_stub,TA_taMisc_Decode_Signal_MethArgs},
  {&TA_void,NULL,"CharToStrArray"," convert space-delimeted character string to a string array","","",
    0,2,-1,1,(ta_void_fun)(taMisc::CharToStrArray),cssElCFun_taMisc_CharToStrArray_stub,TA_taMisc_CharToStrArray_MethArgs},
  {&TA_taString,NULL,"StrArrayToChar"," convert a string array to a space-delimeted character string","","",
    0,1,-1,1,(ta_void_fun)(taMisc::StrArrayToChar),cssElCFun_taMisc_StrArrayToChar_stub,TA_taMisc_StrArrayToChar_MethArgs},
  {&TA_void,NULL,"SpaceLabel"," add spaces to a label in place of _'s and upper-lower transitions","","",
    0,1,-1,1,(ta_void_fun)(taMisc::SpaceLabel),cssElCFun_taMisc_SpaceLabel_stub,TA_taMisc_SpaceLabel_MethArgs},
  {&TA_taString,NULL,"LeadingZeros"," returns num converted to a string with leading zeros up to len","","",
    0,2,-1,1,(ta_void_fun)(taMisc::LeadingZeros),cssElCFun_taMisc_LeadingZeros_stub,TA_taMisc_LeadingZeros_MethArgs},
  {&TA_taString,NULL,"FormatValue"," format output of value according to width and precision","","",
    0,3,-1,1,(ta_void_fun)(taMisc::FormatValue),cssElCFun_taMisc_FormatValue_stub,TA_taMisc_FormatValue_MethArgs},
  {&TA_taString,NULL,"StringMaxLen"," returns string up to maximum length given (enforces string to be len or less in length)","","",
    0,2,-1,1,(ta_void_fun)(taMisc::StringMaxLen),cssElCFun_taMisc_StringMaxLen_stub,TA_taMisc_StringMaxLen_MethArgs},
  {&TA_taString,NULL,"StringEnforceLen"," returns string enforced to given length (spaces added to make length)","","",
    0,2,-1,1,(ta_void_fun)(taMisc::StringEnforceLen),cssElCFun_taMisc_StringEnforceLen_stub,TA_taMisc_StringEnforceLen_MethArgs},
  {&TA_void,NULL,"StartRecording"," sets record_strm and record_cursor","","",
    0,1,-1,1,(ta_void_fun)(taMisc::StartRecording),cssElCFun_taMisc_StartRecording_stub,TA_taMisc_StartRecording_MethArgs},
  {&TA_void,NULL,"StopRecording"," unsets record_strm and record_cursor","","",
    0,0,-1,1,(ta_void_fun)(taMisc::StopRecording),cssElCFun_taMisc_StopRecording_stub,NULL},
  {&TA_bool,NULL,"RecordScript"," record the given script command, if the script is open (just sends cmd to stream)","","",
    0,1,-1,1,(ta_void_fun)(taMisc::RecordScript),cssElCFun_taMisc_RecordScript_stub,TA_taMisc_RecordScript_MethArgs},
  {&TA_void,NULL,"ScriptRecordAssignment"," record last script assignment of tab's md value;","","",
    0,2,-1,1,(ta_void_fun)(taMisc::ScriptRecordAssignment),cssElCFun_taMisc_ScriptRecordAssignment_stub,TA_taMisc_ScriptRecordAssignment_MethArgs},
  {&TA_void,NULL,"SRIAssignment"," record inline md assignment","","",
    0,2,-1,1,(ta_void_fun)(taMisc::SRIAssignment),cssElCFun_taMisc_SRIAssignment_stub,TA_taMisc_SRIAssignment_MethArgs},
  {&TA_void,NULL,"SREAssignment"," record enum md assignment","","",
    0,2,-1,1,(ta_void_fun)(taMisc::SREAssignment),cssElCFun_taMisc_SREAssignment_stub,TA_taMisc_SREAssignment_MethArgs},
  {&TA_taString,NULL,"remove_name","","","",
    0,1,-1,1,(ta_void_fun)(taMisc::remove_name),cssElCFun_taMisc_remove_name_stub,TA_taMisc_remove_name_MethArgs},
  {&TA_taString,NULL,"FindFileInclude"," try to find file fnm in one of the include paths -- returns complete path to file","","",
    0,1,-1,1,(ta_void_fun)(taMisc::FindFileInclude),cssElCFun_taMisc_FindFileInclude_stub,TA_taMisc_FindFileInclude_MethArgs},
  {&TA_int,NULL,"skip_white","","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_white),cssElCFun_taMisc_skip_white_stub,TA_taMisc_skip_white_MethArgs},
  {&TA_int,NULL,"skip_white_noeol"," don't skip end-of-line","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_white_noeol),cssElCFun_taMisc_skip_white_noeol_stub,TA_taMisc_skip_white_noeol_MethArgs},
  {&TA_int,NULL,"read_word","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_word),cssElCFun_taMisc_read_word_stub,TA_taMisc_read_word_MethArgs},
  {&TA_int,NULL,"read_alnum"," alpha-numeric","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_alnum),cssElCFun_taMisc_read_alnum_stub,TA_taMisc_read_alnum_MethArgs},
  {&TA_int,NULL,"read_alnum_noeol","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_alnum_noeol),cssElCFun_taMisc_read_alnum_noeol_stub,TA_taMisc_read_alnum_noeol_MethArgs},
  {&TA_int,NULL,"read_till_eol","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_eol),cssElCFun_taMisc_read_till_eol_stub,TA_taMisc_read_till_eol_MethArgs},
  {&TA_int,NULL,"read_till_semi","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_semi),cssElCFun_taMisc_read_till_semi_stub,TA_taMisc_read_till_semi_MethArgs},
  {&TA_int,NULL,"read_till_lbracket","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_lbracket),cssElCFun_taMisc_read_till_lbracket_stub,TA_taMisc_read_till_lbracket_MethArgs},
  {&TA_int,NULL,"read_till_lb_or_semi","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_lb_or_semi),cssElCFun_taMisc_read_till_lb_or_semi_stub,TA_taMisc_read_till_lb_or_semi_MethArgs},
  {&TA_int,NULL,"read_till_rbracket","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_rbracket),cssElCFun_taMisc_read_till_rbracket_stub,TA_taMisc_read_till_rbracket_MethArgs},
  {&TA_int,NULL,"read_till_rb_or_semi","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_rb_or_semi),cssElCFun_taMisc_read_till_rb_or_semi_stub,TA_taMisc_read_till_rb_or_semi_MethArgs},
  {&TA_int,NULL,"read_till_quote"," dbl quote","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_quote),cssElCFun_taMisc_read_till_quote_stub,TA_taMisc_read_till_quote_MethArgs},
  {&TA_int,NULL,"read_till_quote_semi"," dbl quote followed by a semi","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_quote_semi),cssElCFun_taMisc_read_till_quote_semi_stub,TA_taMisc_read_till_quote_semi_MethArgs},
  {&TA_int,NULL,"skip_past_err"," skips to next rb or semi (robust)","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_past_err),cssElCFun_taMisc_skip_past_err_stub,TA_taMisc_skip_past_err_MethArgs},
  {&TA_int,NULL,"skip_past_err_rb"," skips to next rbracket (robust)","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_past_err_rb),cssElCFun_taMisc_skip_past_err_rb_stub,TA_taMisc_skip_past_err_rb_MethArgs},
  {&TA_ostream_ref,NULL,"indent","","","",
    0,3,2,1,(ta_void_fun)(taMisc::indent),cssElCFun_taMisc_indent_stub,TA_taMisc_indent_MethArgs},
  {&TA_ostream_ref,NULL,"fmt_sep","","","",
    0,5,4,1,(ta_void_fun)(taMisc::fmt_sep),cssElCFun_taMisc_fmt_sep_stub,TA_taMisc_fmt_sep_MethArgs},
  {&TA_ostream_ref,NULL,"fancy_list","","","",
    0,5,-1,1,(ta_void_fun)(taMisc::fancy_list),cssElCFun_taMisc_fancy_list_stub,TA_taMisc_fancy_list_MethArgs},
  NULL};
static MethodArgs_data TA_taiMimeSource_New_MethArgs[]={
  {&TA_const_QMimeSource_ptr,NULL,"ms",""},
  NULL};
static MethodArgs_data TA_taiMimeSource_New2_MethArgs[]={
  {&TA_taiClipData_ptr,NULL,"cd",""},
  NULL};
static MethodArgs_data TA_taiMimeSource_setIndex_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_taiMimeSource_format_MethArgs[]={
  {&TA_int,NULL,"i"," 0"},
  NULL};
static MethodArgs_data TA_taiMimeSource_provides_MethArgs[]={
  {&TA_const_char_ptr,NULL,"mimeType",""},
  NULL};
static MethodDef_data TA_taiMimeSource_MethodDef[]={
  {&TA_taiMimeSource_ptr,NULL,"New"," we use a static method for extensibility -- creates correct subtype","","",
    0,1,-1,1,(ta_void_fun)(taiMimeSource::New),cssElCFun_taiMimeSource_New_stub,TA_taiMimeSource_New_MethArgs},
  {&TA_taiMimeSource_ptr,NULL,"New2"," we use a static method for extensibility -- creates correct subtype","","",
    0,1,-1,1,(ta_void_fun)(taiMimeSource::New2),cssElCFun_taiMimeSource_New2_stub,TA_taiMimeSource_New2_MethArgs},
  {&TA_int,NULL,"src_action"," any (or none) of the EA_SRC_xxx flags","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_src_action_stub,NULL},
  {&TA_bool,NULL,"is_multi"," true if the source is multiple individual objects (multi-select)","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_is_multi_stub,NULL},
  {&TA_bool,NULL,"is_tacss"," true if the mime source is a taiClipData source, otherwise false (generic QMimeSource)","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_is_tacss_stub,NULL},
  {&TA_int,NULL,"count"," number of items","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_count_stub,NULL},
  {&TA_int,NULL,"index"," current index value; -1 if none","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_index_stub,NULL},
  {&TA_void,NULL,"setIndex"," sets index; must be -1 or in range, else sets to -1","","",
    0,1,-1,0,NULL,cssElCFun_taiMimeSource_setIndex_stub,TA_taiMimeSource_setIndex_MethArgs},
  {&TA_taString,NULL,"type_name"," ITER empty if not a tacss mime type","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_type_name_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"td"," ITER the TypeDef associated with type_name, or NULL if not in our type list or not tacss","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_td_stub,NULL},
  {&TA_void_ptr,NULL,"object"," gets the object, if possible -- only valid for IsThisProcess true","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_object_stub,NULL},
  {&TA_taBase_ptr,NULL,"tab_object"," gets a taBase object, if possible, otherwise NULL","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_tab_object_stub,NULL},
  {&TA_taString,NULL,"path"," ITER if a taBase object, its full path; if not taBase, or not tacss, then NULL;","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_path_stub,NULL},
  {&TA_bool,NULL,"is_tab"," ITER true if the object is derived from taBase","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_is_tab_stub,NULL},
  {&TA_void,NULL,"loc_data_taken"," sends a loc_data_taken for the current index","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_loc_data_taken_stub,NULL},
  {&TA_void,NULL,"rem_data_taken"," sends a rem_data_taken for the current index","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_rem_data_taken_stub,NULL},
  {&TA_const_char_ptr,NULL,"format"," override","","",
    0,1,0,0,NULL,cssElCFun_taiMimeSource_format_stub,TA_taiMimeSource_format_MethArgs},
  {&TA_bool,NULL,"provides"," override delegates","","",
    0,1,-1,0,NULL,cssElCFun_taiMimeSource_provides_stub,TA_taiMimeSource_provides_MethArgs},
  {&TA_bool,NULL,"IsThisProcess"," true if object originates in this process (ie, we can do low-level object-based ops)","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeSource_IsThisProcess_stub,NULL},
  NULL};
static int taOBase::* TA_taOBase_MbrOff;
static MemberDef_data TA_taOBase_MemberDef[]={
  {&TA_TAPtr,NULL,"owner"," pointer to owner","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taOBase_MbrOff=(int taOBase::*)(&taOBase::owner))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taOBase_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taOBase_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodDef_data TA_taOBase_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_taOBase_GetOwner_stub,TA_taOBase_GetOwner_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_taOBase_SetAdapter_stub,TA_taOBase_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_taOBase_addr_data_link_stub,NULL},
  NULL};
static int taDataView::* TA_taDataView_MbrOff;
static MemberDef_data TA_taDataView_MemberDef[]={
  {&TA_taBase_ptr,NULL,"m_data"," data -- referent of the item -- the data","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taDataView_MbrOff=(int taDataView::*)(&taDataView::m_data))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"data_base"," Minimum type for data object","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taDataView_MbrOff=(int taDataView::*)(&taDataView::data_base))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taDataView_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_taDataView_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taDataView_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taDataView_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taDataView_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taDataView_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taDataView_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taDataView_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taDataView_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_taDataView_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taDataView_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_taDataView_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taDataView_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taDataView_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taDataView_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taDataView_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taDataView_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taDataView_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taDataView_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_taDataView_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taDataView_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taDataView_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taDataView_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taDataView_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taDataView_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_taDataView_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taDataView_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taDataView_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taDataView_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taDataView_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_taDataView_DataLinkDestroying_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"dl",""},
  NULL};
static MethodArgs_data TA_taDataView_DataDataChanged_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"dl",""},
  {&TA_int,NULL,"dcr",""},
  {&TA_void_ptr,NULL,"op1",""},
  {&TA_void_ptr,NULL,"op2",""},
  NULL};
static MethodArgs_data TA_taDataView_SetData_MethArgs[]={
  {&TA_taBase_ptr,NULL,"ta",""},
  NULL};
static MethodArgs_data TA_taDataView_ChildClearing_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_taDataView_ChildRendered_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_taDataView_Clear_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"par"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_taDataView_CloseChild_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_taDataView_ItemRemoving_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"item",""},
  NULL};
static MethodDef_data TA_taDataView_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_taDataView_GetColText_stub,TA_taDataView_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_taDataView_ChildQueryEditActions_stub,TA_taDataView_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_taDataView_ChildEditAction_stub,TA_taDataView_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_taDataView_QueryEditActions_stub,TA_taDataView_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_taDataView_EditAction_stub,TA_taDataView_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_UnSafeCopy_stub,TA_taDataView_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_CastCopyTo_stub,TA_taDataView_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_taDataView_GetOwner_stub,TA_taDataView_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_taDataView_GetPath_stub,TA_taDataView_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_taDataView_FindFromPath_stub,TA_taDataView_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_taDataView_New_stub,TA_taDataView_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_StructUpdate_stub,TA_taDataView_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_DataUpdate_stub,TA_taDataView_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_AddDataView_stub,TA_taDataView_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_RemoveDataView_stub,TA_taDataView_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_taDataView_InheritsFrom_stub,TA_taDataView_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_taDataView_GetEnumString_stub,TA_taDataView_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_taDataView_GetEnumVal_stub,TA_taDataView_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_taDataView_Load_stub,TA_taDataView_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_taDataView_Save_stub,TA_taDataView_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_taDataView_SaveAs_stub,TA_taDataView_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_taDataView_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_taDataView_ReShowEdit_stub,TA_taDataView_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_taDataView_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taDataView_CopyFrom_stub,TA_taDataView_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taDataView_CopyTo_stub,TA_taDataView_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_taDataView_ChildUpdateAfterEdit_stub,TA_taDataView_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taDataView_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taDataView_ChangeMyType_stub,TA_taDataView_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_taDataView_SelectForEdit_stub,TA_taDataView_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taDataView_SelectFunForEdit_stub,TA_taDataView_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taDataView_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_CallFun_stub,TA_taDataView_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_SetAdapter_stub,TA_taDataView_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_addr_data_link_stub,NULL},
  {&TA_void_ptr,NULL,"This"," reference to the 'this' pointer of the client object","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_This_stub,NULL},
  {&TA_taiDataLink_ptr,NULL,"link","","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_link_stub,NULL},
  {&TA_void,NULL,"DataLinkDestroying"," called by DataLink when destroying; it will remove datalink ref in dlc upon return","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_DataLinkDestroying_stub,TA_taDataView_DataLinkDestroying_MethArgs},
  {&TA_void,NULL,"DataDataChanged"," ","","",
    0,4,-1,0,NULL,cssElCFun_taDataView_DataDataChanged_stub,TA_taDataView_DataDataChanged_MethArgs},
  {&TA_TypeDef_ptr,NULL,"GetDataTypeDef"," convenience function, gets data from link","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_GetDataTypeDef_stub,NULL},
  {&TA_bool,NULL,"IsDataView"," 'true' for dlc's that are DataViews (see taBase)","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_IsDataView_stub,NULL},
  {&TA_taBase_ptr,NULL,"data"," subclasses usually redefine a strongly typed version","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_data_stub,NULL},
  {&TA_void,NULL,"SetData"," set the data to which this points -- must be subclass of data_base","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_SetData_stub,TA_taDataView_SetData_MethArgs},
  {&TA_int,NULL,"dbu_cnt"," batch update: -ve:data, 0:none, +ve:struct","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_dbu_cnt_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"md"," ISelectable property member stub","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_md_stub,NULL},
  {&TA_int,NULL,"par_dbu_cnt"," dbu of parent(s); note: only sign is accurate, not necessarily value (optimized)","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_par_dbu_cnt_stub,NULL},
  {&TA_taDataView_ptr,NULL,"parent","","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_parent_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"GetDataMemberDef"," returns md if known and/or knowable (ex. NULL for list members)","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_GetDataMemberDef_stub,NULL},
  {&TA_taString,NULL,"GetLabel"," returns a label suitable for tabview tabs, etc.","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_GetLabel_stub,NULL},
  {&TA_void,NULL,"DataDestroying","","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_DataDestroying_stub,NULL},
  {&TA_void,NULL,"ChildClearing"," override to implement par's portion of clear","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_ChildClearing_stub,TA_taDataView_ChildClearing_MethArgs},
  {&TA_void,NULL,"ChildRendered"," override to implement par's portion of render","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_ChildRendered_stub,TA_taDataView_ChildRendered_MethArgs},
  {&TA_void,NULL,"Clear"," clears the view (but doesn't delete any components) (usually override _impl)","","",
    0,1,0,0,NULL,cssElCFun_taDataView_Clear_stub,TA_taDataView_Clear_MethArgs},
  {&TA_void,NULL,"CloseChild","","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_CloseChild_stub,TA_taDataView_CloseChild_MethArgs},
  {&TA_void,NULL,"Render"," renders the visible contents (usually override the _impl)","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_Render_stub,NULL},
  {&TA_void,NULL,"Reset"," clears, and deletes any components (note: usually override _impl)","","",
    0,0,-1,0,NULL,cssElCFun_taDataView_Reset_stub,NULL},
  {&TA_void,NULL,"ItemRemoving"," items call this on the root item -- usually used by a viewer to insure item removed from things like sel lists","","",
    0,1,-1,0,NULL,cssElCFun_taDataView_ItemRemoving_stub,TA_taDataView_ItemRemoving_MethArgs},
  NULL};
static int taNBase::* TA_taNBase_MbrOff;
static MemberDef_data TA_taNBase_MemberDef[]={
  {&TA_taString,NULL,"name"," name of the object","","",
    *((ta_memb_ptr*)&(TA_taNBase_MbrOff=(int taNBase::*)(&taNBase::name))),0,NULL,0},
  NULL};
static int SelectEdit::* TA_SelectEdit_MbrOff;
static MemberDef_data TA_SelectEdit_MemberDef[]={
  {&TA_SelectEditConfig,NULL,"config"," special parameters for controlling the display","","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::config))),0,NULL,0},
  {&TA_taBase_List,NULL,"mbr_bases"," the bases for each element in the list","LINK_GROUP READ_ONLY AKA_bases ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::mbr_bases))),0,NULL,0},
  {&TA_String_Array,NULL,"mbr_strs"," string names of mbrs on bases -- used for saving","READ_ONLY AKA_member_strs ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::mbr_strs))),0,NULL,0},
  {&TA_MemberSpace,NULL,"members"," member defs","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::members))),0,NULL,0},
  {&TA_String_Array,NULL,"mbr_base_paths"," paths to base objects for BaseChangeSave","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::mbr_base_paths))),0,NULL,0},
  {&TA_taBase_List,NULL,"meth_bases"," the bases for each element in the list","LINK_GROUP READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::meth_bases))),0,NULL,0},
  {&TA_String_Array,NULL,"meth_strs"," string names of meths on bases -- used for saving","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::meth_strs))),0,NULL,0},
  {&TA_MethodSpace,NULL,"methods"," method defs","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::methods))),0,NULL,0},
  {&TA_String_Array,NULL,"meth_base_paths"," paths to base objects for BaseChangeSave","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::meth_base_paths))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SelectEdit_FindMbrBase_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMember_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMemberNm_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_const_char_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_FindMethBase_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MethodDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMethod_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MethodDef_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMethodNm_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_const_char_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_RemoveField_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_SelectEdit_MoveField_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_SelectEdit_RemoveFun_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_SelectEdit_MoveFun_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_SelectEdit_BaseClosing_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  NULL};
static MethodArgs_data TA_SelectEdit_BaseClosingAll_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  NULL};
static MethodArgs_data TA_SelectEdit_GetMbrLabel_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_SelectEdit_GetMethLabel_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodDef_data TA_SelectEdit_MethodDef[]={
  {&TA_int,NULL,"FindMbrBase"," find a given base and member, returns index","","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_FindMbrBase_stub,TA_SelectEdit_FindMbrBase_MethArgs},
  {&TA_bool,NULL,"SelectMember"," add new member to edit if it isn't already here (returns true), otherwise update lbl (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMember_stub,TA_SelectEdit_SelectMember_MethArgs},
  {&TA_bool,NULL,"SelectMemberNm"," add new member to edit if it isn't already here (returns true), otherwise update lbl (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMemberNm_stub,TA_SelectEdit_SelectMemberNm_MethArgs},
  {&TA_int,NULL,"FindMethBase"," find a given base and method, returns index","","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_FindMethBase_stub,TA_SelectEdit_FindMethBase_MethArgs},
  {&TA_bool,NULL,"SelectMethod"," add new method to edit if it isn't already here (returns true), otherwise remove (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMethod_stub,TA_SelectEdit_SelectMethod_MethArgs},
  {&TA_bool,NULL,"SelectMethodNm"," add new method to edit if it isn't already here (returns true), otherwise remove (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMethodNm_stub,TA_SelectEdit_SelectMethodNm_MethArgs},
  {&TA_void,NULL,"UpdateAllBases"," perform update-after-edit on all base objects","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_UpdateAllBases_stub,NULL},
  {&TA_void,NULL,"RemoveField"," remove edit data item at given index","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_RemoveField_stub,TA_SelectEdit_RemoveField_MethArgs},
  {&TA_void,NULL,"MoveField"," move member to edit from index to index","MENU MENU_ON_SelectEdit ","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_MoveField_stub,TA_SelectEdit_MoveField_MethArgs},
  {&TA_void,NULL,"RemoveFun"," remove function at given index","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_RemoveFun_stub,TA_SelectEdit_RemoveFun_MethArgs},
  {&TA_void,NULL,"MoveFun"," move function to edit from index to index","MENU ","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_MoveFun_stub,TA_SelectEdit_MoveFun_MethArgs},
  {&TA_void,NULL,"NewEdit"," closes current edit dialog and makes a new one (with any changes)","MENU MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_NewEdit_stub,NULL},
  {&TA_void,NULL,"GetMembsFmStrs"," get members from strings (upon loading)","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_GetMembsFmStrs_stub,NULL},
  {&TA_void,NULL,"GetMethsFmStrs"," get methods from strings (upon loading)","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_GetMethsFmStrs_stub,NULL},
  {&TA_void,NULL,"GetAllPaths"," get paths for all current objects","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_GetAllPaths_stub,NULL},
  {&TA_bool,NULL,"BaseClosing"," this base object is about to be closed (removed), if i edit it, then I need to save and reopen (returns true if edited)","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_BaseClosing_stub,TA_SelectEdit_BaseClosing_MethArgs},
  {&TA_bool,NULL,"BaseClosingAll"," calls base closing on all SelectEdit tokens..","","",
    0,1,-1,1,(ta_void_fun)(SelectEdit::BaseClosingAll),cssElCFun_SelectEdit_BaseClosingAll_stub,TA_SelectEdit_BaseClosingAll_MethArgs},
  {&TA_void,NULL,"BaseChangeSave"," close edit dialog and save paths to current bases","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_BaseChangeSave_stub,NULL},
  {&TA_void,NULL,"BaseChangeReShow"," re-show the edit dialog loading bases from saved paths","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_BaseChangeReShow_stub,NULL},
  {&TA_taString,NULL,"GetMbrLabel"," get full label for member","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_GetMbrLabel_stub,TA_SelectEdit_GetMbrLabel_MethArgs},
  {&TA_taString,NULL,"GetMethLabel"," get full label for method","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_GetMethLabel_stub,TA_SelectEdit_GetMethLabel_MethArgs},
  NULL};
static MemberDef_data TA_tabMisc_MemberDef[]={
  {&TA_TAPtr,NULL,"root"," root of the structural object hierarchy","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::root),0},
  {&TA_taBase_PtrList,NULL,"delayed_remove"," list of objs to be removed in the wait process (e.g. when objs delete themselves)","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::delayed_remove),0},
  {&TA_taBase_PtrList,NULL,"delayed_updateafteredit"," list of objs to be update-after-edit'd in the wait process","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::delayed_updateafteredit),0},
  NULL};
static MethodArgs_data TA_tabMisc_Close_Obj_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_tabMisc_NotifyEdits_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_tabMisc_DelayedUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodDef_data TA_tabMisc_MethodDef[]={
  {&TA_void,NULL,"Close_Obj"," call this to implement closing object function","","",
    0,1,-1,1,(ta_void_fun)(tabMisc::Close_Obj),cssElCFun_tabMisc_Close_Obj_stub,TA_tabMisc_Close_Obj_MethArgs},
  {&TA_int,NULL,"WaitProc"," wait process function: remove objects from groups, update others","","",
    0,0,-1,1,(ta_void_fun)(tabMisc::WaitProc),cssElCFun_tabMisc_WaitProc_stub,NULL},
  {&TA_bool,NULL,"NotifyEdits"," notify any edit dialogs of a taptr object that object has changed","","",
    0,1,-1,1,(ta_void_fun)(tabMisc::NotifyEdits),cssElCFun_tabMisc_NotifyEdits_stub,TA_tabMisc_NotifyEdits_MethArgs},
  {&TA_void,NULL,"DelayedUpdateAfterEdit"," call update-after-edit on object in wait process (in case this does other kinds of damage..)","","",
    0,1,-1,1,(ta_void_fun)(tabMisc::DelayedUpdateAfterEdit),cssElCFun_tabMisc_DelayedUpdateAfterEdit_stub,TA_tabMisc_DelayedUpdateAfterEdit_MethArgs},
  NULL};
static int taFBase::* TA_taFBase_MbrOff;
static MemberDef_data TA_taFBase_MemberDef[]={
  {&TA_taString,NULL,"file_name","","","",
    *((ta_memb_ptr*)&(TA_taFBase_MbrOff=(int taFBase::*)(&taFBase::file_name))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Edit_El_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__FindEl_MethArgs[]={
  {NULL,"::const_taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Add_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Insert_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__RemoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__DuplicateEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Link_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__LinkUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__InsertLink_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Push_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__MoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","from",""},
  {NULL,"::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Transfer_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taBase__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_taBase__Find_stub,TA_taPtrList_taBase__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_taBase__Remove_stub,TA_taPtrList_taBase__Remove_MethArgs},
  {NULL,"::taBase_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__SafeEl_stub,TA_taPtrList_taBase__SafeEl_MethArgs},
  {NULL,"::taBase_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__FastEl_stub,TA_taPtrList_taBase__FastEl_MethArgs},
  {NULL,"::taBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__Edit_El_stub,TA_taPtrList_taBase__Edit_El_MethArgs},
  {NULL,"::taBase_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taBase__FindName_stub,TA_taPtrList_taBase__FindName_MethArgs},
  {NULL,"::taBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taBase__Pop_stub,NULL},
  {NULL,"::taBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taBase__Peek_stub,NULL},
  {NULL,"::taBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__AddUniqNameOld_stub,TA_taPtrList_taBase__AddUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__LinkUniqNameOld_stub,TA_taPtrList_taBase__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__FindEl_stub,TA_taPtrList_taBase__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__AddEl_stub,TA_taPtrList_taBase__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__Add_stub,TA_taPtrList_taBase__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__AddUnique_stub,TA_taPtrList_taBase__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__AddUniqNameNew_stub,TA_taPtrList_taBase__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__Insert_stub,TA_taPtrList_taBase__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taBase__Replace_stub,TA_taPtrList_taBase__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceEl_stub,TA_taPtrList_taBase__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceName_stub,TA_taPtrList_taBase__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__RemoveEl_stub,TA_taPtrList_taBase__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__DuplicateEl_stub,TA_taPtrList_taBase__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__Link_stub,TA_taPtrList_taBase__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__LinkUnique_stub,TA_taPtrList_taBase__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__LinkUniqNameNew_stub,TA_taPtrList_taBase__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taBase__InsertLink_stub,TA_taPtrList_taBase__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceLink_stub,TA_taPtrList_taBase__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceLinkEl_stub,TA_taPtrList_taBase__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceLinkName_stub,TA_taPtrList_taBase__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__Push_stub,TA_taPtrList_taBase__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__MoveEl_stub,TA_taPtrList_taBase__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taBase__Transfer_stub,TA_taPtrList_taBase__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__MoveBefore_stub,TA_taPtrList_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taBase__MoveAfter_stub,TA_taPtrList_taBase__MoveAfter_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Find_MethArgs[]={
  {NULL,"::const_taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Remove_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__FindEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Add_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Insert_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"where",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__RemoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__DuplicateEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Link_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__LinkUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__InsertLink_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Push_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","from",""},
  {NULL,"::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Transfer_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_base_taBase__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    1,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Find_stub,TA_taPtrList_base_taBase__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Remove_stub,TA_taPtrList_base_taBase__Remove_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__FindEl_stub,TA_taPtrList_base_taBase__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__AddEl_stub,TA_taPtrList_base_taBase__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Add_stub,TA_taPtrList_base_taBase__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__AddUnique_stub,TA_taPtrList_base_taBase__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__AddUniqNameNew_stub,TA_taPtrList_base_taBase__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," insert element at index (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Insert_stub,TA_taPtrList_base_taBase__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Replace_stub,TA_taPtrList_base_taBase__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceEl_stub,TA_taPtrList_base_taBase__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceName_stub,TA_taPtrList_base_taBase__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__RemoveEl_stub,TA_taPtrList_base_taBase__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__DuplicateEl_stub,TA_taPtrList_base_taBase__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Link_stub,TA_taPtrList_base_taBase__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__LinkUnique_stub,TA_taPtrList_base_taBase__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__LinkUniqNameNew_stub,TA_taPtrList_base_taBase__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_base_taBase__InsertLink_stub,TA_taPtrList_base_taBase__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLink_stub,TA_taPtrList_base_taBase__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLinkEl_stub,TA_taPtrList_base_taBase__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLinkName_stub,TA_taPtrList_base_taBase__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Push_stub,TA_taPtrList_base_taBase__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveEl_stub,TA_taPtrList_base_taBase__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Transfer_stub,TA_taPtrList_base_taBase__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveBefore_stub,TA_taPtrList_base_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveAfter_stub,TA_taPtrList_base_taBase__MoveAfter_MethArgs},
  NULL};
static int taList_impl::* TA_taList_impl_MbrOff;
static MemberDef_data TA_taList_impl_MemberDef[]={
  {&TA_MemberDef_ptr,NULL,"find_md"," return value for findmember of data","HIDDEN NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taList_impl::find_md),0},
  {&TA_taString,NULL,"name"," name of the object","","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::name))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"el_base"," Base type for objects in group","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_base))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"el_typ"," Default type for objects in group","TYPE_ON_el_base ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_typ))),0,NULL,0},
  {&TA_int,NULL,"el_def"," Index of default element in group","","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_def))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taList_impl_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_taList_impl_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taList_impl_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taList_impl_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taList_impl_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taList_impl_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_taList_impl_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taList_impl_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taList_impl_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taList_impl_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taList_impl_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taList_impl_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_taList_impl_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taList_impl_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taList_impl_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taList_impl_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taList_impl_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetTA_Element__MethArgs[]={
  {&TA_int,NULL,"i",""},
  {&TA_TypeDef_ptr_ref,NULL,"eltd",""},
  NULL};
static MethodArgs_data TA_taList_impl_DataChanged_MethArgs[]={
  {&TA_int,NULL,"dcr",""},
  {&TA_void_ptr,NULL,"op1"," ((void *)0)"},
  {&TA_void_ptr,NULL,"op2"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_taList_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taList_impl_BuildHashTable_MethArgs[]={
  {&TA_int,NULL,"n_buckets",""},
  NULL};
static MethodArgs_data TA_taList_impl_Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taList_impl_Swap_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taList_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taList_impl_Sort__MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taList_impl_FirstEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taList_impl_NextEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taList_impl_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Stealth_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Common_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetColHeading_MethArgs[]={
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChildGetColText_MethArgs[]={
  {&TA_void_ptr,NULL,"child",""},
  {&TA_TypeDef_ptr,NULL,"typ",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_taList_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm","cout"},
  NULL};
static MethodArgs_data TA_taList_impl_FindEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Add_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Insert_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"where",""},
  NULL};
static MethodArgs_data TA_taList_impl_Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_taList_impl_DuplicateEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Link_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_LinkUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_LinkUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_InsertLink_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLinkEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_Push_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","from",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taList_impl_Transfer_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveBefore_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","trg",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveAfter_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","trg",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Dump_Save_PathR_impl_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultEl_MethArgs[]={
  {&TA_TAPtr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultElName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultElType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taList_impl_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taList_impl_EnforceSameStru_MethArgs[]={
  {&TA_const_taList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChangeType_MethArgs[]={
  {&TA_TAPtr,NULL,"itm",""},
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"old_type",""},
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetBaseType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodDef_data TA_taList_impl_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_taList_impl_GetColText_stub,TA_taList_impl_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_taList_impl_ChildQueryEditActions_stub,TA_taList_impl_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_taList_impl_ChildEditAction_stub,TA_taList_impl_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_taList_impl_QueryEditActions_stub,TA_taList_impl_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_EditAction_stub,TA_taList_impl_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_UnSafeCopy_stub,TA_taList_impl_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CastCopyTo_stub,TA_taList_impl_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_taList_impl_GetOwner_stub,TA_taList_impl_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_taList_impl_GetPath_stub,TA_taList_impl_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_taList_impl_FindFromPath_stub,TA_taList_impl_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," create n_objs new objects of given type","MENU MENU_ON_Object ARGC_0 UPDATE_MENUS NO_SCRIPT MENU_CONTEXT ","",
    0,2,0,0,NULL,cssElCFun_taList_impl_New_stub,TA_taList_impl_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_StructUpdate_stub,TA_taList_impl_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_DataUpdate_stub,TA_taList_impl_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_AddDataView_stub,TA_taList_impl_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_RemoveDataView_stub,TA_taList_impl_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_taList_impl_InheritsFrom_stub,TA_taList_impl_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_GetEnumString_stub,TA_taList_impl_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_taList_impl_GetEnumVal_stub,TA_taList_impl_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_taList_impl_Load_stub,TA_taList_impl_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_taList_impl_Save_stub,TA_taList_impl_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_taList_impl_SaveAs_stub,TA_taList_impl_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_taList_impl_ReShowEdit_stub,TA_taList_impl_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CopyFrom_stub,TA_taList_impl_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CopyTo_stub,TA_taList_impl_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ChildUpdateAfterEdit_stub,TA_taList_impl_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_ChangeMyType_stub,TA_taList_impl_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_taList_impl_SelectForEdit_stub,TA_taList_impl_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taList_impl_SelectFunForEdit_stub,TA_taList_impl_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CallFun_stub,TA_taList_impl_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_SetAdapter_stub,TA_taList_impl_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_addr_data_link_stub,NULL},
  {&TA_void_ptr,NULL,"GetTA_Element_","","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_GetTA_Element__stub,TA_taList_impl_GetTA_Element__MethArgs},
  {&TA_void,NULL,"DataChanged"," called when list has changed -- more fine-grained than Dirty(), and may be multiple calls per event","","",
    0,3,1,0,NULL,cssElCFun_taList_impl_DataChanged_stub,TA_taList_impl_DataChanged_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Alloc_stub,TA_taList_impl_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list (remove all elements)","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Reset_stub,NULL},
  {&TA_bool,NULL,"IsEmpty","","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_IsEmpty_stub,NULL},
  {&TA_void,NULL,"BuildHashTable"," build a hash table with given number of buckets (not dynamic, so make it big)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BuildHashTable_stub,TA_taList_impl_BuildHashTable_MethArgs},
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there) virtual int	Find(const TAPtr item) const	{ return taPtrList_ta_base::Find(item); } find element of given type","","",
    4,1,-1,0,NULL,cssElCFun_taList_impl_Find_stub,TA_taList_impl_Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove object at given index on list","","",
    7,1,-1,0,NULL,cssElCFun_taList_impl_Remove_stub,TA_taList_impl_Remove_MethArgs},
  {&TA_bool,NULL,"RemoveName"," remove given named element from list (if on list)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_RemoveName_stub,TA_taList_impl_RemoveName_MethArgs},
  {&TA_bool,NULL,"RemoveLast"," remove the last element on the list","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_RemoveLast_stub,NULL},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_RemoveAll_stub,NULL},
  {&TA_bool,NULL,"Move"," Move element from (from) to position (to) in list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_Move_stub,TA_taList_impl_Move_MethArgs},
  {&TA_bool,NULL,"Swap"," Swap the elements in the two given positions on the list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_Swap_stub,TA_taList_impl_Swap_MethArgs},
  {&TA_void,NULL,"PopAll"," pop all elements off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_PopAll_stub,NULL},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the items in the list in alpha order according to name (or El_Compare_)","MENU CONFIRM UPDATE_MENUS ","",
    0,1,0,0,NULL,cssElCFun_taList_impl_Sort_stub,TA_taList_impl_Sort_MethArgs},
  {&TA_void,NULL,"Sort_"," implementation of sorting function","","",
    0,1,0,0,NULL,cssElCFun_taList_impl_Sort__stub,TA_taList_impl_Sort__MethArgs},
  {&TA_void,NULL,"UpdateAllIndicies"," update all indices of elements in list","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_UpdateAllIndicies_stub,NULL},
  {&TA_void_ptr,NULL,"FirstEl"," for ta_group::FOR_ITR_EL macro","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_FirstEl_stub,TA_taList_impl_FirstEl_MethArgs},
  {&TA_void_ptr,NULL,"NextEl"," for ta_group::FOR_ITR_EL macro","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_NextEl_stub,TA_taList_impl_NextEl_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Duplicate_stub,TA_taList_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_DupeUniqNameNew_stub,TA_taList_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_DupeUniqNameOld_stub,TA_taList_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Stealth_Borrow"," borrow without referencing the borrowed elements (i.e. use AddEl_())","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Stealth_Borrow_stub,TA_taList_impl_Stealth_Borrow_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Borrow_stub,TA_taList_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BorrowUnique_stub,TA_taList_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BorrowUniqNameNew_stub,TA_taList_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BorrowUniqNameOld_stub,TA_taList_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Copy_Common_stub,TA_taList_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Copy_Duplicate_stub,TA_taList_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Copy_Borrow_stub,TA_taList_impl_Copy_Borrow_MethArgs},
  {&TA_int,NULL,"NumListCols"," number of columns in a list view for this item type","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_NumListCols_stub,NULL},
  {&TA_taString,NULL,"GetColHeading"," header text for the indicated column","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_GetColHeading_stub,TA_taList_impl_GetColHeading_MethArgs},
  {&TA_taString,NULL,"ChildGetColText"," itm_idx is a hint from source, -1 means not specified or ignore","","",
    0,4,3,0,NULL,cssElCFun_taList_impl_ChildGetColText_stub,TA_taList_impl_ChildGetColText_MethArgs},
  {&TA_void,NULL,"List"," List the group items","","",
    0,1,0,0,NULL,cssElCFun_taList_impl_List_stub,TA_taList_impl_List_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_FindEl_stub,TA_taList_impl_FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_AddEl_stub,TA_taList_impl_AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Add_stub,TA_taList_impl_Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_AddUnique_stub,TA_taList_impl_AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_AddUniqNameNew_stub,TA_taList_impl_AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," insert element at index (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_Insert_stub,TA_taList_impl_Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taList_impl_Replace_stub,TA_taList_impl_Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceEl_stub,TA_taList_impl_ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceName_stub,TA_taList_impl_ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list Remove given item from the list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_taList_impl_RemoveEl_stub,TA_taList_impl_RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_DuplicateEl_stub,TA_taList_impl_DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Link_stub,TA_taList_impl_Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_LinkUnique_stub,TA_taList_impl_LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_LinkUniqNameNew_stub,TA_taList_impl_LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taList_impl_InsertLink_stub,TA_taList_impl_InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceLink_stub,TA_taList_impl_ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceLinkEl_stub,TA_taList_impl_ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceLinkName_stub,TA_taList_impl_ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Push_stub,TA_taList_impl_Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_MoveEl_stub,TA_taList_impl_MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Transfer_stub,TA_taList_impl_Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_MoveBefore_stub,TA_taList_impl_MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_MoveAfter_stub,TA_taList_impl_MoveAfter_MethArgs},
  {&TA_int,NULL,"Dump_Save_PathR_impl","","","",
    0,3,1,0,NULL,cssElCFun_taList_impl_Dump_Save_PathR_impl_stub,TA_taList_impl_Dump_Save_PathR_impl_MethArgs},
  {&TA_int,NULL,"SetDefaultEl"," set the default element to be given item","","",
    2,1,-1,0,NULL,cssElCFun_taList_impl_SetDefaultEl_stub,TA_taList_impl_SetDefaultEl_MethArgs},
  {&TA_int,NULL,"SetDefaultElName"," set the default element to be item with given name","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_SetDefaultElName_stub,TA_taList_impl_SetDefaultElName_MethArgs},
  {&TA_int,NULL,"SetDefaultElType"," set the default element to be item with given type","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_SetDefaultElType_stub,TA_taList_impl_SetDefaultElType_MethArgs},
  {&TA_void,NULL,"EnforceSize"," add or remove elements to force list to be of given size","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_EnforceSize_stub,TA_taList_impl_EnforceSize_MethArgs},
  {&TA_void,NULL,"EnforceType"," enforce current type (all elements have to be of this type)","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_EnforceType_stub,NULL},
  {&TA_void,NULL,"EnforceSameStru"," make the two lists identical in terms of size and types of objects","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_EnforceSameStru_stub,TA_taList_impl_EnforceSameStru_MethArgs},
  {&TA_bool,NULL,"ChangeType"," change type of item at index change type of item to new type, copying current info","MENU MENU_ON_Object UPDATE_MENUS ARG_ON_OBJ TYPE_ON_el_base ","",
    1,2,-1,0,NULL,cssElCFun_taList_impl_ChangeType_stub,TA_taList_impl_ChangeType_MethArgs},
  {&TA_int,NULL,"ReplaceType"," replace all items of old type with new type (returns number changed)","MENU MENU_ON_Object USE_RVAL UPDATE_MENUS TYPE_ON_el_base ","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceType_stub,TA_taList_impl_ReplaceType_MethArgs},
  {&TA_void,NULL,"SetBaseType"," set base (and default) type to given td","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_SetBaseType_stub,TA_taList_impl_SetBaseType_MethArgs},
  {&TA_MemberDef_ptr,NULL,"ReturnFindMd"," return the find_md variable, initialized if necessary","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_ReturnFindMd_stub,NULL},
  NULL};
static EnumDef_data TA_taList_taBase__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_taBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_taBase__Edit_El_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taBase__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_taBase__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taBase__MoveBefore_stub,TA_taList_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taBase__MoveAfter_stub,TA_taList_taBase__MoveAfter_MethArgs},
  {NULL,"::taBase_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__SafeEl_stub,TA_taList_taBase__SafeEl_MethArgs},
  {NULL,"::taBase_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__FastEl_stub,TA_taList_taBase__FastEl_MethArgs},
  {NULL,"::taBase_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_taBase__DefaultEl_stub,NULL},
  {NULL,"::taBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__Edit_El_stub,TA_taList_taBase__Edit_El_MethArgs},
  {NULL,"::taBase_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_taBase__FindName_stub,TA_taList_taBase__FindName_MethArgs},
  {NULL,"::taBase_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_taBase__FindType_stub,TA_taList_taBase__FindType_MethArgs},
  {NULL,"::taBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taBase__Pop_stub,NULL},
  {NULL,"::taBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taBase__Peek_stub,NULL},
  {NULL,"::taBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__AddUniqNameOld_stub,TA_taList_taBase__AddUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__LinkUniqNameOld_stub,TA_taList_taBase__LinkUniqNameOld_MethArgs},
  NULL};
static MethodArgs_data TA_taArray_base_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_taArray_base_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taArray_base_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taArray_base_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_taArray_base_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taArray_base_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taArray_base_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_taArray_base_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taArray_base_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_taArray_base_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taArray_base_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taArray_base_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taArray_base_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_taArray_base_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taArray_base_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_taArray_base_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taArray_base_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taArray_base_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taArray_base_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taArray_base_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taArray_base_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_taArray_base_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taArray_base_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_taArray_base_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_base_Alloc_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_taArray_base_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taArray_base_AddBlank_MethArgs[]={
  {&TA_int,NULL,"n_els"," 1"},
  NULL};
static MethodArgs_data TA_taArray_base_Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_base_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taArray_base_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taArray_base_ShiftLeft_MethArgs[]={
  {&TA_int,NULL,"nshift",""},
  NULL};
static MethodArgs_data TA_taArray_base_ShiftLeftPct_MethArgs[]={
  {&TA_float,NULL,"pct",""},
  NULL};
static MethodArgs_data TA_taArray_base_V_Flip_MethArgs[]={
  {&TA_int,NULL,"width",""},
  NULL};
static MethodArgs_data TA_taArray_base_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_DupeUnique_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_Copy_Common_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_Copy_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_CopyVals_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"from",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  {&TA_int,NULL,"at","0"},
  NULL};
static MethodArgs_data TA_taArray_base_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_taArray_base_InitFromString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodDef_data TA_taArray_base_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_taArray_base_GetColText_stub,TA_taArray_base_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_taArray_base_ChildQueryEditActions_stub,TA_taArray_base_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_taArray_base_ChildEditAction_stub,TA_taArray_base_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_taArray_base_QueryEditActions_stub,TA_taArray_base_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_taArray_base_EditAction_stub,TA_taArray_base_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_UnSafeCopy_stub,TA_taArray_base_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CastCopyTo_stub,TA_taArray_base_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_taArray_base_GetOwner_stub,TA_taArray_base_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_taArray_base_GetPath_stub,TA_taArray_base_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_taArray_base_FindFromPath_stub,TA_taArray_base_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_taArray_base_New_stub,TA_taArray_base_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_StructUpdate_stub,TA_taArray_base_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_DataUpdate_stub,TA_taArray_base_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_AddDataView_stub,TA_taArray_base_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_RemoveDataView_stub,TA_taArray_base_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_taArray_base_InheritsFrom_stub,TA_taArray_base_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_taArray_base_GetEnumString_stub,TA_taArray_base_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_taArray_base_GetEnumVal_stub,TA_taArray_base_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_taArray_base_Load_stub,TA_taArray_base_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_taArray_base_Save_stub,TA_taArray_base_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_taArray_base_SaveAs_stub,TA_taArray_base_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_taArray_base_ReShowEdit_stub,TA_taArray_base_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CopyFrom_stub,TA_taArray_base_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CopyTo_stub,TA_taArray_base_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_taArray_base_ChildUpdateAfterEdit_stub,TA_taArray_base_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_ChangeMyType_stub,TA_taArray_base_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_taArray_base_SelectForEdit_stub,TA_taArray_base_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taArray_base_SelectFunForEdit_stub,TA_taArray_base_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CallFun_stub,TA_taArray_base_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_SetAdapter_stub,TA_taArray_base_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_addr_data_link_stub,NULL},
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_InRange_stub,TA_taArray_base_InRange_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate storage for at least the given size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Alloc_stub,TA_taArray_base_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list to zero size (does not free memory)","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Reset_stub,NULL},
  {&TA_void_ptr,NULL,"BlankEl_"," address of a blank element, for initializing empty items","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_BlankEl__stub,NULL},
  {&TA_void,NULL,"EnforceSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_EnforceSize_stub,TA_taArray_base_EnforceSize_MethArgs},
  {&TA_void,NULL,"AddBlank"," Add n_els empty elements to the end of the array","MENU MENU_ON_Edit ","",
    0,1,0,0,NULL,cssElCFun_taArray_base_AddBlank_stub,TA_taArray_base_AddBlank_MethArgs},
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    0,2,1,0,NULL,cssElCFun_taArray_base_Remove_stub,TA_taArray_base_Remove_MethArgs},
  {&TA_bool,NULL,"Move"," move item from index to index","MENU ","",
    0,2,-1,0,NULL,cssElCFun_taArray_base_Move_stub,TA_taArray_base_Move_MethArgs},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the list in ascending order (or descending if switched)","MENU ","",
    0,1,0,0,NULL,cssElCFun_taArray_base_Sort_stub,TA_taArray_base_Sort_MethArgs},
  {&TA_void,NULL,"ShiftLeft"," shift all the elements in the array to the left by given number of items","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_ShiftLeft_stub,TA_taArray_base_ShiftLeft_MethArgs},
  {&TA_void,NULL,"ShiftLeftPct"," shift the array to the left by given percentage of current size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_ShiftLeftPct_stub,TA_taArray_base_ShiftLeftPct_MethArgs},
  {&TA_int,NULL,"V_Flip"," vertically flip the array as if it was arrange in a matrix of width","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_V_Flip_stub,TA_taArray_base_V_Flip_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate the items in the list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Duplicate_stub,TA_taArray_base_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUnique"," duplicate so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_DupeUnique_stub,TA_taArray_base_DupeUnique_MethArgs},
  {&TA_void,NULL,"Copy_Common"," copy elements in common","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Copy_Common_stub,TA_taArray_base_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," copy elements in common, duplicating (if necc) any extra on cp","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Copy_Duplicate_stub,TA_taArray_base_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"CopyVals"," copy values from other array at given start and end points, and putting at given point in this","","",
    0,4,1,0,NULL,cssElCFun_taArray_base_CopyVals_stub,TA_taArray_base_CopyVals_MethArgs},
  {&TA_void,NULL,"List"," print out all of the elements in the array","","",
    0,1,0,0,NULL,cssElCFun_taArray_base_List_stub,TA_taArray_base_List_MethArgs},
  {&TA_void,NULL,"InitFromString"," initialize an array from given string (does reset first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_InitFromString_stub,TA_taArray_base_InitFromString_MethArgs},
  NULL};
static EnumDef_data TA_taArray_int__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int taArray<int>::* TA_taArray_int__MbrOff;
static MemberDef_data TA_taArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_int__MbrOff=(int taArray<int>::*)(&taArray<int>::el))),0,NULL,0},
  {&TA_int,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_int__MbrOff=(int taArray<int>::*)(&taArray<int>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_int__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Push_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_int__Find_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_int__RemoveEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__InitVals_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_int__MethodDef[]={
  {NULL,"::const_int_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__SafeEl_stub,TA_taArray_int__SafeEl_MethArgs},
  {NULL,"::int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__FastEl_stub,TA_taArray_int__FastEl_MethArgs},
  {NULL,"::const_int_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__RevEl_stub,TA_taArray_int__RevEl_MethArgs},
  {NULL,"::const_int","Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_int__Pop_stub,NULL},
  {NULL,"::const_int_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_int__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_int__Set_stub,TA_taArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__Add_stub,TA_taArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__AddUnique_stub,TA_taArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__Push_stub,TA_taArray_int__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_int__Insert_stub,TA_taArray_int__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_int__Find_stub,TA_taArray_int__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__RemoveEl_stub,TA_taArray_int__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_int__InitVals_stub,TA_taArray_int__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_int_Array_MemberDef[]={
  {&TA_int,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&int_Array::blank),0},
  NULL};
static MethodArgs_data TA_int_Array_FillSeq_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"inc","1"},
  NULL};
static MethodDef_data TA_int_Array_MethodDef[]={
  {&TA_void,NULL,"FillSeq"," fill array with sequential values starting at start, incrementing by inc","","",
    0,2,0,0,NULL,cssElCFun_int_Array_FillSeq_stub,TA_int_Array_FillSeq_MethArgs},
  NULL};
static EnumDef_data TA_taArray_float__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int taArray<float>::* TA_taArray_float__MbrOff;
static MemberDef_data TA_taArray_float__MemberDef[]={
  {NULL,"::float_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_float__MbrOff=(int taArray<float>::*)(&taArray<float>::el))),0,NULL,0},
  {&TA_float,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_float__MbrOff=(int taArray<float>::*)(&taArray<float>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_float__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_float__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_float__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_float__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Add_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__AddUnique_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Push_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Insert_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_float__Find_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_float__RemoveEl_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__InitVals_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_float__MethodDef[]={
  {NULL,"::const_float_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__SafeEl_stub,TA_taArray_float__SafeEl_MethArgs},
  {NULL,"::float_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__FastEl_stub,TA_taArray_float__FastEl_MethArgs},
  {NULL,"::const_float_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__RevEl_stub,TA_taArray_float__RevEl_MethArgs},
  {NULL,"::const_float","Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_float__Pop_stub,NULL},
  {NULL,"::const_float_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_float__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_float__Set_stub,TA_taArray_float__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__Add_stub,TA_taArray_float__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__AddUnique_stub,TA_taArray_float__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__Push_stub,TA_taArray_float__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_float__Insert_stub,TA_taArray_float__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_float__Find_stub,TA_taArray_float__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__RemoveEl_stub,TA_taArray_float__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_float__InitVals_stub,TA_taArray_float__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_float_Array_MemberDef[]={
  {&TA_float,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&float_Array::blank),0},
  NULL};
static EnumDef_data TA_taArray_double__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int taArray<double>::* TA_taArray_double__MbrOff;
static MemberDef_data TA_taArray_double__MemberDef[]={
  {NULL,"::double_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_double__MbrOff=(int taArray<double>::*)(&taArray<double>::el))),0,NULL,0},
  {&TA_double,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_double__MbrOff=(int taArray<double>::*)(&taArray<double>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_double__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_double__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_double__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_double__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Add_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__AddUnique_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Push_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Insert_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_double__Find_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_double__RemoveEl_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__InitVals_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_double__MethodDef[]={
  {NULL,"::const_double_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__SafeEl_stub,TA_taArray_double__SafeEl_MethArgs},
  {NULL,"::double_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__FastEl_stub,TA_taArray_double__FastEl_MethArgs},
  {NULL,"::const_double_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__RevEl_stub,TA_taArray_double__RevEl_MethArgs},
  {NULL,"::const_double","Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_double__Pop_stub,NULL},
  {NULL,"::const_double_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_double__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_double__Set_stub,TA_taArray_double__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__Add_stub,TA_taArray_double__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__AddUnique_stub,TA_taArray_double__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__Push_stub,TA_taArray_double__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_double__Insert_stub,TA_taArray_double__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_double__Find_stub,TA_taArray_double__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__RemoveEl_stub,TA_taArray_double__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_double__InitVals_stub,TA_taArray_double__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_double_Array_MemberDef[]={
  {&TA_double,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&double_Array::blank),0},
  NULL};
static EnumDef_data TA_taArray_taString__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int taArray<taString>::* TA_taArray_taString__MbrOff;
static MemberDef_data TA_taArray_taString__MemberDef[]={
  {NULL,"::taString_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_taString__MbrOff=(int taArray<taString>::*)(&taArray<taString>::el))),0,NULL,0},
  {&TA_taString,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_taString__MbrOff=(int taArray<taString>::*)(&taArray<taString>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_taString__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_taString__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_taString__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Add_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__AddUnique_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Push_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Insert_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_taString__Find_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_taString__RemoveEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__InitVals_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_taString__MethodDef[]={
  {NULL,"::const_taString_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__SafeEl_stub,TA_taArray_taString__SafeEl_MethArgs},
  {NULL,"::taString_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__FastEl_stub,TA_taArray_taString__FastEl_MethArgs},
  {NULL,"::const_taString_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__RevEl_stub,TA_taArray_taString__RevEl_MethArgs},
  {NULL,"::const_taString","Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_taString__Pop_stub,NULL},
  {NULL,"::const_taString_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_taString__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_taString__Set_stub,TA_taArray_taString__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__Add_stub,TA_taArray_taString__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__AddUnique_stub,TA_taArray_taString__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__Push_stub,TA_taArray_taString__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_taString__Insert_stub,TA_taArray_taString__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_taString__Find_stub,TA_taArray_taString__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__RemoveEl_stub,TA_taArray_taString__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_taString__InitVals_stub,TA_taArray_taString__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_String_Array_MemberDef[]={
  {&TA_taString,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&String_Array::blank),0},
  NULL};
static int SArg_Array::* TA_SArg_Array_MbrOff;
static MemberDef_data TA_SArg_Array_MemberDef[]={
  {&TA_String_Array,NULL,"labels"," labels for each argument","","",
    *((ta_memb_ptr*)&(TA_SArg_Array_MbrOff=(int SArg_Array::*)(&SArg_Array::labels))),0,NULL,0},
  NULL};
static EnumDef_data TA_taArray_long__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int taArray<long>::* TA_taArray_long__MbrOff;
static MemberDef_data TA_taArray_long__MemberDef[]={
  {NULL,"::long_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_long__MbrOff=(int taArray<long>::*)(&taArray<long>::el))),0,NULL,0},
  {&TA_long,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_long__MbrOff=(int taArray<long>::*)(&taArray<long>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_long__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_long__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_long__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_long__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__Add_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__AddUnique_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__Push_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__Insert_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_long__Find_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_long__RemoveEl_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__InitVals_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_long__MethodDef[]={
  {NULL,"::const_long_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__SafeEl_stub,TA_taArray_long__SafeEl_MethArgs},
  {NULL,"::long_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__FastEl_stub,TA_taArray_long__FastEl_MethArgs},
  {NULL,"::const_long_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__RevEl_stub,TA_taArray_long__RevEl_MethArgs},
  {NULL,"::const_long","Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_long__Pop_stub,NULL},
  {NULL,"::const_long_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_long__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_long__Set_stub,TA_taArray_long__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__Add_stub,TA_taArray_long__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__AddUnique_stub,TA_taArray_long__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__Push_stub,TA_taArray_long__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_long__Insert_stub,TA_taArray_long__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_long__Find_stub,TA_taArray_long__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__RemoveEl_stub,TA_taArray_long__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_long__InitVals_stub,TA_taArray_long__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_long_Array_MemberDef[]={
  {&TA_long,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&long_Array::blank),0},
  NULL};
static MethodArgs_data TA_long_Array_FillSeq_MethArgs[]={
  {&TA_long,NULL,"start","0"},
  {&TA_long,NULL,"inc","1"},
  NULL};
static MethodDef_data TA_long_Array_MethodDef[]={
  {&TA_void,NULL,"FillSeq"," fill array with sequential values starting at start, incrementing by inc","","",
    0,2,0,0,NULL,cssElCFun_long_Array_FillSeq_stub,TA_long_Array_FillSeq_MethArgs},
  NULL};
static EnumDef_data TA_taArray_voidptr__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int taArray<void*>::* TA_taArray_voidptr__MbrOff;
static MemberDef_data TA_taArray_voidptr__MemberDef[]={
  {NULL,"::voidptr_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_voidptr__MbrOff=(int taArray<void*>::*)(&taArray<void*>::el))),0,NULL,0},
  {&TA_voidptr,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_voidptr__MbrOff=(int taArray<void*>::*)(&taArray<void*>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_voidptr__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Add_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__AddUnique_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Push_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Insert_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Find_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_voidptr__RemoveEl_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__InitVals_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_voidptr__MethodDef[]={
  {NULL,"::const_voidptr_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_voidptr__SafeEl_stub,TA_taArray_voidptr__SafeEl_MethArgs},
  {NULL,"::voidptr_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_voidptr__FastEl_stub,TA_taArray_voidptr__FastEl_MethArgs},
  {NULL,"::const_voidptr_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_voidptr__RevEl_stub,TA_taArray_voidptr__RevEl_MethArgs},
  {NULL,"::const_voidptr","Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_voidptr__Pop_stub,NULL},
  {NULL,"::const_voidptr_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_voidptr__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_voidptr__Set_stub,TA_taArray_voidptr__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_voidptr__Add_stub,TA_taArray_voidptr__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_voidptr__AddUnique_stub,TA_taArray_voidptr__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_voidptr__Push_stub,TA_taArray_voidptr__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_voidptr__Insert_stub,TA_taArray_voidptr__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_voidptr__Find_stub,TA_taArray_voidptr__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_voidptr__RemoveEl_stub,TA_taArray_voidptr__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_voidptr__InitVals_stub,TA_taArray_voidptr__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_voidptr_Array_MemberDef[]={
  {&TA_voidptr,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&voidptr_Array::blank),0},
  NULL};
static int taMatrix_impl::* TA_taMatrix_impl_MbrOff;
static MemberDef_data TA_taMatrix_impl_MemberDef[]={
  {&TA_int,NULL,"size"," number of elements in the ","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taMatrix_impl_MbrOff=(int taMatrix_impl::*)(&taMatrix_impl::size))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taMatrix_impl_geom_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_taMatrix_impl_setGeom_MethArgs[]={
  {&TA_int,NULL,"d0",""},
  {&TA_int,NULL,"d1",""},
  {&TA_int,NULL,"d2",""},
  {&TA_int,NULL,"d3",""},
  NULL};
static MethodArgs_data TA_taMatrix_impl_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taMatrix_impl_SafeEl__MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taMatrix_impl_FastEl__MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodDef_data TA_taMatrix_impl_MethodDef[]={
  {&TA_int,NULL,"dims","","","",
    0,0,-1,0,NULL,cssElCFun_taMatrix_impl_dims_stub,NULL},
  {&TA_int,NULL,"geom"," note: dim must be in range","","",
    0,1,-1,0,NULL,cssElCFun_taMatrix_impl_geom_stub,TA_taMatrix_impl_geom_MethArgs},
  {&TA_void,NULL,"setGeom"," sets geom, doing sanity checks and allocating storage if geom[0]!=0","","",
    4,4,-1,0,NULL,cssElCFun_taMatrix_impl_setGeom_stub,TA_taMatrix_impl_setGeom_MethArgs},
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,NULL,cssElCFun_taMatrix_impl_InRange_stub,TA_taMatrix_impl_InRange_MethArgs},
  {&TA_TypeDef_ptr,NULL,"GetTypeDef"," ","","",
    0,0,-1,0,NULL,cssElCFun_taMatrix_impl_GetTypeDef_stub,NULL},
  {&TA_void,NULL,"Ref","","","",
    0,0,-1,0,NULL,cssElCFun_taMatrix_impl_Ref_stub,NULL},
  {&TA_void,NULL,"Unref"," ","","",
    0,0,-1,0,NULL,cssElCFun_taMatrix_impl_Unref_stub,NULL},
  {&TA_const_void_ptr,NULL,"SafeEl_","","","",
    0,1,-1,0,NULL,cssElCFun_taMatrix_impl_SafeEl__stub,TA_taMatrix_impl_SafeEl__MethArgs},
  {&TA_void_ptr,NULL,"FastEl_","","","",
    0,1,-1,0,NULL,cssElCFun_taMatrix_impl_FastEl__stub,TA_taMatrix_impl_FastEl__MethArgs},
  NULL};
static int taMatrix<byte>::* TA_taMatrix_byte__MbrOff;
static MemberDef_data TA_taMatrix_byte__MemberDef[]={
  {NULL,"::byte_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taMatrix_byte__MbrOff=(int taMatrix<byte>::*)(&taMatrix<byte>::el))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taMatrix_byte__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taMatrix_byte__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {&TA_int,NULL,"j",""},
  {&TA_int,NULL,"k",""},
  {&TA_int,NULL,"l",""},
  NULL};
static MethodDef_data TA_taMatrix_byte__MethodDef[]={
  {NULL,"::const_byte_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,NULL,cssElCFun_taMatrix_byte__SafeEl_stub,TA_taMatrix_byte__SafeEl_MethArgs},
  {NULL,"::byte_ref","FastEl","","","",
    3,4,-1,0,NULL,cssElCFun_taMatrix_byte__FastEl_stub,TA_taMatrix_byte__FastEl_MethArgs},
  NULL};
static MemberDef_data TA_byte_Matrix_MemberDef[]={
  {&TA_byte,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&byte_Matrix::blank),0},
  NULL};
static MethodArgs_data TA_byte_Matrix_StatTypeDef_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodDef_data TA_byte_Matrix_MethodDef[]={
  {&TA_TypeDef_ptr,NULL,"data_type","","","",
    0,0,-1,0,NULL,cssElCFun_byte_Matrix_data_type_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"StatTypeDef","","","",
    0,1,-1,1,(ta_void_fun)(byte_Matrix::StatTypeDef),cssElCFun_byte_Matrix_StatTypeDef_stub,TA_byte_Matrix_StatTypeDef_MethArgs},
  NULL};
static int taMatrix<float>::* TA_taMatrix_float__MbrOff;
static MemberDef_data TA_taMatrix_float__MemberDef[]={
  {NULL,"::float_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taMatrix_float__MbrOff=(int taMatrix<float>::*)(&taMatrix<float>::el))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taMatrix_float__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taMatrix_float__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {&TA_int,NULL,"j",""},
  {&TA_int,NULL,"k",""},
  {&TA_int,NULL,"l",""},
  NULL};
static MethodDef_data TA_taMatrix_float__MethodDef[]={
  {NULL,"::const_float_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,NULL,cssElCFun_taMatrix_float__SafeEl_stub,TA_taMatrix_float__SafeEl_MethArgs},
  {NULL,"::float_ref","FastEl","","","",
    3,4,-1,0,NULL,cssElCFun_taMatrix_float__FastEl_stub,TA_taMatrix_float__FastEl_MethArgs},
  NULL};
static MemberDef_data TA_float_Matrix_MemberDef[]={
  {&TA_float,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&float_Matrix::blank),0},
  NULL};
static MethodArgs_data TA_float_Matrix_StatTypeDef_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodDef_data TA_float_Matrix_MethodDef[]={
  {&TA_TypeDef_ptr,NULL,"data_type","","","",
    0,0,-1,0,NULL,cssElCFun_float_Matrix_data_type_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"StatTypeDef","","","",
    0,1,-1,1,(ta_void_fun)(float_Matrix::StatTypeDef),cssElCFun_float_Matrix_StatTypeDef_stub,TA_float_Matrix_StatTypeDef_MethArgs},
  NULL};
static int taGroup_impl::* TA_taGroup_impl_MbrOff;
static MemberDef_data TA_taGroup_impl_MemberDef[]={
  {&TA_int,NULL,"leaves"," total number of leaves","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::leaves))),0,NULL,0},
  {&TA_taSubGroup,NULL,"gp"," sub-groups within this one","HIDDEN NO_FIND NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::gp))),0,NULL,0},
  {&TA_TAGPtr,NULL,"super_gp"," super-group above this","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::super_gp))),0,NULL,0},
  {&TA_TALOG_ptr,NULL,"leaf_gp"," 'flat' list of leaf-containing-gps","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::leaf_gp))),0,NULL,0},
  {&TA_TAGPtr,NULL,"root_gp"," the root group, 'this' for root group itself; never NULL","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::root_gp))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taGroup_impl_Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Duplicate_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Borrow_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Copy_Common_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_EnforceSameStru_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveLeaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveLeafEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveGp_MethArgs[]={
  {&TA_TAGPtr,NULL,"group",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_EnforceLeaves_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_FindLeaf_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_FindLeafEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodDef_data TA_taGroup_impl_MethodDef[]={
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove object at given index on list","","",
    10,1,-1,0,NULL,cssElCFun_taGroup_impl_Remove_stub,TA_taGroup_impl_Remove_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Duplicate_stub,TA_taGroup_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_DupeUniqNameNew_stub,TA_taGroup_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_DupeUniqNameOld_stub,TA_taGroup_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Borrow_stub,TA_taGroup_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_BorrowUnique_stub,TA_taGroup_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_BorrowUniqNameNew_stub,TA_taGroup_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_BorrowUniqNameOld_stub,TA_taGroup_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Copy_Common_stub,TA_taGroup_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Copy_Duplicate_stub,TA_taGroup_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Copy_Borrow_stub,TA_taGroup_impl_Copy_Borrow_MethArgs},
  {&TA_void,NULL,"EnforceSameStru"," make the two lists identical in terms of size and types of objects","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_EnforceSameStru_stub,TA_taGroup_impl_EnforceSameStru_MethArgs},
  {&TA_void,NULL,"InitLeafGp"," Initialize the leaf group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_impl_InitLeafGp_stub,NULL},
  {&TA_bool,NULL,"RemoveLeaf"," remove given leaf element Remove leaf element at leaf index","","",
    2,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveLeaf_stub,TA_taGroup_impl_RemoveLeaf_MethArgs},
  {&TA_bool,NULL,"RemoveLeafName"," remove given named leaf element","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveLeafName_stub,TA_taGroup_impl_RemoveLeafName_MethArgs},
  {&TA_bool,NULL,"RemoveLeafEl"," Remove given leaf element","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveLeafEl_stub,TA_taGroup_impl_RemoveLeafEl_MethArgs},
  {&TA_bool,NULL,"RemoveGp"," remove group at given index remove given group","MENU FROM_GROUP_gp MENU_ON_Edit UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveGp_stub,TA_taGroup_impl_RemoveGp_MethArgs},
  {&TA_TALOG_ptr,NULL,"EditSubGps"," edit the list of sub-groups (e.g., so you can move around subgroups)","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_taGroup_impl_EditSubGps_stub,NULL},
  {&TA_void,NULL,"EnforceLeaves"," ensure that sz leaves exits by adding new ones to top group and removing old ones from end","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_EnforceLeaves_stub,TA_taGroup_impl_EnforceLeaves_MethArgs},
  {&TA_int,NULL,"FindLeaf"," find given leaf element (-1 = not here) find named leaf element","","",
    2,1,-1,0,NULL,cssElCFun_taGroup_impl_FindLeaf_stub,TA_taGroup_impl_FindLeaf_MethArgs},
  {&TA_int,NULL,"FindLeafEl"," find given leaf element -1 = not here.","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_FindLeafEl_stub,TA_taGroup_impl_FindLeafEl_MethArgs},
  NULL};
static EnumDef_data TA_taList_taGroup_impl__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__MoveBefore_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","trg",""},
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__MoveAfter_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","trg",""},
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__Edit_El_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__AddUniqNameOld_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_taGroup_impl__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taGroup_impl__MoveBefore_stub,TA_taList_taGroup_impl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taGroup_impl__MoveAfter_stub,TA_taList_taGroup_impl__MoveAfter_MethArgs},
  {NULL,"::taGroup_impl_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__SafeEl_stub,TA_taList_taGroup_impl__SafeEl_MethArgs},
  {NULL,"::taGroup_impl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__FastEl_stub,TA_taList_taGroup_impl__FastEl_MethArgs},
  {NULL,"::taGroup_impl_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_taGroup_impl__DefaultEl_stub,NULL},
  {NULL,"::taGroup_impl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__Edit_El_stub,TA_taList_taGroup_impl__Edit_El_MethArgs},
  {NULL,"::taGroup_impl_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_taGroup_impl__FindName_stub,TA_taList_taGroup_impl__FindName_MethArgs},
  {NULL,"::taGroup_impl_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_taGroup_impl__FindType_stub,TA_taList_taGroup_impl__FindType_MethArgs},
  {NULL,"::taGroup_impl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taGroup_impl__Pop_stub,NULL},
  {NULL,"::taGroup_impl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taGroup_impl__Peek_stub,NULL},
  {NULL,"::taGroup_impl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__AddUniqNameOld_stub,TA_taList_taGroup_impl__AddUniqNameOld_MethArgs},
  {NULL,"::taGroup_impl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__LinkUniqNameOld_stub,TA_taList_taGroup_impl__LinkUniqNameOld_MethArgs},
  NULL};
static MethodArgs_data TA_taSubGroup_Transfer_MethArgs[]={
  {&TA_taBase_ptr,NULL,"item",""},
  NULL};
static MethodDef_data TA_taSubGroup_MethodDef[]={
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_taSubGroup_Transfer_stub,TA_taSubGroup_Transfer_MethArgs},
  NULL};
static int taLeafItr::* TA_taLeafItr_MbrOff;
static MemberDef_data TA_taLeafItr_MemberDef[]={
  {&TA_TAGPtr,NULL,"cgp"," pointer to current group","","",
    *((ta_memb_ptr*)&(TA_taLeafItr_MbrOff=(int taLeafItr::*)(&taLeafItr::cgp))),0,NULL,0},
  {&TA_int,NULL,"g"," index of current group","","",
    *((ta_memb_ptr*)&(TA_taLeafItr_MbrOff=(int taLeafItr::*)(&taLeafItr::g))),0,NULL,0},
  {&TA_int,NULL,"i"," index of current leaf element","","",
    *((ta_memb_ptr*)&(TA_taLeafItr_MbrOff=(int taLeafItr::*)(&taLeafItr::i))),0,NULL,0},
  NULL};
static EnumDef_data TA_taGroup_taBase__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__Edit_El_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_taBase__MethodDef[]={
  {NULL,"::taBase_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_taBase__FirstEl_stub,TA_taGroup_taBase__FirstEl_MethArgs},
  {NULL,"::taBase_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_taBase__NextEl_stub,TA_taGroup_taBase__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_taBase__MoveBefore_stub,TA_taGroup_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_taBase__MoveAfter_stub,TA_taGroup_taBase__MoveAfter_MethArgs},
  {NULL,"::taBase_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__SafeEl_stub,TA_taGroup_taBase__SafeEl_MethArgs},
  {NULL,"::taBase_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__FastEl_stub,TA_taGroup_taBase__FastEl_MethArgs},
  {NULL,"::taBase_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_taBase__DefaultEl_stub,NULL},
  {NULL,"::taBase_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__Edit_El_stub,TA_taGroup_taBase__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__SafeGp_stub,TA_taGroup_taBase__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__FastGp_stub,TA_taGroup_taBase__FastGp_MethArgs},
  {NULL,"::taBase_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__Leaf_stub,TA_taGroup_taBase__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__LeafGp_stub,TA_taGroup_taBase__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_taBase__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__FirstGp_stub,TA_taGroup_taBase__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__NextGp_stub,TA_taGroup_taBase__NextGp_MethArgs},
  {NULL,"::taBase_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_taBase__NewEl_stub,TA_taGroup_taBase__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_taBase__NewGp_stub,TA_taGroup_taBase__NewGp_MethArgs},
  {NULL,"::taBase_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindName_stub,TA_taGroup_taBase__FindName_MethArgs},
  {NULL,"::taBase_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindType_stub,TA_taGroup_taBase__FindType_MethArgs},
  {NULL,"::taBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_taBase__Pop_stub,NULL},
  {NULL,"::taBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_taBase__Peek_stub,NULL},
  {NULL,"::taBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__AddUniqNameOld_stub,TA_taGroup_taBase__AddUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__LinkUniqNameOld_stub,TA_taGroup_taBase__LinkUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindLeafName_stub,TA_taGroup_taBase__FindLeafName_MethArgs},
  {NULL,"::taBase_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindLeafType_stub,TA_taGroup_taBase__FindLeafType_MethArgs},
  NULL};
static int NameValue::* TA_NameValue_MbrOff;
static MemberDef_data TA_NameValue_MemberDef[]={
  {&TA_taString,NULL,"value"," Value for name","","",
    *((ta_memb_ptr*)&(TA_NameValue_MbrOff=(int NameValue::*)(&NameValue::value))),0,NULL,0},
  NULL};
static int TypeDefault::* TA_TypeDefault_MbrOff;
static MemberDef_data TA_TypeDefault_MemberDef[]={
  {&TA_TypeDef_ptr,NULL,"old_type"," has previous type (if default_type changes)","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::old_type))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"default_type"," type of the default","TYPE_taBase ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::default_type))),0,NULL,0},
  {&TA_TAPtr,NULL,"token"," token which has default values","DEFAULT_EDIT NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::token))),0,NULL,0},
  {&TA_taBase_List,NULL,"active_membs"," MemberName / MemberValue pairs","","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::active_membs))),0,NULL,0},
  {&TA_unsigned_long_ary,NULL,"active"," bits representing a memberdefs activity in a default","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::active))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TypeDefault_SetActive_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  {&TA_bool,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_TypeDefault_GetActive_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  NULL};
static MethodDef_data TA_TypeDefault_MethodDef[]={
  {&TA_void,NULL,"SetActive"," set active bit set active flag for member","","",
    1,2,-1,0,NULL,cssElCFun_TypeDefault_SetActive_stub,TA_TypeDefault_SetActive_MethArgs},
  {&TA_bool,NULL,"GetActive"," check active bit check active flag for member","","",
    1,1,-1,0,NULL,cssElCFun_TypeDefault_GetActive_stub,TA_TypeDefault_GetActive_MethArgs},
  {&TA_void,NULL,"UpdateToNameValue"," set the name value data from token","","",
    0,0,-1,0,NULL,cssElCFun_TypeDefault_UpdateToNameValue_stub,NULL},
  {&TA_void,NULL,"UpdateFromNameValue"," set the token form the name values","","",
    0,0,-1,0,NULL,cssElCFun_TypeDefault_UpdateFromNameValue_stub,NULL},
  NULL};
static int ScriptBase::* TA_ScriptBase_MbrOff;
static MemberDef_data TA_ScriptBase_MemberDef[]={
  {&TA_cssProgSpace_ptr,NULL,"script"," the script, if defined","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ScriptBase_MbrOff=(int ScriptBase::*)(&ScriptBase::script))),0,NULL,0},
  {&TA_taFiler_ptr,NULL,"script_file"," file to use for the script","","",
    *((ta_memb_ptr*)&(TA_ScriptBase_MbrOff=(int ScriptBase::*)(&ScriptBase::script_file))),0,NULL,0},
  {&TA_taString,NULL,"script_string"," script code to be run, instead of loading from file","","",
    *((ta_memb_ptr*)&(TA_ScriptBase_MbrOff=(int ScriptBase::*)(&ScriptBase::script_string))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ScriptBase_SetScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm",""},
  NULL};
static MethodArgs_data TA_ScriptBase_LoadScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptBase_LoadScriptString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string"," ((void *)0)"},
  NULL};
static MethodDef_data TA_ScriptBase_MethodDef[]={
  {&TA_bool,NULL,"HasScript"," returns true if we have some kind of script file or string to run","","",
    0,0,-1,0,NULL,cssElCFun_ScriptBase_HasScript_stub,NULL},
  {&TA_bool,NULL,"RunScript"," run the script (returns false for no scr)","","",
    0,0,-1,0,NULL,cssElCFun_ScriptBase_RunScript_stub,NULL},
  {&TA_void,NULL,"SetScript"," set the script file (e.g. from the script)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptBase_SetScript_stub,TA_ScriptBase_SetScript_MethArgs},
  {&TA_void,NULL,"LoadScript"," compile script from script file into internal runnable format","MENU LABEL_Compile MENU_ON_Actions ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_ScriptBase_LoadScript_stub,TA_ScriptBase_LoadScript_MethArgs},
  {&TA_void,NULL,"LoadScriptString"," load and recompile the script string","","",
    0,1,0,0,NULL,cssElCFun_ScriptBase_LoadScriptString_stub,TA_ScriptBase_LoadScriptString_MethArgs},
  {&TA_void,NULL,"InteractScript"," change to this shell in script (terminal) window to interact, debug etc script","MENU LABEL_Interact ","",
    0,0,-1,0,NULL,cssElCFun_ScriptBase_InteractScript_stub,NULL},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Edit_El_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__FindEl_MethArgs[]={
  {NULL,"::const_ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Add_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddUnique_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddUniqNameNew_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Insert_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","old_it",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__RemoveEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__DuplicateEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Link_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__LinkUnique_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__LinkUniqNameNew_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__InsertLink_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceLinkEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","old_it",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Push_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__MoveEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","from",""},
  {NULL,"::ScriptBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Transfer_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__MoveBefore_MethArgs[]={
  {NULL,"::ScriptBase_ptr","trg",""},
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__MoveAfter_MethArgs[]={
  {NULL,"::ScriptBase_ptr","trg",""},
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_ScriptBase__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Find_stub,TA_taPtrList_ScriptBase__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Remove_stub,TA_taPtrList_ScriptBase__Remove_MethArgs},
  {NULL,"::ScriptBase_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__SafeEl_stub,TA_taPtrList_ScriptBase__SafeEl_MethArgs},
  {NULL,"::ScriptBase_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__FastEl_stub,TA_taPtrList_ScriptBase__FastEl_MethArgs},
  {NULL,"::ScriptBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Edit_El_stub,TA_taPtrList_ScriptBase__Edit_El_MethArgs},
  {NULL,"::ScriptBase_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_ScriptBase__FindName_stub,TA_taPtrList_ScriptBase__FindName_MethArgs},
  {NULL,"::ScriptBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Pop_stub,NULL},
  {NULL,"::ScriptBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Peek_stub,NULL},
  {NULL,"::ScriptBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddUniqNameOld_stub,TA_taPtrList_ScriptBase__AddUniqNameOld_MethArgs},
  {NULL,"::ScriptBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__LinkUniqNameOld_stub,TA_taPtrList_ScriptBase__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__FindEl_stub,TA_taPtrList_ScriptBase__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddEl_stub,TA_taPtrList_ScriptBase__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Add_stub,TA_taPtrList_ScriptBase__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddUnique_stub,TA_taPtrList_ScriptBase__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddUniqNameNew_stub,TA_taPtrList_ScriptBase__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Insert_stub,TA_taPtrList_ScriptBase__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Replace_stub,TA_taPtrList_ScriptBase__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceEl_stub,TA_taPtrList_ScriptBase__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceName_stub,TA_taPtrList_ScriptBase__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__RemoveEl_stub,TA_taPtrList_ScriptBase__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__DuplicateEl_stub,TA_taPtrList_ScriptBase__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Link_stub,TA_taPtrList_ScriptBase__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__LinkUnique_stub,TA_taPtrList_ScriptBase__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__LinkUniqNameNew_stub,TA_taPtrList_ScriptBase__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_ScriptBase__InsertLink_stub,TA_taPtrList_ScriptBase__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceLink_stub,TA_taPtrList_ScriptBase__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceLinkEl_stub,TA_taPtrList_ScriptBase__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceLinkName_stub,TA_taPtrList_ScriptBase__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Push_stub,TA_taPtrList_ScriptBase__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__MoveEl_stub,TA_taPtrList_ScriptBase__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Transfer_stub,TA_taPtrList_ScriptBase__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__MoveBefore_stub,TA_taPtrList_ScriptBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__MoveAfter_stub,TA_taPtrList_ScriptBase__MoveAfter_MethArgs},
  NULL};
static int Script::* TA_Script_MbrOff;
static MemberDef_data TA_Script_MemberDef[]={
  {&TA_ScriptBase_List,NULL,"recompile_scripts"," list of scripts to be recompiled in wait proc","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&Script::recompile_scripts),0},
  {&TA_bool,NULL,"recording"," currently recording?","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Script_MbrOff=(int Script::*)(&Script::recording))),0,NULL,0},
  {&TA_bool,NULL,"auto_run"," run automatically at startup?","","",
    *((ta_memb_ptr*)&(TA_Script_MbrOff=(int Script::*)(&Script::auto_run))),0,NULL,0},
  {&TA_SArg_Array,NULL,"s_args"," string-valued arguments to pass to script","","",
    *((ta_memb_ptr*)&(TA_Script_MbrOff=(int Script::*)(&Script::s_args))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Script_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_Script_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_Script_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_Script_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_Script_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_Script_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Script_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Script_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_Script_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_Script_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_Script_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_Script_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_Script_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_Script_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_Script_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_Script_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_Script_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_Script_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_Script_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_Script_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Script_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Script_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_Script_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_Script_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_Script_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_Script_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_Script_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Script_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Script_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_Script_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_Script_SetScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm",""},
  NULL};
static MethodArgs_data TA_Script_LoadScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Script_LoadScriptString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Script_Record_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," ((void *)0)"},
  NULL};
static MethodDef_data TA_Script_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_Script_GetColText_stub,TA_Script_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_Script_ChildQueryEditActions_stub,TA_Script_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_Script_ChildEditAction_stub,TA_Script_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_Script_QueryEditActions_stub,TA_Script_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_Script_EditAction_stub,TA_Script_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_Script_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_Script_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_Script_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_Script_UnSafeCopy_stub,TA_Script_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_Script_CastCopyTo_stub,TA_Script_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_Script_GetOwner_stub,TA_Script_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_Script_GetPath_stub,TA_Script_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_Script_FindFromPath_stub,TA_Script_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_Script_New_stub,TA_Script_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_Script_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_Script_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_Script_StructUpdate_stub,TA_Script_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_Script_DataUpdate_stub,TA_Script_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_Script_AddDataView_stub,TA_Script_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_Script_RemoveDataView_stub,TA_Script_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_Script_InheritsFrom_stub,TA_Script_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_Script_GetEnumString_stub,TA_Script_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_Script_GetEnumVal_stub,TA_Script_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_Script_Load_stub,TA_Script_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_Script_Save_stub,TA_Script_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_Script_SaveAs_stub,TA_Script_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_Script_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_Script_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_Script_ReShowEdit_stub,TA_Script_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_Script_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Script_CopyFrom_stub,TA_Script_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Script_CopyTo_stub,TA_Script_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_Script_ChildUpdateAfterEdit_stub,TA_Script_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_Script_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Script_ChangeMyType_stub,TA_Script_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_Script_SelectForEdit_stub,TA_Script_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_Script_SelectFunForEdit_stub,TA_Script_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Script_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_Script_CallFun_stub,TA_Script_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_Script_SetAdapter_stub,TA_Script_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_Script_addr_data_link_stub,NULL},
  {&TA_bool,NULL,"HasScript"," returns true if we have some kind of script file or string to run","","",
    0,0,-1,0,NULL,cssElCFun_Script_HasScript_stub,NULL},
  {&TA_bool,NULL,"RunScript"," run the script (returns false for no scr)","","",
    0,0,-1,0,NULL,cssElCFun_Script_RunScript_stub,NULL},
  {&TA_void,NULL,"SetScript"," set the script file (e.g. from the script)","","",
    0,1,-1,0,NULL,cssElCFun_Script_SetScript_stub,TA_Script_SetScript_MethArgs},
  {&TA_void,NULL,"LoadScript"," compile script from script file into internal runnable format","MENU LABEL_Compile MENU_ON_Actions ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_Script_LoadScript_stub,TA_Script_LoadScript_MethArgs},
  {&TA_void,NULL,"LoadScriptString"," load and recompile the script string","","",
    0,1,0,0,NULL,cssElCFun_Script_LoadScriptString_stub,TA_Script_LoadScriptString_MethArgs},
  {&TA_void,NULL,"InteractScript"," change to this shell in script (terminal) window to interact, debug etc script","MENU LABEL_Interact ","",
    0,0,-1,0,NULL,cssElCFun_Script_InteractScript_stub,NULL},
  {&TA_bool,NULL,"Run"," run the script (returns false for no scr)","BUTTON GHOST_OFF_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_Run_stub,NULL},
  {&TA_void,NULL,"Record"," record script code for interface actions","BUTTON GHOST_OFF_recording ARGC_0 NO_SCRIPT ","",
    0,1,0,0,NULL,cssElCFun_Script_Record_stub,TA_Script_Record_MethArgs},
  {&TA_void,NULL,"StopRecording"," stop recording script code","BUTTON LABEL_StopRec GHOST_ON_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_StopRecording_stub,NULL},
  {&TA_void,NULL,"Interact"," change to this shell in script (terminal) window to interact, debug etc script","BUTTON GHOST_OFF_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_Interact_stub,NULL},
  {&TA_void,NULL,"Clear"," clear script file","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Script_Clear_stub,NULL},
  {&TA_void,NULL,"Compile"," compile script from script file into internal runnable format","BUTTON GHOST_OFF_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_Compile_stub,NULL},
  {&TA_void,NULL,"ScriptAllWinPos"," record script code to set window positions, iconified","MENU MENU_ON_Actions NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_Script_ScriptAllWinPos_stub,NULL},
  {&TA_void,NULL,"AutoRun"," run this script if auto_run is set","","",
    0,0,-1,0,NULL,cssElCFun_Script_AutoRun_stub,NULL},
  NULL};
static EnumDef_data TA_taGroup_Script__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Script__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__MoveBefore_MethArgs[]={
  {NULL,"::Script_ptr","trg",""},
  {NULL,"::Script_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__MoveAfter_MethArgs[]={
  {NULL,"::Script_ptr","trg",""},
  {NULL,"::Script_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__Edit_El_MethArgs[]={
  {NULL,"::Script_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Script__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Script__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Script__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Script__AddUniqNameOld_MethArgs[]={
  {NULL,"::Script_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Script_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Script__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Script__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Script__MethodDef[]={
  {NULL,"::Script_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Script__FirstEl_stub,TA_taGroup_Script__FirstEl_MethArgs},
  {NULL,"::Script_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Script__NextEl_stub,TA_taGroup_Script__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Script__MoveBefore_stub,TA_taGroup_Script__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Script__MoveAfter_stub,TA_taGroup_Script__MoveAfter_MethArgs},
  {NULL,"::Script_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__SafeEl_stub,TA_taGroup_Script__SafeEl_MethArgs},
  {NULL,"::Script_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__FastEl_stub,TA_taGroup_Script__FastEl_MethArgs},
  {NULL,"::Script_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Script__DefaultEl_stub,NULL},
  {NULL,"::Script_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__Edit_El_stub,TA_taGroup_Script__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__SafeGp_stub,TA_taGroup_Script__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__FastGp_stub,TA_taGroup_Script__FastGp_MethArgs},
  {NULL,"::Script_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__Leaf_stub,TA_taGroup_Script__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__LeafGp_stub,TA_taGroup_Script__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Script__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__FirstGp_stub,TA_taGroup_Script__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__NextGp_stub,TA_taGroup_Script__NextGp_MethArgs},
  {NULL,"::Script_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Script__NewEl_stub,TA_taGroup_Script__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Script__NewGp_stub,TA_taGroup_Script__NewGp_MethArgs},
  {NULL,"::Script_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Script__FindName_stub,TA_taGroup_Script__FindName_MethArgs},
  {NULL,"::Script_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Script__FindType_stub,TA_taGroup_Script__FindType_MethArgs},
  {NULL,"::Script_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Script__Pop_stub,NULL},
  {NULL,"::Script_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Script__Peek_stub,NULL},
  {NULL,"::Script_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__AddUniqNameOld_stub,TA_taGroup_Script__AddUniqNameOld_MethArgs},
  {NULL,"::Script_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Script__LinkUniqNameOld_stub,TA_taGroup_Script__LinkUniqNameOld_MethArgs},
  {NULL,"::Script_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Script__FindLeafName_stub,TA_taGroup_Script__FindLeafName_MethArgs},
  {NULL,"::Script_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Script__FindLeafType_stub,TA_taGroup_Script__FindLeafType_MethArgs},
  NULL};
static MethodArgs_data TA_Script_MGroup_Run_mc_MethArgs[]={
  {&TA_taiMenuEl_ptr,NULL,"sel",""},
  NULL};
static MethodDef_data TA_Script_MGroup_MethodDef[]={
  {&TA_void,NULL,"StopRecording","","","",
    0,0,-1,0,NULL,cssElCFun_Script_MGroup_StopRecording_stub,NULL},
  {&TA_void,NULL,"AutoRun","","","",
    0,0,-1,0,NULL,cssElCFun_Script_MGroup_AutoRun_stub,NULL},
  {&TA_void,NULL,"Run_mc"," protected:","","",
    0,1,-1,0,NULL,cssElCFun_Script_MGroup_Run_mc_stub,TA_Script_MGroup_Run_mc_MethArgs},
  NULL};
static EnumDef_data TA_taiMisc_SizeSpec[]={
  {"defSize"," medium","",0},
  {"sizSmall","","",1},
  {"sizMedium","","",2},
  {"sizBig"," mask","",3},
  {"siz_mask","","",0},
  {"F","","",1},
  NULL};
static EnumDef_data TA_taiMisc_FontSpec[]={
  {"defFontSize"," medium, or inherit from parent (as applicable)","",0},
  {"fonSmall","","",1},
  {"fonMedium","","",2},
  {"fonBig"," choose up to 1:","",3},
  {"def_stretch"," default (not stretched)","",0},
  {"fonSkinny","","",16},
  {"fonWide"," choose any:","",48},
  {"fonItalic","","",256},
  {"fonBold","","",512},
  {"fonUnderline"," pre-baked combinations (some for legacy compatibility)","",768},
  {"fonBig_italic","","",259},
  {"fonSkinny_small"," masks","",17},
  {"fonSize_mask","","",0},
  {"F","","",1},
  {"fonStretch_mask","","",0},
  {"F0","","",1},
  NULL};
static EnumDef_data TA_taiMisc_DialogSpec[]={
  {"defDialogSize"," default is medium","",0},
  {"dlgSmall","","",1},
  {"dlgMedium","","",2},
  {"dlgBig"," choose 1:","",3},
  {"dlgHor"," the default -- Hor == ~Ver","",0},
  {"dlgVer"," prebaked:","",16},
  {"hdlg"," default h dialog","",0},
  {"vdlg"," default v dialog","",16},
  {"hdlg_s","","",1},
  {"vdlg_s","","",17},
  {"hdlg_m","","",2},
  {"vdlg_m","","",18},
  {"hdlg_b","","",3},
  {"vdlg_b"," masks","",19},
  {"dlgSize_mask","","",0},
  {"F","","",1},
  {"dlgOrient_mask","","",16},
  NULL};
static MemberDef_data TA_taiMisc_MemberDef[]={
  {&TA_bool,NULL,"gui_active"," 'true' when we have a gui (mainwindow), false if not (ex. after main win closes)","READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&taiMisc::gui_active),0},
  {&TA_int,NULL,"busy_count"," levels of busy","","",
    (ta_memb_ptr)NULL,1,(void*)(&taiMisc::busy_count),0},
  {&TA_TypeSpace,NULL,"arg_types"," list of all taiArgTypes","","",
    (ta_memb_ptr)NULL,1,(void*)(&taiMisc::arg_types),0},
  {&TA_QWidget_ptr,NULL,"main_window"," the main window","","",
    (ta_memb_ptr)NULL,1,(void*)(&taiMisc::main_window),0},
  {&TA_taBase_PtrList,NULL,"unopened_windows"," unopened windows waiting to be opened","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&taiMisc::unopened_windows),0},
  NULL};
static MethodArgs_data TA_taiMisc_ScriptIconify_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_int,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_taiMisc_SetIconify_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_int,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_taiMisc_RevertEdits_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taiMisc_CloseEdits_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taiMisc_NotifyEdits_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taiMisc_ReShowEdits_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool,NULL,"force"," true"},
  NULL};
static MethodArgs_data TA_taiMisc_FindEdit_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_iDataViewer_ptr,NULL,"not_in_win"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_taiMisc_AdjustFont_MethArgs[]={
  {&TA_int,NULL,"fontSpec",""},
  {&TA_iFont_ref,NULL,"font",""},
  NULL};
static MethodDef_data TA_taiMisc_MethodDef[]={
  {&TA_void,NULL,"OpenWindows"," open all unopened windows","","",
    0,0,-1,1,(ta_void_fun)(taiMisc::OpenWindows),cssElCFun_taiMisc_OpenWindows_stub,NULL},
  {&TA_int,NULL,"WaitProc"," waiting process function","","",
    0,0,-1,1,(ta_void_fun)(taiMisc::WaitProc),cssElCFun_taiMisc_WaitProc_stub,NULL},
  {&TA_void,NULL,"ScriptIconify"," record iconify command for obj to script","","",
    0,2,-1,1,(ta_void_fun)(taiMisc::ScriptIconify),cssElCFun_taiMisc_ScriptIconify_stub,TA_taiMisc_ScriptIconify_MethArgs},
  {&TA_int,NULL,"SetIconify"," set iconified field of winbase obj to onoff","","",
    0,2,-1,1,(ta_void_fun)(taiMisc::SetIconify),cssElCFun_taiMisc_SetIconify_stub,TA_taiMisc_SetIconify_MethArgs},
  {&TA_int,NULL,"RunPending"," run any pending qt events that might need processed","","",
    0,0,-1,1,(ta_void_fun)(taiMisc::RunPending),cssElCFun_taiMisc_RunPending_stub,NULL},
  {&TA_void,NULL,"PurgeDialogs"," remove any 'NoBlock' dialogs from active list (& delete them)","","",
    0,0,-1,1,(ta_void_fun)(taiMisc::PurgeDialogs),cssElCFun_taiMisc_PurgeDialogs_stub,NULL},
  {&TA_bool,NULL,"RevertEdits"," revert any open edit dialogs for given object","","",
    0,2,-1,1,(ta_void_fun)(taiMisc::RevertEdits),cssElCFun_taiMisc_RevertEdits_stub,TA_taiMisc_RevertEdits_MethArgs},
  {&TA_bool,NULL,"CloseEdits"," close any open edit dialogs for object or sub-objs","","",
    0,2,-1,1,(ta_void_fun)(taiMisc::CloseEdits),cssElCFun_taiMisc_CloseEdits_stub,TA_taiMisc_CloseEdits_MethArgs},
  {&TA_bool,NULL,"NotifyEdits"," notifies any open edit dialogs for given object that a change in its data has occured","","",
    0,2,-1,1,(ta_void_fun)(taiMisc::NotifyEdits),cssElCFun_taiMisc_NotifyEdits_stub,TA_taiMisc_NotifyEdits_MethArgs},
  {&TA_bool,NULL,"ReShowEdits"," rebuilds any open edit dialogs for object; if force=true, doesn't prompt user if changes, just does it","","",
    0,3,2,1,(ta_void_fun)(taiMisc::ReShowEdits),cssElCFun_taiMisc_ReShowEdits_stub,TA_taiMisc_ReShowEdits_MethArgs},
  {&TA_taiEditDataHost_ptr,NULL,"FindEdit"," find first active edit dialog or panel for this object; for panels, if not_in_win specified, then must be active in a tab (not buried) in some win other than specified","","",
    0,3,2,1,(ta_void_fun)(taiMisc::FindEdit),cssElCFun_taiMisc_FindEdit_stub,TA_taiMisc_FindEdit_MethArgs},
  {&TA_void,NULL,"InitMetrics"," initializes all the sizes/fonts/etc. -- QApplication object must be created","","",
    0,0,-1,0,NULL,cssElCFun_taiMisc_InitMetrics_stub,NULL},
  {&TA_void,NULL,"AdjustFont"," sets the font according to the spec parameter","","",
    0,2,-1,0,NULL,cssElCFun_taiMisc_AdjustFont_stub,TA_taiMisc_AdjustFont_MethArgs},
  NULL};
static int taiAction::* TA_taiAction_MbrOff;
static MemberDef_data TA_taiAction_MemberDef[]={
  {&TA_QObject_ptr,NULL,"receiver","","","",
    *((ta_memb_ptr*)&(TA_taiAction_MbrOff=(int taiAction::*)(&taiAction::receiver))),0,NULL,0},
  {&TA_taString,NULL,"member","","","",
    *((ta_memb_ptr*)&(TA_taiAction_MbrOff=(int taiAction::*)(&taiAction::member))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taiAction_connect_MethArgs[]={
  {&TA_QObject_ptr,NULL,"sender",""},
  {&TA_const_char_ptr,NULL,"signal",""},
  NULL};
static MethodDef_data TA_taiAction_MethodDef[]={
  {&TA_void,NULL,"connect","","","",
    0,2,-1,0,NULL,cssElCFun_taiAction_connect_stub,TA_taiAction_connect_MethArgs},
  NULL};
static int HiLightButton::* TA_HiLightButton_MbrOff;
static MemberDef_data TA_HiLightButton_MemberDef[]={
  {&TA_int,NULL,"mouse_button"," (Qt::Button) the mouse button that pressed the button (defaults to NoButton, when actuated by keyboard)","","",
    *((ta_memb_ptr*)&(TA_HiLightButton_MbrOff=(int HiLightButton::*)(&HiLightButton::mouse_button))),0,NULL,0},
  NULL};
static MethodArgs_data TA_HiLightButton_setHiLight_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodDef_data TA_HiLightButton_MethodDef[]={
  {&TA_bool,NULL,"hiLight"," ","GET_HiLight ","",
    0,0,-1,0,NULL,cssElCFun_HiLightButton_hiLight_stub,NULL},
  {&TA_void,NULL,"setHiLight"," ","SET_HiLight ","",
    0,1,-1,0,NULL,cssElCFun_HiLightButton_setHiLight_stub,TA_HiLightButton_setHiLight_MethArgs},
  NULL};
static MethodDef_data TA_iContextLabel_MethodDef[]={
  {&TA_int,NULL,"index","","","",
    0,0,-1,0,NULL,cssElCFun_iContextLabel_index_stub,NULL},
  NULL};
static int taiChoiceDialog::* TA_taiChoiceDialog_MbrOff;
static MemberDef_data TA_taiChoiceDialog_MemberDef[]={
  {&TA_bool,NULL,"no_cancel","","","",
    *((ta_memb_ptr*)&(TA_taiChoiceDialog_MbrOff=(int taiChoiceDialog::*)(&taiChoiceDialog::no_cancel))),0,NULL,0},
  {&TA_QVBoxLayout_ptr,NULL,"vblMain","","","",
    *((ta_memb_ptr*)&(TA_taiChoiceDialog_MbrOff=(int taiChoiceDialog::*)(&taiChoiceDialog::vblMain))),0,NULL,0},
  {&TA_QHBoxLayout_ptr,NULL,"hblButtons","","","",
    *((ta_memb_ptr*)&(TA_taiChoiceDialog_MbrOff=(int taiChoiceDialog::*)(&taiChoiceDialog::hblButtons))),0,NULL,0},
  {&TA_QLabel_ptr,NULL,"txtMessage"," maybe should be a ro edit, so user can copy???","","",
    *((ta_memb_ptr*)&(TA_taiChoiceDialog_MbrOff=(int taiChoiceDialog::*)(&taiChoiceDialog::txtMessage))),0,NULL,0},
  {&TA_QButtonGroup_ptr,NULL,"bgChoiceButtons","","","",
    *((ta_memb_ptr*)&(TA_taiChoiceDialog_MbrOff=(int taiChoiceDialog::*)(&taiChoiceDialog::bgChoiceButtons))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taiChoiceDialog_ChoiceDialog_MethArgs[]={
  {&TA_QWidget_ptr,NULL,"win",""},
  {&TA_const_char_ptr,NULL,"prompt",""},
  {&TA_const_char_ptr,NULL,"win_title",""},
  {&TA_bool,NULL,"no_cancel_"," false"},
  NULL};
static MethodArgs_data TA_taiChoiceDialog_ErrorDialog_MethArgs[]={
  {&TA_QWidget_ptr,NULL,"parent_",""},
  {&TA_const_char_ptr,NULL,"msg",""},
  {&TA_const_char_ptr,NULL,"win_title"," Error"},
  NULL};
static MethodDef_data TA_taiChoiceDialog_MethodDef[]={
  {&TA_int,NULL,"ChoiceDialog","","","",
    0,4,1,1,(ta_void_fun)(taiChoiceDialog::ChoiceDialog),cssElCFun_taiChoiceDialog_ChoiceDialog_stub,TA_taiChoiceDialog_ChoiceDialog_MethArgs},
  {&TA_void,NULL,"ErrorDialog","","","",
    0,3,2,1,(ta_void_fun)(taiChoiceDialog::ErrorDialog),cssElCFun_taiChoiceDialog_ErrorDialog_stub,TA_taiChoiceDialog_ErrorDialog_MethArgs},
  NULL};
static MethodArgs_data TA_taiMimeItem_New_MethArgs[]={
  {&TA_taBase_ptr,NULL,"obj",""},
  NULL};
static MethodDef_data TA_taiMimeItem_MethodDef[]={
  {&TA_taiMimeItem_ptr,NULL,"New"," used for creating descs of taBase objects","","",
    0,1,-1,1,(ta_void_fun)(taiMimeItem::New),cssElCFun_taiMimeItem_New_stub,TA_taiMimeItem_New_MethArgs},
  {&TA_void_ptr,NULL,"obj"," object associated with desc -- only set if InProcess","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeItem_obj_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"td"," the TypeDef associated with type_name, or NULL if not in our type list or not tacss","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeItem_td_stub,NULL},
  {&TA_taString,NULL,"type_name"," empty if not a tacss mime type","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeItem_type_name_stub,NULL},
  {&TA_bool,NULL,"is_tab"," true if the object is derived from taBase","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeItem_is_tab_stub,NULL},
  {&TA_taString,NULL,"path"," if a taBase object, its full path; if not taBase, or not tacss, then NULL;","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeItem_path_stub,NULL},
  {&TA_void,NULL,"obj_destroyed"," datalinks will connect to this so our obj doesn't become invalid","","",
    0,0,-1,0,NULL,cssElCFun_taiMimeItem_obj_destroyed_stub,NULL},
  NULL};
static EnumDef_data TA_taiClipData_EditAction[]={
  {"EA_SRC_CUT"," flag indicating the source was a Clip/Cut operation","",1},
  {"EA_SRC_COPY"," flag indicating the source was a Clip/Copy operation","",2},
  {"EA_SRC_DRAG"," flag indicating the source was a Drag operation","",4},
  {"EA_SRC_MASK","","",0},
  {"F"," note: SRC_ flags could be clear if src op unknown (ex. external mime format)","",1},
  {"EA_CUT","","",16},
  {"EA_COPY","","",32},
  {"EA_PASTE","","",64},
  {"EA_DELETE","","",128},
  {"EA_UNLINK","","",256},
  {"EA_LINK","","",512},
  {"EA_SET_AS_SUBGROUP"," NOTE: not needed, will be nuked","",1024},
  {"EA_SET_AS_SUBITEM","","",2048},
  {"EA_CLIP_OP_MASK","","",0},
  {"FFF0"," masks the clipboard op codes","",1},
  {"EA_DRAG"," initiation of a drag -- note that src can't distinguish move/copy/link ops","",65536},
  {"EA_DROP_COPY","","",131072},
  {"EA_DROP_LINK","","",262144},
  {"EA_DROP_MOVE","","",524288},
  {"EA_DRAG_OP_MASK","","",0},
  {"F0000"," masks the drag/drop op codes","",1},
  {"EA_OP_MASK","","",0},
  {"FFFF0"," masks all operation codes","",1},
  NULL};
static int taiClipData::* TA_taiClipData_MbrOff;
static MemberDef_data TA_taiClipData_MemberDef[]={
  {&TA_int,NULL,"src_edit_action","","","",
    *((ta_memb_ptr*)&(TA_taiClipData_MbrOff=(int taiClipData::*)(&taiClipData::src_edit_action))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taiClipData_items_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taiClipData_ClipOpToSrcCode_MethArgs[]={
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_taiClipData_format_MethArgs[]={
  {&TA_int,NULL,"i"," 0"},
  NULL};
static MethodDef_data TA_taiClipData_MethodDef[]={
  {&TA_int,NULL,"count"," number of items","","",
    0,0,-1,0,NULL,cssElCFun_taiClipData_count_stub,NULL},
  {&TA_bool,NULL,"is_multi","","","",
    0,0,-1,0,NULL,cssElCFun_taiClipData_is_multi_stub,NULL},
  {&TA_taiMimeItem_ptr,NULL,"items"," static bool decode ( const QMimeSource * e, QPixmap & pm )","","",
    0,1,-1,0,NULL,cssElCFun_taiClipData_items_stub,TA_taiClipData_items_MethArgs},
  {NULL,"::EditAction","ClipOpToSrcCode"," converts an op like EA_CUT into a source field like EA_SRC_CUT","","",
    0,1,-1,1,(ta_void_fun)(taiClipData::ClipOpToSrcCode),cssElCFun_taiClipData_ClipOpToSrcCode_stub,TA_taiClipData_ClipOpToSrcCode_MethArgs},
  {&TA_const_char_ptr,NULL,"format"," override","","",
    0,1,0,0,NULL,cssElCFun_taiClipData_format_stub,TA_taiClipData_format_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Edit_El_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__AddUniqNameOld_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__FindEl_MethArgs[]={
  {NULL,"::const_taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__AddEl_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Add_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__AddUnique_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__AddUniqNameNew_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Insert_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taiMimeItem_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__ReplaceEl_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","old_it",""},
  {NULL,"::taiMimeItem_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taiMimeItem_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__RemoveEl_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__DuplicateEl_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Link_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__LinkUnique_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__InsertLink_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taiMimeItem_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","old_it",""},
  {NULL,"::taiMimeItem_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taiMimeItem_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Push_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__MoveEl_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","from",""},
  {NULL,"::taiMimeItem_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__Transfer_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__MoveBefore_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","trg",""},
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taiMimeItem__MoveAfter_MethArgs[]={
  {NULL,"::taiMimeItem_ptr","trg",""},
  {NULL,"::taiMimeItem_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taiMimeItem__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Find_stub,TA_taPtrList_taiMimeItem__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Remove_stub,TA_taPtrList_taiMimeItem__Remove_MethArgs},
  {NULL,"::taiMimeItem_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__SafeEl_stub,TA_taPtrList_taiMimeItem__SafeEl_MethArgs},
  {NULL,"::taiMimeItem_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__FastEl_stub,TA_taPtrList_taiMimeItem__FastEl_MethArgs},
  {NULL,"::taiMimeItem_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Edit_El_stub,TA_taPtrList_taiMimeItem__Edit_El_MethArgs},
  {NULL,"::taiMimeItem_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taiMimeItem__FindName_stub,TA_taPtrList_taiMimeItem__FindName_MethArgs},
  {NULL,"::taiMimeItem_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Pop_stub,NULL},
  {NULL,"::taiMimeItem_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Peek_stub,NULL},
  {NULL,"::taiMimeItem_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__AddUniqNameOld_stub,TA_taPtrList_taiMimeItem__AddUniqNameOld_MethArgs},
  {NULL,"::taiMimeItem_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__LinkUniqNameOld_stub,TA_taPtrList_taiMimeItem__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__FindEl_stub,TA_taPtrList_taiMimeItem__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__AddEl_stub,TA_taPtrList_taiMimeItem__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Add_stub,TA_taPtrList_taiMimeItem__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__AddUnique_stub,TA_taPtrList_taiMimeItem__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__AddUniqNameNew_stub,TA_taPtrList_taiMimeItem__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Insert_stub,TA_taPtrList_taiMimeItem__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Replace_stub,TA_taPtrList_taiMimeItem__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__ReplaceEl_stub,TA_taPtrList_taiMimeItem__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__ReplaceName_stub,TA_taPtrList_taiMimeItem__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__RemoveEl_stub,TA_taPtrList_taiMimeItem__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__DuplicateEl_stub,TA_taPtrList_taiMimeItem__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Link_stub,TA_taPtrList_taiMimeItem__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__LinkUnique_stub,TA_taPtrList_taiMimeItem__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__LinkUniqNameNew_stub,TA_taPtrList_taiMimeItem__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taiMimeItem__InsertLink_stub,TA_taPtrList_taiMimeItem__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__ReplaceLink_stub,TA_taPtrList_taiMimeItem__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__ReplaceLinkEl_stub,TA_taPtrList_taiMimeItem__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__ReplaceLinkName_stub,TA_taPtrList_taiMimeItem__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Push_stub,TA_taPtrList_taiMimeItem__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__MoveEl_stub,TA_taPtrList_taiMimeItem__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__Transfer_stub,TA_taPtrList_taiMimeItem__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__MoveBefore_stub,TA_taPtrList_taiMimeItem__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taiMimeItem__MoveAfter_stub,TA_taPtrList_taiMimeItem__MoveAfter_MethArgs},
  NULL};
static MethodArgs_data TA_taiMimeItem_List_El_Done__MethArgs[]={
  {&TA_void_ptr,NULL,"na",""},
  NULL};
static MethodDef_data TA_taiMimeItem_List_MethodDef[]={
  {&TA_void,NULL,"El_Done_"," override, when 'done' (delete)","","",
    0,1,-1,0,NULL,cssElCFun_taiMimeItem_List_El_Done__stub,TA_taiMimeItem_List_El_Done__MethArgs},
  NULL};
static EnumDef_data TA_NodeBitmapFlags_EnumDef[]={
  {"NBF_FOLDER_OPEN","","",1},
  {"NBF_LINK_ITEM","","",2},
  NULL};
static int WinGeometry::* TA_WinGeometry_MbrOff;
static MemberDef_data TA_WinGeometry_MemberDef[]={
  {&TA_DataViewer_ptr,NULL,"owner"," pointer to owner","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::owner))),0,NULL,0},
  {&TA_float,NULL,"lft"," left (horizontal)","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::lft))),0,NULL,0},
  {&TA_float,NULL,"top"," top (vertical) NOTE: was 'bottom' in Iv version","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::top))),0,NULL,0},
  {&TA_float,NULL,"wd"," width","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::wd))),0,NULL,0},
  {&TA_float,NULL,"ht"," height","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::ht))),0,NULL,0},
  NULL};
static MethodArgs_data TA_WinGeometry_Offs_MethArgs[]={
  {&TA_float,NULL,"cur",""},
  {&TA_float,NULL,"by",""},
  NULL};
static MethodArgs_data TA_WinGeometry_ScriptWinPos_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodDef_data TA_WinGeometry_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner","","","",
    2,0,-1,0,NULL,cssElCFun_WinGeometry_GetOwner_stub,NULL},
  {&TA_float,NULL,"Offs"," offset cur by 'by' amount (0 > by >= 1.0); wraps if >1","","",
    0,2,-1,1,(ta_void_fun)(WinGeometry::Offs),cssElCFun_WinGeometry_Offs_stub,TA_WinGeometry_Offs_MethArgs},
  {&TA_void,NULL,"GetWinPos"," get the window position from parent winbase","","",
    0,0,-1,0,NULL,cssElCFun_WinGeometry_GetWinPos_stub,NULL},
  {&TA_void,NULL,"SetWinPos"," set the window position from parent winbase","","",
    0,0,-1,0,NULL,cssElCFun_WinGeometry_SetWinPos_stub,NULL},
  {&TA_void,NULL,"ScriptWinPos","","","",
    0,1,0,0,NULL,cssElCFun_WinGeometry_ScriptWinPos_stub,TA_WinGeometry_ScriptWinPos_MethArgs},
  NULL};
static int ToolBar::* TA_ToolBar_MbrOff;
static MemberDef_data TA_ToolBar_MemberDef[]={
  {&TA_int,NULL,"index"," ","SHOW NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_ToolBar_MbrOff=(int ToolBar::*)(&ToolBar::index))),0,NULL,0},
  {&TA_float,NULL,"lft"," when undocked, position on screen","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ToolBar_MbrOff=(int ToolBar::*)(&ToolBar::lft))),0,NULL,0},
  {&TA_float,NULL,"top"," when undocked, position on screen","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ToolBar_MbrOff=(int ToolBar::*)(&ToolBar::top))),0,NULL,0},
  {NULL,"taBase::Orientation","o"," whether hor or vert","","",
    *((ta_memb_ptr*)&(TA_ToolBar_MbrOff=(int ToolBar::*)(&ToolBar::o))),0,NULL,0},
  {&TA_bool,NULL,"docked"," whether toolbar is docked or not","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ToolBar_MbrOff=(int ToolBar::*)(&ToolBar::docked))),0,NULL,0},
  {&TA_bool,NULL,"mapped"," whether toolbar window has been created","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ToolBar_MbrOff=(int ToolBar::*)(&ToolBar::mapped))),0,NULL,0},
  NULL};
static MethodDef_data TA_ToolBar_MethodDef[]={
  {&TA_DataViewer_ptr,NULL,"viewer","","","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_viewer_stub,NULL},
  {&TA_iDataViewer_ptr,NULL,"viewer_win","","","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_viewer_win_stub,NULL},
  {&TA_void,NULL,"GetWinPos"," copy state of toolbar to us","","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_GetWinPos_stub,NULL},
  {&TA_void,NULL,"SetWinPos","","","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_SetWinPos_stub,NULL},
  {&TA_void,NULL,"Dock"," dock the toolbar (saves iconified state)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_Dock_stub,NULL},
  {&TA_void,NULL,"Undock"," deiconify the window (saves deiconified state)","","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_Undock_stub,NULL},
  {&TA_void,NULL,"Show"," called when user selects from menu","","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_Show_stub,NULL},
  {&TA_void,NULL,"Hide"," called when user unselects from menu","","",
    0,0,-1,0,NULL,cssElCFun_ToolBar_Hide_stub,NULL},
  NULL};
static EnumDef_data TA_DataViewer_PrintFmt[]={
  {"POSTSCRIPT","","",0},
  {"JPEG","","",1},
  {"TIFF","","",2},
  {"PDF"," NOTE: new for Qt version","",3},
  NULL};
static int DataViewer::* TA_DataViewer_MbrOff;
static MemberDef_data TA_DataViewer_MemberDef[]={
  {&TA_taString,NULL,"name"," name of the object","","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::name))),0,NULL,0},
  {&TA_taiMenu_List,NULL,"ta_menus"," menu representations (from methods, non-menubuttons only)","","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::ta_menus))),0,NULL,0},
  {&TA_taiMenu_ptr,NULL,"menu"," menu bar -- note: partially managed by the window","","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::menu))),0,NULL,0},
  {&TA_taString,NULL,"win_name"," name field for the window","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::win_name))),0,NULL,0},
  {&TA_taString,NULL,"file_name"," file name used in loading/saving","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::file_name))),0,NULL,0},
  {&TA_WinGeometry,NULL,"win_pos"," position/size of the window on the screen","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::win_pos))),0,NULL,0},
  {&TA_taFiler_ptr,NULL,"ta_file"," file manager for this -- always use refcount semantics","NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::ta_file))),0,NULL,0},
  {&TA_taFiler_ptr,NULL,"print_file"," print file for this","NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::print_file))),0,NULL,0},
  {&TA_bool,NULL,"iconified"," whether window is iconified or not","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::iconified))),0,NULL,0},
  {&TA_bool,NULL,"display_toggle"," 'true' if display should be updated","DEF_true ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::display_toggle))),0,NULL,0},
  {&TA_ToolBar_List,NULL,"toolbars"," ","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataViewer_MbrOff=(int DataViewer::*)(&DataViewer::toolbars))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataViewer_GetDataLink_MethArgs[]={
  {&TA_void_ptr,NULL,"el",""},
  {&TA_TypeDef_ptr,NULL,"el_typ",""},
  {&TA_int,NULL,"param"," 0"},
  NULL};
static MethodArgs_data TA_DataViewer_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_DataViewer_Edit_MethArgs[]={
  {&TA_bool,NULL,"wait","false"},
  NULL};
static MethodArgs_data TA_DataViewer_Changed_MethArgs[]={
  {&TA_bool,NULL,"value"," true"},
  NULL};
static MethodArgs_data TA_DataViewer_Print_MethArgs[]={
  {NULL,"::PrintFmt","format",""},
  {&TA_const_char_ptr,NULL,"fname"," 0"},
  NULL};
static MethodArgs_data TA_DataViewer_Print_Data_MethArgs[]={
  {NULL,"::PrintFmt","format",""},
  {&TA_const_char_ptr,NULL,"fname"," 0"},
  NULL};
static MethodArgs_data TA_DataViewer_GetPrintFileExt_MethArgs[]={
  {NULL,"::PrintFmt","fmt",""},
  NULL};
static MethodDef_data TA_DataViewer_MethodDef[]={
  {&TA_taiDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    1,3,2,0,NULL,cssElCFun_DataViewer_GetDataLink_stub,TA_DataViewer_GetDataLink_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file call to save the object to current file, or new file if new; 'true' if saved Save object to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    2,3,1,0,NULL,cssElCFun_DataViewer_Save_stub,TA_DataViewer_Save_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    1,1,0,0,NULL,cssElCFun_DataViewer_Edit_stub,TA_DataViewer_Edit_MethArgs},
  {&TA_void,NULL,"Clear"," clears the view (but doesn't delete any components) (usually override _impl) checks to make sure we are mapped first","","",
    1,0,-1,0,NULL,cssElCFun_DataViewer_Clear_stub,NULL},
  {&TA_bool,NULL,"HasChanges"," 'true' when something needs to be saved","","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_HasChanges_stub,NULL},
  {&TA_void,NULL,"Changed"," default sets changes; call with 'false' to clear changes","","",
    0,1,0,0,NULL,cssElCFun_DataViewer_Changed_stub,TA_DataViewer_Changed_MethArgs},
  {&TA_void,NULL,"Print"," Print this object's entire window (including buttons, etc) to file (prompted next) in given format","MENU ARGC_1 MENU_SEP_BEFORE LABEL_Print_(Window) ","",
    0,2,1,0,NULL,cssElCFun_DataViewer_Print_stub,TA_DataViewer_Print_MethArgs},
  {&TA_void,NULL,"Print_Data"," Print only specific data associated with this window (not control buttons, etc) to file (prompted next) in given format","MENU ARGC_1 LABEL_Print_Data_(Only) ","",
    0,2,1,0,NULL,cssElCFun_DataViewer_Print_Data_stub,TA_DataViewer_Print_Data_MethArgs},
  {&TA_void,NULL,"ScriptWinPos"," generate script code to position the window","NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_ScriptWinPos_stub,NULL},
  {&TA_void,NULL,"Iconify"," iconify the window (saves iconified state)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_Iconify_stub,NULL},
  {&TA_void,NULL,"DeIconify"," deiconify the window (saves deiconified state)","","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_DeIconify_stub,NULL},
  {&TA_bool,NULL,"IsMapped"," return the 'mapped' status of the window","","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_IsMapped_stub,NULL},
  {&TA_void,NULL,"ViewWindow"," either de-iconfiy or create a new view to view this object","","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_ViewWindow_stub,NULL},
  {&TA_taString,NULL,"GetPrintFileExt"," get string of file extension for given fmt","","",
    0,1,-1,0,NULL,cssElCFun_DataViewer_GetPrintFileExt_stub,TA_DataViewer_GetPrintFileExt_MethArgs},
  {&TA_void,NULL,"Raise"," raise window to front","","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_Raise_stub,NULL},
  {&TA_void,NULL,"Lower"," lower window to back","","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_Lower_stub,NULL},
  {&TA_void,NULL,"WinInit"," called inside InitLinks, after our core InitLinks, but before window opened","","",
    0,0,-1,0,NULL,cssElCFun_DataViewer_WinInit_stub,NULL},
  NULL};
static MethodArgs_data TA_ISelectable_EditAction__MethArgs[]={
  {&TA_ISelectable_PtrList_ref,NULL,"sel_items",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_ISelectable_FillContextMenu_MethArgs[]={
  {&TA_ISelectable_PtrList_ref,NULL,"sel_items",""},
  {&TA_taiMenu_ptr,NULL,"menu",""},
  NULL};
static MethodArgs_data TA_ISelectable_GetClipData_MethArgs[]={
  {&TA_const_ISelectable_PtrList_ref,NULL,"sel_items",""},
  {&TA_int,NULL,"src_edit_action",""},
  {&TA_bool,NULL,"for_drag",""},
  NULL};
static MethodArgs_data TA_ISelectable_GetEditActions__MethArgs[]={
  {&TA_const_ISelectable_PtrList_ref,NULL,"sel_items",""},
  NULL};
static MethodArgs_data TA_ISelectable_RefUnref_MethArgs[]={
  {&TA_bool,NULL,"ref",""},
  NULL};
static MethodDef_data TA_ISelectable_MethodDef[]={
  {&TA_MemberDef_ptr,NULL,"md"," memberdef in parent, if any, of the selected item","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_md_stub,NULL},
  {&TA_taiDataLink_ptr,NULL,"par_link"," parent item's (if any) link","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_par_link_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"par_md"," parent item's (if any) md","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_par_md_stub,NULL},
  {&TA_IDataViewHost_ptr,NULL,"host"," ","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_host_stub,NULL},
  {&TA_taString,NULL,"view_name"," for members, the member name; for list items, the name if any, otherwise a created name using the index","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_view_name_stub,NULL},
  {&TA_QWidget_ptr,NULL,"widget","","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_widget_stub,NULL},
  {&TA_int,NULL,"EditAction_"," do the indicated edit action (called from browser or list view); normally implement the _impl","","",
    0,2,-1,0,NULL,cssElCFun_ISelectable_EditAction__stub,TA_ISelectable_EditAction__MethArgs},
  {&TA_void,NULL,"FillContextMenu"," normally implement the _impl","","",
    0,2,-1,0,NULL,cssElCFun_ISelectable_FillContextMenu_stub,TA_ISelectable_FillContextMenu_MethArgs},
  {&TA_taiClipData_ptr,NULL,"GetClipData"," delegates to the link; normally not overridden","","",
    0,3,-1,0,NULL,cssElCFun_ISelectable_GetClipData_stub,TA_ISelectable_GetClipData_MethArgs},
  {&TA_int,NULL,"GetEditActions_"," typically called on single item for acceptDrop called to get edit items available on clipboard for the sel_items","","",
    1,1,-1,0,NULL,cssElCFun_ISelectable_GetEditActions__stub,TA_ISelectable_GetEditActions__MethArgs},
  {&TA_taiMimeItem_ptr,NULL,"GetMimeItem"," delegates to the link","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_GetMimeItem_stub,NULL},
  {&TA_int,NULL,"RefUnref"," ref'ed/unrefed in select lists etc.; optional, and can be used for lifetime mgt; returns count after operation","","",
    0,1,-1,0,NULL,cssElCFun_ISelectable_RefUnref_stub,TA_ISelectable_RefUnref_MethArgs},
  NULL};
static MethodArgs_data TA_IDataViewHost_ObjectRemoving_MethArgs[]={
  {&TA_ISelectable_ptr,NULL,"item",""},
  NULL};
static MethodDef_data TA_IDataViewHost_MethodDef[]={
  {&TA_QWidget_ptr,NULL,"This","","","",
    0,0,-1,0,NULL,cssElCFun_IDataViewHost_This_stub,NULL},
  {&TA_bool,NULL,"ObjectRemoving"," call from item when deleting or removing -- makes sure it is removed from sel lists, etc.","","",
    0,1,-1,0,NULL,cssElCFun_IDataViewHost_ObjectRemoving_stub,TA_IDataViewHost_ObjectRemoving_MethArgs},
  NULL};
static int DataLink_QObj::* TA_DataLink_QObj_MbrOff;
static MemberDef_data TA_DataLink_QObj_MemberDef[]={
  {&TA_taiDataLink_ptr,NULL,"dl","","","",
    *((ta_memb_ptr*)&(TA_DataLink_QObj_MbrOff=(int DataLink_QObj::*)(&DataLink_QObj::dl))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Edit_El_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__AddUniqNameOld_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__LinkUniqNameOld_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__FindEl_MethArgs[]={
  {NULL,"::const_ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__AddEl_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Add_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__AddUnique_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__AddUniqNameNew_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Insert_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::ISelectable_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__ReplaceEl_MethArgs[]={
  {NULL,"::ISelectable_ptr","old_it",""},
  {NULL,"::ISelectable_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::ISelectable_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__RemoveEl_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__DuplicateEl_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Link_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__LinkUnique_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__LinkUniqNameNew_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__InsertLink_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::ISelectable_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__ReplaceLinkEl_MethArgs[]={
  {NULL,"::ISelectable_ptr","old_it",""},
  {NULL,"::ISelectable_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::ISelectable_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Push_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__MoveEl_MethArgs[]={
  {NULL,"::ISelectable_ptr","from",""},
  {NULL,"::ISelectable_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__Transfer_MethArgs[]={
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__MoveBefore_MethArgs[]={
  {NULL,"::ISelectable_ptr","trg",""},
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ISelectable__MoveAfter_MethArgs[]={
  {NULL,"::ISelectable_ptr","trg",""},
  {NULL,"::ISelectable_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_ISelectable__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Find_stub,TA_taPtrList_ISelectable__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Remove_stub,TA_taPtrList_ISelectable__Remove_MethArgs},
  {NULL,"::ISelectable_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__SafeEl_stub,TA_taPtrList_ISelectable__SafeEl_MethArgs},
  {NULL,"::ISelectable_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__FastEl_stub,TA_taPtrList_ISelectable__FastEl_MethArgs},
  {NULL,"::ISelectable_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Edit_El_stub,TA_taPtrList_ISelectable__Edit_El_MethArgs},
  {NULL,"::ISelectable_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_ISelectable__FindName_stub,TA_taPtrList_ISelectable__FindName_MethArgs},
  {NULL,"::ISelectable_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Pop_stub,NULL},
  {NULL,"::ISelectable_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Peek_stub,NULL},
  {NULL,"::ISelectable_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__AddUniqNameOld_stub,TA_taPtrList_ISelectable__AddUniqNameOld_MethArgs},
  {NULL,"::ISelectable_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__LinkUniqNameOld_stub,TA_taPtrList_ISelectable__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__FindEl_stub,TA_taPtrList_ISelectable__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__AddEl_stub,TA_taPtrList_ISelectable__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Add_stub,TA_taPtrList_ISelectable__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__AddUnique_stub,TA_taPtrList_ISelectable__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__AddUniqNameNew_stub,TA_taPtrList_ISelectable__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Insert_stub,TA_taPtrList_ISelectable__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Replace_stub,TA_taPtrList_ISelectable__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__ReplaceEl_stub,TA_taPtrList_ISelectable__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__ReplaceName_stub,TA_taPtrList_ISelectable__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__RemoveEl_stub,TA_taPtrList_ISelectable__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__DuplicateEl_stub,TA_taPtrList_ISelectable__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Link_stub,TA_taPtrList_ISelectable__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__LinkUnique_stub,TA_taPtrList_ISelectable__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__LinkUniqNameNew_stub,TA_taPtrList_ISelectable__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_ISelectable__InsertLink_stub,TA_taPtrList_ISelectable__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__ReplaceLink_stub,TA_taPtrList_ISelectable__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__ReplaceLinkEl_stub,TA_taPtrList_ISelectable__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__ReplaceLinkName_stub,TA_taPtrList_ISelectable__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Push_stub,TA_taPtrList_ISelectable__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__MoveEl_stub,TA_taPtrList_ISelectable__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ISelectable__Transfer_stub,TA_taPtrList_ISelectable__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__MoveBefore_stub,TA_taPtrList_ISelectable__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ISelectable__MoveAfter_stub,TA_taPtrList_ISelectable__MoveAfter_MethArgs},
  NULL};
static MethodDef_data TA_ISelectable_PtrList_MethodDef[]={
  {&TA_TypeDef_ptr,NULL,"Type1"," data type of item","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_PtrList_Type1_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"CommonSubtype1N"," greatest common data subtype of items 1-N","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_PtrList_CommonSubtype1N_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"CommonSubtype2N"," greatest common data subtype of items 2-N","","",
    0,0,-1,0,NULL,cssElCFun_ISelectable_PtrList_CommonSubtype2N_stub,NULL},
  NULL};
static EnumDef_data TA_taList_DataViewer__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_DataViewer__MoveBefore_MethArgs[]={
  {NULL,"::DataViewer_ptr","trg",""},
  {NULL,"::DataViewer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataViewer__MoveAfter_MethArgs[]={
  {NULL,"::DataViewer_ptr","trg",""},
  {NULL,"::DataViewer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataViewer__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_DataViewer__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_DataViewer__Edit_El_MethArgs[]={
  {NULL,"::DataViewer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataViewer__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_DataViewer__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_DataViewer__AddUniqNameOld_MethArgs[]={
  {NULL,"::DataViewer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataViewer__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DataViewer_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_DataViewer__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_DataViewer__MoveBefore_stub,TA_taList_DataViewer__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_DataViewer__MoveAfter_stub,TA_taList_DataViewer__MoveAfter_MethArgs},
  {NULL,"::DataViewer_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataViewer__SafeEl_stub,TA_taList_DataViewer__SafeEl_MethArgs},
  {NULL,"::DataViewer_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataViewer__FastEl_stub,TA_taList_DataViewer__FastEl_MethArgs},
  {NULL,"::DataViewer_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataViewer__DefaultEl_stub,NULL},
  {NULL,"::DataViewer_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_DataViewer__Edit_El_stub,TA_taList_DataViewer__Edit_El_MethArgs},
  {NULL,"::DataViewer_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_DataViewer__FindName_stub,TA_taList_DataViewer__FindName_MethArgs},
  {NULL,"::DataViewer_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_DataViewer__FindType_stub,TA_taList_DataViewer__FindType_MethArgs},
  {NULL,"::DataViewer_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataViewer__Pop_stub,NULL},
  {NULL,"::DataViewer_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataViewer__Peek_stub,NULL},
  {NULL,"::DataViewer_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataViewer__AddUniqNameOld_stub,TA_taList_DataViewer__AddUniqNameOld_MethArgs},
  {NULL,"::DataViewer_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataViewer__LinkUniqNameOld_stub,TA_taList_DataViewer__LinkUniqNameOld_MethArgs},
  NULL};
static int DataBrowser::* TA_DataBrowser_MbrOff;
static MemberDef_data TA_DataBrowser_MemberDef[]={
  {&TA_taBase_ptr,NULL,"root","","","",
    *((ta_memb_ptr*)&(TA_DataBrowser_MbrOff=(int DataBrowser::*)(&DataBrowser::root))),0,NULL,0},
  {&TA_MemberDef_ptr,NULL,"md","","","",
    *((ta_memb_ptr*)&(TA_DataBrowser_MbrOff=(int DataBrowser::*)(&DataBrowser::md))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataBrowser_New_MethArgs[]={
  {&TA_void_ptr,NULL,"root_",""},
  {&TA_MemberDef_ptr,NULL,"md_",""},
  {&TA_TypeDef_ptr,NULL,"typ_",""},
  {&TA_bool,NULL,"is_root"," false"},
  NULL};
static MethodDef_data TA_DataBrowser_MethodDef[]={
  {&TA_DataBrowser_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    1,4,3,1,(ta_void_fun)(DataBrowser::New),cssElCFun_DataBrowser_New_stub,TA_DataBrowser_New_MethArgs},
  NULL};
static int ClassBrowser::* TA_ClassBrowser_MbrOff;
static MemberDef_data TA_ClassBrowser_MemberDef[]={
  {&TA_void_ptr,NULL,"root","","","",
    *((ta_memb_ptr*)&(TA_ClassBrowser_MbrOff=(int ClassBrowser::*)(&ClassBrowser::root))),0,NULL,0},
  {&TA_TypeInfoKind,NULL,"tik","","","",
    *((ta_memb_ptr*)&(TA_ClassBrowser_MbrOff=(int ClassBrowser::*)(&ClassBrowser::tik))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ClassBrowser_New_MethArgs[]={
  {&TA_void_ptr,NULL,"root_",""},
  {&TA_TypeInfoKind,NULL,"tik",""},
  NULL};
static MethodArgs_data TA_ClassBrowser_StatGetDataLink_MethArgs[]={
  {&TA_void_ptr,NULL,"el",""},
  {&TA_TypeInfoKind,NULL,"tik",""},
  NULL};
static MethodDef_data TA_ClassBrowser_MethodDef[]={
  {&TA_ClassBrowser_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    1,2,-1,1,(ta_void_fun)(ClassBrowser::New),cssElCFun_ClassBrowser_New_stub,TA_ClassBrowser_New_MethArgs},
  {&TA_taiDataLink_ptr,NULL,"StatGetDataLink"," anyone can call this to get an object's datalink -- fetches existing or makes new","","",
    0,2,-1,1,(ta_void_fun)(ClassBrowser::StatGetDataLink),cssElCFun_ClassBrowser_StatGetDataLink_stub,TA_ClassBrowser_StatGetDataLink_MethArgs},
  {&TA_iClassBrowser_ptr,NULL,"browser_win","","","",
    0,0,-1,0,NULL,cssElCFun_ClassBrowser_browser_win_stub,NULL},
  NULL};
static EnumDef_data TA_TypeInfoKind_EnumDef[]={
  {"TIK_ENUM","","",0},
  {"TIK_MEMBER","","",1},
  {"TIK_METHOD","","",2},
  {"TIK_TYPE","","",3},
  {"TIK_ENUMSPACE","","",4},
  {"TIK_MEMBERSPACE","","",5},
  {"TIK_METHODSPACE","","",6},
  {"TIK_TYPESPACE","","",7},
  {"TIK_TOKENSPACE","","",8},
  NULL};
static int SelectEditConfig::* TA_SelectEditConfig_MbrOff;
static MemberDef_data TA_SelectEditConfig_MemberDef[]={
  {&TA_bool,NULL,"auto_edit"," automatically bring up edit dialog upon loading","","",
    *((ta_memb_ptr*)&(TA_SelectEditConfig_MbrOff=(int SelectEditConfig::*)(&SelectEditConfig::auto_edit))),0,NULL,0},
  {&TA_String_Array,NULL,"mbr_labels"," extra labels at the start of each member label for the selected fields","","",
    *((ta_memb_ptr*)&(TA_SelectEditConfig_MbrOff=(int SelectEditConfig::*)(&SelectEditConfig::mbr_labels))),0,NULL,0},
  {&TA_String_Array,NULL,"meth_labels"," extra labels at the start of each method label for the selected functions","","",
    *((ta_memb_ptr*)&(TA_SelectEditConfig_MbrOff=(int SelectEditConfig::*)(&SelectEditConfig::meth_labels))),0,NULL,0},
  NULL};
static int iPoint::* TA_iPoint_MbrOff;
static MemberDef_data TA_iPoint_MemberDef[]={
  {&TA_int,NULL,"x","","","",
    *((ta_memb_ptr*)&(TA_iPoint_MbrOff=(int iPoint::*)(&iPoint::x))),0,NULL,0},
  {&TA_int,NULL,"y","","","",
    *((ta_memb_ptr*)&(TA_iPoint_MbrOff=(int iPoint::*)(&iPoint::y))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iPoint_getArrayIndex_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  NULL};
static MethodArgs_data TA_iPoint_isEqual_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  NULL};
static MethodArgs_data TA_iPoint_getValue_MethArgs[]={
  {&TA_int_ref,NULL,"x_",""},
  {&TA_int_ref,NULL,"y_",""},
  NULL};
static MethodArgs_data TA_iPoint_setValue_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  NULL};
static MethodDef_data TA_iPoint_MethodDef[]={
  {&TA_int,NULL,"getArrayIndex"," assumes x and y are array sizes -- gets the row-major array index, or -1 if out of bounds","","",
    0,2,-1,0,NULL,cssElCFun_iPoint_getArrayIndex_stub,TA_iPoint_getArrayIndex_MethArgs},
  {&TA_bool,NULL,"isEqual","","","",
    0,2,-1,0,NULL,cssElCFun_iPoint_isEqual_stub,TA_iPoint_isEqual_MethArgs},
  {&TA_void,NULL,"getValue","","","",
    0,2,-1,0,NULL,cssElCFun_iPoint_getValue_stub,TA_iPoint_getValue_MethArgs},
  {&TA_void,NULL,"setValue","","","",
    0,2,-1,0,NULL,cssElCFun_iPoint_setValue_stub,TA_iPoint_setValue_MethArgs},
  NULL};
static int iVec3i::* TA_iVec3i_MbrOff;
static MemberDef_data TA_iVec3i_MemberDef[]={
  {&TA_int,NULL,"z","","","",
    *((ta_memb_ptr*)&(TA_iVec3i_MbrOff=(int iVec3i::*)(&iVec3i::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iVec3i_isEqual_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  {&TA_int,NULL,"z_",""},
  NULL};
static MethodArgs_data TA_iVec3i_getValue_MethArgs[]={
  {&TA_int_ref,NULL,"x_",""},
  {&TA_int_ref,NULL,"y_",""},
  {&TA_int_ref,NULL,"z_",""},
  NULL};
static MethodArgs_data TA_iVec3i_setValue_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  {&TA_int,NULL,"z_",""},
  NULL};
static MethodDef_data TA_iVec3i_MethodDef[]={
  {&TA_bool,NULL,"isEqual","","","",
    1,3,-1,0,NULL,cssElCFun_iVec3i_isEqual_stub,TA_iVec3i_isEqual_MethArgs},
  {&TA_void,NULL,"getValue","","","",
    1,3,-1,0,NULL,cssElCFun_iVec3i_getValue_stub,TA_iVec3i_getValue_MethArgs},
  {&TA_void,NULL,"setValue","","","",
    1,3,-1,0,NULL,cssElCFun_iVec3i_setValue_stub,TA_iVec3i_setValue_MethArgs},
  NULL};
static int iSize::* TA_iSize_MbrOff;
static MemberDef_data TA_iSize_MemberDef[]={
  {&TA_int,NULL,"w","","","",
    *((ta_memb_ptr*)&(TA_iSize_MbrOff=(int iSize::*)(&iSize::w))),0,NULL,0},
  {&TA_int,NULL,"h","","","",
    *((ta_memb_ptr*)&(TA_iSize_MbrOff=(int iSize::*)(&iSize::h))),0,NULL,0},
  NULL};
static MethodDef_data TA_iSize_MethodDef[]={
  {&TA_int,NULL,"height","","","",
    0,0,-1,0,NULL,cssElCFun_iSize_height_stub,NULL},
  {&TA_int,NULL,"width","","","",
    0,0,-1,0,NULL,cssElCFun_iSize_width_stub,NULL},
  NULL};
static int iRect::* TA_iRect_MbrOff;
static MemberDef_data TA_iRect_MemberDef[]={
  {&TA_int,NULL,"x","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::x))),0,NULL,0},
  {&TA_int,NULL,"y","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::y))),0,NULL,0},
  {&TA_int,NULL,"w","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::w))),0,NULL,0},
  {&TA_int,NULL,"h","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::h))),0,NULL,0},
  NULL};
static MethodDef_data TA_iRect_MethodDef[]={
  {&TA_iPoint,NULL,"topLeft","","","",
    0,0,-1,0,NULL,cssElCFun_iRect_topLeft_stub,NULL},
  {&TA_iSize,NULL,"size","","","",
    0,0,-1,0,NULL,cssElCFun_iRect_size_stub,NULL},
  {&TA_int,NULL,"left","","","",
    0,0,-1,0,NULL,cssElCFun_iRect_left_stub,NULL},
  {&TA_int,NULL,"top","","","",
    0,0,-1,0,NULL,cssElCFun_iRect_top_stub,NULL},
  {&TA_int,NULL,"width","","","",
    0,0,-1,0,NULL,cssElCFun_iRect_width_stub,NULL},
  {&TA_int,NULL,"height","","","",
    0,0,-1,0,NULL,cssElCFun_iRect_height_stub,NULL},
  NULL};
static int iVec3f::* TA_iVec3f_MbrOff;
static MemberDef_data TA_iVec3f_MemberDef[]={
  {&TA_float,NULL,"x","","","",
    *((ta_memb_ptr*)&(TA_iVec3f_MbrOff=(int iVec3f::*)(&iVec3f::x))),0,NULL,0},
  {&TA_float,NULL,"y","","","",
    *((ta_memb_ptr*)&(TA_iVec3f_MbrOff=(int iVec3f::*)(&iVec3f::y))),0,NULL,0},
  {&TA_float,NULL,"z","","","",
    *((ta_memb_ptr*)&(TA_iVec3f_MbrOff=(int iVec3f::*)(&iVec3f::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iVec3f_isEqual_MethArgs[]={
  {&TA_float,NULL,"x_",""},
  {&TA_float,NULL,"y_",""},
  {&TA_float,NULL,"z_",""},
  NULL};
static MethodArgs_data TA_iVec3f_setValue_MethArgs[]={
  {&TA_float,NULL,"x_",""},
  {&TA_float,NULL,"y_",""},
  {&TA_float,NULL,"z_",""},
  NULL};
static MethodDef_data TA_iVec3f_MethodDef[]={
  {&TA_bool,NULL,"isEqual","","","",
    0,3,-1,0,NULL,cssElCFun_iVec3f_isEqual_stub,TA_iVec3f_isEqual_MethArgs},
  {&TA_bool,NULL,"isUnity","","","",
    0,0,-1,0,NULL,cssElCFun_iVec3f_isUnity_stub,NULL},
  {&TA_bool,NULL,"isZero","","","",
    0,0,-1,0,NULL,cssElCFun_iVec3f_isZero_stub,NULL},
  {&TA_void,NULL,"setValue","","","",
    0,3,-1,0,NULL,cssElCFun_iVec3f_setValue_stub,TA_iVec3f_setValue_MethArgs},
  NULL};
static int iBox3f::* TA_iBox3f_MbrOff;
static MemberDef_data TA_iBox3f_MemberDef[]={
  {&TA_iVec3f,NULL,"min"," minimum point","","",
    *((ta_memb_ptr*)&(TA_iBox3f_MbrOff=(int iBox3f::*)(&iBox3f::min))),0,NULL,0},
  {&TA_iVec3f,NULL,"max"," maximum point","","",
    *((ta_memb_ptr*)&(TA_iBox3f_MbrOff=(int iBox3f::*)(&iBox3f::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iBox3f_setValue_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"min_",""},
  {&TA_const_iVec3f_ref,NULL,"max_",""},
  NULL};
static MethodArgs_data TA_iBox3f_setValueCS_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"center_",""},
  {&TA_const_iVec3f_ref,NULL,"size_",""},
  NULL};
static MethodDef_data TA_iBox3f_MethodDef[]={
  {&TA_iVec3f,NULL,"center"," center point of the box","","",
    0,0,-1,0,NULL,cssElCFun_iBox3f_center_stub,NULL},
  {&TA_iVec3f,NULL,"size"," size of the box in each dimension","","",
    0,0,-1,0,NULL,cssElCFun_iBox3f_size_stub,NULL},
  {&TA_bool,NULL,"isZero","","","",
    0,0,-1,0,NULL,cssElCFun_iBox3f_isZero_stub,NULL},
  {&TA_void,NULL,"setValue","","","",
    1,2,-1,0,NULL,cssElCFun_iBox3f_setValue_stub,TA_iBox3f_setValue_MethArgs},
  {&TA_void,NULL,"setValueCS"," set the value by specifying the center and the size -- can only specify boxes with planes parallel to the coord axes set the value by specifying the center and the size -- can only specify boxes with planes parallel to the coord axes","","",
    1,2,-1,0,NULL,cssElCFun_iBox3f_setValueCS_stub,TA_iBox3f_setValueCS_MethArgs},
  NULL};

// Init Function


static bool ta_Init_ta_done = false;

void ta_Init_ta() {
  TypeDef* sbt;

  if(ta_Init_ta_done) return;
  ta_Init_ta_done = true;


  taMisc::in_init = true;

  taMisc::types.Add(&TA_void);
  taMisc::types.Add(&TA_int);
  taMisc::types.Add(&TA_short);
  taMisc::types.Add(&TA_long);
  taMisc::types.Add(&TA_char);
  taMisc::types.Add(&TA_signed_char);
  taMisc::types.Add(&TA_unsigned_char);
  taMisc::types.Add(&TA_unsigned);
  taMisc::types.Add(&TA_signed);
  taMisc::types.Add(&TA_float);
  taMisc::types.Add(&TA_double);
  taMisc::types.Add(&TA_bool);
  taMisc::types.Add(&TA_const);
  taMisc::types.Add(&TA_enum);
  taMisc::types.Add(&TA_struct);
  taMisc::types.Add(&TA_union);
  taMisc::types.Add(&TA_class);
  taMisc::types.Add(&TA_template);
  taMisc::types.Add(&TA_templ_inst);
  taMisc::types.Add(&TA_ta_array);
  taMisc::types.Add(&TA_taBase);
    TAI_taBase = new taBase;
    TA_taBase.AddParFormal(&TA_class);
    tac_AddEnum(TA_taBase, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taBase_Orientation);
    tac_AddMethods(TA_taBase,TA_taBase_MethodDef);
  taMisc::types.Add(&TA_taRegFun);
  taMisc::types.Add(&TA_TypeDef);
  taMisc::types.Add(&TA_taString);
    TA_taString.AddParFormal(&TA_class);
    tac_AddMethods(TA_taString,TA_taString_MethodDef);
  taMisc::types.Add(&TA_void_ptr);
    TA_void_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_streambuf);
    TA_streambuf.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_signed_long);
    TA_signed_long.AddParents(&TA_signed, &TA_long);
  taMisc::types.Add(&TA_signed_long_long);
    TA_signed_long_long.AddParents(&TA_signed_long, &TA_long);
  taMisc::types.Add(&TA_signed_long_long_int);
    TA_signed_long_long_int.AddParents(&TA_signed_long_long, &TA_int);
  taMisc::types.Add(&TA_streampos);
    TA_streampos.AddParents(&TA_signed_long_long_int);
  taMisc::types.Add(&TA_streamoff);
    TA_streamoff.AddParents(&TA_signed_long_long_int);
  taMisc::types.Add(&TA_streamsize);
    TA_streamsize.AddParents(&TA_int);
  taMisc::types.Add(&TA__Ios_Fmtflags);
    TA__Ios_Fmtflags.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Fmtflags, TA__Ios_Fmtflags_EnumDef);
  taMisc::types.Add(&TA__Ios_Openmode);
    TA__Ios_Openmode.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Openmode, TA__Ios_Openmode_EnumDef);
  taMisc::types.Add(&TA__Ios_Iostate);
    TA__Ios_Iostate.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Iostate, TA__Ios_Iostate_EnumDef);
  taMisc::types.Add(&TA__Ios_Seekdir);
    TA__Ios_Seekdir.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Seekdir, TA__Ios_Seekdir_EnumDef);
  taMisc::types.Add(&TA_void_ptr_ref);
    TA_void_ptr_ref.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_long_ref);
    TA_long_ref.AddParents(&TA_long);
  taMisc::types.Add(&TA_ios);
    TA_ios.AddParFormal(&TA_class);
    tac_AddEnum(TA_ios, "fmtflags", "", "", "", "", TA_ios_fmtflags);
    tac_AddEnum(TA_ios, "iostate", "", "", "", "", TA_ios_iostate);
    tac_AddEnum(TA_ios, "openmode", "", "", "", "", TA_ios_openmode);
    tac_AddEnum(TA_ios, "seekdir", "", "", "", "", TA_ios_seekdir);
    tac_AddMethods(TA_ios,TA_ios_MethodDef);
  taMisc::types.Add(&TA_ostream);
    TA_ostream.AddParFormal(&TA_class);
    TA_ostream.AddClassPar(&TA_ios,0);
    tac_AddMethods(TA_ostream,TA_ostream_MethodDef);
  taMisc::types.Add(&TA_istream);
    TA_istream.AddParFormal(&TA_class);
    TA_istream.AddClassPar(&TA_ios,0);
    tac_AddMethods(TA_istream,TA_istream_MethodDef);
  taMisc::types.Add(&TA_ostream_ref);
    TA_ostream_ref.AddParents(&TA_ostream);
  taMisc::types.Add(&TA_ostream_ptr);
    TA_ostream_ptr.AddParents(&TA_ostream);
  taMisc::types.Add(&TA_const_char);
    TA_const_char.AddParents(&TA_const, &TA_char);
  taMisc::types.Add(&TA_const_char_ptr);
    TA_const_char_ptr.AddParents(&TA_const_char);
  taMisc::types.Add(&TA_istream_ref);
    TA_istream_ref.AddParents(&TA_istream);
  taMisc::types.Add(&TA_char_ptr);
    TA_char_ptr.AddParents(&TA_char);
  taMisc::types.Add(&TA_iostream);
    TA_iostream.AddParFormal(&TA_class);
    TA_iostream.AddClassPar(&TA_istream,0, &TA_ostream,0);
    tac_AddMethods(TA_iostream,TA_iostream_MethodDef);
  taMisc::types.Add(&TA_ifstream);
    TA_ifstream.AddParFormal(&TA_class);
    TA_ifstream.AddClassPar(&TA_istream,0);
    tac_AddMethods(TA_ifstream,TA_ifstream_MethodDef);
  taMisc::types.Add(&TA_ofstream);
    TA_ofstream.AddParFormal(&TA_class);
    TA_ofstream.AddClassPar(&TA_ostream,0);
    tac_AddMethods(TA_ofstream,TA_ofstream_MethodDef);
  taMisc::types.Add(&TA_fstream);
    TA_fstream.AddParFormal(&TA_class);
    TA_fstream.AddClassPar(&TA_iostream,0);
    tac_AddMethods(TA_fstream,TA_fstream_MethodDef);
  taMisc::types.Add(&TA_istringstream);
    TA_istringstream.AddParFormal(&TA_class);
    TA_istringstream.AddClassPar(&TA_istream,0);
  taMisc::types.Add(&TA_ostringstream);
    TA_ostringstream.AddParFormal(&TA_class);
    TA_ostringstream.AddClassPar(&TA_ostream,0);
  taMisc::types.Add(&TA_stringstream);
    TA_stringstream.AddParFormal(&TA_class);
    TA_stringstream.AddClassPar(&TA_iostream,0);
  taMisc::types.Add(&TA_taStrRep);
    TA_taStrRep.AddParFormal(&TA_class);
    tac_AddMembers(TA_taStrRep,TA_taStrRep_MemberDef);
  taMisc::types.Add(&TA_char_ary);
    TA_char_ary.AddParFormal(&TA_ta_array);
    TA_char_ary.AddParents(&TA_char);
  taMisc::types.Add(&TA_const_taString);
    TA_const_taString.AddParents(&TA_const, &TA_taString);
  taMisc::types.Add(&TA_const_taString_ref);
    TA_const_taString_ref.AddParents(&TA_const_taString);
  taMisc::types.Add(&TA_taStrRep_ptr);
    TA_taStrRep_ptr.AddParents(&TA_taStrRep);
  taMisc::types.Add(&TA_unsigned_long);
    TA_unsigned_long.AddParents(&TA_unsigned, &TA_long);
  taMisc::types.Add(&TA_const_QString_ref);
  taMisc::types.Add(&TA_taString_ref);
    TA_taString_ref.AddParents(&TA_taString);
  taMisc::types.Add(&TA_unsigned_int);
    TA_unsigned_int.AddParents(&TA_unsigned, &TA_int);
  taMisc::types.Add(&TA_char_ref);
    TA_char_ref.AddParents(&TA_char);
  taMisc::types.Add(&TA_const_QFont_ref);
  taMisc::types.Add(&TA_iFont);
    TA_iFont.AddParFormal(&TA_class);
    tac_AddEnum(TA_iFont, "Attributes", " ", "", "BITS ", "", TA_iFont_Attributes);
    tac_AddMembers(TA_iFont,TA_iFont_MemberDef);
    tac_AddMethods(TA_iFont,TA_iFont_MethodDef);
  taMisc::types.Add(&TA_taDataLink);
    TA_taDataLink.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iFont_ref);
    TA_iFont_ref.AddParents(&TA_iFont);
  taMisc::types.Add(&TA_const_iFont);
    TA_const_iFont.AddParents(&TA_const, &TA_iFont);
  taMisc::types.Add(&TA_taPtrList_impl);
    TA_taPtrList_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taPtrList_impl,TA_taPtrList_impl_MemberDef);
    tac_AddMethods(TA_taPtrList_impl,TA_taPtrList_impl_MethodDef);
  taMisc::types.Add(&TA_const_iFont_ref);
    TA_const_iFont_ref.AddParents(&TA_const_iFont);
  taMisc::types.Add(&TA_taPtrList_impl_ptr);
    TA_taPtrList_impl_ptr.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_TALPtr);
    TA_TALPtr.AddParents(&TA_taPtrList_impl_ptr);
  taMisc::types.Add(&TA_DataChangedReason);
    TA_DataChangedReason.AddParFormal(&TA_enum);
    tac_ThisEnum(TA_DataChangedReason, TA_DataChangedReason_EnumDef);
  taMisc::types.Add(&TA_taListItr);
    TA_taListItr.AddParents(&TA_int);
  taMisc::types.Add(&TA_taHashVal);
    TA_taHashVal.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_const_void);
    TA_const_void.AddParents(&TA_const, &TA_void);
  taMisc::types.Add(&TA_const_void_ptr);
    TA_const_void_ptr.AddParents(&TA_const_void);
  taMisc::types.Add(&TA_void_ptr_ptr);
    TA_void_ptr_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_const_taPtrList_impl);
    TA_const_taPtrList_impl.AddParents(&TA_const, &TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taPtrList_impl_ref);
    TA_const_taPtrList_impl_ref.AddParents(&TA_const_taPtrList_impl);
  taMisc::types.Add(&TA_TypeDef_ptr_ref);
  taMisc::types.Add(&TA_int_ref);
    TA_int_ref.AddParents(&TA_int);
  taMisc::types.Add(&TA_taDataLink_ptr_ptr);
    TA_taDataLink_ptr_ptr.AddParents(&TA_taDataLink);
  taMisc::types.Add(&TA_taListItr_ref);
    TA_taListItr_ref.AddParents(&TA_taListItr);
  taMisc::types.Add(&TA_taFixedArray_impl);
    TA_taFixedArray_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taFixedArray_impl,TA_taFixedArray_impl_MemberDef);
    tac_AddMethods(TA_taFixedArray_impl,TA_taFixedArray_impl_MethodDef);
  taMisc::types.Add(&TA_const_taFixedArray_impl);
    TA_const_taFixedArray_impl.AddParents(&TA_const, &TA_taFixedArray_impl);
  taMisc::types.Add(&TA_taFixedArray);
    TA_taFixedArray.AddParFormal(&TA_class, &TA_template);
    TA_taFixedArray.AddParents(&TA_taFixedArray_impl);
  taMisc::types.Add(&TA_const_taFixedArray_impl_ref);
    TA_const_taFixedArray_impl_ref.AddParents(&TA_const_taFixedArray_impl);
  taMisc::types.Add(&TA_taFixedArray_int_);
    TA_taFixedArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taFixedArray_int_.AddClassPar(&TA_taFixedArray,0);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taFixedArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taFixedArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taFixedArray_int_.sub_types.FindName("const_int"));
    TA_taFixedArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taFixedArray_int_.sub_types.Add(sbt);
    tac_AddMembers(TA_taFixedArray_int_,TA_taFixedArray_int__MemberDef);
    tac_AddMethods(TA_taFixedArray_int_,TA_taFixedArray_int__MethodDef);
  taMisc::types.Add(&TA_const_taFixedArray);
    TA_const_taFixedArray.AddParents(&TA_const, &TA_taFixedArray);
  taMisc::types.Add(&TA_const_int);
    TA_const_int.AddParents(&TA_const, &TA_int);
  taMisc::types.Add(&TA_const_taFixedArray_ref);
    TA_const_taFixedArray_ref.AddParents(&TA_const_taFixedArray);
  taMisc::types.Add(&TA_const_int_ref);
    TA_const_int_ref.AddParents(&TA_const_int);
  taMisc::types.Add(&TA_int_FixedArray);
    TA_int_FixedArray.AddParFormal(&TA_class);
    TA_int_FixedArray.AddClassPar(&TA_taFixedArray_int_,0);
    tac_AddMembers(TA_int_FixedArray,TA_int_FixedArray_MemberDef);
  taMisc::types.Add(&TA_int_FixedArray_ref);
    TA_int_FixedArray_ref.AddParents(&TA_int_FixedArray);
  taMisc::types.Add(&TA_const_int_FixedArray);
    TA_const_int_FixedArray.AddParents(&TA_const, &TA_int_FixedArray);
  taMisc::types.Add(&TA_taArray_impl);
    TA_taArray_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taArray_impl,TA_taArray_impl_MemberDef);
    tac_AddMethods(TA_taArray_impl,TA_taArray_impl_MethodDef);
  taMisc::types.Add(&TA_const_int_FixedArray_ref);
    TA_const_int_FixedArray_ref.AddParents(&TA_const_int_FixedArray);
  taMisc::types.Add(&TA_const_taArray_impl);
    TA_const_taArray_impl.AddParents(&TA_const, &TA_taArray_impl);
  taMisc::types.Add(&TA_const_taArray_impl_ref);
    TA_const_taArray_impl_ref.AddParents(&TA_const_taArray_impl);
  taMisc::types.Add(&TA_taPtrList);
    TA_taPtrList.AddParFormal(&TA_class, &TA_template);
    TA_taPtrList.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_taHashEl);
    TA_taHashEl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taHashEl,TA_taHashEl_MemberDef);
    tac_AddMethods(TA_taHashEl,TA_taHashEl_MethodDef);
  taMisc::types.Add(&TA_const_taPtrList);
    TA_const_taPtrList.AddParents(&TA_const, &TA_taPtrList);
  taMisc::types.Add(&TA_taPtrList_taHashEl_);
    TAI_taPtrList_taHashEl_ = new taPtrList<taHashEl>;
    TA_taPtrList_taHashEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taHashEl_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taHashEl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taHashEl);
    TA_taPtrList_taHashEl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashEl", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taHashEl);
    TA_taPtrList_taHashEl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashEl_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_taHashEl_.sub_types.FindName("const_taHashEl"));
    TA_taPtrList_taHashEl_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taHashEl_,TA_taPtrList_taHashEl__MethodDef);
  taMisc::types.Add(&TA_const_taPtrList_ref);
    TA_const_taPtrList_ref.AddParents(&TA_const_taPtrList);
  taMisc::types.Add(&TA_taHashEl_ptr);
    TA_taHashEl_ptr.AddParents(&TA_taHashEl);
  taMisc::types.Add(&TA_taHashBucket);
    TA_taHashBucket.AddParFormal(&TA_class);
    TA_taHashBucket.AddClassPar(&TA_taPtrList_taHashEl_,0);
    tac_AddMethods(TA_taHashBucket,TA_taHashBucket_MethodDef);
  taMisc::types.Add(&TA_taPtrList_taHashBucket_);
    TAI_taPtrList_taHashBucket_ = new taPtrList<taHashBucket>;
    TA_taPtrList_taHashBucket_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taHashBucket_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taHashBucket_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taHashBucket);
    TA_taPtrList_taHashBucket_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashBucket", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taHashBucket);
    TA_taPtrList_taHashBucket_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashBucket_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_taHashBucket_.sub_types.FindName("const_taHashBucket"));
    TA_taPtrList_taHashBucket_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taHashBucket_,TA_taPtrList_taHashBucket__MethodDef);
  taMisc::types.Add(&TA_int_ary);
    TA_int_ary.AddParFormal(&TA_ta_array);
    TA_int_ary.AddParents(&TA_int);
  taMisc::types.Add(&TA_taHashTable);
    TA_taHashTable.AddParFormal(&TA_class);
    TA_taHashTable.AddClassPar(&TA_taPtrList_taHashBucket_,0);
    tac_AddEnum(TA_taHashTable, "KeyType", "", "", "", "", TA_taHashTable_KeyType);
    tac_AddMembers(TA_taHashTable,TA_taHashTable_MemberDef);
    tac_AddMethods(TA_taHashTable,TA_taHashTable_MethodDef);
  taMisc::types.Add(&TA_taHashBucket_ptr);
    TA_taHashBucket_ptr.AddParents(&TA_taHashBucket);
  taMisc::types.Add(&TA_taHashTable_ptr);
    TA_taHashTable_ptr.AddParents(&TA_taHashTable);
  taMisc::types.Add(&TA_const_taHashTable);
    TA_const_taHashTable.AddParents(&TA_const, &TA_taHashTable);
  taMisc::types.Add(&TA_const_taHashTable_ref);
    TA_const_taHashTable_ref.AddParents(&TA_const_taHashTable);
  taMisc::types.Add(&TA_taPtrList_base);
    TA_taPtrList_base.AddParFormal(&TA_class, &TA_template);
    TA_taPtrList_base.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taPtrList_base);
    TA_const_taPtrList_base.AddParents(&TA_const, &TA_taPtrList_base);
  taMisc::types.Add(&TA_taPlainArray);
    TA_taPlainArray.AddParFormal(&TA_class, &TA_template);
    TA_taPlainArray.AddParents(&TA_taArray_impl);
  taMisc::types.Add(&TA_const_taPtrList_base_ref);
    TA_const_taPtrList_base_ref.AddParents(&TA_const_taPtrList_base);
  taMisc::types.Add(&TA_taFiler);
    TA_taFiler.AddParFormal(&TA_class);
    TA_taFiler.AddClassPar(&TA_class,0);
    tac_AddEnum(TA_taFiler, "OpenMode", "", "", "", "", TA_taFiler_OpenMode);
    tac_AddMembers(TA_taFiler,TA_taFiler_MemberDef);
    tac_AddMethods(TA_taFiler,TA_taFiler_MethodDef);
  taMisc::types.Add(&TA_const_taPlainArray);
    TA_const_taPlainArray.AddParents(&TA_const, &TA_taPlainArray);
  taMisc::types.Add(&TA_FilerOperation);
    TA_FilerOperation.AddParFormal(&TA_enum);
    tac_ThisEnum(TA_FilerOperation, TA_FilerOperation_EnumDef);
  taMisc::types.Add(&TA_const_taPlainArray_ref);
    TA_const_taPlainArray_ref.AddParents(&TA_const_taPlainArray);
  taMisc::types.Add(&TA_ifstream_ptr);
    TA_ifstream_ptr.AddParents(&TA_ifstream);
  taMisc::types.Add(&TA_ofstream_ptr);
    TA_ofstream_ptr.AddParents(&TA_ofstream);
  taMisc::types.Add(&TA_fstream_ptr);
    TA_fstream_ptr.AddParents(&TA_fstream);
  taMisc::types.Add(&TA_istream_ptr);
    TA_istream_ptr.AddParents(&TA_istream);
  taMisc::types.Add(&TA_taFiler_ref);
    TA_taFiler_ref.AddParents(&TA_taFiler);
  taMisc::types.Add(&TA_const_taFiler);
    TA_const_taFiler.AddParents(&TA_const, &TA_taFiler);
  taMisc::types.Add(&TA_const_taFiler_ref);
    TA_const_taFiler_ref.AddParents(&TA_const_taFiler);
  taMisc::types.Add(&TA_const_iColor_ptr);
  taMisc::types.Add(&TA_float_ref);
    TA_float_ref.AddParents(&TA_float);
  taMisc::types.Add(&TA_const_iColor_ref);
  taMisc::types.Add(&TA_const_QColor_ref);
  taMisc::types.Add(&TA_const_QColor_ptr);
  taMisc::types.Add(&TA_taDataLinkItr);
    TAI_taDataLinkItr = new taDataLinkItr;
    TA_taDataLinkItr.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiDataLink);
    TA_taiDataLink.AddParFormal(&TA_class);
    TA_taiDataLink.AddClassPar(&TA_taDataLink,0);
  taMisc::types.Add(&TA_css_fun_stub_ptr);
    TA_css_fun_stub_ptr.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_ta_void_fun);
    TA_ta_void_fun.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_ta_memb_ptr_class);
    TA_ta_memb_ptr_class.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_int_ta_memb_ptr_class);
    TA_int_ta_memb_ptr_class.AddParents(&TA_int, &TA_ta_memb_ptr_class);
  taMisc::types.Add(&TA_ta_memb_ptr);
    TA_ta_memb_ptr.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_taBase_ptr);
    TA_taBase_ptr.AddParents(&TA_taBase);
  taMisc::types.Add(&TA_TAPtr);
    TAI_TAPtr = new taBase*;
    TA_TAPtr.AddParents(&TA_taBase_ptr);
  taMisc::types.Add(&TA_taPlainArray_taString_);
    TAI_taPlainArray_taString_ = new taPlainArray<taString>;
    TA_taPlainArray_taString_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPlainArray_taString_.AddClassPar(&TA_taPlainArray,0);
    sbt = new TypeDef("taString_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("taString_ref", 1, 0, 1);
    sbt->AddParents(&TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString_ref", 1, 0, 1);
    sbt->AddParents(TA_taPlainArray_taString_.sub_types.FindName("const_taString"));
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    tac_AddMembers(TA_taPlainArray_taString_,TA_taPlainArray_taString__MemberDef);
    tac_AddMethods(TA_taPlainArray_taString_,TA_taPlainArray_taString__MethodDef);
  taMisc::types.Add(&TA_String_PArray);
    TA_String_PArray.AddParFormal(&TA_class);
    TA_String_PArray.AddClassPar(&TA_taPlainArray_taString_,0);
    tac_AddMethods(TA_String_PArray,TA_String_PArray_MethodDef);
  taMisc::types.Add(&TA_taPlainArray_int_);
    TAI_taPlainArray_int_ = new taPlainArray<int>;
    TA_taPlainArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPlainArray_int_.AddClassPar(&TA_taPlainArray,0);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taPlainArray_int_.sub_types.FindName("const_int"));
    TA_taPlainArray_int_.sub_types.Add(sbt);
    tac_AddMembers(TA_taPlainArray_int_,TA_taPlainArray_int__MemberDef);
    tac_AddMethods(TA_taPlainArray_int_,TA_taPlainArray_int__MethodDef);
  taMisc::types.Add(&TA_const_String_PArray);
    TA_const_String_PArray.AddParents(&TA_const, &TA_String_PArray);
  taMisc::types.Add(&TA_int_PArray);
    TA_int_PArray.AddParFormal(&TA_class, &TA_templ_inst);
    TA_int_PArray.AddClassPar(&TA_taPlainArray_int_,0);
  taMisc::types.Add(&TA_const_String_PArray_ref);
    TA_const_String_PArray_ref.AddParents(&TA_const_String_PArray);
  taMisc::types.Add(&TA_IApp);
    TA_IApp.AddParFormal(&TA_class);
    tac_AddMethods(TA_IApp,TA_IApp_MethodDef);
  taMisc::types.Add(&TA_IApp_ptr);
    TA_IApp_ptr.AddParents(&TA_IApp);
  taMisc::types.Add(&TA_String_PArray_ref);
    TA_String_PArray_ref.AddParents(&TA_String_PArray);
  taMisc::types.Add(&TA_taMisc);
    TAI_taMisc = new taMisc;
    TA_taMisc.AddParFormal(&TA_class);
    tac_AddEnum(TA_taMisc, "ShowMembs", "", "", "", "", TA_taMisc_ShowMembs);
    tac_AddEnum(TA_taMisc, "TypeInfo", "", "", "", "", TA_taMisc_TypeInfo);
    tac_AddEnum(TA_taMisc, "KeepTokens", "", "", "", "", TA_taMisc_KeepTokens);
    tac_AddEnum(TA_taMisc, "SaveFormat", "", "", "", "", TA_taMisc_SaveFormat);
    tac_AddEnum(TA_taMisc, "LoadVerbosity", "", "", "", "", TA_taMisc_LoadVerbosity);
    tac_AddEnum(TA_taMisc, "AutoRevert", "", "", "", "", TA_taMisc_AutoRevert);
    tac_AddMembers(TA_taMisc,TA_taMisc_MemberDef);
    tac_AddMethods(TA_taMisc,TA_taMisc_MethodDef);
  taMisc::types.Add(&TA_taRefN);
    TA_taRefN.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ITypedObject);
    TA_ITypedObject.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taRefN_ref);
    TA_taRefN_ref.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_taRefN_ptr);
    TA_taRefN_ptr.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_taiDataLink_ptr);
    TA_taiDataLink_ptr.AddParents(&TA_taiDataLink);
  taMisc::types.Add(&TA_IDataLinkClient);
    TA_IDataLinkClient.AddParFormal(&TA_class);
    TA_IDataLinkClient.AddClassPar(&TA_ITypedObject,0);
  taMisc::types.Add(&TA_taDataLink_ptr);
    TA_taDataLink_ptr.AddParents(&TA_taDataLink);
  taMisc::types.Add(&TA_taPtrList_IDataLinkClient_);
    TA_taPtrList_IDataLinkClient_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_IDataLinkClient_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_IDataLinkClient_PtrList);
    TA_IDataLinkClient_PtrList.AddParFormal(&TA_class);
    TA_IDataLinkClient_PtrList.AddClassPar(&TA_taPtrList_IDataLinkClient_,0);
  taMisc::types.Add(&TA_IDataLinkClient_ptr);
    TA_IDataLinkClient_ptr.AddParents(&TA_IDataLinkClient);
  taMisc::types.Add(&TA_taDataLink_ptr_ref);
    TA_taDataLink_ptr_ref.AddParents(&TA_taDataLink_ptr);
  taMisc::types.Add(&TA_const_TypeDef_ptr);
  taMisc::types.Add(&TA_taPtrList_EnumDef_);
    TAI_taPtrList_EnumDef_ = new taPtrList<EnumDef>;
    TA_taPtrList_EnumDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_EnumDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_EnumSpace);
    TAI_EnumSpace = new EnumSpace;
    TA_EnumSpace.AddParFormal(&TA_class);
    TA_EnumSpace.AddClassPar(&TA_taPtrList_EnumDef_,0);
  taMisc::types.Add(&TA_const_EnumSpace);
    TA_const_EnumSpace.AddParents(&TA_const, &TA_EnumSpace);
  taMisc::types.Add(&TA_const_EnumSpace_ref);
    TA_const_EnumSpace_ref.AddParents(&TA_const_EnumSpace);
  taMisc::types.Add(&TA_taPtrList_void_);
    TAI_taPtrList_void_ = new taPtrList<void>;
    TA_taPtrList_void_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_void_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_TokenSpace);
    TAI_TokenSpace = new TokenSpace;
    TA_TokenSpace.AddParFormal(&TA_class);
    TA_TokenSpace.AddClassPar(&TA_taPtrList_void_,0);
  taMisc::types.Add(&TA_taPtrList_MemberDef_);
    TAI_taPtrList_MemberDef_ = new taPtrList<MemberDef>;
    TA_taPtrList_MemberDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_MemberDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_const_TokenSpace);
    TA_const_TokenSpace.AddParents(&TA_const, &TA_TokenSpace);
  taMisc::types.Add(&TA_MemberSpace);
    TAI_MemberSpace = new MemberSpace;
    TA_MemberSpace.AddParFormal(&TA_class);
    TA_MemberSpace.AddClassPar(&TA_taPtrList_MemberDef_,0);
  taMisc::types.Add(&TA_const_TokenSpace_ref);
    TA_const_TokenSpace_ref.AddParents(&TA_const_TokenSpace);
  taMisc::types.Add(&TA_const_MemberSpace);
    TA_const_MemberSpace.AddParents(&TA_const, &TA_MemberSpace);
  taMisc::types.Add(&TA_const_MemberSpace_ref);
    TA_const_MemberSpace_ref.AddParents(&TA_const_MemberSpace);
  taMisc::types.Add(&TA_taPtrList_MethodDef_);
    TAI_taPtrList_MethodDef_ = new taPtrList<MethodDef>;
    TA_taPtrList_MethodDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_MethodDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_MethodSpace);
    TAI_MethodSpace = new MethodSpace;
    TA_MethodSpace.AddParFormal(&TA_class);
    TA_MethodSpace.AddClassPar(&TA_taPtrList_MethodDef_,0);
  taMisc::types.Add(&TA_const_MethodSpace);
    TA_const_MethodSpace.AddParents(&TA_const, &TA_MethodSpace);
  taMisc::types.Add(&TA_const_MethodSpace_ref);
    TA_const_MethodSpace_ref.AddParents(&TA_const_MethodSpace);
  taMisc::types.Add(&TA_taPtrList_TypeDef_);
    TAI_taPtrList_TypeDef_ = new taPtrList<TypeDef>;
    TA_taPtrList_TypeDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_TypeDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_TypeSpace);
    TAI_TypeSpace = new TypeSpace;
    TA_TypeSpace.AddParFormal(&TA_class);
    TA_TypeSpace.AddClassPar(&TA_taPtrList_TypeDef_,0);
  taMisc::types.Add(&TA_const_TypeSpace);
    TA_const_TypeSpace.AddParents(&TA_const, &TA_TypeSpace);
  taMisc::types.Add(&TA_TypeItem);
    TAI_TypeItem = new TypeItem;
    TA_TypeItem.AddParFormal(&TA_class);
    TA_TypeItem.AddClassPar(&TA_taRefN,0);
  taMisc::types.Add(&TA_const_TypeSpace_ref);
    TA_const_TypeSpace_ref.AddParents(&TA_const_TypeSpace);
  taMisc::types.Add(&TA_EnumSpace_ptr);
    TA_EnumSpace_ptr.AddParents(&TA_EnumSpace);
  taMisc::types.Add(&TA_MethodDef);
    TA_MethodDef.AddParents(&TA_TypeItem);
  taMisc::types.Add(&TA_const_TypeItem);
    TA_const_TypeItem.AddParents(&TA_const, &TA_TypeItem);
  taMisc::types.Add(&TA_MethodDef_ptr);
    TA_MethodDef_ptr.AddParents(&TA_MethodDef);
  taMisc::types.Add(&TA_const_TypeItem_ref);
    TA_const_TypeItem_ref.AddParents(&TA_const_TypeItem);
  taMisc::types.Add(&TA_EnumDef);
    TAI_EnumDef = new EnumDef;
    TA_EnumDef.AddParFormal(&TA_class);
    TA_EnumDef.AddClassPar(&TA_TypeItem,0);
  taMisc::types.Add(&TA_MemberDef);
    TA_MemberDef.AddParents(&TA_TypeItem);
  taMisc::types.Add(&TA_EnumDef_ptr);
    TA_EnumDef_ptr.AddParents(&TA_EnumDef);
  taMisc::types.Add(&TA_const_EnumDef);
    TA_const_EnumDef.AddParents(&TA_const, &TA_EnumDef);
  taMisc::types.Add(&TA_MemberDef_ptr);
    TA_MemberDef_ptr.AddParents(&TA_MemberDef);
  taMisc::types.Add(&TA_const_EnumDef_ref);
    TA_const_EnumDef_ref.AddParents(&TA_const_EnumDef);
  taMisc::types.Add(&TA_MemberSpace_ptr);
    TA_MemberSpace_ptr.AddParents(&TA_MemberSpace);
  taMisc::types.Add(&TA_const_MemberDef);
    TA_const_MemberDef.AddParents(&TA_const, &TA_MemberDef);
  taMisc::types.Add(&TA_const_MemberDef_ref);
    TA_const_MemberDef_ref.AddParents(&TA_const_MemberDef);
  taMisc::types.Add(&TA_MethodSpace_ptr);
    TA_MethodSpace_ptr.AddParents(&TA_MethodSpace);
  taMisc::types.Add(&TA_const_MethodDef);
    TA_const_MethodDef.AddParents(&TA_const, &TA_MethodDef);
  taMisc::types.Add(&TA_const_MethodDef_ref);
    TA_const_MethodDef_ref.AddParents(&TA_const_MethodDef);
  taMisc::types.Add(&TA_TypeSpace_ptr);
    TA_TypeSpace_ptr.AddParents(&TA_TypeSpace);
  taMisc::types.Add(&TA_const_TypeDef_ref);
  taMisc::types.Add(&TA_MemberDef_ptr_ptr);
    TA_MemberDef_ptr_ptr.AddParents(&TA_MemberDef);
  taMisc::types.Add(&TA_taiMimeSource);
    TA_taiMimeSource.AddParFormal(&TA_class);
    tac_AddMethods(TA_taiMimeSource,TA_taiMimeSource_MethodDef);
  taMisc::types.Add(&TA_taOBase);
    TAI_taOBase = new taOBase;
    TA_taOBase.AddParFormal(&TA_class);
    TA_taOBase.AddParCache(&TA_taBase);
    TA_taOBase.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_taOBase,TA_taOBase_MemberDef);
    tac_AddMethods(TA_taOBase,TA_taOBase_MethodDef);
  taMisc::types.Add(&TA_taDataView);
    TAI_taDataView = new taDataView;
    TA_taDataView.AddParFormal(&TA_class);
    TA_taDataView.AddParCache(&TA_taBase);
    TA_taDataView.AddClassPar(&TA_taOBase,(int)((unsigned long)((taOBase*)TAI_taDataView)-(unsigned long)TAI_taDataView), &TA_IDataLinkClient,(int)((unsigned long)((IDataLinkClient*)TAI_taDataView)-(unsigned long)TAI_taDataView));
    tac_AddMembers(TA_taDataView,TA_taDataView_MemberDef);
    tac_AddMethods(TA_taDataView,TA_taDataView_MethodDef);
  taMisc::types.Add(&TA_taNBase);
    TAI_taNBase = new taNBase;
    TA_taNBase.AddParFormal(&TA_class);
    TA_taNBase.AddParCache(&TA_taBase);
    TA_taNBase.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_taNBase,TA_taNBase_MemberDef);
  taMisc::types.Add(&TA_SelectEdit);
    TAI_SelectEdit = new SelectEdit;
    TA_SelectEdit.AddParFormal(&TA_class);
    TA_SelectEdit.AddParCache(&TA_taBase);
    TA_SelectEdit.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_SelectEdit,TA_SelectEdit_MemberDef);
    tac_AddMethods(TA_SelectEdit,TA_SelectEdit_MethodDef);
  taMisc::types.Add(&TA_tabMisc);
    TAI_tabMisc = new tabMisc;
    TA_tabMisc.AddParFormal(&TA_class);
    tac_AddMembers(TA_tabMisc,TA_tabMisc_MemberDef);
    tac_AddMethods(TA_tabMisc,TA_tabMisc_MethodDef);
  taMisc::types.Add(&TA_taBase_ref);
    TA_taBase_ref.AddParents(&TA_taBase);
  taMisc::types.Add(&TA_TAPtr_ptr);
    TA_TAPtr_ptr.AddParents(&TA_TAPtr);
  taMisc::types.Add(&TA_const_MemberDef_ptr);
    TA_const_MemberDef_ptr.AddParents(&TA_const_MemberDef);
  taMisc::types.Add(&TA_const_taBase);
    TA_const_taBase.AddParents(&TA_const, &TA_taBase);
  taMisc::types.Add(&TA_const_taBase_ptr);
    TA_const_taBase_ptr.AddParents(&TA_const_taBase);
  taMisc::types.Add(&TA_taiMimeSource_ptr);
    TA_taiMimeSource_ptr.AddParents(&TA_taiMimeSource);
  taMisc::types.Add(&TA_const_taiMimeSource);
    TA_const_taiMimeSource.AddParents(&TA_const, &TA_taiMimeSource);
  taMisc::types.Add(&TA_const_taiMimeSource_ptr);
    TA_const_taiMimeSource_ptr.AddParents(&TA_const_taiMimeSource);
  taMisc::types.Add(&TA_const_taBase_ref);
    TA_const_taBase_ref.AddParents(&TA_const_taBase);
  taMisc::types.Add(&TA_MemberDef_ptr_ref);
    TA_MemberDef_ptr_ref.AddParents(&TA_MemberDef_ptr);
  taMisc::types.Add(&TA_taDataView_ptr);
    TA_taDataView_ptr.AddParents(&TA_taDataView);
  taMisc::types.Add(&TA_taFiler_ptr);
    TA_taFiler_ptr.AddParents(&TA_taFiler);
  taMisc::types.Add(&TA_const_QPixmap_ptr);
  taMisc::types.Add(&TA_bool_ref);
    TA_bool_ref.AddParents(&TA_bool);
  taMisc::types.Add(&TA_SelectEdit_ptr);
    TA_SelectEdit_ptr.AddParents(&TA_SelectEdit);
  taMisc::types.Add(&TA_taPtr_impl);
    TA_taPtr_impl.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taOBase_ptr);
    TA_taOBase_ptr.AddParents(&TA_taOBase);
  taMisc::types.Add(&TA_const_taOBase);
    TA_const_taOBase.AddParents(&TA_const, &TA_taOBase);
  taMisc::types.Add(&TA_const_taOBase_ref);
    TA_const_taOBase_ref.AddParents(&TA_const_taOBase);
  taMisc::types.Add(&TA_const_taDataView);
    TA_const_taDataView.AddParents(&TA_const, &TA_taDataView);
  taMisc::types.Add(&TA_const_taDataView_ref);
    TA_const_taDataView_ref.AddParents(&TA_const_taDataView);
  taMisc::types.Add(&TA_const_taNBase);
    TA_const_taNBase.AddParents(&TA_const, &TA_taNBase);
  taMisc::types.Add(&TA_const_taNBase_ref);
    TA_const_taNBase_ref.AddParents(&TA_const_taNBase);
  taMisc::types.Add(&TA_taNBase_ptr);
    TA_taNBase_ptr.AddParents(&TA_taNBase);
  taMisc::types.Add(&TA_TANPtr);
    TAI_TANPtr = new taNBase*;
    TA_TANPtr.AddParents(&TA_taNBase_ptr);
  taMisc::types.Add(&TA_taFBase);
    TAI_taFBase = new taFBase;
    TA_taFBase.AddParFormal(&TA_class);
    TA_taFBase.AddParCache(&TA_taBase);
    TA_taFBase.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_taFBase,TA_taFBase_MemberDef);
  taMisc::types.Add(&TA_taPtrList_taBase_);
    TAI_taPtrList_taBase_ = new taPtrList<taBase>;
    TA_taPtrList_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taBase_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taPtrList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taPtrList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_taBase_.sub_types.FindName("const_taBase"));
    TA_taPtrList_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taBase_,TA_taPtrList_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taFBase);
    TA_const_taFBase.AddParents(&TA_const, &TA_taFBase);
  taMisc::types.Add(&TA_taPtrList_base_taBase_);
    TAI_taPtrList_base_taBase_ = new taPtrList_base<taBase>;
    TA_taPtrList_base_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_base_taBase_.AddClassPar(&TA_taPtrList_base,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taPtrList_base_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_base_taBase_.sub_types.FindName("const_taBase"));
    TA_taPtrList_base_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taPtrList_base_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_base_taBase_,TA_taPtrList_base_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taFBase_ref);
    TA_const_taFBase_ref.AddParents(&TA_const_taFBase);
  taMisc::types.Add(&TA_taBase_PtrList);
    TA_taBase_PtrList.AddParFormal(&TA_class);
    TA_taBase_PtrList.AddClassPar(&TA_taPtrList_taBase_,0);
  taMisc::types.Add(&TA_taPtrList_ta_base);
    TA_taPtrList_ta_base.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_ta_base.AddClassPar(&TA_taPtrList_base_taBase_,0);
  taMisc::types.Add(&TA_taList_impl);
    TAI_taList_impl = new taList_impl;
    TA_taList_impl.AddParFormal(&TA_class);
    TA_taList_impl.AddParCache(&TA_taBase);
    TA_taList_impl.AddClassPar(&TA_taOBase,(int)((unsigned long)((taOBase*)TAI_taList_impl)-(unsigned long)TAI_taList_impl), &TA_taPtrList_ta_base,(int)((unsigned long)((taPtrList_ta_base*)TAI_taList_impl)-(unsigned long)TAI_taList_impl));
    tac_AddMembers(TA_taList_impl,TA_taList_impl_MemberDef);
    tac_AddMethods(TA_taList_impl,TA_taList_impl_MethodDef);
  taMisc::types.Add(&TA_taList_impl_ptr);
    TA_taList_impl_ptr.AddParents(&TA_taList_impl);
  taMisc::types.Add(&TA_TABLPtr);
    TA_TABLPtr.AddParents(&TA_taList_impl_ptr);
  taMisc::types.Add(&TA_const_taList_impl);
    TA_const_taList_impl.AddParents(&TA_const, &TA_taList_impl);
  taMisc::types.Add(&TA_const_taList_impl_ref);
    TA_const_taList_impl_ref.AddParents(&TA_const_taList_impl);
  taMisc::types.Add(&TA_taList);
    TA_taList.AddParFormal(&TA_class, &TA_template);
    TA_taList.AddParCache(&TA_taBase);
    TA_taList.AddParents(&TA_taList_impl);
  taMisc::types.Add(&TA_taList_taBase_);
    TAI_taList_taBase_ = new taList<taBase>;
    TA_taList_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_taBase_.AddParCache(&TA_taBase);
    TA_taList_taBase_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_taBase_.sub_types.FindName("const_taBase"));
    TA_taList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_taBase_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_taBase__Orientation);
    tac_AddMethods(TA_taList_taBase_,TA_taList_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taList);
    TA_const_taList.AddParents(&TA_const, &TA_taList);
  taMisc::types.Add(&TA_taBase_List);
    TAI_taBase_List = new taBase_List;
    TA_taBase_List.AddParFormal(&TA_class);
    TA_taBase_List.AddParCache(&TA_taBase);
    TA_taBase_List.AddClassPar(&TA_taList_taBase_,0);
  taMisc::types.Add(&TA_const_taList_ref);
    TA_const_taList_ref.AddParents(&TA_const_taList);
  taMisc::types.Add(&TA_taBase_List_ptr);
    TA_taBase_List_ptr.AddParents(&TA_taBase_List);
  taMisc::types.Add(&TA_const_taBase_List);
    TA_const_taBase_List.AddParents(&TA_const, &TA_taBase_List);
  taMisc::types.Add(&TA_const_taBase_List_ref);
    TA_const_taBase_List_ref.AddParents(&TA_const_taBase_List);
  taMisc::types.Add(&TA_taArray_base);
    TA_taArray_base.AddParFormal(&TA_class);
    TA_taArray_base.AddParCache(&TA_taBase);
    TA_taArray_base.AddClassPar(&TA_taOBase,0, &TA_taArray_impl,0);
    tac_AddMethods(TA_taArray_base,TA_taArray_base_MethodDef);
  taMisc::types.Add(&TA_taArray);
    TA_taArray.AddParFormal(&TA_class, &TA_template);
    TA_taArray.AddParCache(&TA_taBase);
    TA_taArray.AddParents(&TA_taArray_base);
  taMisc::types.Add(&TA_const_taArray_base);
    TA_const_taArray_base.AddParents(&TA_const, &TA_taArray_base);
  taMisc::types.Add(&TA_taArray_int_);
    TA_taArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_int_.AddParCache(&TA_taBase);
    TA_taArray_int_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_int_.sub_types.FindName("const_int"));
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    tac_AddEnum(TA_taArray_int_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_int__Orientation);
    tac_AddMembers(TA_taArray_int_,TA_taArray_int__MemberDef);
    tac_AddMethods(TA_taArray_int_,TA_taArray_int__MethodDef);
  taMisc::types.Add(&TA_const_taArray_base_ref);
    TA_const_taArray_base_ref.AddParents(&TA_const_taArray_base);
  taMisc::types.Add(&TA_int_Array);
    TAI_int_Array = new int_Array;
    TA_int_Array.AddParFormal(&TA_class);
    TA_int_Array.AddParCache(&TA_taBase);
    TA_int_Array.AddClassPar(&TA_taArray_int_,0);
    tac_AddMembers(TA_int_Array,TA_int_Array_MemberDef);
    tac_AddMethods(TA_int_Array,TA_int_Array_MethodDef);
  taMisc::types.Add(&TA_taArray_float_);
    TA_taArray_float_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_float_.AddParCache(&TA_taBase);
    TA_taArray_float_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("float_ptr", 1, 1, 0);
    sbt->AddParents(&TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_float_.sub_types.FindName("const_float"));
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("float_ref", 1, 0, 1);
    sbt->AddParents(&TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    tac_AddEnum(TA_taArray_float_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_float__Orientation);
    tac_AddMembers(TA_taArray_float_,TA_taArray_float__MemberDef);
    tac_AddMethods(TA_taArray_float_,TA_taArray_float__MethodDef);
  taMisc::types.Add(&TA_const_int_Array);
    TA_const_int_Array.AddParents(&TA_const, &TA_int_Array);
  taMisc::types.Add(&TA_const_int_Array_ref);
    TA_const_int_Array_ref.AddParents(&TA_const_int_Array);
  taMisc::types.Add(&TA_const_float);
    TA_const_float.AddParents(&TA_const, &TA_float);
  taMisc::types.Add(&TA_const_float_ref);
    TA_const_float_ref.AddParents(&TA_const_float);
  taMisc::types.Add(&TA_float_Array);
    TAI_float_Array = new float_Array;
    TA_float_Array.AddParFormal(&TA_class);
    TA_float_Array.AddParCache(&TA_taBase);
    TA_float_Array.AddClassPar(&TA_taArray_float_,0);
    tac_AddMembers(TA_float_Array,TA_float_Array_MemberDef);
  taMisc::types.Add(&TA_taArray_double_);
    TA_taArray_double_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_double_.AddParCache(&TA_taBase);
    TA_taArray_double_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("double_ptr", 1, 1, 0);
    sbt->AddParents(&TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("const_double", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("const_double_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_double_.sub_types.FindName("const_double"));
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("double_ref", 1, 0, 1);
    sbt->AddParents(&TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    tac_AddEnum(TA_taArray_double_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_double__Orientation);
    tac_AddMembers(TA_taArray_double_,TA_taArray_double__MemberDef);
    tac_AddMethods(TA_taArray_double_,TA_taArray_double__MethodDef);
  taMisc::types.Add(&TA_const_float_Array);
    TA_const_float_Array.AddParents(&TA_const, &TA_float_Array);
  taMisc::types.Add(&TA_const_float_Array_ref);
    TA_const_float_Array_ref.AddParents(&TA_const_float_Array);
  taMisc::types.Add(&TA_double_ref);
    TA_double_ref.AddParents(&TA_double);
  taMisc::types.Add(&TA_const_double);
    TA_const_double.AddParents(&TA_const, &TA_double);
  taMisc::types.Add(&TA_const_double_ref);
    TA_const_double_ref.AddParents(&TA_const_double);
  taMisc::types.Add(&TA_double_Array);
    TAI_double_Array = new double_Array;
    TA_double_Array.AddParFormal(&TA_class);
    TA_double_Array.AddParCache(&TA_taBase);
    TA_double_Array.AddClassPar(&TA_taArray_double_,0);
    tac_AddMembers(TA_double_Array,TA_double_Array_MemberDef);
  taMisc::types.Add(&TA_taArray_taString_);
    TA_taArray_taString_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_taString_.AddParCache(&TA_taBase);
    TA_taArray_taString_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("taString_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_taString_.sub_types.FindName("const_taString"));
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("taString_ref", 1, 0, 1);
    sbt->AddParents(&TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    tac_AddEnum(TA_taArray_taString_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_taString__Orientation);
    tac_AddMembers(TA_taArray_taString_,TA_taArray_taString__MemberDef);
    tac_AddMethods(TA_taArray_taString_,TA_taArray_taString__MethodDef);
  taMisc::types.Add(&TA_const_double_Array);
    TA_const_double_Array.AddParents(&TA_const, &TA_double_Array);
  taMisc::types.Add(&TA_const_double_Array_ref);
    TA_const_double_Array_ref.AddParents(&TA_const_double_Array);
  taMisc::types.Add(&TA_String_Array);
    TAI_String_Array = new String_Array;
    TA_String_Array.AddParFormal(&TA_class);
    TA_String_Array.AddParCache(&TA_taBase);
    TA_String_Array.AddClassPar(&TA_taArray_taString_,0);
    tac_AddMembers(TA_String_Array,TA_String_Array_MemberDef);
  taMisc::types.Add(&TA_const_String_Array);
    TA_const_String_Array.AddParents(&TA_const, &TA_String_Array);
  taMisc::types.Add(&TA_SArg_Array);
    TAI_SArg_Array = new SArg_Array;
    TA_SArg_Array.AddParFormal(&TA_class);
    TA_SArg_Array.AddParCache(&TA_taBase);
    TA_SArg_Array.AddClassPar(&TA_String_Array,0);
    tac_AddMembers(TA_SArg_Array,TA_SArg_Array_MemberDef);
  taMisc::types.Add(&TA_const_String_Array_ref);
    TA_const_String_Array_ref.AddParents(&TA_const_String_Array);
  taMisc::types.Add(&TA_taArray_long_);
    TA_taArray_long_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_long_.AddParCache(&TA_taBase);
    TA_taArray_long_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("long_ptr", 1, 1, 0);
    sbt->AddParents(&TA_long);
    TA_taArray_long_.sub_types.Add(sbt);
    sbt = new TypeDef("const_long", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_long);
    TA_taArray_long_.sub_types.Add(sbt);
    sbt = new TypeDef("const_long_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_long_.sub_types.FindName("const_long"));
    TA_taArray_long_.sub_types.Add(sbt);
    sbt = new TypeDef("long_ref", 1, 0, 1);
    sbt->AddParents(&TA_long);
    TA_taArray_long_.sub_types.Add(sbt);
    tac_AddEnum(TA_taArray_long_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_long__Orientation);
    tac_AddMembers(TA_taArray_long_,TA_taArray_long__MemberDef);
    tac_AddMethods(TA_taArray_long_,TA_taArray_long__MethodDef);
  taMisc::types.Add(&TA_const_SArg_Array);
    TA_const_SArg_Array.AddParents(&TA_const, &TA_SArg_Array);
  taMisc::types.Add(&TA_const_SArg_Array_ref);
    TA_const_SArg_Array_ref.AddParents(&TA_const_SArg_Array);
  taMisc::types.Add(&TA_const_long);
    TA_const_long.AddParents(&TA_const, &TA_long);
  taMisc::types.Add(&TA_const_long_ref);
    TA_const_long_ref.AddParents(&TA_const_long);
  taMisc::types.Add(&TA_long_Array);
    TAI_long_Array = new long_Array;
    TA_long_Array.AddParFormal(&TA_class);
    TA_long_Array.AddParCache(&TA_taBase);
    TA_long_Array.AddClassPar(&TA_taArray_long_,0);
    tac_AddMembers(TA_long_Array,TA_long_Array_MemberDef);
    tac_AddMethods(TA_long_Array,TA_long_Array_MethodDef);
  taMisc::types.Add(&TA_voidptr);
    TA_voidptr.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_const_long_Array);
    TA_const_long_Array.AddParents(&TA_const, &TA_long_Array);
  taMisc::types.Add(&TA_taArray_voidptr_);
    TA_taArray_voidptr_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_voidptr_.AddParCache(&TA_taBase);
    TA_taArray_voidptr_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("voidptr_ptr", 1, 1, 0);
    sbt->AddParents(&TA_voidptr);
    TA_taArray_voidptr_.sub_types.Add(sbt);
    sbt = new TypeDef("const_voidptr", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_voidptr);
    TA_taArray_voidptr_.sub_types.Add(sbt);
    sbt = new TypeDef("const_voidptr_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_voidptr_.sub_types.FindName("const_voidptr"));
    TA_taArray_voidptr_.sub_types.Add(sbt);
    sbt = new TypeDef("voidptr_ref", 1, 0, 1);
    sbt->AddParents(&TA_voidptr);
    TA_taArray_voidptr_.sub_types.Add(sbt);
    tac_AddEnum(TA_taArray_voidptr_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_voidptr__Orientation);
    tac_AddMembers(TA_taArray_voidptr_,TA_taArray_voidptr__MemberDef);
    tac_AddMethods(TA_taArray_voidptr_,TA_taArray_voidptr__MethodDef);
  taMisc::types.Add(&TA_const_long_Array_ref);
    TA_const_long_Array_ref.AddParents(&TA_const_long_Array);
  taMisc::types.Add(&TA_voidptr_ref);
    TA_voidptr_ref.AddParents(&TA_voidptr);
  taMisc::types.Add(&TA_const_voidptr);
    TA_const_voidptr.AddParents(&TA_const, &TA_voidptr);
  taMisc::types.Add(&TA_const_voidptr_ref);
    TA_const_voidptr_ref.AddParents(&TA_const_voidptr);
  taMisc::types.Add(&TA_voidptr_Array);
    TAI_voidptr_Array = new voidptr_Array;
    TA_voidptr_Array.AddParFormal(&TA_class);
    TA_voidptr_Array.AddParCache(&TA_taBase);
    TA_voidptr_Array.AddClassPar(&TA_taArray_voidptr_,0);
    tac_AddMembers(TA_voidptr_Array,TA_voidptr_Array_MemberDef);
  taMisc::types.Add(&TA_const_voidptr_Array);
    TA_const_voidptr_Array.AddParents(&TA_const, &TA_voidptr_Array);
  taMisc::types.Add(&TA_const_voidptr_Array_ref);
    TA_const_voidptr_Array_ref.AddParents(&TA_const_voidptr_Array);
  taMisc::types.Add(&TA_taMatrix_impl);
    TA_taMatrix_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taMatrix_impl,TA_taMatrix_impl_MemberDef);
    tac_AddMethods(TA_taMatrix_impl,TA_taMatrix_impl_MethodDef);
  taMisc::types.Add(&TA_const_taMatrix_impl);
    TA_const_taMatrix_impl.AddParents(&TA_const, &TA_taMatrix_impl);
  taMisc::types.Add(&TA_taMatrix);
    TA_taMatrix.AddParFormal(&TA_class, &TA_template);
    TA_taMatrix.AddParents(&TA_taMatrix_impl);
  taMisc::types.Add(&TA_const_taMatrix_impl_ref);
    TA_const_taMatrix_impl_ref.AddParents(&TA_const_taMatrix_impl);
  taMisc::types.Add(&TA_taMatrix_impl_ptr);
    TA_taMatrix_impl_ptr.AddParents(&TA_taMatrix_impl);
  taMisc::types.Add(&TA_const_taMatrix);
    TA_const_taMatrix.AddParents(&TA_const, &TA_taMatrix);
  taMisc::types.Add(&TA_MatrixPtr_impl);
    TA_MatrixPtr_impl.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_taMatrix_ref);
    TA_const_taMatrix_ref.AddParents(&TA_const_taMatrix);
  taMisc::types.Add(&TA_MatrixPtr_impl_ref);
    TA_MatrixPtr_impl_ref.AddParents(&TA_MatrixPtr_impl);
  taMisc::types.Add(&TA_MatrixPtr);
    TA_MatrixPtr.AddParFormal(&TA_class, &TA_template);
    TA_MatrixPtr.AddParents(&TA_MatrixPtr_impl);
  taMisc::types.Add(&TA_taMatrix_byte_);
    TA_taMatrix_byte_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taMatrix_byte_.AddClassPar(&TA_taMatrix,0);
    sbt = new TypeDef("byte_ptr", 1, 1, 0);
    sbt->AddParents(&TA_byte);
    TA_taMatrix_byte_.sub_types.Add(sbt);
    sbt = new TypeDef("const_byte", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_byte);
    TA_taMatrix_byte_.sub_types.Add(sbt);
    sbt = new TypeDef("const_byte_ref", 1, 0, 1);
    sbt->AddParents(TA_taMatrix_byte_.sub_types.FindName("const_byte"));
    TA_taMatrix_byte_.sub_types.Add(sbt);
    sbt = new TypeDef("byte_ref", 1, 0, 1);
    sbt->AddParents(&TA_byte);
    TA_taMatrix_byte_.sub_types.Add(sbt);
    tac_AddMembers(TA_taMatrix_byte_,TA_taMatrix_byte__MemberDef);
    tac_AddMethods(TA_taMatrix_byte_,TA_taMatrix_byte__MethodDef);
  taMisc::types.Add(&TA_MatrixPtr_ref);
    TA_MatrixPtr_ref.AddParents(&TA_MatrixPtr);
  taMisc::types.Add(&TA_byte_Matrix);
    TA_byte_Matrix.AddParFormal(&TA_class);
    TA_byte_Matrix.AddClassPar(&TA_taMatrix_byte_,0);
    tac_AddMembers(TA_byte_Matrix,TA_byte_Matrix_MemberDef);
    tac_AddMethods(TA_byte_Matrix,TA_byte_Matrix_MethodDef);
  taMisc::types.Add(&TA_const_byte_Matrix);
    TA_const_byte_Matrix.AddParents(&TA_const, &TA_byte_Matrix);
  taMisc::types.Add(&TA_byte_Matrix_ref);
    TA_byte_Matrix_ref.AddParents(&TA_byte_Matrix);
  taMisc::types.Add(&TA_const_byte_Matrix_ref);
    TA_const_byte_Matrix_ref.AddParents(&TA_const_byte_Matrix);
  taMisc::types.Add(&TA_MatrixPtr_byte_Matrix_);
    TA_MatrixPtr_byte_Matrix_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_MatrixPtr_byte_Matrix_.AddClassPar(&TA_MatrixPtr,0);
  taMisc::types.Add(&TA_ByteMatrixPtr);
    TA_ByteMatrixPtr.AddParFormal(&TA_class, &TA_templ_inst);
    TA_ByteMatrixPtr.AddClassPar(&TA_MatrixPtr_byte_Matrix_,0);
  taMisc::types.Add(&TA_taMatrix_float_);
    TA_taMatrix_float_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taMatrix_float_.AddClassPar(&TA_taMatrix,0);
    sbt = new TypeDef("float_ptr", 1, 1, 0);
    sbt->AddParents(&TA_float);
    TA_taMatrix_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_float);
    TA_taMatrix_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float_ref", 1, 0, 1);
    sbt->AddParents(TA_taMatrix_float_.sub_types.FindName("const_float"));
    TA_taMatrix_float_.sub_types.Add(sbt);
    sbt = new TypeDef("float_ref", 1, 0, 1);
    sbt->AddParents(&TA_float);
    TA_taMatrix_float_.sub_types.Add(sbt);
    tac_AddMembers(TA_taMatrix_float_,TA_taMatrix_float__MemberDef);
    tac_AddMethods(TA_taMatrix_float_,TA_taMatrix_float__MethodDef);
  taMisc::types.Add(&TA_float_Matrix);
    TA_float_Matrix.AddParFormal(&TA_class);
    TA_float_Matrix.AddClassPar(&TA_taMatrix_float_,0);
    tac_AddMembers(TA_float_Matrix,TA_float_Matrix_MemberDef);
    tac_AddMethods(TA_float_Matrix,TA_float_Matrix_MethodDef);
  taMisc::types.Add(&TA_const_float_Matrix);
    TA_const_float_Matrix.AddParents(&TA_const, &TA_float_Matrix);
  taMisc::types.Add(&TA_float_Matrix_ref);
    TA_float_Matrix_ref.AddParents(&TA_float_Matrix);
  taMisc::types.Add(&TA_const_float_Matrix_ref);
    TA_const_float_Matrix_ref.AddParents(&TA_const_float_Matrix);
  taMisc::types.Add(&TA_MatrixPtr_float_Matrix_);
    TA_MatrixPtr_float_Matrix_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_MatrixPtr_float_Matrix_.AddClassPar(&TA_MatrixPtr,0);
  taMisc::types.Add(&TA_FloatMatrixPtr);
    TA_FloatMatrixPtr.AddParFormal(&TA_class, &TA_templ_inst);
    TA_FloatMatrixPtr.AddClassPar(&TA_MatrixPtr_float_Matrix_,0);
  taMisc::types.Add(&TA_taGroup_impl);
    TAI_taGroup_impl = new taGroup_impl;
    TA_taGroup_impl.AddParFormal(&TA_class);
    TA_taGroup_impl.AddParCache(&TA_taBase);
    TA_taGroup_impl.AddClassPar(&TA_taList_impl,0);
    tac_AddMembers(TA_taGroup_impl,TA_taGroup_impl_MemberDef);
    tac_AddMethods(TA_taGroup_impl,TA_taGroup_impl_MethodDef);
  taMisc::types.Add(&TA_taGroup_impl_ptr);
    TA_taGroup_impl_ptr.AddParents(&TA_taGroup_impl);
  taMisc::types.Add(&TA_TAGPtr);
    TA_TAGPtr.AddParents(&TA_taGroup_impl_ptr);
  taMisc::types.Add(&TA_taList_taGroup_impl_);
    TAI_taList_taGroup_impl_ = new taList<taGroup_impl>;
    TA_taList_taGroup_impl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_taGroup_impl_.AddParCache(&TA_taBase);
    TA_taList_taGroup_impl_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_taGroup_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_taGroup_impl_.sub_types.FindName("const_taBase"));
    TA_taList_taGroup_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taGroup_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("taGroup_impl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taGroup_impl);
    TA_taList_taGroup_impl_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_taGroup_impl_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_taGroup_impl__Orientation);
    tac_AddMethods(TA_taList_taGroup_impl_,TA_taList_taGroup_impl__MethodDef);
  taMisc::types.Add(&TA_TALOG);
    TAI_TALOG = new TALOG;
    TA_TALOG.AddParFormal(&TA_class, &TA_templ_inst);
    TA_TALOG.AddParCache(&TA_taBase);
    TA_TALOG.AddClassPar(&TA_taList_taGroup_impl_,0);
  taMisc::types.Add(&TA_taSubGroup);
    TAI_taSubGroup = new taSubGroup;
    TA_taSubGroup.AddParFormal(&TA_class);
    TA_taSubGroup.AddParCache(&TA_taBase);
    TA_taSubGroup.AddClassPar(&TA_TALOG,0);
    tac_AddMethods(TA_taSubGroup,TA_taSubGroup_MethodDef);
  taMisc::types.Add(&TA_taGroupItr);
    TA_taGroupItr.AddParents(&TA_int);
  taMisc::types.Add(&TA_const_taSubGroup);
    TA_const_taSubGroup.AddParents(&TA_const, &TA_taSubGroup);
  taMisc::types.Add(&TA_taLeafItr);
    TA_taLeafItr.AddParFormal(&TA_class);
    tac_AddMembers(TA_taLeafItr,TA_taLeafItr_MemberDef);
  taMisc::types.Add(&TA_const_taSubGroup_ref);
    TA_const_taSubGroup_ref.AddParents(&TA_const_taSubGroup);
  taMisc::types.Add(&TA_TALOG_ptr);
    TA_TALOG_ptr.AddParents(&TA_TALOG);
  taMisc::types.Add(&TA_taLeafItr_ref);
    TA_taLeafItr_ref.AddParents(&TA_taLeafItr);
  taMisc::types.Add(&TA_const_taGroup_impl);
    TA_const_taGroup_impl.AddParents(&TA_const, &TA_taGroup_impl);
  taMisc::types.Add(&TA_const_taGroup_impl_ref);
    TA_const_taGroup_impl_ref.AddParents(&TA_const_taGroup_impl);
  taMisc::types.Add(&TA_DMemShareVar);
    TAI_DMemShareVar = new DMemShareVar;
    TA_DMemShareVar.AddParFormal(&TA_class);
    TA_DMemShareVar.AddParCache(&TA_taBase);
    TA_DMemShareVar.AddClassPar(&TA_taBase,0);
  taMisc::types.Add(&TA_taPtrList_impl_ref);
    TA_taPtrList_impl_ref.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_DMemShareVar);
    TA_const_DMemShareVar.AddParents(&TA_const, &TA_DMemShareVar);
  taMisc::types.Add(&TA_const_DMemShareVar_ref);
    TA_const_DMemShareVar_ref.AddParents(&TA_const_DMemShareVar);
  taMisc::types.Add(&TA_DMemShare);
    TAI_DMemShare = new DMemShare;
    TA_DMemShare.AddParFormal(&TA_class);
    TA_DMemShare.AddParCache(&TA_taBase);
    TA_DMemShare.AddClassPar(&TA_taBase_List,0);
  taMisc::types.Add(&TA_const_DMemShare);
    TA_const_DMemShare.AddParents(&TA_const, &TA_DMemShare);
  taMisc::types.Add(&TA_const_DMemShare_ref);
    TA_const_DMemShare_ref.AddParents(&TA_const_DMemShare);
  taMisc::types.Add(&TA_taGroup);
    TA_taGroup.AddParFormal(&TA_class, &TA_template);
    TA_taGroup.AddParCache(&TA_taBase);
    TA_taGroup.AddParents(&TA_taGroup_impl);
  taMisc::types.Add(&TA_taGroup_taBase_);
    TAI_taGroup_taBase_ = new taGroup<taBase>;
    TA_taGroup_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_taBase_.AddParCache(&TA_taBase);
    TA_taGroup_taBase_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_taBase_.sub_types.FindName("const_taBase"));
    TA_taGroup_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_taBase_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_taBase_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_taBase__Orientation);
    tac_AddMethods(TA_taGroup_taBase_,TA_taGroup_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taGroup);
    TA_const_taGroup.AddParents(&TA_const, &TA_taGroup);
  taMisc::types.Add(&TA_taGroup_ptr);
    TA_taGroup_ptr.AddParents(&TA_taGroup);
  taMisc::types.Add(&TA_const_taGroup_ref);
    TA_const_taGroup_ref.AddParents(&TA_const_taGroup);
  taMisc::types.Add(&TA_taBase_Group);
    TAI_taBase_Group = new taBase_Group;
    TA_taBase_Group.AddParFormal(&TA_class);
    TA_taBase_Group.AddParCache(&TA_taBase);
    TA_taBase_Group.AddClassPar(&TA_taGroup_taBase_,0);
  taMisc::types.Add(&TA_const_taBase_Group);
    TA_const_taBase_Group.AddParents(&TA_const, &TA_taBase_Group);
  taMisc::types.Add(&TA_const_taBase_Group_ref);
    TA_const_taBase_Group_ref.AddParents(&TA_const_taBase_Group);
  taMisc::types.Add(&TA_dumpMisc);
    TA_dumpMisc.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_VPUnref);
    TA_VPUnref.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_VPUnref_);
    TAI_taPtrList_VPUnref_ = new taPtrList<VPUnref>;
    TA_taPtrList_VPUnref_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_VPUnref_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_VPUnref_ptr);
    TA_VPUnref_ptr.AddParents(&TA_VPUnref);
  taMisc::types.Add(&TA_VPUList);
    TA_VPUList.AddParFormal(&TA_class);
    TA_VPUList.AddClassPar(&TA_taPtrList_VPUnref_,0);
  taMisc::types.Add(&TA_DumpPathSub);
    TA_DumpPathSub.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_DumpPathSub_);
    TAI_taPtrList_DumpPathSub_ = new taPtrList<DumpPathSub>;
    TA_taPtrList_DumpPathSub_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_DumpPathSub_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_DumpPathSub_ptr);
    TA_DumpPathSub_ptr.AddParents(&TA_DumpPathSub);
  taMisc::types.Add(&TA_DumpPathSubList);
    TA_DumpPathSubList.AddParFormal(&TA_class);
    TA_DumpPathSubList.AddClassPar(&TA_taPtrList_DumpPathSub_,0);
  taMisc::types.Add(&TA_DumpPathToken);
    TA_DumpPathToken.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_DumpPathToken_);
    TAI_taPtrList_DumpPathToken_ = new taPtrList<DumpPathToken>;
    TA_taPtrList_DumpPathToken_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_DumpPathToken_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_DumpPathToken_ptr);
    TA_DumpPathToken_ptr.AddParents(&TA_DumpPathToken);
  taMisc::types.Add(&TA_DumpPathTokenList);
    TA_DumpPathTokenList.AddParFormal(&TA_class);
    TA_DumpPathTokenList.AddClassPar(&TA_taPtrList_DumpPathToken_,0);
  taMisc::types.Add(&TA_NameValue);
    TAI_NameValue = new NameValue;
    TA_NameValue.AddParFormal(&TA_class);
    TA_NameValue.AddParCache(&TA_taBase);
    TA_NameValue.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_NameValue,TA_NameValue_MemberDef);
  taMisc::types.Add(&TA_unsigned_long_ary);
    TA_unsigned_long_ary.AddParFormal(&TA_ta_array);
    TA_unsigned_long_ary.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_const_NameValue);
    TA_const_NameValue.AddParents(&TA_const, &TA_NameValue);
  taMisc::types.Add(&TA_const_NameValue_ref);
    TA_const_NameValue_ref.AddParents(&TA_const_NameValue);
  taMisc::types.Add(&TA_TypeDefault);
    TAI_TypeDefault = new TypeDefault;
    TA_TypeDefault.AddParFormal(&TA_class);
    TA_TypeDefault.AddParCache(&TA_taBase);
    TA_TypeDefault.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_TypeDefault,TA_TypeDefault_MemberDef);
    tac_AddMethods(TA_TypeDefault,TA_TypeDefault_MethodDef);
  taMisc::types.Add(&TA_taiMenuEl);
    TA_taiMenuEl.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_TypeDefault);
    TA_const_TypeDefault.AddParents(&TA_const, &TA_TypeDefault);
  taMisc::types.Add(&TA_cssProgSpace);
    TA_cssProgSpace.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_TypeDefault_ref);
    TA_const_TypeDefault_ref.AddParents(&TA_const_TypeDefault);
  taMisc::types.Add(&TA_cssProgSpace_ptr);
    TA_cssProgSpace_ptr.AddParents(&TA_cssProgSpace);
  taMisc::types.Add(&TA_ScriptBase);
    TA_ScriptBase.AddParFormal(&TA_class);
    tac_AddMembers(TA_ScriptBase,TA_ScriptBase_MemberDef);
    tac_AddMethods(TA_ScriptBase,TA_ScriptBase_MethodDef);
  taMisc::types.Add(&TA_taPtrList_ScriptBase_);
    TAI_taPtrList_ScriptBase_ = new taPtrList<ScriptBase>;
    TA_taPtrList_ScriptBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_ScriptBase_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("ScriptBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ScriptBase);
    TA_taPtrList_ScriptBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ScriptBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_ScriptBase);
    TA_taPtrList_ScriptBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ScriptBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_ScriptBase_.sub_types.FindName("const_ScriptBase"));
    TA_taPtrList_ScriptBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_ScriptBase_,TA_taPtrList_ScriptBase__MethodDef);
  taMisc::types.Add(&TA_ScriptBase_ref);
    TA_ScriptBase_ref.AddParents(&TA_ScriptBase);
  taMisc::types.Add(&TA_const_ScriptBase);
    TA_const_ScriptBase.AddParents(&TA_const, &TA_ScriptBase);
  taMisc::types.Add(&TA_ScriptBase_List);
    TA_ScriptBase_List.AddParFormal(&TA_class);
    TA_ScriptBase_List.AddClassPar(&TA_taPtrList_ScriptBase_,0);
  taMisc::types.Add(&TA_const_ScriptBase_ref);
    TA_const_ScriptBase_ref.AddParents(&TA_const_ScriptBase);
  taMisc::types.Add(&TA_Script);
    TAI_Script = new Script;
    TA_Script.AddParFormal(&TA_class);
    TA_Script.AddParCache(&TA_taBase);
    TA_Script.AddClassPar(&TA_taNBase,(int)((unsigned long)((taNBase*)TAI_Script)-(unsigned long)TAI_Script), &TA_ScriptBase,(int)((unsigned long)((ScriptBase*)TAI_Script)-(unsigned long)TAI_Script));
    tac_AddMembers(TA_Script,TA_Script_MemberDef);
    tac_AddMethods(TA_Script,TA_Script_MethodDef);
  taMisc::types.Add(&TA_taGroup_Script_);
    TAI_taGroup_Script_ = new taGroup<Script>;
    TA_taGroup_Script_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Script_.AddParCache(&TA_taBase);
    TA_taGroup_Script_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Script_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Script_.sub_types.FindName("const_taBase"));
    TA_taGroup_Script_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Script_.sub_types.Add(sbt);
    sbt = new TypeDef("Script_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Script);
    TA_taGroup_Script_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Script_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Script__Orientation);
    tac_AddMethods(TA_taGroup_Script_,TA_taGroup_Script__MethodDef);
  taMisc::types.Add(&TA_const_Script);
    TA_const_Script.AddParents(&TA_const, &TA_Script);
  taMisc::types.Add(&TA_const_Script_ref);
    TA_const_Script_ref.AddParents(&TA_const_Script);
  taMisc::types.Add(&TA_taiMenuEl_ptr);
    TA_taiMenuEl_ptr.AddParents(&TA_taiMenuEl);
  taMisc::types.Add(&TA_Script_MGroup);
    TAI_Script_MGroup = new Script_MGroup;
    TA_Script_MGroup.AddParFormal(&TA_class);
    TA_Script_MGroup.AddParCache(&TA_taBase);
    TA_Script_MGroup.AddClassPar(&TA_taGroup_Script_,0);
    tac_AddMethods(TA_Script_MGroup,TA_Script_MGroup_MethodDef);
  taMisc::types.Add(&TA_taiData);
    TAI_taiData = new taiData;
    TA_taiData.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_Script_MGroup);
    TA_const_Script_MGroup.AddParents(&TA_const, &TA_Script_MGroup);
  taMisc::types.Add(&TA_Dialog);
    TA_Dialog.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_Script_MGroup_ref);
    TA_const_Script_MGroup_ref.AddParents(&TA_const_Script_MGroup);
  taMisc::types.Add(&TA_taiMisc);
    TAI_taiMisc = new taiMisc;
    TA_taiMisc.AddParFormal(&TA_class);
    tac_AddEnum(TA_taiMisc, "SizeSpec", "", "", "", "", TA_taiMisc_SizeSpec);
    tac_AddEnum(TA_taiMisc, "FontSpec", " choose 1:", "", "", "", TA_taiMisc_FontSpec);
    tac_AddEnum(TA_taiMisc, "DialogSpec", " choose 1:", "", "", "", TA_taiMisc_DialogSpec);
    tac_AddMembers(TA_taiMisc,TA_taiMisc_MemberDef);
    tac_AddMethods(TA_taiMisc,TA_taiMisc_MethodDef);
  taMisc::types.Add(&TA_taiDataHost);
    TA_taiDataHost.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiAction);
    TA_taiAction.AddParFormal(&TA_class);
    tac_AddMembers(TA_taiAction,TA_taiAction_MemberDef);
    tac_AddMethods(TA_taiAction,TA_taiAction_MethodDef);
  taMisc::types.Add(&TA_taiEditDataHost);
    TA_taiEditDataHost.AddParFormal(&TA_class);
    TA_taiEditDataHost.AddClassPar(&TA_taiDataHost,0);
  taMisc::types.Add(&TA_taiMenuAction);
    TA_taiMenuAction.AddParFormal(&TA_class);
    TA_taiMenuAction.AddClassPar(&TA_taiAction,0);
  taMisc::types.Add(&TA_taiEditDataHost_ptr);
    TA_taiEditDataHost_ptr.AddParents(&TA_taiEditDataHost);
  taMisc::types.Add(&TA_taiMenu);
    TA_taiMenu.AddParFormal(&TA_class);
    TA_taiMenu.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_iAction_List);
    TA_iAction_List.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiMethodData);
    TA_taiMethodData.AddParFormal(&TA_class);
    TA_taiMethodData.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_const_taiAction);
    TA_const_taiAction.AddParents(&TA_const, &TA_taiAction);
  taMisc::types.Add(&TA_const_taiAction_ref);
    TA_const_taiAction_ref.AddParents(&TA_const_taiAction);
  taMisc::types.Add(&TA_taiAction_ref);
    TA_taiAction_ref.AddParents(&TA_taiAction);
  taMisc::types.Add(&TA_taiMenuAction_ref);
    TA_taiMenuAction_ref.AddParents(&TA_taiMenuAction);
  taMisc::types.Add(&TA_const_taiMenuAction);
    TA_const_taiMenuAction.AddParents(&TA_const, &TA_taiMenuAction);
  taMisc::types.Add(&TA_const_taiMenuAction_ref);
    TA_const_taiMenuAction_ref.AddParents(&TA_const_taiMenuAction);
  taMisc::types.Add(&TA_taiDataHost_ptr);
    TA_taiDataHost_ptr.AddParents(&TA_taiDataHost);
  taMisc::types.Add(&TA_taiData_ptr);
    TA_taiData_ptr.AddParents(&TA_taiData);
  taMisc::types.Add(&TA_taPtrList_taiData_);
    TAI_taPtrList_taiData_ = new taPtrList<taiData>;
    TA_taPtrList_taiData_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taiData_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taiDataList);
    TA_taiDataList.AddParFormal(&TA_class);
    TA_taiDataList.AddClassPar(&TA_taPtrList_taiData_,0);
  taMisc::types.Add(&TA_taiMenu_ptr);
    TA_taiMenu_ptr.AddParents(&TA_taiMenu);
  taMisc::types.Add(&TA_taiEditButton);
    TA_taiEditButton.AddParFormal(&TA_class);
    TA_taiEditButton.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiToggle);
    TA_taiToggle.AddParFormal(&TA_class);
    TA_taiToggle.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiTypeHier);
    TA_taiTypeHier.AddParFormal(&TA_class);
    TA_taiTypeHier.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiCompData);
    TA_taiCompData.AddParFormal(&TA_class);
    TA_taiCompData.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiField);
    TA_taiField.AddParFormal(&TA_class);
    TA_taiField.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiIncrField);
    TA_taiIncrField.AddParFormal(&TA_class);
    TA_taiIncrField.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiPlusToggle);
    TA_taiPlusToggle.AddParFormal(&TA_class);
    TA_taiPlusToggle.AddClassPar(&TA_taiCompData,0);
  taMisc::types.Add(&TA_taiComboBox);
    TA_taiComboBox.AddParFormal(&TA_class);
    TA_taiComboBox.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiBitBox);
    TA_taiBitBox.AddParFormal(&TA_class);
    TA_taiBitBox.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiPolyData);
    TA_taiPolyData.AddParFormal(&TA_class);
    TA_taiPolyData.AddClassPar(&TA_taiCompData,0);
  taMisc::types.Add(&TA_taiDataDeck);
    TA_taiDataDeck.AddParFormal(&TA_class);
    TA_taiDataDeck.AddClassPar(&TA_taiCompData,0);
  taMisc::types.Add(&TA_const_QObject_ptr);
  taMisc::types.Add(&TA_const_taiAction_ptr);
    TA_const_taiAction_ptr.AddParents(&TA_const_taiAction);
  taMisc::types.Add(&TA_const_taiMenuAction_ptr);
    TA_const_taiMenuAction_ptr.AddParents(&TA_const_taiMenuAction);
  taMisc::types.Add(&TA_taiSubMenuEl);
    TA_taiSubMenuEl.AddParFormal(&TA_class);
    TA_taiSubMenuEl.AddClassPar(&TA_taiMenuEl,0);
  taMisc::types.Add(&TA_taPtrList_taiMenuEl_);
    TAI_taPtrList_taiMenuEl_ = new taPtrList<taiMenuEl>;
    TA_taPtrList_taiMenuEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taiMenuEl_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taiMenuEl_List);
    TA_taiMenuEl_List.AddParFormal(&TA_class);
    TA_taiMenuEl_List.AddClassPar(&TA_taPtrList_taiMenuEl_,0);
  taMisc::types.Add(&TA_const_QKeySequence_ptr);
  taMisc::types.Add(&TA_taiSubMenuEl_ptr);
    TA_taiSubMenuEl_ptr.AddParents(&TA_taiSubMenuEl);
  taMisc::types.Add(&TA_taPtrList_taiMenu_);
    TAI_taPtrList_taiMenu_ = new taPtrList<taiMenu>;
    TA_taPtrList_taiMenu_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taiMenu_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taiMenu_List);
    TA_taiMenu_List.AddParFormal(&TA_class);
    TA_taiMenu_List.AddClassPar(&TA_taPtrList_taiMenu_,0);
  taMisc::types.Add(&TA_const_QIconSet_ref);
  taMisc::types.Add(&TA_const_TAPtr);
    TA_const_TAPtr.AddParents(&TA_const, &TA_TAPtr);
  taMisc::types.Add(&TA_taiObjChooser);
    TA_taiObjChooser.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiFileButton);
    TA_taiFileButton.AddParFormal(&TA_class);
    TA_taiFileButton.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiObjChooser_ptr);
    TA_taiObjChooser_ptr.AddParents(&TA_taiObjChooser);
  taMisc::types.Add(&TA_taiMenuAction_ptr);
    TA_taiMenuAction_ptr.AddParents(&TA_taiMenuAction);
  taMisc::types.Add(&TA_taiElBase);
    TA_taiElBase.AddParFormal(&TA_class);
    TA_taiElBase.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiSubToken);
    TA_taiSubToken.AddParFormal(&TA_class);
    TA_taiSubToken.AddClassPar(&TA_taiElBase,0);
  taMisc::types.Add(&TA_taiToken);
    TA_taiToken.AddParFormal(&TA_class);
    TA_taiToken.AddClassPar(&TA_taiElBase,0);
  taMisc::types.Add(&TA_taiMemberDefMenu);
    TA_taiMemberDefMenu.AddParFormal(&TA_class);
    TA_taiMemberDefMenu.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiMethodDefMenu);
    TA_taiMethodDefMenu.AddParFormal(&TA_class);
    TA_taiMethodDefMenu.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiMethMenu);
    TA_taiMethMenu.AddParFormal(&TA_class);
    TA_taiMethMenu.AddClassPar(&TA_taiMethodData,0);
  taMisc::types.Add(&TA_taiMethButton);
    TA_taiMethButton.AddParFormal(&TA_class);
    TA_taiMethButton.AddClassPar(&TA_taiMethodData,0);
  taMisc::types.Add(&TA_taiMethToggle);
    TA_taiMethToggle.AddParFormal(&TA_class);
    TA_taiMethToggle.AddClassPar(&TA_taiMethodData,0);
  taMisc::types.Add(&TA_iDataPanel);
    TA_iDataPanel.AddParFormal(&TA_class);
    TA_iDataPanel.AddParents(&TA_QFrame);
  taMisc::types.Add(&TA_HiLightButton);
    TA_HiLightButton.AddParFormal(&TA_class);
    tac_AddMembers(TA_HiLightButton,TA_HiLightButton_MemberDef);
    tac_AddMethods(TA_HiLightButton,TA_HiLightButton_MethodDef);
  taMisc::types.Add(&TA_iContextLabel);
    TA_iContextLabel.AddParFormal(&TA_class);
    tac_AddMethods(TA_iContextLabel,TA_iContextLabel_MethodDef);
  taMisc::types.Add(&TA_taiChoiceDialog);
    TA_taiChoiceDialog.AddParFormal(&TA_class);
    tac_AddMembers(TA_taiChoiceDialog,TA_taiChoiceDialog_MemberDef);
    tac_AddMethods(TA_taiChoiceDialog,TA_taiChoiceDialog_MethodDef);
  taMisc::types.Add(&TA_EditDataPanel);
    TA_EditDataPanel.AddParFormal(&TA_class);
    TA_EditDataPanel.AddClassPar(&TA_class,0);
  taMisc::types.Add(&TA_HiLightButton_ptr);
    TA_HiLightButton_ptr.AddParents(&TA_HiLightButton);
  taMisc::types.Add(&TA_Dialog_ptr);
    TA_Dialog_ptr.AddParents(&TA_Dialog);
  taMisc::types.Add(&TA_iContextLabel_ptr);
    TA_iContextLabel_ptr.AddParents(&TA_iContextLabel);
  taMisc::types.Add(&TA_Dialog_ptr_ref);
    TA_Dialog_ptr_ref.AddParents(&TA_Dialog_ptr);
  taMisc::types.Add(&TA_Member_List);
    TAI_Member_List = new Member_List;
    TA_Member_List.AddParFormal(&TA_class);
    TA_Member_List.AddClassPar(&TA_taPtrList_MemberDef_,0);
  taMisc::types.Add(&TA_EditDataPanel_ptr);
    TA_EditDataPanel_ptr.AddParents(&TA_EditDataPanel);
  taMisc::types.Add(&TA_taiDataList_ptr);
    TA_taiDataList_ptr.AddParents(&TA_taiDataList);
  taMisc::types.Add(&TA_const_taiDataList);
    TA_const_taiDataList.AddParents(&TA_const, &TA_taiDataList);
  taMisc::types.Add(&TA_const_taiDataList_ref);
    TA_const_taiDataList_ref.AddParents(&TA_const_taiDataList);
  taMisc::types.Add(&TA_taiMethodData_ptr);
    TA_taiMethodData_ptr.AddParents(&TA_taiMethodData);
  taMisc::types.Add(&TA_iDataPanelFrame);
    TA_iDataPanelFrame.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iDataPanelSet);
    TA_iDataPanelSet.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiTypeBase);
    TAI_taiTypeBase = new taiTypeBase;
    TA_taiTypeBase.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiTypeBase_ptr);
    TA_taiTypeBase_ptr.AddParents(&TA_taiTypeBase);
  taMisc::types.Add(&TA_taiViewType);
    TAI_taiViewType = new taiViewType;
    TA_taiViewType.AddParFormal(&TA_class);
    TA_taiViewType.AddClassPar(&TA_taiTypeBase,0);
  taMisc::types.Add(&TA_taiType);
    TAI_taiType = new taiType;
    TA_taiType.AddParFormal(&TA_class);
    TA_taiType.AddClassPar(&TA_taiTypeBase,0);
  taMisc::types.Add(&TA_taiViewType_ptr);
    TA_taiViewType_ptr.AddParents(&TA_taiViewType);
  taMisc::types.Add(&TA_taiMember);
    TAI_taiMember = new taiMember;
    TA_taiMember.AddParFormal(&TA_class);
    TA_taiMember.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiEdit);
    TAI_taiEdit = new taiEdit;
    TA_taiEdit.AddParFormal(&TA_class);
    TA_taiEdit.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiMember_ptr);
    TA_taiMember_ptr.AddParents(&TA_taiMember);
  taMisc::types.Add(&TA_taiType_ptr_ptr);
    TA_taiType_ptr_ptr.AddParents(&TA_taiType);
  taMisc::types.Add(&TA_taiEdit_ptr);
    TA_taiEdit_ptr.AddParents(&TA_taiEdit);
  taMisc::types.Add(&TA_taiViewType_ptr_ptr);
    TA_taiViewType_ptr_ptr.AddParents(&TA_taiViewType);
  taMisc::types.Add(&TA_taiType_ptr);
    TA_taiType_ptr.AddParents(&TA_taiType);
  taMisc::types.Add(&TA_taiMethod);
    TAI_taiMethod = new taiMethod;
    TA_taiMethod.AddParFormal(&TA_class);
    TA_taiMethod.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_iDataPanel_ptr);
  taMisc::types.Add(&TA_taiMethod_ptr);
    TA_taiMethod_ptr.AddParents(&TA_taiMethod);
  taMisc::types.Add(&TA_iDataPanelFrame_ptr);
    TA_iDataPanelFrame_ptr.AddParents(&TA_iDataPanelFrame);
  taMisc::types.Add(&TA_iDataPanelSet_ptr);
  taMisc::types.Add(&TA_taiEdit_ptr_ptr);
    TA_taiEdit_ptr_ptr.AddParents(&TA_taiEdit);
  taMisc::types.Add(&TA_taiArgType);
    TAI_taiArgType = new taiArgType;
    TA_taiArgType.AddParFormal(&TA_class);
    TA_taiArgType.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taPtrList_taiType_);
    TAI_taPtrList_taiType_ = new taPtrList<taiType>;
    TA_taPtrList_taiType_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taiType_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taiType_List);
    TA_taiType_List.AddParFormal(&TA_class);
    TA_taiType_List.AddClassPar(&TA_taPtrList_taiType_,0);
  taMisc::types.Add(&TA_taiIntType);
    TAI_taiIntType = new taiIntType;
    TA_taiIntType.AddParFormal(&TA_class);
    TA_taiIntType.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiEnumType);
    TAI_taiEnumType = new taiEnumType;
    TA_taiEnumType.AddParFormal(&TA_class);
    TA_taiEnumType.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiBoolType);
    TAI_taiBoolType = new taiBoolType;
    TA_taiBoolType.AddParFormal(&TA_class);
    TA_taiBoolType.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiClassType);
    TAI_taiClassType = new taiClassType;
    TA_taiClassType.AddParFormal(&TA_class);
    TA_taiClassType.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiStringType);
    TAI_taiStringType = new taiStringType;
    TA_taiStringType.AddParFormal(&TA_class);
    TA_taiStringType.AddClassPar(&TA_taiClassType,0);
  taMisc::types.Add(&TA_gpiListType);
    TAI_gpiListType = new gpiListType;
    TA_gpiListType.AddParFormal(&TA_class);
    TA_gpiListType.AddClassPar(&TA_taiClassType,0);
  taMisc::types.Add(&TA_gpiGroupType);
    TAI_gpiGroupType = new gpiGroupType;
    TA_gpiGroupType.AddParFormal(&TA_class);
    TA_gpiGroupType.AddClassPar(&TA_gpiListType,0);
  taMisc::types.Add(&TA_gpiArray_Type);
    TAI_gpiArray_Type = new gpiArray_Type;
    TA_gpiArray_Type.AddParFormal(&TA_class);
    TA_gpiArray_Type.AddClassPar(&TA_taiClassType,0);
  taMisc::types.Add(&TA_taiTokenPtrType);
    TAI_taiTokenPtrType = new taiTokenPtrType;
    TA_taiTokenPtrType.AddParFormal(&TA_class);
    TA_taiTokenPtrType.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiTypePtr);
    TAI_taiTypePtr = new taiTypePtr;
    TA_taiTypePtr.AddParFormal(&TA_class);
    TA_taiTypePtr.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiFilePtrType);
    TAI_taiFilePtrType = new taiFilePtrType;
    TA_taiFilePtrType.AddParFormal(&TA_class);
    TA_taiFilePtrType.AddClassPar(&TA_taiType,0);
  taMisc::types.Add(&TA_taiDefaultEdit);
    TAI_taiDefaultEdit = new taiDefaultEdit;
    TA_taiDefaultEdit.AddParFormal(&TA_class);
    TA_taiDefaultEdit.AddClassPar(&TA_taiEdit,0);
  taMisc::types.Add(&TA_taiMember_ptr_ptr);
    TA_taiMember_ptr_ptr.AddParents(&TA_taiMember);
  taMisc::types.Add(&TA_taiTokenPtrMember);
    TAI_taiTokenPtrMember = new taiTokenPtrMember;
    TA_taiTokenPtrMember.AddParFormal(&TA_class);
    TA_taiTokenPtrMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_TypeDefault_ptr);
    TA_TypeDefault_ptr.AddParents(&TA_TypeDefault);
  taMisc::types.Add(&TA_taiDefaultToken);
    TAI_taiDefaultToken = new taiDefaultToken;
    TA_taiDefaultToken.AddParFormal(&TA_class);
    TA_taiDefaultToken.AddClassPar(&TA_taiTokenPtrMember,0);
  taMisc::types.Add(&TA_taiSubTokenPtrMember);
    TAI_taiSubTokenPtrMember = new taiSubTokenPtrMember;
    TA_taiSubTokenPtrMember.AddParFormal(&TA_class);
    TA_taiSubTokenPtrMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_taiTypePtrMember);
    TAI_taiTypePtrMember = new taiTypePtrMember;
    TA_taiTypePtrMember.AddParFormal(&TA_class);
    TA_taiTypePtrMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_taiMemberDefPtrMember);
    TAI_taiMemberDefPtrMember = new taiMemberDefPtrMember;
    TA_taiMemberDefPtrMember.AddParFormal(&TA_class);
    TA_taiMemberDefPtrMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_taiFunPtrMember);
    TAI_taiFunPtrMember = new taiFunPtrMember;
    TA_taiFunPtrMember.AddParFormal(&TA_class);
    TA_taiFunPtrMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_taiCondEditMember);
    TAI_taiCondEditMember = new taiCondEditMember;
    TA_taiCondEditMember.AddParFormal(&TA_class);
    TA_taiCondEditMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_taiTDefaultMember);
    TAI_taiTDefaultMember = new taiTDefaultMember;
    TA_taiTDefaultMember.AddParFormal(&TA_class);
    TA_taiTDefaultMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_taiMethod_ptr_ptr);
    TA_taiMethod_ptr_ptr.AddParents(&TA_taiMethod);
  taMisc::types.Add(&TA_taiButtonMethod);
    TAI_taiButtonMethod = new taiButtonMethod;
    TA_taiButtonMethod.AddParFormal(&TA_class);
    TA_taiButtonMethod.AddClassPar(&TA_taiMethod,0);
  taMisc::types.Add(&TA_taiMenuMethod);
    TAI_taiMenuMethod = new taiMenuMethod;
    TA_taiMenuMethod.AddParFormal(&TA_class);
    TA_taiMenuMethod.AddClassPar(&TA_taiMethod,0);
  taMisc::types.Add(&TA_taiArgType_ptr);
    TA_taiArgType_ptr.AddParents(&TA_taiArgType);
  taMisc::types.Add(&TA_taiStreamArgType);
    TAI_taiStreamArgType = new taiStreamArgType;
    TA_taiStreamArgType.AddParFormal(&TA_class);
    TA_taiStreamArgType.AddClassPar(&TA_taiArgType,0);
  taMisc::types.Add(&TA_taiBoolArgType);
    TAI_taiBoolArgType = new taiBoolArgType;
    TA_taiBoolArgType.AddParFormal(&TA_class);
    TA_taiBoolArgType.AddClassPar(&TA_taiArgType,0);
  taMisc::types.Add(&TA_taiTokenPtrArgType);
    TAI_taiTokenPtrArgType = new taiTokenPtrArgType;
    TA_taiTokenPtrArgType.AddParFormal(&TA_class);
    TA_taiTokenPtrArgType.AddClassPar(&TA_taiArgType,0);
  taMisc::types.Add(&TA_taiTypePtrArgType);
    TAI_taiTypePtrArgType = new taiTypePtrArgType;
    TA_taiTypePtrArgType.AddParFormal(&TA_class);
    TA_taiTypePtrArgType.AddClassPar(&TA_taiArgType,0);
  taMisc::types.Add(&TA_taiMemberPtrArgType);
    TAI_taiMemberPtrArgType = new taiMemberPtrArgType;
    TA_taiMemberPtrArgType.AddParFormal(&TA_class);
    TA_taiMemberPtrArgType.AddClassPar(&TA_taiArgType,0);
  taMisc::types.Add(&TA_taiMethodPtrArgType);
    TAI_taiMethodPtrArgType = new taiMethodPtrArgType;
    TA_taiMethodPtrArgType.AddParFormal(&TA_class);
    TA_taiMethodPtrArgType.AddClassPar(&TA_taiArgType,0);
  taMisc::types.Add(&TA_gpiDefaultEl);
    TAI_gpiDefaultEl = new gpiDefaultEl;
    TA_gpiDefaultEl.AddParFormal(&TA_class);
    TA_gpiDefaultEl.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_gpiLinkGP);
    TAI_gpiLinkGP = new gpiLinkGP;
    TA_gpiLinkGP.AddParFormal(&TA_class);
    TA_gpiLinkGP.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_gpiLinkList);
    TAI_gpiLinkList = new gpiLinkList;
    TA_gpiLinkList.AddParFormal(&TA_class);
    TA_gpiLinkList.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_gpiFromGpTokenPtrMember);
    TAI_gpiFromGpTokenPtrMember = new gpiFromGpTokenPtrMember;
    TA_gpiFromGpTokenPtrMember.AddParFormal(&TA_class);
    TA_gpiFromGpTokenPtrMember.AddClassPar(&TA_taiTokenPtrMember,0);
  taMisc::types.Add(&TA_gpiTAPtrArgType);
    TAI_gpiTAPtrArgType = new gpiTAPtrArgType;
    TA_gpiTAPtrArgType.AddParFormal(&TA_class);
    TA_gpiTAPtrArgType.AddClassPar(&TA_taiTokenPtrArgType,0);
  taMisc::types.Add(&TA_gpiInObjArgType);
    TAI_gpiInObjArgType = new gpiInObjArgType;
    TA_gpiInObjArgType.AddParFormal(&TA_class);
    TA_gpiInObjArgType.AddClassPar(&TA_gpiTAPtrArgType,0);
  taMisc::types.Add(&TA_gpiFromGpArgType);
    TAI_gpiFromGpArgType = new gpiFromGpArgType;
    TA_gpiFromGpArgType.AddParFormal(&TA_class);
    TA_gpiFromGpArgType.AddClassPar(&TA_taiTokenPtrArgType,0);
  taMisc::types.Add(&TA_gpiListEdit);
    TAI_gpiListEdit = new gpiListEdit;
    TA_gpiListEdit.AddParFormal(&TA_class);
    TA_gpiListEdit.AddClassPar(&TA_taiEdit,0);
  taMisc::types.Add(&TA_gpiGroupEdit);
    TAI_gpiGroupEdit = new gpiGroupEdit;
    TA_gpiGroupEdit.AddParFormal(&TA_class);
    TA_gpiGroupEdit.AddClassPar(&TA_gpiListEdit,0);
  taMisc::types.Add(&TA_gpiArrayEdit);
    TAI_gpiArrayEdit = new gpiArrayEdit;
    TA_gpiArrayEdit.AddParFormal(&TA_class);
    TA_gpiArrayEdit.AddClassPar(&TA_taiEdit,0);
  taMisc::types.Add(&TA_SArgEdit);
    TAI_SArgEdit = new SArgEdit;
    TA_SArgEdit.AddParFormal(&TA_class);
    TA_SArgEdit.AddClassPar(&TA_gpiArrayEdit,0);
  taMisc::types.Add(&TA_gpiSelectEdit);
    TAI_gpiSelectEdit = new gpiSelectEdit;
    TA_gpiSelectEdit.AddParFormal(&TA_class);
    TA_gpiSelectEdit.AddClassPar(&TA_taiEdit,0);
  taMisc::types.Add(&TA_tabViewType);
    TAI_tabViewType = new tabViewType;
    TA_tabViewType.AddParFormal(&TA_class);
    TA_tabViewType.AddClassPar(&TA_taiViewType,0);
  taMisc::types.Add(&TA_tabOViewType);
    TAI_tabOViewType = new tabOViewType;
    TA_tabOViewType.AddParFormal(&TA_class);
    TA_tabOViewType.AddClassPar(&TA_tabViewType,0);
  taMisc::types.Add(&TA_tabListViewType);
    TAI_tabListViewType = new tabListViewType;
    TA_tabListViewType.AddParFormal(&TA_class);
    TA_tabListViewType.AddClassPar(&TA_tabOViewType,0);
  taMisc::types.Add(&TA_tabGroupViewType);
    TAI_tabGroupViewType = new tabGroupViewType;
    TA_tabGroupViewType.AddParFormal(&TA_class);
    TA_tabGroupViewType.AddClassPar(&TA_tabListViewType,0);
  taMisc::types.Add(&TA_taiMimeItem);
    TA_taiMimeItem.AddParFormal(&TA_class);
    tac_AddMethods(TA_taiMimeItem,TA_taiMimeItem_MethodDef);
  taMisc::types.Add(&TA_taiMimeItem_ptr);
    TA_taiMimeItem_ptr.AddParents(&TA_taiMimeItem);
  taMisc::types.Add(&TA_taiClipData);
    TA_taiClipData.AddParFormal(&TA_class);
    tac_AddEnum(TA_taiClipData, "EditAction", " extended definitions of clipboard operations for ta/pdp, divided into two field banks: OP and SRC", "", "", "", TA_taiClipData_EditAction);
    tac_AddMembers(TA_taiClipData,TA_taiClipData_MemberDef);
    tac_AddMethods(TA_taiClipData,TA_taiClipData_MethodDef);
  taMisc::types.Add(&TA_taiSingleClipData);
    TA_taiSingleClipData.AddParFormal(&TA_class);
    TA_taiSingleClipData.AddClassPar(&TA_taiClipData,0);
  taMisc::types.Add(&TA_taiMultiClipData);
    TA_taiMultiClipData.AddParFormal(&TA_class);
    TA_taiMultiClipData.AddClassPar(&TA_taiClipData,0);
  taMisc::types.Add(&TA_taPtrList_taiMimeItem_);
    TAI_taPtrList_taiMimeItem_ = new taPtrList<taiMimeItem>;
    TA_taPtrList_taiMimeItem_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taiMimeItem_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taiMimeItem_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taiMimeItem);
    TA_taPtrList_taiMimeItem_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taiMimeItem", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taiMimeItem);
    TA_taPtrList_taiMimeItem_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taiMimeItem_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_taiMimeItem_.sub_types.FindName("const_taiMimeItem"));
    TA_taPtrList_taiMimeItem_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taiMimeItem_,TA_taPtrList_taiMimeItem__MethodDef);
  taMisc::types.Add(&TA_tabSndMimeItem);
    TA_tabSndMimeItem.AddParFormal(&TA_class);
    TA_tabSndMimeItem.AddClassPar(&TA_taiMimeItem,0);
  taMisc::types.Add(&TA_taiMimeItem_List);
    TA_taiMimeItem_List.AddParFormal(&TA_class);
    TA_taiMimeItem_List.AddClassPar(&TA_taPtrList_taiMimeItem_,0);
    tac_AddMethods(TA_taiMimeItem_List,TA_taiMimeItem_List_MethodDef);
  taMisc::types.Add(&TA_taiRcvMimeItem);
    TA_taiRcvMimeItem.AddParFormal(&TA_class);
    TA_taiRcvMimeItem.AddClassPar(&TA_taiMimeItem,0);
  taMisc::types.Add(&TA_taiMimeItem_List_ptr);
    TA_taiMimeItem_List_ptr.AddParents(&TA_taiMimeItem_List);
  taMisc::types.Add(&TA_const_QMimeSource_ptr);
  taMisc::types.Add(&TA_taiClipData_ptr);
    TA_taiClipData_ptr.AddParents(&TA_taiClipData);
  taMisc::types.Add(&TA_istringstream_ref);
    TA_istringstream_ref.AddParents(&TA_istringstream);
  taMisc::types.Add(&TA_taiIntMimeSource);
    TA_taiIntMimeSource.AddParFormal(&TA_class);
    TA_taiIntMimeSource.AddClassPar(&TA_taiMimeSource,0);
  taMisc::types.Add(&TA_taiExtMimeSource);
    TA_taiExtMimeSource.AddParFormal(&TA_class);
    TA_taiExtMimeSource.AddClassPar(&TA_taiMimeSource,0);
  taMisc::types.Add(&TA_taiMimeSourcePtr);
    TA_taiMimeSourcePtr.AddParents(&TA_taiMimeSource_ptr);
  taMisc::types.Add(&TA_NodeBitmapFlags);
    TA_NodeBitmapFlags.AddParFormal(&TA_enum);
    tac_ThisEnum(TA_NodeBitmapFlags, TA_NodeBitmapFlags_EnumDef);
  taMisc::types.Add(&TA_tabDataLink);
    TA_tabDataLink.AddParFormal(&TA_class);
    TA_tabDataLink.AddClassPar(&TA_taiDataLink,0);
  taMisc::types.Add(&TA_taiToolBar);
    TA_taiToolBar.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiToolBar_List);
    TA_taiToolBar_List.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_WinGeometry);
    TAI_WinGeometry = new WinGeometry;
    TA_WinGeometry.AddParFormal(&TA_class);
    TA_WinGeometry.AddParCache(&TA_taBase);
    TA_WinGeometry.AddClassPar(&TA_taBase,0);
    sbt = new TypeDef("inherited", "", 
	"", "INSTANCE ", "", sizeof(int), (void**)0);
    sbt->AddParFormal(&TA_class);
    sbt->AddParents(&TA_taBase);
    TA_WinGeometry.sub_types.Add(sbt);
    tac_AddMembers(TA_WinGeometry,TA_WinGeometry_MemberDef);
    tac_AddMethods(TA_WinGeometry,TA_WinGeometry_MethodDef);
  taMisc::types.Add(&TA_ToolBar);
    TA_ToolBar.AddParFormal(&TA_class);
    TA_ToolBar.AddParCache(&TA_taBase);
    TA_ToolBar.AddClassPar(&TA_taNBase,0);
    sbt = new TypeDef("inherited", "", 
	"", "INSTANCE ", "", sizeof(int), (void**)0);
    sbt->AddParFormal(&TA_class);
    sbt->AddParCache(&TA_taBase);
    sbt->AddParents(&TA_taNBase);
    TA_ToolBar.sub_types.Add(sbt);
    tac_AddMembers(TA_ToolBar,TA_ToolBar_MemberDef);
    tac_AddMethods(TA_ToolBar,TA_ToolBar_MethodDef);
  taMisc::types.Add(&TA_DataViewer);
    TAI_DataViewer = new DataViewer;
    TA_DataViewer.AddParFormal(&TA_class);
    TA_DataViewer.AddParCache(&TA_taBase);
    TA_DataViewer.AddClassPar(&TA_taDataView,0);
    tac_AddEnum(TA_DataViewer, "PrintFmt", "", "", "", "", TA_DataViewer_PrintFmt);
    tac_AddMembers(TA_DataViewer,TA_DataViewer_MemberDef);
    tac_AddMethods(TA_DataViewer,TA_DataViewer_MethodDef);
  taMisc::types.Add(&TA_ISelectable);
    TA_ISelectable.AddParFormal(&TA_class);
    TA_ISelectable.AddClassPar(&TA_IDataLinkClient,0);
    tac_AddMethods(TA_ISelectable,TA_ISelectable_MethodDef);
  taMisc::types.Add(&TA_IDataViewHost);
    TA_IDataViewHost.AddParFormal(&TA_class);
    tac_AddMethods(TA_IDataViewHost,TA_IDataViewHost_MethodDef);
  taMisc::types.Add(&TA_iListViewItem);
    TA_iListViewItem.AddParFormal(&TA_class);
    TA_iListViewItem.AddClassPar();
  taMisc::types.Add(&TA_taiListDataNode);
    TA_taiListDataNode.AddParFormal(&TA_class);
    TA_taiListDataNode.AddClassPar(&TA_iListViewItem,0);
  taMisc::types.Add(&TA_iListDataPanel);
    TA_iListDataPanel.AddParFormal(&TA_class);
    TA_iListDataPanel.AddClassPar(&TA_iDataPanelFrame,0);
  taMisc::types.Add(&TA_DataLink_QObj);
    TA_DataLink_QObj.AddParFormal(&TA_class);
    tac_AddMembers(TA_DataLink_QObj,TA_DataLink_QObj_MemberDef);
  taMisc::types.Add(&TA_DataLink_QObj_ptr);
    TA_DataLink_QObj_ptr.AddParents(&TA_DataLink_QObj);
  taMisc::types.Add(&TA_tabODataLink);
    TA_tabODataLink.AddParFormal(&TA_class);
    TA_tabODataLink.AddClassPar(&TA_tabDataLink,0);
  taMisc::types.Add(&TA_ToolBar_ptr);
    TA_ToolBar_ptr.AddParents(&TA_ToolBar);
  taMisc::types.Add(&TA_tabListDataLink);
    TA_tabListDataLink.AddParFormal(&TA_class);
    TA_tabListDataLink.AddClassPar(&TA_tabODataLink,0);
  taMisc::types.Add(&TA_taiToolBar_ptr);
    TA_taiToolBar_ptr.AddParents(&TA_taiToolBar);
  taMisc::types.Add(&TA_tabGroupDataLink);
    TA_tabGroupDataLink.AddParFormal(&TA_class);
    TA_tabGroupDataLink.AddClassPar(&TA_tabListDataLink,0);
  taMisc::types.Add(&TA_IDataViewHost_ptr);
    TA_IDataViewHost_ptr.AddParents(&TA_IDataViewHost);
  taMisc::types.Add(&TA_taPtrList_ISelectable_);
    TAI_taPtrList_ISelectable_ = new taPtrList<ISelectable>;
    TA_taPtrList_ISelectable_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_ISelectable_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("ISelectable_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ISelectable);
    TA_taPtrList_ISelectable_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ISelectable", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_ISelectable);
    TA_taPtrList_ISelectable_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ISelectable_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_ISelectable_.sub_types.FindName("const_ISelectable"));
    TA_taPtrList_ISelectable_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_ISelectable_,TA_taPtrList_ISelectable__MethodDef);
  taMisc::types.Add(&TA_ISelectable_ptr);
    TA_ISelectable_ptr.AddParents(&TA_ISelectable);
  taMisc::types.Add(&TA_ISelectable_PtrList);
    TA_ISelectable_PtrList.AddParFormal(&TA_class);
    TA_ISelectable_PtrList.AddClassPar(&TA_taPtrList_ISelectable_,0);
    tac_AddMethods(TA_ISelectable_PtrList,TA_ISelectable_PtrList_MethodDef);
  taMisc::types.Add(&TA_DataViewer_ptr);
    TA_DataViewer_ptr.AddParents(&TA_DataViewer);
  taMisc::types.Add(&TA_const_ISelectable_PtrList);
    TA_const_ISelectable_PtrList.AddParents(&TA_const, &TA_ISelectable_PtrList);
  taMisc::types.Add(&TA_ISelectable_PtrList_ref);
    TA_ISelectable_PtrList_ref.AddParents(&TA_ISelectable_PtrList);
  taMisc::types.Add(&TA_const_ISelectable_PtrList_ref);
    TA_const_ISelectable_PtrList_ref.AddParents(&TA_const_ISelectable_PtrList);
  taMisc::types.Add(&TA_const_ToolBar);
    TA_const_ToolBar.AddParents(&TA_const, &TA_ToolBar);
  taMisc::types.Add(&TA_const_ToolBar_ref);
    TA_const_ToolBar_ref.AddParents(&TA_const_ToolBar);
  taMisc::types.Add(&TA_taList_ToolBar_);
    TA_taList_ToolBar_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_ToolBar_.AddParCache(&TA_taBase);
    TA_taList_ToolBar_.AddClassPar(&TA_taList,0);
  taMisc::types.Add(&TA_ToolBar_List);
    TA_ToolBar_List.AddParFormal(&TA_class);
    TA_ToolBar_List.AddParCache(&TA_taBase);
    TA_ToolBar_List.AddClassPar(&TA_taList_ToolBar_,0);
  taMisc::types.Add(&TA_const_ToolBar_List);
    TA_const_ToolBar_List.AddParents(&TA_const, &TA_ToolBar_List);
  taMisc::types.Add(&TA_const_WinGeometry);
    TA_const_WinGeometry.AddParents(&TA_const, &TA_WinGeometry);
  taMisc::types.Add(&TA_const_ToolBar_List_ref);
    TA_const_ToolBar_List_ref.AddParents(&TA_const_ToolBar_List);
  taMisc::types.Add(&TA_const_WinGeometry_ref);
    TA_const_WinGeometry_ref.AddParents(&TA_const_WinGeometry);
  taMisc::types.Add(&TA_const_DataViewer);
    TA_const_DataViewer.AddParents(&TA_const, &TA_DataViewer);
  taMisc::types.Add(&TA_const_DataViewer_ref);
    TA_const_DataViewer_ref.AddParents(&TA_const_DataViewer);
  taMisc::types.Add(&TA_taList_DataViewer_);
    TAI_taList_DataViewer_ = new taList<DataViewer>;
    TA_taList_DataViewer_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_DataViewer_.AddParCache(&TA_taBase);
    TA_taList_DataViewer_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_DataViewer_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_DataViewer_.sub_types.FindName("const_taBase"));
    TA_taList_DataViewer_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_DataViewer_.sub_types.Add(sbt);
    sbt = new TypeDef("DataViewer_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DataViewer);
    TA_taList_DataViewer_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_DataViewer_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_DataViewer__Orientation);
    tac_AddMethods(TA_taList_DataViewer_,TA_taList_DataViewer__MethodDef);
  taMisc::types.Add(&TA_DataViewer_List);
    TAI_DataViewer_List = new DataViewer_List;
    TA_DataViewer_List.AddParFormal(&TA_class);
    TA_DataViewer_List.AddParCache(&TA_taBase);
    TA_DataViewer_List.AddClassPar(&TA_taList_DataViewer_,0);
  taMisc::types.Add(&TA_iTabDataViewer);
    TA_iTabDataViewer.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_DataViewer_List);
    TA_const_DataViewer_List.AddParents(&TA_const, &TA_DataViewer_List);
  taMisc::types.Add(&TA_taPtrList_iDataPanel_);
    TA_taPtrList_iDataPanel_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_iDataPanel_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_const_DataViewer_List_ref);
    TA_const_DataViewer_List_ref.AddParents(&TA_const_DataViewer_List);
  taMisc::types.Add(&TA_iTabDataViewer_ptr);
    TA_iTabDataViewer_ptr.AddParents(&TA_iTabDataViewer);
  taMisc::types.Add(&TA_iDataPanel_PtrList);
    TA_iDataPanel_PtrList.AddParFormal(&TA_class);
    TA_iDataPanel_PtrList.AddClassPar(&TA_taPtrList_iDataPanel_,0);
  taMisc::types.Add(&TA_iViewPanelFrame);
    TA_iViewPanelFrame.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iListViewItem_ptr);
    TA_iListViewItem_ptr.AddParents(&TA_iListViewItem);
  taMisc::types.Add(&TA_iListDataPanel_ptr);
    TA_iListDataPanel_ptr.AddParents(&TA_iListDataPanel);
  taMisc::types.Add(&TA_taiListDataNode_ptr);
    TA_taiListDataNode_ptr.AddParents(&TA_taiListDataNode);
  taMisc::types.Add(&TA_const_QPoint_ref);
  taMisc::types.Add(&TA_taiTreeDataNode);
    TA_taiTreeDataNode.AddParFormal(&TA_class);
    TA_taiTreeDataNode.AddClassPar(&TA_iListViewItem,0);
  taMisc::types.Add(&TA_tabTreeDataNode);
    TA_tabTreeDataNode.AddParFormal(&TA_class);
    TA_tabTreeDataNode.AddClassPar(&TA_taiTreeDataNode,0);
  taMisc::types.Add(&TA_tabListTreeDataNode);
    TA_tabListTreeDataNode.AddParFormal(&TA_class);
    TA_tabListTreeDataNode.AddClassPar(&TA_tabTreeDataNode,0);
  taMisc::types.Add(&TA_tabGroupTreeDataNode);
    TA_tabGroupTreeDataNode.AddParFormal(&TA_class);
    TA_tabGroupTreeDataNode.AddClassPar(&TA_tabListTreeDataNode,0);
  taMisc::types.Add(&TA_iDataBrowserBase);
    TA_iDataBrowserBase.AddParFormal(&TA_class);
    TA_iDataBrowserBase.AddClassPar(&TA_iTabDataViewer,0);
  taMisc::types.Add(&TA_iDataBrowser);
    TA_iDataBrowser.AddParFormal(&TA_class);
    TA_iDataBrowser.AddClassPar(&TA_iDataBrowserBase,0);
  taMisc::types.Add(&TA_DataBrowser);
    TAI_DataBrowser = new DataBrowser;
    TA_DataBrowser.AddParFormal(&TA_class);
    TA_DataBrowser.AddParCache(&TA_taBase);
    TA_DataBrowser.AddClassPar(&TA_DataViewer,0);
    tac_AddMembers(TA_DataBrowser,TA_DataBrowser_MemberDef);
    tac_AddMethods(TA_DataBrowser,TA_DataBrowser_MethodDef);
  taMisc::types.Add(&TA_taiTreeDataNode_ptr);
    TA_taiTreeDataNode_ptr.AddParents(&TA_taiTreeDataNode);
  taMisc::types.Add(&TA_iDataBrowserBase_ptr);
    TA_iDataBrowserBase_ptr.AddParents(&TA_iDataBrowserBase);
  taMisc::types.Add(&TA_tabDataLink_ptr);
    TA_tabDataLink_ptr.AddParents(&TA_tabDataLink);
  taMisc::types.Add(&TA_tabListDataLink_ptr);
    TA_tabListDataLink_ptr.AddParents(&TA_tabListDataLink);
  taMisc::types.Add(&TA_tabGroupDataLink_ptr);
    TA_tabGroupDataLink_ptr.AddParents(&TA_tabGroupDataLink);
  taMisc::types.Add(&TA_DataBrowser_ptr);
    TA_DataBrowser_ptr.AddParents(&TA_DataBrowser);
  taMisc::types.Add(&TA_iDataBrowser_ptr);
    TA_iDataBrowser_ptr.AddParents(&TA_iDataBrowser);
  taMisc::types.Add(&TA_const_DataBrowser);
    TA_const_DataBrowser.AddParents(&TA_const, &TA_DataBrowser);
  taMisc::types.Add(&TA_const_DataBrowser_ref);
    TA_const_DataBrowser_ref.AddParents(&TA_const_DataBrowser);
  taMisc::types.Add(&TA_taTypeInfoTreeDataNode);
    TA_taTypeInfoTreeDataNode.AddParFormal(&TA_class);
    TA_taTypeInfoTreeDataNode.AddClassPar(&TA_taiTreeDataNode,0);
  taMisc::types.Add(&TA_taTypeSpaceTreeDataNode);
    TA_taTypeSpaceTreeDataNode.AddParFormal(&TA_class);
    TA_taTypeSpaceTreeDataNode.AddClassPar(&TA_taiTreeDataNode,0);
  taMisc::types.Add(&TA_iClassBrowser);
    TA_iClassBrowser.AddParFormal(&TA_class);
    TA_iClassBrowser.AddClassPar(&TA_iDataBrowserBase,0);
  taMisc::types.Add(&TA_ClassBrowser);
    TAI_ClassBrowser = new ClassBrowser;
    TA_ClassBrowser.AddParFormal(&TA_class);
    TA_ClassBrowser.AddParCache(&TA_taBase);
    TA_ClassBrowser.AddClassPar(&TA_DataViewer,0);
    tac_AddMembers(TA_ClassBrowser,TA_ClassBrowser_MemberDef);
    tac_AddMethods(TA_ClassBrowser,TA_ClassBrowser_MethodDef);
  taMisc::types.Add(&TA_TypeInfoKind);
    TA_TypeInfoKind.AddParFormal(&TA_enum);
    tac_ThisEnum(TA_TypeInfoKind, TA_TypeInfoKind_EnumDef);
  taMisc::types.Add(&TA_const_TypeInfoKind);
    TA_const_TypeInfoKind.AddParents(&TA_const, &TA_TypeInfoKind);
  taMisc::types.Add(&TA_taClassDataLink);
    TA_taClassDataLink.AddParFormal(&TA_class);
    TA_taClassDataLink.AddClassPar(&TA_taiDataLink,0);
  taMisc::types.Add(&TA_TypeItem_ptr);
    TA_TypeItem_ptr.AddParents(&TA_TypeItem);
  taMisc::types.Add(&TA_taTypeInfoDataLink);
    TA_taTypeInfoDataLink.AddParFormal(&TA_class);
    TA_taTypeInfoDataLink.AddClassPar(&TA_taClassDataLink,0);
  taMisc::types.Add(&TA_taTypeSpaceDataLink_Base);
    TA_taTypeSpaceDataLink_Base.AddParFormal(&TA_class);
    TA_taTypeSpaceDataLink_Base.AddClassPar(&TA_taClassDataLink,0);
  taMisc::types.Add(&TA_taEnumSpaceDataLink);
    TA_taEnumSpaceDataLink.AddParFormal(&TA_class);
    TA_taEnumSpaceDataLink.AddClassPar(&TA_taTypeSpaceDataLink_Base,0);
  taMisc::types.Add(&TA_taTypeSpaceDataLink);
    TA_taTypeSpaceDataLink.AddParFormal(&TA_class);
    TA_taTypeSpaceDataLink.AddClassPar(&TA_taTypeSpaceDataLink_Base,0);
  taMisc::types.Add(&TA_taMethodSpaceDataLink);
    TA_taMethodSpaceDataLink.AddParFormal(&TA_class);
    TA_taMethodSpaceDataLink.AddClassPar(&TA_taTypeSpaceDataLink_Base,0);
  taMisc::types.Add(&TA_taMemberSpaceDataLink);
    TA_taMemberSpaceDataLink.AddParFormal(&TA_class);
    TA_taMemberSpaceDataLink.AddClassPar(&TA_taTypeSpaceDataLink_Base,0);
  taMisc::types.Add(&TA_taTypeInfoDataLink_ptr);
    TA_taTypeInfoDataLink_ptr.AddParents(&TA_taTypeInfoDataLink);
  taMisc::types.Add(&TA_taTypeSpaceDataLink_ptr);
    TA_taTypeSpaceDataLink_ptr.AddParents(&TA_taTypeSpaceDataLink);
  taMisc::types.Add(&TA_ClassBrowser_ptr);
    TA_ClassBrowser_ptr.AddParents(&TA_ClassBrowser);
  taMisc::types.Add(&TA_iClassBrowser_ptr);
    TA_iClassBrowser_ptr.AddParents(&TA_iClassBrowser);
  taMisc::types.Add(&TA_const_ClassBrowser);
    TA_const_ClassBrowser.AddParents(&TA_const, &TA_ClassBrowser);
  taMisc::types.Add(&TA_const_ClassBrowser_ref);
    TA_const_ClassBrowser_ref.AddParents(&TA_const_ClassBrowser);
  taMisc::types.Add(&TA_gpiListEditButton);
    TA_gpiListEditButton.AddParFormal(&TA_class);
    TA_gpiListEditButton.AddClassPar(&TA_taiEditButton,0);
  taMisc::types.Add(&TA_gpiGroupEditButton);
    TA_gpiGroupEditButton.AddParFormal(&TA_class);
    TA_gpiGroupEditButton.AddClassPar(&TA_taiEditButton,0);
  taMisc::types.Add(&TA_gpiSubEditButton);
    TA_gpiSubEditButton.AddParFormal(&TA_class);
    TA_gpiSubEditButton.AddClassPar(&TA_taiEditButton,0);
  taMisc::types.Add(&TA_gpiLinkEditButton);
    TA_gpiLinkEditButton.AddParFormal(&TA_class);
    TA_gpiLinkEditButton.AddClassPar(&TA_gpiGroupEditButton,0);
  taMisc::types.Add(&TA_gpiListLinkEditButton);
    TA_gpiListLinkEditButton.AddParFormal(&TA_class);
    TA_gpiListLinkEditButton.AddClassPar(&TA_gpiListEditButton,0);
  taMisc::types.Add(&TA_gpiArrayEditButton);
    TA_gpiArrayEditButton.AddParFormal(&TA_class);
    TA_gpiArrayEditButton.AddClassPar(&TA_taiEditButton,0);
  taMisc::types.Add(&TA_gpiListEls);
    TA_gpiListEls.AddParFormal(&TA_class);
    TA_gpiListEls.AddClassPar(&TA_taiElBase,0);
  taMisc::types.Add(&TA_gpiGroupEls);
    TA_gpiGroupEls.AddParFormal(&TA_class);
    TA_gpiGroupEls.AddClassPar(&TA_gpiListEls,0);
  taMisc::types.Add(&TA_gpiSubGroups);
    TA_gpiSubGroups.AddParFormal(&TA_class);
    TA_gpiSubGroups.AddClassPar(&TA_taiElBase,0);
  taMisc::types.Add(&TA_gpiElTypes);
    TA_gpiElTypes.AddParFormal(&TA_class);
    TA_gpiElTypes.AddClassPar(&TA_taiTypeHier,0);
  taMisc::types.Add(&TA_gpiNewFuns);
    TA_gpiNewFuns.AddParFormal(&TA_class);
    TA_gpiNewFuns.AddClassPar(&TA_taiData,0);
  taMisc::types.Add(&TA_taiIncrField_ptr);
    TA_taiIncrField_ptr.AddParents(&TA_taiIncrField);
  taMisc::types.Add(&TA_gpiNewFuns_ptr);
    TA_gpiNewFuns_ptr.AddParents(&TA_gpiNewFuns);
  taMisc::types.Add(&TA_gpiElTypes_ptr);
    TA_gpiElTypes_ptr.AddParents(&TA_gpiElTypes);
  taMisc::types.Add(&TA_gpiListNew);
    TA_gpiListNew.AddParFormal(&TA_class);
    TA_gpiListNew.AddClassPar(&TA_taiDataHost,0);
  taMisc::types.Add(&TA_gpiSubGroups_ptr);
    TA_gpiSubGroups_ptr.AddParents(&TA_gpiSubGroups);
  taMisc::types.Add(&TA_gpiGroupNew);
    TA_gpiGroupNew.AddParFormal(&TA_class);
    TA_gpiGroupNew.AddClassPar(&TA_gpiListNew,0);
  taMisc::types.Add(&TA_gpiList_ElData);
    TA_gpiList_ElData.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_gpiList_ElData_);
    TAI_taPtrList_gpiList_ElData_ = new taPtrList<gpiList_ElData>;
    TA_taPtrList_gpiList_ElData_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_gpiList_ElData_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_gpiList_ElDataList);
    TA_gpiList_ElDataList.AddParFormal(&TA_class);
    TA_gpiList_ElDataList.AddClassPar(&TA_taPtrList_gpiList_ElData_,0);
  taMisc::types.Add(&TA_gpiMultiEditDataHost);
    TA_gpiMultiEditDataHost.AddParFormal(&TA_class);
    TA_gpiMultiEditDataHost.AddClassPar(&TA_taiEditDataHost,0);
  taMisc::types.Add(&TA_gpiListDataHost);
    TA_gpiListDataHost.AddParFormal(&TA_class);
    TA_gpiListDataHost.AddClassPar(&TA_gpiMultiEditDataHost,0);
  taMisc::types.Add(&TA_gpiGroupDataHost);
    TA_gpiGroupDataHost.AddParFormal(&TA_class);
    TA_gpiGroupDataHost.AddClassPar(&TA_gpiListDataHost,0);
  taMisc::types.Add(&TA_gpiArrayEditDataHost);
    TA_gpiArrayEditDataHost.AddParFormal(&TA_class);
    TA_gpiArrayEditDataHost.AddClassPar(&TA_taiEditDataHost,0);
  taMisc::types.Add(&TA_SArgEditDataHost);
    TA_SArgEditDataHost.AddParFormal(&TA_class);
    TA_SArgEditDataHost.AddClassPar(&TA_gpiArrayEditDataHost,0);
  taMisc::types.Add(&TA_gpiSelectEditDataHost);
    TA_gpiSelectEditDataHost.AddParFormal(&TA_class);
    TA_gpiSelectEditDataHost.AddClassPar(&TA_taiEditDataHost,0);
  taMisc::types.Add(&TA_SelectEditConfig);
    TAI_SelectEditConfig = new SelectEditConfig;
    TA_SelectEditConfig.AddParFormal(&TA_class);
    TA_SelectEditConfig.AddParCache(&TA_taBase);
    TA_SelectEditConfig.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_SelectEditConfig,TA_SelectEditConfig_MemberDef);
  taMisc::types.Add(&TA_const_SelectEdit);
    TA_const_SelectEdit.AddParents(&TA_const, &TA_SelectEdit);
  taMisc::types.Add(&TA_const_SelectEditConfig);
    TA_const_SelectEditConfig.AddParents(&TA_const, &TA_SelectEditConfig);
  taMisc::types.Add(&TA_const_SelectEdit_ref);
    TA_const_SelectEdit_ref.AddParents(&TA_const_SelectEdit);
  taMisc::types.Add(&TA_const_SelectEditConfig_ref);
    TA_const_SelectEditConfig_ref.AddParents(&TA_const_SelectEditConfig);
  taMisc::types.Add(&TA_const_SbVec2s_ref);
  taMisc::types.Add(&TA_iPoint);
    TAI_iPoint = new iPoint;
    TA_iPoint.AddParFormal(&TA_class);
    tac_AddMembers(TA_iPoint,TA_iPoint_MemberDef);
    tac_AddMethods(TA_iPoint,TA_iPoint_MethodDef);
  taMisc::types.Add(&TA_iVec2i);
    TA_iVec2i.AddParFormal(&TA_class);
    TA_iVec2i.AddClassPar(&TA_iPoint,0);
  taMisc::types.Add(&TA_iPoint_ref);
    TA_iPoint_ref.AddParents(&TA_iPoint);
  taMisc::types.Add(&TA_const_iPoint);
    TA_const_iPoint.AddParents(&TA_const, &TA_iPoint);
  taMisc::types.Add(&TA_const_iPoint_ref);
    TA_const_iPoint_ref.AddParents(&TA_const_iPoint);
  taMisc::types.Add(&TA_const_SbVec3s_ref);
  taMisc::types.Add(&TA_iVec3i);
    TAI_iVec3i = new iVec3i;
    TA_iVec3i.AddParFormal(&TA_class);
    TA_iVec3i.AddClassPar(&TA_iVec2i,0);
    tac_AddMembers(TA_iVec3i,TA_iVec3i_MemberDef);
    tac_AddMethods(TA_iVec3i,TA_iVec3i_MethodDef);
  taMisc::types.Add(&TA_const_QSize_ref);
  taMisc::types.Add(&TA_iVec3i_ref);
    TA_iVec3i_ref.AddParents(&TA_iVec3i);
  taMisc::types.Add(&TA_const_iVec3i);
    TA_const_iVec3i.AddParents(&TA_const, &TA_iVec3i);
  taMisc::types.Add(&TA_iSize);
    TAI_iSize = new iSize;
    TA_iSize.AddParFormal(&TA_class);
    tac_AddMembers(TA_iSize,TA_iSize_MemberDef);
    tac_AddMethods(TA_iSize,TA_iSize_MethodDef);
  taMisc::types.Add(&TA_const_iVec3i_ref);
    TA_const_iVec3i_ref.AddParents(&TA_const_iVec3i);
  taMisc::types.Add(&TA_const_iSize);
    TA_const_iSize.AddParents(&TA_const, &TA_iSize);
  taMisc::types.Add(&TA_iSize_ref);
    TA_iSize_ref.AddParents(&TA_iSize);
  taMisc::types.Add(&TA_const_iSize_ref);
    TA_const_iSize_ref.AddParents(&TA_const_iSize);
  taMisc::types.Add(&TA_const_QRect_ref);
  taMisc::types.Add(&TA_iRect);
    TAI_iRect = new iRect;
    TA_iRect.AddParFormal(&TA_class);
    tac_AddMembers(TA_iRect,TA_iRect_MemberDef);
    tac_AddMethods(TA_iRect,TA_iRect_MethodDef);
  taMisc::types.Add(&TA_iRect_ref);
    TA_iRect_ref.AddParents(&TA_iRect);
  taMisc::types.Add(&TA_const_iRect);
    TA_const_iRect.AddParents(&TA_const, &TA_iRect);
  taMisc::types.Add(&TA_const_iRect_ref);
    TA_const_iRect_ref.AddParents(&TA_const_iRect);
  taMisc::types.Add(&TA_const_SbVec3f_ref);
  taMisc::types.Add(&TA_iVec3f);
    TAI_iVec3f = new iVec3f;
    TA_iVec3f.AddParFormal(&TA_class);
    tac_AddMembers(TA_iVec3f,TA_iVec3f_MemberDef);
    tac_AddMethods(TA_iVec3f,TA_iVec3f_MethodDef);
  taMisc::types.Add(&TA_const_iVec3f);
    TA_const_iVec3f.AddParents(&TA_const, &TA_iVec3f);
  taMisc::types.Add(&TA_iVec3f_ref);
    TA_iVec3f_ref.AddParents(&TA_iVec3f);
  taMisc::types.Add(&TA_const_iVec3f_ref);
    TA_const_iVec3f_ref.AddParents(&TA_const_iVec3f);
  taMisc::types.Add(&TA_iBox3f);
    TAI_iBox3f = new iBox3f;
    TA_iBox3f.AddParFormal(&TA_class);
    tac_AddMembers(TA_iBox3f,TA_iBox3f_MemberDef);
    tac_AddMethods(TA_iBox3f,TA_iBox3f_MethodDef);
  taMisc::types.Add(&TA_TypeDef_ptr);
    TA_TypeDef_ptr.AddParents(&TA_TypeDef);
  taMisc::types.Add(&TA_iBox3f_ref);
    TA_iBox3f_ref.AddParents(&TA_iBox3f);
  taMisc::types.Add(&TA_const_iBox3f);
    TA_const_iBox3f.AddParents(&TA_const, &TA_iBox3f);
  taMisc::types.Add(&TA_uint);
    TA_uint.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_const_iBox3f_ref);
    TA_const_iBox3f_ref.AddParents(&TA_const_iBox3f);
  taMisc::types.Add(&TA_QWidget_ptr);
    TA_QWidget_ptr.AddParents(&TA_QWidget);
  taMisc::types.Add(&TA_QWidget);
    TA_QWidget.AddParFormal(&TA_class);
    TA_QWidget.AddParents(&TA_QObject);
  taMisc::types.Add(&TA_taBaseAdapter_ptr);
    TA_taBaseAdapter_ptr.AddParents(&TA_taBaseAdapter);
  taMisc::types.Add(&TA_taBaseAdapter);
    TA_taBaseAdapter.AddParFormal(&TA_class);
    TA_taBaseAdapter.AddParents(&TA_QObject);
  taMisc::types.Add(&TA_QMimeSource);
    TA_QMimeSource.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_byte);
    TA_byte.AddParents(&TA_unsigned_char);
  taMisc::types.Add(&TA_QObject);
    TA_QObject.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QMenuItem_ptr);
    TA_QMenuItem_ptr.AddParents(&TA_QMenuItem);
  taMisc::types.Add(&TA_QMenuItem);
    TA_QMenuItem.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QPopupMenu_ptr);
    TA_QPopupMenu_ptr.AddParents(&TA_QPopupMenu);
  taMisc::types.Add(&TA_QPopupMenu);
    TA_QPopupMenu.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QObject_ptr);
    TA_QObject_ptr.AddParents(&TA_QObject);
  taMisc::types.Add(&TA_QEvent_ptr);
    TA_QEvent_ptr.AddParents(&TA_QEvent);
  taMisc::types.Add(&TA_QEvent);
    TA_QEvent.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QScrollView_ptr);
    TA_QScrollView_ptr.AddParents(&TA_QScrollView);
  taMisc::types.Add(&TA_QScrollView);
    TA_QScrollView.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QVBoxLayout_ptr);
    TA_QVBoxLayout_ptr.AddParents(&TA_QVBoxLayout);
  taMisc::types.Add(&TA_QVBoxLayout);
    TA_QVBoxLayout.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QLabel_ptr);
    TA_QLabel_ptr.AddParents(&TA_QLabel);
  taMisc::types.Add(&TA_QLabel);
    TA_QLabel.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QSplitter_ptr);
    TA_QSplitter_ptr.AddParents(&TA_QSplitter);
  taMisc::types.Add(&TA_QSplitter);
    TA_QSplitter.AddParFormal(&TA_class);
    TA_QSplitter.AddParents(&TA_QWidget);
  taMisc::types.Add(&TA_QGridLayout_ptr);
    TA_QGridLayout_ptr.AddParents(&TA_QGridLayout);
  taMisc::types.Add(&TA_QGridLayout);
    TA_QGridLayout.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QFrame_ptr);
    TA_QFrame_ptr.AddParents(&TA_QFrame);
  taMisc::types.Add(&TA_QFrame);
    TA_QFrame.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iFlowLayout_ptr);
    TA_iFlowLayout_ptr.AddParents(&TA_iFlowLayout);
  taMisc::types.Add(&TA_iFlowLayout);
    TA_iFlowLayout.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QHBoxLayout_ptr);
    TA_QHBoxLayout_ptr.AddParents(&TA_QHBoxLayout);
  taMisc::types.Add(&TA_QHBoxLayout);
    TA_QHBoxLayout.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iColor_ptr);
    TA_iColor_ptr.AddParents(&TA_iColor);
  taMisc::types.Add(&TA_iColor);
    TA_iColor.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QDialog);
    TA_QDialog.AddParFormal(&TA_class);
    TA_QDialog.AddParents(&TA_QWidget);
  taMisc::types.Add(&TA_iDataViewer_ptr);
    TA_iDataViewer_ptr.AddParents(&TA_iDataViewer);
  taMisc::types.Add(&TA_iDataViewer);
    TA_iDataViewer.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QMenuData_ptr);
    TA_QMenuData_ptr.AddParents(&TA_QMenuData);
  taMisc::types.Add(&TA_QMenuData);
    TA_QMenuData.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QMenuBar_ptr);
    TA_QMenuBar_ptr.AddParents(&TA_QMenuBar);
  taMisc::types.Add(&TA_QMenuBar);
    TA_QMenuBar.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QPtrList_iAction_);
    TA_QPtrList_iAction_.AddParFormal(&TA_class, &TA_templ_inst);
  taMisc::types.Add(&TA_cssClass_ptr);
    TA_cssClass_ptr.AddParents(&TA_cssClass);
  taMisc::types.Add(&TA_cssClass);
    TA_cssClass.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_cssiArgDialog_ptr);
    TA_cssiArgDialog_ptr.AddParents(&TA_cssiArgDialog);
  taMisc::types.Add(&TA_cssiArgDialog);
    TA_cssiArgDialog.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QPushButton_ptr);
    TA_QPushButton_ptr.AddParents(&TA_QPushButton);
  taMisc::types.Add(&TA_QPushButton);
    TA_QPushButton.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_cssEl_ptr);
    TA_cssEl_ptr.AddParents(&TA_cssEl);
  taMisc::types.Add(&TA_cssEl);
    TA_cssEl.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iCheckBox_ptr);
    TA_iCheckBox_ptr.AddParents(&TA_iCheckBox);
  taMisc::types.Add(&TA_iCheckBox);
    TA_iCheckBox.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QLayout_ptr);
    TA_QLayout_ptr.AddParents(&TA_QLayout);
  taMisc::types.Add(&TA_QLayout);
    TA_QLayout.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iLineEdit_ptr);
    TA_iLineEdit_ptr.AddParents(&TA_iLineEdit);
  taMisc::types.Add(&TA_iLineEdit);
    TA_iLineEdit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iSpinBox_ptr);
    TA_iSpinBox_ptr.AddParents(&TA_iSpinBox);
  taMisc::types.Add(&TA_iSpinBox);
    TA_iSpinBox.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QCheckBox_ptr);
    TA_QCheckBox_ptr.AddParents(&TA_QCheckBox);
  taMisc::types.Add(&TA_QCheckBox);
    TA_QCheckBox.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iComboBox_ptr);
    TA_iComboBox_ptr.AddParents(&TA_iComboBox);
  taMisc::types.Add(&TA_iComboBox);
    TA_iComboBox.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QWidgetStack_ptr);
    TA_QWidgetStack_ptr.AddParents(&TA_QWidgetStack);
  taMisc::types.Add(&TA_QWidgetStack);
    TA_QWidgetStack.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QListBox_ptr);
    TA_QListBox_ptr.AddParents(&TA_QListBox);
  taMisc::types.Add(&TA_QListBox);
    TA_QListBox.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QLineEdit_ptr);
    TA_QLineEdit_ptr.AddParents(&TA_QLineEdit);
  taMisc::types.Add(&TA_QLineEdit);
    TA_QLineEdit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iTabView_ptr);
    TA_iTabView_ptr.AddParents(&TA_iTabView);
  taMisc::types.Add(&TA_iTabView);
    TA_iTabView.AddParFormal(&TA_class);
    TA_iTabView.AddParents(&TA_QWidget);
  taMisc::types.Add(&TA_QFocusEvent_ptr);
    TA_QFocusEvent_ptr.AddParents(&TA_QFocusEvent);
  taMisc::types.Add(&TA_QFocusEvent);
    TA_QFocusEvent.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QButtonGroup_ptr);
    TA_QButtonGroup_ptr.AddParents(&TA_QButtonGroup);
  taMisc::types.Add(&TA_QButtonGroup);
    TA_QButtonGroup.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QDragObject);
    TA_QDragObject.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QToolBar);
    TA_QToolBar.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QPtrList_taiToolBar_);
    TA_QPtrList_taiToolBar_.AddParFormal(&TA_class, &TA_templ_inst);
  taMisc::types.Add(&TA_QListViewItem);
    TA_QListViewItem.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QListViewItem_ptr);
    TA_QListViewItem_ptr.AddParents(&TA_QListViewItem);
  taMisc::types.Add(&TA_QString);
    TA_QString.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QListView_ptr);
    TA_QListView_ptr.AddParents(&TA_QListView);
  taMisc::types.Add(&TA_QListView);
    TA_QListView.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_DynMethod_PtrList);
    TA_DynMethod_PtrList.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iAction_ptr);
    TA_iAction_ptr.AddParents(&TA_iAction);
  taMisc::types.Add(&TA_iAction);
    TA_iAction.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iTabView_PtrList_ptr);
    TA_iTabView_PtrList_ptr.AddParents(&TA_iTabView_PtrList);
  taMisc::types.Add(&TA_iTabView_PtrList);
    TA_iTabView_PtrList.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QVBox_ptr);
    TA_QVBox_ptr.AddParents(&TA_QVBox);
  taMisc::types.Add(&TA_QVBox);
    TA_QVBox.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iEditGrid_ptr);
    TA_iEditGrid_ptr.AddParents(&TA_iEditGrid);
  taMisc::types.Add(&TA_iEditGrid);
    TA_iEditGrid.AddParFormal(&TA_class);


  taMisc::in_init = false;
  taMisc::Initialize();
} 

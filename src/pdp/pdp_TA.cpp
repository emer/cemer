// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "ta_css.h"
#include "ta_TA_type.h"
#include "tamisc_TA_type.h"
#include "pdpdeclare.h"
#include "pdpbase.h"
#include "spec.h"
#include "netstru.h"
#include "netstru_extra.h"
#include "enviro.h"
#include "enviro_extra.h"
#include "process.h"
#include "stats.h"
#include "pdplog.h"
#include "sched_proc.h"
#include "procs_extra.h"
#include "pdpshell.h"
#include "pdpview_qt.h"
#include "netstru_so.h"
#include "netstru_qtso.h"
#include "pdp_qtso.h"
#include "pdplog_qtso.h"
#include "enviro_qtso.h"
#include "pdp_TA_type.h"
#include "pdp_TA_inst.h"


// Types

TypeDef TA_BaseSpec("BaseSpec", " class BaseSpec_List; base specification class", 
	"", "", "", sizeof(BaseSpec), (void**)&TAI_BaseSpec, 1, 0, 0,1);
TypeDef TA_BaseSpec_MGroup("BaseSpec_MGroup", " group of specs", 
	"", "", "", sizeof(BaseSpec_MGroup), (void**)&TAI_BaseSpec_MGroup, 0, 0, 0,1);
TypeDef TA_Process("Process", " simple processes for controlling and coordinating execution", 
	"", "", "", sizeof(Process), (void**)&TAI_Process, 1, 0, 0,1);
TypeDef TA_SigmoidSpec("SigmoidSpec", " Specifies a Sigmoid 1 / [1 + exp(-(x - off) * gain)]", 
	"", "", "", sizeof(SigmoidSpec), (void**)&TAI_SigmoidSpec, 0, 0, 0,1);
TypeDef TA_ConSpec("ConSpec", " Connection Group Specs: for processing over connections", 
	"", "", "", sizeof(ConSpec), (void**)&TAI_ConSpec, 1, 0, 0,1);
TypeDef TA_Connection("Connection", " Generic Connections", 
	"", "", "", sizeof(Connection), (void**)&TAI_Connection, 0, 0, 0,1);
TypeDef TA_Con_Group("Con_Group", " Group of connections, controlls processing over them", 
	"", "", "", sizeof(Con_Group), (void**)&TAI_Con_Group, 0, 0, 0,1);
TypeDef TA_UnitSpec("UnitSpec", " Generic Unit Specification", 
	"", "", "", sizeof(UnitSpec), (void**)&TAI_UnitSpec, 1, 0, 0,1);
TypeDef TA_Unit("Unit", " Generic unit", 
	"", "", "", sizeof(Unit), (void**)&TAI_Unit, 0, 0, 0,1);
TypeDef TA_ProjectionSpec("ProjectionSpec", " Specifies the connectivity between layers (ie. full vs. partial)", 
	"", "", "", sizeof(ProjectionSpec), (void**)&TAI_ProjectionSpec, 1, 0, 0,1);
TypeDef TA_Projection("Projection", " Projection describes connectivity between layers (from receivers perspective)", 
	"", "", "", sizeof(Projection), (void**)&TAI_Projection, 1, 0, 0,1);
TypeDef TA_LayerSpec("LayerSpec", " generic layer specification", 
	"", "", "", sizeof(LayerSpec), (void**)&TAI_LayerSpec, 1, 0, 0,1);
TypeDef TA_Layer("Layer", " layer containing units", 
	"", "", "", sizeof(Layer), (void**)&TAI_Layer, 1, 0, 0,1);
TypeDef TA_Network("Network", " A network, containing layers, units, etc..", 
	"", "", "", sizeof(Network), (void**)&TAI_Network, 1, 0, 0,1);
TypeDef TA_Project("Project", " A Project has everything", 
	"", "", "", sizeof(Project), (void**)&TAI_Project, 1, 0, 0,1);
TypeDef TA_PDPRoot("PDPRoot", " structural root of object hierarchy", 
	"", "", "", sizeof(PDPRoot), (void**)&TAI_PDPRoot, 1, 0, 0,1);
TypeDef TA_EventSpec("EventSpec", " event specification", 
	"", "", "", sizeof(EventSpec), (void**)&TAI_EventSpec, 1, 0, 0,1);
TypeDef TA_Pattern("Pattern", " Contains activation values to be applied to a network layer", 
	"", "", "", sizeof(Pattern), (void**)&TAI_Pattern, 0, 0, 0,1);
TypeDef TA_Event("Event", " class Event_List; Contains patterns of activation for different layers in the network specifying one event", 
	"", "", "", sizeof(Event), (void**)&TAI_Event, 0, 0, 0,1);
TypeDef TA_Environment("Environment", " basic environment: contains events to present to the network, and can be used to hold data for analysis", 
	"", "", "", sizeof(Environment), (void**)&TAI_Environment, 1, 0, 0,1);
TypeDef TA_ScriptEnv("ScriptEnv", " For algorithmically generated events: Initialization of events is done by a script at the start of each epoch through the InitEvents() function", 
	"", "", "", sizeof(ScriptEnv), (void**)&TAI_ScriptEnv, 1, 0, 0,1);
TypeDef TA_TimeEnvironment("TimeEnvironment", " an environment that manages time-based events", 
	"", "", "", sizeof(TimeEnvironment), (void**)&TAI_TimeEnvironment, 1, 0, 0,1);
TypeDef TA_Stat("Stat", " Generic Statistic Process", 
	"", "", "", sizeof(Stat), (void**)&TAI_Stat, 1, 0, 0,1);
TypeDef TA_SE_Stat("SE_Stat", " Squared Error Statistic", 
	"", "", "", sizeof(SE_Stat), (void**)&TAI_SE_Stat, 1, 0, 0,1);
TypeDef TA_MonitorStat("MonitorStat", " Network Monitor Statistic", 
	"", "", "", sizeof(MonitorStat), (void**)&TAI_MonitorStat, 1, 0, 0,1);
TypeDef TA_ClosestEventStat("ClosestEventStat", " gets the closest event to the current output activity pattern", 
	"", "", "", sizeof(ClosestEventStat), (void**)&TAI_ClosestEventStat, 1, 0, 0,1);
TypeDef TA_CyclesToSettle("CyclesToSettle", " Records number of cycles it took to settle", 
	"", "", "", sizeof(CyclesToSettle), (void**)&TAI_CyclesToSettle, 1, 0, 0,1);
TypeDef TA_ScriptStat("ScriptStat", " Use this stat for custom script-based stats", 
	"", "", "", sizeof(ScriptStat), (void**)&TAI_ScriptStat, 1, 0, 0,1);
TypeDef TA_CompareStat("CompareStat", " An aggregator-like stat that compares the output of two other stats", 
	"", "", "", sizeof(CompareStat), (void**)&TAI_CompareStat, 1, 0, 0,1);
TypeDef TA_EpochCounterStat("EpochCounterStat", " gets the epoch counter from the network", 
	"", "", "", sizeof(EpochCounterStat), (void**)&TAI_EpochCounterStat, 1, 0, 0,1);
TypeDef TA_ProcCounterStat("ProcCounterStat", " gets the process counters from a different process hierarchy", 
	"", "", "", sizeof(ProcCounterStat), (void**)&TAI_ProcCounterStat, 1, 0, 0,1);
TypeDef TA_SchedProcess("SchedProcess", " Generic scheduling, looping process", 
	"", "", "", sizeof(SchedProcess), (void**)&TAI_SchedProcess, 1, 0, 0,1);
TypeDef TA_BatchProcess("BatchProcess", " Runs multiple trainings", 
	"", "", "", sizeof(BatchProcess), (void**)&TAI_BatchProcess, 1, 0, 0,1);
TypeDef TA_TrainProcess("TrainProcess", " Runs epochs to train network", 
	"", "", "", sizeof(TrainProcess), (void**)&TAI_TrainProcess, 1, 0, 0,1);
TypeDef TA_NEpochProcess("NEpochProcess", " Runs epochs to train network", 
	"", "", "", sizeof(NEpochProcess), (void**)&TAI_NEpochProcess, 1, 0, 0,1);
TypeDef TA_EpochProcess("EpochProcess", " Loops over entire set of trials (events) in the environment.\nIf multiple dmem processors are available (after network dmem_nprocs) events are distributed across\nprocessors, and weights synchronized: every batch_n for SMALL_BATCH (=ONLINE), or at end for BATCH.", 
	"", "", "", sizeof(EpochProcess), (void**)&TAI_EpochProcess, 1, 0, 0,1);
TypeDef TA_SequenceProcess("SequenceProcess", " Processes a sequence of trials in one event group (must be under a SequenceEpoch, which loops over event groups)", 
	"", "", "", sizeof(SequenceProcess), (void**)&TAI_SequenceProcess, 1, 0, 0,1);
TypeDef TA_TrialProcess("TrialProcess", " Runs a single trial (one event)", 
	"", "", "", sizeof(TrialProcess), (void**)&TAI_TrialProcess, 1, 0, 0,1);
TypeDef TA_SettleProcess("SettleProcess", " Settles over cycles of activation propagation", 
	"", "", "", sizeof(SettleProcess), (void**)&TAI_SettleProcess, 1, 0, 0,1);
TypeDef TA_CycleProcess("CycleProcess", " Runs one cycle of activation update", 
	"", "", "", sizeof(CycleProcess), (void**)&TAI_CycleProcess, 1, 0, 0,1);
TypeDef TA_SequenceEpoch("SequenceEpoch", " Loops over sequences (groups of events) instead of individual events (enviro must have event groups!).", 
	"", "", "", sizeof(SequenceEpoch), (void**)&TAI_SequenceEpoch, 1, 0, 0,1);
TypeDef TA_PDPLog("PDPLog", "  Records data from processes, displaying and saving it", 
	"", "", "", sizeof(PDPLog), (void**)&TAI_PDPLog, 1, 0, 0,1);
TypeDef TA_TextLog("TextLog", " log with textview as a default display", 
	"", "", "", sizeof(TextLog), (void**)&TAI_TextLog, 1, 0, 0,1);
TypeDef TA_GraphLog("GraphLog", " log with graph as a default display", 
	"", "", "", sizeof(GraphLog), (void**)&TAI_GraphLog, 1, 0, 0,1);
TypeDef TA_GridLog("GridLog", "  log with grid as a default display", 
	"", "", "", sizeof(GridLog), (void**)&TAI_GridLog, 1, 0, 0,1);
TypeDef TA_PDPView("PDPView", " pdp version of a win view", 
	"", "", "", sizeof(PDPView), (void**)&TAI_PDPView, 0, 0, 0,1);
TypeDef TA_pdpDataViewer("pdpDataViewer", " master viewer for network, i/o, etc.", 
	"", "", "", sizeof(pdpDataViewer), (void**)&TAI_pdpDataViewer, 1, 0, 0,1);
TypeDef TA_LogView("LogView", "  parent class of all log views (Par is only for GraphLogView)", 
	"", "", "", sizeof(LogView), (void**)&TAI_LogView, 0, 0, 0,1);
TypeDef TA_GridLogView("GridLogView", "  displays log information as colored grids", 
	"", "", "", sizeof(GridLogView), (void**)&TAI_GridLogView, 0, 0, 0,1);
TypeDef TA_NetLogView("NetLogView", "  displays log information in the network view window", 
	"", "", "", sizeof(NetLogView), (void**)&TAI_NetLogView, 0, 0, 0,1);
TypeDef TA_GraphLogView("GraphLogView", "  View log data as a graph of lines", 
	"", "", "", sizeof(GraphLogView), (void**)&TAI_GraphLogView, 0, 0, 0,1);
TypeDef TA_ProcessDialog("ProcessDialog", " net_qt.h and netstru_so.h  ", 
	"", "", "", sizeof(ProcessDialog), (void**)&TAI_ProcessDialog, 0, 0, 0,1);
TypeDef TA_PDPRoot_ptr("PDPRoot_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Project_ptr("Project_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_PDPLog_ptr("PDPLog_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Environment_ptr("Environment_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Network_ptr("Network_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_BaseSpec_MGroup_ptr("BaseSpec_MGroup_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_BaseSpec_ptr("BaseSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Process_ptr("Process_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_pdpMisc("pdpMisc", " miscellaneous things for pdp", 
	"", "", "", sizeof(pdpMisc), (void**)&TAI_pdpMisc, 0, 0, 0,1);
TypeDef TA_PosGroup("PosGroup", " ", 
	"", "", "", sizeof(PosGroup), (void**)&TAI_PosGroup, 0, 0, 0,1);
TypeDef TA_const_BaseSpec_MGroup("const_BaseSpec_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PosGroup("const_PosGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BaseSpec_MGroup_ref("const_BaseSpec_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PosGroup_ref("const_PosGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_BaseSpec("const_BaseSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BaseSpec_ref("const_BaseSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_BaseSubSpec("BaseSubSpec", " specification class for sub-objects of specs", 
	"", "", "", sizeof(BaseSubSpec), (void**)&TAI_BaseSubSpec, 1, 0, 0,1);
TypeDef TA_BaseSubSpec_ptr("BaseSubSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_BaseSubSpec("const_BaseSubSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_PatternSpec("PatternSpec", " sub-spec for patterns within an eventspec", 
	"", "", "", sizeof(PatternSpec), (void**)&TAI_PatternSpec, 1, 0, 0,1);
TypeDef TA_const_BaseSubSpec_ref("const_BaseSubSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SpecPtr_impl("SpecPtr_impl", " magic pointer to a spec", 
	"", "", "", sizeof(SpecPtr_impl), (void**)&TAI_SpecPtr_impl, 0, 0, 0,1);
TypeDef TA_const_SpecPtr_impl("const_SpecPtr_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SpecPtr_impl_ref("const_SpecPtr_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SpecPtr("SpecPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SpecPtr("const_SpecPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SigmoidSpec("const_SigmoidSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SpecPtr_ref("const_SpecPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SigmoidSpec_ref("const_SigmoidSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SchedItem("SchedItem", " one element of a schedule", 
	"", "", "", sizeof(SchedItem), (void**)&TAI_SchedItem, 0, 0, 0,1);
TypeDef TA_taList_SchedItem_("taList_SchedItem_", " ", 
	"", "", "", sizeof(taList<SchedItem>), (void**)&TAI_taList_SchedItem_, 0, 0, 0,1);
TypeDef TA_const_SchedItem("const_SchedItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SchedItem_ref("const_SchedItem_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Schedule("Schedule", " A schedule for parameters that vary over time", 
	"", "", "", sizeof(Schedule), (void**)&TAI_Schedule, 0, 0, 0,1);
TypeDef TA_const_Connection("const_Connection", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Schedule("const_Schedule", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Connection_ref("const_Connection_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Schedule_ref("const_Schedule_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_WeightLimits("WeightLimits", " specifies weight limits for connections", 
	"", "", "", sizeof(WeightLimits), (void**)&TAI_WeightLimits, 0, 0, 0,1);
TypeDef TA_Connection_ptr("Connection_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_WeightLimits("const_WeightLimits", 1, 0, 0, 0, 1, 0);
TypeDef TA_Unit_ptr("Unit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_WeightLimits_ref("const_WeightLimits_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Con_Group_ptr("Con_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Layer_ptr("Layer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TrialProcess_ptr("TrialProcess_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_ConSpec("const_ConSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ConSpec_ref("const_ConSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SpecPtr_ConSpec_("SpecPtr_ConSpec_", "", 
	"", "", "", sizeof(SpecPtr<ConSpec>), (void**)&TAI_SpecPtr_ConSpec_, 0, 0, 0,1);
TypeDef TA_ConSpec_SPtr("ConSpec_SPtr", "", 
	"", "", "", sizeof(ConSpec_SPtr), (void**)&TAI_ConSpec_SPtr, 0, 0, 0,1);
TypeDef TA_taList_Unit_("taList_Unit_", " ", 
	"", "", "", sizeof(taList<Unit>), (void**)&TAI_taList_Unit_, 0, 0, 0,1);
TypeDef TA_const_ConSpec_SPtr("const_ConSpec_SPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ConSpec_SPtr_ref("const_ConSpec_SPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Unit_List("Unit_List", " ", 
	"", "", "", sizeof(Unit_List), (void**)&TAI_Unit_List, 0, 0, 0,1);
TypeDef TA_Projection_ptr("Projection_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Unit_List("const_Unit_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Con_Group("const_Con_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Unit_List_ref("const_Unit_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Con_Group_ptr("const_Con_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ConSpec_ptr("ConSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Con_Group_ref("const_Con_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_UnitSpec("const_UnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UnitSpec_ref("const_UnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SpecPtr_UnitSpec_("SpecPtr_UnitSpec_", "", 
	"", "", "", sizeof(SpecPtr<UnitSpec>), (void**)&TAI_SpecPtr_UnitSpec_, 0, 0, 0,1);
TypeDef TA_UnitSpec_SPtr("UnitSpec_SPtr", "", 
	"", "", "", sizeof(UnitSpec_SPtr), (void**)&TAI_UnitSpec_SPtr, 0, 0, 0,1);
TypeDef TA_const_UnitSpec_SPtr("const_UnitSpec_SPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Unit("const_Unit", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UnitSpec_SPtr_ref("const_UnitSpec_SPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Unit_ptr("const_Unit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Con_Group_ptr_ref("Con_Group_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_UnitSpec_ptr("UnitSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Unit_ref("const_Unit_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ProjectionSpec("const_ProjectionSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ProjectionSpec_ref("const_ProjectionSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SpecPtr_ProjectionSpec_("SpecPtr_ProjectionSpec_", "", 
	"", "", "", sizeof(SpecPtr<ProjectionSpec>), (void**)&TAI_SpecPtr_ProjectionSpec_, 0, 0, 0,1);
TypeDef TA_ProjectionSpec_SPtr("ProjectionSpec_SPtr", "", 
	"", "", "", sizeof(ProjectionSpec_SPtr), (void**)&TAI_ProjectionSpec_SPtr, 0, 0, 0,1);
TypeDef TA_const_Projection("const_Projection", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ProjectionSpec_SPtr("const_ProjectionSpec_SPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Projection_ptr("const_Projection_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_ProjectionSpec_SPtr_ref("const_ProjectionSpec_SPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ProjectionSpec_ptr("ProjectionSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_GridLog_ptr("GridLog_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Projection_ref("const_Projection_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Projection_Group("Projection_Group", "", 
	"", "", "", sizeof(Projection_Group), (void**)&TAI_Projection_Group, 0, 0, 0,1);
TypeDef TA_taGroup_Unit_("taGroup_Unit_", " ", 
	"", "", "", sizeof(taGroup<Unit>), (void**)&TAI_taGroup_Unit_, 0, 0, 0,1);
TypeDef TA_const_Projection_Group("const_Projection_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_Unit_Group("Unit_Group", "  a group of units", 
	"", "", "", sizeof(Unit_Group), (void**)&TAI_Unit_Group, 0, 0, 0,1);
TypeDef TA_const_Projection_Group_ref("const_Projection_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Unit_Group("const_Unit_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_Unit_Group_ptr("Unit_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Unit_Group_ptr("const_Unit_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Unit_Group_ref("const_Unit_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_LayerSpec("const_LayerSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LayerSpec_ref("const_LayerSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DMemShare_ref("DMemShare_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Layer("const_Layer", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Layer_ptr("const_Layer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_LayerSpec_ptr("LayerSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Layer_ref("const_Layer_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup_Layer_("taGroup_Layer_", " ", 
	"", "", "", sizeof(taGroup<Layer>), (void**)&TAI_taGroup_Layer_, 0, 0, 0,1);
TypeDef TA_Layer_MGroup("Layer_MGroup", "", 
	"", "", "", sizeof(Layer_MGroup), (void**)&TAI_Layer_MGroup, 0, 0, 0,1);
TypeDef TA_const_Network("const_Network", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Layer_MGroup("const_Layer_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Network_ptr("const_Network_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Layer_MGroup_ref("const_Layer_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Network_ref("const_Network_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup_Network_("taGroup_Network_", " ", 
	"", "", "", sizeof(taGroup<Network>), (void**)&TAI_taGroup_Network_, 0, 0, 0,1);
TypeDef TA_Network_MGroup("Network_MGroup", "", 
	"", "", "", sizeof(Network_MGroup), (void**)&TAI_Network_MGroup, 0, 0, 0,1);
TypeDef TA_const_Network_MGroup("const_Network_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_FullPrjnSpec("FullPrjnSpec", " Full connectivity between layers", 
	"", "", "", sizeof(FullPrjnSpec), (void**)&TAI_FullPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_Network_MGroup_ref("const_Network_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_FullPrjnSpec("const_FullPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FullPrjnSpec_ref("const_FullPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TessEl("TessEl", " one element of a tesselation specification", 
	"", "", "", sizeof(TessEl), (void**)&TAI_TessEl, 0, 0, 0,1);
TypeDef TA_taList_TessEl_("taList_TessEl_", " ", 
	"", "", "", sizeof(taList<TessEl>), (void**)&TAI_taList_TessEl_, 0, 0, 0,1);
TypeDef TA_const_TessEl("const_TessEl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TessEl_ref("const_TessEl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TessEl_List("TessEl_List", " list of TessEl objects", 
	"", "", "", sizeof(TessEl_List), (void**)&TAI_TessEl_List, 0, 0, 0,1);
TypeDef TA_const_TessEl_List("const_TessEl_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TessEl_List_ref("const_TessEl_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TesselPrjnSpec("TesselPrjnSpec", " arbitrary tesselations (repeating patterns) of connectivity", 
	"", "", "", sizeof(TesselPrjnSpec), (void**)&TAI_TesselPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_TesselPrjnSpec("const_TesselPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TesselPrjnSpec_ref("const_TesselPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_OneToOnePrjnSpec("OneToOnePrjnSpec", " one-to-one connectivity (1st unit to 1st unit, etc)", 
	"", "", "", sizeof(OneToOnePrjnSpec), (void**)&TAI_OneToOnePrjnSpec, 1, 0, 0,1);
TypeDef TA_const_OneToOnePrjnSpec("const_OneToOnePrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_OneToOnePrjnSpec_ref("const_OneToOnePrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_UniformRndPrjnSpec("UniformRndPrjnSpec", " Uniform random connectivity between layers", 
	"", "", "", sizeof(UniformRndPrjnSpec), (void**)&TAI_UniformRndPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_UniformRndPrjnSpec("const_UniformRndPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UniformRndPrjnSpec_ref("const_UniformRndPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PolarRndPrjnSpec("PolarRndPrjnSpec", " random connectivity defined as a function of distance and angle", 
	"", "", "", sizeof(PolarRndPrjnSpec), (void**)&TAI_PolarRndPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_PolarRndPrjnSpec("const_PolarRndPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_SymmetricPrjnSpec("SymmetricPrjnSpec", " connects units with receiving connection where sending one already exists", 
	"", "", "", sizeof(SymmetricPrjnSpec), (void**)&TAI_SymmetricPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_PolarRndPrjnSpec_ref("const_PolarRndPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Unit_ptr_ref("Unit_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_const_SymmetricPrjnSpec("const_SymmetricPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SymmetricPrjnSpec_ref("const_SymmetricPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_LinkPrjnConPtr("LinkPrjnConPtr", " specifies a connection to link", 
	"", "", "", sizeof(LinkPrjnConPtr), (void**)&TAI_LinkPrjnConPtr, 0, 0, 0,1);
TypeDef TA_taList_LinkPrjnConPtr_("taList_LinkPrjnConPtr_", " ", 
	"", "", "", sizeof(taList<LinkPrjnConPtr>), (void**)&TAI_taList_LinkPrjnConPtr_, 0, 0, 0,1);
TypeDef TA_const_LinkPrjnConPtr("const_LinkPrjnConPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LinkPrjnConPtr_ref("const_LinkPrjnConPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_LinkPrjnConPtr_List("LinkPrjnConPtr_List", " list of LinkPrjnConPtr objects", 
	"", "", "", sizeof(LinkPrjnConPtr_List), (void**)&TAI_LinkPrjnConPtr_List, 0, 0, 0,1);
TypeDef TA_const_LinkPrjnConPtr_List("const_LinkPrjnConPtr_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LinkPrjnConPtr_List_ref("const_LinkPrjnConPtr_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_LinkPrjnSpec("LinkPrjnSpec", " links an arbitrary set of wts, which must already be created!", 
	"", "", "", sizeof(LinkPrjnSpec), (void**)&TAI_LinkPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_LinkPrjnSpec("const_LinkPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LinkPrjnSpec_ref("const_LinkPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ScriptPrjnSpec("ScriptPrjnSpec", " Script-controlled connectivity", 
	"", "", "", sizeof(ScriptPrjnSpec), (void**)&TAI_ScriptPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_ScriptPrjnSpec("const_ScriptPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ScriptPrjnSpec_ref("const_ScriptPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_CustomPrjnSpec("CustomPrjnSpec", " connectivity is defined manually (i.e. unit-by-unit)", 
	"", "", "", sizeof(CustomPrjnSpec), (void**)&TAI_CustomPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_CustomPrjnSpec("const_CustomPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_CustomPrjnSpec_ref("const_CustomPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GpFullPrjnSpec("GpFullPrjnSpec", " unit_group based full connectivity with distinct con_groups for each unit group", 
	"", "", "", sizeof(GpFullPrjnSpec), (void**)&TAI_GpFullPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_GpFullPrjnSpec("const_GpFullPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GpFullPrjnSpec_ref("const_GpFullPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GpOneToOnePrjnSpec("GpOneToOnePrjnSpec", " unit_group based one-to-one connectivity (all in 1st group to all in 1st group, etc)", 
	"", "", "", sizeof(GpOneToOnePrjnSpec), (void**)&TAI_GpOneToOnePrjnSpec, 1, 0, 0,1);
TypeDef TA_const_GpOneToOnePrjnSpec("const_GpOneToOnePrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GpOneToOnePrjnSpec_ref("const_GpOneToOnePrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_RndGpOneToOnePrjnSpec("RndGpOneToOnePrjnSpec", " uniform random connectivity between one-to-one groups", 
	"", "", "", sizeof(RndGpOneToOnePrjnSpec), (void**)&TAI_RndGpOneToOnePrjnSpec, 1, 0, 0,1);
TypeDef TA_const_RndGpOneToOnePrjnSpec("const_RndGpOneToOnePrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RndGpOneToOnePrjnSpec_ref("const_RndGpOneToOnePrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GpOneToManyPrjnSpec("GpOneToManyPrjnSpec", " unit_group based one-to-many connectivity (one sending gp to all recv units)", 
	"", "", "", sizeof(GpOneToManyPrjnSpec), (void**)&TAI_GpOneToManyPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_GpOneToManyPrjnSpec("const_GpOneToManyPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GpOneToManyPrjnSpec_ref("const_GpOneToManyPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GpTessEl("GpTessEl", " one element of a tesselation specification for groups", 
	"", "", "", sizeof(GpTessEl), (void**)&TAI_GpTessEl, 0, 0, 0,1);
TypeDef TA_taList_GpTessEl_("taList_GpTessEl_", " ", 
	"", "", "", sizeof(taList<GpTessEl>), (void**)&TAI_taList_GpTessEl_, 0, 0, 0,1);
TypeDef TA_const_GpTessEl("const_GpTessEl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GpTessEl_ref("const_GpTessEl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GpTessEl_List("GpTessEl_List", " list of GpTessEl objects", 
	"", "", "", sizeof(GpTessEl_List), (void**)&TAI_GpTessEl_List, 0, 0, 0,1);
TypeDef TA_const_GpTessEl_List("const_GpTessEl_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GpTessEl_List_ref("const_GpTessEl_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GpRndTesselPrjnSpec("GpRndTesselPrjnSpec", " specifies patterns of groups to connect with, with random connectivity within each group", 
	"", "", "", sizeof(GpRndTesselPrjnSpec), (void**)&TAI_GpRndTesselPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_GpRndTesselPrjnSpec("const_GpRndTesselPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GpRndTesselPrjnSpec_ref("const_GpRndTesselPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TiledRFPrjnSpec("TiledRFPrjnSpec", " Tiled receptive field projection spec: connects entire receiving layer unit groups with overlapping tiled regions of sending layers", 
	"", "", "", sizeof(TiledRFPrjnSpec), (void**)&TAI_TiledRFPrjnSpec, 1, 0, 0,1);
TypeDef TA_const_TiledRFPrjnSpec("const_TiledRFPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TiledRFPrjnSpec_ref("const_TiledRFPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TiledGpRFPrjnSpec("TiledGpRFPrjnSpec", " Tiled receptive field projection spec for entirely group-to-group connections: connects entire receiving layer unit groups with overlapping tiled regions of sending layer groups", 
	"", "", "", sizeof(TiledGpRFPrjnSpec), (void**)&TAI_TiledGpRFPrjnSpec, 1, 0, 0,1);
TypeDef TA_Pattern_Group("Pattern_Group", "", 
	"", "", "", sizeof(Pattern_Group), (void**)&TAI_Pattern_Group, 0, 0, 0,1);
TypeDef TA_const_TiledGpRFPrjnSpec("const_TiledGpRFPrjnSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_Pattern_ptr("Pattern_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TiledGpRFPrjnSpec_ref("const_TiledGpRFPrjnSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Event_ptr("Event_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Pattern_Group_ptr("Pattern_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_PatternSpec("const_PatternSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PatternSpec_ref("const_PatternSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup_taBase__ptr("taGroup_taBase__ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_PatternSpec_Group("PatternSpec_Group", " group of pattern specs (acts like a template for pattern groups)", 
	"", "", "", sizeof(PatternSpec_Group), (void**)&TAI_PatternSpec_Group, 0, 0, 0,1);
TypeDef TA_const_EventSpec("const_EventSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PatternSpec_Group("const_PatternSpec_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_EventSpec_ref("const_EventSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PatternSpec_Group_ref("const_PatternSpec_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SpecPtr_EventSpec_("SpecPtr_EventSpec_", "", 
	"", "", "", sizeof(SpecPtr<EventSpec>), (void**)&TAI_SpecPtr_EventSpec_, 0, 0, 0,1);
TypeDef TA_EventSpec_SPtr("EventSpec_SPtr", "", 
	"", "", "", sizeof(EventSpec_SPtr), (void**)&TAI_EventSpec_SPtr, 0, 0, 0,1);
TypeDef TA_const_Pattern("const_Pattern", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_EventSpec_SPtr("const_EventSpec_SPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Pattern_ref("const_Pattern_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_EventSpec_SPtr_ref("const_EventSpec_SPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Pattern_Group("const_Pattern_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Pattern_Group_ref("const_Pattern_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_EventSpec_ptr("EventSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Event("const_Event", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Event_ref("const_Event_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup_Event_("taGroup_Event_", " ", 
	"", "", "", sizeof(taGroup<Event>), (void**)&TAI_taGroup_Event_, 0, 0, 0,1);
TypeDef TA_Event_MGroup("Event_MGroup", " Group of events", 
	"", "", "", sizeof(Event_MGroup), (void**)&TAI_Event_MGroup, 0, 0, 0,1);
TypeDef TA_const_Event_MGroup("const_Event_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_Event_MGroup_ptr("Event_MGroup_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Event_MGroup_ref("const_Event_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GraphLog_ptr("GraphLog_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Environment("const_Environment", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Environment_ref("const_Environment_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup_Environment_("taGroup_Environment_", " ", 
	"", "", "", sizeof(taGroup<Environment>), (void**)&TAI_taGroup_Environment_, 0, 0, 0,1);
TypeDef TA_Environment_MGroup("Environment_MGroup", " group of environments", 
	"", "", "", sizeof(Environment_MGroup), (void**)&TAI_Environment_MGroup, 0, 0, 0,1);
TypeDef TA_taList_Environment_("taList_Environment_", " ", 
	"", "", "", sizeof(taList<Environment>), (void**)&TAI_taList_Environment_, 0, 0, 0,1);
TypeDef TA_const_Environment_MGroup("const_Environment_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Environment_MGroup_ref("const_Environment_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Environment_List("Environment_List", " a simple list of environments", 
	"", "", "", sizeof(Environment_List), (void**)&TAI_Environment_List, 0, 0, 0,1);
TypeDef TA_const_ScriptEnv("const_ScriptEnv", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Environment_List("const_Environment_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ScriptEnv_ref("const_ScriptEnv_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Environment_List_ref("const_Environment_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_InteractiveScriptEnv("InteractiveScriptEnv", " For interactively-generated environments: Script is called for each event in GetNextEvent function (use with InteractiveEpoch)", 
	"", "", "", sizeof(InteractiveScriptEnv), (void**)&TAI_InteractiveScriptEnv, 1, 0, 0,1);
TypeDef TA_const_InteractiveScriptEnv("const_InteractiveScriptEnv", 1, 0, 0, 0, 1, 0);
TypeDef TA_FreqEvent("FreqEvent", " an event that has a frequency associated with it", 
	"", "", "", sizeof(FreqEvent), (void**)&TAI_FreqEvent, 0, 0, 0,1);
TypeDef TA_const_InteractiveScriptEnv_ref("const_InteractiveScriptEnv_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FreqEnv("FreqEnv", " environment which has a frequency for each event", 
	"", "", "", sizeof(FreqEnv), (void**)&TAI_FreqEnv, 1, 0, 0,1);
TypeDef TA_const_FreqEvent("const_FreqEvent", 1, 0, 0, 0, 1, 0);
TypeDef TA_FreqEnv_ptr("FreqEnv_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_FreqEvent_ref("const_FreqEvent_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FreqEvent_Group("FreqEvent_Group", " an event group that has a frequency associated with it", 
	"", "", "", sizeof(FreqEvent_Group), (void**)&TAI_FreqEvent_Group, 0, 0, 0,1);
TypeDef TA_const_FreqEnv("const_FreqEnv", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FreqEvent_Group("const_FreqEvent_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FreqEnv_ref("const_FreqEnv_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_FreqEvent_Group_ref("const_FreqEvent_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TimeEvent("TimeEvent", " an event which occurs at a specific time", 
	"", "", "", sizeof(TimeEvent), (void**)&TAI_TimeEvent, 0, 0, 0,1);
TypeDef TA_TimeEvent_ptr("TimeEvent_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TimeEvent("const_TimeEvent", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TimeEvent_ref("const_TimeEvent_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TimeEvent_MGroup("TimeEvent_MGroup", " a group of time-based events", 
	"", "", "", sizeof(TimeEvent_MGroup), (void**)&TAI_TimeEvent_MGroup, 0, 0, 0,1);
TypeDef TA_const_TimeEnvironment("const_TimeEnvironment", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TimeEvent_MGroup("const_TimeEvent_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TimeEnvironment_ref("const_TimeEnvironment_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_TimeEvent_MGroup_ref("const_TimeEvent_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FreqTimeEvent("FreqTimeEvent", " a time event that has a frequency associated with it", 
	"", "", "", sizeof(FreqTimeEvent), (void**)&TAI_FreqTimeEvent, 0, 0, 0,1);
TypeDef TA_const_FreqTimeEvent("const_FreqTimeEvent", 1, 0, 0, 0, 1, 0);
TypeDef TA_FreqTimeEvent_Group("FreqTimeEvent_Group", " a time event group that has a frequency associated with it", 
	"", "", "", sizeof(FreqTimeEvent_Group), (void**)&TAI_FreqTimeEvent_Group, 0, 0, 0,1);
TypeDef TA_const_FreqTimeEvent_ref("const_FreqTimeEvent_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_FreqTimeEvent_Group("const_FreqTimeEvent_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FreqTimeEvent_Group_ref("const_FreqTimeEvent_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FreqTimeEnv("FreqTimeEnv", " a time environment which has a frequency for each event", 
	"", "", "", sizeof(FreqTimeEnv), (void**)&TAI_FreqTimeEnv, 1, 0, 0,1);
TypeDef TA_const_FreqTimeEnv("const_FreqTimeEnv", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FreqTimeEnv_ref("const_FreqTimeEnv_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ProbPattern("ProbPattern", " pattern is chosen from group of patterns with given probability", 
	"", "", "", sizeof(ProbPattern), (void**)&TAI_ProbPattern, 0, 0, 0,1);
TypeDef TA_const_ProbPattern("const_ProbPattern", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ProbPattern_ref("const_ProbPattern_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ProbPatternSpec_Group("ProbPatternSpec_Group", " defines a group of patterns that are chosen according to their probabilities", 
	"", "", "", sizeof(ProbPatternSpec_Group), (void**)&TAI_ProbPatternSpec_Group, 0, 0, 0,1);
TypeDef TA_const_ProbPatternSpec_Group("const_ProbPatternSpec_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ProbPatternSpec_Group_ref("const_ProbPatternSpec_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ProbEventSpec("ProbEventSpec", " events have probabalistically-chosen patterns contained in ProbPatternSpec_Groups", 
	"", "", "", sizeof(ProbEventSpec), (void**)&TAI_ProbEventSpec, 1, 0, 0,1);
TypeDef TA_const_ProbEventSpec("const_ProbEventSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ProbEventSpec_ref("const_ProbEventSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_XYPatternSpec("XYPatternSpec", " for patterns that are positioned at a particular x,y offset location", 
	"", "", "", sizeof(XYPatternSpec), (void**)&TAI_XYPatternSpec, 1, 0, 0,1);
TypeDef TA_const_XYPatternSpec("const_XYPatternSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_XYPatternSpec_ref("const_XYPatternSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_XYPattern("XYPattern", " specifies the x,y offset location of the pattern in the layer", 
	"", "", "", sizeof(XYPattern), (void**)&TAI_XYPattern, 0, 0, 0,1);
TypeDef TA_const_XYPattern("const_XYPattern", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_XYPattern_ref("const_XYPattern_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_XYSubPatternSpec("XYSubPatternSpec", " presents rectagular subsets (size of layer) of large patterns at x,y offset", 
	"", "", "", sizeof(XYSubPatternSpec), (void**)&TAI_XYSubPatternSpec, 1, 0, 0,1);
TypeDef TA_const_XYSubPatternSpec("const_XYSubPatternSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_XYSubPatternSpec_ref("const_XYSubPatternSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_XYSubPattern("XYSubPattern", " specifies the x,y offset location of the layer within the pattern", 
	"", "", "", sizeof(XYSubPattern), (void**)&TAI_XYSubPattern, 0, 0, 0,1);
TypeDef TA_const_XYSubPattern("const_XYSubPattern", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_XYSubPattern_ref("const_XYSubPattern_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GroupPatternSpec("GroupPatternSpec", " organizes pattern values into sub-groups for viewing and/or sending to network", 
	"", "", "", sizeof(GroupPatternSpec), (void**)&TAI_GroupPatternSpec, 1, 0, 0,1);
TypeDef TA_const_GroupPatternSpec("const_GroupPatternSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GroupPatternSpec_ref("const_GroupPatternSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DurEvent("DurEvent", " an event which lasts for a particular amount of time", 
	"", "", "", sizeof(DurEvent), (void**)&TAI_DurEvent, 0, 0, 0,1);
TypeDef TA_const_DurEvent("const_DurEvent", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DurEvent_ref("const_DurEvent_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FromFileEnv("FromFileEnv", " Environment that reads events incrementally from a file into events.", 
	"", "", "", sizeof(FromFileEnv), (void**)&TAI_FromFileEnv, 1, 0, 0,1);
TypeDef TA_const_FromFileEnv("const_FromFileEnv", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FromFileEnv_ref("const_FromFileEnv_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_CtrlPanelData("CtrlPanelData", " data for the control panel", 
	"", "", "", sizeof(CtrlPanelData), (void**)&TAI_CtrlPanelData, 0, 0, 0,1);
TypeDef TA_const_CtrlPanelData("const_CtrlPanelData", 1, 0, 0, 0, 1, 0);
TypeDef TA_LogData_ptr("LogData_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_CtrlPanelData_ref("const_CtrlPanelData_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SchedProcess_ptr("SchedProcess_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_EpochProcess_ptr("EpochProcess_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Process("const_Process", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Process_ref("const_Process_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Process_Group("Process_Group", " a regular group of processes", 
	"", "", "", sizeof(Process_Group), (void**)&TAI_Process_Group, 0, 0, 0,1);
TypeDef TA_taGroup_Process_("taGroup_Process_", " ", 
	"", "", "", sizeof(taGroup<Process>), (void**)&TAI_taGroup_Process_, 0, 0, 0,1);
TypeDef TA_const_Process_Group("const_Process_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Process_Group_ref("const_Process_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Process_MGroup("Process_MGroup", " a menu group for processes", 
	"", "", "", sizeof(Process_MGroup), (void**)&TAI_Process_MGroup, 0, 0, 0,1);
TypeDef TA_const_Process_MGroup("const_Process_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_CritParam("CritParam", " stopping criteria params", 
	"", "", "", sizeof(CritParam), (void**)&TAI_CritParam, 0, 0, 0,1);
TypeDef TA_const_Process_MGroup_ref("const_Process_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_CritParam("const_CritParam", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_CritParam_ref("const_CritParam_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_StatVal("StatVal", " Statistic value", 
	"", "", "", sizeof(StatVal), (void**)&TAI_StatVal, 0, 0, 0,1);
TypeDef TA_const_StatVal("const_StatVal", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_StatVal_ref("const_StatVal_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_StatVal_List("StatVal_List", " group of stat values", 
	"", "", "", sizeof(StatVal_List), (void**)&TAI_StatVal_List, 0, 0, 0,1);
TypeDef TA_StatVal_ptr("StatVal_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_StatVal_List("const_StatVal_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_StatVal_List_ptr("StatVal_List_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_StatVal_List_ref("const_StatVal_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_StatValAgg("StatValAgg", " Aggregation for StatVal-based values", 
	"", "", "", sizeof(StatValAgg), (void**)&TAI_StatValAgg, 0, 0, 0,1);
TypeDef TA_Stat_ptr("Stat_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_StatValAgg("const_StatValAgg", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_StatValAgg_ref("const_StatValAgg_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_AggStat("AggStat", " Aggregate statistics over time (processing levels)", 
	"", "", "", sizeof(AggStat), (void**)&TAI_AggStat, 0, 0, 0,1);
TypeDef TA_const_Stat("const_Stat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_AggStat("const_AggStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Stat_ref("const_Stat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_AggStat_ref("const_AggStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MonitorStat_ptr("MonitorStat_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Stat_Group("Stat_Group", " a group of statistics", 
	"", "", "", sizeof(Stat_Group), (void**)&TAI_Stat_Group, 0, 0, 0,1);
TypeDef TA_const_SE_Stat("const_SE_Stat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Stat_Group("const_Stat_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SE_Stat_ref("const_SE_Stat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Stat_Group_ref("const_Stat_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_MonitorStat("const_MonitorStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MonitorStat_ref("const_MonitorStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_LogView_("taPtrList_LogView_", " ", 
	"", "", "", sizeof(taPtrList<LogView>), (void**)&TAI_taPtrList_LogView_, 0, 0, 0,1);
TypeDef TA_LogView_PtrList("LogView_PtrList", " link list of associated logviews", 
	"", "", "", sizeof(LogView_PtrList), (void**)&TAI_LogView_PtrList, 0, 0, 0,1);
TypeDef TA_LogView_ptr("LogView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_PDPLog("const_PDPLog", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PDPLog_ref("const_PDPLog_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PDPLog_Group("PDPLog_Group", "", 
	"", "", "", sizeof(PDPLog_Group), (void**)&TAI_PDPLog_Group, 0, 0, 0,1);
TypeDef TA_taGroup_PDPLog_("taGroup_PDPLog_", " ", 
	"", "", "", sizeof(taGroup<PDPLog>), (void**)&TAI_taGroup_PDPLog_, 0, 0, 0,1);
TypeDef TA_const_PDPLog_Group("const_PDPLog_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PDPLog_Group_ref("const_PDPLog_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PDPLog_MGroup("PDPLog_MGroup", "", 
	"", "", "", sizeof(PDPLog_MGroup), (void**)&TAI_PDPLog_MGroup, 0, 0, 0,1);
TypeDef TA_const_TextLog("const_TextLog", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PDPLog_MGroup("const_PDPLog_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TextLog_ref("const_TextLog_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PDPLog_MGroup_ref("const_PDPLog_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_GridLog("const_GridLog", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GridLog_ref("const_GridLog_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_NetLog("NetLog", " log with netlog as a default display", 
	"", "", "", sizeof(NetLog), (void**)&TAI_NetLog, 1, 0, 0,1);
TypeDef TA_const_GraphLog("const_GraphLog", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NetLog("const_NetLog", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphLog_ref("const_GraphLog_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_NetLog_ref("const_NetLog_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Counter("Counter", " Holds the value of a loop counter", 
	"", "", "", sizeof(Counter), (void**)&TAI_Counter, 0, 0, 0,1);
TypeDef TA_const_Counter("const_Counter", 1, 0, 0, 0, 1, 0);
TypeDef TA_StepParams("StepParams", " Holds steping process parameters", 
	"", "", "", sizeof(StepParams), (void**)&TAI_StepParams, 0, 0, 0,1);
TypeDef TA_const_Counter_ref("const_Counter_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Counter_ptr("Counter_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_StepParams("const_StepParams", 1, 0, 0, 0, 1, 0);
TypeDef TA_Process_MGroup_ptr("Process_MGroup_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_StepParams_ref("const_StepParams_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Stat_Group_ptr("Stat_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Process_Group_ptr("Process_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_SchedProcess("const_SchedProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SchedProcess_ref("const_SchedProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_CycleProcess("const_CycleProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_CycleProcess_ref("const_CycleProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SettleProcess("const_SettleProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SettleProcess_ref("const_SettleProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_TrialProcess("const_TrialProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TrialProcess_ref("const_TrialProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_EpochProcess("const_EpochProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_EpochProcess_ref("const_EpochProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SequenceEpoch_ptr("SequenceEpoch_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_SequenceProcess("const_SequenceProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SequenceProcess_ref("const_SequenceProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SequenceEpoch("const_SequenceEpoch", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SequenceEpoch_ref("const_SequenceEpoch_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_InteractiveEpoch("InteractiveEpoch", " Loops over events in an environment using the interactive interface of GetNextEvent(), which can generate new events based on current state", 
	"", "", "", sizeof(InteractiveEpoch), (void**)&TAI_InteractiveEpoch, 1, 0, 0,1);
TypeDef TA_const_NEpochProcess("const_NEpochProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_InteractiveEpoch("const_InteractiveEpoch", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NEpochProcess_ref("const_NEpochProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_InteractiveEpoch_ref("const_InteractiveEpoch_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_TrainProcess("const_TrainProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TrainProcess_ref("const_TrainProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_BatchProcess("const_BatchProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BatchProcess_ref("const_BatchProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ScriptProcess("ScriptProcess", " a process for use with scripts (has s_args)", 
	"", "", "", sizeof(ScriptProcess), (void**)&TAI_ScriptProcess, 1, 0, 0,1);
TypeDef TA_const_ScriptProcess("const_ScriptProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_SaveNetsProc("SaveNetsProc", " saves networks with network.name + counters (batch, epoch)", 
	"", "", "", sizeof(SaveNetsProc), (void**)&TAI_SaveNetsProc, 1, 0, 0,1);
TypeDef TA_const_ScriptProcess_ref("const_ScriptProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SaveNetsProc("const_SaveNetsProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SaveNetsProc_ref("const_SaveNetsProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SaveWtsProc("SaveWtsProc", " saves weights with network.name + counters (batch, epoch)", 
	"", "", "", sizeof(SaveWtsProc), (void**)&TAI_SaveWtsProc, 1, 0, 0,1);
TypeDef TA_const_SaveWtsProc("const_SaveWtsProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SaveWtsProc_ref("const_SaveWtsProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_LoadWtsProc("LoadWtsProc", " reads in a set of weights from specified file, as a way to initialize weights", 
	"", "", "", sizeof(LoadWtsProc), (void**)&TAI_LoadWtsProc, 1, 0, 0,1);
TypeDef TA_const_LoadWtsProc("const_LoadWtsProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LoadWtsProc_ref("const_LoadWtsProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_InitWtsProc("InitWtsProc", " initialize the network's weights (InitWtState)", 
	"", "", "", sizeof(InitWtsProc), (void**)&TAI_InitWtsProc, 1, 0, 0,1);
TypeDef TA_const_InitWtsProc("const_InitWtsProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_InitWtsProc_ref("const_InitWtsProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SyncEpochProc("SyncEpochProc", " Epoch that runs two different sub-processes", 
	"", "", "", sizeof(SyncEpochProc), (void**)&TAI_SyncEpochProc, 1, 0, 0,1);
TypeDef TA_const_SyncEpochProc("const_SyncEpochProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SyncEpochProc_ref("const_SyncEpochProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GridSearchBatch("GridSearchBatch", " Increments param_path parameter over batches to search parameter space in equal increments", 
	"", "", "", sizeof(GridSearchBatch), (void**)&TAI_GridSearchBatch, 1, 0, 0,1);
TypeDef TA_const_GridSearchBatch("const_GridSearchBatch", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GridSearchBatch_ref("const_GridSearchBatch_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SameSeedBatch("SameSeedBatch", " Stores a list of random seeds that are used at start of each batch run -- ensures each batch run starts with the same seed", 
	"", "", "", sizeof(SameSeedBatch), (void**)&TAI_SameSeedBatch, 1, 0, 0,1);
TypeDef TA_const_SameSeedBatch("const_SameSeedBatch", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SameSeedBatch_ref("const_SameSeedBatch_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ForkProcess("ForkProcess", " Runs two different sub-processes", 
	"", "", "", sizeof(ForkProcess), (void**)&TAI_ForkProcess, 1, 0, 0,1);
TypeDef TA_const_ForkProcess("const_ForkProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ForkProcess_ref("const_ForkProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_BridgeProcess("BridgeProcess", " a bridge that connects two different networks together by copying values", 
	"", "", "", sizeof(BridgeProcess), (void**)&TAI_BridgeProcess, 1, 0, 0,1);
TypeDef TA_const_BridgeProcess("const_BridgeProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BridgeProcess_ref("const_BridgeProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MultiEnvProcess("MultiEnvProcess", " run subprocess over multiple environments, indexed by counter", 
	"", "", "", sizeof(MultiEnvProcess), (void**)&TAI_MultiEnvProcess, 1, 0, 0,1);
TypeDef TA_const_MultiEnvProcess("const_MultiEnvProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MultiEnvProcess_ref("const_MultiEnvProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PatternFlagProcess("PatternFlagProcess", " iteratively sets/resets pattern flag at index = counter for all patterns, e.g. to determine sensitivity to given input", 
	"", "", "", sizeof(PatternFlagProcess), (void**)&TAI_PatternFlagProcess, 1, 0, 0,1);
TypeDef TA_const_ClosestEventStat("const_ClosestEventStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PatternFlagProcess("const_PatternFlagProcess", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ClosestEventStat_ref("const_ClosestEventStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PatternFlagProcess_ref("const_PatternFlagProcess_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SettleProcess_ptr("SettleProcess_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_CyclesToSettle("const_CyclesToSettle", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_CyclesToSettle_ref("const_CyclesToSettle_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ActThreshRTStat("ActThreshRTStat", " records reaction-time in terms of number of cycles it took for max act in layer to exceed a threshold (doesn't necc stop settling though, unless stopcrit is set!)", 
	"", "", "", sizeof(ActThreshRTStat), (void**)&TAI_ActThreshRTStat, 1, 0, 0,1);
TypeDef TA_const_ScriptStat("const_ScriptStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ActThreshRTStat("const_ActThreshRTStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ScriptStat_ref("const_ScriptStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ActThreshRTStat_ref("const_ActThreshRTStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_CompareStat("const_CompareStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_CompareStat_ref("const_CompareStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ProjectionStat("ProjectionStat", " projects values from another stat along a given vector according to given distance metric", 
	"", "", "", sizeof(ProjectionStat), (void**)&TAI_ProjectionStat, 1, 0, 0,1);
TypeDef TA_const_ProjectionStat("const_ProjectionStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_ComputeStat("ComputeStat", " performs simple math computations on one or two stats, aggs the results according to net_agg", 
	"", "", "", sizeof(ComputeStat), (void**)&TAI_ComputeStat, 1, 0, 0,1);
TypeDef TA_const_ProjectionStat_ref("const_ProjectionStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ComputeStat("const_ComputeStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ComputeStat_ref("const_ComputeStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_CopyToEnvStat("CopyToEnvStat", " an aggregator-like stat that copies stat values from source stat to data environment", 
	"", "", "", sizeof(CopyToEnvStat), (void**)&TAI_CopyToEnvStat, 1, 0, 0,1);
TypeDef TA_const_EpochCounterStat("const_EpochCounterStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_CopyToEnvStat("const_CopyToEnvStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_EpochCounterStat_ref("const_EpochCounterStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_CopyToEnvStat_ref("const_CopyToEnvStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ProcCounterStat("const_ProcCounterStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ProcCounterStat_ref("const_ProcCounterStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MaxActTrgStat("MaxActTrgStat", " 0-1 error statistic, 1 if unit with max act has trg = 1", 
	"", "", "", sizeof(MaxActTrgStat), (void**)&TAI_MaxActTrgStat, 1, 0, 0,1);
TypeDef TA_const_MaxActTrgStat("const_MaxActTrgStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_UnitActRFStat("UnitActRFStat", " unit activity receptive-field stat: gets RF of units in layer from rf_layers by weighting rf_layer acts by unit acts of layer units", 
	"", "", "", sizeof(UnitActRFStat), (void**)&TAI_UnitActRFStat, 1, 0, 0,1);
TypeDef TA_const_MaxActTrgStat_ref("const_MaxActTrgStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_UnitActRFStat_ptr("UnitActRFStat_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_UnitActRFStat("const_UnitActRFStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UnitActRFStat_ref("const_UnitActRFStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_UnitActRFStatResetProc("UnitActRFStatResetProc", " resets the accumulated activation-based receptive field information on a UnitActRFStat -- put this at the point in a process heirarchy where RF's should be reset (e.g., Epoch INIT)", 
	"", "", "", sizeof(UnitActRFStatResetProc), (void**)&TAI_UnitActRFStatResetProc, 1, 0, 0,1);
TypeDef TA_const_UnitActRFStatResetProc("const_UnitActRFStatResetProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UnitActRFStatResetProc_ref("const_UnitActRFStatResetProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_UnitEventRFStat("UnitEventRFStat", " stores one event per unit, with each pattern element representing firing for each trial", 
	"", "", "", sizeof(UnitEventRFStat), (void**)&TAI_UnitEventRFStat, 1, 0, 0,1);
TypeDef TA_const_UnitEventRFStat("const_UnitEventRFStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UnitEventRFStat_ref("const_UnitEventRFStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_UniquePatStat("UniquePatStat", " An aggregator-like stat that counts the number of unique patterns in given stat", 
	"", "", "", sizeof(UniquePatStat), (void**)&TAI_UniquePatStat, 1, 0, 0,1);
TypeDef TA_const_UniquePatStat("const_UniquePatStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UniquePatStat_ref("const_UniquePatStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TimeCounterStat("TimeCounterStat", " continuously incrementing time counter -- useful for an X axis for graphing events across normal counter boundaries", 
	"", "", "", sizeof(TimeCounterStat), (void**)&TAI_TimeCounterStat, 1, 0, 0,1);
TypeDef TA_TimeCounterStat_ptr("TimeCounterStat_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TimeCounterStat("const_TimeCounterStat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TimeCounterStat_ref("const_TimeCounterStat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TimeCounterStatResetProc("TimeCounterStatResetProc", " resets the time on a TimeCounterStat -- put this at the point in a process heirarchy where time should be reset", 
	"", "", "", sizeof(TimeCounterStatResetProc), (void**)&TAI_TimeCounterStatResetProc, 1, 0, 0,1);
TypeDef TA_const_TimeCounterStatResetProc("const_TimeCounterStatResetProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TimeCounterStatResetProc_ref("const_TimeCounterStatResetProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DispDataEnvProc("DispDataEnvProc", " displays information contained in a data environment that is being updated by another statistic", 
	"", "", "", sizeof(DispDataEnvProc), (void**)&TAI_DispDataEnvProc, 1, 0, 0,1);
TypeDef TA_const_DispDataEnvProc("const_DispDataEnvProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DispDataEnvProc_ref("const_DispDataEnvProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DispNetWeightsProc("DispNetWeightsProc", " displays network weight values in a GridLog using GridViewWeights function", 
	"", "", "", sizeof(DispNetWeightsProc), (void**)&TAI_DispNetWeightsProc, 1, 0, 0,1);
TypeDef TA_const_DispNetWeightsProc("const_DispNetWeightsProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DispNetWeightsProc_ref("const_DispNetWeightsProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ClearLogProc("ClearLogProc", " clear a log display", 
	"", "", "", sizeof(ClearLogProc), (void**)&TAI_ClearLogProc, 1, 0, 0,1);
TypeDef TA_taGroup_TypeDefault_("taGroup_TypeDefault_", " ", 
	"", "", "", sizeof(taGroup<TypeDefault>), (void**)&TAI_taGroup_TypeDefault_, 0, 0, 0,1);
TypeDef TA_const_ClearLogProc("const_ClearLogProc", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ClearLogProc_ref("const_ClearLogProc_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TypeDefault_MGroup("TypeDefault_MGroup", " group of type default objects", 
	"", "", "", sizeof(TypeDefault_MGroup), (void**)&TAI_TypeDefault_MGroup, 0, 0, 0,1);
TypeDef TA_taGroup_SelectEdit_("taGroup_SelectEdit_", " ", 
	"", "", "", sizeof(taGroup<SelectEdit>), (void**)&TAI_taGroup_SelectEdit_, 0, 0, 0,1);
TypeDef TA_const_TypeDefault_MGroup("const_TypeDefault_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TypeDefault_MGroup_ref("const_TypeDefault_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SelectEdit_MGroup("SelectEdit_MGroup", " group of select edit dialog objects", 
	"", "", "", sizeof(SelectEdit_MGroup), (void**)&TAI_SelectEdit_MGroup, 0, 0, 0,1);
TypeDef TA_const_SelectEdit_MGroup("const_SelectEdit_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SelectEdit_MGroup_ref("const_SelectEdit_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_LayerWizEl("LayerWizEl", " specifies basic parameters for a layer", 
	"", "", "", sizeof(LayerWizEl), (void**)&TAI_LayerWizEl, 0, 0, 0,1);
TypeDef TA_TimeEnvironment_ptr("TimeEnvironment_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_LayerWizEl("const_LayerWizEl", 1, 0, 0, 0, 1, 0);
TypeDef TA_CopyToEnvStat_ptr("CopyToEnvStat_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_LayerWizEl_ref("const_LayerWizEl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DispDataEnvProc_ptr("DispDataEnvProc_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_DispNetWeightsProc_ptr("DispNetWeightsProc_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Wizard("Wizard", " wizard for automating construction of simulation objects", 
	"", "", "", sizeof(Wizard), (void**)&TAI_Wizard, 1, 0, 0,1);
TypeDef TA_taGroup_Wizard_("taGroup_Wizard_", " ", 
	"", "", "", sizeof(taGroup<Wizard>), (void**)&TAI_taGroup_Wizard_, 0, 0, 0,1);
TypeDef TA_const_Wizard("const_Wizard", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Wizard_ref("const_Wizard_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Wizard_MGroup("Wizard_MGroup", " group of wizard objects", 
	"", "", "", sizeof(Wizard_MGroup), (void**)&TAI_Wizard_MGroup, 0, 0, 0,1);
TypeDef TA_const_Wizard_MGroup("const_Wizard_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Wizard_MGroup_ref("const_Wizard_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_pdpDataViewer_ptr("pdpDataViewer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_Project("const_Project", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Project_ref("const_Project_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup_Project_("taGroup_Project_", " ", 
	"", "", "", sizeof(taGroup<Project>), (void**)&TAI_taGroup_Project_, 0, 0, 0,1);
TypeDef TA_ColorScaleSpec_MGroup_ptr("ColorScaleSpec_MGroup_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Project_MGroup("Project_MGroup", "", 
	"", "", "", sizeof(Project_MGroup), (void**)&TAI_Project_MGroup, 0, 0, 0,1);
TypeDef TA_const_PDPRoot("const_PDPRoot", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Project_MGroup("const_Project_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PDPRoot_ref("const_PDPRoot_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Project_MGroup_ref("const_Project_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PDPView("const_PDPView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PDPView_ref("const_PDPView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3UnitNode("T3UnitNode", " ", 
	"", "", "", sizeof(T3UnitNode), (void**)0, 0, 0, 0,1);
TypeDef TA_T3UnitGroupNode("T3UnitGroupNode", "", 
	"", "", "", sizeof(T3UnitGroupNode), (void**)0, 0, 0, 0,1);
TypeDef TA_T3LayerNode("T3LayerNode", "", 
	"", "", "", sizeof(T3LayerNode), (void**)0, 0, 0, 0,1);
TypeDef TA_T3PrjnNode("T3PrjnNode", "", 
	"", "", "", sizeof(T3PrjnNode), (void**)0, 0, 0, 0,1);
TypeDef TA_T3NetNode("T3NetNode", "", 
	"", "", "", sizeof(T3NetNode), (void**)0, 0, 0, 0,1);
TypeDef TA_T3LogViewNode("T3LogViewNode", "", 
	"", "", "", sizeof(T3LogViewNode), (void**)0, 0, 0, 0,1);
TypeDef TA_T3GridLogViewBaseNode("T3GridLogViewBaseNode", " ////////////////////////", 
	"", "", "", sizeof(T3GridLogViewBaseNode), (void**)0, 0, 0, 0,1);
TypeDef TA_T3UnitNode_Cylinder("T3UnitNode_Cylinder", " 2d color", 
	"", "", "", sizeof(T3UnitNode_Cylinder), (void**)0, 0, 0, 0,1);
TypeDef TA_T3UnitNode_Circle("T3UnitNode_Circle", " 2d color", 
	"", "", "", sizeof(T3UnitNode_Circle), (void**)0, 0, 0, 0,1);
TypeDef TA_T3UnitNode_Block("T3UnitNode_Block", " 2d color", 
	"", "", "", sizeof(T3UnitNode_Block), (void**)0, 0, 0, 0,1);
TypeDef TA_T3UnitNode_Rect("T3UnitNode_Rect", " 2d color", 
	"", "", "", sizeof(T3UnitNode_Rect), (void**)0, 0, 0, 0,1);
TypeDef TA_T3UnitGroupNode_ptr("T3UnitGroupNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoFrame_ptr("SoFrame_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3GraphLogViewNode("T3GraphLogViewNode", "", 
	"", "", "", sizeof(T3GraphLogViewNode), (void**)0, 0, 0, 0,1);
TypeDef TA_NetView("NetView", " ", 
	"", "", "", sizeof(NetView), (void**)&TAI_NetView, 0, 0, 0,1);
TypeDef TA_NetViewPanel("NetViewPanel", "  frame for gui interface to a NetView -- usually posted by the netview", 
	"", "", "", sizeof(NetViewPanel), (void**)0, 0, 0, 0,1);
TypeDef TA_NetView_ptr("NetView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_nvDataView("nvDataView", " most children of NetView", 
	"", "", "", sizeof(nvDataView), (void**)&TAI_nvDataView, 0, 0, 0,1);
TypeDef TA_const_nvDataView("const_nvDataView", 1, 0, 0, 0, 1, 0);
TypeDef TA_LayerView("LayerView", " ", 
	"", "", "", sizeof(LayerView), (void**)&TAI_LayerView, 0, 0, 0,1);
TypeDef TA_const_nvDataView_ref("const_nvDataView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PrjnView("PrjnView", " ", 
	"", "", "", sizeof(PrjnView), (void**)&TAI_PrjnView, 0, 0, 0,1);
TypeDef TA_UnitGroupView("UnitGroupView", " ", 
	"", "", "", sizeof(UnitGroupView), (void**)&TAI_UnitGroupView, 0, 0, 0,1);
TypeDef TA_T3UnitNode_ptr("T3UnitNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_UnitGroupView_ptr("UnitGroupView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_UnitView("UnitView", "", 
	"", "", "", sizeof(UnitView), (void**)&TAI_UnitView, 0, 0, 0,1);
TypeDef TA_const_UnitViewData_BArray_ref("const_UnitViewData_BArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_UnitView("const_UnitView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UnitViewData_ref("const_UnitViewData_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_UnitView_ref("const_UnitView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_UnitGroupView("const_UnitGroupView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UnitGroupView_ref("const_UnitGroupView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3LayerNode_ptr("T3LayerNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_LayerView("const_LayerView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LayerView_ref("const_LayerView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3PrjnNode_ptr("T3PrjnNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_PrjnView("const_PrjnView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PrjnView_ref("const_PrjnView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3NetNode_ptr("T3NetNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_UnitView_ptr("UnitView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ScaleRange_ref("ScaleRange_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_LayerView_ptr("LayerView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_NetView("const_NetView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NetView_ref("const_NetView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_NetViewPanel_ptr("NetViewPanel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiComboBox_ptr("taiComboBox_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiProcess("taiProcess", " adds control buttons to the edit window", 
	"", "", "", sizeof(taiProcess), (void**)&TAI_taiProcess, 0, 0, 0,1);
TypeDef TA_taiProcessRunBox("taiProcessRunBox", " just has the control buttons", 
	"", "", "", sizeof(taiProcessRunBox), (void**)&TAI_taiProcessRunBox, 0, 0, 0,1);
TypeDef TA_taiProcess_ptr("taiProcess_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiSpecMember("taiSpecMember", " special for the spec type member (adds the unique box)", 
	"", "", "", sizeof(taiSpecMember), (void**)&TAI_taiSpecMember, 0, 0, 0,1);
TypeDef TA_const_pdpDataViewer("const_pdpDataViewer", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_pdpDataViewer_ref("const_pdpDataViewer_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iLogView_Panel("iLogView_Panel", " abstract base for logview panels", 
	"", "", "", sizeof(iLogView_Panel), (void**)0, 0, 0, 0,1);
TypeDef TA_iGridLogViewBase_Panel("iGridLogViewBase_Panel", "", 
	"", "", "", sizeof(iGridLogViewBase_Panel), (void**)0, 0, 0, 0,1);
TypeDef TA_iTextLogView_Panel("iTextLogView_Panel", "", 
	"", "", "", sizeof(iTextLogView_Panel), (void**)0, 0, 0, 0,1);
TypeDef TA_iNetLogView_Panel("iNetLogView_Panel", "", 
	"", "", "", sizeof(iNetLogView_Panel), (void**)0, 0, 0, 0,1);
TypeDef TA_iGridLogView_Panel("iGridLogView_Panel", "", 
	"", "", "", sizeof(iGridLogView_Panel), (void**)0, 0, 0, 0,1);
TypeDef TA_iGraphLogView_Panel("iGraphLogView_Panel", " ////////////////////////", 
	"", "", "", sizeof(iGraphLogView_Panel), (void**)0, 0, 0, 0,1);
TypeDef TA_DT_ViewSpec_ptr("DT_ViewSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3LogViewNode_ptr("T3LogViewNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_LogView("const_LogView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LogView_ref("const_LogView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iLogView_Panel_ptr("iLogView_Panel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3GridLogViewBaseNode_ptr("T3GridLogViewBaseNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_GridLogViewBase("GridLogViewBase", " common subclass of TextLogView and GridLogView", 
	"", "", "", sizeof(GridLogViewBase), (void**)0, 0, 0, 0,1);
TypeDef TA_iTextLogView_Panel_ptr("iTextLogView_Panel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GridLogViewBase("const_GridLogViewBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_TextLogView("TextLogView", "  a textual view of the log data", 
	"", "", "", sizeof(TextLogView), (void**)&TAI_TextLogView, 0, 0, 0,1);
TypeDef TA_const_GridLogViewBase_ref("const_GridLogViewBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_TextLogView("const_TextLogView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TextLogView_ref("const_TextLogView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iNetLogView_Panel_ptr("iNetLogView_Panel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_NetLogView("const_NetLogView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NetLogView_ref("const_NetLogView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iGridLogView_Panel_ptr("iGridLogView_Panel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GridLogView("const_GridLogView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GridLogView_ref("const_GridLogView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GridLogView_ptr("GridLogView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_GraphLogViewLabel("GraphLogViewLabel", " view labels for graph logs", 
	"", "", "", sizeof(GraphLogViewLabel), (void**)&TAI_GraphLogViewLabel, 1, 0, 0,1);
TypeDef TA_const_GraphLogViewLabel("const_GraphLogViewLabel", 1, 0, 0, 0, 1, 0);
TypeDef TA_iGraphLogView_Panel_ptr("iGraphLogView_Panel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GraphLogViewLabel_ref("const_GraphLogViewLabel_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3GraphLogViewNode_ptr("T3GraphLogViewNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GraphLogView("const_GraphLogView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphLogView_ref("const_GraphLogView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GridLogViewBase_ptr("GridLogViewBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TextLogView_ptr("TextLogView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_NetLogView_ptr("NetLogView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_GraphLogView_ptr("GraphLogView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_EnviroView("EnviroView", " Graphical view of an Environment", 
	"", "", "", sizeof(EnviroView), (void**)&TAI_EnviroView, 1, 0, 0,1);
TypeDef TA_const_EnviroView("const_EnviroView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_EnviroView_ref("const_EnviroView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ipdpDataViewer_ptr("ipdpDataViewer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ipdpDataViewer("ipdpDataViewer", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoAction_ptr("SoAction_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoAction("SoAction", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoCube_ptr("SoCube_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoCube("SoCube", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoCylinder_ptr("SoCylinder_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoCylinder("SoCylinder", 1, 0, 0, 0, 1, 0);
TypeDef TA_iColor_ref("iColor_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ScaleBar_ptr("ScaleBar_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ScaleBar("ScaleBar", 1, 0, 0, 0, 1, 0);
TypeDef TA_iGraphButtons_ptr("iGraphButtons_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iGraphButtons("iGraphButtons", 1, 0, 0, 0, 1, 0);

// Instances

BaseSpec*		 TAI_BaseSpec=NULL;
  static cssEl* cssElCFun_BaseSpec_FindParent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSpec*)ths)->FindParent(), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_SetUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSpec*)ths)->SetUnique((char*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_GetUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BaseSpec*)ths)->GetUnique((char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BaseSpec_UpdateMember_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSpec*)ths)->UpdateMember((BaseSpec*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_UpdateSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSpec*)ths)->UpdateSpec();
    return rval;}
  static cssEl* cssElCFun_BaseSpec_UpdateChildren_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSpec*)ths)->UpdateChildren();
    return rval;}
  static cssEl* cssElCFun_BaseSpec_UpdateSubSpecs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSpec*)ths)->UpdateSubSpecs();
    return rval;}
  static cssEl* cssElCFun_BaseSpec_NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSpec*)ths)->NewChild(), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_CheckType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BaseSpec*)ths)->CheckType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BaseSpec_CheckObjectType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BaseSpec*)ths)->CheckObjectType((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BaseSpec_FindMakeChild_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((BaseSpec*)ths)->FindMakeChild((const char*)*arg[1]), 1, &TA_BaseSpec);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((BaseSpec*)ths)->FindMakeChild((const char*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_BaseSpec);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((BaseSpec*)ths)->FindMakeChild((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2), 1, &TA_BaseSpec);    *arg[3]=(Int)refarg_2;
}
    if(na == 4) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((BaseSpec*)ths)->FindMakeChild((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2, (const char*)*arg[4]), 1, &TA_BaseSpec);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_BaseSpec_RemoveChild_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((BaseSpec*)ths)->RemoveChild((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((BaseSpec*)ths)->RemoveChild((const char*)*arg[1], (TypeDef*)*arg[2]));}
    return rval;}
BaseSpec_MGroup*		 TAI_BaseSpec_MGroup=NULL;
  static cssEl* cssElCFun_BaseSpec_MGroup_FindSpecType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindSpecType((TypeDef*)*arg[1]), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_FindSpecInherits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindSpecInherits((TypeDef*)*arg[1]), 1, &TA_BaseSpec);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindSpecInherits((TypeDef*)*arg[1], (taBase*)(void*)*arg[2]), 1, &TA_BaseSpec);}
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_FindSpecTypeNotMe_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindSpecTypeNotMe((TypeDef*)*arg[1], (BaseSpec*)(void*)*arg[2]), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_FindSpecInheritsNotMe_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindSpecInheritsNotMe((TypeDef*)*arg[1], (BaseSpec*)(void*)*arg[2]), 1, &TA_BaseSpec);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindSpecInheritsNotMe((TypeDef*)*arg[1], (BaseSpec*)(void*)*arg[2], (taBase*)(void*)*arg[3]), 1, &TA_BaseSpec);}
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_FindSpecName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindSpecName((const char*)*arg[1]), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_FindMakeSpec_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindMakeSpec((const char*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_BaseSpec);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindMakeSpec((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2), 1, &TA_BaseSpec);    *arg[3]=(Int)refarg_2;
}
    if(na == 4) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindMakeSpec((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2, (const char*)*arg[4]), 1, &TA_BaseSpec);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_RemoveSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BaseSpec_MGroup*)ths)->RemoveSpec((const char*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_FindParent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSpec_MGroup*)ths)->FindParent(), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSpec_MGroup_NewChildSpec_mc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSpec_MGroup*)ths)->NewChildSpec_mc((taiMenuEl*)(void*)*arg[1]);
    return rval;}
Process*		 TAI_Process=NULL;
  static cssEl* cssElCFun_Process_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((Process*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((Process*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Process_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((Process*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_Process_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_Process_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((Process*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_Process_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Process_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Process*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_Process_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_Process_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_Process_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_Process_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((Process*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((Process*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((Process*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Process_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((Process*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Process*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Process*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Process_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((Process*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((Process*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Process*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_Process_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_Process_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_Process_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Process_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Process_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Process*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Process_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Process*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((Process*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Process_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Process_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Process_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Process*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Process_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_Process_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_Process_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((Process*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((Process*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_Process_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_Process_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Process_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Process_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((Process*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_Process_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_Process_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Process_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Process_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Process_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_Process_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Process*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_Process_HasScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->HasScript());
    return rval;}
  static cssEl* cssElCFun_Process_RunScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->RunScript());
    return rval;}
  static cssEl* cssElCFun_Process_SetScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->SetScript((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_LoadScript_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Process*)ths)->LoadScript();}
    if(na == 1) {
      ((Process*)ths)->LoadScript((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Process_LoadScriptString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Process*)ths)->LoadScriptString();}
    if(na == 1) {
      ((Process*)ths)->LoadScriptString((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Process_InteractScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->InteractScript();
    return rval;}
  static cssEl* cssElCFun_Process_NewInit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->NewInit();
    return rval;}
  static cssEl* cssElCFun_Process_ReInit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->ReInit();
    return rval;}
  static cssEl* cssElCFun_Process_Init_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->Init();
    return rval;}
  static cssEl* cssElCFun_Process_Run_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->Run();
    return rval;}
  static cssEl* cssElCFun_Process_Run_gui_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->Run_gui();
    return rval;}
  static cssEl* cssElCFun_Process_NewSeed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->NewSeed();
    return rval;}
  static cssEl* cssElCFun_Process_OldSeed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->OldSeed();
    return rval;}
  static cssEl* cssElCFun_Process_ControlPanel_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Process*)ths)->ControlPanel();}
    if(na == 1) {
      ((Process*)ths)->ControlPanel((float)*arg[1]);}
    if(na == 2) {
      ((Process*)ths)->ControlPanel((float)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Process_C_Code_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->C_Code();
    return rval;}
  static cssEl* cssElCFun_Process_CheckResetCache_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->CheckResetCache();
    return rval;}
  static cssEl* cssElCFun_Process_CheckNetwork_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process*)ths)->CheckNetwork());
    return rval;}
  static cssEl* cssElCFun_Process_SetEnv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->SetEnv((Environment*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_SetNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process*)ths)->SetNet((Network*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Process_GetMySchedProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetMySchedProc(), 1, &TA_SchedProcess);
    return rval;}
  static cssEl* cssElCFun_Process_GetMySProcOfType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetMySProcOfType((TypeDef*)*arg[1]), 1, &TA_SchedProcess);
    return rval;}
  static cssEl* cssElCFun_Process_GetMyTrialProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetMyTrialProc(), 1, &TA_TrialProcess);
    return rval;}
  static cssEl* cssElCFun_Process_GetMyEpochProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetMyEpochProc(), 1, &TA_EpochProcess);
    return rval;}
  static cssEl* cssElCFun_Process_GetMyCurEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetMyCurEvent(), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_Process_GetMyCurEventGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetMyCurEventGp(), 1, &TA_Event_MGroup);
    return rval;}
  static cssEl* cssElCFun_Process_GetMyNextEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Process*)ths)->GetMyNextEvent(), 1, &TA_Event);
    return rval;}
SigmoidSpec*		 TAI_SigmoidSpec=NULL;
  static cssEl* cssElCFun_SigmoidSpec_Clip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SigmoidSpec*)ths)->Clip((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SigmoidSpec_ClipNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SigmoidSpec*)ths)->ClipNet((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SigmoidSpec_Eval_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SigmoidSpec*)ths)->Eval((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SigmoidSpec_Deriv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SigmoidSpec*)ths)->Deriv((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SigmoidSpec_Inverse_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SigmoidSpec*)ths)->Inverse((float)*arg[1]));
    return rval;}
ConSpec*		 TAI_ConSpec=NULL;
  static cssEl* cssElCFun_ConSpec_C_ApplyLimits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->C_ApplyLimits((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_ApplyLimits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->ApplyLimits((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_ApplySymmetry_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->ApplySymmetry((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->C_InitWtState((Con_Group*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->InitWtState((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_C_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->C_InitWtDelta((Con_Group*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->InitWtDelta((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_C_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((ConSpec*)ths)->C_Compute_Net((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_ConSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((ConSpec*)ths)->Compute_Net((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ConSpec_C_Send_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->C_Send_Net((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_Send_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->Send_Net((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_C_Compute_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((ConSpec*)ths)->C_Compute_Dist((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_ConSpec_Compute_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((ConSpec*)ths)->Compute_Dist((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->C_Compute_dWt((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_C_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->C_UpdateWeights((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->UpdateWeights((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ConSpec_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      rval=new cssInt((int)((ConSpec*)ths)->CheckConfig((Con_Group*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Unit*)(void*)*arg[3], (TrialProcess*)(void*)*arg[4]));}
    if(na == 5) {
      rval=new cssInt((int)((ConSpec*)ths)->CheckConfig((Con_Group*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Unit*)(void*)*arg[3], (TrialProcess*)(void*)*arg[4], (bool)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_ConSpec_UseCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ConSpec*)ths)->UseCount());
    return rval;}
  static cssEl* cssElCFun_ConSpec_InitWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ConSpec*)ths)->InitWeights();
    return rval;}
  static cssEl* cssElCFun_ConSpec_DMem_AlwaysLocal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ConSpec*)ths)->DMem_AlwaysLocal());
    return rval;}
  static cssEl* cssElCFun_ConSpec_DMem_EpochShareDwtVar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ConSpec*)ths)->DMem_EpochShareDwtVar(), 1, &TA_MemberDef);
    return rval;}
Connection*		 TAI_Connection=NULL;
Con_Group*		 TAI_Con_Group=NULL;
  static cssEl* cssElCFun_Con_Group_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_Cn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Con_Group*)ths)->Cn((int)*arg[1]), 1, &TA_Connection);
    return rval;}
  static cssEl* cssElCFun_Con_Group_Un_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Con_Group*)ths)->Un((int)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_Con_Group_Copy_Weights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->Copy_Weights((const Con_Group*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_WriteWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Con_Group*)ths)->WriteWeights(refarg_0, (Unit*)(void*)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Con_Group*)ths)->WriteWeights(refarg_0, (Unit*)(void*)*arg[2], (Con_Group::WtSaveFormat)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Con_Group_ReadWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Con_Group*)ths)->ReadWeights(refarg_0, (Unit*)(void*)*arg[2]);}
    if(na == 3) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Con_Group*)ths)->ReadWeights(refarg_0, (Unit*)(void*)*arg[2], (Con_Group::WtSaveFormat)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Con_Group_NewCon_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Con_Group*)ths)->NewCon((TypeDef*)*arg[1], (Unit*)(void*)*arg[2]), 1, &TA_Connection);
    return rval;}
  static cssEl* cssElCFun_Con_Group_LinkCon_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->LinkCon((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_RemoveCon_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->RemoveCon((Unit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_AllocCon_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->AllocCon((int)*arg[1], (TypeDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_FindConFrom_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Con_Group*)ths)->FindConFrom((Unit*)(void*)*arg[1]), 1, &TA_Connection);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((Con_Group*)ths)->FindConFrom((Unit*)(void*)*arg[1], refarg_1), 1, &TA_Connection);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Con_Group_NewPrjn_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Con_Group*)ths)->NewPrjn((Projection*)(void*)*arg[1]), 1, &TA_Con_Group);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Con_Group*)ths)->NewPrjn((Projection*)(void*)*arg[1], (bool)*arg[2]), 1, &TA_Con_Group);}
    return rval;}
  static cssEl* cssElCFun_Con_Group_FindPrjn_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Con_Group*)ths)->FindPrjn((Projection*)(void*)*arg[1]), 1, &TA_Con_Group);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((Con_Group*)ths)->FindPrjn((Projection*)(void*)*arg[1], refarg_1), 1, &TA_Con_Group);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Con_Group_FindFrom_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Con_Group*)ths)->FindFrom((Layer*)(void*)*arg[1]), 1, &TA_Con_Group);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((Con_Group*)ths)->FindFrom((Layer*)(void*)*arg[1], refarg_1), 1, &TA_Con_Group);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Con_Group_FindTypeFrom_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Con_Group*)ths)->FindTypeFrom((TypeDef*)*arg[1], (Layer*)(void*)*arg[2]), 1, &TA_Con_Group);}
    if(na == 3) {
      int refarg_2=(int)*arg[3];
    rval=new cssTA_Base((void*)((Con_Group*)ths)->FindTypeFrom((TypeDef*)*arg[1], (Layer*)(void*)*arg[2], refarg_2), 1, &TA_Con_Group);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_Con_Group_FindLayer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Con_Group*)ths)->FindLayer((Layer*)(void*)*arg[1]), 1, &TA_Con_Group);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((Con_Group*)ths)->FindLayer((Layer*)(void*)*arg[1], refarg_1), 1, &TA_Con_Group);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Con_Group_RemovePrjn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->RemovePrjn((Projection*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_RemoveFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->RemoveFrom((Layer*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_FindRecipRecvCon_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Con_Group*)ths)->FindRecipRecvCon((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2]), 1, &TA_Connection);
    return rval;}
  static cssEl* cssElCFun_Con_Group_FindRecipSendCon_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Con_Group*)ths)->FindRecipSendCon((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2]), 1, &TA_Connection);
    return rval;}
  static cssEl* cssElCFun_Con_Group_TransformWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->TransformWeights(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));
    return rval;}
  static cssEl* cssElCFun_Con_Group_AddNoiseToWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_Con_Group_PruneCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->PruneCons((Unit*)(void*)*arg[1], *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec), (CountParam::Relation)(int)*arg[3], (float)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssInt((int)((Con_Group*)ths)->LesionCons((Unit*)(void*)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((Con_Group*)ths)->LesionCons((Unit*)(void*)*arg[1], (float)*arg[2], (bool)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Con_Group_CheckTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->CheckTypes());
    return rval;}
  static cssEl* cssElCFun_Con_Group_CheckOtherIdx_Recv_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->CheckOtherIdx_Recv());
    return rval;}
  static cssEl* cssElCFun_Con_Group_CheckOtherIdx_Send_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->CheckOtherIdx_Send());
    return rval;}
  static cssEl* cssElCFun_Con_Group_ConValuesToArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Con_Group*)ths)->ConValuesToArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_ConValuesFromArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Con_Group*)ths)->ConValuesFromArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_ReplaceConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Con_Group*)ths)->ReplaceConSpec((ConSpec*)(void*)*arg[1], (ConSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->InitWtState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->C_InitWtState((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->InitWtDelta((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Con_Group*)ths)->Compute_Net((Unit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_Send_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->Send_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_Compute_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Con_Group*)ths)->Compute_Dist((Unit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Con_Group_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Con_Group*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Con_Group_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssInt((int)((Con_Group*)ths)->CheckConfig((Layer*)(void*)*arg[1], (Unit*)(void*)*arg[2], (TrialProcess*)(void*)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((Con_Group*)ths)->CheckConfig((Layer*)(void*)*arg[1], (Unit*)(void*)*arg[2], (TrialProcess*)(void*)*arg[3], (bool)*arg[4]));}
    return rval;}
UnitSpec*		 TAI_UnitSpec=NULL;
  static cssEl* cssElCFun_UnitSpec_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->InitState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_ModifyState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->ModifyState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->InitWtDelta((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->InitWtState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_Send_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->Send_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_Send_NetToLay_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->Send_NetToLay((Unit*)(void*)*arg[1], (Layer*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_UnitSpec_BuildBiasCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((UnitSpec*)ths)->BuildBiasCons();
    return rval;}
  static cssEl* cssElCFun_UnitSpec_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssInt((int)((UnitSpec*)ths)->CheckConfig((Unit*)(void*)*arg[1], (Layer*)(void*)*arg[2], (TrialProcess*)(void*)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((UnitSpec*)ths)->CheckConfig((Unit*)(void*)*arg[1], (Layer*)(void*)*arg[2], (TrialProcess*)(void*)*arg[3], (bool)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_UnitSpec_UseCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((UnitSpec*)ths)->UseCount());
    return rval;}
Unit*		 TAI_Unit=NULL;
  static cssEl* cssElCFun_Unit_ugrp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Unit*)ths)->ugrp(), 1, &TA_Unit_Group);
    return rval;}
  static cssEl* cssElCFun_Unit_Copy_Weights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Unit*)ths)->Copy_Weights((const Unit*)(void*)*arg[1]);}
    if(na == 2) {
      ((Unit*)ths)->Copy_Weights((const Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Unit_WriteWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Unit*)ths)->WriteWeights(refarg_0);}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Unit*)ths)->WriteWeights(refarg_0, (Projection*)(void*)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Unit*)ths)->WriteWeights(refarg_0, (Projection*)(void*)*arg[2], (Con_Group::WtSaveFormat)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Unit_ReadWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Unit*)ths)->ReadWeights(refarg_0);}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Unit*)ths)->ReadWeights(refarg_0, (Projection*)(void*)*arg[2]);}
    if(na == 3) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Unit*)ths)->ReadWeights(refarg_0, (Projection*)(void*)*arg[2], (Con_Group::WtSaveFormat)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Unit_SetExtFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->SetExtFlag((Unit::ExtType)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Unit_UnSetExtFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->UnSetExtFlag((Unit::ExtType)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Unit_InitExterns_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->InitExterns();
    return rval;}
  static cssEl* cssElCFun_Unit_InitDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->InitDelta();
    return rval;}
  static cssEl* cssElCFun_Unit_InitState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->InitState();
    return rval;}
  static cssEl* cssElCFun_Unit_ModifyState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->ModifyState();
    return rval;}
  static cssEl* cssElCFun_Unit_InitWtDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->InitWtDelta();
    return rval;}
  static cssEl* cssElCFun_Unit_InitWtState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->InitWtState();
    return rval;}
  static cssEl* cssElCFun_Unit_Compute_Net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->Compute_Net();
    return rval;}
  static cssEl* cssElCFun_Unit_Send_Net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->Send_Net();
    return rval;}
  static cssEl* cssElCFun_Unit_Send_NetToLay_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->Send_NetToLay((Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Unit_Compute_Act_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->Compute_Act();
    return rval;}
  static cssEl* cssElCFun_Unit_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->UpdateWeights();
    return rval;}
  static cssEl* cssElCFun_Unit_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->Compute_dWt();
    return rval;}
  static cssEl* cssElCFun_Unit_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssInt((int)((Unit*)ths)->CheckConfig((Layer*)(void*)*arg[1], (TrialProcess*)(void*)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((Unit*)ths)->CheckConfig((Layer*)(void*)*arg[1], (TrialProcess*)(void*)*arg[2], (bool)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Unit_Build_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit*)ths)->Build());
    return rval;}
  static cssEl* cssElCFun_Unit_CheckBuild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit*)ths)->CheckBuild());
    return rval;}
  static cssEl* cssElCFun_Unit_ConnectAlloc_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Unit*)ths)->ConnectAlloc((int)*arg[1], (Projection*)(void*)*arg[2]);}
    if(na == 3) {
      Con_Group* refarg_2=(Con_Group*)(void*)*arg[3];
    ((Unit*)ths)->ConnectAlloc((int)*arg[1], (Projection*)(void*)*arg[2], refarg_2);    *arg[3]=(void*)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_Unit_ConnectFrom_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFrom((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2]), 1, &TA_Connection);}
    if(na == 3) {
      Con_Group* refarg_2=(Con_Group*)(void*)*arg[3];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFrom((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], refarg_2), 1, &TA_Connection);    *arg[3]=(void*)refarg_2;
}
    if(na == 4) {
      Con_Group* refarg_2=(Con_Group*)(void*)*arg[3];    Con_Group* refarg_3=(Con_Group*)(void*)*arg[4];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFrom((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], refarg_2, refarg_3), 1, &TA_Connection);    *arg[3]=(void*)refarg_2;    *arg[4]=(void*)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_Unit_ConnectFromLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromLink((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], (Connection*)(void*)*arg[3]), 1, &TA_Connection);}
    if(na == 4) {
      Con_Group* refarg_3=(Con_Group*)(void*)*arg[4];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromLink((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], (Connection*)(void*)*arg[3], refarg_3), 1, &TA_Connection);    *arg[4]=(void*)refarg_3;
}
    if(na == 5) {
      Con_Group* refarg_3=(Con_Group*)(void*)*arg[4];    Con_Group* refarg_4=(Con_Group*)(void*)*arg[5];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromLink((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], (Connection*)(void*)*arg[3], refarg_3, refarg_4), 1, &TA_Connection);    *arg[4]=(void*)refarg_3;    *arg[5]=(void*)refarg_4;
}
    return rval;}
  static cssEl* cssElCFun_Unit_ConnectFromCk_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromCk((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2]), 1, &TA_Connection);}
    if(na == 3) {
      Con_Group* refarg_2=(Con_Group*)(void*)*arg[3];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromCk((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], refarg_2), 1, &TA_Connection);    *arg[3]=(void*)refarg_2;
}
    if(na == 4) {
      Con_Group* refarg_2=(Con_Group*)(void*)*arg[3];    Con_Group* refarg_3=(Con_Group*)(void*)*arg[4];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromCk((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], refarg_2, refarg_3), 1, &TA_Connection);    *arg[3]=(void*)refarg_2;    *arg[4]=(void*)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_Unit_ConnectFromLinkCk_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromLinkCk((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], (Connection*)(void*)*arg[3]), 1, &TA_Connection);}
    if(na == 4) {
      Con_Group* refarg_3=(Con_Group*)(void*)*arg[4];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromLinkCk((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], (Connection*)(void*)*arg[3], refarg_3), 1, &TA_Connection);    *arg[4]=(void*)refarg_3;
}
    if(na == 5) {
      Con_Group* refarg_3=(Con_Group*)(void*)*arg[4];    Con_Group* refarg_4=(Con_Group*)(void*)*arg[5];
    rval=new cssTA_Base((void*)((Unit*)ths)->ConnectFromLinkCk((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2], (Connection*)(void*)*arg[3], refarg_3, refarg_4), 1, &TA_Connection);    *arg[4]=(void*)refarg_3;    *arg[5]=(void*)refarg_4;
}
    return rval;}
  static cssEl* cssElCFun_Unit_DisConnectFrom_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Unit*)ths)->DisConnectFrom((Unit*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Unit*)ths)->DisConnectFrom((Unit*)(void*)*arg[1], (Projection*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Unit_DisConnectAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit*)ths)->DisConnectAll();
    return rval;}
  static cssEl* cssElCFun_Unit_CountRecvCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit*)ths)->CountRecvCons());
    return rval;}
  static cssEl* cssElCFun_Unit_TransformWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Unit*)ths)->TransformWeights(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));}
    if(na == 2) {
      ((Unit*)ths)->TransformWeights(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (Projection*)(void*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Unit_AddNoiseToWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Unit*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));}
    if(na == 2) {
      ((Unit*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random), (Projection*)(void*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Unit_PruneCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssInt((int)((Unit*)ths)->PruneCons(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (CountParam::Relation)(int)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((Unit*)ths)->PruneCons(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (CountParam::Relation)(int)*arg[2], (float)*arg[3], (Projection*)(void*)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_Unit_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Unit*)ths)->LesionCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Unit*)ths)->LesionCons((float)*arg[1], (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((Unit*)ths)->LesionCons((float)*arg[1], (bool)*arg[2], (Projection*)(void*)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Unit_SetConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit*)ths)->SetConSpec((ConSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Unit_CheckTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit*)ths)->CheckTypes());
    return rval;}
  static cssEl* cssElCFun_Unit_ReplaceUnitSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit*)ths)->ReplaceUnitSpec((UnitSpec*)(void*)*arg[1], (UnitSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Unit_ReplaceConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit*)ths)->ReplaceConSpec((ConSpec*)(void*)*arg[1], (ConSpec*)(void*)*arg[2]));
    return rval;}
ProjectionSpec*		 TAI_ProjectionSpec=NULL;
  static cssEl* cssElCFun_ProjectionSpec_RemoveCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->RemoveCons((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_PreConnect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->PreConnect((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_Connect_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->Connect_impl((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_Connect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->Connect((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_ProbAddCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssInt((int)((ProjectionSpec*)ths)->ProbAddCons((Projection*)(void*)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((ProjectionSpec*)ths)->ProbAddCons((Projection*)(void*)*arg[1], (float)*arg[2], (float)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->InitWtDelta((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->InitWtState((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->C_InitWtState((Projection*)(void*)*arg[1], (Con_Group*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_CopyNetwork_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionSpec*)ths)->CopyNetwork((Network*)(void*)*arg[1], (Network*)(void*)*arg[2], (Projection*)(void*)*arg[3], (Projection*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_ProjectionSpec_UseCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ProjectionSpec*)ths)->UseCount());
    return rval;}
Projection*		 TAI_Projection=NULL;
  static cssEl* cssElCFun_Projection_SetFromPoints_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->SetFromPoints((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Projection_SetToPoints_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->SetToPoints((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Projection_SetFrom_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->SetFrom();
    return rval;}
  static cssEl* cssElCFun_Projection_SetCustomFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->SetCustomFrom((Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Projection_Copy_Weights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->Copy_Weights((const Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Projection_WriteWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Projection*)ths)->WriteWeights(refarg_0);}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Projection*)ths)->WriteWeights(refarg_0, (Con_Group::WtSaveFormat)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Projection_ReadWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Projection*)ths)->ReadWeights(refarg_0);}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Projection*)ths)->ReadWeights(refarg_0, (Con_Group::WtSaveFormat)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Projection_RemoveCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->RemoveCons();
    return rval;}
  static cssEl* cssElCFun_Projection_PreConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->PreConnect();
    return rval;}
  static cssEl* cssElCFun_Projection_Connect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->Connect();
    return rval;}
  static cssEl* cssElCFun_Projection_Connect_impl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->Connect_impl();
    return rval;}
  static cssEl* cssElCFun_Projection_ProbAddCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Projection*)ths)->ProbAddCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Projection*)ths)->ProbAddCons((float)*arg[1], (float)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Projection_InitWtDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->InitWtDelta();
    return rval;}
  static cssEl* cssElCFun_Projection_InitWtState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->InitWtState();
    return rval;}
  static cssEl* cssElCFun_Projection_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->C_InitWtState((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Projection_TransformWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->TransformWeights(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));
    return rval;}
  static cssEl* cssElCFun_Projection_AddNoiseToWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_Projection_PruneCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->PruneCons(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (CountParam::Relation)(int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Projection_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Projection*)ths)->LesionCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Projection*)ths)->LesionCons((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Projection_SetConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->SetConSpec((ConSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Projection_ApplyConSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->ApplyConSpec());
    return rval;}
  static cssEl* cssElCFun_Projection_CheckTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->CheckTypes());
    return rval;}
  static cssEl* cssElCFun_Projection_FixIndexes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->FixIndexes();
    return rval;}
  static cssEl* cssElCFun_Projection_ReplaceConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->ReplaceConSpec((ConSpec*)(void*)*arg[1], (ConSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Projection_ReplacePrjnSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->ReplacePrjnSpec((ProjectionSpec*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Projection_SetConType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->SetConType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Projection_SetConGpType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Projection*)ths)->SetConGpType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Projection_GridViewWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Projection*)ths)->GridViewWeights((GridLog*)(void*)*arg[1]);}
    if(na == 2) {
      ((Projection*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (bool)*arg[2]);}
    if(na == 3) {
      ((Projection*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (bool)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((Projection*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((Projection*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    if(na == 6) {
      ((Projection*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], (int)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_Projection_WeightsToEnv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Projection*)ths)->WeightsToEnv((Environment*)(void*)*arg[1]);
    return rval;}
LayerSpec*		 TAI_LayerSpec=NULL;
  static cssEl* cssElCFun_LayerSpec_UseCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((LayerSpec*)ths)->UseCount());
    return rval;}
Layer*		 TAI_Layer=NULL;
  static cssEl* cssElCFun_Layer_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((Layer*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((Layer*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Layer_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((Layer*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_Layer_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_Layer_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((Layer*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_Layer_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Layer_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Layer*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_Layer_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_Layer_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_Layer_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Layer*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_Layer_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((Layer*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((Layer*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((Layer*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Layer_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((Layer*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Layer*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Layer*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Layer_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((Layer*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((Layer*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Layer*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_Layer_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_Layer_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_Layer_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Layer*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Layer_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Layer*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((Layer*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Layer_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Layer_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Layer_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Layer*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Layer_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_Layer_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_Layer_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((Layer*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((Layer*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_Layer_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_Layer_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((Layer*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_Layer_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_Layer_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Layer_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Layer_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_Layer_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Layer*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_Layer_can_sequence__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->can_sequence_());
    return rval;}
  static cssEl* cssElCFun_Layer_sequencer__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Layer*)ths)->sequencer_(), 1, &TA_ISequencable);
    return rval;}
  static cssEl* cssElCFun_Layer_source_channels__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->source_channels_();
    return rval;}
  static cssEl* cssElCFun_Layer_GetData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Layer*)ths)->GetData((SourceChannel*)(void*)*arg[1]), 1, &TA_taMatrix_impl);
    return rval;}
  static cssEl* cssElCFun_Layer_Copy_Weights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Copy_Weights((const Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_WriteWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Layer*)ths)->WriteWeights(refarg_0);}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Layer*)ths)->WriteWeights(refarg_0, (Con_Group::WtSaveFormat)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Layer_ReadWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Layer*)ths)->ReadWeights(refarg_0);}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Layer*)ths)->ReadWeights(refarg_0, (Con_Group::WtSaveFormat)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Layer_Build_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Build();
    return rval;}
  static cssEl* cssElCFun_Layer_RecomputeGeometry_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->RecomputeGeometry();
    return rval;}
  static cssEl* cssElCFun_Layer_LayoutUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Layer*)ths)->LayoutUnits();}
    if(na == 1) {
      ((Layer*)ths)->LayoutUnits((Unit*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Layer_LayoutUnitGroups_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->LayoutUnitGroups();
    return rval;}
  static cssEl* cssElCFun_Layer_ConnectFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->ConnectFrom((Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_Connect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Connect();
    return rval;}
  static cssEl* cssElCFun_Layer_CheckBuild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->CheckBuild());
    return rval;}
  static cssEl* cssElCFun_Layer_CheckConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->CheckConnect());
    return rval;}
  static cssEl* cssElCFun_Layer_RemoveCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->RemoveCons();
    return rval;}
  static cssEl* cssElCFun_Layer_RemoveUnits_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->RemoveUnits();
    return rval;}
  static cssEl* cssElCFun_Layer_RemoveUnitGroups_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->RemoveUnitGroups();
    return rval;}
  static cssEl* cssElCFun_Layer_PreConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->PreConnect();
    return rval;}
  static cssEl* cssElCFun_Layer_SyncSendPrjns_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->SyncSendPrjns();
    return rval;}
  static cssEl* cssElCFun_Layer_DisConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->DisConnect();
    return rval;}
  static cssEl* cssElCFun_Layer_CountRecvCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->CountRecvCons());
    return rval;}
  static cssEl* cssElCFun_Layer_InitExterns_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->InitExterns();
    return rval;}
  static cssEl* cssElCFun_Layer_InitDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->InitDelta();
    return rval;}
  static cssEl* cssElCFun_Layer_InitState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->InitState();
    return rval;}
  static cssEl* cssElCFun_Layer_ModifyState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->ModifyState();
    return rval;}
  static cssEl* cssElCFun_Layer_InitWtDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->InitWtDelta();
    return rval;}
  static cssEl* cssElCFun_Layer_InitWtState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->InitWtState();
    return rval;}
  static cssEl* cssElCFun_Layer_Compute_Net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Compute_Net();
    return rval;}
  static cssEl* cssElCFun_Layer_Send_Net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Send_Net();
    return rval;}
  static cssEl* cssElCFun_Layer_Send_NetToLay_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Send_NetToLay((Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_Send_NetToMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Send_NetToMe();
    return rval;}
  static cssEl* cssElCFun_Layer_Compute_Act_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Compute_Act();
    return rval;}
  static cssEl* cssElCFun_Layer_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->UpdateWeights();
    return rval;}
  static cssEl* cssElCFun_Layer_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->Compute_dWt();
    return rval;}
  static cssEl* cssElCFun_Layer_TransformWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->TransformWeights(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));
    return rval;}
  static cssEl* cssElCFun_Layer_AddNoiseToWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_Layer_PruneCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->PruneCons(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (CountParam::Relation)(int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Layer_ProbAddCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Layer*)ths)->ProbAddCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Layer*)ths)->ProbAddCons((float)*arg[1], (float)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Layer_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Layer*)ths)->LesionCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Layer*)ths)->LesionCons((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Layer_LesionUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Layer*)ths)->LesionUnits((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Layer*)ths)->LesionUnits((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Layer_SetLayerSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->SetLayerSpec((LayerSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_GetLayerSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Layer*)ths)->GetLayerSpec(), 1, &TA_LayerSpec);
    return rval;}
  static cssEl* cssElCFun_Layer_SetUnitSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->SetUnitSpec((UnitSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_SetUnitType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->SetUnitType((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_SetConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->SetConSpec((ConSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Layer_CheckTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->CheckTypes());
    return rval;}
  static cssEl* cssElCFun_Layer_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Layer*)ths)->CheckConfig((TrialProcess*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Layer*)ths)->CheckConfig((TrialProcess*)(void*)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Layer_FixPrjnIndexes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->FixPrjnIndexes();
    return rval;}
  static cssEl* cssElCFun_Layer_ReplaceUnitSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->ReplaceUnitSpec((UnitSpec*)(void*)*arg[1], (UnitSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Layer_ReplaceConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->ReplaceConSpec((ConSpec*)(void*)*arg[1], (ConSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Layer_ReplacePrjnSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->ReplacePrjnSpec((ProjectionSpec*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Layer_ReplaceLayerSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Layer*)ths)->ReplaceLayerSpec((LayerSpec*)(void*)*arg[1], (LayerSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Layer_GridViewWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Layer*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2]);}
    if(na == 3) {
      ((Layer*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (bool)*arg[3]);}
    if(na == 4) {
      ((Layer*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (bool)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((Layer*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (bool)*arg[3], (int)*arg[4], (int)*arg[5]);}
    if(na == 6) {
      ((Layer*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (bool)*arg[3], (int)*arg[4], (int)*arg[5], (int)*arg[6]);}
    if(na == 7) {
      ((Layer*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (bool)*arg[3], (int)*arg[4], (int)*arg[5], (int)*arg[6], (int)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_Layer_WeightsToEnv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->WeightsToEnv((Environment*)(void*)*arg[1], (Layer*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Layer_SetExtFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->SetExtFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_UnSetExtFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Layer*)ths)->UnSetExtFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Layer_FindUnitFmCoord_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Layer*)ths)->FindUnitFmCoord(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_Layer_FindUnitGpFmCoord_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Layer*)ths)->FindUnitGpFmCoord(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)), 1, &TA_Unit_Group);
    return rval;}
  static cssEl* cssElCFun_Layer_GetActGeomNoSpc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    PosTDCoord& refarg_0=*(PosTDCoord*)arg[1]->GetVoidPtrOfType(&TA_PosTDCoord);
    ((Layer*)ths)->GetActGeomNoSpc(refarg_0);
    return rval;}
Network*		 TAI_Network=NULL;
  static cssEl* cssElCFun_Network_DMem_SyncNRecvCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->DMem_SyncNRecvCons();
    return rval;}
  static cssEl* cssElCFun_Network_DMem_DistributeUnits_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->DMem_DistributeUnits();
    return rval;}
  static cssEl* cssElCFun_Network_GetDefaultX_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->GetDefaultX());
    return rval;}
  static cssEl* cssElCFun_Network_GetDefaultY_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->GetDefaultY());
    return rval;}
  static cssEl* cssElCFun_Network_GetDefaultZ_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->GetDefaultZ());
    return rval;}
  static cssEl* cssElCFun_Network_OpenViewer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->OpenViewer();
    return rval;}
  static cssEl* cssElCFun_Network_Copy_Weights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->Copy_Weights((const Network*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Network_WriteWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Network*)ths)->WriteWeights(refarg_0);}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Network*)ths)->WriteWeights(refarg_0, (Network::WtSaveFormat)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Network_ReadWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((Network*)ths)->ReadWeights(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Network_ReadOldPDPNet_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Network*)ths)->ReadOldPDPNet(refarg_0);}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Network*)ths)->ReadOldPDPNet(refarg_0, (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Network_Build_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->Build();
    return rval;}
  static cssEl* cssElCFun_Network_Connect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->Connect();
    return rval;}
  static cssEl* cssElCFun_Network_CheckBuild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->CheckBuild());
    return rval;}
  static cssEl* cssElCFun_Network_CheckConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->CheckConnect());
    return rval;}
  static cssEl* cssElCFun_Network_UpdtAfterNetMod_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->UpdtAfterNetMod();
    return rval;}
  static cssEl* cssElCFun_Network_SyncSendPrjns_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->SyncSendPrjns();
    return rval;}
  static cssEl* cssElCFun_Network_CountRecvCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->CountRecvCons();
    return rval;}
  static cssEl* cssElCFun_Network_ConnectUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Network*)ths)->ConnectUnits((Unit*)(void*)*arg[1]);}
    if(na == 2) {
      ((Network*)ths)->ConnectUnits((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2]);}
    if(na == 3) {
      ((Network*)ths)->ConnectUnits((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2], (bool)*arg[3]);}
    if(na == 4) {
      ((Network*)ths)->ConnectUnits((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2], (bool)*arg[3], (ConSpec*)(void*)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_Network_RemoveCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->RemoveCons();
    return rval;}
  static cssEl* cssElCFun_Network_RemoveUnits_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->RemoveUnits();
    return rval;}
  static cssEl* cssElCFun_Network_RemoveUnitGroups_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->RemoveUnitGroups();
    return rval;}
  static cssEl* cssElCFun_Network_LayoutUnitGroups_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->LayoutUnitGroups();
    return rval;}
  static cssEl* cssElCFun_Network_PreConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->PreConnect();
    return rval;}
  static cssEl* cssElCFun_Network_CheckTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->CheckTypes());
    return rval;}
  static cssEl* cssElCFun_Network_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Network*)ths)->CheckConfig((TrialProcess*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Network*)ths)->CheckConfig((TrialProcess*)(void*)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Network_FixPrjnIndexes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->FixPrjnIndexes();
    return rval;}
  static cssEl* cssElCFun_Network_RemoveMonitors_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->RemoveMonitors();
    return rval;}
  static cssEl* cssElCFun_Network_UpdateMonitors_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->UpdateMonitors();
    return rval;}
  static cssEl* cssElCFun_Network_InitExterns_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->InitExterns();
    return rval;}
  static cssEl* cssElCFun_Network_InitDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->InitDelta();
    return rval;}
  static cssEl* cssElCFun_Network_InitState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->InitState();
    return rval;}
  static cssEl* cssElCFun_Network_ModifyState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->ModifyState();
    return rval;}
  static cssEl* cssElCFun_Network_InitWtDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->InitWtDelta();
    return rval;}
  static cssEl* cssElCFun_Network_InitWtState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->InitWtState();
    return rval;}
  static cssEl* cssElCFun_Network_Compute_Net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->Compute_Net();
    return rval;}
  static cssEl* cssElCFun_Network_Send_Net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->Send_Net();
    return rval;}
  static cssEl* cssElCFun_Network_Compute_Act_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->Compute_Act();
    return rval;}
  static cssEl* cssElCFun_Network_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->UpdateWeights();
    return rval;}
  static cssEl* cssElCFun_Network_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->Compute_dWt();
    return rval;}
  static cssEl* cssElCFun_Network_TransformWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->TransformWeights(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));
    return rval;}
  static cssEl* cssElCFun_Network_AddNoiseToWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_Network_PruneCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->PruneCons(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (CountParam::Relation)(int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Network_ProbAddCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Network*)ths)->ProbAddCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Network*)ths)->ProbAddCons((float)*arg[1], (float)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Network_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Network*)ths)->LesionCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Network*)ths)->LesionCons((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Network_LesionUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Network*)ths)->LesionUnits((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Network*)ths)->LesionUnits((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Network_TwoD_Or_ThreeD_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->TwoD_Or_ThreeD((Network::LayerLayout)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Network_GridViewWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((Network*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Layer*)(void*)*arg[3]);}
    if(na == 4) {
      ((Network*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Layer*)(void*)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      ((Network*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Layer*)(void*)*arg[3], (bool)*arg[4], (int)*arg[5]);}
    if(na == 6) {
      ((Network*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Layer*)(void*)*arg[3], (bool)*arg[4], (int)*arg[5], (int)*arg[6]);}
    if(na == 7) {
      ((Network*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Layer*)(void*)*arg[3], (bool)*arg[4], (int)*arg[5], (int)*arg[6], (int)*arg[7]);}
    if(na == 8) {
      ((Network*)ths)->GridViewWeights((GridLog*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Layer*)(void*)*arg[3], (bool)*arg[4], (int)*arg[5], (int)*arg[6], (int)*arg[7], (int)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_Network_WeightsToEnv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Network*)ths)->WeightsToEnv((Environment*)(void*)*arg[1], (Layer*)(void*)*arg[2], (Layer*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_Network_ReplaceUnitSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->ReplaceUnitSpec((UnitSpec*)(void*)*arg[1], (UnitSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Network_ReplaceConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->ReplaceConSpec((ConSpec*)(void*)*arg[1], (ConSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Network_ReplacePrjnSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->ReplacePrjnSpec((ProjectionSpec*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Network_ReplaceLayerSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->ReplaceLayerSpec((LayerSpec*)(void*)*arg[1], (LayerSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Network_FindMakeLayer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeLayer((const char*)*arg[1]), 1, &TA_Layer);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeLayer((const char*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Layer);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((Network*)ths)->FindMakeLayer((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2), 1, &TA_Layer);    *arg[3]=(Int)refarg_2;
}
    if(na == 4) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((Network*)ths)->FindMakeLayer((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2, (const char*)*arg[4]), 1, &TA_Layer);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_Network_FindLayer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Network*)ths)->FindLayer((const char*)*arg[1]), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_Network_FindMakePrjn_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjn((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2]), 1, &TA_Projection);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjn((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3]), 1, &TA_Projection);}
    if(na == 4) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjn((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3], (ConSpec*)(void*)*arg[4]), 1, &TA_Projection);}
    if(na == 5) {
      bool refarg_4=(bool)*arg[5];
    rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjn((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3], (ConSpec*)(void*)*arg[4], refarg_4), 1, &TA_Projection);    *arg[5]=(Int)refarg_4;
}
    return rval;}
  static cssEl* cssElCFun_Network_FindMakePrjnAdd_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjnAdd((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2]), 1, &TA_Projection);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjnAdd((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3]), 1, &TA_Projection);}
    if(na == 4) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjnAdd((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3], (ConSpec*)(void*)*arg[4]), 1, &TA_Projection);}
    if(na == 5) {
      bool refarg_4=(bool)*arg[5];
    rval=new cssTA_Base((void*)((Network*)ths)->FindMakePrjnAdd((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3], (ConSpec*)(void*)*arg[4], refarg_4), 1, &TA_Projection);    *arg[5]=(Int)refarg_4;
}
    return rval;}
  static cssEl* cssElCFun_Network_FindMakeSelfPrjn_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjn((Layer*)(void*)*arg[1]), 1, &TA_Projection);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjn((Layer*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2]), 1, &TA_Projection);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjn((Layer*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2], (ConSpec*)(void*)*arg[3]), 1, &TA_Projection);}
    if(na == 4) {
      bool refarg_3=(bool)*arg[4];
    rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjn((Layer*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2], (ConSpec*)(void*)*arg[3], refarg_3), 1, &TA_Projection);    *arg[4]=(Int)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_Network_FindMakeSelfPrjnAdd_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjnAdd((Layer*)(void*)*arg[1]), 1, &TA_Projection);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjnAdd((Layer*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2]), 1, &TA_Projection);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjnAdd((Layer*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2], (ConSpec*)(void*)*arg[3]), 1, &TA_Projection);}
    if(na == 4) {
      bool refarg_3=(bool)*arg[4];
    rval=new cssTA_Base((void*)((Network*)ths)->FindMakeSelfPrjnAdd((Layer*)(void*)*arg[1], (ProjectionSpec*)(void*)*arg[2], (ConSpec*)(void*)*arg[3], refarg_3), 1, &TA_Projection);    *arg[4]=(Int)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_Network_RemovePrjn_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssInt((int)((Network*)ths)->RemovePrjn((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((Network*)ths)->RemovePrjn((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((Network*)ths)->RemovePrjn((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (ProjectionSpec*)(void*)*arg[3], (ConSpec*)(void*)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_Network_RemoveLayer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Network*)ths)->RemoveLayer((const char*)*arg[1]));
    return rval;}
Project*		 TAI_Project=NULL;
  static cssEl* cssElCFun_Project_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Project_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Project_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Project*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Project_LoadDefaults_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Project*)ths)->LoadDefaults();
    return rval;}
  static cssEl* cssElCFun_Project_UpdateColors_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Project*)ths)->UpdateColors();
    return rval;}
  static cssEl* cssElCFun_Project_GetDefaultColors_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Project*)ths)->GetDefaultColors();
    return rval;}
  static cssEl* cssElCFun_Project_MakeDefaultWiz_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Project*)ths)->MakeDefaultWiz((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Project_FindMakeSpecGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Project*)ths)->FindMakeSpecGp((const char*)*arg[1]), 1, &TA_BaseSpec_MGroup);}
    if(na == 2) {
      bool refarg_1=(bool)*arg[2];
    rval=new cssTA_Base((void*)((Project*)ths)->FindMakeSpecGp((const char*)*arg[1], refarg_1), 1, &TA_BaseSpec_MGroup);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Project_NewViewer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Project*)ths)->NewViewer(), 1, &TA_pdpDataViewer);
    return rval;}
  static cssEl* cssElCFun_Project_OpenNetworkViewer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Project*)ths)->OpenNetworkViewer();}
    if(na == 1) {
      ((Project*)ths)->OpenNetworkViewer((Network*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Project_UpdateSimLog_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Project*)ths)->UpdateSimLog();
    return rval;}
PDPRoot*		 TAI_PDPRoot=NULL;
  static cssEl* cssElCFun_PDPRoot_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((PDPRoot*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((PDPRoot*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((PDPRoot*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_PDPRoot_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((PDPRoot*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_PDPRoot_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((PDPRoot*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((PDPRoot*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((PDPRoot*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((PDPRoot*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((PDPRoot*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((PDPRoot*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((PDPRoot*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((PDPRoot*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((PDPRoot*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((PDPRoot*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((PDPRoot*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((PDPRoot*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((PDPRoot*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((PDPRoot*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((PDPRoot*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_PDPRoot_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_PDPRoot_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((PDPRoot*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((PDPRoot*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((PDPRoot*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_PDPRoot_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_PDPRoot_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPRoot*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((PDPRoot*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Settings_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->Settings();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_SaveConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->SaveConfig();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_LoadConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->LoadConfig();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Info_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->Info();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Quit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->Quit();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_SaveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPRoot*)ths)->SaveAll();
    return rval;}
  static cssEl* cssElCFun_PDPRoot_Browse_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((PDPRoot*)ths)->Browse(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((PDPRoot*)ths)->Browse((const char*)*arg[1]), 1, &TA_taBase);}
    return rval;}
EventSpec*		 TAI_EventSpec=NULL;
  static cssEl* cssElCFun_EventSpec_ApplyPatterns_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->ApplyPatterns((Event*)(void*)*arg[1], (Network*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_EventSpec_SetLayers_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->SetLayers((Network*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EventSpec_UnSetLayers_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->UnSetLayers();
    return rval;}
  static cssEl* cssElCFun_EventSpec_MaxX_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((EventSpec*)ths)->MaxX());
    return rval;}
  static cssEl* cssElCFun_EventSpec_MaxY_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((EventSpec*)ths)->MaxY());
    return rval;}
  static cssEl* cssElCFun_EventSpec_NewEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->NewEvent((Event*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EventSpec_UpdateEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->UpdateEvent((Event*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EventSpec_UpdateAllEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->UpdateAllEvents();
    return rval;}
  static cssEl* cssElCFun_EventSpec_UpdateFromLayers_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->UpdateFromLayers();
    return rval;}
  static cssEl* cssElCFun_EventSpec_ApplyNames_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->ApplyNames((Network*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EventSpec_LinearLayout_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EventSpec*)ths)->LinearLayout();}
    if(na == 1) {
      ((EventSpec*)ths)->LinearLayout((EventSpec::PatternLayout)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_EventSpec_AutoNameEvent_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((EventSpec*)ths)->AutoNameEvent((Event*)(void*)*arg[1]);}
    if(na == 2) {
      ((EventSpec*)ths)->AutoNameEvent((Event*)(void*)*arg[1], (float)*arg[2]);}
    if(na == 3) {
      ((EventSpec*)ths)->AutoNameEvent((Event*)(void*)*arg[1], (float)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((EventSpec*)ths)->AutoNameEvent((Event*)(void*)*arg[1], (float)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_EventSpec_AutoNameAllEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EventSpec*)ths)->AutoNameAllEvents();}
    if(na == 1) {
      ((EventSpec*)ths)->AutoNameAllEvents((float)*arg[1]);}
    if(na == 2) {
      ((EventSpec*)ths)->AutoNameAllEvents((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((EventSpec*)ths)->AutoNameAllEvents((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_EventSpec_DetectOverlap_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((EventSpec*)ths)->DetectOverlap());
    return rval;}
  static cssEl* cssElCFun_EventSpec_AddToView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->AddToView();
    return rval;}
  static cssEl* cssElCFun_EventSpec_RemoveFromView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EventSpec*)ths)->RemoveFromView();
    return rval;}
Pattern*		 TAI_Pattern=NULL;
Event*		 TAI_Event=NULL;
  static cssEl* cssElCFun_Event_ApplyPatterns_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Event*)ths)->ApplyPatterns((Network*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Event_GetLocalSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Event*)ths)->GetLocalSpec();
    return rval;}
  static cssEl* cssElCFun_Event_SetSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Event*)ths)->SetSpec((EventSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Event_UpdateFmSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Event*)ths)->UpdateFmSpec();
    return rval;}
  static cssEl* cssElCFun_Event_AddToView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Event*)ths)->AddToView();
    return rval;}
  static cssEl* cssElCFun_Event_RemoveFromView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Event*)ths)->RemoveFromView();
    return rval;}
  static cssEl* cssElCFun_Event_PresentEvent_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Event*)ths)->PresentEvent((TrialProcess*)(void*)*arg[1]);}
    if(na == 2) {
      ((Event*)ths)->PresentEvent((TrialProcess*)(void*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Event_AutoNameEvent_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Event*)ths)->AutoNameEvent();}
    if(na == 1) {
      ((Event*)ths)->AutoNameEvent((float)*arg[1]);}
    if(na == 2) {
      ((Event*)ths)->AutoNameEvent((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Event*)ths)->AutoNameEvent((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
Environment*		 TAI_Environment=NULL;
  static cssEl* cssElCFun_Environment_InitEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->InitEvents();
    return rval;}
  static cssEl* cssElCFun_Environment_UnSetLayers_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->UnSetLayers();
    return rval;}
  static cssEl* cssElCFun_Environment_UpdateAllEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->UpdateAllEvents();
    return rval;}
  static cssEl* cssElCFun_Environment_UpdateAllEventSpecs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->UpdateAllEventSpecs();
    return rval;}
  static cssEl* cssElCFun_Environment_EventCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Environment*)ths)->EventCount());
    return rval;}
  static cssEl* cssElCFun_Environment_GetEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Environment*)ths)->GetEvent((int)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_Environment_GroupCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Environment*)ths)->GroupCount());
    return rval;}
  static cssEl* cssElCFun_Environment_GetGroup_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Environment*)ths)->GetGroup((int)*arg[1]), 1, &TA_Event_MGroup);
    return rval;}
  static cssEl* cssElCFun_Environment_GetNextEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Environment*)ths)->GetNextEvent(), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_Environment_UnitNamesToNet_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Environment*)ths)->UnitNamesToNet();}
    if(na == 1) {
      ((Environment*)ths)->UnitNamesToNet((EventSpec*)(void*)*arg[1]);}
    if(na == 2) {
      ((Environment*)ths)->UnitNamesToNet((EventSpec*)(void*)*arg[1], (Network*)(void*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Environment_MakeNetIOLayers_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->MakeNetIOLayers((EventSpec*)(void*)*arg[1], (Network*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Environment_AutoNameAllEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Environment*)ths)->AutoNameAllEvents();}
    if(na == 1) {
      ((Environment*)ths)->AutoNameAllEvents((float)*arg[1]);}
    if(na == 2) {
      ((Environment*)ths)->AutoNameAllEvents((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->AutoNameAllEvents((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Environment_ReadText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Environment*)ths)->ReadText(refarg_0, (EventSpec*)(void*)*arg[2]);}
    if(na == 3) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Environment*)ths)->ReadText(refarg_0, (EventSpec*)(void*)*arg[2], (Environment::TextFmt)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Environment_WriteText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->WriteText(refarg_0);}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->WriteText(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->WriteText(refarg_0, (int)*arg[2], (Environment::TextFmt)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Environment_ReadBinary_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((Environment*)ths)->ReadBinary(refarg_0, (EventSpec*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Environment_WriteBinary_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->WriteBinary(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Environment_ReplicateEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Environment*)ths)->ReplicateEvents((int)*arg[1]);}
    if(na == 2) {
      ((Environment*)ths)->ReplicateEvents((int)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Environment_PermutedBinary_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->PermutedBinary((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Environment_PermutedBinary_MinDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((Environment*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((Environment*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      ((Environment*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_Environment_FlipBits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->FlipBits((int)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_Environment_FlipBits_MinMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 5) {
      ((Environment*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5]);}
    if(na == 6) {
      ((Environment*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float_RArray::DistMetric)(int)*arg[6]);}
    if(na == 7) {
      ((Environment*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float_RArray::DistMetric)(int)*arg[6], (bool)*arg[7]);}
    if(na == 8) {
      ((Environment*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float_RArray::DistMetric)(int)*arg[6], (bool)*arg[7], (float)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_Environment_FlipBits_GpMinMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 6) {
      ((Environment*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6]);}
    if(na == 7) {
      ((Environment*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7]);}
    if(na == 8) {
      ((Environment*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8]);}
    if(na == 9) {
      ((Environment*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8], (float)*arg[9]);}
    if(na == 10) {
      ((Environment*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8], (float)*arg[9], (int)*arg[10]);}
    if(na == 11) {
      ((Environment*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8], (float)*arg[9], (int)*arg[10], (int)*arg[11]);}
    return rval;}
  static cssEl* cssElCFun_Environment_PermutedBinaryPat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Environment*)ths)->PermutedBinaryPat((Pattern*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->PermutedBinaryPat((Pattern*)(void*)*arg[1], (int)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((Environment*)ths)->PermutedBinaryPat((Pattern*)(void*)*arg[1], (int)*arg[2], (float)*arg[3], (float)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_Environment_FlipBitsPat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->FlipBitsPat((Pattern*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_Environment_AddNoisePat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->AddNoisePat((Pattern*)(void*)*arg[1], *(Random*)arg[2]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_Environment_LastMinDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssReal((double)((Environment*)ths)->LastMinDist((int)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((Environment*)ths)->LastMinDist((int)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((Environment*)ths)->LastMinDist((int)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((Environment*)ths)->LastMinDist((int)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_Environment_LastMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((Environment*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2));    *arg[3]=(Real)refarg_2;
}
    if(na == 4) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((Environment*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2, (float_RArray::DistMetric)(int)*arg[4]));    *arg[3]=(Real)refarg_2;
}
    if(na == 5) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((Environment*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2, (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]));    *arg[3]=(Real)refarg_2;
}
    if(na == 6) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((Environment*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2, (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]));    *arg[3]=(Real)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_Environment_GpWithinMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3));    *arg[4]=(Real)refarg_3;
}
    if(na == 5) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5]));    *arg[4]=(Real)refarg_3;
}
    if(na == 6) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]));    *arg[4]=(Real)refarg_3;
}
    if(na == 7) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]));    *arg[4]=(Real)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_Environment_GpLastMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3));    *arg[4]=(Real)refarg_3;
}
    if(na == 5) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5]));    *arg[4]=(Real)refarg_3;
}
    if(na == 6) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]));    *arg[4]=(Real)refarg_3;
}
    if(na == 7) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]));    *arg[4]=(Real)refarg_3;
}
    if(na == 8) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7], (int)*arg[8]));    *arg[4]=(Real)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_Environment_GpMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3));    *arg[4]=(Real)refarg_3;
}
    if(na == 5) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5]));    *arg[4]=(Real)refarg_3;
}
    if(na == 6) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]));    *arg[4]=(Real)refarg_3;
}
    if(na == 7) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((Environment*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]));    *arg[4]=(Real)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_Environment_Clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Environment*)ths)->Clear();}
    if(na == 1) {
      ((Environment*)ths)->Clear((int)*arg[1]);}
    if(na == 2) {
      ((Environment*)ths)->Clear((int)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Environment_AddNoise_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->AddNoise((int)*arg[1], *(Random*)arg[2]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_Environment_TransformPats_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->TransformPats((int)*arg[1], *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec));
    return rval;}
  static cssEl* cssElCFun_Environment_DistMatrix_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->DistMatrix(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    if(na == 6) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5], (Environment::DistMatFmt)(int)*arg[6]);}
    if(na == 7) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5], (Environment::DistMatFmt)(int)*arg[6], (int)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_Environment_DistArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->DistArray(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->DistArray(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->DistArray(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->DistArray(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_Environment_GpDistArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_Environment_CmpDistMatrix_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    if(na == 8) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Environment*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7], (Environment::DistMatFmt)(int)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_Environment_CmpDistArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_Environment_CmpDistArrayPat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_Environment_ValOverEventsArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->ValOverEventsArray(refarg_0, (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_Environment_CorrelMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    int refarg_2=(int)*arg[3];
    ((Environment*)ths)->CorrelMatrix(refarg_0, (int)*arg[2], refarg_2);
    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_Environment_PCAEigens_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    int refarg_3=(int)*arg[4];
    ((Environment*)ths)->PCAEigens(refarg_0, refarg_1, (int)*arg[3], refarg_3);
    *arg[4]=(Int)refarg_3;
    return rval;}
  static cssEl* cssElCFun_Environment_ProjectPatterns_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->ProjectPatterns(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1, (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_Environment_PatFreqArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->PatFreqArray(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->PatFreqArray(refarg_0, (int)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Environment*)ths)->PatFreqArray(refarg_0, (int)*arg[2], (float)*arg[3], (bool)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_Environment_PatFreqText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Environment*)ths)->PatFreqText();}
    if(na == 1) {
      ((Environment*)ths)->PatFreqText((float)*arg[1]);}
    if(na == 2) {
      ((Environment*)ths)->PatFreqText((float)*arg[1], (bool)*arg[2]);}
    if(na == 3) {
      ostream& refarg_2=*(ostream*)*arg[3];
    ((Environment*)ths)->PatFreqText((float)*arg[1], (bool)*arg[2], refarg_2);}
    return rval;}
  static cssEl* cssElCFun_Environment_PatAggArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    Aggregate& refarg_2=*(Aggregate*)arg[3]->GetVoidPtrOfType(&TA_Aggregate);
    ((Environment*)ths)->PatAggArray(refarg_0, (int)*arg[2], refarg_2);
    return rval;}
  static cssEl* cssElCFun_Environment_PatAggText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    ((Environment*)ths)->PatAggText(refarg_0);}
    if(na == 2) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);    ostream& refarg_1=*(ostream*)*arg[2];
    ((Environment*)ths)->PatAggText(refarg_0, refarg_1);}
    return rval;}
  static cssEl* cssElCFun_Environment_EventFreqText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Environment*)ths)->EventFreqText();}
    if(na == 1) {
      ((Environment*)ths)->EventFreqText((bool)*arg[1]);}
    if(na == 2) {
      ostream& refarg_1=*(ostream*)*arg[2];
    ((Environment*)ths)->EventFreqText((bool)*arg[1], refarg_1);}
    return rval;}
  static cssEl* cssElCFun_Environment_DistMatrixGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Environment*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      ((Environment*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_Environment_CmpDistMatrixGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((Environment*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ((Environment*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ((Environment*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_Environment_ClusterPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Environment*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      ((Environment*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_Environment_CorrelMatrixGrid_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Environment*)ths)->CorrelMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Environment_PCAEigenGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Environment*)ths)->PCAEigenGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->PCAEigenGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Environment_PCAPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Environment*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((Environment*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (bool)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_Environment_MDSPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Environment*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((Environment*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ((Environment*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ((Environment*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    if(na == 8) {
      ((Environment*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7], (bool)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_Environment_EventPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((Environment*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ((Environment*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ((Environment*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_Environment_EnvToGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Environment*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((Environment*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((Environment*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    if(na == 6) {
      ((Environment*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], (int)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_Environment_PatFreqGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Environment*)ths)->PatFreqGrid((GridLog*)(void*)*arg[1]);}
    if(na == 2) {
      ((Environment*)ths)->PatFreqGrid((GridLog*)(void*)*arg[1], (float)*arg[2]);}
    if(na == 3) {
      ((Environment*)ths)->PatFreqGrid((GridLog*)(void*)*arg[1], (float)*arg[2], (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Environment_PatAggGrid_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((Environment*)ths)->PatAggGrid((GridLog*)(void*)*arg[1], refarg_1);
    return rval;}
  static cssEl* cssElCFun_Environment_GetAnEventSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Environment*)ths)->GetAnEventSpec(), 1, &TA_EventSpec);
    return rval;}
ScriptEnv*		 TAI_ScriptEnv=NULL;
  static cssEl* cssElCFun_ScriptEnv_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((ScriptEnv*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((ScriptEnv*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((ScriptEnv*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((ScriptEnv*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ScriptEnv*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((ScriptEnv*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((ScriptEnv*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((ScriptEnv*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((ScriptEnv*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((ScriptEnv*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((ScriptEnv*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((ScriptEnv*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((ScriptEnv*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((ScriptEnv*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptEnv*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((ScriptEnv*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((ScriptEnv*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((ScriptEnv*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ScriptEnv*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_InitEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->InitEvents();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UnSetLayers_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UnSetLayers();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UpdateAllEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UpdateAllEvents();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UpdateAllEventSpecs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->UpdateAllEventSpecs();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_EventCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->EventCount());
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->GetEvent((int)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GroupCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->GroupCount());
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetGroup_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->GetGroup((int)*arg[1]), 1, &TA_Event_MGroup);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetNextEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->GetNextEvent(), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_UnitNamesToNet_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptEnv*)ths)->UnitNamesToNet();}
    if(na == 1) {
      ((ScriptEnv*)ths)->UnitNamesToNet((EventSpec*)(void*)*arg[1]);}
    if(na == 2) {
      ((ScriptEnv*)ths)->UnitNamesToNet((EventSpec*)(void*)*arg[1], (Network*)(void*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_MakeNetIOLayers_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->MakeNetIOLayers((EventSpec*)(void*)*arg[1], (Network*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_AutoNameAllEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptEnv*)ths)->AutoNameAllEvents();}
    if(na == 1) {
      ((ScriptEnv*)ths)->AutoNameAllEvents((float)*arg[1]);}
    if(na == 2) {
      ((ScriptEnv*)ths)->AutoNameAllEvents((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->AutoNameAllEvents((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ReadText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((ScriptEnv*)ths)->ReadText(refarg_0, (EventSpec*)(void*)*arg[2]);}
    if(na == 3) {
      istream& refarg_0=*(istream*)*arg[1];
    ((ScriptEnv*)ths)->ReadText(refarg_0, (EventSpec*)(void*)*arg[2], (Environment::TextFmt)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_WriteText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->WriteText(refarg_0);}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->WriteText(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->WriteText(refarg_0, (int)*arg[2], (Environment::TextFmt)(int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ReadBinary_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((ScriptEnv*)ths)->ReadBinary(refarg_0, (EventSpec*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_WriteBinary_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->WriteBinary(refarg_0);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ReplicateEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ScriptEnv*)ths)->ReplicateEvents((int)*arg[1]);}
    if(na == 2) {
      ((ScriptEnv*)ths)->ReplicateEvents((int)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PermutedBinary_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->PermutedBinary((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PermutedBinary_MinDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((ScriptEnv*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((ScriptEnv*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      ((ScriptEnv*)ths)->PermutedBinary_MinDist((int)*arg[1], (int)*arg[2], (float)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_FlipBits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->FlipBits((int)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_FlipBits_MinMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 5) {
      ((ScriptEnv*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5]);}
    if(na == 6) {
      ((ScriptEnv*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float_RArray::DistMetric)(int)*arg[6]);}
    if(na == 7) {
      ((ScriptEnv*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float_RArray::DistMetric)(int)*arg[6], (bool)*arg[7]);}
    if(na == 8) {
      ((ScriptEnv*)ths)->FlipBits_MinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float_RArray::DistMetric)(int)*arg[6], (bool)*arg[7], (float)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_FlipBits_GpMinMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 6) {
      ((ScriptEnv*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6]);}
    if(na == 7) {
      ((ScriptEnv*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7]);}
    if(na == 8) {
      ((ScriptEnv*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8]);}
    if(na == 9) {
      ((ScriptEnv*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8], (float)*arg[9]);}
    if(na == 10) {
      ((ScriptEnv*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8], (float)*arg[9], (int)*arg[10]);}
    if(na == 11) {
      ((ScriptEnv*)ths)->FlipBits_GpMinMax((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float_RArray::DistMetric)(int)*arg[7], (bool)*arg[8], (float)*arg[9], (int)*arg[10], (int)*arg[11]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_LastMinDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssReal((double)((ScriptEnv*)ths)->LastMinDist((int)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((ScriptEnv*)ths)->LastMinDist((int)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((ScriptEnv*)ths)->LastMinDist((int)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((ScriptEnv*)ths)->LastMinDist((int)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_LastMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((ScriptEnv*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2));    *arg[3]=(Real)refarg_2;
}
    if(na == 4) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((ScriptEnv*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2, (float_RArray::DistMetric)(int)*arg[4]));    *arg[3]=(Real)refarg_2;
}
    if(na == 5) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((ScriptEnv*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2, (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]));    *arg[3]=(Real)refarg_2;
}
    if(na == 6) {
      float refarg_2=(float)*arg[3];
    rval=new cssReal((double)((ScriptEnv*)ths)->LastMinMaxDist((int)*arg[1], (int)*arg[2], refarg_2, (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]));    *arg[3]=(Real)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GpWithinMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3));    *arg[4]=(Real)refarg_3;
}
    if(na == 5) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5]));    *arg[4]=(Real)refarg_3;
}
    if(na == 6) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]));    *arg[4]=(Real)refarg_3;
}
    if(na == 7) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpWithinMinMaxDist((Event_MGroup*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]));    *arg[4]=(Real)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GpLastMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3));    *arg[4]=(Real)refarg_3;
}
    if(na == 5) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5]));    *arg[4]=(Real)refarg_3;
}
    if(na == 6) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]));    *arg[4]=(Real)refarg_3;
}
    if(na == 7) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]));    *arg[4]=(Real)refarg_3;
}
    if(na == 8) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpLastMinMaxDist((int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7], (int)*arg[8]));    *arg[4]=(Real)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GpMinMaxDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3));    *arg[4]=(Real)refarg_3;
}
    if(na == 5) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5]));    *arg[4]=(Real)refarg_3;
}
    if(na == 6) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]));    *arg[4]=(Real)refarg_3;
}
    if(na == 7) {
      float refarg_3=(float)*arg[4];
    rval=new cssReal((double)((ScriptEnv*)ths)->GpMinMaxDist((Event_MGroup*)(void*)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3], refarg_3, (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]));    *arg[4]=(Real)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptEnv*)ths)->Clear();}
    if(na == 1) {
      ((ScriptEnv*)ths)->Clear((int)*arg[1]);}
    if(na == 2) {
      ((ScriptEnv*)ths)->Clear((int)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_AddNoise_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->AddNoise((int)*arg[1], *(Random*)arg[2]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_TransformPats_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->TransformPats((int)*arg[1], *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec));
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_DistMatrix_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->DistMatrix(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    if(na == 6) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5], (Environment::DistMatFmt)(int)*arg[6]);}
    if(na == 7) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->DistMatrix(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5], (Environment::DistMatFmt)(int)*arg[6], (int)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_DistArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->DistArray(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->DistArray(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->DistArray(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->DistArray(refarg_0, (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GpDistArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->GpDistArray(refarg_0, refarg_1, (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CmpDistMatrix_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    if(na == 8) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((ScriptEnv*)ths)->CmpDistMatrix(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7], (Environment::DistMatFmt)(int)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CmpDistArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArray(refarg_0, (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CmpDistArrayPat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->CmpDistArrayPat(refarg_0, (Pattern*)(void*)*arg[2], (int)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ValOverEventsArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->ValOverEventsArray(refarg_0, (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CorrelMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    int refarg_2=(int)*arg[3];
    ((ScriptEnv*)ths)->CorrelMatrix(refarg_0, (int)*arg[2], refarg_2);
    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PCAEigens_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    int refarg_3=(int)*arg[4];
    ((ScriptEnv*)ths)->PCAEigens(refarg_0, refarg_1, (int)*arg[3], refarg_3);
    *arg[4]=(Int)refarg_3;
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ProjectPatterns_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->ProjectPatterns(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1, (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PatFreqArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->PatFreqArray(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->PatFreqArray(refarg_0, (int)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((ScriptEnv*)ths)->PatFreqArray(refarg_0, (int)*arg[2], (float)*arg[3], (bool)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PatFreqText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptEnv*)ths)->PatFreqText();}
    if(na == 1) {
      ((ScriptEnv*)ths)->PatFreqText((float)*arg[1]);}
    if(na == 2) {
      ((ScriptEnv*)ths)->PatFreqText((float)*arg[1], (bool)*arg[2]);}
    if(na == 3) {
      ostream& refarg_2=*(ostream*)*arg[3];
    ((ScriptEnv*)ths)->PatFreqText((float)*arg[1], (bool)*arg[2], refarg_2);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PatAggArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    Aggregate& refarg_2=*(Aggregate*)arg[3]->GetVoidPtrOfType(&TA_Aggregate);
    ((ScriptEnv*)ths)->PatAggArray(refarg_0, (int)*arg[2], refarg_2);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PatAggText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    ((ScriptEnv*)ths)->PatAggText(refarg_0);}
    if(na == 2) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);    ostream& refarg_1=*(ostream*)*arg[2];
    ((ScriptEnv*)ths)->PatAggText(refarg_0, refarg_1);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_EventFreqText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptEnv*)ths)->EventFreqText();}
    if(na == 1) {
      ((ScriptEnv*)ths)->EventFreqText((bool)*arg[1]);}
    if(na == 2) {
      ostream& refarg_1=*(ostream*)*arg[2];
    ((ScriptEnv*)ths)->EventFreqText((bool)*arg[1], refarg_1);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_DistMatrixGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((ScriptEnv*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      ((ScriptEnv*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->DistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CmpDistMatrixGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((ScriptEnv*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ((ScriptEnv*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ((ScriptEnv*)ths)->CmpDistMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (Environment*)(void*)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_ClusterPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((ScriptEnv*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3]);}
    if(na == 4) {
      ((ScriptEnv*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->ClusterPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (float_RArray::DistMetric)(int)*arg[3], (bool)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_CorrelMatrixGrid_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->CorrelMatrixGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PCAEigenGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((ScriptEnv*)ths)->PCAEigenGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->PCAEigenGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PCAPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((ScriptEnv*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((ScriptEnv*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->PCAPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (bool)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_MDSPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((ScriptEnv*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((ScriptEnv*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ((ScriptEnv*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ((ScriptEnv*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    if(na == 8) {
      ((ScriptEnv*)ths)->MDSPrjnPlot((GraphLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7], (bool)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_EventPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((ScriptEnv*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4], (float_RArray::DistMetric)(int)*arg[5]);}
    if(na == 6) {
      ((ScriptEnv*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6]);}
    if(na == 7) {
      ((ScriptEnv*)ths)->EventPrjnPlot((Event*)(void*)*arg[1], (Event*)(void*)*arg[2], (int)*arg[3], (GraphLog*)(void*)*arg[4], (float_RArray::DistMetric)(int)*arg[5], (bool)*arg[6], (float)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_EnvToGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((ScriptEnv*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((ScriptEnv*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((ScriptEnv*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    if(na == 6) {
      ((ScriptEnv*)ths)->EnvToGrid((GridLog*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], (int)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PatFreqGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ScriptEnv*)ths)->PatFreqGrid((GridLog*)(void*)*arg[1]);}
    if(na == 2) {
      ((ScriptEnv*)ths)->PatFreqGrid((GridLog*)(void*)*arg[1], (float)*arg[2]);}
    if(na == 3) {
      ((ScriptEnv*)ths)->PatFreqGrid((GridLog*)(void*)*arg[1], (float)*arg[2], (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_PatAggGrid_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((ScriptEnv*)ths)->PatAggGrid((GridLog*)(void*)*arg[1], refarg_1);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_GetAnEventSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptEnv*)ths)->GetAnEventSpec(), 1, &TA_EventSpec);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_HasScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->HasScript());
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_RunScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptEnv*)ths)->RunScript());
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_SetScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->SetScript((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_LoadScript_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptEnv*)ths)->LoadScript();}
    if(na == 1) {
      ((ScriptEnv*)ths)->LoadScript((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_LoadScriptString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptEnv*)ths)->LoadScriptString();}
    if(na == 1) {
      ((ScriptEnv*)ths)->LoadScriptString((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_InteractScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->InteractScript();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Interact_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->Interact();
    return rval;}
  static cssEl* cssElCFun_ScriptEnv_Compile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptEnv*)ths)->Compile();
    return rval;}
TimeEnvironment*		 TAI_TimeEnvironment=NULL;
Stat*		 TAI_Stat=NULL;
  static cssEl* cssElCFun_Stat_InitStatVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Stat*)ths)->InitStatVal());
    return rval;}
  static cssEl* cssElCFun_Stat_InitStat_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->InitStat();
    return rval;}
  static cssEl* cssElCFun_Stat_Crit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Stat*)ths)->Crit());
    return rval;}
  static cssEl* cssElCFun_Stat_Network_Run_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Network_Run();
    return rval;}
  static cssEl* cssElCFun_Stat_Layer_Run_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Layer_Run();
    return rval;}
  static cssEl* cssElCFun_Stat_Unit_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Unit_Run((Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Stat_RecvCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->RecvCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Stat_SendCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->SendCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Stat_Network_Init_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Network_Init();
    return rval;}
  static cssEl* cssElCFun_Stat_Layer_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Layer_Init((Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Stat_Unit_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Unit_Init((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Stat_Network_Stat_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Network_Stat();
    return rval;}
  static cssEl* cssElCFun_Stat_Layer_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Layer_Stat((Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Stat_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Stat_Con_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->Con_Stat((Unit*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_Stat_ComputeAggregates_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->ComputeAggregates();
    return rval;}
  static cssEl* cssElCFun_Stat_GetAggOpForProc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->GetAggOpForProc((SchedProcess*)(void*)*arg[1], (Aggregate::Operator)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Stat_CreateAggregates_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Stat*)ths)->CreateAggregates();}
    if(na == 1) {
      ((Stat*)ths)->CreateAggregates((Aggregate::Operator)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Stat_DeleteAggregates_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->DeleteAggregates();
    return rval;}
  static cssEl* cssElCFun_Stat_UpdateAggregates_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Stat*)ths)->UpdateAggregates();
    return rval;}
  static cssEl* cssElCFun_Stat_FindAggregator_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Stat*)ths)->FindAggregator(), 1, &TA_Stat);
    return rval;}
  static cssEl* cssElCFun_Stat_FindOwnAggFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Stat*)ths)->FindOwnAggFrom(*(Stat*)arg[1]->GetVoidPtrOfType(&TA_Stat)));
    return rval;}
  static cssEl* cssElCFun_Stat_CheckLayerInNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Stat*)ths)->CheckLayerInNet());
    return rval;}
  static cssEl* cssElCFun_Stat_AltTypeName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((Stat*)ths)->AltTypeName(), 1);
    return rval;}
SE_Stat*		 TAI_SE_Stat=NULL;
MonitorStat*		 TAI_MonitorStat=NULL;
  static cssEl* cssElCFun_MonitorStat_SetVariable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MonitorStat*)ths)->SetVariable((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MonitorStat_SetObject_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MonitorStat*)ths)->SetObject((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MonitorStat_AddObject_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MonitorStat*)ths)->AddObject((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MonitorStat_SetObjsFmNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((MonitorStat*)ths)->SetObjsFmNet();
    return rval;}
  static cssEl* cssElCFun_MonitorStat_GetObjName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((MonitorStat*)ths)->GetObjName((taBase*)(void*)*arg[1]));
    return rval;}
ClosestEventStat*		 TAI_ClosestEventStat=NULL;
CyclesToSettle*		 TAI_CyclesToSettle=NULL;
  static cssEl* cssElCFun_CyclesToSettle_GetSettleProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((CyclesToSettle*)ths)->GetSettleProc();
    return rval;}
ScriptStat*		 TAI_ScriptStat=NULL;
  static cssEl* cssElCFun_ScriptStat_Interact_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptStat*)ths)->Interact();
    return rval;}
  static cssEl* cssElCFun_ScriptStat_Compile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptStat*)ths)->Compile();
    return rval;}
CompareStat*		 TAI_CompareStat=NULL;
  static cssEl* cssElCFun_CompareStat_GetStatVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((CompareStat*)ths)->GetStatVals((Stat*)(void*)*arg[1], refarg_1);
    return rval;}
EpochCounterStat*		 TAI_EpochCounterStat=NULL;
ProcCounterStat*		 TAI_ProcCounterStat=NULL;
  static cssEl* cssElCFun_ProcCounterStat_NeedsUpdated_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ProcCounterStat*)ths)->NeedsUpdated());
    return rval;}
SchedProcess*		 TAI_SchedProcess=NULL;
  static cssEl* cssElCFun_SchedProcess_Run_gui_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Run_gui();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_GetCounter_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SchedProcess*)ths)->GetCounter());
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Step_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Step();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Step_gui_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Step_gui();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Stop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Stop();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_GoTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->GoTo((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_StepUp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->StepUp();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_StepDn_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->StepDn();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_InitProcs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->InitProcs();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Init_flag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Init_flag();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Init_force_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Init_force();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Init_step_flags_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Init_step_flags();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Loop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Loop();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_UpdateCounters_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->UpdateCounters();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_LoopProcs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->LoopProcs();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_LoopStats_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->LoopStats();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_UpdateLogs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->UpdateLogs();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_UpdateState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->UpdateState();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Crit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SchedProcess*)ths)->Crit());
    return rval;}
  static cssEl* cssElCFun_SchedProcess_StopCheck_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SchedProcess*)ths)->StopCheck());
    return rval;}
  static cssEl* cssElCFun_SchedProcess_HandleEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SchedProcess*)ths)->HandleEvents());
    return rval;}
  static cssEl* cssElCFun_SchedProcess_FinalProcs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->FinalProcs();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_FinalStats_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->FinalStats();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Final_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->Final();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_UpdateDisplays_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->UpdateDisplays();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_SetReInit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->SetReInit((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_FinalStepCheck_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SchedProcess*)ths)->FinalStepCheck());
    return rval;}
  static cssEl* cssElCFun_SchedProcess_GenCntrLog_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->GenCntrLog((LogData*)(void*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_InitMyLogs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->InitMyLogs();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_InitAllLogs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->InitAllLogs();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_InitNetwork_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->InitNetwork();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_InitAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->InitAll();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_RemoveFromLogs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->RemoveFromLogs();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_RemoveFromDisplays_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->RemoveFromDisplays();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_CheckAllTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SchedProcess*)ths)->CheckAllTypes());
    return rval;}
  static cssEl* cssElCFun_SchedProcess_UpdateLogUpdaters_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->UpdateLogUpdaters();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_UpdateDisplayUpdaters_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->UpdateDisplayUpdaters();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_FindSubProc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SchedProcess*)ths)->FindSubProc((TypeDef*)*arg[1]), 1, &TA_SchedProcess);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_FindSuperProc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SchedProcess*)ths)->FindSuperProc((TypeDef*)*arg[1]), 1, &TA_SchedProcess);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_FindProcOfType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SchedProcess*)ths)->FindProcOfType((TypeDef*)*arg[1]), 1, &TA_SchedProcess);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_CreateSubProcs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((SchedProcess*)ths)->CreateSubProcs();}
    if(na == 1) {
      ((SchedProcess*)ths)->CreateSubProcs((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_SchedProcess_MoveToSubGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->MoveToSubGp((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_ChangeNameSuffix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->ChangeNameSuffix((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_AddSuperProc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->AddSuperProc((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_AddSubProc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->AddSubProc((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_RemoveSuperProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->RemoveSuperProc();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_RemoveSubProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SchedProcess*)ths)->RemoveSubProc();
    return rval;}
  static cssEl* cssElCFun_SchedProcess_NewStat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewStat((TypeDef*)*arg[1]), 1, &TA_Stat);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewStat((TypeDef*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2]), 1, &TA_Stat);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewStat((TypeDef*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (int)*arg[3]), 1, &TA_Stat);}
    if(na == 4) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewStat((TypeDef*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (int)*arg[3], (bool)*arg[4]), 1, &TA_Stat);}
    return rval;}
  static cssEl* cssElCFun_SchedProcess_NewProcess_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewProcess((TypeDef*)*arg[1]), 1, &TA_Process);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewProcess((TypeDef*)*arg[1], (SchedProcess::ProcLoc)(int)*arg[2]), 1, &TA_Process);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewProcess((TypeDef*)*arg[1], (SchedProcess::ProcLoc)(int)*arg[2], (int)*arg[3]), 1, &TA_Process);}
    return rval;}
  static cssEl* cssElCFun_SchedProcess_NewSchedProc_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewSchedProc((TypeDef*)*arg[1]), 1, &TA_SchedProcess);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->NewSchedProc((TypeDef*)*arg[1], (SchedProcess::SchedProcLoc)(int)*arg[2]), 1, &TA_SchedProcess);}
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Default_StatProc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SchedProcess*)ths)->Default_StatProc((TypeDef*)*arg[1], (Process_MGroup*)(void*)*arg[2]), 1, &TA_SchedProcess);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_Default_StatGroup_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SchedProcess*)ths)->Default_StatGroup((TypeDef*)*arg[1], (SchedProcess*)(void*)*arg[2]), 1, &TA_Stat_Group);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_GetStatGroup_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SchedProcess*)ths)->GetStatGroup((TypeDef*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2]), 1, &TA_Stat_Group);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_GetProcGroup_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SchedProcess*)ths)->GetProcGroup((SchedProcess::ProcLoc)(int)*arg[1]), 1, &TA_Process_Group);
    return rval;}
  static cssEl* cssElCFun_SchedProcess_MakeAggregator_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->MakeAggregator((Stat*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2]), 1, &TA_Stat);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((SchedProcess*)ths)->MakeAggregator((Stat*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Aggregate::Operator)(int)*arg[3]), 1, &TA_Stat);}
    return rval;}
BatchProcess*		 TAI_BatchProcess=NULL;
TrainProcess*		 TAI_TrainProcess=NULL;
NEpochProcess*		 TAI_NEpochProcess=NULL;
EpochProcess*		 TAI_EpochProcess=NULL;
  static cssEl* cssElCFun_EpochProcess_GetEventList_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EpochProcess*)ths)->GetEventList();
    return rval;}
  static cssEl* cssElCFun_EpochProcess_GetCurEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EpochProcess*)ths)->GetCurEvent();
    return rval;}
  static cssEl* cssElCFun_EpochProcess_Loop_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EpochProcess*)ths)->Loop_UpdateWeights();
    return rval;}
  static cssEl* cssElCFun_EpochProcess_Final_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EpochProcess*)ths)->Final_UpdateWeights();
    return rval;}
  static cssEl* cssElCFun_EpochProcess_AllocProcs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EpochProcess*)ths)->AllocProcs();
    return rval;}
SequenceProcess*		 TAI_SequenceProcess=NULL;
  static cssEl* cssElCFun_SequenceProcess_GetEventList_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SequenceProcess*)ths)->GetEventList();
    return rval;}
  static cssEl* cssElCFun_SequenceProcess_GetCurEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SequenceProcess*)ths)->GetCurEvent();
    return rval;}
  static cssEl* cssElCFun_SequenceProcess_InitNetState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SequenceProcess*)ths)->InitNetState();
    return rval;}
  static cssEl* cssElCFun_SequenceProcess_Loop_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SequenceProcess*)ths)->Loop_UpdateWeights();
    return rval;}
  static cssEl* cssElCFun_SequenceProcess_Final_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SequenceProcess*)ths)->Final_UpdateWeights();
    return rval;}
TrialProcess*		 TAI_TrialProcess=NULL;
SettleProcess*		 TAI_SettleProcess=NULL;
CycleProcess*		 TAI_CycleProcess=NULL;
SequenceEpoch*		 TAI_SequenceEpoch=NULL;
PDPLog*		 TAI_PDPLog=NULL;
  static cssEl* cssElCFun_PDPLog_virt_lines_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PDPLog*)ths)->virt_lines());
    return rval;}
  static cssEl* cssElCFun_PDPLog_GetHeaders_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((PDPLog*)ths)->GetHeaders();}
    if(na == 1) {
      ((PDPLog*)ths)->GetHeaders((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_PDPLog_SetSaveFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((PDPLog*)ths)->SetSaveFile();}
    if(na == 1) {
      ((PDPLog*)ths)->SetSaveFile((const char*)*arg[1]);}
    if(na == 2) {
      ((PDPLog*)ths)->SetSaveFile((const char*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_PDPLog_SetAppendFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((PDPLog*)ths)->SetAppendFile();}
    if(na == 1) {
      ((PDPLog*)ths)->SetAppendFile((const char*)*arg[1]);}
    if(na == 2) {
      ((PDPLog*)ths)->SetAppendFile((const char*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_PDPLog_LoadFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((PDPLog*)ths)->LoadFile();}
    if(na == 1) {
      ((PDPLog*)ths)->LoadFile((const char*)*arg[1]);}
    if(na == 2) {
      ((PDPLog*)ths)->LoadFile((const char*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_PDPLog_CloseFile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->CloseFile();
    return rval;}
  static cssEl* cssElCFun_PDPLog_BufferToFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((PDPLog*)ths)->BufferToFile();}
    if(na == 1) {
      ((PDPLog*)ths)->BufferToFile((const char*)*arg[1]);}
    if(na == 2) {
      ((PDPLog*)ths)->BufferToFile((const char*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_PDPLog_HeadToFile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->HeadToFile();
    return rval;}
  static cssEl* cssElCFun_PDPLog_Buffer_F_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->Buffer_F();
    return rval;}
  static cssEl* cssElCFun_PDPLog_Buffer_R_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->Buffer_R();
    return rval;}
  static cssEl* cssElCFun_PDPLog_Buffer_FF_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->Buffer_FF();
    return rval;}
  static cssEl* cssElCFun_PDPLog_Buffer_FR_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->Buffer_FR();
    return rval;}
  static cssEl* cssElCFun_PDPLog_Buffer_SeekForView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->Buffer_SeekForView(*(MinMaxInt*)arg[1]->GetVoidPtrOfType(&TA_MinMaxInt));
    return rval;}
  static cssEl* cssElCFun_PDPLog_Clear_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->Clear();
    return rval;}
  static cssEl* cssElCFun_PDPLog_UpdateViewHeaders_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->UpdateViewHeaders();
    return rval;}
  static cssEl* cssElCFun_PDPLog_AddUpdater_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->AddUpdater((SchedProcess*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPLog_RemoveUpdater_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->RemoveUpdater((SchedProcess*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPLog_RemoveAllUpdaters_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->RemoveAllUpdaters();
    return rval;}
  static cssEl* cssElCFun_PDPLog_NewData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    LogData& refarg_0=*(LogData*)arg[1]->GetVoidPtrOfType(&TA_LogData);
    ((PDPLog*)ths)->NewData(refarg_0, (SchedProcess*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_PDPLog_ViewAllData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PDPLog*)ths)->ViewAllData();
    return rval;}
  static cssEl* cssElCFun_PDPLog_GetDefaultView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((PDPLog*)ths)->GetDefaultView(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_PDPLog_NewLogView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((PDPLog*)ths)->NewLogView(), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_PDPLog_ShowInViewer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((PDPLog*)ths)->ShowInViewer();}
    if(na == 1) {
      ((PDPLog*)ths)->ShowInViewer((T3DataViewer*)(void*)*arg[1]);}
    return rval;}
TextLog*		 TAI_TextLog=NULL;
GraphLog*		 TAI_GraphLog=NULL;
GridLog*		 TAI_GridLog=NULL;
PDPView*		 TAI_PDPView=NULL;
  static cssEl* cssElCFun_PDPView_AddNotify_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPView*)ths)->AddNotify((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPView_RemoveNotify_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PDPView*)ths)->RemoveNotify((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PDPView_UpdaterType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((PDPView*)ths)->UpdaterType(), 1, &TA_TypeDef);
    return rval;}
pdpDataViewer*		 TAI_pdpDataViewer=NULL;
  static cssEl* cssElCFun_pdpDataViewer_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((pdpDataViewer*)ths)->New((Project*)(void*)*arg[1]), 1, &TA_pdpDataViewer);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_proj_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpDataViewer*)ths)->proj(), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_net_win_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((pdpDataViewer*)ths)->net_win(), 1, &TA_ipdpDataViewer);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_Clone_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpDataViewer*)ths)->Clone(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((pdpDataViewer*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((pdpDataViewer*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_MakeToken_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpDataViewer*)ths)->MakeToken(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_MakeTokenAry_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpDataViewer*)ths)->MakeTokenAry((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_GetTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((pdpDataViewer*)ths)->GetTypeDef(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_pdpDataViewer_StatTypeDef_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((pdpDataViewer*)ths)->StatTypeDef((int)*arg[1]), 1, &TA_TypeDef);
    return rval;}
LogView*		 TAI_LogView=NULL;
  static cssEl* cssElCFun_LogView_log_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((LogView*)ths)->log(), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_LogView_IsMapped_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((LogView*)ths)->IsMapped());
    return rval;}
  static cssEl* cssElCFun_LogView_NewHead_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->NewHead();
    return rval;}
  static cssEl* cssElCFun_LogView_NewData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->NewData();
    return rval;}
  static cssEl* cssElCFun_LogView_UpdateFromBuffer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->UpdateFromBuffer();
    return rval;}
  static cssEl* cssElCFun_LogView_ClearData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->ClearData();
    return rval;}
  static cssEl* cssElCFun_LogView_InitDisplay_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->InitDisplay();
    return rval;}
  static cssEl* cssElCFun_LogView_InitPanel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->InitPanel();
    return rval;}
  static cssEl* cssElCFun_LogView_UpdateDisplay_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((LogView*)ths)->UpdateDisplay();}
    if(na == 1) {
      ((LogView*)ths)->UpdateDisplay((taBase*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_LogView_ToggleDisplay_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->ToggleDisplay();
    return rval;}
  static cssEl* cssElCFun_LogView_SetToggle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->SetToggle((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LogView_EditViewSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->EditViewSpec((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LogView_SetVisibility_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->SetVisibility((taBase*)(void*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LogView_SetLogging_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((LogView*)ths)->SetLogging((taBase*)(void*)*arg[1], (bool)*arg[2]);}
    if(na == 3) {
      ((LogView*)ths)->SetLogging((taBase*)(void*)*arg[1], (bool)*arg[2], (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_LogView_UpdateDispLabels_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->UpdateDispLabels();
    return rval;}
  static cssEl* cssElCFun_LogView_CopyToEnv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->CopyToEnv((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (Environment*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LogView_DistMatrixGrid_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((LogView*)ths)->DistMatrixGrid((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GridLog*)(void*)*arg[3]);}
    if(na == 4) {
      ((LogView*)ths)->DistMatrixGrid((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GridLog*)(void*)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      ((LogView*)ths)->DistMatrixGrid((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GridLog*)(void*)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      ((LogView*)ths)->DistMatrixGrid((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GridLog*)(void*)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_LogView_ClusterPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((LogView*)ths)->ClusterPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3]);}
    if(na == 4) {
      ((LogView*)ths)->ClusterPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3], (float_RArray::DistMetric)(int)*arg[4]);}
    if(na == 5) {
      ((LogView*)ths)->ClusterPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5]);}
    if(na == 6) {
      ((LogView*)ths)->ClusterPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3], (float_RArray::DistMetric)(int)*arg[4], (bool)*arg[5], (float)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_LogView_CorrelMatrixGrid_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->CorrelMatrixGrid((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GridLog*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LogView_PCAEigenGrid_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->PCAEigenGrid((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GridLog*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LogView_PCAPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((LogView*)ths)->PCAPrjnPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3]);}
    if(na == 4) {
      ((LogView*)ths)->PCAPrjnPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((LogView*)ths)->PCAPrjnPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3], (int)*arg[4], (int)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_LogView_MDSPrjnPlot_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((LogView*)ths)->MDSPrjnPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3]);}
    if(na == 4) {
      ((LogView*)ths)->MDSPrjnPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ((LogView*)ths)->MDSPrjnPlot((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2], (GraphLog*)(void*)*arg[3], (int)*arg[4], (int)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_LogView_SetWinName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->SetWinName();
    return rval;}
  static cssEl* cssElCFun_LogView_LogUpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->LogUpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_LogView_Log_Clear_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->Log_Clear();
    return rval;}
  static cssEl* cssElCFun_LogView_View_At_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->View_At((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LogView_View_FF_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->View_FF();
    return rval;}
  static cssEl* cssElCFun_LogView_ViewC_At_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogView*)ths)->ViewC_At((int)*arg[1]);
    return rval;}
GridLogView*		 TAI_GridLogView=NULL;
  static cssEl* cssElCFun_GridLogView_lvp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((GridLogView*)ths)->lvp(), 1, &TA_iGridLogView_Panel);
    return rval;}
  static cssEl* cssElCFun_GridLogView_Clear_impl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogView*)ths)->Clear_impl();
    return rval;}
  static cssEl* cssElCFun_GridLogView_SetColorSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogView*)ths)->SetColorSpec((ColorScaleSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GridLogView_SetBlockFill_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((GridLogView*)ths)->SetBlockFill();}
    if(na == 1) {
      ((GridLogView*)ths)->SetBlockFill((DT_GridViewSpec::BlockFill)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_GridLogView_SetBlockSizes_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((GridLogView*)ths)->SetBlockSizes();}
    if(na == 1) {
      ((GridLogView*)ths)->SetBlockSizes((int)*arg[1]);}
    if(na == 2) {
      ((GridLogView*)ths)->SetBlockSizes((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_GridLogView_UpdateGridLayout_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((GridLogView*)ths)->UpdateGridLayout();}
    if(na == 1) {
      ((GridLogView*)ths)->UpdateGridLayout((DT_GridViewSpec::MatrixLayout)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_GridLogView_SetViewFontSize_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((GridLogView*)ths)->SetViewFontSize();}
    if(na == 1) {
      ((GridLogView*)ths)->SetViewFontSize((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_GridLogView_AllBlockTextOn_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogView*)ths)->AllBlockTextOn();
    return rval;}
  static cssEl* cssElCFun_GridLogView_AllBlockTextOff_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogView*)ths)->AllBlockTextOff();
    return rval;}
  static cssEl* cssElCFun_GridLogView_ToggleHeader_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogView*)ths)->ToggleHeader();
    return rval;}
  static cssEl* cssElCFun_GridLogView_ToggleAutoScale_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogView*)ths)->ToggleAutoScale();
    return rval;}
  static cssEl* cssElCFun_GridLogView_ColorBar_execute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogView*)ths)->ColorBar_execute();
    return rval;}
NetLogView*		 TAI_NetLogView=NULL;
  static cssEl* cssElCFun_NetLogView_lvp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((NetLogView*)ths)->lvp(), 1, &TA_iNetLogView_Panel);
    return rval;}
  static cssEl* cssElCFun_NetLogView_SetNetwork_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NetLogView*)ths)->SetNetwork((Network*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NetLogView_ArrangeLabels_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((NetLogView*)ths)->ArrangeLabels();}
    if(na == 1) {
      ((NetLogView*)ths)->ArrangeLabels((int)*arg[1]);}
    if(na == 2) {
      ((NetLogView*)ths)->ArrangeLabels((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((NetLogView*)ths)->ArrangeLabels((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((NetLogView*)ths)->ArrangeLabels((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4]);}
    if(na == 5) {
      ((NetLogView*)ths)->ArrangeLabels((int)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_NetLogView_RemoveLabels_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((NetLogView*)ths)->RemoveLabels();
    return rval;}
GraphLogView*		 TAI_GraphLogView=NULL;
  static cssEl* cssElCFun_GraphLogView_lvp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((GraphLogView*)ths)->lvp(), 1, &TA_iGraphLogView_Panel);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_viewSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphLogView*)ths)->viewSpec(), 1, &TA_GraphSpec);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_Animate_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((GraphLogView*)ths)->Animate();}
    if(na == 1) {
      ((GraphLogView*)ths)->Animate((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_GraphLogView_StopAnimate_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->StopAnimate();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SetColorSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->SetColorSpec((ColorScaleSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SetBackground_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->SetBackground(*(RGBA*)arg[1]->GetVoidPtrOfType(&TA_RGBA));
    return rval;}
  static cssEl* cssElCFun_GraphLogView_UpdateLineFeatures_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->UpdateLineFeatures();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SetLineFeatures_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((GraphLogView*)ths)->SetLineFeatures((GraphSpec::ColorType)(int)*arg[1]);}
    if(na == 2) {
      ((GraphLogView*)ths)->SetLineFeatures((GraphSpec::ColorType)(int)*arg[1], (GraphSpec::SequenceType)(int)*arg[2]);}
    if(na == 3) {
      ((GraphLogView*)ths)->SetLineFeatures((GraphSpec::ColorType)(int)*arg[1], (GraphSpec::SequenceType)(int)*arg[2], (GraphSpec::SequenceType)(int)*arg[3]);}
    if(na == 4) {
      ((GraphLogView*)ths)->SetLineFeatures((GraphSpec::ColorType)(int)*arg[1], (GraphSpec::SequenceType)(int)*arg[2], (GraphSpec::SequenceType)(int)*arg[3], (GraphSpec::SequenceType)(int)*arg[4]);}
    if(na == 5) {
      ((GraphLogView*)ths)->SetLineFeatures((GraphSpec::ColorType)(int)*arg[1], (GraphSpec::SequenceType)(int)*arg[2], (GraphSpec::SequenceType)(int)*arg[3], (GraphSpec::SequenceType)(int)*arg[4], (bool)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SetLineWidths_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->SetLineWidths((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SetLineType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->SetLineType((GraphColSpec::LineType)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_ShareAxisAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->ShareAxisAfter((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_ShareAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->ShareAxes();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SeparateAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->SeparateAxes();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SeparateGraphs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->SeparateGraphs((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_OneGraph_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->OneGraph();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_StackTraces_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->StackTraces();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_UnStackTraces_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->UnStackTraces();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_StackSharedAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->StackSharedAxes();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_UnStackSharedAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->UnStackSharedAxes();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SpikeRaster_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->SpikeRaster((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphLogView_ColorRaster_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->ColorRaster();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_StandardLines_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->StandardLines();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_SetXAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphLogView*)ths)->SetXAxis((char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_GraphLogView_UpdateViewRange_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->UpdateViewRange();
    return rval;}
  static cssEl* cssElCFun_GraphLogView_InitColors_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLogView*)ths)->InitColors();
    return rval;}
ProcessDialog*		 TAI_ProcessDialog=NULL;
pdpMisc*		 TAI_pdpMisc=NULL;
  static cssEl* cssElCFun_pdpMisc_WaitProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((pdpMisc*)ths)->WaitProc());
    return rval;}
  static cssEl* cssElCFun_pdpMisc_WaitProc_LoadProj_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((pdpMisc*)ths)->WaitProc_LoadProj());
    return rval;}
  static cssEl* cssElCFun_pdpMisc_WaitProc_PostLoadOpr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((pdpMisc*)ths)->WaitProc_PostLoadOpr());
    return rval;}
  static cssEl* cssElCFun_pdpMisc_SaveRecoverFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((pdpMisc*)ths)->SaveRecoverFile();}
    if(na == 1) {
      ((pdpMisc*)ths)->SaveRecoverFile((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_pdpMisc_GetDefaultColor_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((pdpMisc*)ths)->GetDefaultColor(), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_GetObjColor_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((pdpMisc*)ths)->GetObjColor((Project*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_const_iColor);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_GetNewLog_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->GetNewLog((Project*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_GetNewEnv_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->GetNewEnv((Project*)(void*)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->GetNewEnv((Project*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Environment);}
    return rval;}
  static cssEl* cssElCFun_pdpMisc_GetNewNetwork_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->GetNewNetwork((Project*)(void*)*arg[1]), 1, &TA_Network);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->GetNewNetwork((Project*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Network);}
    return rval;}
  static cssEl* cssElCFun_pdpMisc_GetDefNetwork_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->GetDefNetwork((Project*)(void*)*arg[1]), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindMakeSpecGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeSpecGp((Project*)(void*)*arg[1], (const char*)*arg[2]), 1, &TA_BaseSpec_MGroup);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeSpecGp((Project*)(void*)*arg[1], (const char*)*arg[2], refarg_2), 1, &TA_BaseSpec_MGroup);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindMakeSpec_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeSpec((Project*)(void*)*arg[1], (const char*)*arg[2], (TypeDef*)*arg[3]), 1, &TA_BaseSpec);}
    if(na == 4) {
      bool refarg_3=(bool)*arg[4];
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeSpec((Project*)(void*)*arg[1], (const char*)*arg[2], (TypeDef*)*arg[3], refarg_3), 1, &TA_BaseSpec);    *arg[4]=(Int)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindSpecName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindSpecName((Project*)(void*)*arg[1], (const char*)*arg[2]), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindSpecType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindSpecType((Project*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindMakeProc_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeProc((Project*)(void*)*arg[1], (const char*)*arg[2], (TypeDef*)*arg[3]), 1, &TA_Process);}
    if(na == 4) {
      bool refarg_3=(bool)*arg[4];
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeProc((Project*)(void*)*arg[1], (const char*)*arg[2], (TypeDef*)*arg[3], refarg_3), 1, &TA_Process);    *arg[4]=(Int)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindProcName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindProcName((Project*)(void*)*arg[1], (const char*)*arg[2]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindProcType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindProcType((Project*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindMakeLog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeLog((Project*)(void*)*arg[1], (const char*)*arg[2], (TypeDef*)*arg[3]), 1, &TA_PDPLog);}
    if(na == 4) {
      bool refarg_3=(bool)*arg[4];
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeLog((Project*)(void*)*arg[1], (const char*)*arg[2], (TypeDef*)*arg[3], refarg_3), 1, &TA_PDPLog);    *arg[4]=(Int)refarg_3;
}
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindLogName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindLogName((Project*)(void*)*arg[1], (const char*)*arg[2]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindLogType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindLogType((Project*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindSelectEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindSelectEdit((Project*)(void*)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_pdpMisc_FindMakeSelectEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((pdpMisc*)ths)->FindMakeSelectEdit((Project*)(void*)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
PosGroup*		 TAI_PosGroup=NULL;
BaseSubSpec*		 TAI_BaseSubSpec=NULL;
  static cssEl* cssElCFun_BaseSubSpec_FindParent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSubSpec*)ths)->FindParent(), 1, &TA_BaseSubSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSubSpec_FindParentBaseSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BaseSubSpec*)ths)->FindParentBaseSpec(), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_BaseSubSpec_SetUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSubSpec*)ths)->SetUnique((char*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BaseSubSpec_GetUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BaseSubSpec*)ths)->GetUnique((char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BaseSubSpec_UpdateMember_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSubSpec*)ths)->UpdateMember((BaseSubSpec*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BaseSubSpec_UpdateSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BaseSubSpec*)ths)->UpdateSpec();
    return rval;}
PatternSpec*		 TAI_PatternSpec=NULL;
  static cssEl* cssElCFun_PatternSpec_SetLayer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PatternSpec*)ths)->SetLayer((Network*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_PatternSpec_UnSetLayer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->UnSetLayer();
    return rval;}
  static cssEl* cssElCFun_PatternSpec_FlagLayer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->FlagLayer();
    return rval;}
  static cssEl* cssElCFun_PatternSpec_Value_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((PatternSpec*)ths)->Value((Pattern*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_PatternSpec_Flag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PatternSpec*)ths)->Flag((PatternSpec::PatUseFlags)(int)*arg[1], (Pattern*)(void*)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_PatternSpec_ApplyValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->ApplyValue((Pattern*)(void*)*arg[1], (Unit*)(void*)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_ApplyValue_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->ApplyValue_impl((Unit*)(void*)*arg[1], (float)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_ApplyValueWithFlags_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->ApplyValueWithFlags((Unit*)(void*)*arg[1], (float)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_ApplyPattern_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->ApplyPattern((Pattern*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_NewPattern_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((PatternSpec*)ths)->NewPattern((Event*)(void*)*arg[1], (Pattern_Group*)(void*)*arg[2]), 1, &TA_Pattern);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_UpdatePattern_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->UpdatePattern((Event*)(void*)*arg[1], (Pattern*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_SetToLayer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((PatternSpec*)ths)->SetToLayer();}
    if(na == 1) {
      ((PatternSpec*)ths)->SetToLayer((Layer*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_PatternSpec_SetToLayName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->SetToLayName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_UpdateAllEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->UpdateAllEvents();
    return rval;}
  static cssEl* cssElCFun_PatternSpec_ApplyNames_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec*)ths)->ApplyNames();
    return rval;}
SpecPtr_impl*		 TAI_SpecPtr_impl=NULL;
  static cssEl* cssElCFun_SpecPtr_impl_GetSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr_impl*)ths)->GetSpec(), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_impl_SetSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr_impl*)ths)->SetSpec((BaseSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_impl_SetDefaultSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr_impl*)ths)->SetDefaultSpec((taBase*)(void*)*arg[1], (TypeDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_impl_SetBaseType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr_impl*)ths)->SetBaseType((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_impl_GetSpecGroup_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr_impl*)ths)->GetSpecGroup(), 1, &TA_BaseSpec_MGroup);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_impl_GetSpecOfType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr_impl*)ths)->GetSpecOfType();
    return rval;}
SchedItem*		 TAI_SchedItem=NULL;
  static cssEl* cssElCFun_SchedItem_GetVal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SchedItem*)ths)->GetVal((int)*arg[1]));
    return rval;}
taList<SchedItem>*		 TAI_taList_SchedItem_=NULL;
  static cssEl* cssElCFun_taList_SchedItem__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<SchedItem>*)ths)->MoveBefore((SchedItem*)(void*)*arg[1], (SchedItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<SchedItem>*)ths)->MoveAfter((SchedItem*)(void*)*arg[1], (SchedItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->SafeEl((int)*arg[1]), 1, &TA_SchedItem);
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->FastEl((int)*arg[1]), 1, &TA_SchedItem);
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->DefaultEl(), 1, &TA_SchedItem);
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->Edit_El((SchedItem*)(void*)*arg[1]), 1, &TA_SchedItem);
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->FindName((const char*)*arg[1]), 1, &TA_SchedItem);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_SchedItem);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_SchedItem);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_SchedItem);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->Pop(), 1, &TA_SchedItem);
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->Peek(), 1, &TA_SchedItem);
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->AddUniqNameOld((SchedItem*)(void*)*arg[1]), 1, &TA_SchedItem);
    return rval;}
  static cssEl* cssElCFun_taList_SchedItem__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SchedItem>*)ths)->LinkUniqNameOld((SchedItem*)(void*)*arg[1]), 1, &TA_SchedItem);
    return rval;}
Schedule*		 TAI_Schedule=NULL;
  static cssEl* cssElCFun_Schedule_GetVal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Schedule*)ths)->GetVal((int)*arg[1]));
    return rval;}
WeightLimits*		 TAI_WeightLimits=NULL;
  static cssEl* cssElCFun_WeightLimits_ApplyMinLimit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((WeightLimits*)ths)->ApplyMinLimit(refarg_0);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_WeightLimits_ApplyMaxLimit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((WeightLimits*)ths)->ApplyMaxLimit(refarg_0);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_WeightLimits_ApplyLimits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((WeightLimits*)ths)->ApplyLimits(refarg_0);
    *arg[1]=(Real)refarg_0;
    return rval;}
SpecPtr<ConSpec>*		 TAI_SpecPtr_ConSpec_=NULL;
  static cssEl* cssElCFun_SpecPtr_ConSpec__SetDefaultSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr<ConSpec>*)ths)->SetDefaultSpec((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_ConSpec__CheckSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SpecPtr<ConSpec>*)ths)->CheckSpec());
    return rval;}
  static cssEl* cssElCFun_SpecPtr_ConSpec__NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr<ConSpec>*)ths)->NewChild(), 1, &TA_ConSpec);
    return rval;}
ConSpec_SPtr*		 TAI_ConSpec_SPtr=NULL;
taList<Unit>*		 TAI_taList_Unit_=NULL;
  static cssEl* cssElCFun_taList_Unit__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<Unit>*)ths)->MoveBefore((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_Unit__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<Unit>*)ths)->MoveAfter((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_Unit__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taList_Unit__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->FastEl((int)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taList_Unit__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->DefaultEl(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taList_Unit__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->Edit_El((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taList_Unit__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<Unit>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_Unit__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<Unit>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_Unit__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->Pop(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taList_Unit__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->Peek(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taList_Unit__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->AddUniqNameOld((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taList_Unit__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Unit>*)ths)->LinkUniqNameOld((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
Unit_List*		 TAI_Unit_List=NULL;
SpecPtr<UnitSpec>*		 TAI_SpecPtr_UnitSpec_=NULL;
  static cssEl* cssElCFun_SpecPtr_UnitSpec__SetDefaultSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr<UnitSpec>*)ths)->SetDefaultSpec((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_UnitSpec__CheckSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SpecPtr<UnitSpec>*)ths)->CheckSpec());
    return rval;}
  static cssEl* cssElCFun_SpecPtr_UnitSpec__NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr<UnitSpec>*)ths)->NewChild(), 1, &TA_UnitSpec);
    return rval;}
UnitSpec_SPtr*		 TAI_UnitSpec_SPtr=NULL;
SpecPtr<ProjectionSpec>*		 TAI_SpecPtr_ProjectionSpec_=NULL;
  static cssEl* cssElCFun_SpecPtr_ProjectionSpec__SetDefaultSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr<ProjectionSpec>*)ths)->SetDefaultSpec((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_ProjectionSpec__CheckSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SpecPtr<ProjectionSpec>*)ths)->CheckSpec());
    return rval;}
  static cssEl* cssElCFun_SpecPtr_ProjectionSpec__NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr<ProjectionSpec>*)ths)->NewChild(), 1, &TA_ProjectionSpec);
    return rval;}
ProjectionSpec_SPtr*		 TAI_ProjectionSpec_SPtr=NULL;
Projection_Group*		 TAI_Projection_Group=NULL;
taGroup<Unit>*		 TAI_taGroup_Unit_=NULL;
  static cssEl* cssElCFun_taGroup_Unit__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FirstEl(refarg_0), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NextEl(refarg_0), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Unit>*)ths)->MoveBefore((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Unit>*)ths)->MoveAfter((Unit*)(void*)*arg[1], (Unit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FastEl((int)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->DefaultEl(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->Edit_El((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->Leaf((int)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NewEl(), 1, &TA_Unit);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NewEl((int)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Unit);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->Pop(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->Peek(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->AddUniqNameOld((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->LinkUniqNameOld((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Unit__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Unit>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Unit_Group*		 TAI_Unit_Group=NULL;
  static cssEl* cssElCFun_Unit_Group_Copy_Weights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Unit_Group*)ths)->Copy_Weights((const Unit_Group*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Unit_Group_WriteWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Unit_Group*)ths)->WriteWeights(refarg_0);}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((Unit_Group*)ths)->WriteWeights(refarg_0, (Con_Group::WtSaveFormat)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Unit_Group_ReadWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Unit_Group*)ths)->ReadWeights(refarg_0);}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    ((Unit_Group*)ths)->ReadWeights(refarg_0, (Con_Group::WtSaveFormat)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Unit_Group_Build_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit_Group*)ths)->Build());
    return rval;}
  static cssEl* cssElCFun_Unit_Group_CheckBuild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit_Group*)ths)->CheckBuild());
    return rval;}
  static cssEl* cssElCFun_Unit_Group_LayoutUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Unit_Group*)ths)->LayoutUnits();}
    if(na == 1) {
      ((Unit_Group*)ths)->LayoutUnits((Unit*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Unit_Group_RecomputeGeometry_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Unit_Group*)ths)->RecomputeGeometry();
    return rval;}
  static cssEl* cssElCFun_Unit_Group_SetUnitSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit_Group*)ths)->SetUnitSpec((UnitSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Unit_Group_SetConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit_Group*)ths)->SetConSpec((ConSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Unit_Group_TransformWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Unit_Group*)ths)->TransformWeights(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));
    return rval;}
  static cssEl* cssElCFun_Unit_Group_AddNoiseToWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Unit_Group*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_Unit_Group_PruneCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Unit_Group*)ths)->PruneCons(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (CountParam::Relation)(int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Unit_Group_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Unit_Group*)ths)->LesionCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Unit_Group*)ths)->LesionCons((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Unit_Group_LesionUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Unit_Group*)ths)->LesionUnits((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((Unit_Group*)ths)->LesionUnits((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Unit_Group_UnitValuesToArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Unit_Group*)ths)->UnitValuesToArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Unit_Group_UnitValuesFromArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((Unit_Group*)ths)->UnitValuesFromArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Unit_Group_FindUnitFmCoord_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Unit_Group*)ths)->FindUnitFmCoord(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)), 1, &TA_Unit);
    return rval;}
taGroup<Layer>*		 TAI_taGroup_Layer_=NULL;
  static cssEl* cssElCFun_taGroup_Layer__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FirstEl(refarg_0), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NextEl(refarg_0), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Layer>*)ths)->MoveBefore((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Layer>*)ths)->MoveAfter((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FastEl((int)*arg[1]), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->DefaultEl(), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->Edit_El((Layer*)(void*)*arg[1]), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->Leaf((int)*arg[1]), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NewEl(), 1, &TA_Layer);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NewEl((int)*arg[1]), 1, &TA_Layer);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Layer);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Layer);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Layer);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Layer);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Layer);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->Pop(), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->Peek(), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->AddUniqNameOld((Layer*)(void*)*arg[1]), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->LinkUniqNameOld((Layer*)(void*)*arg[1]), 1, &TA_Layer);
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Layer);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Layer);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Layer__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Layer);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Layer>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Layer);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Layer_MGroup*		 TAI_Layer_MGroup=NULL;
taGroup<Network>*		 TAI_taGroup_Network_=NULL;
  static cssEl* cssElCFun_taGroup_Network__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FirstEl(refarg_0), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NextEl(refarg_0), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Network>*)ths)->MoveBefore((Network*)(void*)*arg[1], (Network*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Network>*)ths)->MoveAfter((Network*)(void*)*arg[1], (Network*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FastEl((int)*arg[1]), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->DefaultEl(), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->Edit_El((Network*)(void*)*arg[1]), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->Leaf((int)*arg[1]), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NewEl(), 1, &TA_Network);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NewEl((int)*arg[1]), 1, &TA_Network);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Network);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Network);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Network);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Network);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Network);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->Pop(), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->Peek(), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->AddUniqNameOld((Network*)(void*)*arg[1]), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->LinkUniqNameOld((Network*)(void*)*arg[1]), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Network);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Network);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Network__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Network);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Network>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Network);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Network_MGroup*		 TAI_Network_MGroup=NULL;
FullPrjnSpec*		 TAI_FullPrjnSpec=NULL;
TessEl*		 TAI_TessEl=NULL;
taList<TessEl>*		 TAI_taList_TessEl_=NULL;
  static cssEl* cssElCFun_taList_TessEl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<TessEl>*)ths)->MoveBefore((TessEl*)(void*)*arg[1], (TessEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<TessEl>*)ths)->MoveAfter((TessEl*)(void*)*arg[1], (TessEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_TessEl);
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->FastEl((int)*arg[1]), 1, &TA_TessEl);
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->DefaultEl(), 1, &TA_TessEl);
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->Edit_El((TessEl*)(void*)*arg[1]), 1, &TA_TessEl);
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_TessEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_TessEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_TessEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_TessEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->Pop(), 1, &TA_TessEl);
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->Peek(), 1, &TA_TessEl);
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->AddUniqNameOld((TessEl*)(void*)*arg[1]), 1, &TA_TessEl);
    return rval;}
  static cssEl* cssElCFun_taList_TessEl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TessEl>*)ths)->LinkUniqNameOld((TessEl*)(void*)*arg[1]), 1, &TA_TessEl);
    return rval;}
TessEl_List*		 TAI_TessEl_List=NULL;
TesselPrjnSpec*		 TAI_TesselPrjnSpec=NULL;
  static cssEl* cssElCFun_TesselPrjnSpec_Connect_NonLinked_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->Connect_NonLinked((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_Connect_GpLinked_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->Connect_GpLinked((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_Connect_GpLinkFmSrc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->Connect_GpLinkFmSrc((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_Connect_UnLinked_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->Connect_UnLinked((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_Connect_UnLinkFmSrc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->Connect_UnLinkFmSrc((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_GetCtrFmRecv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TwoDCoord& refarg_0=*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord);
    ((TesselPrjnSpec*)ths)->GetCtrFmRecv(refarg_0, *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord));
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_Connect_RecvUnit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->Connect_RecvUnit((Unit*)(void*)*arg[1], *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord), (Projection*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_MakeEllipse_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->MakeEllipse((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_MakeRectangle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->MakeRectangle((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_WeightsFromDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->WeightsFromDist((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TesselPrjnSpec_WeightsFromGausDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TesselPrjnSpec*)ths)->WeightsFromGausDist((float)*arg[1], (float)*arg[2]);
    return rval;}
OneToOnePrjnSpec*		 TAI_OneToOnePrjnSpec=NULL;
UniformRndPrjnSpec*		 TAI_UniformRndPrjnSpec=NULL;
PolarRndPrjnSpec*		 TAI_PolarRndPrjnSpec=NULL;
  static cssEl* cssElCFun_PolarRndPrjnSpec_UnitDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((PolarRndPrjnSpec*)ths)->UnitDist((PolarRndPrjnSpec::UnitDistType)(int)*arg[1], (Projection*)(void*)*arg[2], *(TwoDCoord*)arg[3]->GetVoidPtrOfType(&TA_TwoDCoord), *(TwoDCoord*)arg[4]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_PolarRndPrjnSpec_GetUnitFmOff_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((PolarRndPrjnSpec*)ths)->GetUnitFmOff((PolarRndPrjnSpec::UnitDistType)(int)*arg[1], (bool)*arg[2], (Projection*)(void*)*arg[3], *(TwoDCoord*)arg[4]->GetVoidPtrOfType(&TA_TwoDCoord), *(FloatTwoDCoord*)arg[5]->GetVoidPtrOfType(&TA_FloatTwoDCoord)), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_PolarRndPrjnSpec_GetDistProb_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((PolarRndPrjnSpec*)ths)->GetDistProb((Projection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]));
    return rval;}
SymmetricPrjnSpec*		 TAI_SymmetricPrjnSpec=NULL;
LinkPrjnConPtr*		 TAI_LinkPrjnConPtr=NULL;
taList<LinkPrjnConPtr>*		 TAI_taList_LinkPrjnConPtr_=NULL;
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<LinkPrjnConPtr>*)ths)->MoveBefore((LinkPrjnConPtr*)(void*)*arg[1], (LinkPrjnConPtr*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<LinkPrjnConPtr>*)ths)->MoveAfter((LinkPrjnConPtr*)(void*)*arg[1], (LinkPrjnConPtr*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->SafeEl((int)*arg[1]), 1, &TA_LinkPrjnConPtr);
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->FastEl((int)*arg[1]), 1, &TA_LinkPrjnConPtr);
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->DefaultEl(), 1, &TA_LinkPrjnConPtr);
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->Edit_El((LinkPrjnConPtr*)(void*)*arg[1]), 1, &TA_LinkPrjnConPtr);
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->FindName((const char*)*arg[1]), 1, &TA_LinkPrjnConPtr);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_LinkPrjnConPtr);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_LinkPrjnConPtr);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_LinkPrjnConPtr);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->Pop(), 1, &TA_LinkPrjnConPtr);
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->Peek(), 1, &TA_LinkPrjnConPtr);
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->AddUniqNameOld((LinkPrjnConPtr*)(void*)*arg[1]), 1, &TA_LinkPrjnConPtr);
    return rval;}
  static cssEl* cssElCFun_taList_LinkPrjnConPtr__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LinkPrjnConPtr>*)ths)->LinkUniqNameOld((LinkPrjnConPtr*)(void*)*arg[1]), 1, &TA_LinkPrjnConPtr);
    return rval;}
LinkPrjnConPtr_List*		 TAI_LinkPrjnConPtr_List=NULL;
LinkPrjnSpec*		 TAI_LinkPrjnSpec=NULL;
ScriptPrjnSpec*		 TAI_ScriptPrjnSpec=NULL;
  static cssEl* cssElCFun_ScriptPrjnSpec_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((ScriptPrjnSpec*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((ScriptPrjnSpec*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((ScriptPrjnSpec*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((ScriptPrjnSpec*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ScriptPrjnSpec*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((ScriptPrjnSpec*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((ScriptPrjnSpec*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((ScriptPrjnSpec*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((ScriptPrjnSpec*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((ScriptPrjnSpec*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((ScriptPrjnSpec*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((ScriptPrjnSpec*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((ScriptPrjnSpec*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ScriptPrjnSpec*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_FindParent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindParent(), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_SetUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->SetUnique((char*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_GetUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->GetUnique((char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UpdateMember_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UpdateMember((BaseSpec*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UpdateSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UpdateSpec();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UpdateChildren_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UpdateChildren();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UpdateSubSpecs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->UpdateSubSpecs();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->NewChild(), 1, &TA_BaseSpec);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CheckType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->CheckType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CheckObjectType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->CheckObjectType((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_FindMakeChild_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindMakeChild((const char*)*arg[1]), 1, &TA_BaseSpec);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindMakeChild((const char*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_BaseSpec);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindMakeChild((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2), 1, &TA_BaseSpec);    *arg[3]=(Int)refarg_2;
}
    if(na == 4) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((ScriptPrjnSpec*)ths)->FindMakeChild((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2, (const char*)*arg[4]), 1, &TA_BaseSpec);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_RemoveChild_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((ScriptPrjnSpec*)ths)->RemoveChild((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((ScriptPrjnSpec*)ths)->RemoveChild((const char*)*arg[1], (TypeDef*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_RemoveCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->RemoveCons((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_PreConnect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->PreConnect((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Connect_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->Connect_impl((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Connect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->Connect((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_ProbAddCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssInt((int)((ScriptPrjnSpec*)ths)->ProbAddCons((Projection*)(void*)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((ScriptPrjnSpec*)ths)->ProbAddCons((Projection*)(void*)*arg[1], (float)*arg[2], (float)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->InitWtDelta((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->InitWtState((Projection*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->C_InitWtState((Projection*)(void*)*arg[1], (Con_Group*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_CopyNetwork_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->CopyNetwork((Network*)(void*)*arg[1], (Network*)(void*)*arg[2], (Projection*)(void*)*arg[3], (Projection*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_UseCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->UseCount());
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_HasScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->HasScript());
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_RunScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptPrjnSpec*)ths)->RunScript());
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_SetScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->SetScript((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_LoadScript_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptPrjnSpec*)ths)->LoadScript();}
    if(na == 1) {
      ((ScriptPrjnSpec*)ths)->LoadScript((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_LoadScriptString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptPrjnSpec*)ths)->LoadScriptString();}
    if(na == 1) {
      ((ScriptPrjnSpec*)ths)->LoadScriptString((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_InteractScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->InteractScript();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Interact_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->Interact();
    return rval;}
  static cssEl* cssElCFun_ScriptPrjnSpec_Compile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptPrjnSpec*)ths)->Compile();
    return rval;}
CustomPrjnSpec*		 TAI_CustomPrjnSpec=NULL;
GpFullPrjnSpec*		 TAI_GpFullPrjnSpec=NULL;
  static cssEl* cssElCFun_GpFullPrjnSpec_GetNGroups_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((GpFullPrjnSpec*)ths)->GetNGroups((Projection*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
GpOneToOnePrjnSpec*		 TAI_GpOneToOnePrjnSpec=NULL;
RndGpOneToOnePrjnSpec*		 TAI_RndGpOneToOnePrjnSpec=NULL;
GpOneToManyPrjnSpec*		 TAI_GpOneToManyPrjnSpec=NULL;
  static cssEl* cssElCFun_GpOneToManyPrjnSpec_GetNGroups_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((GpOneToManyPrjnSpec*)ths)->GetNGroups((Projection*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
GpTessEl*		 TAI_GpTessEl=NULL;
taList<GpTessEl>*		 TAI_taList_GpTessEl_=NULL;
  static cssEl* cssElCFun_taList_GpTessEl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<GpTessEl>*)ths)->MoveBefore((GpTessEl*)(void*)*arg[1], (GpTessEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<GpTessEl>*)ths)->MoveAfter((GpTessEl*)(void*)*arg[1], (GpTessEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_GpTessEl);
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->FastEl((int)*arg[1]), 1, &TA_GpTessEl);
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->DefaultEl(), 1, &TA_GpTessEl);
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->Edit_El((GpTessEl*)(void*)*arg[1]), 1, &TA_GpTessEl);
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_GpTessEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_GpTessEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_GpTessEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_GpTessEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->Pop(), 1, &TA_GpTessEl);
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->Peek(), 1, &TA_GpTessEl);
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->AddUniqNameOld((GpTessEl*)(void*)*arg[1]), 1, &TA_GpTessEl);
    return rval;}
  static cssEl* cssElCFun_taList_GpTessEl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GpTessEl>*)ths)->LinkUniqNameOld((GpTessEl*)(void*)*arg[1]), 1, &TA_GpTessEl);
    return rval;}
GpTessEl_List*		 TAI_GpTessEl_List=NULL;
GpRndTesselPrjnSpec*		 TAI_GpRndTesselPrjnSpec=NULL;
  static cssEl* cssElCFun_GpRndTesselPrjnSpec_GetCtrFmRecv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TwoDCoord& refarg_0=*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord);
    ((GpRndTesselPrjnSpec*)ths)->GetCtrFmRecv(refarg_0, *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord));
    return rval;}
  static cssEl* cssElCFun_GpRndTesselPrjnSpec_Connect_Gps_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GpRndTesselPrjnSpec*)ths)->Connect_Gps((Unit_Group*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (float)*arg[3], (Projection*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_GpRndTesselPrjnSpec_Connect_RecvGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GpRndTesselPrjnSpec*)ths)->Connect_RecvGp((Unit_Group*)(void*)*arg[1], *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord), (Projection*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_GpRndTesselPrjnSpec_MakeEllipse_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GpRndTesselPrjnSpec*)ths)->MakeEllipse((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_GpRndTesselPrjnSpec_MakeRectangle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GpRndTesselPrjnSpec*)ths)->MakeRectangle((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_GpRndTesselPrjnSpec_SetPCon_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((GpRndTesselPrjnSpec*)ths)->SetPCon((float)*arg[1]);}
    if(na == 2) {
      ((GpRndTesselPrjnSpec*)ths)->SetPCon((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((GpRndTesselPrjnSpec*)ths)->SetPCon((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
TiledRFPrjnSpec*		 TAI_TiledRFPrjnSpec=NULL;
  static cssEl* cssElCFun_TiledRFPrjnSpec_SelectRF_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TiledRFPrjnSpec*)ths)->SelectRF((Projection*)(void*)*arg[1]);
    return rval;}
TiledGpRFPrjnSpec*		 TAI_TiledGpRFPrjnSpec=NULL;
Pattern_Group*		 TAI_Pattern_Group=NULL;
PatternSpec_Group*		 TAI_PatternSpec_Group=NULL;
  static cssEl* cssElCFun_PatternSpec_Group_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((PatternSpec_Group*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_PatternSpec_Group_NewPatternGroup_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((PatternSpec_Group*)ths)->NewPatternGroup((Event*)(void*)*arg[1], (Pattern_Group*)(void*)*arg[2]), 1, &TA_Pattern_Group);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_Group_UpdatePatternGroup_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec_Group*)ths)->UpdatePatternGroup((Event*)(void*)*arg[1], (Pattern_Group*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_PatternSpec_Group_LinearLayout_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((PatternSpec_Group*)ths)->LinearLayout();
    return rval;}
SpecPtr<EventSpec>*		 TAI_SpecPtr_EventSpec_=NULL;
  static cssEl* cssElCFun_SpecPtr_EventSpec__SetDefaultSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr<EventSpec>*)ths)->SetDefaultSpec((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_EventSpec__CheckSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SpecPtr<EventSpec>*)ths)->CheckSpec());
    return rval;}
  static cssEl* cssElCFun_SpecPtr_EventSpec__NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr<EventSpec>*)ths)->NewChild(), 1, &TA_EventSpec);
    return rval;}
EventSpec_SPtr*		 TAI_EventSpec_SPtr=NULL;
taGroup<Event>*		 TAI_taGroup_Event_=NULL;
  static cssEl* cssElCFun_taGroup_Event__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FirstEl(refarg_0), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NextEl(refarg_0), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Event>*)ths)->MoveBefore((Event*)(void*)*arg[1], (Event*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Event>*)ths)->MoveAfter((Event*)(void*)*arg[1], (Event*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FastEl((int)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->DefaultEl(), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->Edit_El((Event*)(void*)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->Leaf((int)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NewEl(), 1, &TA_Event);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NewEl((int)*arg[1]), 1, &TA_Event);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Event);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Event);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Event);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Event);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Event);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->Pop(), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->Peek(), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->AddUniqNameOld((Event*)(void*)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->LinkUniqNameOld((Event*)(void*)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Event);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Event);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Event__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Event);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Event>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Event);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Event_MGroup*		 TAI_Event_MGroup=NULL;
  static cssEl* cssElCFun_Event_MGroup_InitEvents_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Event_MGroup*)ths)->InitEvents((Environment*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Event_MGroup_EventCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Event_MGroup*)ths)->EventCount());
    return rval;}
  static cssEl* cssElCFun_Event_MGroup_GetEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Event_MGroup*)ths)->GetEvent((int)*arg[1]), 1, &TA_Event);
    return rval;}
  static cssEl* cssElCFun_Event_MGroup_NewFmSpec_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Event_MGroup*)ths)->NewFmSpec((int)*arg[1]), 1, &TA_Event);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Event_MGroup*)ths)->NewFmSpec((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Event);}
    if(na == 3) {
      rval=new cssTA_Base((void*)((Event_MGroup*)ths)->NewFmSpec((int)*arg[1], (TypeDef*)*arg[2], (EventSpec*)(void*)*arg[3]), 1, &TA_Event);}
    return rval;}
  static cssEl* cssElCFun_Event_MGroup_AddToView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Event_MGroup*)ths)->AddToView();
    return rval;}
  static cssEl* cssElCFun_Event_MGroup_RemoveFromView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Event_MGroup*)ths)->RemoveFromView();
    return rval;}
taGroup<Environment>*		 TAI_taGroup_Environment_=NULL;
  static cssEl* cssElCFun_taGroup_Environment__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FirstEl(refarg_0), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NextEl(refarg_0), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Environment>*)ths)->MoveBefore((Environment*)(void*)*arg[1], (Environment*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Environment>*)ths)->MoveAfter((Environment*)(void*)*arg[1], (Environment*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FastEl((int)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->DefaultEl(), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->Edit_El((Environment*)(void*)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->Leaf((int)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NewEl(), 1, &TA_Environment);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NewEl((int)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Environment);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Environment);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Environment);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->Pop(), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->Peek(), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->AddUniqNameOld((Environment*)(void*)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->LinkUniqNameOld((Environment*)(void*)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Environment);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Environment__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Environment>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Environment);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Environment_MGroup*		 TAI_Environment_MGroup=NULL;
taList<Environment>*		 TAI_taList_Environment_=NULL;
  static cssEl* cssElCFun_taList_Environment__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<Environment>*)ths)->MoveBefore((Environment*)(void*)*arg[1], (Environment*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_Environment__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<Environment>*)ths)->MoveAfter((Environment*)(void*)*arg[1], (Environment*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_Environment__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taList_Environment__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->FastEl((int)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taList_Environment__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->DefaultEl(), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taList_Environment__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->Edit_El((Environment*)(void*)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taList_Environment__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<Environment>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Environment);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_Environment__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<Environment>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Environment);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Environment);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_Environment__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->Pop(), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taList_Environment__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->Peek(), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taList_Environment__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->AddUniqNameOld((Environment*)(void*)*arg[1]), 1, &TA_Environment);
    return rval;}
  static cssEl* cssElCFun_taList_Environment__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Environment>*)ths)->LinkUniqNameOld((Environment*)(void*)*arg[1]), 1, &TA_Environment);
    return rval;}
Environment_List*		 TAI_Environment_List=NULL;
InteractiveScriptEnv*		 TAI_InteractiveScriptEnv=NULL;
FreqEvent*		 TAI_FreqEvent=NULL;
FreqEnv*		 TAI_FreqEnv=NULL;
FreqEvent_Group*		 TAI_FreqEvent_Group=NULL;
TimeEvent*		 TAI_TimeEvent=NULL;
TimeEvent_MGroup*		 TAI_TimeEvent_MGroup=NULL;
  static cssEl* cssElCFun_TimeEvent_MGroup_GetTimeEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((TimeEvent_MGroup*)ths)->GetTimeEvent((float)*arg[1]), 1, &TA_TimeEvent);
    return rval;}
  static cssEl* cssElCFun_TimeEvent_MGroup_RegularlySpacedTimes_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TimeEvent_MGroup*)ths)->RegularlySpacedTimes((float)*arg[1], (float)*arg[2]);
    return rval;}
FreqTimeEvent*		 TAI_FreqTimeEvent=NULL;
FreqTimeEvent_Group*		 TAI_FreqTimeEvent_Group=NULL;
FreqTimeEnv*		 TAI_FreqTimeEnv=NULL;
ProbPattern*		 TAI_ProbPattern=NULL;
ProbPatternSpec_Group*		 TAI_ProbPatternSpec_Group=NULL;
ProbEventSpec*		 TAI_ProbEventSpec=NULL;
  static cssEl* cssElCFun_ProbEventSpec_ApplySamePats_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProbEventSpec*)ths)->ApplySamePats((Event*)(void*)*arg[1], (Network*)(void*)*arg[2]);
    return rval;}
XYPatternSpec*		 TAI_XYPatternSpec=NULL;
  static cssEl* cssElCFun_XYPatternSpec_WrapClip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((XYPatternSpec*)ths)->WrapClip((int)*arg[1], (int)*arg[2]));
    return rval;}
XYPattern*		 TAI_XYPattern=NULL;
XYSubPatternSpec*		 TAI_XYSubPatternSpec=NULL;
  static cssEl* cssElCFun_XYSubPatternSpec_WrapClip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((XYSubPatternSpec*)ths)->WrapClip((int)*arg[1], (int)*arg[2]));
    return rval;}
XYSubPattern*		 TAI_XYSubPattern=NULL;
GroupPatternSpec*		 TAI_GroupPatternSpec=NULL;
  static cssEl* cssElCFun_GroupPatternSpec_FlatToValueIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GroupPatternSpec*)ths)->FlatToValueIdx((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_GroupPatternSpec_CoordToValueIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GroupPatternSpec*)ths)->CoordToValueIdx(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_GroupPatternSpec_ValueToFlatIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GroupPatternSpec*)ths)->ValueToFlatIdx((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_GroupPatternSpec_CoordToFlatIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GroupPatternSpec*)ths)->CoordToFlatIdx(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
DurEvent*		 TAI_DurEvent=NULL;
FromFileEnv*		 TAI_FromFileEnv=NULL;
  static cssEl* cssElCFun_FromFileEnv_ReadEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FromFileEnv*)ths)->ReadEvent((Event*)(void*)*arg[1]);
    return rval;}
CtrlPanelData*		 TAI_CtrlPanelData=NULL;
  static cssEl* cssElCFun_CtrlPanelData_GetPanel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((CtrlPanelData*)ths)->GetPanel();
    return rval;}
  static cssEl* cssElCFun_CtrlPanelData_GetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((CtrlPanelData*)ths)->GetWinPos();
    return rval;}
  static cssEl* cssElCFun_CtrlPanelData_ScriptWinPos_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((CtrlPanelData*)ths)->ScriptWinPos();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((CtrlPanelData*)ths)->ScriptWinPos(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_CtrlPanelData_SetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((CtrlPanelData*)ths)->SetWinPos();
    return rval;}
  static cssEl* cssElCFun_CtrlPanelData_Place_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((CtrlPanelData*)ths)->Place();}
    if(na == 1) {
      ((CtrlPanelData*)ths)->Place((float)*arg[1]);}
    if(na == 2) {
      ((CtrlPanelData*)ths)->Place((float)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_CtrlPanelData_Revert_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((CtrlPanelData*)ths)->Revert();
    return rval;}
Process_Group*		 TAI_Process_Group=NULL;
  static cssEl* cssElCFun_Process_Group_FindMakeProc_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Process_Group*)ths)->FindMakeProc((const char*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Process);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((Process_Group*)ths)->FindMakeProc((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2), 1, &TA_Process);    *arg[3]=(Int)refarg_2;
}
    return rval;}
taGroup<Process>*		 TAI_taGroup_Process_=NULL;
  static cssEl* cssElCFun_taGroup_Process__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FirstEl(refarg_0), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NextEl(refarg_0), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Process>*)ths)->MoveBefore((Process*)(void*)*arg[1], (Process*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Process>*)ths)->MoveAfter((Process*)(void*)*arg[1], (Process*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FastEl((int)*arg[1]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->DefaultEl(), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->Edit_El((Process*)(void*)*arg[1]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->Leaf((int)*arg[1]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NewEl(), 1, &TA_Process);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NewEl((int)*arg[1]), 1, &TA_Process);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Process);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Process);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Process);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Process);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Process);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->Pop(), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->Peek(), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->AddUniqNameOld((Process*)(void*)*arg[1]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->LinkUniqNameOld((Process*)(void*)*arg[1]), 1, &TA_Process);
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Process);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Process);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Process__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Process);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Process>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Process);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Process_MGroup*		 TAI_Process_MGroup=NULL;
  static cssEl* cssElCFun_Process_MGroup_DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process_MGroup*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Process_MGroup_ReplaceEnvPtrs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process_MGroup*)ths)->ReplaceEnvPtrs((Environment*)(void*)*arg[1], (Environment*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Process_MGroup_ReplaceNetPtrs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Process_MGroup*)ths)->ReplaceNetPtrs((Network*)(void*)*arg[1], (Network*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Process_MGroup_FindMakeProc_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Process_MGroup*)ths)->FindMakeProc((const char*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Process);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((Process_MGroup*)ths)->FindMakeProc((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2), 1, &TA_Process);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_Process_MGroup_ControlPanel_mc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Process_MGroup*)ths)->ControlPanel_mc((taiMenuEl*)(void*)*arg[1]);
    return rval;}
CritParam*		 TAI_CritParam=NULL;
  static cssEl* cssElCFun_CritParam_Evaluate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((CritParam*)ths)->Evaluate((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_CritParam_Init_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((CritParam*)ths)->Init();
    return rval;}
StatVal*		 TAI_StatVal=NULL;
  static cssEl* cssElCFun_StatVal_InitStat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((StatVal*)ths)->InitStat();}
    if(na == 1) {
      ((StatVal*)ths)->InitStat((float)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_StatVal_Init_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((StatVal*)ths)->Init();
    return rval;}
  static cssEl* cssElCFun_StatVal_Crit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((StatVal*)ths)->Crit());
    return rval;}
StatVal_List*		 TAI_StatVal_List=NULL;
  static cssEl* cssElCFun_StatVal_List_InitStat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((StatVal_List*)ths)->InitStat();}
    if(na == 1) {
      ((StatVal_List*)ths)->InitStat((float)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_StatVal_List_Init_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((StatVal_List*)ths)->Init();
    return rval;}
  static cssEl* cssElCFun_StatVal_List_Crit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((StatVal_List*)ths)->Crit());
    return rval;}
  static cssEl* cssElCFun_StatVal_List_NameStatVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((StatVal_List*)ths)->NameStatVals((const char*)*arg[1]);}
    if(na == 2) {
      ((StatVal_List*)ths)->NameStatVals((const char*)*arg[1], (const char*)*arg[2]);}
    if(na == 3) {
      ((StatVal_List*)ths)->NameStatVals((const char*)*arg[1], (const char*)*arg[2], (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_StatVal_List_HasStopCrit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((StatVal_List*)ths)->HasStopCrit());
    return rval;}
  static cssEl* cssElCFun_StatVal_List_GenLogData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((StatVal_List*)ths)->GenLogData((LogData*)(void*)*arg[1]);
    return rval;}
StatValAgg*		 TAI_StatValAgg=NULL;
  static cssEl* cssElCFun_StatValAgg_ComputeAgg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((StatValAgg*)ths)->ComputeAgg((StatVal*)(void*)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_StatValAgg_ComputeAggNoUpdt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((StatValAgg*)ths)->ComputeAggNoUpdt((StatVal*)(void*)*arg[1], (StatVal*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_StatValAgg_NewCopyAgg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((StatValAgg*)ths)->NewCopyAgg((StatVal*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_StatValAgg_ComputeAggs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((StatValAgg*)ths)->ComputeAggs((StatVal_List*)(void*)*arg[1], (StatVal_List*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_StatValAgg_ComputeAggsNoUpdt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((StatValAgg*)ths)->ComputeAggsNoUpdt((StatVal_List*)(void*)*arg[1], (StatVal_List*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_StatValAgg_AggFromCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((StatValAgg*)ths)->AggFromCopy((StatVal_List*)(void*)*arg[1]));
    return rval;}
AggStat*		 TAI_AggStat=NULL;
  static cssEl* cssElCFun_AggStat_AppendAggName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((AggStat*)ths)->AppendAggName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_AggStat_PrependAggName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((AggStat*)ths)->PrependAggName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_AggStat_FindRealStat_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((AggStat*)ths)->FindRealStat();
    return rval;}
  static cssEl* cssElCFun_AggStat_SetFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((AggStat*)ths)->SetFrom((Stat*)(void*)*arg[1]);
    return rval;}
Stat_Group*		 TAI_Stat_Group=NULL;
  static cssEl* cssElCFun_Stat_Group_FindMakeStat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindMakeStat((TypeDef*)*arg[1]), 1, &TA_Stat);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindMakeStat((TypeDef*)*arg[1], (const char*)*arg[2]), 1, &TA_Stat);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindMakeStat((TypeDef*)*arg[1], (const char*)*arg[2], refarg_2), 1, &TA_Stat);    *arg[3]=(Int)refarg_2;
}
    return rval;}
  static cssEl* cssElCFun_Stat_Group_FindAggregator_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindAggregator((Stat*)(void*)*arg[1]), 1, &TA_Stat);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindAggregator((Stat*)(void*)*arg[1], (Aggregate::Operator)(int)*arg[2]), 1, &TA_Stat);}
    return rval;}
  static cssEl* cssElCFun_Stat_Group_FindMonitor_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindMonitor((taBase*)(void*)*arg[1]), 1, &TA_MonitorStat);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindMonitor((taBase*)(void*)*arg[1], (const char*)*arg[2]), 1, &TA_MonitorStat);}
    return rval;}
  static cssEl* cssElCFun_Stat_Group_FindMakeMonitor_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindMakeMonitor((taBase*)(void*)*arg[1], (const char*)*arg[2]), 1, &TA_MonitorStat);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((Stat_Group*)ths)->FindMakeMonitor((taBase*)(void*)*arg[1], (const char*)*arg[2], refarg_2), 1, &TA_MonitorStat);    *arg[3]=(Int)refarg_2;
}
    return rval;}
taPtrList<LogView>*		 TAI_taPtrList_LogView_=NULL;
  static cssEl* cssElCFun_taPtrList_LogView__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->SafeEl((int)*arg[1]), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->FastEl((int)*arg[1]), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->Edit_El((LogView*)(void*)*arg[1]), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->FindName((const char*)*arg[1]), 1, &TA_LogView);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_LogView);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->Pop(), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->Peek(), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->AddUniqNameOld((LogView*)(void*)*arg[1]), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<LogView>*)ths)->LinkUniqNameOld((LogView*)(void*)*arg[1]), 1, &TA_LogView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->FindEl((const LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<LogView>*)ths)->AddEl((LogView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<LogView>*)ths)->Add((LogView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->AddUnique((LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->AddUniqNameNew((LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->Insert((LogView*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->Replace((int)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->ReplaceEl((LogView*)(void*)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->ReplaceName((const char*)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->RemoveEl((LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->DuplicateEl((LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<LogView>*)ths)->Link((LogView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->LinkUnique((LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->LinkUniqNameNew((LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<LogView>*)ths)->InsertLink((LogView*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<LogView>*)ths)->InsertLink((LogView*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->ReplaceLink((int)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->ReplaceLinkEl((LogView*)(void*)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->ReplaceLinkName((const char*)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<LogView>*)ths)->Push((LogView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->MoveEl((LogView*)(void*)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->Transfer((LogView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->MoveBefore((LogView*)(void*)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_LogView__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<LogView>*)ths)->MoveAfter((LogView*)(void*)*arg[1], (LogView*)(void*)*arg[2]));
    return rval;}
LogView_PtrList*		 TAI_LogView_PtrList=NULL;
PDPLog_Group*		 TAI_PDPLog_Group=NULL;
taGroup<PDPLog>*		 TAI_taGroup_PDPLog_=NULL;
  static cssEl* cssElCFun_taGroup_PDPLog__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FirstEl(refarg_0), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NextEl(refarg_0), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<PDPLog>*)ths)->MoveBefore((PDPLog*)(void*)*arg[1], (PDPLog*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<PDPLog>*)ths)->MoveAfter((PDPLog*)(void*)*arg[1], (PDPLog*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->SafeEl((int)*arg[1]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FastEl((int)*arg[1]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->DefaultEl(), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->Edit_El((PDPLog*)(void*)*arg[1]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->Leaf((int)*arg[1]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NewEl(), 1, &TA_PDPLog);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NewEl((int)*arg[1]), 1, &TA_PDPLog);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_PDPLog);}
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindName((const char*)*arg[1]), 1, &TA_PDPLog);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_PDPLog);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_PDPLog);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_PDPLog);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->Pop(), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->Peek(), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->AddUniqNameOld((PDPLog*)(void*)*arg[1]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->LinkUniqNameOld((PDPLog*)(void*)*arg[1]), 1, &TA_PDPLog);
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_PDPLog);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_PDPLog);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_PDPLog__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_PDPLog);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<PDPLog>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_PDPLog);    *arg[2]=(Int)refarg_1;
}
    return rval;}
PDPLog_MGroup*		 TAI_PDPLog_MGroup=NULL;
  static cssEl* cssElCFun_PDPLog_MGroup_FindMakeLog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssTA_Base((void*)((PDPLog_MGroup*)ths)->FindMakeLog((const char*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_PDPLog);}
    if(na == 3) {
      bool refarg_2=(bool)*arg[3];
    rval=new cssTA_Base((void*)((PDPLog_MGroup*)ths)->FindMakeLog((const char*)*arg[1], (TypeDef*)*arg[2], refarg_2), 1, &TA_PDPLog);    *arg[3]=(Int)refarg_2;
}
    return rval;}
NetLog*		 TAI_NetLog=NULL;
  static cssEl* cssElCFun_NetLog_SetNetwork_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NetLog*)ths)->SetNetwork((Network*)(void*)*arg[1]);
    return rval;}
Counter*		 TAI_Counter=NULL;
  static cssEl* cssElCFun_Counter_Crit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Counter*)ths)->Crit());
    return rval;}
  static cssEl* cssElCFun_Counter_Inc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Counter*)ths)->Inc();
    return rval;}
  static cssEl* cssElCFun_Counter_SetMax_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Counter*)ths)->SetMax((int)*arg[1]);
    return rval;}
StepParams*		 TAI_StepParams=NULL;
  static cssEl* cssElCFun_StepParams_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((StepParams*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
InteractiveEpoch*		 TAI_InteractiveEpoch=NULL;
ScriptProcess*		 TAI_ScriptProcess=NULL;
  static cssEl* cssElCFun_ScriptProcess_Interact_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptProcess*)ths)->Interact();
    return rval;}
  static cssEl* cssElCFun_ScriptProcess_Compile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptProcess*)ths)->Compile();
    return rval;}
SaveNetsProc*		 TAI_SaveNetsProc=NULL;
SaveWtsProc*		 TAI_SaveWtsProc=NULL;
LoadWtsProc*		 TAI_LoadWtsProc=NULL;
InitWtsProc*		 TAI_InitWtsProc=NULL;
SyncEpochProc*		 TAI_SyncEpochProc=NULL;
GridSearchBatch*		 TAI_GridSearchBatch=NULL;
  static cssEl* cssElCFun_GridSearchBatch_Compute_CurVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridSearchBatch*)ths)->Compute_CurVal();
    return rval;}
  static cssEl* cssElCFun_GridSearchBatch_SetParamVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GridSearchBatch*)ths)->SetParamVal();
    return rval;}
SameSeedBatch*		 TAI_SameSeedBatch=NULL;
  static cssEl* cssElCFun_SameSeedBatch_InitSeeds_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SameSeedBatch*)ths)->InitSeeds((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SameSeedBatch_UseCurrentSeed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SameSeedBatch*)ths)->UseCurrentSeed();
    return rval;}
ForkProcess*		 TAI_ForkProcess=NULL;
BridgeProcess*		 TAI_BridgeProcess=NULL;
  static cssEl* cssElCFun_BridgeProcess_SetLayerPtrs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BridgeProcess*)ths)->SetLayerPtrs());
    return rval;}
MultiEnvProcess*		 TAI_MultiEnvProcess=NULL;
  static cssEl* cssElCFun_MultiEnvProcess_SetCurEnvironment_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((MultiEnvProcess*)ths)->SetCurEnvironment();
    return rval;}
PatternFlagProcess*		 TAI_PatternFlagProcess=NULL;
  static cssEl* cssElCFun_PatternFlagProcess_SetCurFlags_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternFlagProcess*)ths)->SetCurFlags((int*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_PatternFlagProcess_ClearCurFlags_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((PatternFlagProcess*)ths)->ClearCurFlags((int*)(void*)*arg[1]);
    return rval;}
ActThreshRTStat*		 TAI_ActThreshRTStat=NULL;
  static cssEl* cssElCFun_ActThreshRTStat_GetSettleProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ActThreshRTStat*)ths)->GetSettleProc();
    return rval;}
ProjectionStat*		 TAI_ProjectionStat=NULL;
  static cssEl* cssElCFun_ProjectionStat_GetStatVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((ProjectionStat*)ths)->GetStatVals((Stat*)(void*)*arg[1], refarg_1);
    return rval;}
  static cssEl* cssElCFun_ProjectionStat_VecFmPCA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionStat*)ths)->VecFmPCA((Environment*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_ProjectionStat_VecFmEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ProjectionStat*)ths)->VecFmEvent((Event*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
ComputeStat*		 TAI_ComputeStat=NULL;
  static cssEl* cssElCFun_ComputeStat_GetStatVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((ComputeStat*)ths)->GetStatVals((Stat*)(void*)*arg[1], refarg_1);
    return rval;}
CopyToEnvStat*		 TAI_CopyToEnvStat=NULL;
  static cssEl* cssElCFun_CopyToEnvStat_InitEnv_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((CopyToEnvStat*)ths)->InitEnv();
    return rval;}
  static cssEl* cssElCFun_CopyToEnvStat_GetStatVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((CopyToEnvStat*)ths)->GetStatVals((Stat*)(void*)*arg[1], refarg_1);
    return rval;}
  static cssEl* cssElCFun_CopyToEnvStat_GetAccumProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((CopyToEnvStat*)ths)->GetAccumProc(), 1, &TA_SchedProcess);
    return rval;}
  static cssEl* cssElCFun_CopyToEnvStat_InitEvtIdx_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((CopyToEnvStat*)ths)->InitEvtIdx());
    return rval;}
MaxActTrgStat*		 TAI_MaxActTrgStat=NULL;
UnitActRFStat*		 TAI_UnitActRFStat=NULL;
  static cssEl* cssElCFun_UnitActRFStat_InitRFVals_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((UnitActRFStat*)ths)->InitRFVals();
    return rval;}
  static cssEl* cssElCFun_UnitActRFStat_CheckRFLayersInNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((UnitActRFStat*)ths)->CheckRFLayersInNet());
    return rval;}
UnitActRFStatResetProc*		 TAI_UnitActRFStatResetProc=NULL;
UnitEventRFStat*		 TAI_UnitEventRFStat=NULL;
  static cssEl* cssElCFun_UnitEventRFStat_GetEpochProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((UnitEventRFStat*)ths)->GetEpochProc();
    return rval;}
  static cssEl* cssElCFun_UnitEventRFStat_InitRFVals_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((UnitEventRFStat*)ths)->InitRFVals();
    return rval;}
UniquePatStat*		 TAI_UniquePatStat=NULL;
  static cssEl* cssElCFun_UniquePatStat_GetStatVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((UniquePatStat*)ths)->GetStatVals((Stat*)(void*)*arg[1], refarg_1);
    return rval;}
TimeCounterStat*		 TAI_TimeCounterStat=NULL;
  static cssEl* cssElCFun_TimeCounterStat_InitTime_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TimeCounterStat*)ths)->InitTime();
    return rval;}
TimeCounterStatResetProc*		 TAI_TimeCounterStatResetProc=NULL;
DispDataEnvProc*		 TAI_DispDataEnvProc=NULL;
  static cssEl* cssElCFun_DispDataEnvProc_DispIsGridLog_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DispDataEnvProc*)ths)->DispIsGridLog());
    return rval;}
  static cssEl* cssElCFun_DispDataEnvProc_DispIsGraphLog_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DispDataEnvProc*)ths)->DispIsGraphLog());
    return rval;}
DispNetWeightsProc*		 TAI_DispNetWeightsProc=NULL;
  static cssEl* cssElCFun_DispNetWeightsProc_SetPtrs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DispNetWeightsProc*)ths)->SetPtrs());
    return rval;}
ClearLogProc*		 TAI_ClearLogProc=NULL;
taGroup<TypeDefault>*		 TAI_taGroup_TypeDefault_=NULL;
  static cssEl* cssElCFun_taGroup_TypeDefault__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FirstEl(refarg_0), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NextEl(refarg_0), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<TypeDefault>*)ths)->MoveBefore((TypeDefault*)(void*)*arg[1], (TypeDefault*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<TypeDefault>*)ths)->MoveAfter((TypeDefault*)(void*)*arg[1], (TypeDefault*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->SafeEl((int)*arg[1]), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FastEl((int)*arg[1]), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->DefaultEl(), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->Edit_El((TypeDefault*)(void*)*arg[1]), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->Leaf((int)*arg[1]), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NewEl(), 1, &TA_TypeDefault);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NewEl((int)*arg[1]), 1, &TA_TypeDefault);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_TypeDefault);}
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindName((const char*)*arg[1]), 1, &TA_TypeDefault);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_TypeDefault);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_TypeDefault);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_TypeDefault);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->Pop(), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->Peek(), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->AddUniqNameOld((TypeDefault*)(void*)*arg[1]), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->LinkUniqNameOld((TypeDefault*)(void*)*arg[1]), 1, &TA_TypeDefault);
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_TypeDefault);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_TypeDefault);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_TypeDefault__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_TypeDefault);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<TypeDefault>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_TypeDefault);    *arg[2]=(Int)refarg_1;
}
    return rval;}
TypeDefault_MGroup*		 TAI_TypeDefault_MGroup=NULL;
taGroup<SelectEdit>*		 TAI_taGroup_SelectEdit_=NULL;
  static cssEl* cssElCFun_taGroup_SelectEdit__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FirstEl(refarg_0), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NextEl(refarg_0), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<SelectEdit>*)ths)->MoveBefore((SelectEdit*)(void*)*arg[1], (SelectEdit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<SelectEdit>*)ths)->MoveAfter((SelectEdit*)(void*)*arg[1], (SelectEdit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->SafeEl((int)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FastEl((int)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->DefaultEl(), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->Edit_El((SelectEdit*)(void*)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->Leaf((int)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NewEl(), 1, &TA_SelectEdit);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NewEl((int)*arg[1]), 1, &TA_SelectEdit);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_SelectEdit);}
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindName((const char*)*arg[1]), 1, &TA_SelectEdit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_SelectEdit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_SelectEdit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_SelectEdit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->Pop(), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->Peek(), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->AddUniqNameOld((SelectEdit*)(void*)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->LinkUniqNameOld((SelectEdit*)(void*)*arg[1]), 1, &TA_SelectEdit);
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_SelectEdit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_SelectEdit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_SelectEdit__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_SelectEdit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<SelectEdit>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_SelectEdit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
SelectEdit_MGroup*		 TAI_SelectEdit_MGroup=NULL;
  static cssEl* cssElCFun_SelectEdit_MGroup_AutoEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit_MGroup*)ths)->AutoEdit();
    return rval;}
LayerWizEl*		 TAI_LayerWizEl=NULL;
Wizard*		 TAI_Wizard=NULL;
  static cssEl* cssElCFun_Wizard_ThreeLayerNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->ThreeLayerNet();
    return rval;}
  static cssEl* cssElCFun_Wizard_MultiLayerNet_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Wizard*)ths)->MultiLayerNet();}
    if(na == 1) {
      ((Wizard*)ths)->MultiLayerNet((int)*arg[1]);}
    if(na == 2) {
      ((Wizard*)ths)->MultiLayerNet((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Wizard*)ths)->MultiLayerNet((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_StdNetwork_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Wizard*)ths)->StdNetwork();}
    if(na == 1) {
      ((Wizard*)ths)->StdNetwork((Network*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_StdEnv_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Wizard*)ths)->StdEnv();}
    if(na == 1) {
      ((Wizard*)ths)->StdEnv((Environment*)(void*)*arg[1]);}
    if(na == 2) {
      ((Wizard*)ths)->StdEnv((Environment*)(void*)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_UpdateEnvFmNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->UpdateEnvFmNet((Environment*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Wizard_SequenceEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Wizard*)ths)->SequenceEvents((Environment*)(void*)*arg[1]);}
    if(na == 2) {
      ((Wizard*)ths)->SequenceEvents((Environment*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Wizard*)ths)->SequenceEvents((Environment*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_TimeSeqEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Wizard*)ths)->TimeSeqEvents((TimeEnvironment*)(void*)*arg[1]);}
    if(na == 2) {
      ((Wizard*)ths)->TimeSeqEvents((TimeEnvironment*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((Wizard*)ths)->TimeSeqEvents((TimeEnvironment*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((Wizard*)ths)->TimeSeqEvents((TimeEnvironment*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4]);}
    if(na == 5) {
      ((Wizard*)ths)->TimeSeqEvents((TimeEnvironment*)(void*)*arg[1], (int)*arg[2], (int)*arg[3], (float)*arg[4], (float)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_StdProcs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->StdProcs();
    return rval;}
  static cssEl* cssElCFun_Wizard_NetAutoSave_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Wizard*)ths)->NetAutoSave((SchedProcess*)(void*)*arg[1]);}
    if(na == 2) {
      ((Wizard*)ths)->NetAutoSave((SchedProcess*)(void*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_AutoTestProc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Wizard*)ths)->AutoTestProc((SchedProcess*)(void*)*arg[1], (Environment*)(void*)*arg[2]), 1, &TA_EpochProcess);
    return rval;}
  static cssEl* cssElCFun_Wizard_CrossValidation_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Wizard*)ths)->CrossValidation((SchedProcess*)(void*)*arg[1], (Environment*)(void*)*arg[2]), 1, &TA_EpochProcess);
    return rval;}
  static cssEl* cssElCFun_Wizard_ToSequenceEvents_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->ToSequenceEvents((SchedProcess*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Wizard_NoSequenceEvents_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->NoSequenceEvents((SchedProcess*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Wizard_RecordLayerValues_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->RecordLayerValues((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3]), 1, &TA_MonitorStat);}
    if(na == 4) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->RecordLayerValues((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3], (const char*)*arg[4]), 1, &TA_MonitorStat);}
    return rval;}
  static cssEl* cssElCFun_Wizard_SaveValuesInDataEnv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Wizard*)ths)->SaveValuesInDataEnv((MonitorStat*)(void*)*arg[1]), 1, &TA_CopyToEnvStat);
    return rval;}
  static cssEl* cssElCFun_Wizard_AutoAnalyzeDataEnv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Wizard*)ths)->AutoAnalyzeDataEnv((Environment*)(void*)*arg[1], (int)*arg[2], (DispDataEnvProc::DispType)(int)*arg[3], (SchedProcess*)(void*)*arg[4], (SchedProcess::ProcLoc)(int)*arg[5]), 1, &TA_DispDataEnvProc);
    return rval;}
  static cssEl* cssElCFun_Wizard_AnalyzeNetLayer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->AnalyzeNetLayer((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3]), 1, &TA_DispDataEnvProc);}
    if(na == 4) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->AnalyzeNetLayer((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3], (const char*)*arg[4]), 1, &TA_DispDataEnvProc);}
    if(na == 5) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->AnalyzeNetLayer((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3], (const char*)*arg[4], (DispDataEnvProc::DispType)(int)*arg[5]), 1, &TA_DispDataEnvProc);}
    if(na == 6) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->AnalyzeNetLayer((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3], (const char*)*arg[4], (DispDataEnvProc::DispType)(int)*arg[5], (SchedProcess*)(void*)*arg[6]), 1, &TA_DispDataEnvProc);}
    if(na == 7) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->AnalyzeNetLayer((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3], (const char*)*arg[4], (DispDataEnvProc::DispType)(int)*arg[5], (SchedProcess*)(void*)*arg[6], (SchedProcess::ProcLoc)(int)*arg[7]), 1, &TA_DispDataEnvProc);}
    return rval;}
  static cssEl* cssElCFun_Wizard_ActBasedReceptiveField_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 6) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->ActBasedReceptiveField((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3], (Layer*)(void*)*arg[4], (Layer*)(void*)*arg[5], (SchedProcess*)(void*)*arg[6]), 1, &TA_UnitActRFStat);}
    if(na == 7) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->ActBasedReceptiveField((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (Layer*)(void*)*arg[3], (Layer*)(void*)*arg[4], (Layer*)(void*)*arg[5], (SchedProcess*)(void*)*arg[6], (SchedProcess::ProcLoc)(int)*arg[7]), 1, &TA_UnitActRFStat);}
    return rval;}
  static cssEl* cssElCFun_Wizard_DisplayNetWeights_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->DisplayNetWeights((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (SchedProcess*)(void*)*arg[3]), 1, &TA_DispNetWeightsProc);}
    if(na == 4) {
      rval=new cssTA_Base((void*)((Wizard*)ths)->DisplayNetWeights((Layer*)(void*)*arg[1], (Layer*)(void*)*arg[2], (SchedProcess*)(void*)*arg[3], (SchedProcess::ProcLoc)(int)*arg[4]), 1, &TA_DispNetWeightsProc);}
    return rval;}
  static cssEl* cssElCFun_Wizard_StopOnActThresh_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((Wizard*)ths)->StopOnActThresh((SchedProcess*)(void*)*arg[1], (Layer*)(void*)*arg[2]);}
    if(na == 3) {
      ((Wizard*)ths)->StopOnActThresh((SchedProcess*)(void*)*arg[1], (Layer*)(void*)*arg[2], (float)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_AddCountersToTest_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->AddCountersToTest((SchedProcess*)(void*)*arg[1], (SchedProcess*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Wizard_GetStatsFromProc_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((Wizard*)ths)->GetStatsFromProc((SchedProcess*)(void*)*arg[1], (SchedProcess*)(void*)*arg[2], (SchedProcess::StatLoc)(int)*arg[3]);}
    if(na == 4) {
      ((Wizard*)ths)->GetStatsFromProc((SchedProcess*)(void*)*arg[1], (SchedProcess*)(void*)*arg[2], (SchedProcess::StatLoc)(int)*arg[3], (Aggregate::Operator)(int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_Wizard_AddTimeCounter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Wizard*)ths)->AddTimeCounter((SchedProcess*)(void*)*arg[1], (SchedProcess::StatLoc)(int)*arg[2], (SchedProcess*)(void*)*arg[3]), 1, &TA_TimeCounterStat);
    return rval;}
  static cssEl* cssElCFun_Wizard_StdLogs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->StdLogs((SchedProcess*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Wizard_LogProcess_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard*)ths)->LogProcess((SchedProcess*)(void*)*arg[1], (TypeDef*)*arg[2]);
    return rval;}
taGroup<Wizard>*		 TAI_taGroup_Wizard_=NULL;
  static cssEl* cssElCFun_taGroup_Wizard__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FirstEl(refarg_0), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NextEl(refarg_0), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Wizard>*)ths)->MoveBefore((Wizard*)(void*)*arg[1], (Wizard*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Wizard>*)ths)->MoveAfter((Wizard*)(void*)*arg[1], (Wizard*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FastEl((int)*arg[1]), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->DefaultEl(), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->Edit_El((Wizard*)(void*)*arg[1]), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->Leaf((int)*arg[1]), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NewEl(), 1, &TA_Wizard);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NewEl((int)*arg[1]), 1, &TA_Wizard);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Wizard);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Wizard);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Wizard);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Wizard);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Wizard);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->Pop(), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->Peek(), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->AddUniqNameOld((Wizard*)(void*)*arg[1]), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->LinkUniqNameOld((Wizard*)(void*)*arg[1]), 1, &TA_Wizard);
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Wizard);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Wizard);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Wizard__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Wizard);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Wizard>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Wizard);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Wizard_MGroup*		 TAI_Wizard_MGroup=NULL;
  static cssEl* cssElCFun_Wizard_MGroup_AutoEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Wizard_MGroup*)ths)->AutoEdit();
    return rval;}
taGroup<Project>*		 TAI_taGroup_Project_=NULL;
  static cssEl* cssElCFun_taGroup_Project__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FirstEl(refarg_0), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NextEl(refarg_0), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Project>*)ths)->MoveBefore((Project*)(void*)*arg[1], (Project*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<Project>*)ths)->MoveAfter((Project*)(void*)*arg[1], (Project*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FastEl((int)*arg[1]), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->DefaultEl(), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->Edit_El((Project*)(void*)*arg[1]), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->Leaf((int)*arg[1]), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NewEl(), 1, &TA_Project);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NewEl((int)*arg[1]), 1, &TA_Project);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Project);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Project);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Project);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Project);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Project);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->Pop(), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->Peek(), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->AddUniqNameOld((Project*)(void*)*arg[1]), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->LinkUniqNameOld((Project*)(void*)*arg[1]), 1, &TA_Project);
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_Project);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_Project);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_Project__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Project);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<Project>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Project);    *arg[2]=(Int)refarg_1;
}
    return rval;}
Project_MGroup*		 TAI_Project_MGroup=NULL;
  static cssEl* cssElCFun_Project_MGroup_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Project_MGroup*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Project_MGroup*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitNode*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_setAppearance_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitNode*)ths)->setAppearance((float)*arg[1], *(T3Color*)arg[2]->GetVoidPtrOfType(&TA_T3Color));
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_setPicked_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitNode*)ths)->setPicked((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3UnitGroupNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitGroupNode*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3UnitGroupNode_shapeCallback_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitGroupNode*)ths)->shapeCallback((void*)(void*)*arg[1], (SoAction*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3UnitGroupNode_drawGrid_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitGroupNode*)ths)->drawGrid((T3UnitGroupNode*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3UnitGroupNode_unitCaptionFont_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((T3UnitGroupNode*)ths)->unitCaptionFont(), 1, &TA_SoFont);}
    if(na == 1) {
      rval=new cssTA((void*)((T3UnitGroupNode*)ths)->unitCaptionFont((bool)*arg[1]), 1, &TA_SoFont);}
    return rval;}
  static cssEl* cssElCFun_T3UnitGroupNode_setGeom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitGroupNode*)ths)->setGeom((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3UnitGroupNode_shape_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3UnitGroupNode*)ths)->shape(), 1, &TA_SoCube);
    return rval;}
  static cssEl* cssElCFun_T3LayerNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3LayerNode*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3LayerNode_setGeom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3LayerNode*)ths)->setGeom((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3PrjnNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3PrjnNode*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3NetNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3NetNode*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3NetNode_shape_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3NetNode*)ths)->shape(), 1, &TA_SoCube);
    return rval;}
  static cssEl* cssElCFun_T3LogViewNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3LogViewNode*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3LogViewNode_canvas_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3LogViewNode*)ths)->canvas(), 1, &TA_SoSeparator);
    return rval;}
  static cssEl* cssElCFun_T3LogViewNode_frame_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3LogViewNode*)ths)->frame(), 1, &TA_SoFrame);
    return rval;}
  static cssEl* cssElCFun_T3LogViewNode_showFrame_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3LogViewNode*)ths)->showFrame());
    return rval;}
  static cssEl* cssElCFun_T3LogViewNode_setShowFrame_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3LogViewNode*)ths)->setShowFrame((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3LogViewNode_setGeom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3LogViewNode*)ths)->setGeom((int)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_T3GridLogViewBaseNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3GridLogViewBaseNode*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3GridLogViewBaseNode_header_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3GridLogViewBaseNode*)ths)->header(), 1, &TA_SoGroup);
    return rval;}
  static cssEl* cssElCFun_T3GridLogViewBaseNode_body_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3GridLogViewBaseNode*)ths)->body(), 1, &TA_SoGroup);
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Cylinder_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitNode_Cylinder*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Cylinder_shape_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3UnitNode_Cylinder*)ths)->shape(), 1, &TA_SoCylinder);
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Circle_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitNode_Circle*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Circle_shape_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3UnitNode_Circle*)ths)->shape(), 1, &TA_SoCylinder);
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Block_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitNode_Block*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Block_shape_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3UnitNode_Block*)ths)->shape(), 1, &TA_SoCube);
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Rect_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3UnitNode_Rect*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3UnitNode_Rect_shape_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3UnitNode_Rect*)ths)->shape(), 1, &TA_SoCube);
    return rval;}
  static cssEl* cssElCFun_T3GraphLogViewNode_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLogViewNode*)ths)->initClass();
    return rval;}
NetView*		 TAI_NetView=NULL;
  static cssEl* cssElCFun_NetView_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((NetView*)ths)->New((pdpDataViewer*)(void*)*arg[1], (Network*)(void*)*arg[2]), 1, &TA_NetView);
    return rval;}
  static cssEl* cssElCFun_NetView_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((NetView*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_NetView_net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((NetView*)ths)->net(), 1, &TA_Network);
    return rval;}
  static cssEl* cssElCFun_NetView_setUnitSrc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->setUnitSrc((UnitView*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_NetView_setUnitDisp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->setUnitDisp((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NetView_setUnitDispMd_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->setUnitDispMd((MemberDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NetView_FindUnitView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((NetView*)ths)->FindUnitView((Unit*)(void*)*arg[1]), 1, &TA_UnitView);
    return rval;}
  static cssEl* cssElCFun_NetView_GetMembs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->GetMembs();
    return rval;}
  static cssEl* cssElCFun_NetView_GetUnitColor_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    iColor& refarg_1=*(iColor*)arg[2]->GetVoidPtrOfType(&TA_iColor);
    ((NetView*)ths)->GetUnitColor((float)*arg[1], refarg_1);
    return rval;}
  static cssEl* cssElCFun_NetView_GetUnitDisplayVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TwoDCoord& refarg_1=*(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord);    float refarg_2=(float)*arg[3];    T3Color& refarg_3=*(T3Color*)arg[4]->GetVoidPtrOfType(&TA_T3Color);
    ((NetView*)ths)->GetUnitDisplayVals((UnitGroupView*)(void*)*arg[1], refarg_1, refarg_2, refarg_3);
    *arg[3]=(Real)refarg_2;
    return rval;}
  static cssEl* cssElCFun_NetView_InitScaleRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ScaleRange& refarg_0=*(ScaleRange*)arg[1]->GetVoidPtrOfType(&TA_ScaleRange);
    ((NetView*)ths)->InitScaleRange(refarg_0);
    return rval;}
  static cssEl* cssElCFun_NetView_InitDisplay_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((NetView*)ths)->InitDisplay();}
    if(na == 1) {
      ((NetView*)ths)->InitDisplay((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_NetView_InitDisplay_Layer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((NetView*)ths)->InitDisplay_Layer((LayerView*)(void*)*arg[1]);}
    if(na == 2) {
      ((NetView*)ths)->InitDisplay_Layer((LayerView*)(void*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_NetView_InitDisplay_UnitGroup_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((NetView*)ths)->InitDisplay_UnitGroup((UnitGroupView*)(void*)*arg[1]);}
    if(na == 2) {
      ((NetView*)ths)->InitDisplay_UnitGroup((UnitGroupView*)(void*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_NetView_InitPanel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->InitPanel();
    return rval;}
  static cssEl* cssElCFun_NetView_Layer_DataUAE_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->Layer_DataUAE((LayerView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NetView_NewLayer_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((NetView*)ths)->NewLayer();}
    if(na == 1) {
      ((NetView*)ths)->NewLayer((int)*arg[1]);}
    if(na == 2) {
      ((NetView*)ths)->NewLayer((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_NetView_SelectVar_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((NetView*)ths)->SelectVar((const char*)*arg[1]);}
    if(na == 2) {
      ((NetView*)ths)->SelectVar((const char*)*arg[1], (bool)*arg[2]);}
    if(na == 3) {
      ((NetView*)ths)->SelectVar((const char*)*arg[1], (bool)*arg[2], (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_NetView_SetScaleData_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((NetView*)ths)->SetScaleData((bool)*arg[1], (float)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((NetView*)ths)->SetScaleData((bool)*arg[1], (float)*arg[2], (float)*arg[3], (bool)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_NetView_SetScaleDefault_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->SetScaleDefault();
    return rval;}
  static cssEl* cssElCFun_NetView_UpdateDisplay_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((NetView*)ths)->UpdateDisplay();}
    if(na == 1) {
      ((NetView*)ths)->UpdateDisplay((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_NetView_UpdatePanel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((NetView*)ths)->UpdatePanel();
    return rval;}
nvDataView*		 TAI_nvDataView=NULL;
  static cssEl* cssElCFun_nvDataView_nv_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((nvDataView*)ths)->nv(), 1, &TA_NetView);
    return rval;}
LayerView*		 TAI_LayerView=NULL;
  static cssEl* cssElCFun_LayerView_layer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((LayerView*)ths)->layer(), 1, &TA_Layer);
    return rval;}
PrjnView*		 TAI_PrjnView=NULL;
  static cssEl* cssElCFun_PrjnView_prjn_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((PrjnView*)ths)->prjn(), 1, &TA_Projection);
    return rval;}
UnitGroupView*		 TAI_UnitGroupView=NULL;
  static cssEl* cssElCFun_UnitGroupView_ValToDispText_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_1=arg[2]->GetStr();
    ((UnitGroupView*)ths)->ValToDispText((float)*arg[1], refarg_1);
    *arg[2]=(String)refarg_1;
    return rval;}
  static cssEl* cssElCFun_UnitGroupView_ugrp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((UnitGroupView*)ths)->ugrp(), 1, &TA_Unit_Group);
    return rval;}
  static cssEl* cssElCFun_UnitGroupView_AllocUnitViewData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((UnitGroupView*)ths)->AllocUnitViewData();
    return rval;}
  static cssEl* cssElCFun_UnitGroupView_GetUnitDisplayVal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((UnitGroupView*)ths)->GetUnitDisplayVal(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_UnitGroupView_UpdateUnitViewBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((UnitGroupView*)ths)->UpdateUnitViewBase((MemberDef*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
UnitView*		 TAI_UnitView=NULL;
  static cssEl* cssElCFun_UnitView_unit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((UnitView*)ths)->unit(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_UnitView_ugrv_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((UnitView*)ths)->ugrv(), 1, &TA_UnitGroupView);
    return rval;}
  static cssEl* cssElCFun_UnitView_nv_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((UnitView*)ths)->nv(), 1, &TA_NetView);
    return rval;}
taiProcess*		 TAI_taiProcess=NULL;
taiProcessRunBox*		 TAI_taiProcessRunBox=NULL;
taiSpecMember*		 TAI_taiSpecMember=NULL;
  static cssEl* cssElCFun_GridLogViewBase_VScroll_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GridLogViewBase*)ths)->VScroll((bool)*arg[1]);
    return rval;}
TextLogView*		 TAI_TextLogView=NULL;
  static cssEl* cssElCFun_TextLogView_viewSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((TextLogView*)ths)->viewSpec(), 1, &TA_DT_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_TextLogView_RemoveLine_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TextLogView*)ths)->RemoveLine((int)*arg[1]);
    return rval;}
GraphLogViewLabel*		 TAI_GraphLogViewLabel=NULL;
EnviroView*		 TAI_EnviroView=NULL;
  static cssEl* cssElCFun_EnviroView_SetColorSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->SetColorSpec((ColorScaleSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_SetLayout_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EnviroView*)ths)->SetLayout();}
    if(na == 1) {
      ((EnviroView*)ths)->SetLayout((EnviroView::EventLayout)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_EnviroView_SetBorder_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EnviroView*)ths)->SetBorder();}
    if(na == 1) {
      ((EnviroView*)ths)->SetBorder((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_EnviroView_SetViewFontSize_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EnviroView*)ths)->SetViewFontSize();}
    if(na == 1) {
      ((EnviroView*)ths)->SetViewFontSize((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_EnviroView_SetValueFontSize_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EnviroView*)ths)->SetValueFontSize();}
    if(na == 1) {
      ((EnviroView*)ths)->SetValueFontSize((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_EnviroView_SelectEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EnviroView*)ths)->SelectEvents();}
    if(na == 1) {
      ((EnviroView*)ths)->SelectEvents((int)*arg[1]);}
    if(na == 2) {
      ((EnviroView*)ths)->SelectEvents((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_EnviroView_DeselectEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EnviroView*)ths)->DeselectEvents();}
    if(na == 1) {
      ((EnviroView*)ths)->DeselectEvents((int)*arg[1]);}
    if(na == 2) {
      ((EnviroView*)ths)->DeselectEvents((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_EnviroView_SelectEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->SelectEvent((Event*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_DeselectEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->DeselectEvent((Event*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_SelectEventGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->SelectEventGp((Event_MGroup*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_SelectGpEvents_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->SelectGpEvents((Event_MGroup*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_DeselectEventGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->DeselectEventGp((Event_MGroup*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_DeselectAllEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->DeselectAllEvents();
    return rval;}
  static cssEl* cssElCFun_EnviroView_SetEventSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->SetEventSpec((EventSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_ChangeEventType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->ChangeEventType((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_ChangeEventGpType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->ChangeEventGpType((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_DuplicateEvents_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->DuplicateEvents();
    return rval;}
  static cssEl* cssElCFun_EnviroView_DuplicateEventGps_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->DuplicateEventGps();
    return rval;}
  static cssEl* cssElCFun_EnviroView_SetPatLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->SetPatLabel((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_SetEventLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->SetEventLabel((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_EnviroView_InitDisplay_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((EnviroView*)ths)->InitDisplay();
    return rval;}
  static cssEl* cssElCFun_EnviroView_UpdateDisplay_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((EnviroView*)ths)->UpdateDisplay();}
    if(na == 1) {
      ((EnviroView*)ths)->UpdateDisplay((taBase*)(void*)*arg[1]);}
    return rval;}

// Type Data

static int BaseSpec::* TA_BaseSpec_MbrOff;
static MemberDef_data TA_BaseSpec_MemberDef[]={
  {&TA_unsigned_long_ary,NULL,"unique"," bits representing members unique","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_BaseSpec_MbrOff=(int BaseSpec::*)(&BaseSpec::unique))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"min_obj_type"," mimimal object type required for spec","HIDDEN NO_SAVE TYPE_taBase ","",
    *((ta_memb_ptr*)&(TA_BaseSpec_MbrOff=(int BaseSpec::*)(&BaseSpec::min_obj_type))),0,NULL,0},
  {&TA_BaseSpec_MGroup,NULL,"children"," sub-specs descending from this one and inheriting values","NO_INHERIT IN_GPMENU ","",
    *((ta_memb_ptr*)&(TA_BaseSpec_MbrOff=(int BaseSpec::*)(&BaseSpec::children))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BaseSpec_SetUnique_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  {&TA_bool,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_BaseSpec_GetUnique_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  NULL};
static MethodArgs_data TA_BaseSpec_UpdateMember_MethArgs[]={
  {&TA_BaseSpec_ptr,NULL,"from",""},
  {&TA_int,NULL,"memb_no",""},
  NULL};
static MethodArgs_data TA_BaseSpec_CheckType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_BaseSpec_CheckObjectType_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_BaseSpec_FindMakeChild_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  {&TA_const_char_ptr,NULL,"alt_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_BaseSpec_RemoveChild_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td"," ((void *)0)"},
  NULL};
static MethodDef_data TA_BaseSpec_MethodDef[]={
  {&TA_BaseSpec_ptr,NULL,"FindParent"," Find the parent spec of this one","MENU USE_RVAL MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_BaseSpec_FindParent_stub,NULL},
  {&TA_void,NULL,"SetUnique"," set inherit bit set inherit bit","","",
    1,2,-1,0,NULL,cssElCFun_BaseSpec_SetUnique_stub,TA_BaseSpec_SetUnique_MethArgs},
  {&TA_bool,NULL,"GetUnique"," check inherit bit check inherit bit","","",
    1,1,-1,0,NULL,cssElCFun_BaseSpec_GetUnique_stub,TA_BaseSpec_GetUnique_MethArgs},
  {&TA_void,NULL,"UpdateMember"," copy member from given parent","","",
    0,2,-1,0,NULL,cssElCFun_BaseSpec_UpdateMember_stub,TA_BaseSpec_UpdateMember_MethArgs},
  {&TA_void,NULL,"UpdateSpec"," update values from parent, and update children","","",
    0,0,-1,0,NULL,cssElCFun_BaseSpec_UpdateSpec_stub,NULL},
  {&TA_void,NULL,"UpdateChildren"," update any children","","",
    0,0,-1,0,NULL,cssElCFun_BaseSpec_UpdateChildren_stub,NULL},
  {&TA_void,NULL,"UpdateSubSpecs"," update any subspec objects (overload me)","","",
    0,0,-1,0,NULL,cssElCFun_BaseSpec_UpdateSubSpecs_stub,NULL},
  {&TA_BaseSpec_ptr,NULL,"NewChild"," create a new childspec","","",
    0,0,-1,0,NULL,cssElCFun_BaseSpec_NewChild_stub,NULL},
  {&TA_bool,NULL,"CheckType"," checks typedef type, issues error and returns false if not sufficient","","",
    0,1,-1,0,NULL,cssElCFun_BaseSpec_CheckType_stub,TA_BaseSpec_CheckType_MethArgs},
  {&TA_bool,NULL,"CheckObjectType"," checks object type, issues error and returns false if not sufficient","","",
    0,1,-1,0,NULL,cssElCFun_BaseSpec_CheckObjectType_stub,TA_BaseSpec_CheckObjectType_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindMakeChild"," find a child spec of given name, and if not, make it (if nm is not found and alt_nm != NULL, it is searched for)","","",
    0,4,1,0,NULL,cssElCFun_BaseSpec_FindMakeChild_stub,TA_BaseSpec_FindMakeChild_MethArgs},
  {&TA_bool,NULL,"RemoveChild"," remove a child based on name or type","","",
    0,2,1,0,NULL,cssElCFun_BaseSpec_RemoveChild_stub,TA_BaseSpec_RemoveChild_MethArgs},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_FindSpecType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_FindSpecInherits_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_TAPtr,NULL,"for_obj"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_FindSpecTypeNotMe_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_BaseSpec_ptr,NULL,"not_me",""},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_FindSpecInheritsNotMe_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_BaseSpec_ptr,NULL,"not_me",""},
  {&TA_TAPtr,NULL,"for_obj"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_FindSpecName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_FindMakeSpec_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  {&TA_const_char_ptr,NULL,"alt_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_RemoveSpec_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_BaseSpec_MGroup_NewChildSpec_mc_MethArgs[]={
  {&TA_taiMenuEl_ptr,NULL,"sel",""},
  NULL};
static MethodDef_data TA_BaseSpec_MGroup_MethodDef[]={
  {&TA_BaseSpec_ptr,NULL,"FindSpecType"," find a spec of eactly given type, searching in the children too","","",
    0,1,-1,0,NULL,cssElCFun_BaseSpec_MGroup_FindSpecType_stub,TA_BaseSpec_MGroup_FindSpecType_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindSpecInherits"," find a spec that inherits from given type, searching in the children too","","",
    0,2,1,0,NULL,cssElCFun_BaseSpec_MGroup_FindSpecInherits_stub,TA_BaseSpec_MGroup_FindSpecInherits_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindSpecTypeNotMe"," find a spec of eactly given type, searching in the children too, but skip not_me","","",
    0,2,-1,0,NULL,cssElCFun_BaseSpec_MGroup_FindSpecTypeNotMe_stub,TA_BaseSpec_MGroup_FindSpecTypeNotMe_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindSpecInheritsNotMe"," find a spec that inherits from given type, searching in the children too","","",
    0,3,2,0,NULL,cssElCFun_BaseSpec_MGroup_FindSpecInheritsNotMe_stub,TA_BaseSpec_MGroup_FindSpecInheritsNotMe_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindSpecName"," find a spec with given name, also searches in the children of each spec","","",
    0,1,-1,0,NULL,cssElCFun_BaseSpec_MGroup_FindSpecName_stub,TA_BaseSpec_MGroup_FindSpecName_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindMakeSpec"," find a given spec and if not found, make it (if nm is not found and alt_nm != NULL, it is searched for)","","",
    0,4,2,0,NULL,cssElCFun_BaseSpec_MGroup_FindMakeSpec_stub,TA_BaseSpec_MGroup_FindMakeSpec_MethArgs},
  {&TA_bool,NULL,"RemoveSpec"," find a given spec and remove it","","",
    0,2,-1,0,NULL,cssElCFun_BaseSpec_MGroup_RemoveSpec_stub,TA_BaseSpec_MGroup_RemoveSpec_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindParent"," Find the parent spec of this one","MENU USE_RVAL MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_BaseSpec_MGroup_FindParent_stub,NULL},
  {&TA_void,NULL,"NewChildSpec_mc"," callback for new child spec","","",
    0,1,-1,0,NULL,cssElCFun_BaseSpec_MGroup_NewChildSpec_mc_stub,TA_BaseSpec_MGroup_NewChildSpec_mc_MethArgs},
  NULL};
static EnumDef_data TA_Process_Type[]={
  {"C_CODE"," C code (builtin)","",0},
  {"SCRIPT"," Script (user-defined)","",1},
  NULL};
static int Process::* TA_Process_MbrOff;
static MemberDef_data TA_Process_MemberDef[]={
  {&TA_TypeDef_ptr,NULL,"min_network"," Minimum acceptable Network type","HIDDEN NO_SAVE TYPE_Network ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::min_network))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"min_layer"," Minimum acceptable Layer type","HIDDEN NO_SAVE TYPE_Layer ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::min_layer))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"min_unit"," Minimum acceptable Unit type","HIDDEN NO_SAVE TYPE_Unit ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::min_unit))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"min_con_group"," Min acceptable Con_Group type","HIDDEN NO_SAVE TYPE_Con_Group ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::min_con_group))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"min_con"," Min acceptable Con type","HIDDEN NO_SAVE TYPE_Connection ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::min_con))),0,NULL,0},
  {&TA_RndSeed,NULL,"rndm_seed"," random seed, for NewRun(), ReRun()","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::rndm_seed))),0,NULL,0},
  {&TA_TimeUsed,NULL,"time_used"," accumulated time used during the Run() of this process","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::time_used))),0,NULL,0},
  {&TA_LogData,NULL,"log_data"," log data object","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::log_data))),0,NULL,0},
  {NULL,"::Type","type"," process can be builtin c-code or a script","","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::type))),0,NULL,0},
  {&TA_Modulo,NULL,"mod"," flag=run this process or not, m=modulus, run process every m times, off=start runing at this offset","","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::mod))),0,NULL,0},
  {&TA_Project_ptr,NULL,"project"," project to act on","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::project))),0,NULL,0},
  {&TA_Network_ptr,NULL,"network"," network to act on","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::network))),0,NULL,0},
  {&TA_Environment_ptr,NULL,"environment"," environmnent to act in","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::environment))),0,NULL,0},
  {&TA_CtrlPanelData,NULL,"ctrl_panel"," data for the control panel display","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_Process_MbrOff=(int Process::*)(&Process::ctrl_panel))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Process_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_Process_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_Process_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_Process_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_Process_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_Process_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Process_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Process_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_Process_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_Process_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_Process_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_Process_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_Process_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_Process_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_Process_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_Process_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_Process_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_Process_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_Process_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_Process_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Process_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Process_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_Process_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_Process_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_Process_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_Process_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_Process_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Process_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Process_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_Process_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_Process_SetScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm",""},
  NULL};
static MethodArgs_data TA_Process_LoadScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Process_LoadScriptString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Process_ControlPanel_MethArgs[]={
  {&TA_float,NULL,"left"," 0.0f"},
  {&TA_float,NULL,"top"," 0.0f"},
  NULL};
static MethodArgs_data TA_Process_SetEnv_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  NULL};
static MethodArgs_data TA_Process_SetNet_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_Process_GetMySProcOfType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"proc_type",""},
  NULL};
static MethodDef_data TA_Process_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_Process_GetColText_stub,TA_Process_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_Process_ChildQueryEditActions_stub,TA_Process_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_Process_ChildEditAction_stub,TA_Process_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_Process_QueryEditActions_stub,TA_Process_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_Process_EditAction_stub,TA_Process_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_Process_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_Process_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_Process_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_Process_UnSafeCopy_stub,TA_Process_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_Process_CastCopyTo_stub,TA_Process_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_Process_GetOwner_stub,TA_Process_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_Process_GetPath_stub,TA_Process_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_Process_FindFromPath_stub,TA_Process_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_Process_New_stub,TA_Process_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_Process_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_Process_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_Process_StructUpdate_stub,TA_Process_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_Process_DataUpdate_stub,TA_Process_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_Process_AddDataView_stub,TA_Process_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_Process_RemoveDataView_stub,TA_Process_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_Process_InheritsFrom_stub,TA_Process_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_Process_GetEnumString_stub,TA_Process_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_Process_GetEnumVal_stub,TA_Process_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_Process_Load_stub,TA_Process_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_Process_Save_stub,TA_Process_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_Process_SaveAs_stub,TA_Process_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_Process_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_Process_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_Process_ReShowEdit_stub,TA_Process_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_Process_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Process_CopyFrom_stub,TA_Process_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Process_CopyTo_stub,TA_Process_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_Process_ChildUpdateAfterEdit_stub,TA_Process_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_Process_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Process_ChangeMyType_stub,TA_Process_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_Process_SelectForEdit_stub,TA_Process_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_Process_SelectFunForEdit_stub,TA_Process_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Process_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_Process_CallFun_stub,TA_Process_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_Process_SetAdapter_stub,TA_Process_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_Process_addr_data_link_stub,NULL},
  {&TA_bool,NULL,"HasScript"," returns true if we have some kind of script file or string to run","","",
    0,0,-1,0,NULL,cssElCFun_Process_HasScript_stub,NULL},
  {&TA_bool,NULL,"RunScript"," run the script (returns false for no scr)","","",
    0,0,-1,0,NULL,cssElCFun_Process_RunScript_stub,NULL},
  {&TA_void,NULL,"SetScript"," set the script file (e.g. from the script)","","",
    0,1,-1,0,NULL,cssElCFun_Process_SetScript_stub,TA_Process_SetScript_MethArgs},
  {&TA_void,NULL,"LoadScript"," compile script from script file into internal runnable format","MENU LABEL_Compile MENU_ON_Actions ARGC_0 ","",
    1,1,0,0,NULL,cssElCFun_Process_LoadScript_stub,TA_Process_LoadScript_MethArgs},
  {&TA_void,NULL,"LoadScriptString"," load and recompile the script string","","",
    0,1,0,0,NULL,cssElCFun_Process_LoadScriptString_stub,TA_Process_LoadScriptString_MethArgs},
  {&TA_void,NULL,"InteractScript"," change to this shell in script (terminal) window to interact, debug etc script","MENU LABEL_Interact ","",
    0,0,-1,0,NULL,cssElCFun_Process_InteractScript_stub,NULL},
  {&TA_void,NULL,"NewInit"," initialize the process using new random seed","BUTTON GHOST_OFF_running ","",
    0,0,-1,0,NULL,cssElCFun_Process_NewInit_stub,NULL},
  {&TA_void,NULL,"ReInit"," initialize the process using old random seed","BUTTON GHOST_OFF_running ","",
    0,0,-1,0,NULL,cssElCFun_Process_ReInit_stub,NULL},
  {&TA_void,NULL,"Init"," actually perform the initialization","","",
    0,0,-1,0,NULL,cssElCFun_Process_Init_stub,NULL},
  {&TA_void,NULL,"Run"," run the process: this can be called by any kind of code to run the process, but does not have support for interactive stopping","","",
    0,0,-1,0,NULL,cssElCFun_Process_Run_stub,NULL},
  {&TA_void,NULL,"Run_gui"," run the process in an interactive fashion: can be stopped and sets flags for only running one process","BUTTON LABEL_Run NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_Process_Run_gui_stub,NULL},
  {&TA_void,NULL,"NewSeed"," get a new random seed (i.e., rndm_seed.NewSeed(), but is also DMEM safe)","","",
    0,0,-1,0,NULL,cssElCFun_Process_NewSeed_stub,NULL},
  {&TA_void,NULL,"OldSeed"," get the old random seed (i.e., rndm_seed.OldSeed(), but is also DMEM safe)","","",
    0,0,-1,0,NULL,cssElCFun_Process_OldSeed_stub,NULL},
  {&TA_void,NULL,"ControlPanel"," brings up a small control dialog for running the process (in given location)","MENU ARGC_0 ","",
    0,2,0,0,NULL,cssElCFun_Process_ControlPanel_stub,TA_Process_ControlPanel_MethArgs},
  {&TA_void,NULL,"C_Code"," this is the actual stuff to do in C++","","",
    0,0,-1,0,NULL,cssElCFun_Process_C_Code_stub,NULL},
  {&TA_void,NULL,"CheckResetCache"," reset the cache of types already checked","","",
    0,0,-1,0,NULL,cssElCFun_Process_CheckResetCache_stub,NULL},
  {&TA_bool,NULL,"CheckNetwork"," validate all objects in network as being of the correct type","","",
    0,0,-1,0,NULL,cssElCFun_Process_CheckNetwork_stub,NULL},
  {&TA_void,NULL,"SetEnv"," set environment to given environment","","",
    0,1,-1,0,NULL,cssElCFun_Process_SetEnv_stub,TA_Process_SetEnv_MethArgs},
  {&TA_void,NULL,"SetNet"," set network to given network","","",
    0,1,-1,0,NULL,cssElCFun_Process_SetNet_stub,TA_Process_SetNet_MethArgs},
  {&TA_SchedProcess_ptr,NULL,"GetMySchedProc"," gets the schedule process that owns me","","",
    0,0,-1,0,NULL,cssElCFun_Process_GetMySchedProc_stub,NULL},
  {&TA_SchedProcess_ptr,NULL,"GetMySProcOfType"," get the schedule process of given type for my process hierarchy","","",
    0,1,-1,0,NULL,cssElCFun_Process_GetMySProcOfType_stub,TA_Process_GetMySProcOfType_MethArgs},
  {&TA_TrialProcess_ptr,NULL,"GetMyTrialProc"," gets the trial process for my process hierarchy","","",
    0,0,-1,0,NULL,cssElCFun_Process_GetMyTrialProc_stub,NULL},
  {&TA_EpochProcess_ptr,NULL,"GetMyEpochProc"," gets the epoch process for my process hierarchy","","",
    0,0,-1,0,NULL,cssElCFun_Process_GetMyEpochProc_stub,NULL},
  {&TA_Event_ptr,NULL,"GetMyCurEvent"," get the current event being processed","","",
    0,0,-1,0,NULL,cssElCFun_Process_GetMyCurEvent_stub,NULL},
  {&TA_Event_MGroup_ptr,NULL,"GetMyCurEventGp"," get the current event group being processed","","",
    0,0,-1,0,NULL,cssElCFun_Process_GetMyCurEventGp_stub,NULL},
  {&TA_Event_ptr,NULL,"GetMyNextEvent"," get the next event to be processed (e.g., in case you want to alter it)","","",
    0,0,-1,0,NULL,cssElCFun_Process_GetMyNextEvent_stub,NULL},
  NULL};
static int SigmoidSpec::* TA_SigmoidSpec_MbrOff;
static MemberDef_data TA_SigmoidSpec_MemberDef[]={
  {&TA_float,NULL,"off"," offset for .5 point","","",
    *((ta_memb_ptr*)&(TA_SigmoidSpec_MbrOff=(int SigmoidSpec::*)(&SigmoidSpec::off))),0,NULL,0},
  {&TA_float,NULL,"gain"," gain","","",
    *((ta_memb_ptr*)&(TA_SigmoidSpec_MbrOff=(int SigmoidSpec::*)(&SigmoidSpec::gain))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SigmoidSpec_Clip_MethArgs[]={
  {&TA_float,NULL,"y",""},
  NULL};
static MethodArgs_data TA_SigmoidSpec_ClipNet_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodArgs_data TA_SigmoidSpec_Eval_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodArgs_data TA_SigmoidSpec_Deriv_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodArgs_data TA_SigmoidSpec_Inverse_MethArgs[]={
  {&TA_float,NULL,"y",""},
  NULL};
static MethodDef_data TA_SigmoidSpec_MethodDef[]={
  {&TA_float,NULL,"Clip","","","",
    0,1,-1,1,(ta_void_fun)(SigmoidSpec::Clip),cssElCFun_SigmoidSpec_Clip_stub,TA_SigmoidSpec_Clip_MethArgs},
  {&TA_float,NULL,"ClipNet","","","",
    0,1,-1,1,(ta_void_fun)(SigmoidSpec::ClipNet),cssElCFun_SigmoidSpec_ClipNet_stub,TA_SigmoidSpec_ClipNet_MethArgs},
  {&TA_float,NULL,"Eval","","","",
    0,1,-1,0,NULL,cssElCFun_SigmoidSpec_Eval_stub,TA_SigmoidSpec_Eval_MethArgs},
  {&TA_float,NULL,"Deriv","","","",
    0,1,-1,0,NULL,cssElCFun_SigmoidSpec_Deriv_stub,TA_SigmoidSpec_Deriv_MethArgs},
  {&TA_float,NULL,"Inverse","","","",
    0,1,-1,0,NULL,cssElCFun_SigmoidSpec_Inverse_stub,TA_SigmoidSpec_Inverse_MethArgs},
  NULL};
static int ConSpec::* TA_ConSpec_MbrOff;
static MemberDef_data TA_ConSpec_MemberDef[]={
  {&TA_TypeDef_ptr,NULL,"min_con_type"," mimimal con type required for spec (obj is con group)","HIDDEN NO_SAVE TYPE_Connection ","",
    *((ta_memb_ptr*)&(TA_ConSpec_MbrOff=(int ConSpec::*)(&ConSpec::min_con_type))),0,NULL,0},
  {&TA_Random,NULL,"rnd"," Weight randomization specification","","",
    *((ta_memb_ptr*)&(TA_ConSpec_MbrOff=(int ConSpec::*)(&ConSpec::rnd))),0,NULL,0},
  {&TA_WeightLimits,NULL,"wt_limits"," limits on weight sign, symmetry","","",
    *((ta_memb_ptr*)&(TA_ConSpec_MbrOff=(int ConSpec::*)(&ConSpec::wt_limits))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ConSpec_C_ApplyLimits_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ConSpec_ApplyLimits_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_ApplySymmetry_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_C_InitWtState_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_ConSpec_InitWtState_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_C_InitWtDelta_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"na",""},
  {&TA_Connection_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ConSpec_InitWtDelta_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_C_Compute_Net_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_ConSpec_Compute_Net_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_C_Send_Net_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_ConSpec_Send_Net_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_ConSpec_C_Compute_Dist_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_ConSpec_Compute_Dist_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_Connection_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_C_UpdateWeights_MethArgs[]={
  {&TA_Connection_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ConSpec_UpdateWeights_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ConSpec_CheckConfig_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"na",""},
  {&TA_Layer_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  {&TA_TrialProcess_ptr,NULL,"na",""},
  {&TA_bool,NULL,"na","false"},
  NULL};
static MethodDef_data TA_ConSpec_MethodDef[]={
  {&TA_void,NULL,"C_ApplyLimits","","","",
    0,3,-1,0,NULL,cssElCFun_ConSpec_C_ApplyLimits_stub,TA_ConSpec_C_ApplyLimits_MethArgs},
  {&TA_void,NULL,"ApplyLimits"," apply weight limits (sign, magnitude)","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_ApplyLimits_stub,TA_ConSpec_ApplyLimits_MethArgs},
  {&TA_void,NULL,"ApplySymmetry"," apply weight symmetrizing between reciprocal units","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_ApplySymmetry_stub,TA_ConSpec_ApplySymmetry_MethArgs},
  {&TA_void,NULL,"C_InitWtState","","","",
    0,4,-1,0,NULL,cssElCFun_ConSpec_C_InitWtState_stub,TA_ConSpec_C_InitWtState_MethArgs},
  {&TA_void,NULL,"InitWtState"," initialize state variables (ie. at beginning of training)","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_InitWtState_stub,TA_ConSpec_InitWtState_MethArgs},
  {&TA_void,NULL,"C_InitWtDelta","","","",
    0,4,-1,0,NULL,cssElCFun_ConSpec_C_InitWtDelta_stub,TA_ConSpec_C_InitWtDelta_MethArgs},
  {&TA_void,NULL,"InitWtDelta"," initialize variables that change every delta-weight computation","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_InitWtDelta_stub,TA_ConSpec_InitWtDelta_MethArgs},
  {&TA_float,NULL,"C_Compute_Net","","","",
    0,3,-1,0,NULL,cssElCFun_ConSpec_C_Compute_Net_stub,TA_ConSpec_C_Compute_Net_MethArgs},
  {&TA_float,NULL,"Compute_Net"," compute net input for weights in this con group","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_Compute_Net_stub,TA_ConSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"C_Send_Net","","","",
    0,3,-1,0,NULL,cssElCFun_ConSpec_C_Send_Net_stub,TA_ConSpec_C_Send_Net_MethArgs},
  {&TA_void,NULL,"Send_Net"," sender-based net input for con group (send net input to receivers)","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_Send_Net_stub,TA_ConSpec_Send_Net_MethArgs},
  {&TA_float,NULL,"C_Compute_Dist","","","",
    0,3,-1,0,NULL,cssElCFun_ConSpec_C_Compute_Dist_stub,TA_ConSpec_C_Compute_Dist_MethArgs},
  {&TA_float,NULL,"Compute_Dist"," compute net distance for con group (ie. euclidean distance)","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_Compute_Dist_stub,TA_ConSpec_Compute_Dist_MethArgs},
  {&TA_void,NULL,"C_Compute_dWt","","","",
    0,3,-1,0,NULL,cssElCFun_ConSpec_C_Compute_dWt_stub,TA_ConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_Compute_dWt_stub,TA_ConSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"C_UpdateWeights","","","",
    0,3,-1,0,NULL,cssElCFun_ConSpec_C_UpdateWeights_stub,TA_ConSpec_C_UpdateWeights_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights (ie. add delta-wt to wt, zero delta-wt)","","",
    0,2,-1,0,NULL,cssElCFun_ConSpec_UpdateWeights_stub,TA_ConSpec_UpdateWeights_MethArgs},
  {&TA_bool,NULL,"CheckConfig"," check for for misc configuration settings required by different algorithms, including settings on the processes","","",
    0,5,4,0,NULL,cssElCFun_ConSpec_CheckConfig_stub,TA_ConSpec_CheckConfig_MethArgs},
  {&TA_int,NULL,"UseCount"," return number of times this spec is used","","",
    0,0,-1,0,NULL,cssElCFun_ConSpec_UseCount_stub,NULL},
  {&TA_void,NULL,"InitWeights"," initializes weights for all projections with this conspec","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ConSpec_InitWeights_stub,NULL},
  {&TA_bool,NULL,"DMem_AlwaysLocal"," overload this function to prevent this projection from being pruned for non-local units under dmem processing (for 'special' connection types)","","",
    0,0,-1,0,NULL,cssElCFun_ConSpec_DMem_AlwaysLocal_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"DMem_EpochShareDwtVar"," name of weight-change variable to share across dmem processors in BATCH mode learning","","",
    0,0,-1,0,NULL,cssElCFun_ConSpec_DMem_EpochShareDwtVar_stub,NULL},
  NULL};
static int Connection::* TA_Connection_MbrOff;
static MemberDef_data TA_Connection_MemberDef[]={
  {&TA_float,NULL,"wt"," weight of connection","","",
    *((ta_memb_ptr*)&(TA_Connection_MbrOff=(int Connection::*)(&Connection::wt))),0,NULL,0},
  NULL};
static EnumDef_data TA_Con_Group_WtSaveFormat[]={
  {"TEXT"," weights are saved as ascii text representation of digits (completely portable)","",0},
  {"TEXT_IDX"," text format plus unit indexes (useful for partially-connected networks where connections might change)","",1},
  {"BINARY"," weights are written directly to the file in binary format (no loss in accuracy and more space efficient, but possibly non-portable)","",2},
  {"BINARY_IDX"," binary format plus unit indexes (useful for partially-connected networks where connections might change)","",3},
  NULL};
static int Con_Group::* TA_Con_Group_MbrOff;
static MemberDef_data TA_Con_Group_MemberDef[]={
  {&TA_Unit_List,NULL,"units"," pointers to units that correspond (by index) to cons","NO_FIND NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Con_Group_MbrOff=(int Con_Group::*)(&Con_Group::units))),0,NULL,0},
  {&TA_ConSpec_SPtr,NULL,"spec"," specification for connections","","",
    *((ta_memb_ptr*)&(TA_Con_Group_MbrOff=(int Con_Group::*)(&Con_Group::spec))),0,NULL,0},
  {&TA_Projection_ptr,NULL,"prjn"," pointer the the projection which created this Group","","",
    *((ta_memb_ptr*)&(TA_Con_Group_MbrOff=(int Con_Group::*)(&Con_Group::prjn))),0,NULL,0},
  {&TA_int,NULL,"other_idx"," index of other side of con group (for recv_gp = send_idx, send_gp = recv_idx)","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Con_Group_MbrOff=(int Con_Group::*)(&Con_Group::other_idx))),0,NULL,0},
  {&TA_bool,NULL,"own_cons"," true if this group 'owns' the connections (must be receiver!)","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Con_Group_MbrOff=(int Con_Group::*)(&Con_Group::own_cons))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Con_Group_Remove_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_Con_Group_Cn_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_Con_Group_Un_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_Con_Group_Copy_Weights_MethArgs[]={
  {&TA_const_Con_Group_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_Con_Group_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {NULL,"::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Con_Group_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {NULL,"::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Con_Group_NewCon_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"typ",""},
  {&TA_Unit_ptr,NULL,"un",""},
  NULL};
static MethodArgs_data TA_Con_Group_LinkCon_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"un",""},
  NULL};
static MethodArgs_data TA_Con_Group_RemoveCon_MethArgs[]={
  {&TA_Unit_ptr,NULL,"un",""},
  NULL};
static MethodArgs_data TA_Con_Group_AllocCon_MethArgs[]={
  {&TA_int,NULL,"no",""},
  {&TA_TypeDef_ptr,NULL,"typ",""},
  NULL};
static MethodArgs_data TA_Con_Group_FindConFrom_MethArgs[]={
  {&TA_Unit_ptr,NULL,"un",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_Con_Group_NewPrjn_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_bool,NULL,"own","false"},
  NULL};
static MethodArgs_data TA_Con_Group_FindPrjn_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_Con_Group_FindFrom_MethArgs[]={
  {&TA_Layer_ptr,NULL,"from",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_Con_Group_FindTypeFrom_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"prjn_typ",""},
  {&TA_Layer_ptr,NULL,"from",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_Con_Group_FindLayer_MethArgs[]={
  {&TA_Layer_ptr,NULL,"lay",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_Con_Group_RemovePrjn_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_Con_Group_RemoveFrom_MethArgs[]={
  {&TA_Layer_ptr,NULL,"from",""},
  NULL};
static MethodArgs_data TA_Con_Group_FindRecipRecvCon_MethArgs[]={
  {&TA_Unit_ptr,NULL,"su",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Con_Group_FindRecipSendCon_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_Con_Group_TransformWeights_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_Con_Group_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  NULL};
static MethodArgs_data TA_Con_Group_PruneCons_MethArgs[]={
  {&TA_Unit_ptr,NULL,"un",""},
  {&TA_const_SimpleMathSpec_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  NULL};
static MethodArgs_data TA_Con_Group_LesionCons_MethArgs[]={
  {&TA_Unit_ptr,NULL,"un",""},
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Con_Group_ConValuesToArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ary",""},
  {&TA_const_char_ptr,NULL,"variable",""},
  NULL};
static MethodArgs_data TA_Con_Group_ConValuesFromArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ary",""},
  {&TA_const_char_ptr,NULL,"variable",""},
  NULL};
static MethodArgs_data TA_Con_Group_ReplaceConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"old_sp",""},
  {&TA_ConSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Con_Group_InitWtState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Con_Group_C_InitWtState_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_Con_Group_InitWtDelta_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Con_Group_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Con_Group_Send_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_Con_Group_Compute_Dist_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Con_Group_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Con_Group_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Con_Group_CheckConfig_MethArgs[]={
  {&TA_Layer_ptr,NULL,"lay",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_TrialProcess_ptr,NULL,"tp",""},
  {&TA_bool,NULL,"quiet","false"},
  NULL};
static MethodDef_data TA_Con_Group_MethodDef[]={
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove object at given index on list remove item","","",
    13,1,-1,0,NULL,cssElCFun_Con_Group_Remove_stub,TA_Con_Group_Remove_MethArgs},
  {&TA_Connection_ptr,NULL,"Cn"," gets the connection at the given index","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_Cn_stub,TA_Con_Group_Cn_MethArgs},
  {&TA_Unit_ptr,NULL,"Un"," gets the unit at the given index","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_Un_stub,TA_Con_Group_Un_MethArgs},
  {&TA_void,NULL,"Copy_Weights"," copies weights from other con_group","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_Copy_Weights_stub,TA_Con_Group_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights (optionally in binary fmt)","MENU MENU_ON_Object MENU_SEP_BEFORE EXT_strm_wts COMPRESS ","",
    0,3,2,0,NULL,cssElCFun_Con_Group_WriteWeights_stub,TA_Con_Group_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights (optionally in binary format)","MENU EXT_strm_wts COMPRESS ","",
    0,3,2,0,NULL,cssElCFun_Con_Group_ReadWeights_stub,TA_Con_Group_ReadWeights_MethArgs},
  {&TA_Connection_ptr,NULL,"NewCon"," create a connection of given type to given unit","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_NewCon_stub,TA_Con_Group_NewCon_MethArgs},
  {&TA_void,NULL,"LinkCon"," make a link connection from given connection, unit (for sending groups)","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_LinkCon_stub,TA_Con_Group_LinkCon_MethArgs},
  {&TA_bool,NULL,"RemoveCon"," remove connection from given unit","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_RemoveCon_stub,TA_Con_Group_RemoveCon_MethArgs},
  {&TA_void,NULL,"AllocCon"," allocate given number of new connections","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_AllocCon_stub,TA_Con_Group_AllocCon_MethArgs},
  {&TA_Connection_ptr,NULL,"FindConFrom"," find connection from given unit","MENU MENU_ON_Actions USE_RVAL ARGC_1 ","",
    0,2,1,0,NULL,cssElCFun_Con_Group_FindConFrom_stub,TA_Con_Group_FindConFrom_MethArgs},
  {&TA_Con_Group_ptr,NULL,"NewPrjn"," create a new sub_group from given projection, with given ownership (own_cons)","","",
    0,2,1,0,NULL,cssElCFun_Con_Group_NewPrjn_stub,TA_Con_Group_NewPrjn_MethArgs},
  {&TA_Con_Group_ptr,NULL,"FindPrjn"," find sub group associated with given projection","","",
    0,2,1,0,NULL,cssElCFun_Con_Group_FindPrjn_stub,TA_Con_Group_FindPrjn_MethArgs},
  {&TA_Con_Group_ptr,NULL,"FindFrom"," find sub group that receives from given layer","MENU USE_RVAL ARGC_1 ","",
    0,2,1,0,NULL,cssElCFun_Con_Group_FindFrom_stub,TA_Con_Group_FindFrom_MethArgs},
  {&TA_Con_Group_ptr,NULL,"FindTypeFrom"," find sub group that recvs prjn of given type from layer","MENU USE_RVAL ARGC_2 ","",
    0,3,2,0,NULL,cssElCFun_Con_Group_FindTypeFrom_stub,TA_Con_Group_FindTypeFrom_MethArgs},
  {&TA_Con_Group_ptr,NULL,"FindLayer"," find sub group where projection is in the given layer","","",
    0,2,1,0,NULL,cssElCFun_Con_Group_FindLayer_stub,TA_Con_Group_FindLayer_MethArgs},
  {&TA_bool,NULL,"RemovePrjn"," remove sub group associated with given projection","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_RemovePrjn_stub,TA_Con_Group_RemovePrjn_MethArgs},
  {&TA_bool,NULL,"RemoveFrom"," remove sub group that receives from given layer","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_RemoveFrom_stub,TA_Con_Group_RemoveFrom_MethArgs},
  {&TA_Connection_ptr,NULL,"FindRecipRecvCon"," find the reciprocal for sending unit su to this receiving unit ru","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_FindRecipRecvCon_stub,TA_Con_Group_FindRecipRecvCon_MethArgs},
  {&TA_Connection_ptr,NULL,"FindRecipSendCon"," find the reciprocal for receiving unit ru from this sending unit su","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_FindRecipSendCon_stub,TA_Con_Group_FindRecipSendCon_MethArgs},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_TransformWeights_stub,TA_Con_Group_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_AddNoiseToWeights_stub,TA_Con_Group_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,4,-1,0,NULL,cssElCFun_Con_Group_PruneCons_stub,TA_Con_Group_PruneCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove weights with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,3,2,0,NULL,cssElCFun_Con_Group_LesionCons_stub,TA_Con_Group_LesionCons_MethArgs},
  {&TA_bool,NULL,"CheckTypes"," check that the object and spec types are all ok","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_Con_Group_CheckTypes_stub,NULL},
  {&TA_bool,NULL,"CheckOtherIdx_Recv"," check validity of other_idx for recv con groups","","",
    0,0,-1,0,NULL,cssElCFun_Con_Group_CheckOtherIdx_Recv_stub,NULL},
  {&TA_bool,NULL,"CheckOtherIdx_Send"," check validity of other_idx for send con groups","","",
    0,0,-1,0,NULL,cssElCFun_Con_Group_CheckOtherIdx_Send_stub,NULL},
  {&TA_void,NULL,"ConValuesToArray"," adds values of variable from the connections into the given array","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_ConValuesToArray_stub,TA_Con_Group_ConValuesToArray_MethArgs},
  {&TA_void,NULL,"ConValuesFromArray"," sets values of variable in the connections from the given array","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_ConValuesFromArray_stub,TA_Con_Group_ConValuesFromArray_MethArgs},
  {&TA_int,NULL,"ReplaceConSpec"," switch any connections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Con_Group_ReplaceConSpec_stub,TA_Con_Group_ReplaceConSpec_MethArgs},
  {&TA_void,NULL,"InitWtState","","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_InitWtState_stub,TA_Con_Group_InitWtState_MethArgs},
  {&TA_void,NULL,"C_InitWtState","","","",
    0,3,-1,0,NULL,cssElCFun_Con_Group_C_InitWtState_stub,TA_Con_Group_C_InitWtState_MethArgs},
  {&TA_void,NULL,"InitWtDelta","","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_InitWtDelta_stub,TA_Con_Group_InitWtDelta_MethArgs},
  {&TA_float,NULL,"Compute_Net","","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_Compute_Net_stub,TA_Con_Group_Compute_Net_MethArgs},
  {&TA_void,NULL,"Send_Net","","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_Send_Net_stub,TA_Con_Group_Send_Net_MethArgs},
  {&TA_float,NULL,"Compute_Dist","","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_Compute_Dist_stub,TA_Con_Group_Compute_Dist_MethArgs},
  {&TA_void,NULL,"UpdateWeights","","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_UpdateWeights_stub,TA_Con_Group_UpdateWeights_MethArgs},
  {&TA_void,NULL,"Compute_dWt","","","",
    0,1,-1,0,NULL,cssElCFun_Con_Group_Compute_dWt_stub,TA_Con_Group_Compute_dWt_MethArgs},
  {&TA_bool,NULL,"CheckConfig","","","",
    0,4,3,0,NULL,cssElCFun_Con_Group_CheckConfig_stub,TA_Con_Group_CheckConfig_MethArgs},
  NULL};
static int UnitSpec::* TA_UnitSpec_MbrOff;
static MemberDef_data TA_UnitSpec_MemberDef[]={
  {&TA_MinMaxRange,NULL,"act_range"," range of activation for units","","",
    *((ta_memb_ptr*)&(TA_UnitSpec_MbrOff=(int UnitSpec::*)(&UnitSpec::act_range))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"bias_con_type"," type of bias connection to make","TYPE_Connection NULL_OK ","",
    *((ta_memb_ptr*)&(TA_UnitSpec_MbrOff=(int UnitSpec::*)(&UnitSpec::bias_con_type))),0,NULL,0},
  {&TA_ConSpec_SPtr,NULL,"bias_spec"," con spec that controls the bias connection on the unit","","",
    *((ta_memb_ptr*)&(TA_UnitSpec_MbrOff=(int UnitSpec::*)(&UnitSpec::bias_spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_UnitSpec_InitState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_ModifyState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_UnitSpec_InitWtDelta_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_InitWtState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_Send_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_Send_NetToLay_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  {&TA_Layer_ptr,NULL,"tolay",""},
  NULL};
static MethodArgs_data TA_UnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_UnitSpec_CheckConfig_MethArgs[]={
  {&TA_Unit_ptr,NULL,"un",""},
  {&TA_Layer_ptr,NULL,"lay",""},
  {&TA_TrialProcess_ptr,NULL,"tp",""},
  {&TA_bool,NULL,"quiet","false"},
  NULL};
static MethodDef_data TA_UnitSpec_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_InitState_stub,TA_UnitSpec_InitState_MethArgs},
  {&TA_void,NULL,"ModifyState"," modify unit state variables","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_ModifyState_stub,TA_UnitSpec_ModifyState_MethArgs},
  {&TA_void,NULL,"InitWtDelta"," init weight delta variables","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_InitWtDelta_stub,TA_UnitSpec_InitWtDelta_MethArgs},
  {&TA_void,NULL,"InitWtState"," init weight state variables","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_InitWtState_stub,TA_UnitSpec_InitWtState_MethArgs},
  {&TA_void,NULL,"Compute_Net","","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_Compute_Net_stub,TA_UnitSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Send_Net"," send net input to all units I send to","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_Send_Net_stub,TA_UnitSpec_Send_Net_MethArgs},
  {&TA_void,NULL,"Send_NetToLay"," send net input only to units in given layer (not used by default)","","",
    0,2,-1,0,NULL,cssElCFun_UnitSpec_Send_NetToLay_stub,TA_UnitSpec_Send_NetToLay_MethArgs},
  {&TA_void,NULL,"Compute_Act","","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_Compute_Act_stub,TA_UnitSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_Compute_dWt_stub,TA_UnitSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights from deltas","","",
    0,1,-1,0,NULL,cssElCFun_UnitSpec_UpdateWeights_stub,TA_UnitSpec_UpdateWeights_MethArgs},
  {&TA_void,NULL,"BuildBiasCons"," build the bias connections according to specified type","MENU MENU_ON_Actions MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_UnitSpec_BuildBiasCons_stub,NULL},
  {&TA_bool,NULL,"CheckConfig"," check for for misc configuration settings required by different algorithms, including settings on the processes","","",
    0,4,3,0,NULL,cssElCFun_UnitSpec_CheckConfig_stub,TA_UnitSpec_CheckConfig_MethArgs},
  {&TA_int,NULL,"UseCount"," return number of times this spec is used","","",
    0,0,-1,0,NULL,cssElCFun_UnitSpec_UseCount_stub,NULL},
  NULL};
static EnumDef_data TA_Unit_ExtType[]={
  {"NO_EXTERNAL"," no input","",0},
  {"TARG"," target input (value is in targ)","",1},
  {"EXT"," external input (value is in ext)","",2},
  {"TARG_EXT"," target and external input","",3},
  {"COMP"," comparison value (for error) (value is in targ)","",4},
  {"COMP_TARG"," comparision and target","",5},
  {"COMP_EXT"," comparison and external input","",6},
  {"COMP_TARG_EXT"," comparison, target, and external input","",7},
  NULL};
static int Unit::* TA_Unit_MbrOff;
static MemberDef_data TA_Unit_MemberDef[]={
  {&TA_UnitSpec_SPtr,NULL,"spec"," unit specification","","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::spec))),0,NULL,0},
  {&TA_TDCoord,NULL,"pos"," position in space relative to owning group, layer","","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::pos))),0,NULL,0},
  {NULL,"::ExtType","ext_flag"," tells what kind of external input unit received","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::ext_flag))),0,NULL,0},
  {&TA_float,NULL,"targ"," target pattern","","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::targ))),0,NULL,0},
  {&TA_float,NULL,"ext"," external input","","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::ext))),0,NULL,0},
  {&TA_float,NULL,"act"," activation","DMEM_SHARE_SET_2 ","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::act))),0,NULL,0},
  {&TA_float,NULL,"net"," net input","DMEM_SHARE_SET_1 ","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::net))),0,NULL,0},
  {&TA_Con_Group,NULL,"recv"," Receiving Connection Groups","","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::recv))),0,NULL,0},
  {&TA_Con_Group,NULL,"send"," Sending Connection Groups","","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::send))),0,NULL,0},
  {&TA_Connection_ptr,NULL,"bias"," bias weight (type set in unit spec)","OWN_POINTER ","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::bias))),0,NULL,0},
  {&TA_int,NULL,"n_recv_cons"," total number of receiving connections","DMEM_SHARE_SET_0 ","",
    *((ta_memb_ptr*)&(TA_Unit_MbrOff=(int Unit::*)(&Unit::n_recv_cons))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Unit_Copy_Weights_MethArgs[]={
  {&TA_const_Unit_ptr,NULL,"src",""},
  {&TA_Projection_ptr,NULL,"prjn"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Unit_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_Projection_ptr,NULL,"prjn"," ((void *)0)"},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Unit_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_Projection_ptr,NULL,"prjn"," ((void *)0)"},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Unit_SetExtFlag_MethArgs[]={
  {NULL,"::ExtType","flg",""},
  NULL};
static MethodArgs_data TA_Unit_UnSetExtFlag_MethArgs[]={
  {NULL,"::ExtType","flg",""},
  NULL};
static MethodArgs_data TA_Unit_Send_NetToLay_MethArgs[]={
  {&TA_Layer_ptr,NULL,"tolay",""},
  NULL};
static MethodArgs_data TA_Unit_CheckConfig_MethArgs[]={
  {&TA_Layer_ptr,NULL,"lay",""},
  {&TA_TrialProcess_ptr,NULL,"tp",""},
  {&TA_bool,NULL,"quiet","false"},
  NULL};
static MethodArgs_data TA_Unit_ConnectAlloc_MethArgs[]={
  {&TA_int,NULL,"no",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Con_Group_ptr_ref,NULL,"cgp"," rcg_rval"},
  NULL};
static MethodArgs_data TA_Unit_ConnectFrom_MethArgs[]={
  {&TA_Unit_ptr,NULL,"su",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Con_Group_ptr_ref,NULL,"recv_gp"," rcg_rval"},
  {&TA_Con_Group_ptr_ref,NULL,"send_gp"," scg_rval"},
  NULL};
static MethodArgs_data TA_Unit_ConnectFromLink_MethArgs[]={
  {&TA_Unit_ptr,NULL,"su",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Connection_ptr,NULL,"src_con",""},
  {&TA_Con_Group_ptr_ref,NULL,"recv_gp"," rcg_rval"},
  {&TA_Con_Group_ptr_ref,NULL,"send_gp"," scg_rval"},
  NULL};
static MethodArgs_data TA_Unit_ConnectFromCk_MethArgs[]={
  {&TA_Unit_ptr,NULL,"su",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Con_Group_ptr_ref,NULL,"recv_gp"," rcg_rval"},
  {&TA_Con_Group_ptr_ref,NULL,"send_gp"," scg_rval"},
  NULL};
static MethodArgs_data TA_Unit_ConnectFromLinkCk_MethArgs[]={
  {&TA_Unit_ptr,NULL,"su",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Connection_ptr,NULL,"src_con",""},
  {&TA_Con_Group_ptr_ref,NULL,"recv_gp"," rcg_rval"},
  {&TA_Con_Group_ptr_ref,NULL,"send_gp"," scg_rval"},
  NULL};
static MethodArgs_data TA_Unit_DisConnectFrom_MethArgs[]={
  {&TA_Unit_ptr,NULL,"su",""},
  {&TA_Projection_ptr,NULL,"prjn","((void *)0)"},
  NULL};
static MethodArgs_data TA_Unit_TransformWeights_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  {&TA_Projection_ptr,NULL,"prjn"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Unit_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  {&TA_Projection_ptr,NULL,"prjn"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Unit_PruneCons_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  {&TA_Projection_ptr,NULL,"prjn"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Unit_LesionCons_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  {&TA_Projection_ptr,NULL,"prjn"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Unit_SetConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"con_spec",""},
  NULL};
static MethodArgs_data TA_Unit_ReplaceUnitSpec_MethArgs[]={
  {&TA_UnitSpec_ptr,NULL,"old_sp",""},
  {&TA_UnitSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Unit_ReplaceConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"old_sp",""},
  {&TA_ConSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodDef_data TA_Unit_MethodDef[]={
  {&TA_Unit_Group_ptr,NULL,"ugrp","","","",
    0,0,-1,0,NULL,cssElCFun_Unit_ugrp_stub,NULL},
  {&TA_void,NULL,"Copy_Weights"," copies weights from other unit (incl wts assoc with unit bias member)","","",
    0,2,1,0,NULL,cssElCFun_Unit_Copy_Weights_stub,TA_Unit_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights (optionally in binary fmt)","MENU MENU_ON_Object MENU_SEP_BEFORE EXT_strm_wts COMPRESS ","",
    0,3,1,0,NULL,cssElCFun_Unit_WriteWeights_stub,TA_Unit_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,3,1,0,NULL,cssElCFun_Unit_ReadWeights_stub,TA_Unit_ReadWeights_MethArgs},
  {&TA_void,NULL,"SetExtFlag","","","",
    0,1,-1,0,NULL,cssElCFun_Unit_SetExtFlag_stub,TA_Unit_SetExtFlag_MethArgs},
  {&TA_void,NULL,"UnSetExtFlag","","","",
    0,1,-1,0,NULL,cssElCFun_Unit_UnSetExtFlag_stub,TA_Unit_UnSetExtFlag_MethArgs},
  {&TA_void,NULL,"InitExterns","","","",
    0,0,-1,0,NULL,cssElCFun_Unit_InitExterns_stub,NULL},
  {&TA_void,NULL,"InitDelta"," these are convenience functions for those defined in the spec","","",
    0,0,-1,0,NULL,cssElCFun_Unit_InitDelta_stub,NULL},
  {&TA_void,NULL,"InitState"," initialize unit state variables","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Unit_InitState_stub,NULL},
  {&TA_void,NULL,"ModifyState"," modify unit state variables (algorithm specific, e.g. decay)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Unit_ModifyState_stub,NULL},
  {&TA_void,NULL,"InitWtDelta"," Initialze weight changes","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Unit_InitWtDelta_stub,NULL},
  {&TA_void,NULL,"InitWtState"," Initialize weight values","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Unit_InitWtState_stub,NULL},
  {&TA_void,NULL,"Compute_Net","","","",
    0,0,-1,0,NULL,cssElCFun_Unit_Compute_Net_stub,NULL},
  {&TA_void,NULL,"Send_Net","","","",
    0,0,-1,0,NULL,cssElCFun_Unit_Send_Net_stub,NULL},
  {&TA_void,NULL,"Send_NetToLay","","","",
    0,1,-1,0,NULL,cssElCFun_Unit_Send_NetToLay_stub,TA_Unit_Send_NetToLay_MethArgs},
  {&TA_void,NULL,"Compute_Act","","","",
    0,0,-1,0,NULL,cssElCFun_Unit_Compute_Act_stub,NULL},
  {&TA_void,NULL,"UpdateWeights","","","",
    0,0,-1,0,NULL,cssElCFun_Unit_UpdateWeights_stub,NULL},
  {&TA_void,NULL,"Compute_dWt","","","",
    0,0,-1,0,NULL,cssElCFun_Unit_Compute_dWt_stub,NULL},
  {&TA_bool,NULL,"CheckConfig","","","",
    0,3,2,0,NULL,cssElCFun_Unit_CheckConfig_stub,TA_Unit_CheckConfig_MethArgs},
  {&TA_bool,NULL,"Build"," build unit: make sure bias connection is created and right type","","",
    0,0,-1,0,NULL,cssElCFun_Unit_Build_stub,NULL},
  {&TA_bool,NULL,"CheckBuild"," check if build needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_Unit_CheckBuild_stub,NULL},
  {&TA_void,NULL,"ConnectAlloc"," pre-allocate given no of connections (for better memory layout)","","",
    0,3,2,0,NULL,cssElCFun_Unit_ConnectAlloc_stub,TA_Unit_ConnectAlloc_MethArgs},
  {&TA_Connection_ptr,NULL,"ConnectFrom"," make a recv connection from given unit to this unit using given projection","","",
    0,4,2,0,NULL,cssElCFun_Unit_ConnectFrom_stub,TA_Unit_ConnectFrom_MethArgs},
  {&TA_Connection_ptr,NULL,"ConnectFromLink"," make linked recv con from given unit to this using prjn and given src connection","","",
    0,5,3,0,NULL,cssElCFun_Unit_ConnectFromLink_stub,TA_Unit_ConnectFromLink_MethArgs},
  {&TA_Connection_ptr,NULL,"ConnectFromCk"," does ConnectFrom but checks for an existing connection to prevent double-connections!","","",
    0,4,2,0,NULL,cssElCFun_Unit_ConnectFromCk_stub,TA_Unit_ConnectFromCk_MethArgs},
  {&TA_Connection_ptr,NULL,"ConnectFromLinkCk"," does ConnectFromLink but checks for an existing connection to prevent double-connections!","","",
    0,5,3,0,NULL,cssElCFun_Unit_ConnectFromLinkCk_stub,TA_Unit_ConnectFromLinkCk_MethArgs},
  {&TA_bool,NULL,"DisConnectFrom"," remove connection from given unit (projection is optional)","","",
    0,2,1,0,NULL,cssElCFun_Unit_DisConnectFrom_stub,TA_Unit_DisConnectFrom_MethArgs},
  {&TA_void,NULL,"DisConnectAll"," disconnect unit from all other units","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_Unit_DisConnectAll_stub,NULL},
  {&TA_int,NULL,"CountRecvCons"," count total number of receiving connections","","",
    0,0,-1,0,NULL,cssElCFun_Unit_CountRecvCons_stub,NULL},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,2,1,0,NULL,cssElCFun_Unit_TransformWeights_stub,TA_Unit_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,2,1,0,NULL,cssElCFun_Unit_AddNoiseToWeights_stub,TA_Unit_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,4,3,0,NULL,cssElCFun_Unit_PruneCons_stub,TA_Unit_PruneCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove connections with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,3,1,0,NULL,cssElCFun_Unit_LesionCons_stub,TA_Unit_LesionCons_MethArgs},
  {&TA_bool,NULL,"SetConSpec"," set all recv conspecs to con_spec","MENU MENU_ON_Actions MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Unit_SetConSpec_stub,TA_Unit_SetConSpec_MethArgs},
  {&TA_bool,NULL,"CheckTypes"," check that the object and spec types are all ok","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_Unit_CheckTypes_stub,NULL},
  {&TA_int,NULL,"ReplaceUnitSpec"," switch any units/layers using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Unit_ReplaceUnitSpec_stub,TA_Unit_ReplaceUnitSpec_MethArgs},
  {&TA_int,NULL,"ReplaceConSpec"," switch any connections/projections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Unit_ReplaceConSpec_stub,TA_Unit_ReplaceConSpec_MethArgs},
  NULL};
static int ProjectionSpec::* TA_ProjectionSpec_MbrOff;
static MemberDef_data TA_ProjectionSpec_MemberDef[]={
  {&TA_bool,NULL,"self_con"," whether to create self-connections or not (if applicable)","","",
    *((ta_memb_ptr*)&(TA_ProjectionSpec_MbrOff=(int ProjectionSpec::*)(&ProjectionSpec::self_con))),0,NULL,0},
  {&TA_bool,NULL,"init_wts"," whether this projection spec does weight init (else conspec)","","",
    *((ta_memb_ptr*)&(TA_ProjectionSpec_MbrOff=(int ProjectionSpec::*)(&ProjectionSpec::init_wts))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ProjectionSpec_RemoveCons_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ProjectionSpec_PreConnect_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ProjectionSpec_Connect_impl_MethArgs[]={
  {&TA_Projection_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ProjectionSpec_Connect_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ProjectionSpec_ProbAddCons_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_float,NULL,"p_add_con",""},
  {&TA_float,NULL,"init_wt"," 0.0"},
  NULL};
static MethodArgs_data TA_ProjectionSpec_InitWtDelta_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ProjectionSpec_InitWtState_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ProjectionSpec_C_InitWtState_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ProjectionSpec_CopyNetwork_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  {&TA_Network_ptr,NULL,"cn",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Projection_ptr,NULL,"cp",""},
  NULL};
static MethodDef_data TA_ProjectionSpec_MethodDef[]={
  {&TA_void,NULL,"RemoveCons"," deletes any existing connections","","",
    0,1,-1,0,NULL,cssElCFun_ProjectionSpec_RemoveCons_stub,TA_ProjectionSpec_RemoveCons_MethArgs},
  {&TA_void,NULL,"PreConnect"," Prepare to connect (init con_groups)","","",
    0,1,-1,0,NULL,cssElCFun_ProjectionSpec_PreConnect_stub,TA_ProjectionSpec_PreConnect_MethArgs},
  {&TA_void,NULL,"Connect_impl"," actually implements specific connection code","","",
    0,1,-1,0,NULL,cssElCFun_ProjectionSpec_Connect_impl_stub,TA_ProjectionSpec_Connect_impl_MethArgs},
  {&TA_void,NULL,"Connect"," connects the network, first removing existing cons, and inits weights","","",
    0,1,-1,0,NULL,cssElCFun_ProjectionSpec_Connect_stub,TA_ProjectionSpec_Connect_MethArgs},
  {&TA_int,NULL,"ProbAddCons"," probabilistically add a proportion of new connections to replace those pruned previously, init_wt = initial weight value of new connection","","",
    0,3,2,0,NULL,cssElCFun_ProjectionSpec_ProbAddCons_stub,TA_ProjectionSpec_ProbAddCons_MethArgs},
  {&TA_void,NULL,"InitWtDelta"," initializes the delta","","",
    0,1,-1,0,NULL,cssElCFun_ProjectionSpec_InitWtDelta_stub,TA_ProjectionSpec_InitWtDelta_MethArgs},
  {&TA_void,NULL,"InitWtState"," initializes the wt`s state","","",
    0,1,-1,0,NULL,cssElCFun_ProjectionSpec_InitWtState_stub,TA_ProjectionSpec_InitWtState_MethArgs},
  {&TA_void,NULL,"C_InitWtState"," custom initialize weights in this con group for given receiving unit ru","","",
    0,3,-1,0,NULL,cssElCFun_ProjectionSpec_C_InitWtState_stub,TA_ProjectionSpec_C_InitWtState_MethArgs},
  {&TA_void,NULL,"CopyNetwork","","","",
    0,4,-1,0,NULL,cssElCFun_ProjectionSpec_CopyNetwork_stub,TA_ProjectionSpec_CopyNetwork_MethArgs},
  {&TA_int,NULL,"UseCount"," return number of times this spec is used","","",
    0,0,-1,0,NULL,cssElCFun_ProjectionSpec_UseCount_stub,NULL},
  NULL};
static EnumDef_data TA_Projection_PrjnSource[]={
  {"NEXT"," Recv from the next layer in network","",0},
  {"PREV"," Recv from the previous layer in network","",1},
  {"SELF"," Recv from the same layer","",2},
  {"CUSTOM"," Recv from the layer spec'd in the projection","",3},
  NULL};
static int Projection::* TA_Projection_MbrOff;
static MemberDef_data TA_Projection_MemberDef[]={
  {&TA_Layer_ptr,NULL,"layer"," layer this prjn is in","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::layer))),0,NULL,0},
  {NULL,"::PrjnSource","from_type"," Source of the projections","","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::from_type))),0,NULL,0},
  {&TA_Layer_ptr,NULL,"from"," layer receiving from (set this for custom)","","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::from))),0,NULL,0},
  {&TA_ProjectionSpec_SPtr,NULL,"spec"," spec for this item","","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::spec))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"con_type"," Type of connection","TYPE_Connection ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::con_type))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"con_gp_type"," Type of connection group","TYPE_Con_Group ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::con_gp_type))),0,NULL,0},
  {&TA_ConSpec_SPtr,NULL,"con_spec"," conspec to use for creating connections","","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::con_spec))),0,NULL,0},
  {&TA_int,NULL,"recv_idx"," receiving con_group index","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::recv_idx))),0,NULL,0},
  {&TA_int,NULL,"send_idx"," sending con_group index","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::send_idx))),0,NULL,0},
  {&TA_int,NULL,"recv_n"," number of receiving con_groups","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::recv_n))),0,NULL,0},
  {&TA_int,NULL,"send_n"," number of sending con_groups","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::send_n))),0,NULL,0},
  {&TA_bool,NULL,"projected"," t/f if connected","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::projected))),0,NULL,0},
  {&TA_Xform_ptr,NULL,"proj_points"," projection points","OWN_POINTER HIDDEN ","",
    *((ta_memb_ptr*)&(TA_Projection_MbrOff=(int Projection::*)(&Projection::proj_points))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Projection_SetFromPoints_MethArgs[]={
  {&TA_float,NULL,"x1",""},
  {&TA_float,NULL,"y1",""},
  NULL};
static MethodArgs_data TA_Projection_SetToPoints_MethArgs[]={
  {&TA_float,NULL,"x1",""},
  {&TA_float,NULL,"y1",""},
  NULL};
static MethodArgs_data TA_Projection_SetCustomFrom_MethArgs[]={
  {&TA_Layer_ptr,NULL,"from_lay",""},
  NULL};
static MethodArgs_data TA_Projection_Copy_Weights_MethArgs[]={
  {&TA_const_Projection_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_Projection_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Projection_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Projection_ProbAddCons_MethArgs[]={
  {&TA_float,NULL,"p_add_con",""},
  {&TA_float,NULL,"init_wt"," 0.0"},
  NULL};
static MethodArgs_data TA_Projection_C_InitWtState_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_Projection_TransformWeights_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_Projection_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  NULL};
static MethodArgs_data TA_Projection_PruneCons_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  NULL};
static MethodArgs_data TA_Projection_LesionCons_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Projection_SetConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"sp",""},
  NULL};
static MethodArgs_data TA_Projection_ReplaceConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"old_sp",""},
  {&TA_ConSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Projection_ReplacePrjnSpec_MethArgs[]={
  {&TA_ProjectionSpec_ptr,NULL,"old_sp",""},
  {&TA_ProjectionSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Projection_SetConType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_Projection_SetConGpType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_Projection_GridViewWeights_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"grid_log",""},
  {&TA_bool,NULL,"use_swt","false"},
  {&TA_int,NULL,"un_x","-1"},
  {&TA_int,NULL,"un_y","-1"},
  {&TA_int,NULL,"wt_x","-1"},
  {&TA_int,NULL,"wt_y","-1"},
  NULL};
static MethodArgs_data TA_Projection_WeightsToEnv_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  NULL};
static MethodDef_data TA_Projection_MethodDef[]={
  {&TA_void,NULL,"SetFromPoints","","","",
    0,2,-1,0,NULL,cssElCFun_Projection_SetFromPoints_stub,TA_Projection_SetFromPoints_MethArgs},
  {&TA_void,NULL,"SetToPoints","","","",
    0,2,-1,0,NULL,cssElCFun_Projection_SetToPoints_stub,TA_Projection_SetToPoints_MethArgs},
  {&TA_void,NULL,"SetFrom"," set where to receive from based on selections","","",
    0,0,-1,0,NULL,cssElCFun_Projection_SetFrom_stub,NULL},
  {&TA_void,NULL,"SetCustomFrom"," set a CUSTOM projection from given layer (if from_lay == layer, turns into SELF)","","",
    0,1,-1,0,NULL,cssElCFun_Projection_SetCustomFrom_stub,TA_Projection_SetCustomFrom_MethArgs},
  {&TA_void,NULL,"Copy_Weights"," copies weights from other projection","MENU MENU_ON_Object MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Projection_Copy_Weights_stub,TA_Projection_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,2,1,0,NULL,cssElCFun_Projection_WriteWeights_stub,TA_Projection_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,2,1,0,NULL,cssElCFun_Projection_ReadWeights_stub,TA_Projection_ReadWeights_MethArgs},
  {&TA_void,NULL,"RemoveCons"," Reset all connections for this projection","MENU MENU_ON_Actions CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Projection_RemoveCons_stub,NULL},
  {&TA_void,NULL,"PreConnect","","","",
    0,0,-1,0,NULL,cssElCFun_Projection_PreConnect_stub,NULL},
  {&TA_void,NULL,"Connect"," Make all connections for this projection (resets first)","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Projection_Connect_stub,NULL},
  {&TA_void,NULL,"Connect_impl","","","",
    0,0,-1,0,NULL,cssElCFun_Projection_Connect_impl_stub,NULL},
  {&TA_int,NULL,"ProbAddCons"," probabilistically add a proportion of new connections to replace those pruned previously, init_wt = initial weight value of new connection","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Projection_ProbAddCons_stub,TA_Projection_ProbAddCons_MethArgs},
  {&TA_void,NULL,"InitWtDelta"," Initialize weight changes for this projection","MENU MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_Projection_InitWtDelta_stub,NULL},
  {&TA_void,NULL,"InitWtState"," Initialize weight state for this projection","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Projection_InitWtState_stub,NULL},
  {&TA_void,NULL,"C_InitWtState"," custom initialize weights in this con group for given receiving unit ru","","",
    0,2,-1,0,NULL,cssElCFun_Projection_C_InitWtState_stub,TA_Projection_C_InitWtState_MethArgs},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Projection_TransformWeights_stub,TA_Projection_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Projection_AddNoiseToWeights_stub,TA_Projection_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,3,-1,0,NULL,cssElCFun_Projection_PruneCons_stub,TA_Projection_PruneCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove connections with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Projection_LesionCons_stub,TA_Projection_LesionCons_MethArgs},
  {&TA_bool,NULL,"SetConSpec"," set the con spec for all connections in this prjn","","",
    0,1,-1,0,NULL,cssElCFun_Projection_SetConSpec_stub,TA_Projection_SetConSpec_MethArgs},
  {&TA_bool,NULL,"ApplyConSpec"," apply the default conspec to all connections in this prjn","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_Projection_ApplyConSpec_stub,NULL},
  {&TA_bool,NULL,"CheckTypes"," check that the existing con and con gp types are of the specified types","BUTTON USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_Projection_CheckTypes_stub,NULL},
  {&TA_void,NULL,"FixIndexes"," fix the indicies of the connection groups (other_idx)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Projection_FixIndexes_stub,NULL},
  {&TA_int,NULL,"ReplaceConSpec"," switch any connections/projections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Projection_ReplaceConSpec_stub,TA_Projection_ReplaceConSpec_MethArgs},
  {&TA_int,NULL,"ReplacePrjnSpec"," switch any projections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Projection_ReplacePrjnSpec_stub,TA_Projection_ReplacePrjnSpec_MethArgs},
  {&TA_bool,NULL,"SetConType"," set the connection type for all connections in this prjn","","",
    0,1,-1,0,NULL,cssElCFun_Projection_SetConType_stub,TA_Projection_SetConType_MethArgs},
  {&TA_bool,NULL,"SetConGpType"," set the connection group type for all connections in this prjn","","",
    0,1,-1,0,NULL,cssElCFun_Projection_SetConGpType_stub,TA_Projection_SetConGpType_MethArgs},
  {&TA_void,NULL,"GridViewWeights"," display entire set of projection weights (use sending weights if use_swt) in grid log, -1 for x,y = use layer geometry (otherwise limits range, un= unit range, wt = weight (sending lay) range) ","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,6,1,0,NULL,cssElCFun_Projection_GridViewWeights_stub,TA_Projection_GridViewWeights_MethArgs},
  {&TA_void,NULL,"WeightsToEnv"," send entire set of projection weights to given environment (e.g., for analysis), with one event per receiving unit, and the pattern in the event reflects the weights into that unit","MENU NULL_OK ","",
    0,1,-1,0,NULL,cssElCFun_Projection_WeightsToEnv_stub,TA_Projection_WeightsToEnv_MethArgs},
  NULL};
static MethodDef_data TA_LayerSpec_MethodDef[]={
  {&TA_int,NULL,"UseCount"," return number of times this spec is used","","",
    0,0,-1,0,NULL,cssElCFun_LayerSpec_UseCount_stub,NULL},
  NULL};
static EnumDef_data TA_Layer_DMemDist[]={
  {"DMEM_DIST_DEFAULT"," distribute units to different processors for distributed memory processing according to the default sequential scheme","",0},
  {"DMEM_DIST_UNITGP"," distribute units according to unit groups, which can be less even but allows for shared weights by unit group","",1},
  NULL};
static int Layer::* TA_Layer_MbrOff;
static MemberDef_data TA_Layer_MemberDef[]={
  {&TA_Network_ptr,NULL,"own_net"," Network this layer is in","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::own_net))),0,NULL,0},
  {&TA_int,NULL,"n_units"," no. of units to create with Build command (0=use geometry)","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::n_units))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"geom"," geometry (size) of units in layer (or of each subgroup if geom.z > 1)","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::geom))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"pos"," position of layer","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::pos))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"gp_geom"," geometry of sub-groups (if geom.z > 1)","CONDEDIT_OFF_geom.z:1 ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::gp_geom))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"gp_spc"," spacing between sub-groups (if geom.z > 1)","CONDEDIT_OFF_geom.z:1 ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::gp_spc))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"act_geom"," actual geometry (if geom.z > 1)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::act_geom))),0,NULL,0},
  {&TA_Projection_Group,NULL,"projections"," group of receiving projections","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::projections))),0,NULL,0},
  {&TA_Projection_Group,NULL,"send_prjns"," group of sending projections","HIDDEN LINK_GROUP ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::send_prjns))),0,NULL,0},
  {&TA_Unit_Group,NULL,"units"," units or groups of units","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::units))),0,NULL,0},
  {&TA_UnitSpec_SPtr,NULL,"unit_spec"," default unit specification for units in this layer","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::unit_spec))),0,NULL,0},
  {&TA_bool,NULL,"lesion"," inactivate this layer from processing (reversable)","DEF_false ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::lesion))),0,NULL,0},
  {NULL,"Unit::ExtType","ext_flag"," indicates which kind of external input layer received","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::ext_flag))),0,NULL,0},
  {&TA_int_Array,NULL,"sent_already"," array of layer addresses for coordinating sending of net input to this layer","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::sent_already))),0,NULL,0},
  {NULL,"::DMemDist","dmem_dist"," how to distribute units across multiple distributed memory processors","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::dmem_dist))),0,NULL,0},
  {&TA_SourceChannel_List,NULL,"source_channels"," override bool	can_sequence_() const {return false;} // true if has a ISequencable interface","","",
    *((ta_memb_ptr*)&(TA_Layer_MbrOff=(int Layer::*)(&Layer::source_channels))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Layer_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_Layer_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_Layer_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_Layer_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_Layer_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_Layer_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Layer_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Layer_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_Layer_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_Layer_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_Layer_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_Layer_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_Layer_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_Layer_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_Layer_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_Layer_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_Layer_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_Layer_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_Layer_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_Layer_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Layer_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Layer_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_Layer_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_Layer_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_Layer_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_Layer_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_Layer_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Layer_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Layer_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_Layer_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_Layer_GetData_MethArgs[]={
  {&TA_SourceChannel_ptr,NULL,"ch",""},
  NULL};
static MethodArgs_data TA_Layer_Copy_Weights_MethArgs[]={
  {&TA_const_Layer_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_Layer_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Layer_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Layer_LayoutUnits_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u","((void *)0)"},
  NULL};
static MethodArgs_data TA_Layer_ConnectFrom_MethArgs[]={
  {&TA_Layer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_Layer_Send_NetToLay_MethArgs[]={
  {&TA_Layer_ptr,NULL,"tolay",""},
  NULL};
static MethodArgs_data TA_Layer_TransformWeights_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_Layer_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  NULL};
static MethodArgs_data TA_Layer_PruneCons_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  NULL};
static MethodArgs_data TA_Layer_ProbAddCons_MethArgs[]={
  {&TA_float,NULL,"p_add_con",""},
  {&TA_float,NULL,"init_wt"," 0.0"},
  NULL};
static MethodArgs_data TA_Layer_LesionCons_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Layer_LesionUnits_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Layer_SetLayerSpec_MethArgs[]={
  {&TA_LayerSpec_ptr,NULL,"layspec",""},
  NULL};
static MethodArgs_data TA_Layer_SetUnitSpec_MethArgs[]={
  {&TA_UnitSpec_ptr,NULL,"unitspec",""},
  NULL};
static MethodArgs_data TA_Layer_SetUnitType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_Layer_SetConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"conspec",""},
  NULL};
static MethodArgs_data TA_Layer_CheckConfig_MethArgs[]={
  {&TA_TrialProcess_ptr,NULL,"tp",""},
  {&TA_bool,NULL,"quiet","false"},
  NULL};
static MethodArgs_data TA_Layer_ReplaceUnitSpec_MethArgs[]={
  {&TA_UnitSpec_ptr,NULL,"old_sp",""},
  {&TA_UnitSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Layer_ReplaceConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"old_sp",""},
  {&TA_ConSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Layer_ReplacePrjnSpec_MethArgs[]={
  {&TA_ProjectionSpec_ptr,NULL,"old_sp",""},
  {&TA_ProjectionSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Layer_ReplaceLayerSpec_MethArgs[]={
  {&TA_LayerSpec_ptr,NULL,"old_sp",""},
  {&TA_LayerSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Layer_GridViewWeights_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"grid_log",""},
  {&TA_Layer_ptr,NULL,"send_lay",""},
  {&TA_bool,NULL,"use_swt","false"},
  {&TA_int,NULL,"un_x","-1"},
  {&TA_int,NULL,"un_y","-1"},
  {&TA_int,NULL,"wt_x","-1"},
  {&TA_int,NULL,"wt_y","-1"},
  NULL};
static MethodArgs_data TA_Layer_WeightsToEnv_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  {&TA_Layer_ptr,NULL,"send_lay",""},
  NULL};
static MethodArgs_data TA_Layer_SetExtFlag_MethArgs[]={
  {&TA_int,NULL,"flg",""},
  NULL};
static MethodArgs_data TA_Layer_UnSetExtFlag_MethArgs[]={
  {&TA_int,NULL,"flg",""},
  NULL};
static MethodArgs_data TA_Layer_FindUnitFmCoord_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"coord",""},
  NULL};
static MethodArgs_data TA_Layer_FindUnitGpFmCoord_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"coord",""},
  NULL};
static MethodArgs_data TA_Layer_GetActGeomNoSpc_MethArgs[]={
  {&TA_PosTDCoord_ref,NULL,"nospc_geom",""},
  NULL};
static MethodDef_data TA_Layer_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_Layer_GetColText_stub,TA_Layer_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_Layer_ChildQueryEditActions_stub,TA_Layer_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_Layer_ChildEditAction_stub,TA_Layer_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_Layer_QueryEditActions_stub,TA_Layer_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_Layer_EditAction_stub,TA_Layer_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_Layer_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_Layer_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_Layer_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_Layer_UnSafeCopy_stub,TA_Layer_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_Layer_CastCopyTo_stub,TA_Layer_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_Layer_GetOwner_stub,TA_Layer_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_Layer_GetPath_stub,TA_Layer_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_Layer_FindFromPath_stub,TA_Layer_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_Layer_New_stub,TA_Layer_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_Layer_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_Layer_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_Layer_StructUpdate_stub,TA_Layer_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_Layer_DataUpdate_stub,TA_Layer_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_Layer_AddDataView_stub,TA_Layer_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_Layer_RemoveDataView_stub,TA_Layer_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_Layer_InheritsFrom_stub,TA_Layer_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_Layer_GetEnumString_stub,TA_Layer_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_Layer_GetEnumVal_stub,TA_Layer_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_Layer_Load_stub,TA_Layer_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_Layer_Save_stub,TA_Layer_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_Layer_SaveAs_stub,TA_Layer_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_Layer_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_Layer_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_Layer_ReShowEdit_stub,TA_Layer_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_Layer_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Layer_CopyFrom_stub,TA_Layer_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Layer_CopyTo_stub,TA_Layer_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_Layer_ChildUpdateAfterEdit_stub,TA_Layer_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_Layer_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Layer_ChangeMyType_stub,TA_Layer_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_Layer_SelectForEdit_stub,TA_Layer_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_Layer_SelectFunForEdit_stub,TA_Layer_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Layer_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_Layer_CallFun_stub,TA_Layer_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_Layer_SetAdapter_stub,TA_Layer_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_Layer_addr_data_link_stub,NULL},
  {&TA_bool,NULL,"can_sequence_"," true if has a ISequencable interface","","",
    0,0,-1,0,NULL,cssElCFun_Layer_can_sequence__stub,NULL},
  {&TA_ISequencable_ptr,NULL,"sequencer_"," sequencing interface, if sequencable","","",
    0,0,-1,0,NULL,cssElCFun_Layer_sequencer__stub,NULL},
  {&TA_SourceChannel_List_ref,NULL,"source_channels_","","","",
    0,0,-1,0,NULL,cssElCFun_Layer_source_channels__stub,NULL},
  {&TA_taMatrix_impl_ptr,NULL,"GetData","","","",
    0,1,-1,0,NULL,cssElCFun_Layer_GetData_stub,TA_Layer_GetData_MethArgs},
  {&TA_void,NULL,"Copy_Weights"," copies weights from other layer (incl wts assoc with unit bias member)","MENU MENU_ON_Object MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Layer_Copy_Weights_stub,TA_Layer_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,2,1,0,NULL,cssElCFun_Layer_WriteWeights_stub,TA_Layer_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,2,1,0,NULL,cssElCFun_Layer_ReadWeights_stub,TA_Layer_ReadWeights_MethArgs},
  {&TA_void,NULL,"Build"," build the units based on n_units, geom","MENU MENU_ON_Actions CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Layer_Build_stub,NULL},
  {&TA_void,NULL,"RecomputeGeometry"," recompute the layer's geometry specifcations","","",
    0,0,-1,0,NULL,cssElCFun_Layer_RecomputeGeometry_stub,NULL},
  {&TA_void,NULL,"LayoutUnits"," layout the units according to layer geometry","ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_Layer_LayoutUnits_stub,TA_Layer_LayoutUnits_MethArgs},
  {&TA_void,NULL,"LayoutUnitGroups"," layout the unit groups according to layer group geometry and spacing","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Layer_LayoutUnitGroups_stub,NULL},
  {&TA_void,NULL,"ConnectFrom"," connect one or more other layers to this layer","DYN12N ","",
    0,1,-1,0,NULL,cssElCFun_Layer_ConnectFrom_stub,TA_Layer_ConnectFrom_MethArgs},
  {&TA_void,NULL,"Connect"," connect the layer","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Layer_Connect_stub,NULL},
  {&TA_bool,NULL,"CheckBuild"," check if build needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_Layer_CheckBuild_stub,NULL},
  {&TA_bool,NULL,"CheckConnect"," check if connect needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_Layer_CheckConnect_stub,NULL},
  {&TA_void,NULL,"RemoveCons"," remove all connections in this layer","MENU CONFIRM MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_Layer_RemoveCons_stub,NULL},
  {&TA_void,NULL,"RemoveUnits"," remove all units in this layer (preserving groups)","MENU DYN1 ","",
    0,0,-1,0,NULL,cssElCFun_Layer_RemoveUnits_stub,NULL},
  {&TA_void,NULL,"RemoveUnitGroups"," remove all unit groups in this layer","MENU DYN1 ","",
    0,0,-1,0,NULL,cssElCFun_Layer_RemoveUnitGroups_stub,NULL},
  {&TA_void,NULL,"PreConnect"," prepare to connect the layer (create con_groups)","","",
    0,0,-1,0,NULL,cssElCFun_Layer_PreConnect_stub,NULL},
  {&TA_void,NULL,"SyncSendPrjns"," synchronize sending projections with the recv projections so everyone's happy","","",
    0,0,-1,0,NULL,cssElCFun_Layer_SyncSendPrjns_stub,NULL},
  {&TA_void,NULL,"DisConnect"," disconnect layer from all others","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Layer_DisConnect_stub,NULL},
  {&TA_int,NULL,"CountRecvCons"," count recv connections for all units in layer","","",
    0,0,-1,0,NULL,cssElCFun_Layer_CountRecvCons_stub,NULL},
  {&TA_void,NULL,"InitExterns"," Initializes external and target inputs","","",
    0,0,-1,0,NULL,cssElCFun_Layer_InitExterns_stub,NULL},
  {&TA_void,NULL,"InitDelta"," Initialize the unit deltas","","",
    0,0,-1,0,NULL,cssElCFun_Layer_InitDelta_stub,NULL},
  {&TA_void,NULL,"InitState"," Initialize the unit state variables","","",
    0,0,-1,0,NULL,cssElCFun_Layer_InitState_stub,NULL},
  {&TA_void,NULL,"ModifyState"," Alters state in an algorithm-specific way (e.g., decay)","","",
    0,0,-1,0,NULL,cssElCFun_Layer_ModifyState_stub,NULL},
  {&TA_void,NULL,"InitWtDelta"," Initialize the deltas","","",
    0,0,-1,0,NULL,cssElCFun_Layer_InitWtDelta_stub,NULL},
  {&TA_void,NULL,"InitWtState"," Initialize the weights","MENU LABEL_Init_Weights CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Layer_InitWtState_stub,NULL},
  {&TA_void,NULL,"Compute_Net"," Compute NetInput","","",
    0,0,-1,0,NULL,cssElCFun_Layer_Compute_Net_stub,NULL},
  {&TA_void,NULL,"Send_Net"," sender-based compute net-input sending to all layers","","",
    0,0,-1,0,NULL,cssElCFun_Layer_Send_Net_stub,NULL},
  {&TA_void,NULL,"Send_NetToLay"," sender-based compute net-input sending only to tolay layer","","",
    0,1,-1,0,NULL,cssElCFun_Layer_Send_NetToLay_stub,TA_Layer_Send_NetToLay_MethArgs},
  {&TA_void,NULL,"Send_NetToMe"," tell all layers that I receive from to send their net input to me","","",
    0,0,-1,0,NULL,cssElCFun_Layer_Send_NetToMe_stub,NULL},
  {&TA_void,NULL,"Compute_Act"," Compute Activation","","",
    0,0,-1,0,NULL,cssElCFun_Layer_Compute_Act_stub,NULL},
  {&TA_void,NULL,"UpdateWeights"," update weights for whole layer","","",
    0,0,-1,0,NULL,cssElCFun_Layer_UpdateWeights_stub,NULL},
  {&TA_void,NULL,"Compute_dWt"," update weights for whole layer","","",
    0,0,-1,0,NULL,cssElCFun_Layer_Compute_dWt_stub,NULL},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Layer_TransformWeights_stub,TA_Layer_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Layer_AddNoiseToWeights_stub,TA_Layer_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,3,-1,0,NULL,cssElCFun_Layer_PruneCons_stub,TA_Layer_PruneCons_MethArgs},
  {&TA_int,NULL,"ProbAddCons"," probabilistically add new connections (assuming prior pruning), init_wt = initial weight value of new connection","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Layer_ProbAddCons_stub,TA_Layer_ProbAddCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove connectiosn with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Layer_LesionCons_stub,TA_Layer_LesionCons_MethArgs},
  {&TA_int,NULL,"LesionUnits"," remove units with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Layer_LesionUnits_stub,TA_Layer_LesionUnits_MethArgs},
  {&TA_bool,NULL,"SetLayerSpec"," set the layer specification","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Layer_SetLayerSpec_stub,TA_Layer_SetLayerSpec_MethArgs},
  {&TA_LayerSpec_ptr,NULL,"GetLayerSpec","","","",
    0,0,-1,0,NULL,cssElCFun_Layer_GetLayerSpec_stub,NULL},
  {&TA_bool,NULL,"SetUnitSpec"," set for all units in layer","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Layer_SetUnitSpec_stub,TA_Layer_SetUnitSpec_MethArgs},
  {&TA_void,NULL,"SetUnitType"," set unit type for all units in layer (created by Build)","MENU TYPE_Unit ","",
    0,1,-1,0,NULL,cssElCFun_Layer_SetUnitType_stub,TA_Layer_SetUnitType_MethArgs},
  {&TA_bool,NULL,"SetConSpec"," set for all unit's connections in layer","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Layer_SetConSpec_stub,TA_Layer_SetConSpec_MethArgs},
  {&TA_bool,NULL,"CheckTypes"," check that the object and spec types are all ok","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_Layer_CheckTypes_stub,NULL},
  {&TA_bool,NULL,"CheckConfig"," check for for misc configuration settings required by different algorithms, including settings on the processes","","",
    0,2,1,0,NULL,cssElCFun_Layer_CheckConfig_stub,TA_Layer_CheckConfig_MethArgs},
  {&TA_void,NULL,"FixPrjnIndexes"," fix the projection indicies of the connection groups (other_idx)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Layer_FixPrjnIndexes_stub,NULL},
  {&TA_int,NULL,"ReplaceUnitSpec"," switch any units/layers using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Layer_ReplaceUnitSpec_stub,TA_Layer_ReplaceUnitSpec_MethArgs},
  {&TA_int,NULL,"ReplaceConSpec"," switch any connections/projections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Layer_ReplaceConSpec_stub,TA_Layer_ReplaceConSpec_MethArgs},
  {&TA_int,NULL,"ReplacePrjnSpec"," switch any projections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Layer_ReplacePrjnSpec_stub,TA_Layer_ReplacePrjnSpec_MethArgs},
  {&TA_int,NULL,"ReplaceLayerSpec"," switch any layers using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Layer_ReplaceLayerSpec_stub,TA_Layer_ReplaceLayerSpec_MethArgs},
  {&TA_void,NULL,"GridViewWeights"," display entire set of weights from sending layer (use sending weights if use_swt) in grid log, -1 for x,y = use layer geometry (otherwise limits range, un= unit range, wt = weight (sending lay) range) ","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,7,2,0,NULL,cssElCFun_Layer_GridViewWeights_stub,TA_Layer_GridViewWeights_MethArgs},
  {&TA_void,NULL,"WeightsToEnv"," send entire set of weights from sending layer to given environment (e.g., for analysis), with one event per receiving unit, and the pattern in the event reflects the weights into that unit","MENU NULL_OK ","",
    0,2,-1,0,NULL,cssElCFun_Layer_WeightsToEnv_stub,TA_Layer_WeightsToEnv_MethArgs},
  {&TA_void,NULL,"SetExtFlag","","","",
    0,1,-1,0,NULL,cssElCFun_Layer_SetExtFlag_stub,TA_Layer_SetExtFlag_MethArgs},
  {&TA_void,NULL,"UnSetExtFlag","","","",
    0,1,-1,0,NULL,cssElCFun_Layer_UnSetExtFlag_stub,TA_Layer_UnSetExtFlag_MethArgs},
  {&TA_Unit_ptr,NULL,"FindUnitFmCoord"," get unit from coordinates, taking into account group geometry if present (subtracts any gp_spc -- as if it is not present).","","",
    0,1,-1,0,NULL,cssElCFun_Layer_FindUnitFmCoord_stub,TA_Layer_FindUnitFmCoord_MethArgs},
  {&TA_Unit_Group_ptr,NULL,"FindUnitGpFmCoord"," get unit group from group coordinates (i.e., within gp_geom, not unit coordinates)","","",
    0,1,-1,0,NULL,cssElCFun_Layer_FindUnitGpFmCoord_stub,TA_Layer_FindUnitGpFmCoord_MethArgs},
  {&TA_void,NULL,"GetActGeomNoSpc"," get the actual geometry of the layer, subtracting any gp_spc that might be present (as if there were no spaces between unit groups)","","",
    0,1,-1,0,NULL,cssElCFun_Layer_GetActGeomNoSpc_stub,TA_Layer_GetActGeomNoSpc_MethArgs},
  NULL};
static EnumDef_data TA_Network_LayerLayout[]={
  {"TWO_D"," all z = 0, no skew","LABEL_2D ",0},
  {"THREE_D"," z = layer index, default skew","LABEL_3D ",1},
  NULL};
static EnumDef_data TA_Network_Usr1SaveFmt[]={
  {"FULL_NET"," save the full network (dump file)","",0},
  {"JUST_WEIGHTS"," just do a 'write weights' command","",1},
  NULL};
static EnumDef_data TA_Network_DMem_SyncLevel[]={
  {"DMEM_SYNC_NETWORK"," synchronize the entire network at a time","",0},
  {"DMEM_SYNC_LAYER"," synchronize only layer-by-layer","",1},
  NULL};
static EnumDef_data TA_Network_WtSaveFormat[]={
  {"TEXT"," weights are saved as ascii text representation of digits (completely portable)","",0},
  {"TEXT_IDX"," text format plus unit indexes (useful for partially-connected networks where connections might change)","",1},
  {"BINARY"," weights are written directly to the file in binary format (no loss in accuracy and more space efficient, but possibly non-portable)","",2},
  {"BINARY_IDX"," binary format plus unit indexes (useful for partially-connected networks where connections might change)","",3},
  NULL};
static int Network::* TA_Network_MbrOff;
static MemberDef_data TA_Network_MemberDef[]={
  {&TA_Layer_MGroup,NULL,"layers"," Layers or Groups of Layers","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::layers))),0,NULL,0},
  {&TA_int,NULL,"epoch"," epoch counter (updated by process)","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::epoch))),0,NULL,0},
  {&TA_bool,NULL,"re_init"," should net be initialized (InitWtState) by process?","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::re_init))),0,NULL,0},
  {NULL,"::DMem_SyncLevel","dmem_sync_level"," at what level of network structure should information be synchronized across processes?","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::dmem_sync_level))),0,NULL,0},
  {&TA_int,NULL,"dmem_nprocs"," number of processors to use in distributed memory computation of connection-level processing (actual number may be less, depending on processors requested!)","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::dmem_nprocs))),0,NULL,0},
  {&TA_int,NULL,"dmem_nprocs_actual"," actual number of processors being used","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::dmem_nprocs_actual))),0,NULL,0},
  {NULL,"::Usr1SaveFmt","usr1_save_fmt"," save network for -USR1 signal: full net or weights","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::usr1_save_fmt))),0,NULL,0},
  {NULL,"::WtSaveFormat","wt_save_fmt"," format to save weights in if saving weights","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::wt_save_fmt))),0,NULL,0},
  {NULL,"::LayerLayout","lay_layout"," Visual mode of layer position/view","","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::lay_layout))),0,NULL,0},
  {&TA_int,NULL,"n_units"," total number of units in the network","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::n_units))),0,NULL,0},
  {&TA_int,NULL,"n_cons"," total number of connections in the network","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::n_cons))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"max_size"," maximum size in each dimension of the net","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::max_size))),0,NULL,0},
  {&TA_Project_ptr,NULL,"proj"," Project this network is in","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Network_MbrOff=(int Network::*)(&Network::proj))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Network_Copy_Weights_MethArgs[]={
  {&TA_const_Network_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_Network_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {NULL,"::WtSaveFormat","fmt"," TEXT"},
  NULL};
static MethodArgs_data TA_Network_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_Network_ReadOldPDPNet_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"skip_dots","true"},
  NULL};
static MethodArgs_data TA_Network_ConnectUnits_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u_to",""},
  {&TA_Unit_ptr,NULL,"u_from","((void *)0)"},
  {&TA_bool,NULL,"record","true"},
  {&TA_ConSpec_ptr,NULL,"conspec","((void *)0)"},
  NULL};
static MethodArgs_data TA_Network_CheckConfig_MethArgs[]={
  {&TA_TrialProcess_ptr,NULL,"tp",""},
  {&TA_bool,NULL,"quiet","false"},
  NULL};
static MethodArgs_data TA_Network_TransformWeights_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_Network_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  NULL};
static MethodArgs_data TA_Network_PruneCons_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  NULL};
static MethodArgs_data TA_Network_ProbAddCons_MethArgs[]={
  {&TA_float,NULL,"p_add_con",""},
  {&TA_float,NULL,"init_wt"," 0.0"},
  NULL};
static MethodArgs_data TA_Network_LesionCons_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Network_LesionUnits_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Network_TwoD_Or_ThreeD_MethArgs[]={
  {NULL,"::LayerLayout","layout_type",""},
  NULL};
static MethodArgs_data TA_Network_GridViewWeights_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"grid_log",""},
  {&TA_Layer_ptr,NULL,"recv_lay",""},
  {&TA_Layer_ptr,NULL,"send_lay",""},
  {&TA_bool,NULL,"use_swt","false"},
  {&TA_int,NULL,"un_x","-1"},
  {&TA_int,NULL,"un_y","-1"},
  {&TA_int,NULL,"wt_x","-1"},
  {&TA_int,NULL,"wt_y","-1"},
  NULL};
static MethodArgs_data TA_Network_WeightsToEnv_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  {&TA_Layer_ptr,NULL,"recv_lay",""},
  {&TA_Layer_ptr,NULL,"send_lay",""},
  NULL};
static MethodArgs_data TA_Network_ReplaceUnitSpec_MethArgs[]={
  {&TA_UnitSpec_ptr,NULL,"old_sp",""},
  {&TA_UnitSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Network_ReplaceConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"old_sp",""},
  {&TA_ConSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Network_ReplacePrjnSpec_MethArgs[]={
  {&TA_ProjectionSpec_ptr,NULL,"old_sp",""},
  {&TA_ProjectionSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Network_ReplaceLayerSpec_MethArgs[]={
  {&TA_LayerSpec_ptr,NULL,"old_sp",""},
  {&TA_LayerSpec_ptr,NULL,"new_sp",""},
  NULL};
static MethodArgs_data TA_Network_FindMakeLayer_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  {&TA_const_char_ptr,NULL,"alt_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Network_FindLayer_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_Network_FindMakePrjn_MethArgs[]={
  {&TA_Layer_ptr,NULL,"recv",""},
  {&TA_Layer_ptr,NULL,"send",""},
  {&TA_ProjectionSpec_ptr,NULL,"ps"," ((void *)0)"},
  {&TA_ConSpec_ptr,NULL,"cs"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_Network_FindMakePrjnAdd_MethArgs[]={
  {&TA_Layer_ptr,NULL,"recv",""},
  {&TA_Layer_ptr,NULL,"send",""},
  {&TA_ProjectionSpec_ptr,NULL,"ps"," ((void *)0)"},
  {&TA_ConSpec_ptr,NULL,"cs"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_Network_FindMakeSelfPrjn_MethArgs[]={
  {&TA_Layer_ptr,NULL,"recv",""},
  {&TA_ProjectionSpec_ptr,NULL,"ps"," ((void *)0)"},
  {&TA_ConSpec_ptr,NULL,"cs"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_Network_FindMakeSelfPrjnAdd_MethArgs[]={
  {&TA_Layer_ptr,NULL,"recv",""},
  {&TA_ProjectionSpec_ptr,NULL,"ps"," ((void *)0)"},
  {&TA_ConSpec_ptr,NULL,"cs"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_Network_RemovePrjn_MethArgs[]={
  {&TA_Layer_ptr,NULL,"recv",""},
  {&TA_Layer_ptr,NULL,"send",""},
  {&TA_ProjectionSpec_ptr,NULL,"ps"," ((void *)0)"},
  {&TA_ConSpec_ptr,NULL,"cs"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Network_RemoveLayer_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodDef_data TA_Network_MethodDef[]={
  {&TA_void,NULL,"DMem_SyncNRecvCons"," syncronize number of receiving connections (share set 0)","","",
    0,0,-1,0,NULL,cssElCFun_Network_DMem_SyncNRecvCons_stub,NULL},
  {&TA_void,NULL,"DMem_DistributeUnits"," distribute units to different nodes","","",
    0,0,-1,0,NULL,cssElCFun_Network_DMem_DistributeUnits_stub,NULL},
  {&TA_int,NULL,"GetDefaultX","","","",
    0,0,-1,0,NULL,cssElCFun_Network_GetDefaultX_stub,NULL},
  {&TA_int,NULL,"GetDefaultY","","","",
    0,0,-1,0,NULL,cssElCFun_Network_GetDefaultY_stub,NULL},
  {&TA_int,NULL,"GetDefaultZ","","","",
    0,0,-1,0,NULL,cssElCFun_Network_GetDefaultZ_stub,NULL},
  {&TA_void,NULL,"OpenViewer"," open a viewer on this network","MENU MENU_SEP_BEFORE MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_Network_OpenViewer_stub,NULL},
  {&TA_void,NULL,"Copy_Weights"," copies weights from other network (incl wts assoc with unit bias member)","MENU MENU_ON_Object MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Network_Copy_Weights_stub,TA_Network_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,2,1,0,NULL,cssElCFun_Network_WriteWeights_stub,TA_Network_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights (fmt is read from file)","MENU EXT_strm_wts COMPRESS ","",
    0,1,-1,0,NULL,cssElCFun_Network_ReadWeights_stub,TA_Network_ReadWeights_MethArgs},
  {&TA_void,NULL,"ReadOldPDPNet"," Read old style PDP .net file into network. If skip_dots then ignore '.' values in network connectivity matrix, otherwise create a zero weight ","MENU ARGC_2 EXT_strm_net UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_Network_ReadOldPDPNet_stub,TA_Network_ReadOldPDPNet_MethArgs},
  {&TA_void,NULL,"Build"," Build the network according to geometry","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_Network_Build_stub,NULL},
  {&TA_void,NULL,"Connect"," Connect this network according to projections on Layers","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_Network_Connect_stub,NULL},
  {&TA_bool,NULL,"CheckBuild"," check if build needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_Network_CheckBuild_stub,NULL},
  {&TA_bool,NULL,"CheckConnect"," check if connect needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_Network_CheckConnect_stub,NULL},
  {&TA_void,NULL,"UpdtAfterNetMod"," update network after any network modification (calls appropriate functions)","","",
    0,0,-1,0,NULL,cssElCFun_Network_UpdtAfterNetMod_stub,NULL},
  {&TA_void,NULL,"SyncSendPrjns"," synchronize sending projections with the recv projections so everyone's happy","","",
    0,0,-1,0,NULL,cssElCFun_Network_SyncSendPrjns_stub,NULL},
  {&TA_void,NULL,"CountRecvCons"," count recv connections for all units in network","","",
    0,0,-1,0,NULL,cssElCFun_Network_CountRecvCons_stub,NULL},
  {&TA_void,NULL,"ConnectUnits"," connect u1 so that it recieves from u2. Create projection if necessary","","",
    0,4,1,0,NULL,cssElCFun_Network_ConnectUnits_stub,TA_Network_ConnectUnits_MethArgs},
  {&TA_void,NULL,"RemoveCons"," Remove all connections in network","MENU MENU_ON_Actions CONFIRM MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_Network_RemoveCons_stub,NULL},
  {&TA_void,NULL,"RemoveUnits"," Remove all units in network (preserving unit groups)","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Network_RemoveUnits_stub,NULL},
  {&TA_void,NULL,"RemoveUnitGroups"," Remove all unit groups in network","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Network_RemoveUnitGroups_stub,NULL},
  {&TA_void,NULL,"LayoutUnitGroups"," layout all the layer's unit groups according to layer group geometry and spacing","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Network_LayoutUnitGroups_stub,NULL},
  {&TA_void,NULL,"PreConnect"," Prepare to connect this network (make con_groups)","","",
    0,0,-1,0,NULL,cssElCFun_Network_PreConnect_stub,NULL},
  {&TA_bool,NULL,"CheckTypes"," check that the object and spec types are all ok","MENU MENU_ON_Actions USE_RVAL MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_Network_CheckTypes_stub,NULL},
  {&TA_bool,NULL,"CheckConfig"," check for for misc configuration settings required by different algorithms, including settings on the processes","","",
    0,2,1,0,NULL,cssElCFun_Network_CheckConfig_stub,TA_Network_CheckConfig_MethArgs},
  {&TA_void,NULL,"FixPrjnIndexes"," fix the projection indicies of the connection groups (other_idx)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Network_FixPrjnIndexes_stub,NULL},
  {&TA_void,NULL,"RemoveMonitors"," Remove monitoring of all objects in all processes associated with parent project","","",
    0,0,-1,0,NULL,cssElCFun_Network_RemoveMonitors_stub,NULL},
  {&TA_void,NULL,"UpdateMonitors"," Update monitoring of all objects in all processes associated with parent project","","",
    0,0,-1,0,NULL,cssElCFun_Network_UpdateMonitors_stub,NULL},
  {&TA_void,NULL,"InitExterns"," Initializes external and target inputs","","",
    0,0,-1,0,NULL,cssElCFun_Network_InitExterns_stub,NULL},
  {&TA_void,NULL,"InitDelta"," Initialize the unit deltas","","",
    0,0,-1,0,NULL,cssElCFun_Network_InitDelta_stub,NULL},
  {&TA_void,NULL,"InitState"," Initialize the unit state variables","MENU MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_Network_InitState_stub,NULL},
  {&TA_void,NULL,"ModifyState"," Alters the state in an algorithm-specify way","","",
    0,0,-1,0,NULL,cssElCFun_Network_ModifyState_stub,NULL},
  {&TA_void,NULL,"InitWtDelta"," Initialize the Weight deltas","","",
    0,0,-1,0,NULL,cssElCFun_Network_InitWtDelta_stub,NULL},
  {&TA_void,NULL,"InitWtState"," Initialize the weights, reset the epoch ctr to 0","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Network_InitWtState_stub,NULL},
  {&TA_void,NULL,"Compute_Net"," Compute NetInput","","",
    0,0,-1,0,NULL,cssElCFun_Network_Compute_Net_stub,NULL},
  {&TA_void,NULL,"Send_Net"," sender-based computation of net input","","",
    0,0,-1,0,NULL,cssElCFun_Network_Send_Net_stub,NULL},
  {&TA_void,NULL,"Compute_Act"," Compute Activation","","",
    0,0,-1,0,NULL,cssElCFun_Network_Compute_Act_stub,NULL},
  {&TA_void,NULL,"UpdateWeights"," update weights for whole net","","",
    0,0,-1,0,NULL,cssElCFun_Network_UpdateWeights_stub,NULL},
  {&TA_void,NULL,"Compute_dWt"," update weights for whole net","","",
    0,0,-1,0,NULL,cssElCFun_Network_Compute_dWt_stub,NULL},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Network_TransformWeights_stub,TA_Network_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Network_AddNoiseToWeights_stub,TA_Network_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,3,-1,0,NULL,cssElCFun_Network_PruneCons_stub,TA_Network_PruneCons_MethArgs},
  {&TA_int,NULL,"ProbAddCons"," probabilistically add new connections (assuming prior pruning), init_wt = initial weight value of new connection","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Network_ProbAddCons_stub,TA_Network_ProbAddCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove connections with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Network_LesionCons_stub,TA_Network_LesionCons_MethArgs},
  {&TA_int,NULL,"LesionUnits"," remove units with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Network_LesionUnits_stub,TA_Network_LesionUnits_MethArgs},
  {&TA_void,NULL,"TwoD_Or_ThreeD"," Set 2d or 3d and reposition and redraw layers","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Network_TwoD_Or_ThreeD_stub,TA_Network_TwoD_Or_ThreeD_MethArgs},
  {&TA_void,NULL,"GridViewWeights"," display entire set of weights from sending layer to recv_lay (use sending weights if use_swt) in grid log, -1 for x,y = use layer geometry (otherwise limits range, un= unit range, wt = weight (sending lay) range) ","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,8,3,0,NULL,cssElCFun_Network_GridViewWeights_stub,TA_Network_GridViewWeights_MethArgs},
  {&TA_void,NULL,"WeightsToEnv"," send entire set of weights from sending layer to recv layer in given environment (e.g., for analysis), with one event per receiving unit, and the pattern in the event reflects the weights into that unit","MENU NULL_OK ","",
    0,3,-1,0,NULL,cssElCFun_Network_WeightsToEnv_stub,TA_Network_WeightsToEnv_MethArgs},
  {&TA_int,NULL,"ReplaceUnitSpec"," switch any units/layers using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Network_ReplaceUnitSpec_stub,TA_Network_ReplaceUnitSpec_MethArgs},
  {&TA_int,NULL,"ReplaceConSpec"," switch any connections/projections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Network_ReplaceConSpec_stub,TA_Network_ReplaceConSpec_MethArgs},
  {&TA_int,NULL,"ReplacePrjnSpec"," switch any projections using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Network_ReplacePrjnSpec_stub,TA_Network_ReplacePrjnSpec_MethArgs},
  {&TA_int,NULL,"ReplaceLayerSpec"," switch any layers using old_sp to using new_sp","","",
    0,2,-1,0,NULL,cssElCFun_Network_ReplaceLayerSpec_stub,TA_Network_ReplaceLayerSpec_MethArgs},
  {&TA_Layer_ptr,NULL,"FindMakeLayer"," find a given layer and if not found, make it (of default type if NULL) (if nm is not found and alt_nm != NULL, it is searched for)","","",
    0,4,1,0,NULL,cssElCFun_Network_FindMakeLayer_stub,TA_Network_FindMakeLayer_MethArgs},
  {&TA_Layer_ptr,NULL,"FindLayer","","","",
    0,1,-1,0,NULL,cssElCFun_Network_FindLayer_stub,TA_Network_FindLayer_MethArgs},
  {&TA_Projection_ptr,NULL,"FindMakePrjn"," find a projection between two layers using given specs, make it if not found; if existing prjn between layers exists, it will be modified with current specs","","",
    0,5,2,0,NULL,cssElCFun_Network_FindMakePrjn_stub,TA_Network_FindMakePrjn_MethArgs},
  {&TA_Projection_ptr,NULL,"FindMakePrjnAdd"," find a projection between two layers using given specs, make it if not found; if existing prjn between layers exists but has diff specs, a new prjn is made","","",
    0,5,2,0,NULL,cssElCFun_Network_FindMakePrjnAdd_stub,TA_Network_FindMakePrjnAdd_MethArgs},
  {&TA_Projection_ptr,NULL,"FindMakeSelfPrjn"," find a self projection using given specs, make it if not found; if existing self prjn exists, it will be modified with current specs","","",
    0,4,1,0,NULL,cssElCFun_Network_FindMakeSelfPrjn_stub,TA_Network_FindMakeSelfPrjn_MethArgs},
  {&TA_Projection_ptr,NULL,"FindMakeSelfPrjnAdd"," find a self projection using given specs, make it if not found; if existing self prjn exists but has diff specs, a new prjn is made","","",
    0,4,1,0,NULL,cssElCFun_Network_FindMakeSelfPrjnAdd_stub,TA_Network_FindMakeSelfPrjnAdd_MethArgs},
  {&TA_bool,NULL,"RemovePrjn"," remove a projection between two layers, if it exists","","",
    0,4,2,0,NULL,cssElCFun_Network_RemovePrjn_stub,TA_Network_RemovePrjn_MethArgs},
  {&TA_bool,NULL,"RemoveLayer"," remove layer with given name, if it exists","","",
    0,1,-1,0,NULL,cssElCFun_Network_RemoveLayer_stub,TA_Network_RemoveLayer_MethArgs},
  NULL};
static EnumDef_data TA_Project_ViewColors[]={
  {"TEXT","","",0},
  {"BACKGROUND","","",1},
  {"NETWORK","","",2},
  {"ENVIRONMENT","","",3},
  {"SCHED_PROC","","",4},
  {"STAT_GROUP","","",5},
  {"SUBPROC_GROUP","","",6},
  {"STAT_PROC","","",7},
  {"OTHER_PROC","","",8},
  {"PDPLOG","","",9},
  {"STAT_AGG","","",10},
  {"GEN_GROUP","","",11},
  {"INACTIVE","","",12},
  {"STOP_CRIT","","",13},
  {"AGG_STAT","","",14},
  {"CON_SPEC","","",15},
  {"UNIT_SPEC","","",16},
  {"PRJN_SPEC","","",17},
  {"LAYER_SPEC","","",18},
  {"WIZARD","","",19},
  {"COLOR_COUNT","","",20},
  NULL};
static int Project::* TA_Project_MbrOff;
static MemberDef_data TA_Project_MemberDef[]={
  {&TA_TypeDefault_MGroup,NULL,"defaults"," default initial settings for objects","NO_FIND NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::defaults))),0,NULL,0},
  {&TA_Wizard_MGroup,NULL,"wizards"," Wizards for automatically configuring simulation objects","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::wizards))),0,NULL,0},
  {&TA_BaseSpec_MGroup,NULL,"specs"," Specifications for network parameters","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::specs))),0,NULL,0},
  {&TA_Network_MGroup,NULL,"networks"," Networks of interconnected units","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::networks))),0,NULL,0},
  {&TA_Environment_MGroup,NULL,"environments"," Environments of patterns to present to networks TODO: chg to List","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::environments))),0,NULL,0},
  {&TA_Process_MGroup,NULL,"processes"," Processes to coordinate training/testing, etc","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::processes))),0,NULL,0},
  {&TA_PDPLog_MGroup,NULL,"logs"," Logs to display statistics in processes","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::logs))),0,NULL,0},
  {&TA_Script_MGroup,NULL,"scripts"," Scripts to control arbitrary actions","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::scripts))),0,NULL,0},
  {&TA_SelectEdit_MGroup,NULL,"edits"," special edit dialogs for selected elements","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::edits))),0,NULL,0},
  {&TA_DataViewer_List,NULL,"viewers"," any open viewers TODO: make HIDDEN in release version","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::viewers))),0,NULL,0},
  {&TA_bool,NULL,"save_rmv_units"," remove units from network before saving (makes project file much smaller!)","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::save_rmv_units))),0,NULL,0},
  {&TA_bool,NULL,"use_sim_log"," record project changes in the SimLog file","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::use_sim_log))),0,NULL,0},
  {&TA_taString,NULL,"prev_file_nm"," previous file name for this project","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::prev_file_nm))),0,NULL,0},
  {&TA_taString,NULL,"desc1"," description of the project","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::desc1))),0,NULL,0},
  {&TA_taString,NULL,"desc2","","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::desc2))),0,NULL,0},
  {&TA_taString,NULL,"desc3","","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::desc3))),0,NULL,0},
  {&TA_taString,NULL,"desc4"," parameters for controlling the view","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::desc4))),0,NULL,0},
  {&TA_RGBA_List,NULL,"view_colors"," colors to use in the project view","","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::view_colors))),0,NULL,0},
  {&TA_bool,NULL,"mnu_updating"," if menu is already being updated (don't init display)","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::mnu_updating))),0,NULL,0},
  {&TA_bool,NULL,"deleting"," if object is currently being deleted","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Project_MbrOff=(int Project::*)(&Project::deleting))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Project_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_Project_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Project_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Project_MakeDefaultWiz_MethArgs[]={
  {&TA_bool,NULL,"auto_opn",""},
  NULL};
static MethodArgs_data TA_Project_FindMakeSpecGp_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_Project_OpenNetworkViewer_MethArgs[]={
  {&TA_Network_ptr,NULL,"net"," ((void *)0)"},
  NULL};
static MethodDef_data TA_Project_MethodDef[]={
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    1,2,1,0,NULL,cssElCFun_Project_Load_stub,TA_Project_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    1,3,1,0,NULL,cssElCFun_Project_Save_stub,TA_Project_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    1,3,1,0,NULL,cssElCFun_Project_SaveAs_stub,TA_Project_SaveAs_MethArgs},
  {&TA_void,NULL,"LoadDefaults"," load defaults according to root::default_file or precompiled defaults","","",
    0,0,-1,0,NULL,cssElCFun_Project_LoadDefaults_stub,NULL},
  {&TA_void,NULL,"UpdateColors"," update the actual colors based on settings (","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_Project_UpdateColors_stub,NULL},
  {&TA_void,NULL,"GetDefaultColors"," get default colors for various project objects (in view and edit dialogs)","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_Project_GetDefaultColors_stub,NULL},
  {&TA_void,NULL,"MakeDefaultWiz"," make the default wizard(s)","","",
    0,1,-1,0,NULL,cssElCFun_Project_MakeDefaultWiz_stub,TA_Project_MakeDefaultWiz_MethArgs},
  {&TA_BaseSpec_MGroup_ptr,NULL,"FindMakeSpecGp"," find a given spec group and if not found, make it","","",
    0,2,1,0,NULL,cssElCFun_Project_FindMakeSpecGp_stub,TA_Project_FindMakeSpecGp_MethArgs},
  {&TA_pdpDataViewer_ptr,NULL,"NewViewer"," create a new, empty viewer -- note: window not opened yet","","",
    0,0,-1,0,NULL,cssElCFun_Project_NewViewer_stub,NULL},
  {&TA_void,NULL,"OpenNetworkViewer"," open a viewer on this indicated network","MENU ","",
    0,1,0,0,NULL,cssElCFun_Project_OpenNetworkViewer_stub,TA_Project_OpenNetworkViewer_MethArgs},
  {&TA_void,NULL,"UpdateSimLog"," update simulation log (SimLog) for this project, storing the name of the project and the description as entered here. click off use_simlog if you are not using this feature","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Project_UpdateSimLog_stub,NULL},
  NULL};
static int PDPRoot::* TA_PDPRoot_MbrOff;
static MemberDef_data TA_PDPRoot_MemberDef[]={
  {&TA_taString,NULL,"version_no"," current version number","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_PDPRoot_MbrOff=(int PDPRoot::*)(&PDPRoot::version_no))),0,NULL,0},
  {&TA_taString,NULL,"default_file"," default name of defaults file","","",
    *((ta_memb_ptr*)&(TA_PDPRoot_MbrOff=(int PDPRoot::*)(&PDPRoot::default_file))),0,NULL,0},
  {&TA_Project_MGroup,NULL,"projects"," The projects","","",
    *((ta_memb_ptr*)&(TA_PDPRoot_MbrOff=(int PDPRoot::*)(&PDPRoot::projects))),0,NULL,0},
  {&TA_ColorScaleSpec_MGroup,NULL,"colorspecs"," Color Specs -- aliased in projects (for browser)","","",
    *((ta_memb_ptr*)&(TA_PDPRoot_MbrOff=(int PDPRoot::*)(&PDPRoot::colorspecs))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PDPRoot_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_PDPRoot_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_PDPRoot_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_PDPRoot_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_PDPRoot_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_PDPRoot_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_PDPRoot_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_PDPRoot_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_PDPRoot_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_PDPRoot_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_PDPRoot_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_PDPRoot_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_PDPRoot_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_PDPRoot_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_PDPRoot_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_PDPRoot_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_PDPRoot_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_PDPRoot_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_PDPRoot_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_PDPRoot_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_PDPRoot_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_PDPRoot_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_PDPRoot_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_PDPRoot_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_PDPRoot_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_PDPRoot_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_PDPRoot_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_PDPRoot_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_PDPRoot_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_PDPRoot_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_PDPRoot_Browse_MethArgs[]={
  {&TA_const_char_ptr,NULL,"init_path","((void *)0)"},
  NULL};
static MethodDef_data TA_PDPRoot_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_PDPRoot_GetColText_stub,TA_PDPRoot_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_PDPRoot_ChildQueryEditActions_stub,TA_PDPRoot_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_PDPRoot_ChildEditAction_stub,TA_PDPRoot_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_PDPRoot_QueryEditActions_stub,TA_PDPRoot_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_PDPRoot_EditAction_stub,TA_PDPRoot_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_UnSafeCopy_stub,TA_PDPRoot_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_CastCopyTo_stub,TA_PDPRoot_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_PDPRoot_GetOwner_stub,TA_PDPRoot_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_PDPRoot_GetPath_stub,TA_PDPRoot_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_PDPRoot_FindFromPath_stub,TA_PDPRoot_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_PDPRoot_New_stub,TA_PDPRoot_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_StructUpdate_stub,TA_PDPRoot_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_DataUpdate_stub,TA_PDPRoot_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_AddDataView_stub,TA_PDPRoot_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_RemoveDataView_stub,TA_PDPRoot_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_PDPRoot_InheritsFrom_stub,TA_PDPRoot_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_PDPRoot_GetEnumString_stub,TA_PDPRoot_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_PDPRoot_GetEnumVal_stub,TA_PDPRoot_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_PDPRoot_Load_stub,TA_PDPRoot_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_PDPRoot_Save_stub,TA_PDPRoot_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_PDPRoot_SaveAs_stub,TA_PDPRoot_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_PDPRoot_ReShowEdit_stub,TA_PDPRoot_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_CopyFrom_stub,TA_PDPRoot_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_CopyTo_stub,TA_PDPRoot_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_PDPRoot_ChildUpdateAfterEdit_stub,TA_PDPRoot_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_ChangeMyType_stub,TA_PDPRoot_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_PDPRoot_SelectForEdit_stub,TA_PDPRoot_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_PDPRoot_SelectFunForEdit_stub,TA_PDPRoot_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_CallFun_stub,TA_PDPRoot_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_PDPRoot_SetAdapter_stub,TA_PDPRoot_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_addr_data_link_stub,NULL},
  {&TA_void,NULL,"Settings"," edit global settings/parameters (taMisc)","MENU MENU_ON_Object ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_Settings_stub,NULL},
  {&TA_void,NULL,"SaveConfig"," save current configuration to file ~/.pdpconfig that is automatically loaded at startup: IMPORTANT: DO NOT HAVE A PROJECT LOADED!","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_SaveConfig_stub,NULL},
  {&TA_void,NULL,"LoadConfig"," load current configuration from file ~/.pdpconfig that is automatically loaded at startup","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_LoadConfig_stub,NULL},
  {&TA_void,NULL,"Info"," get information/copyright notice","MENU ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_Info_stub,NULL},
  {&TA_void,NULL,"Quit"," quit from software..","MENU CONFIRM MENU_SEP_BEFORE NO_REVERT_AFTER ","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_Quit_stub,NULL},
  {&TA_void,NULL,"SaveAll"," saves all the contents of the app object","","",
    0,0,-1,0,NULL,cssElCFun_PDPRoot_SaveAll_stub,NULL},
  {&TA_TAPtr,NULL,"Browse"," use object browser to find an object, starting with initial path if given","MENU ARGC_0 USE_RVAL NO_REVERT_AFTER ","",
    0,1,0,0,NULL,cssElCFun_PDPRoot_Browse_stub,TA_PDPRoot_Browse_MethArgs},
  NULL};
static EnumDef_data TA_EventSpec_PatternLayout[]={
  {"DEFAULT","","",0},
  {"HORIZONTAL","","",1},
  {"VERTICAL","","",2},
  NULL};
static int EventSpec::* TA_EventSpec_MbrOff;
static MemberDef_data TA_EventSpec_MemberDef[]={
  {&TA_Network_ptr,NULL,"last_net"," last network events applied to","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_EventSpec_MbrOff=(int EventSpec::*)(&EventSpec::last_net))),0,NULL,0},
  {&TA_PatternSpec_Group,NULL,"patterns"," group of pattern specs (one-to-one with patterns)","IN_GPMENU NO_INHERIT ","",
    *((ta_memb_ptr*)&(TA_EventSpec_MbrOff=(int EventSpec::*)(&EventSpec::patterns))),0,NULL,0},
  {NULL,"::PatternLayout","pattern_layout"," determines the layout of patterns within an event (just for display purposes)","","",
    *((ta_memb_ptr*)&(TA_EventSpec_MbrOff=(int EventSpec::*)(&EventSpec::pattern_layout))),0,NULL,0},
  NULL};
static MethodArgs_data TA_EventSpec_ApplyPatterns_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_EventSpec_SetLayers_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_EventSpec_NewEvent_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  NULL};
static MethodArgs_data TA_EventSpec_UpdateEvent_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  NULL};
static MethodArgs_data TA_EventSpec_ApplyNames_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_EventSpec_LinearLayout_MethArgs[]={
  {NULL,"::PatternLayout","pat_layout"," DEFAULT"},
  NULL};
static MethodArgs_data TA_EventSpec_AutoNameEvent_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_int,NULL,"max_pat_nm"," 3"},
  {&TA_int,NULL,"max_val_nm"," 3"},
  NULL};
static MethodArgs_data TA_EventSpec_AutoNameAllEvents_MethArgs[]={
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_int,NULL,"max_pat_nm"," 3"},
  {&TA_int,NULL,"max_val_nm"," 3"},
  NULL};
static MethodDef_data TA_EventSpec_MethodDef[]={
  {&TA_void,NULL,"ApplyPatterns"," apply patterns to the network","","",
    0,2,-1,0,NULL,cssElCFun_EventSpec_ApplyPatterns_stub,TA_EventSpec_ApplyPatterns_MethArgs},
  {&TA_void,NULL,"SetLayers"," set layers according to given net","","",
    0,1,-1,0,NULL,cssElCFun_EventSpec_SetLayers_stub,TA_EventSpec_SetLayers_MethArgs},
  {&TA_void,NULL,"UnSetLayers"," clear layer pointers (and last_net)","","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_UnSetLayers_stub,NULL},
  {&TA_int,NULL,"MaxX"," maximum X coordinate of patterns","","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_MaxX_stub,NULL},
  {&TA_int,NULL,"MaxY"," maximum Y coordinate of patterns","","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_MaxY_stub,NULL},
  {&TA_void,NULL,"NewEvent"," defines a new event in my image","","",
    0,1,-1,0,NULL,cssElCFun_EventSpec_NewEvent_stub,TA_EventSpec_NewEvent_MethArgs},
  {&TA_void,NULL,"UpdateEvent"," updates existing event to current spec settings","","",
    0,1,-1,0,NULL,cssElCFun_EventSpec_UpdateEvent_stub,TA_EventSpec_UpdateEvent_MethArgs},
  {&TA_void,NULL,"UpdateAllEvents"," update all events using this event spec","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_UpdateAllEvents_stub,NULL},
  {&TA_void,NULL,"UpdateFromLayers"," set configuration of all pattern specs based on their corresponding layer in the network","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_UpdateFromLayers_stub,NULL},
  {&TA_void,NULL,"ApplyNames"," set the names of units in the network according to the value_names on the pattern specs","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_EventSpec_ApplyNames_stub,TA_EventSpec_ApplyNames_MethArgs},
  {&TA_void,NULL,"LinearLayout"," Layout PatternSpecs in a line going either horizontal or vertical (just for display purposes)","MENU MENU_ON_Actions ","",
    0,1,0,0,NULL,cssElCFun_EventSpec_LinearLayout_stub,TA_EventSpec_LinearLayout_MethArgs},
  {&TA_void,NULL,"AutoNameEvent"," automatically name event based on the pattern names and value (unit) names for those units above act_thresh, e.g., Inp:vl1_vl2,Out:vl1_vl2","","",
    0,4,1,0,NULL,cssElCFun_EventSpec_AutoNameEvent_stub,TA_EventSpec_AutoNameEvent_MethArgs},
  {&TA_void,NULL,"AutoNameAllEvents"," automatically name all events that use this spec based on the pattern names and value (unit) names for those units above act_thresh, e.g., Inp:vl1_vl2,Out:vl1_vl2","BUTTON ","",
    0,3,0,0,NULL,cssElCFun_EventSpec_AutoNameAllEvents_stub,TA_EventSpec_AutoNameAllEvents_MethArgs},
  {&TA_bool,NULL,"DetectOverlap"," determine if the patterns overlap on top of each other","","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_DetectOverlap_stub,NULL},
  {&TA_void,NULL,"AddToView"," add event to view(s)","","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_AddToView_stub,NULL},
  {&TA_void,NULL,"RemoveFromView"," remove event from view(s)","","",
    0,0,-1,0,NULL,cssElCFun_EventSpec_RemoveFromView_stub,NULL},
  NULL};
static int Pattern::* TA_Pattern_MbrOff;
static MemberDef_data TA_Pattern_MemberDef[]={
  {&TA_float_RArray,NULL,"value"," Values of Pattern","","",
    *((ta_memb_ptr*)&(TA_Pattern_MbrOff=(int Pattern::*)(&Pattern::value))),0,NULL,0},
  {&TA_int_Array,NULL,"flag"," Flags of Pattern","","",
    *((ta_memb_ptr*)&(TA_Pattern_MbrOff=(int Pattern::*)(&Pattern::flag))),0,NULL,0},
  NULL};
static int Event::* TA_Event_MbrOff;
static MemberDef_data TA_Event_MemberDef[]={
  {&TA_int,NULL,"index"," Index of this event within group","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Event_MbrOff=(int Event::*)(&Event::index))),0,NULL,0},
  {&TA_Pattern_Group,NULL,"patterns"," group of patterns","NO_SAVE_PATH_R ","",
    *((ta_memb_ptr*)&(TA_Event_MbrOff=(int Event::*)(&Event::patterns))),0,NULL,0},
  {&TA_EventSpec_SPtr,NULL,"spec"," determines the configuration of patterns and how they are presented to the network","","",
    *((ta_memb_ptr*)&(TA_Event_MbrOff=(int Event::*)(&Event::spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Event_ApplyPatterns_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_Event_SetSpec_MethArgs[]={
  {&TA_EventSpec_ptr,NULL,"es",""},
  NULL};
static MethodArgs_data TA_Event_PresentEvent_MethArgs[]={
  {&TA_TrialProcess_ptr,NULL,"trial_proc",""},
  {&TA_bool,NULL,"new_init","false"},
  NULL};
static MethodArgs_data TA_Event_AutoNameEvent_MethArgs[]={
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_int,NULL,"max_pat_nm"," 3"},
  {&TA_int,NULL,"max_val_nm"," 3"},
  NULL};
static MethodDef_data TA_Event_MethodDef[]={
  {&TA_void,NULL,"ApplyPatterns","","","",
    0,1,-1,0,NULL,cssElCFun_Event_ApplyPatterns_stub,TA_Event_ApplyPatterns_MethArgs},
  {&TA_void,NULL,"GetLocalSpec"," get event spec that is local to enviro","","",
    0,0,-1,0,NULL,cssElCFun_Event_GetLocalSpec_stub,NULL},
  {&TA_void,NULL,"SetSpec"," set the spec to this spec, and update the event to fit this spec","","",
    0,1,-1,0,NULL,cssElCFun_Event_SetSpec_stub,TA_Event_SetSpec_MethArgs},
  {&TA_void,NULL,"UpdateFmSpec"," update event configuration to fit current spec","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_Event_UpdateFmSpec_stub,NULL},
  {&TA_void,NULL,"AddToView"," add event to view(s)","","",
    0,0,-1,0,NULL,cssElCFun_Event_AddToView_stub,NULL},
  {&TA_void,NULL,"RemoveFromView"," remove event from view(s)","","",
    0,0,-1,0,NULL,cssElCFun_Event_RemoveFromView_stub,NULL},
  {&TA_void,NULL,"PresentEvent"," present this event to the given trial process, which is ReInit (or new_init) and run","BUTTON ","",
    0,2,1,0,NULL,cssElCFun_Event_PresentEvent_stub,TA_Event_PresentEvent_MethArgs},
  {&TA_void,NULL,"AutoNameEvent"," automatically name event based on the pattern names and value (unit) names for those units above act_thresh, e.g., Inp:vl1_vl2,Out:vl1_vl2","BUTTON ","",
    0,3,0,0,NULL,cssElCFun_Event_AutoNameEvent_stub,TA_Event_AutoNameEvent_MethArgs},
  NULL};
static EnumDef_data TA_Environment_TextFmt[]={
  {"NAME_FIRST"," save file with names as first column","",0},
  {"NAME_LAST"," save file with names as last column","",1},
  {"NO_NAME"," no names at all in file..","",2},
  NULL};
static EnumDef_data TA_Environment_DistMatFmt[]={
  {"STD_PRINT"," standard printout format","",0},
  {"PRINT_NO_LABELS"," standard printout with no event names or other labels","",1},
  {"GRID_LOG"," grid log format for importing into a grid log","",2},
  NULL};
static int Environment::* TA_Environment_MbrOff;
static MemberDef_data TA_Environment_MemberDef[]={
  {&TA_BaseSpec_MGroup,NULL,"event_specs"," specs for events: controls the layout and configuration of events","","",
    *((ta_memb_ptr*)&(TA_Environment_MbrOff=(int Environment::*)(&Environment::event_specs))),0,NULL,0},
  {&TA_Event_MGroup,NULL,"events"," the events, contain patterns that map onto layers of the network","","",
    *((ta_memb_ptr*)&(TA_Environment_MbrOff=(int Environment::*)(&Environment::events))),0,NULL,0},
  {&TA_int,NULL,"event_ctr"," counter for interactive interface with environment: number of events processed since last InitEvents()","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Environment_MbrOff=(int Environment::*)(&Environment::event_ctr))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Environment_GetEvent_MethArgs[]={
  {&TA_int,NULL,"ev_index",""},
  NULL};
static MethodArgs_data TA_Environment_GetGroup_MethArgs[]={
  {&TA_int,NULL,"gp_index",""},
  NULL};
static MethodArgs_data TA_Environment_UnitNamesToNet_MethArgs[]={
  {&TA_EventSpec_ptr,NULL,"event_spec_with_names"," ((void *)0)"},
  {&TA_Network_ptr,NULL,"network"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Environment_MakeNetIOLayers_MethArgs[]={
  {&TA_EventSpec_ptr,NULL,"event_spec",""},
  {&TA_Network_ptr,NULL,"network",""},
  NULL};
static MethodArgs_data TA_Environment_AutoNameAllEvents_MethArgs[]={
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_int,NULL,"max_pat_nm"," 3"},
  {&TA_int,NULL,"max_val_nm"," 3"},
  NULL};
static MethodArgs_data TA_Environment_ReadText_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_EventSpec_ptr,NULL,"es",""},
  {NULL,"::TextFmt","fmt"," NAME_FIRST"},
  NULL};
static MethodArgs_data TA_Environment_WriteText_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"pat_no"," -1"},
  {NULL,"::TextFmt","fmt"," NAME_FIRST"},
  NULL};
static MethodArgs_data TA_Environment_ReadBinary_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_EventSpec_ptr,NULL,"es",""},
  NULL};
static MethodArgs_data TA_Environment_WriteBinary_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_Environment_ReplicateEvents_MethArgs[]={
  {&TA_int,NULL,"n_replicas",""},
  {&TA_bool,NULL,"make_groups","false"},
  NULL};
static MethodArgs_data TA_Environment_PermutedBinary_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_on",""},
  NULL};
static MethodArgs_data TA_Environment_PermutedBinary_MinDist_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_on",""},
  {&TA_float,NULL,"dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_FlipBits_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_off",""},
  {&TA_int,NULL,"n_on",""},
  NULL};
static MethodArgs_data TA_Environment_FlipBits_MinMax_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_off",""},
  {&TA_int,NULL,"n_on",""},
  {&TA_float,NULL,"min_dist",""},
  {&TA_float,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_FlipBits_GpMinMax_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_off",""},
  {&TA_int,NULL,"n_on",""},
  {&TA_float,NULL,"within_min_dist",""},
  {&TA_float,NULL,"within_max_dist",""},
  {&TA_float,NULL,"between_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {&TA_int,NULL,"st_gp","0"},
  {&TA_int,NULL,"ed_gp","-1"},
  NULL};
static MethodArgs_data TA_Environment_PermutedBinaryPat_MethArgs[]={
  {&TA_Pattern_ptr,NULL,"pat",""},
  {&TA_int,NULL,"n_on",""},
  {&TA_float,NULL,"on_val","1.0f"},
  {&TA_float,NULL,"off_val","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_FlipBitsPat_MethArgs[]={
  {&TA_Pattern_ptr,NULL,"pat",""},
  {&TA_int,NULL,"n_off",""},
  {&TA_int,NULL,"n_on",""},
  NULL};
static MethodArgs_data TA_Environment_AddNoisePat_MethArgs[]={
  {&TA_Pattern_ptr,NULL,"pat",""},
  {&TA_const_Random_ref,NULL,"rnd_spec",""},
  NULL};
static MethodArgs_data TA_Environment_LastMinDist_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_LastMinMaxDist_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_GpWithinMinMaxDist_MethArgs[]={
  {&TA_Event_MGroup_ptr,NULL,"gp",""},
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_GpLastMinMaxDist_MethArgs[]={
  {&TA_int,NULL,"gp_no",""},
  {&TA_Pattern_ptr,NULL,"trg_pat",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {&TA_int,NULL,"st_gp","0"},
  NULL};
static MethodArgs_data TA_Environment_GpMinMaxDist_MethArgs[]={
  {&TA_Event_MGroup_ptr,NULL,"gp",""},
  {&TA_Pattern_ptr,NULL,"trg_pat",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_Clear_MethArgs[]={
  {&TA_int,NULL,"pat_no","-1"},
  {&TA_float,NULL,"val"," 0.0"},
  NULL};
static MethodArgs_data TA_Environment_AddNoise_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_const_Random_ref,NULL,"rnd_spec",""},
  NULL};
static MethodArgs_data TA_Environment_TransformPats_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_Environment_DistMatrix_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {NULL,"::DistMatFmt","format","STD_PRINT"},
  {&TA_int,NULL,"precision"," -1"},
  NULL};
static MethodArgs_data TA_Environment_DistArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"dist_ary",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_GpDistArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"within_dist_ary",""},
  {&TA_float_RArray_ref,NULL,"between_dist_ary",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_CmpDistMatrix_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Environment_ptr,NULL,"cmp_env",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {NULL,"::DistMatFmt","format","STD_PRINT"},
  NULL};
static MethodArgs_data TA_Environment_CmpDistArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"dist_ary",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Environment_ptr,NULL,"cmp_env",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_CmpDistArrayPat_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"dist_ary",""},
  {&TA_Pattern_ptr,NULL,"trg_pat",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_ValOverEventsArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ary",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"val_no",""},
  NULL};
static MethodArgs_data TA_Environment_CorrelMatrix_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"mat",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int_ref,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_Environment_PCAEigens_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"evecs",""},
  {&TA_float_RArray_ref,NULL,"evals",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int_ref,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_Environment_ProjectPatterns_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"prjn_vector",""},
  {&TA_float_RArray_ref,NULL,"vals",""},
  {&TA_int,NULL,"pat_no",""},
  NULL};
static MethodArgs_data TA_Environment_PatFreqArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"freqs",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_bool,NULL,"proportion"," false"},
  NULL};
static MethodArgs_data TA_Environment_PatFreqText_MethArgs[]={
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_bool,NULL,"proportion"," false"},
  {&TA_ostream_ref,NULL,"strm"," cerr"},
  NULL};
static MethodArgs_data TA_Environment_PatAggArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"agg_vals",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_Environment_PatAggText_MethArgs[]={
  {&TA_Aggregate_ref,NULL,"agg",""},
  {&TA_ostream_ref,NULL,"strm"," cerr"},
  NULL};
static MethodArgs_data TA_Environment_EventFreqText_MethArgs[]={
  {&TA_bool,NULL,"proportion"," false"},
  {&TA_ostream_ref,NULL,"strm"," cerr"},
  NULL};
static MethodArgs_data TA_Environment_DistMatrixGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_CmpDistMatrixGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Environment_ptr,NULL,"cmp_env",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_ClusterPlot_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::EUCLIDIAN"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_Environment_CorrelMatrixGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  NULL};
static MethodArgs_data TA_Environment_PCAEigenGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodArgs_data TA_Environment_PCAPrjnPlot_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"x_axis_component","0"},
  {&TA_int,NULL,"y_axis_component","1"},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodArgs_data TA_Environment_MDSPrjnPlot_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"x_axis_component","0"},
  {&TA_int,NULL,"y_axis_component","1"},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::EUCLIDIAN"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0"},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodArgs_data TA_Environment_EventPrjnPlot_MethArgs[]={
  {&TA_Event_ptr,NULL,"x_axis_event",""},
  {&TA_Event_ptr,NULL,"y_axis_event",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::INNER_PROD"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0"},
  NULL};
static MethodArgs_data TA_Environment_EnvToGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"ev_x","-1"},
  {&TA_int,NULL,"ev_y","-1"},
  {&TA_int,NULL,"pt_x","-1"},
  {&TA_int,NULL,"pt_y","-1"},
  NULL};
static MethodArgs_data TA_Environment_PatFreqGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_bool,NULL,"proportion"," false"},
  NULL};
static MethodArgs_data TA_Environment_PatAggGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodDef_data TA_Environment_MethodDef[]={
  {&TA_void,NULL,"InitEvents"," initialize events for an epoch (eg, if algorithmically created)","MENU MENU_ON_Actions UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_Environment_InitEvents_stub,NULL},
  {&TA_void,NULL,"UnSetLayers"," reset layer pointers on patterns so they are automatically recomputed when events are presented","","",
    0,0,-1,0,NULL,cssElCFun_Environment_UnSetLayers_stub,NULL},
  {&TA_void,NULL,"UpdateAllEvents"," update all events from their event specs","MENU MENU_ON_Actions CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Environment_UpdateAllEvents_stub,NULL},
  {&TA_void,NULL,"UpdateAllEventSpecs"," update all event specs based on the current configuration of the default network","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Environment_UpdateAllEventSpecs_stub,NULL},
  {&TA_int,NULL,"EventCount"," number of events in environment","MENU MENU_ON_Actions USE_RVAL MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_Environment_EventCount_stub,NULL},
  {&TA_Event_ptr,NULL,"GetEvent"," get the event at given index in a flat list of all events in the environment","","",
    0,1,-1,0,NULL,cssElCFun_Environment_GetEvent_stub,TA_Environment_GetEvent_MethArgs},
  {&TA_int,NULL,"GroupCount"," number of event groups in environment","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_Environment_GroupCount_stub,NULL},
  {&TA_Event_MGroup_ptr,NULL,"GetGroup"," get the event group (collection of events) at the specified index of all groups in the environment","","",
    0,1,-1,0,NULL,cssElCFun_Environment_GetGroup_stub,TA_Environment_GetGroup_MethArgs},
  {&TA_Event_ptr,NULL,"GetNextEvent"," return the next event for processing (or NULL to end epoch): interface for the interactive environment model (hook for generating new event based on current state)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Environment_GetNextEvent_stub,NULL},
  {&TA_void,NULL,"UnitNamesToNet"," copy names from pattern spec value_names to corresponding units in the network. uses default event spec and network if NULL","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,2,0,0,NULL,cssElCFun_Environment_UnitNamesToNet_stub,TA_Environment_UnitNamesToNet_MethArgs},
  {&TA_void,NULL,"MakeNetIOLayers"," configure network input/output layers based on patterns in event_spec","MENU ","",
    0,2,-1,0,NULL,cssElCFun_Environment_MakeNetIOLayers_stub,TA_Environment_MakeNetIOLayers_MethArgs},
  {&TA_void,NULL,"AutoNameAllEvents"," automatically name all events based on the pattern names and value (unit) names for those units above act_thresh, e.g., Inp:vl1_vl2,Out:vl1_vl2","MENU ","",
    0,3,0,0,NULL,cssElCFun_Environment_AutoNameAllEvents_stub,TA_Environment_AutoNameAllEvents_MethArgs},
  {&TA_void,NULL,"ReadText"," Read text-formatted event/pattern files, including old pdp files, (using given event spec, -1=default)","MENU MENU_ON_Object MENU_SEP_BEFORE EXT_strm_pat UPDATE_MENUS ","",
    0,3,2,0,NULL,cssElCFun_Environment_ReadText_stub,TA_Environment_ReadText_MethArgs},
  {&TA_void,NULL,"WriteText"," Save enviro in text format: pat_no of -1 gives all pats, fmt for name","MENU EXT_strm_pat ","",
    0,3,1,0,NULL,cssElCFun_Environment_WriteText_stub,TA_Environment_WriteText_MethArgs},
  {&TA_void,NULL,"ReadBinary"," read event pattern information in binary format (just the numbers only)","MENU EXT_strm_pat ","",
    0,2,-1,0,NULL,cssElCFun_Environment_ReadBinary_stub,TA_Environment_ReadBinary_MethArgs},
  {&TA_void,NULL,"WriteBinary"," write event pattern information in binary format (just the numbers only)","MENU EXT_strm_pat ","",
    0,1,-1,0,NULL,cssElCFun_Environment_WriteBinary_stub,TA_Environment_WriteBinary_MethArgs},
  {&TA_void,NULL,"ReplicateEvents"," replicate existing events, optionally placing in groups","MENU MENU_ON_Generate UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_Environment_ReplicateEvents_stub,TA_Environment_ReplicateEvents_MethArgs},
  {&TA_void,NULL,"PermutedBinary"," create permuted binary patterns of n_on 1's and rest 0's (pat_no: -1 = all pats)","MENU MENU_SEP_BEFORE ","",
    0,2,-1,0,NULL,cssElCFun_Environment_PermutedBinary_stub,TA_Environment_PermutedBinary_MethArgs},
  {&TA_void,NULL,"PermutedBinary_MinDist"," create permuted binary patterns with dist minimum hamming distance (or dist max_correl) (pat_no: -1 = all pats)","MENU ","",
    0,6,3,0,NULL,cssElCFun_Environment_PermutedBinary_MinDist_stub,TA_Environment_PermutedBinary_MinDist_MethArgs},
  {&TA_void,NULL,"FlipBits"," flip n_off bits from 1's to 0's, and n_on bits from 0's to 1's (pat_no: -1 = all pats)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_Environment_FlipBits_stub,TA_Environment_FlipBits_MethArgs},
  {&TA_void,NULL,"FlipBits_MinMax"," flip bits, ensuring range within min and max distances (pat_no: -1 = all pats)","MENU ","",
    0,8,5,0,NULL,cssElCFun_Environment_FlipBits_MinMax_stub,TA_Environment_FlipBits_MinMax_MethArgs},
  {&TA_void,NULL,"FlipBits_GpMinMax"," flip bits, ensuring within-group min and max distances, and between-group min dist (pat_no: -1 = all pats)","MENU ","",
    0,11,6,0,NULL,cssElCFun_Environment_FlipBits_GpMinMax_stub,TA_Environment_FlipBits_GpMinMax_MethArgs},
  {&TA_void,NULL,"PermutedBinaryPat"," set pat values to permuted binary pattern of n_on on_vals and rest off_vals (pat_no: -1 = all pats)","","",
    0,4,2,1,(ta_void_fun)(Environment::PermutedBinaryPat),cssElCFun_Environment_PermutedBinaryPat_stub,TA_Environment_PermutedBinaryPat_MethArgs},
  {&TA_void,NULL,"FlipBitsPat"," flip n_off of the 1 bits into the 0 state, and n_on of the 0 bits to the 1 state","","",
    0,3,-1,1,(ta_void_fun)(Environment::FlipBitsPat),cssElCFun_Environment_FlipBitsPat_stub,TA_Environment_FlipBitsPat_MethArgs},
  {&TA_void,NULL,"AddNoisePat"," add random noise to given pattern","","",
    0,2,-1,1,(ta_void_fun)(Environment::AddNoisePat),cssElCFun_Environment_AddNoisePat_stub,TA_Environment_AddNoisePat_MethArgs},
  {&TA_float,NULL,"LastMinDist"," returns minimum distance (or max correl) between last (n th) pattern and all previous","","",
    0,5,2,0,NULL,cssElCFun_Environment_LastMinDist_stub,TA_Environment_LastMinDist_MethArgs},
  {&TA_float,NULL,"LastMinMaxDist"," returns min and max distance between last (n th) pattern and all previous","","",
    0,6,3,0,NULL,cssElCFun_Environment_LastMinMaxDist_stub,TA_Environment_LastMinMaxDist_MethArgs},
  {&TA_float,NULL,"GpWithinMinMaxDist"," returns min and max distance between last (n th) pattern and all previous within group","","",
    0,7,4,0,NULL,cssElCFun_Environment_GpWithinMinMaxDist_stub,TA_Environment_GpWithinMinMaxDist_MethArgs},
  {&TA_float,NULL,"GpLastMinMaxDist"," returns min and max distance between patterns in all groups up to gp_no for pattern pat","","",
    0,8,4,0,NULL,cssElCFun_Environment_GpLastMinMaxDist_stub,TA_Environment_GpLastMinMaxDist_MethArgs},
  {&TA_float,NULL,"GpMinMaxDist"," returns min and max distance between probe pattern and all in group","","",
    0,7,4,0,NULL,cssElCFun_Environment_GpMinMaxDist_stub,TA_Environment_GpMinMaxDist_MethArgs},
  {&TA_void,NULL,"Clear"," clear out given pattern number (set to given val) (pat_no: -1 = all pats)","MENU MENU_SEP_BEFORE CONFIRM ","",
    0,2,0,0,NULL,cssElCFun_Environment_Clear_stub,TA_Environment_Clear_MethArgs},
  {&TA_void,NULL,"AddNoise"," add random noise of specified type to the patterns (pat_no: -1 = all pats)","MENU ","",
    0,2,-1,0,NULL,cssElCFun_Environment_AddNoise_stub,TA_Environment_AddNoise_MethArgs},
  {&TA_void,NULL,"TransformPats"," Apply given transformation to pattern pat_no of all events (pat_no: -1 = all pats)","MENU ","",
    0,2,-1,0,NULL,cssElCFun_Environment_TransformPats_stub,TA_Environment_TransformPats_MethArgs},
  {&TA_void,NULL,"DistMatrix"," output distance matrix for events based on pattern pat_no","MENU EXT_strm_dstmat MENU_ON_Analyze ","",
    0,7,2,0,NULL,cssElCFun_Environment_DistMatrix_stub,TA_Environment_DistMatrix_MethArgs},
  {&TA_void,NULL,"DistArray"," get distance matrix as an upper-triangular matrix (including diagonals) for events based on pattern pat_no","","",
    0,5,2,0,NULL,cssElCFun_Environment_DistArray_stub,TA_Environment_DistArray_MethArgs},
  {&TA_void,NULL,"GpDistArray"," get within group and between group distance matricies as arrays for events based on pattern pat_no","","",
    0,6,3,0,NULL,cssElCFun_Environment_GpDistArray_stub,TA_Environment_GpDistArray_MethArgs},
  {&TA_void,NULL,"CmpDistMatrix"," comparative distance array between two environments","MENU EXT_strm_dstmat ","",
    0,8,4,0,NULL,cssElCFun_Environment_CmpDistMatrix_stub,TA_Environment_CmpDistMatrix_MethArgs},
  {&TA_void,NULL,"CmpDistArray"," comparative distance array between two environments","","",
    0,7,4,0,NULL,cssElCFun_Environment_CmpDistArray_stub,TA_Environment_CmpDistArray_MethArgs},
  {&TA_void,NULL,"CmpDistArrayPat"," compute comparative distance array, one pattern against this environment","","",
    0,6,3,0,NULL,cssElCFun_Environment_CmpDistArrayPat_stub,TA_Environment_CmpDistArrayPat_MethArgs},
  {&TA_void,NULL,"ValOverEventsArray"," extract an array containing values for given value index in pattern pat_no across events","","",
    0,3,-1,0,NULL,cssElCFun_Environment_ValOverEventsArray_stub,TA_Environment_ValOverEventsArray_MethArgs},
  {&TA_void,NULL,"CorrelMatrix"," generate a correlation matrix for all patterns in pat_no in the environment (e.g., correlation of unit 1 with all other units across patterns, etc); dim = dimensionality of correl matrix = no. of vals in pattern","","",
    0,3,-1,0,NULL,cssElCFun_Environment_CorrelMatrix_stub,TA_Environment_CorrelMatrix_MethArgs},
  {&TA_void,NULL,"PCAEigens"," get principal components analysis eigenvectors and eigenvalues of correlation matrix across events for pattern pat_no (dim = dimensionality of correl matrix = no. of vals in pattern)","","",
    0,4,-1,0,NULL,cssElCFun_Environment_PCAEigens_stub,TA_Environment_PCAEigens_MethArgs},
  {&TA_void,NULL,"ProjectPatterns"," project patterns in pat_no onto prjn_vector (dot product), and store resulting array of vals in vals (length = no. of events)","","",
    0,3,-1,0,NULL,cssElCFun_Environment_ProjectPatterns_stub,TA_Environment_ProjectPatterns_MethArgs},
  {&TA_void,NULL,"PatFreqArray"," get frequency (proportion) of pattern activations greater than act_thresh across events","","",
    0,4,2,0,NULL,cssElCFun_Environment_PatFreqArray_stub,TA_Environment_PatFreqArray_MethArgs},
  {&TA_void,NULL,"PatFreqText"," report frequency (proportion) of pattern values greater than act_thresh across events, to a text output (most useful if pattern values are named in value_names)","MENU ARGC_2 ","",
    0,3,0,0,NULL,cssElCFun_Environment_PatFreqText_stub,TA_Environment_PatFreqText_MethArgs},
  {&TA_void,NULL,"PatAggArray"," aggregate pattern pat_no values over events to given array object","","",
    0,3,-1,0,NULL,cssElCFun_Environment_PatAggArray_stub,TA_Environment_PatAggArray_MethArgs},
  {&TA_void,NULL,"PatAggText"," aggregate patterns over events and print aggregated results to a text output (most useful if pattern values are named in value_names)","MENU ARGC_1 ","",
    0,2,1,0,NULL,cssElCFun_Environment_PatAggText_stub,TA_Environment_PatAggText_MethArgs},
  {&TA_void,NULL,"EventFreqText"," report frequency (proportion) of event names in the environment","MENU ARGC_1 ","",
    0,2,0,0,NULL,cssElCFun_Environment_EventFreqText_stub,TA_Environment_EventFreqText_MethArgs},
  {&TA_void,NULL,"DistMatrixGrid"," output to grid log distance matrix for events based on pattern pat_no","MENU NULL_OK ","",
    0,5,2,0,NULL,cssElCFun_Environment_DistMatrixGrid_stub,TA_Environment_DistMatrixGrid_MethArgs},
  {&TA_void,NULL,"CmpDistMatrixGrid"," output to grid log comparative distance matrix between two environments","MENU NULL_OK ","",
    0,7,4,0,NULL,cssElCFun_Environment_CmpDistMatrixGrid_stub,TA_Environment_CmpDistMatrixGrid_MethArgs},
  {&TA_void,NULL,"ClusterPlot"," produce a cluster plot (in graph log, NULL = make a new one) of the given pat_no across events","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,5,2,0,NULL,cssElCFun_Environment_ClusterPlot_stub,TA_Environment_ClusterPlot_MethArgs},
  {&TA_void,NULL,"CorrelMatrixGrid"," generate a correlation matrix for all patterns in pat_no in the environment (e.g., correlation of unit 1 with all other units across patterns, etc) and plot result in grid log (NULL = new log)","MENU NULL_OK ","",
    0,2,-1,0,NULL,cssElCFun_Environment_CorrelMatrixGrid_stub,TA_Environment_CorrelMatrixGrid_MethArgs},
  {&TA_void,NULL,"PCAEigenGrid"," perform principal components analysis of the correlations of patterns in pat_no across events, plotting all eigenvectors in the grid log (NULL = new log)","MENU NULL_OK ","",
    0,3,2,0,NULL,cssElCFun_Environment_PCAEigenGrid_stub,TA_Environment_PCAEigenGrid_MethArgs},
  {&TA_void,NULL,"PCAPrjnPlot"," perform principal components analysis of the correlations of patterns in pat_no across events, plotting projections of patterns on the given principal components in the graph log (NULL = new log)","MENU NULL_OK ","",
    0,5,2,0,NULL,cssElCFun_Environment_PCAPrjnPlot_stub,TA_Environment_PCAPrjnPlot_MethArgs},
  {&TA_void,NULL,"MDSPrjnPlot"," perform multidimensional scaling on the distance matrix (computed according to metric, norm, tol parameters) of patterns in pat_no across events in the graph log (NULL = new log)","MENU NULL_OK ","",
    0,8,2,0,NULL,cssElCFun_Environment_MDSPrjnPlot_stub,TA_Environment_MDSPrjnPlot_MethArgs},
  {&TA_void,NULL,"EventPrjnPlot"," project all events according to their smiliarity to the two specified events using given distance metrics","MENU NULL_OK FROM_GROUP_1_events ","",
    0,7,4,0,NULL,cssElCFun_Environment_EventPrjnPlot_stub,TA_Environment_EventPrjnPlot_MethArgs},
  {&TA_void,NULL,"EnvToGrid"," send environment to grid log, with given layout (-1 = default, ev = event layout, pt = pattern layout) (NULL = new grid log) ","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,6,2,0,NULL,cssElCFun_Environment_EnvToGrid_stub,TA_Environment_EnvToGrid_MethArgs},
  {&TA_void,NULL,"PatFreqGrid"," report frequency (proportion) of pattern values greater than act_thresh across events, to a grid log (NULL = make new log)","MENU NULL_OK ","",
    0,3,1,0,NULL,cssElCFun_Environment_PatFreqGrid_stub,TA_Environment_PatFreqGrid_MethArgs},
  {&TA_void,NULL,"PatAggGrid"," aggregate patterns over events and plot aggregated results in a grid log (NULL = make new log)","MENU NULL_OK ","",
    0,2,-1,0,NULL,cssElCFun_Environment_PatAggGrid_stub,TA_Environment_PatAggGrid_MethArgs},
  {&TA_EventSpec_ptr,NULL,"GetAnEventSpec"," returns either the default event spec if it exists, or makes one","","",
    0,0,-1,0,NULL,cssElCFun_Environment_GetAnEventSpec_stub,NULL},
  NULL};
static int ScriptEnv::* TA_ScriptEnv_MbrOff;
static MemberDef_data TA_ScriptEnv_MemberDef[]={
  {&TA_SArg_Array,NULL,"s_args"," string-valued arguments to pass to script","","",
    *((ta_memb_ptr*)&(TA_ScriptEnv_MbrOff=(int ScriptEnv::*)(&ScriptEnv::s_args))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ScriptEnv_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_ScriptEnv_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptEnv_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_ScriptEnv_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptEnv_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_ScriptEnv_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptEnv_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_ScriptEnv_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_ScriptEnv_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_ScriptEnv_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_GetEvent_MethArgs[]={
  {&TA_int,NULL,"ev_index",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_GetGroup_MethArgs[]={
  {&TA_int,NULL,"gp_index",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_UnitNamesToNet_MethArgs[]={
  {&TA_EventSpec_ptr,NULL,"event_spec_with_names"," ((void *)0)"},
  {&TA_Network_ptr,NULL,"network"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptEnv_MakeNetIOLayers_MethArgs[]={
  {&TA_EventSpec_ptr,NULL,"event_spec",""},
  {&TA_Network_ptr,NULL,"network",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_AutoNameAllEvents_MethArgs[]={
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_int,NULL,"max_pat_nm"," 3"},
  {&TA_int,NULL,"max_val_nm"," 3"},
  NULL};
static MethodArgs_data TA_ScriptEnv_ReadText_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_EventSpec_ptr,NULL,"es",""},
  {NULL,"Environment::TextFmt","fmt"," NAME_FIRST"},
  NULL};
static MethodArgs_data TA_ScriptEnv_WriteText_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"pat_no"," -1"},
  {NULL,"Environment::TextFmt","fmt"," NAME_FIRST"},
  NULL};
static MethodArgs_data TA_ScriptEnv_ReadBinary_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_EventSpec_ptr,NULL,"es",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_WriteBinary_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_ReplicateEvents_MethArgs[]={
  {&TA_int,NULL,"n_replicas",""},
  {&TA_bool,NULL,"make_groups","false"},
  NULL};
static MethodArgs_data TA_ScriptEnv_PermutedBinary_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_on",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_PermutedBinary_MinDist_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_on",""},
  {&TA_float,NULL,"dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_FlipBits_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_off",""},
  {&TA_int,NULL,"n_on",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_FlipBits_MinMax_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_off",""},
  {&TA_int,NULL,"n_on",""},
  {&TA_float,NULL,"min_dist",""},
  {&TA_float,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_FlipBits_GpMinMax_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"n_off",""},
  {&TA_int,NULL,"n_on",""},
  {&TA_float,NULL,"within_min_dist",""},
  {&TA_float,NULL,"within_max_dist",""},
  {&TA_float,NULL,"between_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {&TA_int,NULL,"st_gp","0"},
  {&TA_int,NULL,"ed_gp","-1"},
  NULL};
static MethodArgs_data TA_ScriptEnv_LastMinDist_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_LastMinMaxDist_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_GpWithinMinMaxDist_MethArgs[]={
  {&TA_Event_MGroup_ptr,NULL,"gp",""},
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_GpLastMinMaxDist_MethArgs[]={
  {&TA_int,NULL,"gp_no",""},
  {&TA_Pattern_ptr,NULL,"trg_pat",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {&TA_int,NULL,"st_gp","0"},
  NULL};
static MethodArgs_data TA_ScriptEnv_GpMinMaxDist_MethArgs[]={
  {&TA_Event_MGroup_ptr,NULL,"gp",""},
  {&TA_Pattern_ptr,NULL,"trg_pat",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float_ref,NULL,"max_dist",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_Clear_MethArgs[]={
  {&TA_int,NULL,"pat_no","-1"},
  {&TA_float,NULL,"val"," 0.0"},
  NULL};
static MethodArgs_data TA_ScriptEnv_AddNoise_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_const_Random_ref,NULL,"rnd_spec",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_TransformPats_MethArgs[]={
  {&TA_int,NULL,"pat_no",""},
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_DistMatrix_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {NULL,"Environment::DistMatFmt","format","STD_PRINT"},
  {&TA_int,NULL,"precision"," -1"},
  NULL};
static MethodArgs_data TA_ScriptEnv_DistArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"dist_ary",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_GpDistArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"within_dist_ary",""},
  {&TA_float_RArray_ref,NULL,"between_dist_ary",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_CmpDistMatrix_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Environment_ptr,NULL,"cmp_env",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  {NULL,"Environment::DistMatFmt","format","STD_PRINT"},
  NULL};
static MethodArgs_data TA_ScriptEnv_CmpDistArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"dist_ary",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Environment_ptr,NULL,"cmp_env",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_CmpDistArrayPat_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"dist_ary",""},
  {&TA_Pattern_ptr,NULL,"trg_pat",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_ValOverEventsArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ary",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"val_no",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_CorrelMatrix_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"mat",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int_ref,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_PCAEigens_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"evecs",""},
  {&TA_float_RArray_ref,NULL,"evals",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int_ref,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_ProjectPatterns_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"prjn_vector",""},
  {&TA_float_RArray_ref,NULL,"vals",""},
  {&TA_int,NULL,"pat_no",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_PatFreqArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"freqs",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_bool,NULL,"proportion"," false"},
  NULL};
static MethodArgs_data TA_ScriptEnv_PatFreqText_MethArgs[]={
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_bool,NULL,"proportion"," false"},
  {&TA_ostream_ref,NULL,"strm"," cerr"},
  NULL};
static MethodArgs_data TA_ScriptEnv_PatAggArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"agg_vals",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_PatAggText_MethArgs[]={
  {&TA_Aggregate_ref,NULL,"agg",""},
  {&TA_ostream_ref,NULL,"strm"," cerr"},
  NULL};
static MethodArgs_data TA_ScriptEnv_EventFreqText_MethArgs[]={
  {&TA_bool,NULL,"proportion"," false"},
  {&TA_ostream_ref,NULL,"strm"," cerr"},
  NULL};
static MethodArgs_data TA_ScriptEnv_DistMatrixGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_CmpDistMatrixGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_Environment_ptr,NULL,"cmp_env",""},
  {&TA_int,NULL,"cmp_pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_ClusterPlot_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::EUCLIDIAN"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ScriptEnv_CorrelMatrixGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_PCAEigenGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodArgs_data TA_ScriptEnv_PCAPrjnPlot_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"x_axis_component","0"},
  {&TA_int,NULL,"y_axis_component","1"},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodArgs_data TA_ScriptEnv_MDSPrjnPlot_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"x_axis_component","0"},
  {&TA_int,NULL,"y_axis_component","1"},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::EUCLIDIAN"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0"},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodArgs_data TA_ScriptEnv_EventPrjnPlot_MethArgs[]={
  {&TA_Event_ptr,NULL,"x_axis_event",""},
  {&TA_Event_ptr,NULL,"y_axis_event",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::INNER_PROD"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0"},
  NULL};
static MethodArgs_data TA_ScriptEnv_EnvToGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"ev_x","-1"},
  {&TA_int,NULL,"ev_y","-1"},
  {&TA_int,NULL,"pt_x","-1"},
  {&TA_int,NULL,"pt_y","-1"},
  NULL};
static MethodArgs_data TA_ScriptEnv_PatFreqGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_float,NULL,"act_thresh"," .5f"},
  {&TA_bool,NULL,"proportion"," false"},
  NULL};
static MethodArgs_data TA_ScriptEnv_PatAggGrid_MethArgs[]={
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_SetScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm",""},
  NULL};
static MethodArgs_data TA_ScriptEnv_LoadScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptEnv_LoadScriptString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string"," ((void *)0)"},
  NULL};
static MethodDef_data TA_ScriptEnv_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_ScriptEnv_GetColText_stub,TA_ScriptEnv_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_ScriptEnv_ChildQueryEditActions_stub,TA_ScriptEnv_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_ScriptEnv_ChildEditAction_stub,TA_ScriptEnv_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_QueryEditActions_stub,TA_ScriptEnv_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_EditAction_stub,TA_ScriptEnv_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_UnSafeCopy_stub,TA_ScriptEnv_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_CastCopyTo_stub,TA_ScriptEnv_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_ScriptEnv_GetOwner_stub,TA_ScriptEnv_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_ScriptEnv_GetPath_stub,TA_ScriptEnv_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_ScriptEnv_FindFromPath_stub,TA_ScriptEnv_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_ScriptEnv_New_stub,TA_ScriptEnv_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_StructUpdate_stub,TA_ScriptEnv_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_DataUpdate_stub,TA_ScriptEnv_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_AddDataView_stub,TA_ScriptEnv_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_RemoveDataView_stub,TA_ScriptEnv_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_ScriptEnv_InheritsFrom_stub,TA_ScriptEnv_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_GetEnumString_stub,TA_ScriptEnv_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_ScriptEnv_GetEnumVal_stub,TA_ScriptEnv_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_ScriptEnv_Load_stub,TA_ScriptEnv_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_ScriptEnv_Save_stub,TA_ScriptEnv_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_ScriptEnv_SaveAs_stub,TA_ScriptEnv_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_ScriptEnv_ReShowEdit_stub,TA_ScriptEnv_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_CopyFrom_stub,TA_ScriptEnv_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_CopyTo_stub,TA_ScriptEnv_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_ChildUpdateAfterEdit_stub,TA_ScriptEnv_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_ChangeMyType_stub,TA_ScriptEnv_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_SelectForEdit_stub,TA_ScriptEnv_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_SelectFunForEdit_stub,TA_ScriptEnv_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_CallFun_stub,TA_ScriptEnv_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_SetAdapter_stub,TA_ScriptEnv_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_addr_data_link_stub,NULL},
  {&TA_void,NULL,"InitEvents"," initialize events for an epoch (eg, if algorithmically created)","MENU MENU_ON_Actions UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_InitEvents_stub,NULL},
  {&TA_void,NULL,"UnSetLayers"," reset layer pointers on patterns so they are automatically recomputed when events are presented","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_UnSetLayers_stub,NULL},
  {&TA_void,NULL,"UpdateAllEvents"," update all events from their event specs","MENU MENU_ON_Actions CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_UpdateAllEvents_stub,NULL},
  {&TA_void,NULL,"UpdateAllEventSpecs"," update all event specs based on the current configuration of the default network","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_UpdateAllEventSpecs_stub,NULL},
  {&TA_int,NULL,"EventCount"," number of events in environment","MENU MENU_ON_Actions USE_RVAL MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_EventCount_stub,NULL},
  {&TA_Event_ptr,NULL,"GetEvent"," get the event at given index in a flat list of all events in the environment","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_GetEvent_stub,TA_ScriptEnv_GetEvent_MethArgs},
  {&TA_int,NULL,"GroupCount"," number of event groups in environment","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_GroupCount_stub,NULL},
  {&TA_Event_MGroup_ptr,NULL,"GetGroup"," get the event group (collection of events) at the specified index of all groups in the environment","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_GetGroup_stub,TA_ScriptEnv_GetGroup_MethArgs},
  {&TA_Event_ptr,NULL,"GetNextEvent"," return the next event for processing (or NULL to end epoch): interface for the interactive environment model (hook for generating new event based on current state)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_GetNextEvent_stub,NULL},
  {&TA_void,NULL,"UnitNamesToNet"," copy names from pattern spec value_names to corresponding units in the network. uses default event spec and network if NULL","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,2,0,0,NULL,cssElCFun_ScriptEnv_UnitNamesToNet_stub,TA_ScriptEnv_UnitNamesToNet_MethArgs},
  {&TA_void,NULL,"MakeNetIOLayers"," configure network input/output layers based on patterns in event_spec","MENU ","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_MakeNetIOLayers_stub,TA_ScriptEnv_MakeNetIOLayers_MethArgs},
  {&TA_void,NULL,"AutoNameAllEvents"," automatically name all events based on the pattern names and value (unit) names for those units above act_thresh, e.g., Inp:vl1_vl2,Out:vl1_vl2","MENU ","",
    0,3,0,0,NULL,cssElCFun_ScriptEnv_AutoNameAllEvents_stub,TA_ScriptEnv_AutoNameAllEvents_MethArgs},
  {&TA_void,NULL,"ReadText"," Read text-formatted event/pattern files, including old pdp files, (using given event spec, -1=default)","MENU MENU_ON_Object MENU_SEP_BEFORE EXT_strm_pat UPDATE_MENUS ","",
    0,3,2,0,NULL,cssElCFun_ScriptEnv_ReadText_stub,TA_ScriptEnv_ReadText_MethArgs},
  {&TA_void,NULL,"WriteText"," Save enviro in text format: pat_no of -1 gives all pats, fmt for name","MENU EXT_strm_pat ","",
    0,3,1,0,NULL,cssElCFun_ScriptEnv_WriteText_stub,TA_ScriptEnv_WriteText_MethArgs},
  {&TA_void,NULL,"ReadBinary"," read event pattern information in binary format (just the numbers only)","MENU EXT_strm_pat ","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_ReadBinary_stub,TA_ScriptEnv_ReadBinary_MethArgs},
  {&TA_void,NULL,"WriteBinary"," write event pattern information in binary format (just the numbers only)","MENU EXT_strm_pat ","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_WriteBinary_stub,TA_ScriptEnv_WriteBinary_MethArgs},
  {&TA_void,NULL,"ReplicateEvents"," replicate existing events, optionally placing in groups","MENU MENU_ON_Generate UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_ScriptEnv_ReplicateEvents_stub,TA_ScriptEnv_ReplicateEvents_MethArgs},
  {&TA_void,NULL,"PermutedBinary"," create permuted binary patterns of n_on 1's and rest 0's (pat_no: -1 = all pats)","MENU MENU_SEP_BEFORE ","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_PermutedBinary_stub,TA_ScriptEnv_PermutedBinary_MethArgs},
  {&TA_void,NULL,"PermutedBinary_MinDist"," create permuted binary patterns with dist minimum hamming distance (or dist max_correl) (pat_no: -1 = all pats)","MENU ","",
    0,6,3,0,NULL,cssElCFun_ScriptEnv_PermutedBinary_MinDist_stub,TA_ScriptEnv_PermutedBinary_MinDist_MethArgs},
  {&TA_void,NULL,"FlipBits"," flip n_off bits from 1's to 0's, and n_on bits from 0's to 1's (pat_no: -1 = all pats)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_FlipBits_stub,TA_ScriptEnv_FlipBits_MethArgs},
  {&TA_void,NULL,"FlipBits_MinMax"," flip bits, ensuring range within min and max distances (pat_no: -1 = all pats)","MENU ","",
    0,8,5,0,NULL,cssElCFun_ScriptEnv_FlipBits_MinMax_stub,TA_ScriptEnv_FlipBits_MinMax_MethArgs},
  {&TA_void,NULL,"FlipBits_GpMinMax"," flip bits, ensuring within-group min and max distances, and between-group min dist (pat_no: -1 = all pats)","MENU ","",
    0,11,6,0,NULL,cssElCFun_ScriptEnv_FlipBits_GpMinMax_stub,TA_ScriptEnv_FlipBits_GpMinMax_MethArgs},
  {&TA_float,NULL,"LastMinDist"," returns minimum distance (or max correl) between last (n th) pattern and all previous","","",
    0,5,2,0,NULL,cssElCFun_ScriptEnv_LastMinDist_stub,TA_ScriptEnv_LastMinDist_MethArgs},
  {&TA_float,NULL,"LastMinMaxDist"," returns min and max distance between last (n th) pattern and all previous","","",
    0,6,3,0,NULL,cssElCFun_ScriptEnv_LastMinMaxDist_stub,TA_ScriptEnv_LastMinMaxDist_MethArgs},
  {&TA_float,NULL,"GpWithinMinMaxDist"," returns min and max distance between last (n th) pattern and all previous within group","","",
    0,7,4,0,NULL,cssElCFun_ScriptEnv_GpWithinMinMaxDist_stub,TA_ScriptEnv_GpWithinMinMaxDist_MethArgs},
  {&TA_float,NULL,"GpLastMinMaxDist"," returns min and max distance between patterns in all groups up to gp_no for pattern pat","","",
    0,8,4,0,NULL,cssElCFun_ScriptEnv_GpLastMinMaxDist_stub,TA_ScriptEnv_GpLastMinMaxDist_MethArgs},
  {&TA_float,NULL,"GpMinMaxDist"," returns min and max distance between probe pattern and all in group","","",
    0,7,4,0,NULL,cssElCFun_ScriptEnv_GpMinMaxDist_stub,TA_ScriptEnv_GpMinMaxDist_MethArgs},
  {&TA_void,NULL,"Clear"," clear out given pattern number (set to given val) (pat_no: -1 = all pats)","MENU MENU_SEP_BEFORE CONFIRM ","",
    0,2,0,0,NULL,cssElCFun_ScriptEnv_Clear_stub,TA_ScriptEnv_Clear_MethArgs},
  {&TA_void,NULL,"AddNoise"," add random noise of specified type to the patterns (pat_no: -1 = all pats)","MENU ","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_AddNoise_stub,TA_ScriptEnv_AddNoise_MethArgs},
  {&TA_void,NULL,"TransformPats"," Apply given transformation to pattern pat_no of all events (pat_no: -1 = all pats)","MENU ","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_TransformPats_stub,TA_ScriptEnv_TransformPats_MethArgs},
  {&TA_void,NULL,"DistMatrix"," output distance matrix for events based on pattern pat_no","MENU EXT_strm_dstmat MENU_ON_Analyze ","",
    0,7,2,0,NULL,cssElCFun_ScriptEnv_DistMatrix_stub,TA_ScriptEnv_DistMatrix_MethArgs},
  {&TA_void,NULL,"DistArray"," get distance matrix as an upper-triangular matrix (including diagonals) for events based on pattern pat_no","","",
    0,5,2,0,NULL,cssElCFun_ScriptEnv_DistArray_stub,TA_ScriptEnv_DistArray_MethArgs},
  {&TA_void,NULL,"GpDistArray"," get within group and between group distance matricies as arrays for events based on pattern pat_no","","",
    0,6,3,0,NULL,cssElCFun_ScriptEnv_GpDistArray_stub,TA_ScriptEnv_GpDistArray_MethArgs},
  {&TA_void,NULL,"CmpDistMatrix"," comparative distance array between two environments","MENU EXT_strm_dstmat ","",
    0,8,4,0,NULL,cssElCFun_ScriptEnv_CmpDistMatrix_stub,TA_ScriptEnv_CmpDistMatrix_MethArgs},
  {&TA_void,NULL,"CmpDistArray"," comparative distance array between two environments","","",
    0,7,4,0,NULL,cssElCFun_ScriptEnv_CmpDistArray_stub,TA_ScriptEnv_CmpDistArray_MethArgs},
  {&TA_void,NULL,"CmpDistArrayPat"," compute comparative distance array, one pattern against this environment","","",
    0,6,3,0,NULL,cssElCFun_ScriptEnv_CmpDistArrayPat_stub,TA_ScriptEnv_CmpDistArrayPat_MethArgs},
  {&TA_void,NULL,"ValOverEventsArray"," extract an array containing values for given value index in pattern pat_no across events","","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_ValOverEventsArray_stub,TA_ScriptEnv_ValOverEventsArray_MethArgs},
  {&TA_void,NULL,"CorrelMatrix"," generate a correlation matrix for all patterns in pat_no in the environment (e.g., correlation of unit 1 with all other units across patterns, etc); dim = dimensionality of correl matrix = no. of vals in pattern","","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_CorrelMatrix_stub,TA_ScriptEnv_CorrelMatrix_MethArgs},
  {&TA_void,NULL,"PCAEigens"," get principal components analysis eigenvectors and eigenvalues of correlation matrix across events for pattern pat_no (dim = dimensionality of correl matrix = no. of vals in pattern)","","",
    0,4,-1,0,NULL,cssElCFun_ScriptEnv_PCAEigens_stub,TA_ScriptEnv_PCAEigens_MethArgs},
  {&TA_void,NULL,"ProjectPatterns"," project patterns in pat_no onto prjn_vector (dot product), and store resulting array of vals in vals (length = no. of events)","","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_ProjectPatterns_stub,TA_ScriptEnv_ProjectPatterns_MethArgs},
  {&TA_void,NULL,"PatFreqArray"," get frequency (proportion) of pattern activations greater than act_thresh across events","","",
    0,4,2,0,NULL,cssElCFun_ScriptEnv_PatFreqArray_stub,TA_ScriptEnv_PatFreqArray_MethArgs},
  {&TA_void,NULL,"PatFreqText"," report frequency (proportion) of pattern values greater than act_thresh across events, to a text output (most useful if pattern values are named in value_names)","MENU ARGC_2 ","",
    0,3,0,0,NULL,cssElCFun_ScriptEnv_PatFreqText_stub,TA_ScriptEnv_PatFreqText_MethArgs},
  {&TA_void,NULL,"PatAggArray"," aggregate pattern pat_no values over events to given array object","","",
    0,3,-1,0,NULL,cssElCFun_ScriptEnv_PatAggArray_stub,TA_ScriptEnv_PatAggArray_MethArgs},
  {&TA_void,NULL,"PatAggText"," aggregate patterns over events and print aggregated results to a text output (most useful if pattern values are named in value_names)","MENU ARGC_1 ","",
    0,2,1,0,NULL,cssElCFun_ScriptEnv_PatAggText_stub,TA_ScriptEnv_PatAggText_MethArgs},
  {&TA_void,NULL,"EventFreqText"," report frequency (proportion) of event names in the environment","MENU ARGC_1 ","",
    0,2,0,0,NULL,cssElCFun_ScriptEnv_EventFreqText_stub,TA_ScriptEnv_EventFreqText_MethArgs},
  {&TA_void,NULL,"DistMatrixGrid"," output to grid log distance matrix for events based on pattern pat_no","MENU NULL_OK ","",
    0,5,2,0,NULL,cssElCFun_ScriptEnv_DistMatrixGrid_stub,TA_ScriptEnv_DistMatrixGrid_MethArgs},
  {&TA_void,NULL,"CmpDistMatrixGrid"," output to grid log comparative distance matrix between two environments","MENU NULL_OK ","",
    0,7,4,0,NULL,cssElCFun_ScriptEnv_CmpDistMatrixGrid_stub,TA_ScriptEnv_CmpDistMatrixGrid_MethArgs},
  {&TA_void,NULL,"ClusterPlot"," produce a cluster plot (in graph log, NULL = make a new one) of the given pat_no across events","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,5,2,0,NULL,cssElCFun_ScriptEnv_ClusterPlot_stub,TA_ScriptEnv_ClusterPlot_MethArgs},
  {&TA_void,NULL,"CorrelMatrixGrid"," generate a correlation matrix for all patterns in pat_no in the environment (e.g., correlation of unit 1 with all other units across patterns, etc) and plot result in grid log (NULL = new log)","MENU NULL_OK ","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_CorrelMatrixGrid_stub,TA_ScriptEnv_CorrelMatrixGrid_MethArgs},
  {&TA_void,NULL,"PCAEigenGrid"," perform principal components analysis of the correlations of patterns in pat_no across events, plotting all eigenvectors in the grid log (NULL = new log)","MENU NULL_OK ","",
    0,3,2,0,NULL,cssElCFun_ScriptEnv_PCAEigenGrid_stub,TA_ScriptEnv_PCAEigenGrid_MethArgs},
  {&TA_void,NULL,"PCAPrjnPlot"," perform principal components analysis of the correlations of patterns in pat_no across events, plotting projections of patterns on the given principal components in the graph log (NULL = new log)","MENU NULL_OK ","",
    0,5,2,0,NULL,cssElCFun_ScriptEnv_PCAPrjnPlot_stub,TA_ScriptEnv_PCAPrjnPlot_MethArgs},
  {&TA_void,NULL,"MDSPrjnPlot"," perform multidimensional scaling on the distance matrix (computed according to metric, norm, tol parameters) of patterns in pat_no across events in the graph log (NULL = new log)","MENU NULL_OK ","",
    0,8,2,0,NULL,cssElCFun_ScriptEnv_MDSPrjnPlot_stub,TA_ScriptEnv_MDSPrjnPlot_MethArgs},
  {&TA_void,NULL,"EventPrjnPlot"," project all events according to their smiliarity to the two specified events using given distance metrics","MENU NULL_OK FROM_GROUP_1_events ","",
    0,7,4,0,NULL,cssElCFun_ScriptEnv_EventPrjnPlot_stub,TA_ScriptEnv_EventPrjnPlot_MethArgs},
  {&TA_void,NULL,"EnvToGrid"," send environment to grid log, with given layout (-1 = default, ev = event layout, pt = pattern layout) (NULL = new grid log) ","MENU MENU_SEP_BEFORE NULL_OK ","",
    0,6,2,0,NULL,cssElCFun_ScriptEnv_EnvToGrid_stub,TA_ScriptEnv_EnvToGrid_MethArgs},
  {&TA_void,NULL,"PatFreqGrid"," report frequency (proportion) of pattern values greater than act_thresh across events, to a grid log (NULL = make new log)","MENU NULL_OK ","",
    0,3,1,0,NULL,cssElCFun_ScriptEnv_PatFreqGrid_stub,TA_ScriptEnv_PatFreqGrid_MethArgs},
  {&TA_void,NULL,"PatAggGrid"," aggregate patterns over events and plot aggregated results in a grid log (NULL = make new log)","MENU NULL_OK ","",
    0,2,-1,0,NULL,cssElCFun_ScriptEnv_PatAggGrid_stub,TA_ScriptEnv_PatAggGrid_MethArgs},
  {&TA_EventSpec_ptr,NULL,"GetAnEventSpec"," returns either the default event spec if it exists, or makes one","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_GetAnEventSpec_stub,NULL},
  {&TA_bool,NULL,"HasScript"," returns true if we have some kind of script file or string to run","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_HasScript_stub,NULL},
  {&TA_bool,NULL,"RunScript"," run the script (returns false for no scr)","","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_RunScript_stub,NULL},
  {&TA_void,NULL,"SetScript"," set the script file (e.g. from the script)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptEnv_SetScript_stub,TA_ScriptEnv_SetScript_MethArgs},
  {&TA_void,NULL,"LoadScript"," compile script from script file into internal runnable format","MENU LABEL_Compile MENU_ON_Actions ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_ScriptEnv_LoadScript_stub,TA_ScriptEnv_LoadScript_MethArgs},
  {&TA_void,NULL,"LoadScriptString"," load and recompile the script string","","",
    0,1,0,0,NULL,cssElCFun_ScriptEnv_LoadScriptString_stub,TA_ScriptEnv_LoadScriptString_MethArgs},
  {&TA_void,NULL,"InteractScript"," change to this shell in script (terminal) window to interact, debug etc script","MENU LABEL_Interact ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_InteractScript_stub,NULL},
  {&TA_void,NULL,"Interact"," change to this shell in script (terminal) window to interact, debug etc script","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_Interact_stub,NULL},
  {&TA_void,NULL,"Compile"," compile script from script file into internal runnable format","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptEnv_Compile_stub,NULL},
  NULL};
static EnumDef_data TA_TimeEnvironment_Interpolate[]={
  {"PUNCTATE"," events appear for a single instant only","",0},
  {"CONSTANT"," events persist constantly, change discretely","",1},
  {"LINEAR"," linear interpolation is performed between events","",2},
  NULL};
static int TimeEnvironment::* TA_TimeEnvironment_MbrOff;
static MemberDef_data TA_TimeEnvironment_MemberDef[]={
  {NULL,"::Interpolate","interpolate"," if and how to interpolate between given event times","","",
    *((ta_memb_ptr*)&(TA_TimeEnvironment_MbrOff=(int TimeEnvironment::*)(&TimeEnvironment::interpolate))),0,NULL,0},
  NULL};
static EnumDef_data TA_Stat_LoopInitType[]={
  {"INIT_IN_LOOP"," initialize inside the loop (each time stat is run in loop)","",0},
  {"INIT_START_ONLY"," initialize only at the start of the loop","AKA_false ",1},
  {"NO_INIT"," never initialize this statistic at all (regardless of whether it is a loop or final stat -- this should only be used for script stats)","",2},
  NULL};
static int Stat::* TA_Stat_MbrOff;
static MemberDef_data TA_Stat_MemberDef[]={
  {&TA_SchedProcess_ptr,NULL,"own_proc"," The SchedProcess which owns this stat","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::own_proc))),0,NULL,0},
  {&TA_bool,NULL,"has_stop_crit"," true if any of the stats have a stopping crit","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::has_stop_crit))),0,NULL,0},
  {&TA_int,NULL,"n_copy_vals"," the number of copy values added","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::n_copy_vals))),0,NULL,0},
  {NULL,"::LoopInitType","loop_init"," how to initialize stat values of a non-aggregator loop_stats statistic -- if NO_INIT then applies to all stats (never init)","","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::loop_init))),0,NULL,0},
  {&TA_bool,NULL,"log_stat"," flag determines if stat data is logged","","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::log_stat))),0,NULL,0},
  {&TA_AggStat,NULL,"time_agg"," Aggregation over time (i.e., over loop of lower process), if from != NULL","","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::time_agg))),0,NULL,0},
  {&TA_StatValAgg,NULL,"net_agg"," Aggregation over network objects (i.e., over units)","CONDEDIT_ON_time_agg.from:NULL ","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::net_agg))),0,NULL,0},
  {&TA_StatVal_List,NULL,"copy_vals"," the values of the stat if using COPY time agg","","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::copy_vals))),0,NULL,0},
  {&TA_Layer_ptr,NULL,"layer"," restrict computation to this layer if non-null","","",
    *((ta_memb_ptr*)&(TA_Stat_MbrOff=(int Stat::*)(&Stat::layer))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Stat_Unit_Run_MethArgs[]={
  {&TA_Layer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_Stat_RecvCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodArgs_data TA_Stat_SendCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodArgs_data TA_Stat_Layer_Init_MethArgs[]={
  {&TA_Layer_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Stat_Unit_Init_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Stat_Layer_Stat_MethArgs[]={
  {&TA_Layer_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Stat_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Stat_Con_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  {&TA_Connection_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Stat_GetAggOpForProc_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"proc",""},
  {NULL,"Aggregate::Operator","agg_op",""},
  NULL};
static MethodArgs_data TA_Stat_CreateAggregates_MethArgs[]={
  {NULL,"Aggregate::Operator","agg_op"," Aggregate::DEFAULT"},
  NULL};
static MethodArgs_data TA_Stat_FindOwnAggFrom_MethArgs[]={
  {&TA_const_Stat_ref,NULL,"cp",""},
  NULL};
static MethodDef_data TA_Stat_MethodDef[]={
  {&TA_float,NULL,"InitStatVal"," value to pass to the InitStat() function","","",
    0,0,-1,0,NULL,cssElCFun_Stat_InitStatVal_stub,NULL},
  {&TA_void,NULL,"InitStat"," initializes the stat vars, but not the stat process","","",
    0,0,-1,0,NULL,cssElCFun_Stat_InitStat_stub,NULL},
  {&TA_bool,NULL,"Crit"," check criteria on stat values","","",
    0,0,-1,0,NULL,cssElCFun_Stat_Crit_stub,NULL},
  {&TA_void,NULL,"Network_Run"," Compute over the network","","",
    0,0,-1,0,NULL,cssElCFun_Stat_Network_Run_stub,NULL},
  {&TA_void,NULL,"Layer_Run"," Compute over layers in the network","","",
    0,0,-1,0,NULL,cssElCFun_Stat_Layer_Run_stub,NULL},
  {&TA_void,NULL,"Unit_Run"," Compute over units in a layer","","",
    0,1,-1,0,NULL,cssElCFun_Stat_Unit_Run_stub,TA_Stat_Unit_Run_MethArgs},
  {&TA_void,NULL,"RecvCon_Run"," Compute over recv conns of a unit","","",
    0,1,-1,0,NULL,cssElCFun_Stat_RecvCon_Run_stub,TA_Stat_RecvCon_Run_MethArgs},
  {&TA_void,NULL,"SendCon_Run"," Compute over send conns of a unit","","",
    0,1,-1,0,NULL,cssElCFun_Stat_SendCon_Run_stub,TA_Stat_SendCon_Run_MethArgs},
  {&TA_void,NULL,"Network_Init"," Initialize before computing network","","",
    0,0,-1,0,NULL,cssElCFun_Stat_Network_Init_stub,NULL},
  {&TA_void,NULL,"Layer_Init"," Initialize before computing layer","","",
    0,1,-1,0,NULL,cssElCFun_Stat_Layer_Init_stub,TA_Stat_Layer_Init_MethArgs},
  {&TA_void,NULL,"Unit_Init"," Initialize before computing unit","","",
    0,1,-1,0,NULL,cssElCFun_Stat_Unit_Init_stub,TA_Stat_Unit_Init_MethArgs},
  {&TA_void,NULL,"Network_Stat"," Compute statistic on the network","","",
    0,0,-1,0,NULL,cssElCFun_Stat_Network_Stat_stub,NULL},
  {&TA_void,NULL,"Layer_Stat"," Compute statistic on a layer","","",
    0,1,-1,0,NULL,cssElCFun_Stat_Layer_Stat_stub,TA_Stat_Layer_Stat_MethArgs},
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    0,1,-1,0,NULL,cssElCFun_Stat_Unit_Stat_stub,TA_Stat_Unit_Stat_MethArgs},
  {&TA_void,NULL,"Con_Stat"," Compute statistic on a recv unit, connection, sending unit","","",
    0,3,-1,0,NULL,cssElCFun_Stat_Con_Stat_stub,TA_Stat_Con_Stat_MethArgs},
  {&TA_void,NULL,"ComputeAggregates"," Compute aggregate of agg.from statistic in this stat","","",
    0,0,-1,0,NULL,cssElCFun_Stat_ComputeAggregates_stub,NULL},
  {NULL,"Aggregate::Operator","GetAggOpForProc"," get the appropriate aggregate operator for a given process (if agg_op != DEFAULT, its just agg_op)","","",
    0,2,-1,1,(ta_void_fun)(Stat::GetAggOpForProc),cssElCFun_Stat_GetAggOpForProc_stub,TA_Stat_GetAggOpForProc_MethArgs},
  {&TA_void,NULL,"CreateAggregates"," Create aggregate stats up the processing hiearchy using given agg operator for first level agg (defaults thereafter)","NEW_FUN MENU MENU_ON_Actions ARGC_1 UPDATE_MENUS ","",
    0,1,0,0,NULL,cssElCFun_Stat_CreateAggregates_stub,TA_Stat_CreateAggregates_MethArgs},
  {&TA_void,NULL,"DeleteAggregates"," delete aggregators of this stat","MENU UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_Stat_DeleteAggregates_stub,NULL},
  {&TA_void,NULL,"UpdateAggregates"," update aggregators of this stat (i.e., so they get the layer name or other change)","MENU UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_Stat_UpdateAggregates_stub,NULL},
  {&TA_Stat_ptr,NULL,"FindAggregator"," Find the aggregator for this stat in the next-highest level proc","MENU MENU_SEP_BEFORE USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_Stat_FindAggregator_stub,NULL},
  {&TA_bool,NULL,"FindOwnAggFrom"," set our time_agg.from to stat in same hierarch position as cp.time_agg.from (for copying/duplicating)","","",
    0,1,-1,0,NULL,cssElCFun_Stat_FindOwnAggFrom_stub,TA_Stat_FindOwnAggFrom_MethArgs},
  {&TA_bool,NULL,"CheckLayerInNet"," make sure layer pointer points to a layer in current net, set to one of same name if not","IGONRE ","",
    0,0,-1,0,NULL,cssElCFun_Stat_CheckLayerInNet_stub,NULL},
  {&TA_const_char_ptr,NULL,"AltTypeName"," can substitute a shorter name if desired, for naming the objects","","",
    0,0,-1,0,NULL,cssElCFun_Stat_AltTypeName_stub,NULL},
  NULL};
static int SE_Stat::* TA_SE_Stat_MbrOff;
static MemberDef_data TA_SE_Stat_MemberDef[]={
  {&TA_StatVal,NULL,"se"," squared errors","","",
    *((ta_memb_ptr*)&(TA_SE_Stat_MbrOff=(int SE_Stat::*)(&SE_Stat::se))),0,NULL,0},
  {&TA_float,NULL,"tolerance"," if error is less than this, its 0","","",
    *((ta_memb_ptr*)&(TA_SE_Stat_MbrOff=(int SE_Stat::*)(&SE_Stat::tolerance))),0,NULL,0},
  NULL};
static int MonitorStat::* TA_MonitorStat_MbrOff;
static MemberDef_data TA_MonitorStat_MemberDef[]={
  {&TA_StatVal_List,NULL,"mon_vals"," the values of the stat as computed directly","","",
    *((ta_memb_ptr*)&(TA_MonitorStat_MbrOff=(int MonitorStat::*)(&MonitorStat::mon_vals))),0,NULL,0},
  {&TA_taBase_List,NULL,"ptrs"," actual ptrs to values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_MonitorStat_MbrOff=(int MonitorStat::*)(&MonitorStat::ptrs))),0,NULL,0},
  {&TA_taBase_List,NULL,"objects"," Group of network objects","LINK_GROUP ","",
    *((ta_memb_ptr*)&(TA_MonitorStat_MbrOff=(int MonitorStat::*)(&MonitorStat::objects))),0,NULL,0},
  {&TA_taString,NULL,"variable"," Variable (member) to monitor","","",
    *((ta_memb_ptr*)&(TA_MonitorStat_MbrOff=(int MonitorStat::*)(&MonitorStat::variable))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_1"," first step of pre-processing to perform","","",
    *((ta_memb_ptr*)&(TA_MonitorStat_MbrOff=(int MonitorStat::*)(&MonitorStat::pre_proc_1))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_2"," second step of pre-processing to perform","","",
    *((ta_memb_ptr*)&(TA_MonitorStat_MbrOff=(int MonitorStat::*)(&MonitorStat::pre_proc_2))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_3"," third step of pre-processing to perform","","",
    *((ta_memb_ptr*)&(TA_MonitorStat_MbrOff=(int MonitorStat::*)(&MonitorStat::pre_proc_3))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MonitorStat_SetVariable_MethArgs[]={
  {&TA_const_char_ptr,NULL,"varnm",""},
  NULL};
static MethodArgs_data TA_MonitorStat_SetObject_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_MonitorStat_AddObject_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_MonitorStat_GetObjName_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodDef_data TA_MonitorStat_MethodDef[]={
  {&TA_void,NULL,"SetVariable"," set variable and update appropriately","","",
    0,1,-1,0,NULL,cssElCFun_MonitorStat_SetVariable_stub,TA_MonitorStat_SetVariable_MethArgs},
  {&TA_void,NULL,"SetObject"," clear any existing objects and set to obj and update","","",
    0,1,-1,0,NULL,cssElCFun_MonitorStat_SetObject_stub,TA_MonitorStat_SetObject_MethArgs},
  {&TA_void,NULL,"AddObject"," add obj and update","","",
    0,1,-1,0,NULL,cssElCFun_MonitorStat_AddObject_stub,TA_MonitorStat_AddObject_MethArgs},
  {&TA_void,NULL,"SetObjsFmNet"," set ojects from currently selected objects in the default network","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_MonitorStat_SetObjsFmNet_stub,NULL},
  {&TA_taString,NULL,"GetObjName"," get name of object for naming stats, etc","","",
    0,1,-1,1,(ta_void_fun)(MonitorStat::GetObjName),cssElCFun_MonitorStat_GetObjName_stub,TA_MonitorStat_GetObjName_MethArgs},
  NULL};
static int ClosestEventStat::* TA_ClosestEventStat_MbrOff;
static MemberDef_data TA_ClosestEventStat_MemberDef[]={
  {&TA_TrialProcess_ptr,NULL,"trial_proc"," current trial process","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::trial_proc))),0,NULL,0},
  {NULL,"float_RArray::DistMetric","cmp_type"," comparison type to perform to compute distance","","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::cmp_type))),0,NULL,0},
  {&TA_float,NULL,"dist_tol"," tolerance value for distance functions","CONDEDIT_ON_cmp_type:SUM_SQUARES,EUCLIDIAN,HAMMING ","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::dist_tol))),0,NULL,0},
  {&TA_bool,NULL,"norm"," whether to normalize (distance, inner prod)","CONDEDIT_OFF_cmp_type:COVAR,CORREL,CROSS_ENTROPY ","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::norm))),0,NULL,0},
  {&TA_int,NULL,"subgp_no"," if not -1, then indicates which subgroup of units within layer","","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::subgp_no))),0,NULL,0},
  {&TA_StatVal,NULL,"dist"," distance from closest event","","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::dist))),0,NULL,0},
  {&TA_StatVal,NULL,"ev_nm"," name of event which was closest","","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::ev_nm))),0,NULL,0},
  {&TA_StatVal,NULL,"sm_nm"," 1 or 0 depending on whether the name matched cur event","","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::sm_nm))),0,NULL,0},
  {&TA_float_RArray,NULL,"lay_act"," buffer for layer activity","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ClosestEventStat_MbrOff=(int ClosestEventStat::*)(&ClosestEventStat::lay_act))),0,NULL,0},
  NULL};
static int CyclesToSettle::* TA_CyclesToSettle_MbrOff;
static MemberDef_data TA_CyclesToSettle_MemberDef[]={
  {&TA_SettleProcess_ptr,NULL,"settle"," settle process to record","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_CyclesToSettle_MbrOff=(int CyclesToSettle::*)(&CyclesToSettle::settle))),0,NULL,0},
  {&TA_StatVal,NULL,"cycles"," number of cycles to settle","","",
    *((ta_memb_ptr*)&(TA_CyclesToSettle_MbrOff=(int CyclesToSettle::*)(&CyclesToSettle::cycles))),0,NULL,0},
  NULL};
static MethodDef_data TA_CyclesToSettle_MethodDef[]={
  {&TA_void,NULL,"GetSettleProc","","","",
    0,0,-1,0,NULL,cssElCFun_CyclesToSettle_GetSettleProc_stub,NULL},
  NULL};
static int ScriptStat::* TA_ScriptStat_MbrOff;
static MemberDef_data TA_ScriptStat_MemberDef[]={
  {&TA_StatVal_List,NULL,"vals"," put stat results in this group","","",
    *((ta_memb_ptr*)&(TA_ScriptStat_MbrOff=(int ScriptStat::*)(&ScriptStat::vals))),0,NULL,0},
  {&TA_SArg_Array,NULL,"s_args"," string-valued arguments to pass to script","","",
    *((ta_memb_ptr*)&(TA_ScriptStat_MbrOff=(int ScriptStat::*)(&ScriptStat::s_args))),0,NULL,0},
  NULL};
static MethodDef_data TA_ScriptStat_MethodDef[]={
  {&TA_void,NULL,"Interact"," change to this shell in script (terminal) window to interact, debug etc script","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptStat_Interact_stub,NULL},
  {&TA_void,NULL,"Compile"," compile script from script file into internal runnable format","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptStat_Compile_stub,NULL},
  NULL};
static int CompareStat::* TA_CompareStat_MbrOff;
static MemberDef_data TA_CompareStat_MemberDef[]={
  {&TA_Stat_ptr,NULL,"stat_1"," first comparison stat","","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::stat_1))),0,NULL,0},
  {&TA_Stat_ptr,NULL,"stat_2"," second comparison stat","","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::stat_2))),0,NULL,0},
  {NULL,"float_RArray::DistMetric","cmp_type"," comparison type to perform","","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::cmp_type))),0,NULL,0},
  {&TA_StatVal,NULL,"cmp"," comparison value","","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::cmp))),0,NULL,0},
  {&TA_float,NULL,"dist_tol"," tolerance value for distance functions","CONDEDIT_ON_cmp_type:SUM_SQUARES,EUCLIDIAN,HAMMING ","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::dist_tol))),0,NULL,0},
  {&TA_bool,NULL,"norm"," whether to normalize (distance, inner prod)","CONDEDIT_OFF_cmp_type:COVAR,CORREL,CROSS_ENTROPY ","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::norm))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_1"," step 1 of pre-processing to apply before comparision","","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::pre_proc_1))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_2"," step 2 of pre-processing to apply before comparision","","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::pre_proc_2))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_3"," step 3 of pre-processing to apply before comparision","","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::pre_proc_3))),0,NULL,0},
  {&TA_float_RArray,NULL,"svals_1"," stat_1 values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::svals_1))),0,NULL,0},
  {&TA_float_RArray,NULL,"svals_2"," stat_2 values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_CompareStat_MbrOff=(int CompareStat::*)(&CompareStat::svals_2))),0,NULL,0},
  NULL};
static MethodArgs_data TA_CompareStat_GetStatVals_MethArgs[]={
  {&TA_Stat_ptr,NULL,"st",""},
  {&TA_float_RArray_ref,NULL,"sv",""},
  NULL};
static MethodDef_data TA_CompareStat_MethodDef[]={
  {&TA_void,NULL,"GetStatVals"," get stat vals into an array","","",
    0,2,-1,0,NULL,cssElCFun_CompareStat_GetStatVals_stub,TA_CompareStat_GetStatVals_MethArgs},
  NULL};
static int EpochCounterStat::* TA_EpochCounterStat_MbrOff;
static MemberDef_data TA_EpochCounterStat_MemberDef[]={
  {&TA_StatVal,NULL,"epoch","","","",
    *((ta_memb_ptr*)&(TA_EpochCounterStat_MbrOff=(int EpochCounterStat::*)(&EpochCounterStat::epoch))),0,NULL,0},
  NULL};
static int ProcCounterStat::* TA_ProcCounterStat_MbrOff;
static MemberDef_data TA_ProcCounterStat_MemberDef[]={
  {&TA_SchedProcess_ptr,NULL,"proc"," process to get counters from","","",
    *((ta_memb_ptr*)&(TA_ProcCounterStat_MbrOff=(int ProcCounterStat::*)(&ProcCounterStat::proc))),0,NULL,0},
  {&TA_StatVal_List,NULL,"counters"," group of counters of data","","",
    *((ta_memb_ptr*)&(TA_ProcCounterStat_MbrOff=(int ProcCounterStat::*)(&ProcCounterStat::counters))),0,NULL,0},
  NULL};
static MethodDef_data TA_ProcCounterStat_MethodDef[]={
  {&TA_bool,NULL,"NeedsUpdated","","","",
    0,0,-1,0,NULL,cssElCFun_ProcCounterStat_NeedsUpdated_stub,NULL},
  NULL};
static EnumDef_data TA_SchedProcess_StatLoc[]={
  {"DEFAULT","","",0},
  {"LOOP_STATS","","",1},
  {"FINAL_STATS","","",2},
  NULL};
static EnumDef_data TA_SchedProcess_ProcLoc[]={
  {"INIT_PROCS","","",0},
  {"LOOP_PROCS","","",1},
  {"FINAL_PROCS","","",2},
  NULL};
static EnumDef_data TA_SchedProcess_SchedProcLoc[]={
  {"SUPER_PROC","","",0},
  {"SUB_PROC","","",1},
  NULL};
static int SchedProcess::* TA_SchedProcess_MbrOff;
static MemberDef_data TA_SchedProcess_MemberDef[]={
  {&TA_bool,NULL,"stop_flag"," the Stop button was hit: stop running!","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&SchedProcess::stop_flag),0},
  {&TA_bool,NULL,"stepping"," the Step button started us running","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&SchedProcess::stepping),0},
  {&TA_bool,NULL,"bailing"," abort all further processing: stop was triggered below","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&SchedProcess::bailing),0},
  {&TA_bool,NULL,"running"," some process is running","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&SchedProcess::running),0},
  {&TA_bool,NULL,"im_step_proc"," i'm the stepping process","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::im_step_proc))),0,NULL,0},
  {&TA_bool,NULL,"im_run_proc"," i'm the process that initiated the interactive run","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::im_run_proc))),0,NULL,0},
  {&TA_Counter_ptr,NULL,"cntr"," pointer to the counter","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::cntr))),0,NULL,0},
  {&TA_DataItem_List,NULL,"cntr_items"," data item representations for cntrs","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::cntr_items))),0,NULL,0},
  {&TA_bool,NULL,"re_init"," Flag for re-initialization","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::re_init))),0,NULL,0},
  {&TA_SchedProcess_ptr,NULL,"super_proc"," Process which calls this","READ_ONLY NO_SAVE NO_SUBTYPE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::super_proc))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"sub_proc_type"," type of sub-process to use","DETAIL TYPE_SchedProcess NULL_OK ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::sub_proc_type))),0,NULL,0},
  {&TA_SchedProcess_ptr,NULL,"sub_proc"," Sub-process called by this","DETAIL ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::sub_proc))),0,NULL,0},
  {&TA_StepParams,NULL,"step"," Which process to step and n_steps","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::step))),0,NULL,0},
  {&TA_Stat_Group,NULL,"loop_stats"," Statistics Computed in Loop","DETAIL IN_GPMENU BROWSE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::loop_stats))),0,NULL,0},
  {&TA_Stat_Group,NULL,"final_stats"," Statistics Computed after Loop","DETAIL IN_GPMENU BROWSE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::final_stats))),0,NULL,0},
  {&TA_Process_Group,NULL,"init_procs"," Misc procs run when process is initialized","DETAIL IN_GPMENU BROWSE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::init_procs))),0,NULL,0},
  {&TA_Process_Group,NULL,"loop_procs"," Misc procs run in the loop, using mod based on loop counter","DETAIL IN_GPMENU BROWSE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::loop_procs))),0,NULL,0},
  {&TA_Process_Group,NULL,"final_procs"," Misc procs run after process is finished","DETAIL IN_GPMENU BROWSE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::final_procs))),0,NULL,0},
  {&TA_PDPLog_Group,NULL,"logs"," Logs to log to","LINK_GROUP HIDDEN BROWSE ","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::logs))),0,NULL,0},
  {&TA_bool,NULL,"log_loop"," Log the loop state (instead of final state)","","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::log_loop))),0,NULL,0},
  {&TA_bool,NULL,"log_counter"," Log the counter values for this process","","",
    *((ta_memb_ptr*)&(TA_SchedProcess_MbrOff=(int SchedProcess::*)(&SchedProcess::log_counter))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SchedProcess_GoTo_MethArgs[]={
  {&TA_int,NULL,"goto_val",""},
  NULL};
static MethodArgs_data TA_SchedProcess_SetReInit_MethArgs[]={
  {&TA_bool,NULL,"ri_val",""},
  NULL};
static MethodArgs_data TA_SchedProcess_GenCntrLog_MethArgs[]={
  {&TA_LogData_ptr,NULL,"ld",""},
  {&TA_bool,NULL,"gen",""},
  NULL};
static MethodArgs_data TA_SchedProcess_FindSubProc_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_SchedProcess_FindSuperProc_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_SchedProcess_FindProcOfType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_SchedProcess_CreateSubProcs_MethArgs[]={
  {&TA_bool,NULL,"update","true"},
  NULL};
static MethodArgs_data TA_SchedProcess_MoveToSubGp_MethArgs[]={
  {&TA_const_char_ptr,NULL,"gp_name",""},
  NULL};
static MethodArgs_data TA_SchedProcess_ChangeNameSuffix_MethArgs[]={
  {&TA_const_char_ptr,NULL,"new_name_sufx",""},
  NULL};
static MethodArgs_data TA_SchedProcess_AddSuperProc_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"proc_type",""},
  NULL};
static MethodArgs_data TA_SchedProcess_AddSubProc_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"proc_type",""},
  NULL};
static MethodArgs_data TA_SchedProcess_NewStat_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"type",""},
  {NULL,"::StatLoc","loc","DEFAULT"},
  {&TA_int,NULL,"num","1"},
  {&TA_bool,NULL,"create_aggs","true"},
  NULL};
static MethodArgs_data TA_SchedProcess_NewProcess_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"type",""},
  {NULL,"::ProcLoc","loc","INIT_PROCS"},
  {&TA_int,NULL,"num","1"},
  NULL};
static MethodArgs_data TA_SchedProcess_NewSchedProc_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"type",""},
  {NULL,"::SchedProcLoc","loc","SUPER_PROC"},
  NULL};
static MethodArgs_data TA_SchedProcess_Default_StatProc_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"stat_td",""},
  {&TA_Process_MGroup_ptr,NULL,"procs",""},
  NULL};
static MethodArgs_data TA_SchedProcess_Default_StatGroup_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"stat_td",""},
  {&TA_SchedProcess_ptr,NULL,"proc",""},
  NULL};
static MethodArgs_data TA_SchedProcess_GetStatGroup_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"stat_td",""},
  {NULL,"::StatLoc","loc",""},
  NULL};
static MethodArgs_data TA_SchedProcess_GetProcGroup_MethArgs[]={
  {NULL,"::ProcLoc","loc",""},
  NULL};
static MethodArgs_data TA_SchedProcess_MakeAggregator_MethArgs[]={
  {&TA_Stat_ptr,NULL,"of_stat",""},
  {NULL,"::StatLoc","in_loc",""},
  {NULL,"Aggregate::Operator","agg_op"," Aggregate::DEFAULT"},
  NULL};
static MethodDef_data TA_SchedProcess_MethodDef[]={
  {&TA_void,NULL,"Run_gui"," run the process in an interactive fashion: can be stopped and sets flags for only running one process","BUTTON LABEL_Run GHOST_OFF_running NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Run_gui_stub,NULL},
  {&TA_int,NULL,"GetCounter","","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_GetCounter_stub,NULL},
  {&TA_void,NULL,"Step"," runs the next step of process","BUTTON GHOST_OFF_running NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Step_stub,NULL},
  {&TA_void,NULL,"Step_gui"," backwards compatibility: gui is same as step: step implies interactive processing","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Step_gui_stub,NULL},
  {&TA_void,NULL,"Stop"," stops any interactively running process","BUTTON NO_APPLY_BEFORE GHOST_ON_running NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Stop_stub,NULL},
  {&TA_void,NULL,"GoTo"," go to given specific counter value","BUTTON GHOST_OFF_running ","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_GoTo_stub,TA_SchedProcess_GoTo_MethArgs},
  {&TA_void,NULL,"StepUp"," move up one step in hierarchy, remove updater to network at previous level","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_StepUp_stub,NULL},
  {&TA_void,NULL,"StepDn"," move down one step in hierarchy, add updater to network at new level","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_StepDn_stub,NULL},
  {&TA_void,NULL,"InitProcs"," run the initialize processes (init_procs)","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_InitProcs_stub,NULL},
  {&TA_void,NULL,"Init_flag"," flag this process and all sub procs for re_init","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Init_flag_stub,NULL},
  {&TA_void,NULL,"Init_force"," force re_init of all processes","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Init_force_stub,NULL},
  {&TA_void,NULL,"Init_step_flags"," initialize step flags","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Init_step_flags_stub,NULL},
  {&TA_void,NULL,"Loop"," called in the do loop (the main looping code)","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Loop_stub,NULL},
  {&TA_void,NULL,"UpdateCounters"," update process counters (right after loop)","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_UpdateCounters_stub,NULL},
  {&TA_void,NULL,"LoopProcs"," call the loop_procs","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_LoopProcs_stub,NULL},
  {&TA_void,NULL,"LoopStats"," stats computed inside the loop","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_LoopStats_stub,NULL},
  {&TA_void,NULL,"UpdateLogs"," update the logs","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_UpdateLogs_stub,NULL},
  {&TA_void,NULL,"UpdateState"," update misc state variables (after logs)","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_UpdateState_stub,NULL},
  {&TA_bool,NULL,"Crit"," returns true if stop criterion was met","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Crit_stub,NULL},
  {&TA_bool,NULL,"StopCheck"," check for stop flag or stepping stopping: true if so, false if not","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_StopCheck_stub,NULL},
  {&TA_bool,NULL,"HandleEvents"," process gui events","","",
    0,0,-1,1,(ta_void_fun)(SchedProcess::HandleEvents),cssElCFun_SchedProcess_HandleEvents_stub,NULL},
  {&TA_void,NULL,"FinalProcs"," call the final_procs","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_FinalProcs_stub,NULL},
  {&TA_void,NULL,"FinalStats"," compute the final statistics","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_FinalStats_stub,NULL},
  {&TA_void,NULL,"Final"," any misc things to do after loop","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_Final_stub,NULL},
  {&TA_void,NULL,"UpdateDisplays"," update displays after end of loop","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_UpdateDisplays_stub,NULL},
  {&TA_void,NULL,"SetReInit"," set re-init flag to given value","","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_SetReInit_stub,TA_SchedProcess_SetReInit_MethArgs},
  {&TA_bool,NULL,"FinalStepCheck"," if this process is step process, always set stop_flag in final so you always step at end","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_FinalStepCheck_stub,NULL},
  {&TA_void,NULL,"GenCntrLog"," generate log data for the counters","","",
    0,2,-1,0,NULL,cssElCFun_SchedProcess_GenCntrLog_stub,TA_SchedProcess_GenCntrLog_MethArgs},
  {&TA_void,NULL,"InitMyLogs"," clear all logs associated with this process","MENU MENU_ON_Actions MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_InitMyLogs_stub,NULL},
  {&TA_void,NULL,"InitAllLogs"," clear all logs that exist in the project","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_InitAllLogs_stub,NULL},
  {&TA_void,NULL,"InitNetwork"," initialize network's weights","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_InitNetwork_stub,NULL},
  {&TA_void,NULL,"InitAll"," initialize process, network weights, and logs","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_InitAll_stub,NULL},
  {&TA_void,NULL,"RemoveFromLogs"," remove this from any logs","MENU CONFIRM MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_RemoveFromLogs_stub,NULL},
  {&TA_void,NULL,"RemoveFromDisplays"," remove this from any displays","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_RemoveFromDisplays_stub,NULL},
  {&TA_bool,NULL,"CheckAllTypes"," Check all minimum types for all processes and sub_procs","MENU USE_RVAL MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_CheckAllTypes_stub,NULL},
  {&TA_void,NULL,"UpdateLogUpdaters"," make sure logs have us in their updater lists","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_UpdateLogUpdaters_stub,NULL},
  {&TA_void,NULL,"UpdateDisplayUpdaters"," make sure logs have us in their updater lists","","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_UpdateDisplayUpdaters_stub,NULL},
  {&TA_SchedProcess_ptr,NULL,"FindSubProc"," find of a given type","","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_FindSubProc_stub,TA_SchedProcess_FindSubProc_MethArgs},
  {&TA_SchedProcess_ptr,NULL,"FindSuperProc"," find of a given type","","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_FindSuperProc_stub,TA_SchedProcess_FindSuperProc_MethArgs},
  {&TA_SchedProcess_ptr,NULL,"FindProcOfType"," find of a given type, including this proc, super and sub procs","","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_FindProcOfType_stub,TA_SchedProcess_FindProcOfType_MethArgs},
  {&TA_void,NULL,"CreateSubProcs"," create sub-processes of this one","NEW_FUN ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_SchedProcess_CreateSubProcs_stub,TA_SchedProcess_CreateSubProcs_MethArgs},
  {&TA_void,NULL,"MoveToSubGp"," Move this process and all sub-procs to a new sub group (and name it gp_name)","MENU MENU_ON_Structure ","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_MoveToSubGp_stub,TA_SchedProcess_MoveToSubGp_MethArgs},
  {&TA_void,NULL,"ChangeNameSuffix"," change the suffix (after _ ) for each process name","MENU ","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_ChangeNameSuffix_stub,TA_SchedProcess_ChangeNameSuffix_MethArgs},
  {&TA_void,NULL,"AddSuperProc"," insert a new super process of given type above this one in hierarchy","MENU TYPE_SchedProcess ","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_AddSuperProc_stub,TA_SchedProcess_AddSuperProc_MethArgs},
  {&TA_void,NULL,"AddSubProc"," insert a new sub process of given type below this one in hierarchy","MENU TYPE_SchedProcess ","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_AddSubProc_stub,TA_SchedProcess_AddSubProc_MethArgs},
  {&TA_void,NULL,"RemoveSuperProc"," remove super process above this one in hierarchy","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_RemoveSuperProc_stub,NULL},
  {&TA_void,NULL,"RemoveSubProc"," remove sub process below this one in hierarchy","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_SchedProcess_RemoveSubProc_stub,NULL},
  {&TA_Stat_ptr,NULL,"NewStat"," create num new statistic(s) of given type in this process at location loc, creating time-aggregates if checked","MENU USE_RVAL_RMB TYPE_Stat ","",
    0,4,1,0,NULL,cssElCFun_SchedProcess_NewStat_stub,TA_SchedProcess_NewStat_MethArgs},
  {&TA_Process_ptr,NULL,"NewProcess"," create num new process(es) of given type in this process at location loc","MENU USE_RVAL_RMB TYPE_Process ","",
    0,3,1,0,NULL,cssElCFun_SchedProcess_NewProcess_stub,TA_SchedProcess_NewProcess_MethArgs},
  {&TA_SchedProcess_ptr,NULL,"NewSchedProc"," create a new sub/super process of given type below/above the current one","MENU USE_RVAL_RMB TYPE_SchedProcess ","",
    0,2,1,0,NULL,cssElCFun_SchedProcess_NewSchedProc_stub,TA_SchedProcess_NewSchedProc_MethArgs},
  {&TA_SchedProcess_ptr,NULL,"Default_StatProc"," returns the default process to create given type of stat in","","",
    0,2,-1,1,(ta_void_fun)(SchedProcess::Default_StatProc),cssElCFun_SchedProcess_Default_StatProc_stub,TA_SchedProcess_Default_StatProc_MethArgs},
  {&TA_Stat_Group_ptr,NULL,"Default_StatGroup"," returns the default stat group within sched proc to create stat in","","",
    0,2,-1,1,(ta_void_fun)(SchedProcess::Default_StatGroup),cssElCFun_SchedProcess_Default_StatGroup_stub,TA_SchedProcess_Default_StatGroup_MethArgs},
  {&TA_Stat_Group_ptr,NULL,"GetStatGroup"," get stat group of specified location (if DEFAULT, use stat_td to determine location)","","",
    0,2,-1,0,NULL,cssElCFun_SchedProcess_GetStatGroup_stub,TA_SchedProcess_GetStatGroup_MethArgs},
  {&TA_Process_Group_ptr,NULL,"GetProcGroup"," get process group of specified location","","",
    0,1,-1,0,NULL,cssElCFun_SchedProcess_GetProcGroup_stub,TA_SchedProcess_GetProcGroup_MethArgs},
  {&TA_Stat_ptr,NULL,"MakeAggregator"," make an aggregator of given stat in given location of this sched proc, using given agg operator","","",
    0,3,2,0,NULL,cssElCFun_SchedProcess_MakeAggregator_stub,TA_SchedProcess_MakeAggregator_MethArgs},
  NULL};
static int BatchProcess::* TA_BatchProcess_MbrOff;
static MemberDef_data TA_BatchProcess_MemberDef[]={
  {&TA_Counter,NULL,"batch"," number of batches run","","",
    *((ta_memb_ptr*)&(TA_BatchProcess_MbrOff=(int BatchProcess::*)(&BatchProcess::batch))),0,NULL,0},
  NULL};
static int TrainProcess::* TA_TrainProcess_MbrOff;
static MemberDef_data TA_TrainProcess_MemberDef[]={
  {&TA_Counter,NULL,"epoch"," Epoch Counter","","",
    *((ta_memb_ptr*)&(TA_TrainProcess_MbrOff=(int TrainProcess::*)(&TrainProcess::epoch))),0,NULL,0},
  {&TA_EpochProcess_ptr,NULL,"epoch_proc"," pointer to epoch process","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TrainProcess_MbrOff=(int TrainProcess::*)(&TrainProcess::epoch_proc))),0,NULL,0},
  NULL};
static int NEpochProcess::* TA_NEpochProcess_MbrOff;
static MemberDef_data TA_NEpochProcess_MemberDef[]={
  {&TA_Counter,NULL,"epc_ctr"," local epoch counter","","",
    *((ta_memb_ptr*)&(TA_NEpochProcess_MbrOff=(int NEpochProcess::*)(&NEpochProcess::epc_ctr))),0,NULL,0},
  {&TA_int,NULL,"epoch"," epoch count on the network itself","","",
    *((ta_memb_ptr*)&(TA_NEpochProcess_MbrOff=(int NEpochProcess::*)(&NEpochProcess::epoch))),0,NULL,0},
  {&TA_EpochProcess_ptr,NULL,"epoch_proc"," pointer to epoch process","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NEpochProcess_MbrOff=(int NEpochProcess::*)(&NEpochProcess::epoch_proc))),0,NULL,0},
  NULL};
static EnumDef_data TA_EpochProcess_Order[]={
  {"SEQUENTIAL"," present events in sequential order","",0},
  {"PERMUTED"," permute the order of event presentation","",1},
  {"RANDOM"," pick an event at random (with replacement)","",2},
  NULL};
static EnumDef_data TA_EpochProcess_WtUpdate[]={
  {"TEST"," don't update weights at all (for testing net)","",0},
  {"ON_LINE"," update weights on-line (after every event) -- this is not viable for dmem processing and is automatically switched to small_batch","",1},
  {"SMALL_BATCH"," update weights every batch_n events (in SequenceEpoch, see small_batch for how to apply to sequences)","",2},
  {"BATCH"," update weights in batch (after every epoch)","",3},
  NULL};
static int EpochProcess::* TA_EpochProcess_MbrOff;
static MemberDef_data TA_EpochProcess_MemberDef[]={
  {&TA_Counter,NULL,"trial"," Current trial number (and index into list)","","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::trial))),0,NULL,0},
  {&TA_Event_ptr,NULL,"cur_event"," the current event","FROM_GROUP_enviro_group ","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::cur_event))),0,NULL,0},
  {NULL,"::Order","order"," order to present events in","","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::order))),0,NULL,0},
  {NULL,"::WtUpdate","wt_update"," determines weight update mode","","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::wt_update))),0,NULL,0},
  {&TA_int,NULL,"batch_n"," number of events for small_batch learning mode (specifies how often weight changes are synchronized in dmem)","CONDEDIT_ON_wt_update:SMALL_BATCH ","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::batch_n))),0,NULL,0},
  {&TA_int,NULL,"batch_n_eff"," effective batch_n value = batch_n except for dmem when it = (batch_n / epc_nprocs) >= 1","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::batch_n_eff))),0,NULL,0},
  {&TA_int_Array,NULL,"event_list"," list of events","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::event_list))),0,NULL,0},
  {&TA_Event_MGroup_ptr,NULL,"enviro_group"," main event group on environment","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::enviro_group))),0,NULL,0},
  {&TA_int,NULL,"dmem_nprocs"," maximum number of processors to use for distributed memory computation of events within the epoch (actual = MIN(dmem_nprocs, nprocs / net dmem_nprocs_actual); may be less)","","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::dmem_nprocs))),0,NULL,0},
  {&TA_int,NULL,"dmem_nprocs_actual"," actual number of processors being used = MIN(dmem_nprocs, nprocs / net dmem_nprocs_actual)","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_EpochProcess_MbrOff=(int EpochProcess::*)(&EpochProcess::dmem_nprocs_actual))),0,NULL,0},
  NULL};
static MethodDef_data TA_EpochProcess_MethodDef[]={
  {&TA_void,NULL,"GetEventList"," get list of events from environment","","",
    0,0,-1,0,NULL,cssElCFun_EpochProcess_GetEventList_stub,NULL},
  {&TA_void,NULL,"GetCurEvent"," get current event","","",
    0,0,-1,0,NULL,cssElCFun_EpochProcess_GetCurEvent_stub,NULL},
  {&TA_void,NULL,"Loop_UpdateWeights"," update the weights within the loop (online or small batch)","","",
    0,0,-1,0,NULL,cssElCFun_EpochProcess_Loop_UpdateWeights_stub,NULL},
  {&TA_void,NULL,"Final_UpdateWeights"," update the weights at end of epoch (batch mode or small batch)","","",
    0,0,-1,0,NULL,cssElCFun_EpochProcess_Final_UpdateWeights_stub,NULL},
  {&TA_void,NULL,"AllocProcs"," allocate processors to different tasks..","","",
    0,0,-1,0,NULL,cssElCFun_EpochProcess_AllocProcs_stub,NULL},
  NULL};
static EnumDef_data TA_SequenceProcess_Order[]={
  {"SEQUENTIAL"," present events in sequential order","",0},
  {"PERMUTED"," permute the order of event presentation","",1},
  {"RANDOM"," pick an event at random (with replacement)","",2},
  NULL};
static EnumDef_data TA_SequenceProcess_StateInit[]={
  {"DO_NOTHING"," do nothing","",0},
  {"INIT_STATE"," initialize the network state","",1},
  {"MODIFY_STATE"," modify state (algorithm specific)","",2},
  NULL};
static int SequenceProcess::* TA_SequenceProcess_MbrOff;
static MemberDef_data TA_SequenceProcess_MemberDef[]={
  {&TA_Counter,NULL,"tick"," one unit of time in a sequence","","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::tick))),0,NULL,0},
  {&TA_Event_ptr,NULL,"cur_event"," current event","FROM_GROUP_cur_event_gp ","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::cur_event))),0,NULL,0},
  {&TA_Event_MGroup_ptr,NULL,"cur_event_gp"," event group","FROM_GROUP_enviro_group ","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::cur_event_gp))),0,NULL,0},
  {NULL,"::Order","order"," order to present events in","","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::order))),0,NULL,0},
  {NULL,"::StateInit","sequence_init"," how to initialize network stat at start of sequence","","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::sequence_init))),0,NULL,0},
  {&TA_SequenceEpoch_ptr,NULL,"sequence_epoch"," pointer to parent epoch process","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::sequence_epoch))),0,NULL,0},
  {&TA_int_Array,NULL,"event_list"," list of events","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::event_list))),0,NULL,0},
  {&TA_Event_MGroup_ptr,NULL,"enviro_group"," main event group on environment","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SequenceProcess_MbrOff=(int SequenceProcess::*)(&SequenceProcess::enviro_group))),0,NULL,0},
  NULL};
static MethodDef_data TA_SequenceProcess_MethodDef[]={
  {&TA_void,NULL,"GetEventList"," get list of events from environment","","",
    0,0,-1,0,NULL,cssElCFun_SequenceProcess_GetEventList_stub,NULL},
  {&TA_void,NULL,"GetCurEvent","","","",
    0,0,-1,0,NULL,cssElCFun_SequenceProcess_GetCurEvent_stub,NULL},
  {&TA_void,NULL,"InitNetState","","","",
    0,0,-1,0,NULL,cssElCFun_SequenceProcess_InitNetState_stub,NULL},
  {&TA_void,NULL,"Loop_UpdateWeights","","","",
    0,0,-1,0,NULL,cssElCFun_SequenceProcess_Loop_UpdateWeights_stub,NULL},
  {&TA_void,NULL,"Final_UpdateWeights","","","",
    0,0,-1,0,NULL,cssElCFun_SequenceProcess_Final_UpdateWeights_stub,NULL},
  NULL};
static int TrialProcess::* TA_TrialProcess_MbrOff;
static MemberDef_data TA_TrialProcess_MemberDef[]={
  {&TA_Event_ptr,NULL,"cur_event"," the current event (copied from the EpochProc)","FROM_GROUP_enviro_group ","",
    *((ta_memb_ptr*)&(TA_TrialProcess_MbrOff=(int TrialProcess::*)(&TrialProcess::cur_event))),0,NULL,0},
  {&TA_EpochProcess_ptr,NULL,"epoch_proc"," pointer to parent epoch_proc","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TrialProcess_MbrOff=(int TrialProcess::*)(&TrialProcess::epoch_proc))),0,NULL,0},
  {&TA_Event_MGroup_ptr,NULL,"enviro_group"," main event group on environment","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TrialProcess_MbrOff=(int TrialProcess::*)(&TrialProcess::enviro_group))),0,NULL,0},
  NULL};
static int SettleProcess::* TA_SettleProcess_MbrOff;
static MemberDef_data TA_SettleProcess_MemberDef[]={
  {&TA_Counter,NULL,"cycle"," Current cycle number","","",
    *((ta_memb_ptr*)&(TA_SettleProcess_MbrOff=(int SettleProcess::*)(&SettleProcess::cycle))),0,NULL,0},
  NULL};
static EnumDef_data TA_SequenceEpoch_SmallBatchType[]={
  {"SEQUENCE"," at the sequence level (batch_n sequences)","",0},
  {"EVENT"," at the event level (within the sequence, weights updated every batch_n events, with an additional update at end of sequence if needed)","",1},
  NULL};
static int SequenceEpoch::* TA_SequenceEpoch_MbrOff;
static MemberDef_data TA_SequenceEpoch_MemberDef[]={
  {NULL,"::SmallBatchType","small_batch"," how to apply SMALL_BATCH wt_update when using sequences","CONDEDIT_ON_wt_update:SMALL_BATCH ","",
    *((ta_memb_ptr*)&(TA_SequenceEpoch_MbrOff=(int SequenceEpoch::*)(&SequenceEpoch::small_batch))),0,NULL,0},
  {&TA_Event_MGroup_ptr,NULL,"cur_event_gp"," current event group","FROM_GROUP_enviro_group ","",
    *((ta_memb_ptr*)&(TA_SequenceEpoch_MbrOff=(int SequenceEpoch::*)(&SequenceEpoch::cur_event_gp))),0,NULL,0},
  NULL};
static int PDPLog::* TA_PDPLog_MbrOff;
static MemberDef_data TA_PDPLog_MemberDef[]={
  {&TA_taFiler_ptr,NULL,"log_file"," optional file for saving","","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::log_file))),0,NULL,0},
  {&TA_int,NULL,"log_lines"," number of lines in the log","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::log_lines))),0,NULL,0},
  {&TA_LogData,NULL,"log_data"," our own log data for reading fm file","NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::log_data))),0,NULL,0},
  {&TA_DataTable,NULL,"data"," data for the log","","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::data))),0,NULL,0},
  {&TA_int,NULL,"data_bufsz"," how big a data buffer size to keep","DETAIL ","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::data_bufsz))),0,NULL,0},
  {&TA_float,NULL,"data_shift"," percentage to shift buffer upon overflow","DETAIL ","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::data_shift))),0,NULL,0},
  {&TA_MinMaxInt,NULL,"data_range"," range of lines in the data buffer (in log lines)","READ_ONLY NO_SAVE SHOW ","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::data_range))),0,NULL,0},
  {&TA_bool,NULL,"record_proc_name"," whether to record process name in log file or not","","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::record_proc_name))),0,NULL,0},
  {&TA_Process_Group,NULL,"log_proc"," processes which use this log","LINK_GROUP BROWSE ","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::log_proc))),0,NULL,0},
  {&TA_SchedProcess_ptr,NULL,"cur_proc"," current process sending to log","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::cur_proc))),0,NULL,0},
  {&TA_String_Array,NULL,"display_labels"," ordered list of labels to use for views and log files","","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::display_labels))),0,NULL,0},
  {&TA_TDCoord,NULL,"pos"," position of view","","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::pos))),0,NULL,0},
  {&TA_TDCoord,NULL,"geom"," size of view","","",
    *((ta_memb_ptr*)&(TA_PDPLog_MbrOff=(int PDPLog::*)(&PDPLog::geom))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PDPLog_GetHeaders_MethArgs[]={
  {&TA_bool,NULL,"keep_display_settings"," true"},
  NULL};
static MethodArgs_data TA_PDPLog_SetSaveFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_PDPLog_SetAppendFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_PDPLog_LoadFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_PDPLog_BufferToFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_PDPLog_Buffer_SeekForView_MethArgs[]={
  {&TA_const_MinMaxInt_ref,NULL,"view_range",""},
  NULL};
static MethodArgs_data TA_PDPLog_AddUpdater_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"updt_proc",""},
  NULL};
static MethodArgs_data TA_PDPLog_RemoveUpdater_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"updt_proc",""},
  NULL};
static MethodArgs_data TA_PDPLog_NewData_MethArgs[]={
  {&TA_LogData_ref,NULL,"ld",""},
  {&TA_SchedProcess_ptr,NULL,"sproc",""},
  NULL};
static MethodArgs_data TA_PDPLog_ShowInViewer_MethArgs[]={
  {&TA_T3DataViewer_ptr,NULL,"vw"," ((void *)0)"},
  NULL};
static MethodDef_data TA_PDPLog_MethodDef[]={
  {&TA_int,NULL,"virt_lines"," number of actual or log lines available","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_virt_lines_stub,NULL},
  {&TA_void,NULL,"GetHeaders"," Get header information (list of data to display) from processes and clear out all current data (except save display info if checked)","MENU MENU_ON_Actions ","",
    0,1,0,0,NULL,cssElCFun_PDPLog_GetHeaders_stub,TA_PDPLog_GetHeaders_MethArgs},
  {&TA_void,NULL,"SetSaveFile"," open file to save log data to (overwrite existing file)","MENU MENU_ON_LogFile ARGC_0 ","",
    0,2,0,0,NULL,cssElCFun_PDPLog_SetSaveFile_stub,TA_PDPLog_SetSaveFile_MethArgs},
  {&TA_void,NULL,"SetAppendFile"," open file to append log data to","MENU ARGC_0 ","",
    0,2,0,0,NULL,cssElCFun_PDPLog_SetAppendFile_stub,TA_PDPLog_SetAppendFile_MethArgs},
  {&TA_void,NULL,"LoadFile"," read in existing log file data","MENU ARGC_0 ","",
    0,2,0,0,NULL,cssElCFun_PDPLog_LoadFile_stub,TA_PDPLog_LoadFile_MethArgs},
  {&TA_void,NULL,"CloseFile"," close any open files being logged to","MENU MENU_SEP_AFTER ","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_CloseFile_stub,NULL},
  {&TA_void,NULL,"BufferToFile"," send current buffer of data to file: if null args and already open, to it, else opens a new file sends header and closes after","MENU ARGC_0 ","",
    0,2,0,0,NULL,cssElCFun_PDPLog_BufferToFile_stub,TA_PDPLog_BufferToFile_MethArgs},
  {&TA_void,NULL,"HeadToFile"," send current header to currently open log file -- if not already open, quietly fails","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_HeadToFile_stub,NULL},
  {&TA_void,NULL,"Buffer_F"," forward by data_shift","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_Buffer_F_stub,NULL},
  {&TA_void,NULL,"Buffer_R"," rewind by data_shift","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_Buffer_R_stub,NULL},
  {&TA_void,NULL,"Buffer_FF"," forward to end","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_Buffer_FF_stub,NULL},
  {&TA_void,NULL,"Buffer_FR"," rewind to begining","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_Buffer_FR_stub,NULL},
  {&TA_void,NULL,"Buffer_SeekForView"," makes sure buffer contains data for view_range","","",
    0,1,-1,0,NULL,cssElCFun_PDPLog_Buffer_SeekForView_stub,TA_PDPLog_Buffer_SeekForView_MethArgs},
  {&TA_void,NULL,"Clear"," clears out the data","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_Clear_stub,NULL},
  {&TA_void,NULL,"UpdateViewHeaders"," update headers for all views","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_UpdateViewHeaders_stub,NULL},
  {&TA_void,NULL,"AddUpdater"," Tell updt_proc to update this log with new log data as the process runs ","NEW_FUN MENU MENU_ON_Object MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_PDPLog_AddUpdater_stub,TA_PDPLog_AddUpdater_MethArgs},
  {&TA_void,NULL,"RemoveUpdater"," remove given updating process","MENU MENU_ON_Object FROM_GROUP_log_proc ","",
    0,1,-1,0,NULL,cssElCFun_PDPLog_RemoveUpdater_stub,TA_PDPLog_RemoveUpdater_MethArgs},
  {&TA_void,NULL,"RemoveAllUpdaters"," remove this from all process logs","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_RemoveAllUpdaters_stub,NULL},
  {&TA_void,NULL,"NewData"," This is the primary call to make when sending data to the log","","",
    0,2,-1,0,NULL,cssElCFun_PDPLog_NewData_stub,TA_PDPLog_NewData_MethArgs},
  {&TA_void,NULL,"ViewAllData"," make views display all available data","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_ViewAllData_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"GetDefaultView","","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_GetDefaultView_stub,NULL},
  {&TA_LogView_ptr,NULL,"NewLogView"," return correct type of logview","","",
    0,0,-1,0,NULL,cssElCFun_PDPLog_NewLogView_stub,NULL},
  {&TA_void,NULL,"ShowInViewer"," Show this log in a new or existing T3 Viewer","NULL_OK MENU MENU_ON_Object MENU_SEP_BEFORE MENU_CONTEXT ","",
    0,1,0,0,NULL,cssElCFun_PDPLog_ShowInViewer_stub,TA_PDPLog_ShowInViewer_MethArgs},
  NULL};
static MethodArgs_data TA_PDPView_AddNotify_MethArgs[]={
  {&TA_TAPtr,NULL,"ud",""},
  NULL};
static MethodArgs_data TA_PDPView_RemoveNotify_MethArgs[]={
  {&TA_TAPtr,NULL,"ud",""},
  NULL};
static MethodDef_data TA_PDPView_MethodDef[]={
  {&TA_void,NULL,"AddNotify","","","",
    0,1,-1,0,NULL,cssElCFun_PDPView_AddNotify_stub,TA_PDPView_AddNotify_MethArgs},
  {&TA_void,NULL,"RemoveNotify","","","",
    0,1,-1,0,NULL,cssElCFun_PDPView_RemoveNotify_stub,TA_PDPView_RemoveNotify_MethArgs},
  {&TA_TypeDef_ptr,NULL,"UpdaterType","","","",
    0,0,-1,0,NULL,cssElCFun_PDPView_UpdaterType_stub,NULL},
  NULL};
static MethodArgs_data TA_pdpDataViewer_New_MethArgs[]={
  {&TA_Project_ptr,NULL,"proj",""},
  NULL};
static MethodArgs_data TA_pdpDataViewer_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_pdpDataViewer_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_pdpDataViewer_MakeTokenAry_MethArgs[]={
  {&TA_int,NULL,"no",""},
  NULL};
static MethodArgs_data TA_pdpDataViewer_StatTypeDef_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodDef_data TA_pdpDataViewer_MethodDef[]={
  {&TA_pdpDataViewer_ptr,NULL,"New"," populates all elements (all layers, prjns, i/o, etc.)","","",
    0,1,-1,1,(ta_void_fun)(pdpDataViewer::New),cssElCFun_pdpDataViewer_New_stub,TA_pdpDataViewer_New_MethArgs},
  {&TA_Project_ptr,NULL,"proj"," aka data","","",
    0,0,-1,0,NULL,cssElCFun_pdpDataViewer_proj_stub,NULL},
  {&TA_ipdpDataViewer_ptr,NULL,"net_win","","","",
    0,0,-1,0,NULL,cssElCFun_pdpDataViewer_net_win_stub,NULL},
  {&TA_TAPtr,NULL,"Clone","","","",
    0,0,-1,0,NULL,cssElCFun_pdpDataViewer_Clone_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_pdpDataViewer_UnSafeCopy_stub,TA_pdpDataViewer_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_pdpDataViewer_CastCopyTo_stub,TA_pdpDataViewer_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"MakeToken","","","",
    0,0,-1,0,NULL,cssElCFun_pdpDataViewer_MakeToken_stub,NULL},
  {&TA_TAPtr,NULL,"MakeTokenAry","","","",
    0,1,-1,0,NULL,cssElCFun_pdpDataViewer_MakeTokenAry_stub,TA_pdpDataViewer_MakeTokenAry_MethArgs},
  {&TA_TypeDef_ptr,NULL,"GetTypeDef","","","",
    0,0,-1,0,NULL,cssElCFun_pdpDataViewer_GetTypeDef_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"StatTypeDef","","","",
    0,1,-1,1,(ta_void_fun)(pdpDataViewer::StatTypeDef),cssElCFun_pdpDataViewer_StatTypeDef_stub,TA_pdpDataViewer_StatTypeDef_MethArgs},
  NULL};
static int LogView::* TA_LogView_MbrOff;
static MemberDef_data TA_LogView_MemberDef[]={
  {&TA_int,NULL,"view_bufsz"," Maximum number of lines in visible buffer","","",
    *((ta_memb_ptr*)&(TA_LogView_MbrOff=(int LogView::*)(&LogView::view_bufsz))),0,NULL,0},
  {&TA_MinMaxInt,NULL,"view_range"," range of visible lines (in log lines)","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LogView_MbrOff=(int LogView::*)(&LogView::view_range))),0,NULL,0},
  {&TA_DT_ViewSpec_ptr,NULL,"viewspec"," global view spec for all data","BROWSE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LogView_MbrOff=(int LogView::*)(&LogView::viewspec))),0,NULL,0},
  {&TA_taBase_List,NULL,"viewspecs"," dummy group list to hold the single viewspec","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_LogView_MbrOff=(int LogView::*)(&LogView::viewspecs))),0,NULL,0},
  {&TA_bool,NULL,"display_toggle"," 'true' if display should be updated","DEF_true ","",
    *((ta_memb_ptr*)&(TA_LogView_MbrOff=(int LogView::*)(&LogView::display_toggle))),0,NULL,0},
  {&TA_float,NULL,"frame_inset"," inset of frame (used to calc actual inner space avail)","DEF_0.05 ","",
    *((ta_memb_ptr*)&(TA_LogView_MbrOff=(int LogView::*)(&LogView::frame_inset))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LogView_UpdateDisplay_MethArgs[]={
  {&TA_TAPtr,NULL,"updtr","((void *)0)"},
  NULL};
static MethodArgs_data TA_LogView_SetToggle_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_LogView_EditViewSpec_MethArgs[]={
  {&TA_taBase_ptr,NULL,"column",""},
  NULL};
static MethodArgs_data TA_LogView_SetVisibility_MethArgs[]={
  {&TA_taBase_ptr,NULL,"column",""},
  {&TA_bool,NULL,"visible",""},
  NULL};
static MethodArgs_data TA_LogView_SetLogging_MethArgs[]={
  {&TA_taBase_ptr,NULL,"column",""},
  {&TA_bool,NULL,"log_data",""},
  {&TA_bool,NULL,"also_chg_vis"," true"},
  NULL};
static MethodArgs_data TA_LogView_CopyToEnv_MethArgs[]={
  {&TA_taBase_ptr,NULL,"data",""},
  {&TA_taBase_ptr,NULL,"labels",""},
  {&TA_Environment_ptr,NULL,"env",""},
  NULL};
static MethodArgs_data TA_LogView_DistMatrixGrid_MethArgs[]={
  {&TA_taBase_ptr,NULL,"data",""},
  {&TA_taBase_ptr,NULL,"labels",""},
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::HAMMING"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_LogView_ClusterPlot_MethArgs[]={
  {&TA_taBase_ptr,NULL,"data",""},
  {&TA_taBase_ptr,NULL,"labels",""},
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {NULL,"float_RArray::DistMetric","metric","float_RArray::EUCLIDIAN"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_LogView_CorrelMatrixGrid_MethArgs[]={
  {&TA_taBase_ptr,NULL,"data",""},
  {&TA_taBase_ptr,NULL,"labels",""},
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  NULL};
static MethodArgs_data TA_LogView_PCAEigenGrid_MethArgs[]={
  {&TA_taBase_ptr,NULL,"data",""},
  {&TA_taBase_ptr,NULL,"labels",""},
  {&TA_GridLog_ptr,NULL,"disp_log",""},
  NULL};
static MethodArgs_data TA_LogView_PCAPrjnPlot_MethArgs[]={
  {&TA_taBase_ptr,NULL,"data",""},
  {&TA_taBase_ptr,NULL,"labels",""},
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"x_axis_component","0"},
  {&TA_int,NULL,"y_axis_component","1"},
  NULL};
static MethodArgs_data TA_LogView_MDSPrjnPlot_MethArgs[]={
  {&TA_taBase_ptr,NULL,"data",""},
  {&TA_taBase_ptr,NULL,"labels",""},
  {&TA_GraphLog_ptr,NULL,"disp_log",""},
  {&TA_int,NULL,"x_axis_component","0"},
  {&TA_int,NULL,"y_axis_component","1"},
  NULL};
static MethodArgs_data TA_LogView_View_At_MethArgs[]={
  {&TA_int,NULL,"start",""},
  NULL};
static MethodArgs_data TA_LogView_ViewC_At_MethArgs[]={
  {&TA_int,NULL,"start",""},
  NULL};
static MethodDef_data TA_LogView_MethodDef[]={
  {&TA_PDPLog_ptr,NULL,"log","","","",
    0,0,-1,0,NULL,cssElCFun_LogView_log_stub,NULL},
  {&TA_bool,NULL,"IsMapped"," return true if any panels/T3 views are mapped","","",
    0,0,-1,0,NULL,cssElCFun_LogView_IsMapped_stub,NULL},
  {&TA_void,NULL,"NewHead"," new header information is in log data","","",
    0,0,-1,0,NULL,cssElCFun_LogView_NewHead_stub,NULL},
  {&TA_void,NULL,"NewData"," new data information is in log's datatable","","",
    0,0,-1,0,NULL,cssElCFun_LogView_NewData_stub,NULL},
  {&TA_void,NULL,"UpdateFromBuffer"," update view from buffer; note: override _impl to implement","","",
    0,0,-1,0,NULL,cssElCFun_LogView_UpdateFromBuffer_stub,NULL},
  {&TA_void,NULL,"ClearData"," Clear the display and the data","","",
    0,0,-1,0,NULL,cssElCFun_LogView_ClearData_stub,NULL},
  {&TA_void,NULL,"InitDisplay","","","",
    0,0,-1,0,NULL,cssElCFun_LogView_InitDisplay_stub,NULL},
  {&TA_void,NULL,"InitPanel"," lets panel init itself after struct changes","","",
    0,0,-1,0,NULL,cssElCFun_LogView_InitPanel_stub,NULL},
  {&TA_void,NULL,"UpdateDisplay","","","",
    0,1,0,0,NULL,cssElCFun_LogView_UpdateDisplay_stub,TA_LogView_UpdateDisplay_MethArgs},
  {&TA_void,NULL,"ToggleDisplay","","","",
    0,0,-1,0,NULL,cssElCFun_LogView_ToggleDisplay_stub,NULL},
  {&TA_void,NULL,"SetToggle","","","",
    0,1,-1,0,NULL,cssElCFun_LogView_SetToggle_stub,TA_LogView_SetToggle_MethArgs},
  {&TA_void,NULL,"EditViewSpec"," edit view specs for given column","MENU MENU_ON_Actions MENU_SEP_BEFORE FROM_GROUP_viewspec ","",
    0,1,-1,0,NULL,cssElCFun_LogView_EditViewSpec_stub,TA_LogView_EditViewSpec_MethArgs},
  {&TA_void,NULL,"SetVisibility"," set whether this column of data is displayed in the log display","MENU FROM_GROUP_viewspec ","",
    0,2,-1,0,NULL,cssElCFun_LogView_SetVisibility_stub,TA_LogView_SetVisibility_MethArgs},
  {&TA_void,NULL,"SetLogging"," set whether this column of data is logged to a file (if also_chg_vis, then visibility in view is changed to match logging)","MENU FROM_GROUP_viewspec ","",
    0,3,2,0,NULL,cssElCFun_LogView_SetLogging_stub,TA_LogView_SetLogging_MethArgs},
  {&TA_void,NULL,"UpdateDispLabels"," update the display labels in the view using the display_labels stored in the log object","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_LogView_UpdateDispLabels_stub,NULL},
  {&TA_void,NULL,"CopyToEnv"," output data (must be group) with labels to environment env (NULL = new env). WARNING: reformats env to fit data!)","MENU MENU_ON_Analyze FROM_GROUP_1_viewspec NULL_OK ","",
    0,3,-1,0,NULL,cssElCFun_LogView_CopyToEnv_stub,TA_LogView_CopyToEnv_MethArgs},
  {&TA_void,NULL,"DistMatrixGrid"," output to grid log (NULL=make new one) distance matrix for data (must be group) with labels","MENU NULL_OK FROM_GROUP_1_viewspec ","",
    0,6,3,0,NULL,cssElCFun_LogView_DistMatrixGrid_stub,TA_LogView_DistMatrixGrid_MethArgs},
  {&TA_void,NULL,"ClusterPlot"," produce a cluster plot (in graph log, NULL = make a new one) of the given data (with labels)","MENU NULL_OK FROM_GROUP_1_viewspec ","",
    0,6,3,0,NULL,cssElCFun_LogView_ClusterPlot_stub,TA_LogView_ClusterPlot_MethArgs},
  {&TA_void,NULL,"CorrelMatrixGrid"," produce a correlation matrix of given data and plot in given grid log (NULL = make new one)","MENU NULL_OK FROM_GROUP_1_viewspec ","",
    0,3,-1,0,NULL,cssElCFun_LogView_CorrelMatrixGrid_stub,TA_LogView_CorrelMatrixGrid_MethArgs},
  {&TA_void,NULL,"PCAEigenGrid"," plot eigenvectors of correlation matrix (principal components analysis = PCA) of given data in given grid log (NULL = make new one)","MENU NULL_OK FROM_GROUP_1_viewspec ","",
    0,3,-1,0,NULL,cssElCFun_LogView_PCAEigenGrid_stub,TA_LogView_PCAEigenGrid_MethArgs},
  {&TA_void,NULL,"PCAPrjnPlot"," plot projections of data onto two principal components (eigenvectors) into a graph log (NULL = make new one)","MENU NULL_OK FROM_GROUP_1_viewspec ","",
    0,5,3,0,NULL,cssElCFun_LogView_PCAPrjnPlot_stub,TA_LogView_PCAPrjnPlot_MethArgs},
  {&TA_void,NULL,"MDSPrjnPlot"," plot multidimensional scaling of distance matrix of data onto two components into a graph log (NULL = make new one)","MENU NULL_OK FROM_GROUP_1_viewspec ","",
    0,5,3,0,NULL,cssElCFun_LogView_MDSPrjnPlot_stub,TA_LogView_MDSPrjnPlot_MethArgs},
  {&TA_void,NULL,"SetWinName"," override void	CloseWindow();","","",
    0,0,-1,0,NULL,cssElCFun_LogView_SetWinName_stub,NULL},
  {&TA_void,NULL,"LogUpdateAfterEdit"," called by log in its uae","","",
    0,0,-1,0,NULL,cssElCFun_LogView_LogUpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"Log_Clear"," called by log in its Clear()","","",
    0,0,-1,0,NULL,cssElCFun_LogView_Log_Clear_stub,NULL},
  {&TA_void,NULL,"View_At"," start viewing at indicated viewrange value","","",
    0,1,-1,0,NULL,cssElCFun_LogView_View_At_stub,TA_LogView_View_At_MethArgs},
  {&TA_void,NULL,"View_FF"," forward to end","","",
    0,0,-1,0,NULL,cssElCFun_LogView_View_FF_stub,NULL},
  {&TA_void,NULL,"ViewC_At"," start viewing at indicated column value","","",
    0,1,-1,0,NULL,cssElCFun_LogView_ViewC_At_stub,TA_LogView_ViewC_At_MethArgs},
  NULL};
static int GridLogView::* TA_GridLogView_MbrOff;
static MemberDef_data TA_GridLogView_MemberDef[]={
  {NULL,"DT_GridViewSpec::BlockFill","fill_type"," how the grid blocks are filled in to display their value","","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::fill_type))),0,NULL,0},
  {&TA_ColorScaleSpec_ptr,NULL,"colorspec"," The color spectrum for this display","","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::colorspec))),0,NULL,0},
  {&TA_int,NULL,"block_size"," *maximum* block size -- blocks will be smaller if needed to fit","","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::block_size))),0,NULL,0},
  {&TA_int,NULL,"block_border_size"," size of the border around the blocks","","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::block_border_size))),0,NULL,0},
  {&TA_bool,NULL,"header_on"," is the log header visible?","","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::header_on))),0,NULL,0},
  {&TA_bool,NULL,"auto_scale"," whether to auto-scale on values or not","","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::auto_scale))),0,NULL,0},
  {&TA_FontSpec,NULL,"view_font"," the font to use for the labels in the display","","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::view_font))),0,NULL,0},
  {&TA_MinMax,NULL,"scale_range"," range of scalebar","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::scale_range))),0,NULL,0},
  {&TA_MinMaxInt,NULL,"actual_range"," range in actual lines of data","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GridLogView_MbrOff=(int GridLogView::*)(&GridLogView::actual_range))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GridLogView_SetColorSpec_MethArgs[]={
  {&TA_ColorScaleSpec_ptr,NULL,"colors",""},
  NULL};
static MethodArgs_data TA_GridLogView_SetBlockFill_MethArgs[]={
  {NULL,"DT_GridViewSpec::BlockFill","fill_typ","DT_GridViewSpec::COLOR"},
  NULL};
static MethodArgs_data TA_GridLogView_SetBlockSizes_MethArgs[]={
  {&TA_int,NULL,"block_sz"," 8"},
  {&TA_int,NULL,"border_sz"," 1"},
  NULL};
static MethodArgs_data TA_GridLogView_UpdateGridLayout_MethArgs[]={
  {NULL,"DT_GridViewSpec::MatrixLayout","grid_layout","DT_GridViewSpec::LFT_RGT_BOT_TOP"},
  NULL};
static MethodArgs_data TA_GridLogView_SetViewFontSize_MethArgs[]={
  {&TA_int,NULL,"point_size"," 10"},
  NULL};
static MethodDef_data TA_GridLogView_MethodDef[]={
  {&TA_iGridLogView_Panel_ptr,NULL,"lvp","","","",
    0,0,-1,0,NULL,cssElCFun_GridLogView_lvp_stub,NULL},
  {&TA_void,NULL,"Clear_impl","","","",
    0,0,-1,0,NULL,cssElCFun_GridLogView_Clear_impl_stub,NULL},
  {&TA_void,NULL,"SetColorSpec"," set the color spectrum to use for color-coding values (NULL = use default)","MENU MENU_ON_Actions NULL_OK MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_GridLogView_SetColorSpec_stub,TA_GridLogView_SetColorSpec_MethArgs},
  {&TA_void,NULL,"SetBlockFill"," set the fill style of the grid blocks","MENU ","",
    0,1,0,0,NULL,cssElCFun_GridLogView_SetBlockFill_stub,TA_GridLogView_SetBlockFill_MethArgs},
  {&TA_void,NULL,"SetBlockSizes"," set the MAXIMUM sizes of the blocks (could be smaller), and the border space between blocks","MENU ","",
    0,2,0,0,NULL,cssElCFun_GridLogView_SetBlockSizes_stub,TA_GridLogView_SetBlockSizes_MethArgs},
  {&TA_void,NULL,"UpdateGridLayout"," arrange columns to fit without gaps, according to geometry","MENU ARGC_1 ","",
    0,1,0,0,NULL,cssElCFun_GridLogView_UpdateGridLayout_stub,TA_GridLogView_UpdateGridLayout_MethArgs},
  {&TA_void,NULL,"SetViewFontSize"," set the point size of the font used for labels in the display","MENU MENU_SEP_BEFORE ","",
    0,1,0,0,NULL,cssElCFun_GridLogView_SetViewFontSize_stub,TA_GridLogView_SetViewFontSize_MethArgs},
  {&TA_void,NULL,"AllBlockTextOn"," turn text on for all block displayed items","MENU ","",
    0,0,-1,0,NULL,cssElCFun_GridLogView_AllBlockTextOn_stub,NULL},
  {&TA_void,NULL,"AllBlockTextOff"," turn text off for all block displayed items","MENU ","",
    0,0,-1,0,NULL,cssElCFun_GridLogView_AllBlockTextOff_stub,NULL},
  {&TA_void,NULL,"ToggleHeader"," toggle header on or off","","",
    0,0,-1,0,NULL,cssElCFun_GridLogView_ToggleHeader_stub,NULL},
  {&TA_void,NULL,"ToggleAutoScale"," toggle header on or off","","",
    0,0,-1,0,NULL,cssElCFun_GridLogView_ToggleAutoScale_stub,NULL},
  {&TA_void,NULL,"ColorBar_execute","","","",
    0,0,-1,0,NULL,cssElCFun_GridLogView_ColorBar_execute_stub,NULL},
  NULL};
static int NetLogView::* TA_NetLogView_MbrOff;
static MemberDef_data TA_NetLogView_MemberDef[]={
  {&TA_Network_ptr,NULL,"network"," Network to whose views data is logged","","",
    *((ta_memb_ptr*)&(TA_NetLogView_MbrOff=(int NetLogView::*)(&NetLogView::network))),0,NULL,0},
  NULL};
static MethodArgs_data TA_NetLogView_SetNetwork_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_NetLogView_ArrangeLabels_MethArgs[]={
  {&TA_int,NULL,"cols"," -1"},
  {&TA_int,NULL,"rows"," -1"},
  {&TA_int,NULL,"width"," 12"},
  {&TA_float,NULL,"left"," 0.0"},
  {&TA_float,NULL,"top"," .9"},
  NULL};
static MethodDef_data TA_NetLogView_MethodDef[]={
  {&TA_iNetLogView_Panel_ptr,NULL,"lvp","","","",
    0,0,-1,0,NULL,cssElCFun_NetLogView_lvp_stub,NULL},
  {&TA_void,NULL,"SetNetwork"," select given network as the one to update views on","MENU MENU_ON_Actions MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_NetLogView_SetNetwork_stub,TA_NetLogView_SetNetwork_MethArgs},
  {&TA_void,NULL,"ArrangeLabels"," arrange the display labels in the netview in a grid of rows and cols starting at given top-left position (as fraction of display size) -1 = auto-compute based on size","MENU ","",
    0,5,0,0,NULL,cssElCFun_NetLogView_ArrangeLabels_stub,TA_NetLogView_ArrangeLabels_MethArgs},
  {&TA_void,NULL,"RemoveLabels"," remove all my labels from the netview","","",
    0,0,-1,0,NULL,cssElCFun_NetLogView_RemoveLabels_stub,NULL},
  NULL};
static int GraphLogView::* TA_GraphLogView_MbrOff;
static MemberDef_data TA_GraphLogView_MemberDef[]={
  {&TA_int,NULL,"x_axis_index"," index of index in array","","",
    *((ta_memb_ptr*)&(TA_GraphLogView_MbrOff=(int GraphLogView::*)(&GraphLogView::x_axis_index))),0,NULL,0},
  {&TA_ViewLabel_List,NULL,"labels"," misc labels in the graph view","","",
    *((ta_memb_ptr*)&(TA_GraphLogView_MbrOff=(int GraphLogView::*)(&GraphLogView::labels))),0,NULL,0},
  {&TA_MinMaxInt,NULL,"actual_range"," range in actual lines of data","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphLogView_MbrOff=(int GraphLogView::*)(&GraphLogView::actual_range))),0,NULL,0},
  {&TA_ColorScaleSpec_ptr,NULL,"colorspec"," The color spectrum for this display (for TRACE_COLOR or VALUE_COLOR line displays)","","",
    *((ta_memb_ptr*)&(TA_GraphLogView_MbrOff=(int GraphLogView::*)(&GraphLogView::colorspec))),0,NULL,0},
  {&TA_bool,NULL,"separate_graphs"," draw each group of lines sharing a Y axis using separate graphs","","",
    *((ta_memb_ptr*)&(TA_GraphLogView_MbrOff=(int GraphLogView::*)(&GraphLogView::separate_graphs))),0,NULL,0},
  {&TA_PosTwoDCoord,NULL,"graph_layout"," arrangement of graphs for separate graphs","","",
    *((ta_memb_ptr*)&(TA_GraphLogView_MbrOff=(int GraphLogView::*)(&GraphLogView::graph_layout))),0,NULL,0},
  {&TA_GraphViews_ptr,NULL,"graphs"," ","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphLogView_MbrOff=(int GraphLogView::*)(&GraphLogView::graphs))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GraphLogView_Animate_MethArgs[]={
  {&TA_int,NULL,"msec_per_point"," 500"},
  NULL};
static MethodArgs_data TA_GraphLogView_SetColorSpec_MethArgs[]={
  {&TA_ColorScaleSpec_ptr,NULL,"colors",""},
  NULL};
static MethodArgs_data TA_GraphLogView_SetBackground_MethArgs[]={
  {&TA_RGBA,NULL,"background",""},
  NULL};
static MethodArgs_data TA_GraphLogView_SetLineFeatures_MethArgs[]={
  {NULL,"GraphSpec::ColorType","color_type",""},
  {NULL,"GraphSpec::SequenceType","sequence1","GraphSpec::COLORS"},
  {NULL,"GraphSpec::SequenceType","sequence2","GraphSpec::LINES"},
  {NULL,"GraphSpec::SequenceType","sequence3","GraphSpec::POINTS"},
  {&TA_bool,NULL,"update_only_visible","true"},
  NULL};
static MethodArgs_data TA_GraphLogView_SetLineWidths_MethArgs[]={
  {&TA_float,NULL,"line_width",""},
  NULL};
static MethodArgs_data TA_GraphLogView_SetLineType_MethArgs[]={
  {NULL,"GraphColSpec::LineType","line_type",""},
  NULL};
static MethodArgs_data TA_GraphLogView_ShareAxisAfter_MethArgs[]={
  {&TA_taBase_ptr,NULL,"axis_var",""},
  NULL};
static MethodArgs_data TA_GraphLogView_SeparateGraphs_MethArgs[]={
  {&TA_int,NULL,"x_layout",""},
  {&TA_int,NULL,"y_layout",""},
  NULL};
static MethodArgs_data TA_GraphLogView_SpikeRaster_MethArgs[]={
  {&TA_float,NULL,"thresh",""},
  NULL};
static MethodArgs_data TA_GraphLogView_SetXAxis_MethArgs[]={
  {&TA_char_ptr,NULL,"nm",""},
  NULL};
static MethodDef_data TA_GraphLogView_MethodDef[]={
  {&TA_iGraphLogView_Panel_ptr,NULL,"lvp","","","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_lvp_stub,NULL},
  {&TA_GraphSpec_ptr,NULL,"viewSpec","","","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_viewSpec_stub,NULL},
  {&TA_void,NULL,"Animate"," animate the display by incrementally displaying each new row of data, waiting given amount of time between points. This will capture images to animation files if anim.capture is on.","MENU MENU_ON_Actions MENU_SEP_BEFORE ","",
    0,1,0,0,NULL,cssElCFun_GraphLogView_Animate_stub,TA_GraphLogView_Animate_MethArgs},
  {&TA_void,NULL,"StopAnimate"," stop the animation!","MENU ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_StopAnimate_stub,NULL},
  {&TA_void,NULL,"SetColorSpec"," set the color spectrum to use for color-coding values (NULL = use default)","MENU MENU_ON_Settings NULL_OK ","",
    0,1,-1,0,NULL,cssElCFun_GraphLogView_SetColorSpec_stub,TA_GraphLogView_SetColorSpec_MethArgs},
  {&TA_void,NULL,"SetBackground"," set the display's background to the given color","MENU ","",
    0,1,-1,0,NULL,cssElCFun_GraphLogView_SetBackground_stub,TA_GraphLogView_SetBackground_MethArgs},
  {&TA_void,NULL,"UpdateLineFeatures"," update color, line type, point type, etc of lines in accordance with the current settings for the ordering of these features. Only visible lines are updated","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_UpdateLineFeatures_stub,NULL},
  {&TA_void,NULL,"SetLineFeatures"," set color, line type, point type of lines by cycling through values","MENU ","",
    0,5,1,0,NULL,cssElCFun_GraphLogView_SetLineFeatures_stub,TA_GraphLogView_SetLineFeatures_MethArgs},
  {&TA_void,NULL,"SetLineWidths"," set the widths of all lines in the graph to given value","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_GraphLogView_SetLineWidths_stub,TA_GraphLogView_SetLineWidths_MethArgs},
  {&TA_void,NULL,"SetLineType"," set all line types to given type","MENU ","",
    0,1,-1,0,NULL,cssElCFun_GraphLogView_SetLineType_stub,TA_GraphLogView_SetLineType_MethArgs},
  {&TA_void,NULL,"ShareAxisAfter"," make all displayed variables after given axis_var share Y axis with axis_var","MENU MENU_SEP_BEFORE FROM_GROUP_viewspec ","",
    0,1,-1,0,NULL,cssElCFun_GraphLogView_ShareAxisAfter_stub,TA_GraphLogView_ShareAxisAfter_MethArgs},
  {&TA_void,NULL,"ShareAxes"," make all groups of columns share the same Y axis","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_ShareAxes_stub,NULL},
  {&TA_void,NULL,"SeparateAxes"," each column of data gets its own Y axis","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_SeparateAxes_stub,NULL},
  {&TA_void,NULL,"SeparateGraphs"," draw each group of lines sharing the same Y axis using separate graphs, with the given layout of graphs in the display","MENU MENU_SEP_BEFORE ","",
    0,2,-1,0,NULL,cssElCFun_GraphLogView_SeparateGraphs_stub,TA_GraphLogView_SeparateGraphs_MethArgs},
  {&TA_void,NULL,"OneGraph"," draw all data in one graph (default mode)","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_OneGraph_stub,NULL},
  {&TA_void,NULL,"StackTraces"," arrange subsequent traces of data (pass through the same X axis values) in non-overlapping vertically-arranged stacks","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_StackTraces_stub,NULL},
  {&TA_void,NULL,"UnStackTraces"," subsequent traces of data (pass through the same X axis values) are plotted overlapping on top of each other","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_UnStackTraces_stub,NULL},
  {&TA_void,NULL,"StackSharedAxes"," arrange lines that share the same Y axis in non-overlapping vertically-arranged stacks","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_StackSharedAxes_stub,NULL},
  {&TA_void,NULL,"UnStackSharedAxes"," lines that share the same Y axis are plotted overlapping on top of each other","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_UnStackSharedAxes_stub,NULL},
  {&TA_void,NULL,"SpikeRaster"," display spike rasters with given threshold for cutting a spike (trace_incr.y = 1, vertical = NO_VERTICAL, line_type = TRESH_POINTS)","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_GraphLogView_SpikeRaster_stub,TA_GraphLogView_SpikeRaster_MethArgs},
  {&TA_void,NULL,"ColorRaster"," display values as rasters of lines colored according to the values of the lines","MENU ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_ColorRaster_stub,NULL},
  {&TA_void,NULL,"StandardLines"," get rid of raster-style display and return to 'standard' graph line display","MENU ","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_StandardLines_stub,NULL},
  {&TA_int,NULL,"SetXAxis"," set the x axis to be this field","","",
    0,1,-1,0,NULL,cssElCFun_GraphLogView_SetXAxis_stub,TA_GraphLogView_SetXAxis_MethArgs},
  {&TA_void,NULL,"UpdateViewRange"," update view range info from log","","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_UpdateViewRange_stub,NULL},
  {&TA_void,NULL,"InitColors","","","",
    0,0,-1,0,NULL,cssElCFun_GraphLogView_InitColors_stub,NULL},
  NULL};
static MemberDef_data TA_pdpMisc_MemberDef[]={
  {&TA_PDPRoot_ptr,NULL,"root"," root of pdp class hierarchy","","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::root),0},
  {&TA_char_ptr,NULL,"defaults_str"," string representation of basic defaults compiled into executable","","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::defaults_str),0},
  {&TA_String_Array,NULL,"proj_to_load"," list of projects to load","","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::proj_to_load),0},
  {&TA_taBase_List,NULL,"post_load_opr"," objects that need to have operations performed on them after loading","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::post_load_opr),0},
  {&TA_TypeDef_ptr,NULL,"def_wizard"," default network wizard type to create (this should be set by the specific application Main function)","","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::def_wizard),0},
  {&TA_void,NULL,"Init_Hook"," set this in user's main to init ta, etc.","READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::Init_Hook),1},
  {&TA_float,NULL,"pdpZScale"," amount by which to scale y dimension (inventor z) def is 4.0","","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::pdpZScale),0},
  {&TA_float,NULL,"pts_per_so_unit"," equivalent font points per so unit","DEF_36 ","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::pts_per_so_unit),0},
  {&TA_float,NULL,"char_pts_per_so_unit"," chars*pt size / so unit","DEF_72 ","",
    (ta_memb_ptr)NULL,1,(void*)(&pdpMisc::char_pts_per_so_unit),0},
  NULL};
static MethodArgs_data TA_pdpMisc_SaveRecoverFile_MethArgs[]={
  {&TA_int,NULL,"err"," 1"},
  NULL};
static MethodArgs_data TA_pdpMisc_GetObjColor_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_TypeDef_ptr,NULL,"typ",""},
  NULL};
static MethodArgs_data TA_pdpMisc_GetNewLog_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_TypeDef_ptr,NULL,"typ",""},
  NULL};
static MethodArgs_data TA_pdpMisc_GetNewEnv_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_TypeDef_ptr,NULL,"typ"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_pdpMisc_GetNewNetwork_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_TypeDef_ptr,NULL,"typ"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_pdpMisc_GetDefNetwork_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindMakeSpecGp_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_pdpMisc_FindMakeSpec_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_pdpMisc_FindSpecName_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindSpecType_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindMakeProc_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_pdpMisc_FindProcName_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindProcType_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindMakeLog_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_pdpMisc_FindLogName_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindLogType_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindSelectEdit_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  NULL};
static MethodArgs_data TA_pdpMisc_FindMakeSelectEdit_MethArgs[]={
  {&TA_Project_ptr,NULL,"prj",""},
  NULL};
static MethodDef_data TA_pdpMisc_MethodDef[]={
  {&TA_int,NULL,"WaitProc"," waiting process","","",
    0,0,-1,1,(ta_void_fun)(pdpMisc::WaitProc),cssElCFun_pdpMisc_WaitProc_stub,NULL},
  {&TA_int,NULL,"WaitProc_LoadProj"," waiting process","","",
    0,0,-1,1,(ta_void_fun)(pdpMisc::WaitProc_LoadProj),cssElCFun_pdpMisc_WaitProc_LoadProj_stub,NULL},
  {&TA_int,NULL,"WaitProc_PostLoadOpr"," waiting process","","",
    0,0,-1,1,(ta_void_fun)(pdpMisc::WaitProc_PostLoadOpr),cssElCFun_pdpMisc_WaitProc_PostLoadOpr_stub,NULL},
  {&TA_void,NULL,"SaveRecoverFile"," error handling function that saves a recover file when system crashes","","",
    0,1,0,1,(ta_void_fun)(pdpMisc::SaveRecoverFile),cssElCFun_pdpMisc_SaveRecoverFile_stub,TA_pdpMisc_SaveRecoverFile_MethArgs},
  {&TA_ColorScaleSpec_ptr,NULL,"GetDefaultColor"," gets the default color scale","","",
    0,0,-1,1,(ta_void_fun)(pdpMisc::GetDefaultColor),cssElCFun_pdpMisc_GetDefaultColor_stub,NULL},
  {&TA_const_iColor_ptr,NULL,"GetObjColor"," get default object color (for edit dialogs and project view)","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::GetObjColor),cssElCFun_pdpMisc_GetObjColor_stub,TA_pdpMisc_GetObjColor_MethArgs},
  {&TA_PDPLog_ptr,NULL,"GetNewLog"," get a temporary log of given type in given project (e.g., for pulling up a graph, etc)","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::GetNewLog),cssElCFun_pdpMisc_GetNewLog_stub,TA_pdpMisc_GetNewLog_MethArgs},
  {&TA_Environment_ptr,NULL,"GetNewEnv"," get a temporary environment of given type in given project (e.g., for storing data)","","",
    0,2,1,1,(ta_void_fun)(pdpMisc::GetNewEnv),cssElCFun_pdpMisc_GetNewEnv_stub,TA_pdpMisc_GetNewEnv_MethArgs},
  {&TA_Network_ptr,NULL,"GetNewNetwork"," get a new network object","","",
    0,2,1,1,(ta_void_fun)(pdpMisc::GetNewNetwork),cssElCFun_pdpMisc_GetNewNetwork_stub,TA_pdpMisc_GetNewNetwork_MethArgs},
  {&TA_Network_ptr,NULL,"GetDefNetwork"," get default network from project","","",
    0,1,-1,1,(ta_void_fun)(pdpMisc::GetDefNetwork),cssElCFun_pdpMisc_GetDefNetwork_stub,TA_pdpMisc_GetDefNetwork_MethArgs},
  {&TA_BaseSpec_MGroup_ptr,NULL,"FindMakeSpecGp"," find a given spec group and if not found, make it","","",
    0,3,2,1,(ta_void_fun)(pdpMisc::FindMakeSpecGp),cssElCFun_pdpMisc_FindMakeSpecGp_stub,TA_pdpMisc_FindMakeSpecGp_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindMakeSpec"," find a given spec and if not found, make it","","",
    0,4,3,1,(ta_void_fun)(pdpMisc::FindMakeSpec),cssElCFun_pdpMisc_FindMakeSpec_stub,TA_pdpMisc_FindMakeSpec_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindSpecName"," find a given spec by name","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::FindSpecName),cssElCFun_pdpMisc_FindSpecName_stub,TA_pdpMisc_FindSpecName_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindSpecType"," find a given spec by type","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::FindSpecType),cssElCFun_pdpMisc_FindSpecType_stub,TA_pdpMisc_FindSpecType_MethArgs},
  {&TA_Process_ptr,NULL,"FindMakeProc"," find a given process and if not found, make it","","",
    0,4,3,1,(ta_void_fun)(pdpMisc::FindMakeProc),cssElCFun_pdpMisc_FindMakeProc_stub,TA_pdpMisc_FindMakeProc_MethArgs},
  {&TA_Process_ptr,NULL,"FindProcName"," find a process of given name","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::FindProcName),cssElCFun_pdpMisc_FindProcName_stub,TA_pdpMisc_FindProcName_MethArgs},
  {&TA_Process_ptr,NULL,"FindProcType"," find a process of given type","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::FindProcType),cssElCFun_pdpMisc_FindProcType_stub,TA_pdpMisc_FindProcType_MethArgs},
  {&TA_PDPLog_ptr,NULL,"FindMakeLog"," find a given log and if not found, make it","","",
    0,4,3,1,(ta_void_fun)(pdpMisc::FindMakeLog),cssElCFun_pdpMisc_FindMakeLog_stub,TA_pdpMisc_FindMakeLog_MethArgs},
  {&TA_PDPLog_ptr,NULL,"FindLogName"," find a log of given name","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::FindLogName),cssElCFun_pdpMisc_FindLogName_stub,TA_pdpMisc_FindLogName_MethArgs},
  {&TA_PDPLog_ptr,NULL,"FindLogType"," find a log of given type","","",
    0,2,-1,1,(ta_void_fun)(pdpMisc::FindLogType),cssElCFun_pdpMisc_FindLogType_stub,TA_pdpMisc_FindLogType_MethArgs},
  {&TA_SelectEdit_ptr,NULL,"FindSelectEdit"," find a select edit if it exists","","",
    0,1,-1,1,(ta_void_fun)(pdpMisc::FindSelectEdit),cssElCFun_pdpMisc_FindSelectEdit_stub,TA_pdpMisc_FindSelectEdit_MethArgs},
  {&TA_SelectEdit_ptr,NULL,"FindMakeSelectEdit"," find a select edit if it exists, otherwise make it","","",
    0,1,-1,1,(ta_void_fun)(pdpMisc::FindMakeSelectEdit),cssElCFun_pdpMisc_FindMakeSelectEdit_stub,TA_pdpMisc_FindMakeSelectEdit_MethArgs},
  NULL};
static int PosGroup::* TA_PosGroup_MbrOff;
static MemberDef_data TA_PosGroup_MemberDef[]={
  {&TA_TDCoord,NULL,"pos"," Position of Group","","",
    *((ta_memb_ptr*)&(TA_PosGroup_MbrOff=(int PosGroup::*)(&PosGroup::pos))),0,NULL,0},
  NULL};
static int BaseSubSpec::* TA_BaseSubSpec_MbrOff;
static MemberDef_data TA_BaseSubSpec_MemberDef[]={
  {&TA_unsigned_long_ary,NULL,"unique"," bits representing members unique","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_BaseSubSpec_MbrOff=(int BaseSubSpec::*)(&BaseSubSpec::unique))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BaseSubSpec_SetUnique_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  {&TA_bool,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_BaseSubSpec_GetUnique_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  NULL};
static MethodArgs_data TA_BaseSubSpec_UpdateMember_MethArgs[]={
  {&TA_BaseSubSpec_ptr,NULL,"from",""},
  {&TA_int,NULL,"memb_no",""},
  NULL};
static MethodDef_data TA_BaseSubSpec_MethodDef[]={
  {&TA_BaseSubSpec_ptr,NULL,"FindParent"," Find the corresponding parent subspec of this one","MENU USE_RVAL MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_BaseSubSpec_FindParent_stub,NULL},
  {&TA_BaseSpec_ptr,NULL,"FindParentBaseSpec"," Find the parent spec of this one","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_BaseSubSpec_FindParentBaseSpec_stub,NULL},
  {&TA_void,NULL,"SetUnique"," set inherit bit set inherit bit","","",
    1,2,-1,0,NULL,cssElCFun_BaseSubSpec_SetUnique_stub,TA_BaseSubSpec_SetUnique_MethArgs},
  {&TA_bool,NULL,"GetUnique"," check inherit bit check inherit bit","","",
    1,1,-1,0,NULL,cssElCFun_BaseSubSpec_GetUnique_stub,TA_BaseSubSpec_GetUnique_MethArgs},
  {&TA_void,NULL,"UpdateMember"," copy member from given sub spec if not unique","","",
    0,2,-1,0,NULL,cssElCFun_BaseSubSpec_UpdateMember_stub,TA_BaseSubSpec_UpdateMember_MethArgs},
  {&TA_void,NULL,"UpdateSpec"," update from parent sub spec, if one exists","","",
    0,0,-1,0,NULL,cssElCFun_BaseSubSpec_UpdateSpec_stub,NULL},
  NULL};
static EnumDef_data TA_PatternSpec_PatTypes[]={
  {"INACTIVE"," not presented to network","",0},
  {"INPUT"," input pattern","",1},
  {"TARGET"," target (output) pattern","",2},
  {"COMPARE"," comparison pattern (for error only)","",3},
  NULL};
static EnumDef_data TA_PatternSpec_PatLayer[]={
  {"FIRST"," first layer in the network","",0},
  {"LAST"," last layer in the network","",1},
  {"LAY_NAME"," specify layer by name","",2},
  {"LAY_NUM"," specify layer by number","",3},
  NULL};
static EnumDef_data TA_PatternSpec_PatFlags[]={
  {"NO_FLAGS"," no flags on pattern value, apply as normal","",0},
  {"TARG_FLAG"," unit's TARG flag is set","",1},
  {"EXT_FLAG"," unit's EXT flag is set","",2},
  {"TARG_EXT_FLAG"," unit's TARG and EXT flags are set","",3},
  {"COMP_FLAG"," unit's COMP flag is set","",4},
  {"COMP_TARG_FLAG"," unit's COMP and TARG flags are set","",5},
  {"COMP_EXT_FLAG"," unit's COMP and EXT flags are set","",6},
  {"COMP_TARG_EXT_FLAG"," unit's COMP, TARG, and EXT flags are set","",7},
  {"TARG_VALUE"," pattern value goes to the unit targ field","",16},
  {"EXT_VALUE"," pattern value goes to the unit ext field","",32},
  {"TARG_EXT_VALUE"," pattern value goes to the unit targ & ext fields","",48},
  {"NO_UNIT_FLAG"," no unit flags are set, but value is set as normal","",64},
  {"NO_UNIT_VALUE"," don't set the unit's value, but flag as normal","",128},
  {"NO_APPLY"," don't apply this value to unit (no flags either)","",256},
  NULL};
static EnumDef_data TA_PatternSpec_LayerFlags[]={
  {"DEFAULT"," set default layer flags based on pattern type","",0},
  {"TARG_LAYER"," as a target layer","",1},
  {"EXT_LAYER"," as an external input layer","",2},
  {"TARG_EXT_LAYER"," as both external input and target layer","",3},
  {"COMP_LAYER"," as a comparison layer","",4},
  {"COMP_TARG_LAYER"," as a comparision and target layer","",5},
  {"COMP_EXT_LAYER"," as a comparison and external input layer","",6},
  {"COMP_TARG_EXT_LAYER"," as a comparison, target, and external input layer","",7},
  {"NO_LAYER_FLAGS"," don't set any layer flags at all","",16},
  NULL};
static EnumDef_data TA_PatternSpec_PatUseFlags[]={
  {"USE_NO_FLAGS"," no flags on pattern value, apply as normal","",0},
  {"USE_PATTERN_FLAGS"," use flags from pattern","",1},
  {"USE_GLOBAL_FLAGS"," use global flags from pattern spec","",2},
  {"USE_PAT_THEN_GLOBAL_FLAGS"," use flags from pattern if avail, else global flags","",3},
  NULL};
static int PatternSpec::* TA_PatternSpec_MbrOff;
static MemberDef_data TA_PatternSpec_MemberDef[]={
  {NULL,"::PatTypes","type"," Type of pattern","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::type))),0,NULL,0},
  {NULL,"::PatLayer","to_layer"," which network layer to present pattern to","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::to_layer))),0,NULL,0},
  {&TA_taString,NULL,"layer_name"," name of layer","ENVIROVIEW CONDEDIT_ON_to_layer:LAY_NAME ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::layer_name))),0,NULL,0},
  {&TA_int,NULL,"layer_num"," number of layer","ENVIROVIEW CONDEDIT_ON_to_layer:LAY_NUM ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::layer_num))),0,NULL,0},
  {&TA_Layer_ptr,NULL,"layer"," Pointer to Layer presented to","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::layer))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"pattern_type"," type of pattern to use","TYPE_Pattern ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::pattern_type))),0,NULL,0},
  {NULL,"::LayerFlags","layer_flags"," how to flag the layer's external input status","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::layer_flags))),0,NULL,0},
  {NULL,"::PatUseFlags","use_flags"," how to use the flags (on each pattern or global_flags)","","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::use_flags))),0,NULL,0},
  {&TA_int,NULL,"n_vals"," number of values in pattern","","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::n_vals))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"geom"," geometry of pattern in EnviroView","","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::geom))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"pos"," position of pattern in EnviroView","","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::pos))),0,NULL,0},
  {&TA_float,NULL,"initial_val"," Initial value for pattern values","","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::initial_val))),0,NULL,0},
  {&TA_Random,NULL,"noise"," Noise added to values when applied","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::noise))),0,NULL,0},
  {&TA_String_Array,NULL,"value_names"," display names of the individual pattern values","","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::value_names))),0,NULL,0},
  {&TA_int_Array,NULL,"global_flags"," these are global flags for all events (cf use_flags)","CONDEDIT_ON_use_flags:USE_GLOBAL_FLAGS,USE_PAT_THEN_GLOBAL_FLAGS ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_MbrOff=(int PatternSpec::*)(&PatternSpec::global_flags))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PatternSpec_SetLayer_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_PatternSpec_Value_MethArgs[]={
  {&TA_Pattern_ptr,NULL,"pat",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_PatternSpec_Flag_MethArgs[]={
  {NULL,"::PatUseFlags","flag_type",""},
  {&TA_Pattern_ptr,NULL,"pat",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_PatternSpec_ApplyValue_MethArgs[]={
  {&TA_Pattern_ptr,NULL,"pat",""},
  {&TA_Unit_ptr,NULL,"uni",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_PatternSpec_ApplyValue_impl_MethArgs[]={
  {&TA_Unit_ptr,NULL,"uni",""},
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"flags",""},
  NULL};
static MethodArgs_data TA_PatternSpec_ApplyValueWithFlags_MethArgs[]={
  {&TA_Unit_ptr,NULL,"uni",""},
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"flags",""},
  NULL};
static MethodArgs_data TA_PatternSpec_ApplyPattern_MethArgs[]={
  {&TA_Pattern_ptr,NULL,"pat",""},
  NULL};
static MethodArgs_data TA_PatternSpec_NewPattern_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  {&TA_Pattern_Group_ptr,NULL,"par",""},
  NULL};
static MethodArgs_data TA_PatternSpec_UpdatePattern_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  {&TA_Pattern_ptr,NULL,"pat",""},
  NULL};
static MethodArgs_data TA_PatternSpec_SetToLayer_MethArgs[]={
  {&TA_Layer_ptr,NULL,"lay","((void *)0)"},
  NULL};
static MethodArgs_data TA_PatternSpec_SetToLayName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"lay_nm",""},
  NULL};
static MethodDef_data TA_PatternSpec_MethodDef[]={
  {&TA_bool,NULL,"SetLayer"," set layer pointer to point to the target layer","","",
    0,1,-1,0,NULL,cssElCFun_PatternSpec_SetLayer_stub,TA_PatternSpec_SetLayer_MethArgs},
  {&TA_void,NULL,"UnSetLayer"," when done, don't keep pointing to it.","","",
    0,0,-1,0,NULL,cssElCFun_PatternSpec_UnSetLayer_stub,NULL},
  {&TA_void,NULL,"FlagLayer"," set layer flag to reflect the kind of input received","","",
    0,0,-1,0,NULL,cssElCFun_PatternSpec_FlagLayer_stub,NULL},
  {&TA_float,NULL,"Value"," return value at given index from pattern (order can be changed, eg GroupPatternSpec)","","",
    0,2,-1,0,NULL,cssElCFun_PatternSpec_Value_stub,TA_PatternSpec_Value_MethArgs},
  {&TA_int,NULL,"Flag"," return flag at given index from pattern (order can be changed, eg GroupPatternSpec)","","",
    0,3,-1,0,NULL,cssElCFun_PatternSpec_Flag_stub,TA_PatternSpec_Flag_MethArgs},
  {&TA_void,NULL,"ApplyValue"," assign unit value and ext_flag based on pattern at given index","","",
    0,3,-1,0,NULL,cssElCFun_PatternSpec_ApplyValue_stub,TA_PatternSpec_ApplyValue_MethArgs},
  {&TA_void,NULL,"ApplyValue_impl"," implementation of apply value, taking just the value and the flags","","",
    0,3,-1,0,NULL,cssElCFun_PatternSpec_ApplyValue_impl_stub,TA_PatternSpec_ApplyValue_impl_MethArgs},
  {&TA_void,NULL,"ApplyValueWithFlags"," assign unit value and ext_flag with pattern flags","","",
    0,3,-1,0,NULL,cssElCFun_PatternSpec_ApplyValueWithFlags_stub,TA_PatternSpec_ApplyValueWithFlags_MethArgs},
  {&TA_void,NULL,"ApplyPattern"," apply given pattern to all units (layer must already be set)","","",
    0,1,-1,0,NULL,cssElCFun_PatternSpec_ApplyPattern_stub,TA_PatternSpec_ApplyPattern_MethArgs},
  {&TA_Pattern_ptr,NULL,"NewPattern"," creates a new pattern in my image in event in parent group at index","","",
    0,2,-1,0,NULL,cssElCFun_PatternSpec_NewPattern_stub,TA_PatternSpec_NewPattern_MethArgs},
  {&TA_void,NULL,"UpdatePattern"," updates existing pattern to current spec settings","","",
    0,2,-1,0,NULL,cssElCFun_PatternSpec_UpdatePattern_stub,TA_PatternSpec_UpdatePattern_MethArgs},
  {&TA_void,NULL,"SetToLayer"," set configuration of the pattern spec based on layer, and set to go to that layer (NULL = update to current layer)","BUTTON NULL_OK ","",
    0,1,0,0,NULL,cssElCFun_PatternSpec_SetToLayer_stub,TA_PatternSpec_SetToLayer_MethArgs},
  {&TA_void,NULL,"SetToLayName"," set to_layer=LAY_NAME and name and layer_name = lay_nm","","",
    0,1,-1,0,NULL,cssElCFun_PatternSpec_SetToLayName_stub,TA_PatternSpec_SetToLayName_MethArgs},
  {&TA_void,NULL,"UpdateAllEvents"," update all events using pattern spec","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_PatternSpec_UpdateAllEvents_stub,NULL},
  {&TA_void,NULL,"ApplyNames"," set the names of units in the network according to the current value_names","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_PatternSpec_ApplyNames_stub,NULL},
  NULL};
static int SpecPtr_impl::* TA_SpecPtr_impl_MbrOff;
static MemberDef_data TA_SpecPtr_impl_MemberDef[]={
  {&TA_TAPtr,NULL,"owner"," to get to proj..","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_SpecPtr_impl_MbrOff=(int SpecPtr_impl::*)(&SpecPtr_impl::owner))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"base_type"," base type for type field","TYPE_BaseSpec HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SpecPtr_impl_MbrOff=(int SpecPtr_impl::*)(&SpecPtr_impl::base_type))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"type"," The type of the spec to use","TYPE_ON_base_type ","",
    *((ta_memb_ptr*)&(TA_SpecPtr_impl_MbrOff=(int SpecPtr_impl::*)(&SpecPtr_impl::type))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SpecPtr_impl_SetSpec_MethArgs[]={
  {&TA_BaseSpec_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_SpecPtr_impl_SetDefaultSpec_MethArgs[]={
  {&TA_TAPtr,NULL,"ownr",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_SpecPtr_impl_SetBaseType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodDef_data TA_SpecPtr_impl_MethodDef[]={
  {&TA_BaseSpec_ptr,NULL,"GetSpec"," get the spec pointer","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_impl_GetSpec_stub,NULL},
  {&TA_void,NULL,"SetSpec"," set the spec pointer","","",
    0,1,-1,0,NULL,cssElCFun_SpecPtr_impl_SetSpec_stub,TA_SpecPtr_impl_SetSpec_MethArgs},
  {&TA_void,NULL,"SetDefaultSpec"," for class that owns ptr","","",
    0,2,-1,0,NULL,cssElCFun_SpecPtr_impl_SetDefaultSpec_stub,TA_SpecPtr_impl_SetDefaultSpec_MethArgs},
  {&TA_void,NULL,"SetBaseType"," for overloaded classes","","",
    0,1,-1,0,NULL,cssElCFun_SpecPtr_impl_SetBaseType_stub,TA_SpecPtr_impl_SetBaseType_MethArgs},
  {&TA_BaseSpec_MGroup_ptr,NULL,"GetSpecGroup"," get the group where specs go","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_impl_GetSpecGroup_stub,NULL},
  {&TA_void,NULL,"GetSpecOfType"," get a spec of type type","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_impl_GetSpecOfType_stub,NULL},
  NULL};
static int SchedItem::* TA_SchedItem_MbrOff;
static MemberDef_data TA_SchedItem_MemberDef[]={
  {&TA_int,NULL,"start_ctr"," ctr number to start at for this item","","",
    *((ta_memb_ptr*)&(TA_SchedItem_MbrOff=(int SchedItem::*)(&SchedItem::start_ctr))),0,NULL,0},
  {&TA_float,NULL,"start_val"," starting value for item","","",
    *((ta_memb_ptr*)&(TA_SchedItem_MbrOff=(int SchedItem::*)(&SchedItem::start_val))),0,NULL,0},
  {&TA_int,NULL,"duration"," duration (from start_ctr)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SchedItem_MbrOff=(int SchedItem::*)(&SchedItem::duration))),0,NULL,0},
  {&TA_float,NULL,"step"," linear step to take for each increment of ctr","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SchedItem_MbrOff=(int SchedItem::*)(&SchedItem::step))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SchedItem_GetVal_MethArgs[]={
  {&TA_int,NULL,"ctr",""},
  NULL};
static MethodDef_data TA_SchedItem_MethodDef[]={
  {&TA_float,NULL,"GetVal"," get value for given ctr value","","",
    0,1,-1,0,NULL,cssElCFun_SchedItem_GetVal_stub,TA_SchedItem_GetVal_MethArgs},
  NULL};
static EnumDef_data TA_taList_SchedItem__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_SchedItem__MoveBefore_MethArgs[]={
  {NULL,"::SchedItem_ptr","trg",""},
  {NULL,"::SchedItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SchedItem__MoveAfter_MethArgs[]={
  {NULL,"::SchedItem_ptr","trg",""},
  {NULL,"::SchedItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SchedItem__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_SchedItem__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_SchedItem__Edit_El_MethArgs[]={
  {NULL,"::SchedItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SchedItem__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_SchedItem__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_SchedItem__AddUniqNameOld_MethArgs[]={
  {NULL,"::SchedItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SchedItem__LinkUniqNameOld_MethArgs[]={
  {NULL,"::SchedItem_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_SchedItem__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_SchedItem__MoveBefore_stub,TA_taList_SchedItem__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_SchedItem__MoveAfter_stub,TA_taList_SchedItem__MoveAfter_MethArgs},
  {NULL,"::SchedItem_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_SchedItem__SafeEl_stub,TA_taList_SchedItem__SafeEl_MethArgs},
  {NULL,"::SchedItem_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_SchedItem__FastEl_stub,TA_taList_SchedItem__FastEl_MethArgs},
  {NULL,"::SchedItem_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_SchedItem__DefaultEl_stub,NULL},
  {NULL,"::SchedItem_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_SchedItem__Edit_El_stub,TA_taList_SchedItem__Edit_El_MethArgs},
  {NULL,"::SchedItem_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_SchedItem__FindName_stub,TA_taList_SchedItem__FindName_MethArgs},
  {NULL,"::SchedItem_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_SchedItem__FindType_stub,TA_taList_SchedItem__FindType_MethArgs},
  {NULL,"::SchedItem_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_SchedItem__Pop_stub,NULL},
  {NULL,"::SchedItem_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_SchedItem__Peek_stub,NULL},
  {NULL,"::SchedItem_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_SchedItem__AddUniqNameOld_stub,TA_taList_SchedItem__AddUniqNameOld_MethArgs},
  {NULL,"::SchedItem_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_SchedItem__LinkUniqNameOld_stub,TA_taList_SchedItem__LinkUniqNameOld_MethArgs},
  NULL};
static int Schedule::* TA_Schedule_MbrOff;
static MemberDef_data TA_Schedule_MemberDef[]={
  {&TA_int,NULL,"last_ctr"," the last counter index called","","",
    *((ta_memb_ptr*)&(TA_Schedule_MbrOff=(int Schedule::*)(&Schedule::last_ctr))),0,NULL,0},
  {&TA_float,NULL,"default_val"," the default if group is empty","","",
    *((ta_memb_ptr*)&(TA_Schedule_MbrOff=(int Schedule::*)(&Schedule::default_val))),0,NULL,0},
  {&TA_bool,NULL,"interpolate"," use linear interpolation between points","","",
    *((ta_memb_ptr*)&(TA_Schedule_MbrOff=(int Schedule::*)(&Schedule::interpolate))),0,NULL,0},
  {&TA_float,NULL,"cur_val"," the current val","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Schedule_MbrOff=(int Schedule::*)(&Schedule::cur_val))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Schedule_GetVal_MethArgs[]={
  {&TA_int,NULL,"ctr",""},
  NULL};
static MethodDef_data TA_Schedule_MethodDef[]={
  {&TA_float,NULL,"GetVal"," get current schedule val, based on counter","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_Schedule_GetVal_stub,TA_Schedule_GetVal_MethArgs},
  NULL};
static EnumDef_data TA_WeightLimits_LimitType[]={
  {"NONE"," no weight limitations","",0},
  {"GT_MIN"," constrain weights to be greater than min value","",1},
  {"LT_MAX"," constrain weights to be less than max value","",2},
  {"MIN_MAX"," constrain weights to be within min and max values","",3},
  NULL};
static int WeightLimits::* TA_WeightLimits_MbrOff;
static MemberDef_data TA_WeightLimits_MemberDef[]={
  {NULL,"::LimitType","type"," type of weight limitation to impose","","",
    *((ta_memb_ptr*)&(TA_WeightLimits_MbrOff=(int WeightLimits::*)(&WeightLimits::type))),0,NULL,0},
  {&TA_float,NULL,"min"," minimum weight value (if applicable)","CONDEDIT_OFF_type:NONE,LT_MAX ","",
    *((ta_memb_ptr*)&(TA_WeightLimits_MbrOff=(int WeightLimits::*)(&WeightLimits::min))),0,NULL,0},
  {&TA_float,NULL,"max"," maximum weight value (if applicable)","CONDEDIT_OFF_type:NONE,GT_MIN ","",
    *((ta_memb_ptr*)&(TA_WeightLimits_MbrOff=(int WeightLimits::*)(&WeightLimits::max))),0,NULL,0},
  {&TA_bool,NULL,"sym"," if true, also symmetrize with reciprocal connections","","",
    *((ta_memb_ptr*)&(TA_WeightLimits_MbrOff=(int WeightLimits::*)(&WeightLimits::sym))),0,NULL,0},
  NULL};
static MethodArgs_data TA_WeightLimits_ApplyMinLimit_MethArgs[]={
  {&TA_float_ref,NULL,"wt",""},
  NULL};
static MethodArgs_data TA_WeightLimits_ApplyMaxLimit_MethArgs[]={
  {&TA_float_ref,NULL,"wt",""},
  NULL};
static MethodArgs_data TA_WeightLimits_ApplyLimits_MethArgs[]={
  {&TA_float_ref,NULL,"wt",""},
  NULL};
static MethodDef_data TA_WeightLimits_MethodDef[]={
  {&TA_void,NULL,"ApplyMinLimit","","","",
    0,1,-1,0,NULL,cssElCFun_WeightLimits_ApplyMinLimit_stub,TA_WeightLimits_ApplyMinLimit_MethArgs},
  {&TA_void,NULL,"ApplyMaxLimit","","","",
    0,1,-1,0,NULL,cssElCFun_WeightLimits_ApplyMaxLimit_stub,TA_WeightLimits_ApplyMaxLimit_MethArgs},
  {&TA_void,NULL,"ApplyLimits","","","",
    0,1,-1,0,NULL,cssElCFun_WeightLimits_ApplyLimits_stub,TA_WeightLimits_ApplyLimits_MethArgs},
  NULL};
static EnumDef_data TA_SpecPtr_ConSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int SpecPtr<ConSpec>::* TA_SpecPtr_ConSpec__MbrOff;
static MemberDef_data TA_SpecPtr_ConSpec__MemberDef[]={
  {NULL,"::ConSpec_ptr","spec"," the actual spec itself","","",
    *((ta_memb_ptr*)&(TA_SpecPtr_ConSpec__MbrOff=(int SpecPtr<ConSpec>::*)(&SpecPtr<ConSpec>::spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SpecPtr_ConSpec__SetDefaultSpec_MethArgs[]={
  {&TA_TAPtr,NULL,"ownr",""},
  NULL};
static MethodDef_data TA_SpecPtr_ConSpec__MethodDef[]={
  {&TA_void,NULL,"SetDefaultSpec"," for class that owns ptr","","",
    1,1,-1,0,NULL,cssElCFun_SpecPtr_ConSpec__SetDefaultSpec_stub,TA_SpecPtr_ConSpec__SetDefaultSpec_MethArgs},
  {&TA_bool,NULL,"CheckSpec","","","",
    1,0,-1,0,NULL,cssElCFun_SpecPtr_ConSpec__CheckSpec_stub,NULL},
  {NULL,"::ConSpec_ptr","NewChild","","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_ConSpec__NewChild_stub,NULL},
  NULL};
static EnumDef_data TA_taList_Unit__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_Unit__MoveBefore_MethArgs[]={
  {NULL,"::Unit_ptr","trg",""},
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Unit__MoveAfter_MethArgs[]={
  {NULL,"::Unit_ptr","trg",""},
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Unit__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_Unit__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_Unit__Edit_El_MethArgs[]={
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Unit__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Unit__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Unit__AddUniqNameOld_MethArgs[]={
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Unit__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_Unit__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_Unit__MoveBefore_stub,TA_taList_Unit__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_Unit__MoveAfter_stub,TA_taList_Unit__MoveAfter_MethArgs},
  {NULL,"::Unit_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_Unit__SafeEl_stub,TA_taList_Unit__SafeEl_MethArgs},
  {NULL,"::Unit_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_Unit__FastEl_stub,TA_taList_Unit__FastEl_MethArgs},
  {NULL,"::Unit_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_Unit__DefaultEl_stub,NULL},
  {NULL,"::Unit_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_Unit__Edit_El_stub,TA_taList_Unit__Edit_El_MethArgs},
  {NULL,"::Unit_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_Unit__FindName_stub,TA_taList_Unit__FindName_MethArgs},
  {NULL,"::Unit_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_Unit__FindType_stub,TA_taList_Unit__FindType_MethArgs},
  {NULL,"::Unit_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_Unit__Pop_stub,NULL},
  {NULL,"::Unit_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_Unit__Peek_stub,NULL},
  {NULL,"::Unit_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_Unit__AddUniqNameOld_stub,TA_taList_Unit__AddUniqNameOld_MethArgs},
  {NULL,"::Unit_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_Unit__LinkUniqNameOld_stub,TA_taList_Unit__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_SpecPtr_UnitSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int SpecPtr<UnitSpec>::* TA_SpecPtr_UnitSpec__MbrOff;
static MemberDef_data TA_SpecPtr_UnitSpec__MemberDef[]={
  {NULL,"::UnitSpec_ptr","spec"," the actual spec itself","","",
    *((ta_memb_ptr*)&(TA_SpecPtr_UnitSpec__MbrOff=(int SpecPtr<UnitSpec>::*)(&SpecPtr<UnitSpec>::spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SpecPtr_UnitSpec__SetDefaultSpec_MethArgs[]={
  {&TA_TAPtr,NULL,"ownr",""},
  NULL};
static MethodDef_data TA_SpecPtr_UnitSpec__MethodDef[]={
  {&TA_void,NULL,"SetDefaultSpec"," for class that owns ptr","","",
    1,1,-1,0,NULL,cssElCFun_SpecPtr_UnitSpec__SetDefaultSpec_stub,TA_SpecPtr_UnitSpec__SetDefaultSpec_MethArgs},
  {&TA_bool,NULL,"CheckSpec","","","",
    1,0,-1,0,NULL,cssElCFun_SpecPtr_UnitSpec__CheckSpec_stub,NULL},
  {NULL,"::UnitSpec_ptr","NewChild","","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_UnitSpec__NewChild_stub,NULL},
  NULL};
static EnumDef_data TA_SpecPtr_ProjectionSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int SpecPtr<ProjectionSpec>::* TA_SpecPtr_ProjectionSpec__MbrOff;
static MemberDef_data TA_SpecPtr_ProjectionSpec__MemberDef[]={
  {NULL,"::ProjectionSpec_ptr","spec"," the actual spec itself","","",
    *((ta_memb_ptr*)&(TA_SpecPtr_ProjectionSpec__MbrOff=(int SpecPtr<ProjectionSpec>::*)(&SpecPtr<ProjectionSpec>::spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SpecPtr_ProjectionSpec__SetDefaultSpec_MethArgs[]={
  {&TA_TAPtr,NULL,"ownr",""},
  NULL};
static MethodDef_data TA_SpecPtr_ProjectionSpec__MethodDef[]={
  {&TA_void,NULL,"SetDefaultSpec"," for class that owns ptr","","",
    1,1,-1,0,NULL,cssElCFun_SpecPtr_ProjectionSpec__SetDefaultSpec_stub,TA_SpecPtr_ProjectionSpec__SetDefaultSpec_MethArgs},
  {&TA_bool,NULL,"CheckSpec","","","",
    1,0,-1,0,NULL,cssElCFun_SpecPtr_ProjectionSpec__CheckSpec_stub,NULL},
  {NULL,"::ProjectionSpec_ptr","NewChild","","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_ProjectionSpec__NewChild_stub,NULL},
  NULL};
static EnumDef_data TA_taGroup_Unit__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__MoveBefore_MethArgs[]={
  {NULL,"::Unit_ptr","trg",""},
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__MoveAfter_MethArgs[]={
  {NULL,"::Unit_ptr","trg",""},
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__Edit_El_MethArgs[]={
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Unit__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Unit__AddUniqNameOld_MethArgs[]={
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Unit__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Unit__MethodDef[]={
  {NULL,"::Unit_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Unit__FirstEl_stub,TA_taGroup_Unit__FirstEl_MethArgs},
  {NULL,"::Unit_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Unit__NextEl_stub,TA_taGroup_Unit__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Unit__MoveBefore_stub,TA_taGroup_Unit__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Unit__MoveAfter_stub,TA_taGroup_Unit__MoveAfter_MethArgs},
  {NULL,"::Unit_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__SafeEl_stub,TA_taGroup_Unit__SafeEl_MethArgs},
  {NULL,"::Unit_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__FastEl_stub,TA_taGroup_Unit__FastEl_MethArgs},
  {NULL,"::Unit_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Unit__DefaultEl_stub,NULL},
  {NULL,"::Unit_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__Edit_El_stub,TA_taGroup_Unit__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__SafeGp_stub,TA_taGroup_Unit__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__FastGp_stub,TA_taGroup_Unit__FastGp_MethArgs},
  {NULL,"::Unit_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__Leaf_stub,TA_taGroup_Unit__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__LeafGp_stub,TA_taGroup_Unit__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Unit__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__FirstGp_stub,TA_taGroup_Unit__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__NextGp_stub,TA_taGroup_Unit__NextGp_MethArgs},
  {NULL,"::Unit_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Unit__NewEl_stub,TA_taGroup_Unit__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Unit__NewGp_stub,TA_taGroup_Unit__NewGp_MethArgs},
  {NULL,"::Unit_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Unit__FindName_stub,TA_taGroup_Unit__FindName_MethArgs},
  {NULL,"::Unit_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Unit__FindType_stub,TA_taGroup_Unit__FindType_MethArgs},
  {NULL,"::Unit_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Unit__Pop_stub,NULL},
  {NULL,"::Unit_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Unit__Peek_stub,NULL},
  {NULL,"::Unit_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__AddUniqNameOld_stub,TA_taGroup_Unit__AddUniqNameOld_MethArgs},
  {NULL,"::Unit_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Unit__LinkUniqNameOld_stub,TA_taGroup_Unit__LinkUniqNameOld_MethArgs},
  {NULL,"::Unit_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Unit__FindLeafName_stub,TA_taGroup_Unit__FindLeafName_MethArgs},
  {NULL,"::Unit_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Unit__FindLeafType_stub,TA_taGroup_Unit__FindLeafType_MethArgs},
  NULL};
static int Unit_Group::* TA_Unit_Group_MbrOff;
static MemberDef_data TA_Unit_Group_MemberDef[]={
  {&TA_Layer_ptr,NULL,"own_lay"," layer owner","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Unit_Group_MbrOff=(int Unit_Group::*)(&Unit_Group::own_lay))),0,NULL,0},
  {&TA_int,NULL,"n_units"," number of units to create in the group (0 = use layer n_units)","","",
    *((ta_memb_ptr*)&(TA_Unit_Group_MbrOff=(int Unit_Group::*)(&Unit_Group::n_units))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"pos"," position of group relative to the layer","","",
    *((ta_memb_ptr*)&(TA_Unit_Group_MbrOff=(int Unit_Group::*)(&Unit_Group::pos))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"geom"," geometry of the group","","",
    *((ta_memb_ptr*)&(TA_Unit_Group_MbrOff=(int Unit_Group::*)(&Unit_Group::geom))),0,NULL,0},
  {&TA_bool,NULL,"units_lesioned"," if units were lesioned in this group, don't complain about rebuilding!","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Unit_Group_MbrOff=(int Unit_Group::*)(&Unit_Group::units_lesioned))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Unit_Group_Copy_Weights_MethArgs[]={
  {&TA_const_Unit_Group_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_Unit_Group_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Unit_Group_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {NULL,"Con_Group::WtSaveFormat","fmt"," Con_Group::TEXT"},
  NULL};
static MethodArgs_data TA_Unit_Group_LayoutUnits_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Unit_Group_SetUnitSpec_MethArgs[]={
  {&TA_UnitSpec_ptr,NULL,"unitspec",""},
  NULL};
static MethodArgs_data TA_Unit_Group_SetConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"conspec",""},
  NULL};
static MethodArgs_data TA_Unit_Group_TransformWeights_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_Unit_Group_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  NULL};
static MethodArgs_data TA_Unit_Group_PruneCons_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  NULL};
static MethodArgs_data TA_Unit_Group_LesionCons_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Unit_Group_LesionUnits_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_Unit_Group_UnitValuesToArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ary",""},
  {&TA_const_char_ptr,NULL,"variable",""},
  NULL};
static MethodArgs_data TA_Unit_Group_UnitValuesFromArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ary",""},
  {&TA_const_char_ptr,NULL,"variable",""},
  NULL};
static MethodArgs_data TA_Unit_Group_FindUnitFmCoord_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"coord",""},
  NULL};
static MethodDef_data TA_Unit_Group_MethodDef[]={
  {&TA_void,NULL,"Copy_Weights"," copies weights from other unit group (incl wts assoc with unit bias member)","MENU MENU_ON_Object ","",
    0,1,-1,0,NULL,cssElCFun_Unit_Group_Copy_Weights_stub,TA_Unit_Group_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,2,1,0,NULL,cssElCFun_Unit_Group_WriteWeights_stub,TA_Unit_Group_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights (optionally in binary fmt)","MENU EXT_strm_wts COMPRESS ","",
    0,2,1,0,NULL,cssElCFun_Unit_Group_ReadWeights_stub,TA_Unit_Group_ReadWeights_MethArgs},
  {&TA_bool,NULL,"Build"," for subgroups: build units to specs (true if changed)","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_Unit_Group_Build_stub,NULL},
  {&TA_bool,NULL,"CheckBuild"," check if build needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_Unit_Group_CheckBuild_stub,NULL},
  {&TA_void,NULL,"LayoutUnits"," for subgroups: redistribute units within the given geometry of the group","","",
    0,1,0,0,NULL,cssElCFun_Unit_Group_LayoutUnits_stub,TA_Unit_Group_LayoutUnits_MethArgs},
  {&TA_void,NULL,"RecomputeGeometry"," re compute geometry based on parent layer","","",
    0,0,-1,0,NULL,cssElCFun_Unit_Group_RecomputeGeometry_stub,NULL},
  {&TA_bool,NULL,"SetUnitSpec"," set for all units in group","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Unit_Group_SetUnitSpec_stub,TA_Unit_Group_SetUnitSpec_MethArgs},
  {&TA_bool,NULL,"SetConSpec"," set for all unit's connections in group","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Unit_Group_SetConSpec_stub,TA_Unit_Group_SetConSpec_MethArgs},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Unit_Group_TransformWeights_stub,TA_Unit_Group_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,1,-1,0,NULL,cssElCFun_Unit_Group_AddNoiseToWeights_stub,TA_Unit_Group_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,3,-1,0,NULL,cssElCFun_Unit_Group_PruneCons_stub,TA_Unit_Group_PruneCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove connections with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Unit_Group_LesionCons_stub,TA_Unit_Group_LesionCons_MethArgs},
  {&TA_int,NULL,"LesionUnits"," remove units with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_Unit_Group_LesionUnits_stub,TA_Unit_Group_LesionUnits_MethArgs},
  {&TA_void,NULL,"UnitValuesToArray"," adds values of variable from the units into the given array","","",
    0,2,-1,0,NULL,cssElCFun_Unit_Group_UnitValuesToArray_stub,TA_Unit_Group_UnitValuesToArray_MethArgs},
  {&TA_void,NULL,"UnitValuesFromArray"," sets unit values from values in the given array","","",
    0,2,-1,0,NULL,cssElCFun_Unit_Group_UnitValuesFromArray_stub,TA_Unit_Group_UnitValuesFromArray_MethArgs},
  {&TA_Unit_ptr,NULL,"FindUnitFmCoord"," returns unit at given coordinates within layer","","",
    0,1,-1,0,NULL,cssElCFun_Unit_Group_FindUnitFmCoord_stub,TA_Unit_Group_FindUnitFmCoord_MethArgs},
  NULL};
static EnumDef_data TA_taGroup_Layer__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__MoveBefore_MethArgs[]={
  {NULL,"::Layer_ptr","trg",""},
  {NULL,"::Layer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__MoveAfter_MethArgs[]={
  {NULL,"::Layer_ptr","trg",""},
  {NULL,"::Layer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__Edit_El_MethArgs[]={
  {NULL,"::Layer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Layer__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Layer__AddUniqNameOld_MethArgs[]={
  {NULL,"::Layer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Layer_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Layer__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Layer__MethodDef[]={
  {NULL,"::Layer_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Layer__FirstEl_stub,TA_taGroup_Layer__FirstEl_MethArgs},
  {NULL,"::Layer_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Layer__NextEl_stub,TA_taGroup_Layer__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Layer__MoveBefore_stub,TA_taGroup_Layer__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Layer__MoveAfter_stub,TA_taGroup_Layer__MoveAfter_MethArgs},
  {NULL,"::Layer_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__SafeEl_stub,TA_taGroup_Layer__SafeEl_MethArgs},
  {NULL,"::Layer_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__FastEl_stub,TA_taGroup_Layer__FastEl_MethArgs},
  {NULL,"::Layer_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Layer__DefaultEl_stub,NULL},
  {NULL,"::Layer_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__Edit_El_stub,TA_taGroup_Layer__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__SafeGp_stub,TA_taGroup_Layer__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__FastGp_stub,TA_taGroup_Layer__FastGp_MethArgs},
  {NULL,"::Layer_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__Leaf_stub,TA_taGroup_Layer__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__LeafGp_stub,TA_taGroup_Layer__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Layer__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__FirstGp_stub,TA_taGroup_Layer__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__NextGp_stub,TA_taGroup_Layer__NextGp_MethArgs},
  {NULL,"::Layer_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Layer__NewEl_stub,TA_taGroup_Layer__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Layer__NewGp_stub,TA_taGroup_Layer__NewGp_MethArgs},
  {NULL,"::Layer_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Layer__FindName_stub,TA_taGroup_Layer__FindName_MethArgs},
  {NULL,"::Layer_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Layer__FindType_stub,TA_taGroup_Layer__FindType_MethArgs},
  {NULL,"::Layer_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Layer__Pop_stub,NULL},
  {NULL,"::Layer_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Layer__Peek_stub,NULL},
  {NULL,"::Layer_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__AddUniqNameOld_stub,TA_taGroup_Layer__AddUniqNameOld_MethArgs},
  {NULL,"::Layer_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Layer__LinkUniqNameOld_stub,TA_taGroup_Layer__LinkUniqNameOld_MethArgs},
  {NULL,"::Layer_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Layer__FindLeafName_stub,TA_taGroup_Layer__FindLeafName_MethArgs},
  {NULL,"::Layer_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Layer__FindLeafType_stub,TA_taGroup_Layer__FindLeafType_MethArgs},
  NULL};
static int Layer_MGroup::* TA_Layer_MGroup_MbrOff;
static MemberDef_data TA_Layer_MGroup_MemberDef[]={
  {&TA_TDCoord,NULL,"pos","","","",
    *((ta_memb_ptr*)&(TA_Layer_MGroup_MbrOff=(int Layer_MGroup::*)(&Layer_MGroup::pos))),0,NULL,0},
  NULL};
static EnumDef_data TA_taGroup_Network__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Network__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__MoveBefore_MethArgs[]={
  {NULL,"::Network_ptr","trg",""},
  {NULL,"::Network_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__MoveAfter_MethArgs[]={
  {NULL,"::Network_ptr","trg",""},
  {NULL,"::Network_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__Edit_El_MethArgs[]={
  {NULL,"::Network_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Network__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Network__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Network__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Network__AddUniqNameOld_MethArgs[]={
  {NULL,"::Network_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Network_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Network__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Network__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Network__MethodDef[]={
  {NULL,"::Network_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Network__FirstEl_stub,TA_taGroup_Network__FirstEl_MethArgs},
  {NULL,"::Network_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Network__NextEl_stub,TA_taGroup_Network__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Network__MoveBefore_stub,TA_taGroup_Network__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Network__MoveAfter_stub,TA_taGroup_Network__MoveAfter_MethArgs},
  {NULL,"::Network_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__SafeEl_stub,TA_taGroup_Network__SafeEl_MethArgs},
  {NULL,"::Network_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__FastEl_stub,TA_taGroup_Network__FastEl_MethArgs},
  {NULL,"::Network_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Network__DefaultEl_stub,NULL},
  {NULL,"::Network_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__Edit_El_stub,TA_taGroup_Network__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__SafeGp_stub,TA_taGroup_Network__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__FastGp_stub,TA_taGroup_Network__FastGp_MethArgs},
  {NULL,"::Network_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__Leaf_stub,TA_taGroup_Network__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__LeafGp_stub,TA_taGroup_Network__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Network__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__FirstGp_stub,TA_taGroup_Network__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__NextGp_stub,TA_taGroup_Network__NextGp_MethArgs},
  {NULL,"::Network_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Network__NewEl_stub,TA_taGroup_Network__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Network__NewGp_stub,TA_taGroup_Network__NewGp_MethArgs},
  {NULL,"::Network_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Network__FindName_stub,TA_taGroup_Network__FindName_MethArgs},
  {NULL,"::Network_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Network__FindType_stub,TA_taGroup_Network__FindType_MethArgs},
  {NULL,"::Network_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Network__Pop_stub,NULL},
  {NULL,"::Network_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Network__Peek_stub,NULL},
  {NULL,"::Network_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__AddUniqNameOld_stub,TA_taGroup_Network__AddUniqNameOld_MethArgs},
  {NULL,"::Network_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Network__LinkUniqNameOld_stub,TA_taGroup_Network__LinkUniqNameOld_MethArgs},
  {NULL,"::Network_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Network__FindLeafName_stub,TA_taGroup_Network__FindLeafName_MethArgs},
  {NULL,"::Network_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Network__FindLeafType_stub,TA_taGroup_Network__FindLeafType_MethArgs},
  NULL};
static int TessEl::* TA_TessEl_MbrOff;
static MemberDef_data TA_TessEl_MemberDef[]={
  {&TA_TwoDCoord,NULL,"send_off"," offset from current receiving unit","","",
    *((ta_memb_ptr*)&(TA_TessEl_MbrOff=(int TessEl::*)(&TessEl::send_off))),0,NULL,0},
  {&TA_float,NULL,"wt_val"," value to assign to weight","","",
    *((ta_memb_ptr*)&(TA_TessEl_MbrOff=(int TessEl::*)(&TessEl::wt_val))),0,NULL,0},
  NULL};
static EnumDef_data TA_taList_TessEl__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_TessEl__MoveBefore_MethArgs[]={
  {NULL,"::TessEl_ptr","trg",""},
  {NULL,"::TessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TessEl__MoveAfter_MethArgs[]={
  {NULL,"::TessEl_ptr","trg",""},
  {NULL,"::TessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TessEl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_TessEl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_TessEl__Edit_El_MethArgs[]={
  {NULL,"::TessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TessEl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_TessEl__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_TessEl__AddUniqNameOld_MethArgs[]={
  {NULL,"::TessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TessEl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::TessEl_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_TessEl__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_TessEl__MoveBefore_stub,TA_taList_TessEl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_TessEl__MoveAfter_stub,TA_taList_TessEl__MoveAfter_MethArgs},
  {NULL,"::TessEl_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_TessEl__SafeEl_stub,TA_taList_TessEl__SafeEl_MethArgs},
  {NULL,"::TessEl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_TessEl__FastEl_stub,TA_taList_TessEl__FastEl_MethArgs},
  {NULL,"::TessEl_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_TessEl__DefaultEl_stub,NULL},
  {NULL,"::TessEl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_TessEl__Edit_El_stub,TA_taList_TessEl__Edit_El_MethArgs},
  {NULL,"::TessEl_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_TessEl__FindName_stub,TA_taList_TessEl__FindName_MethArgs},
  {NULL,"::TessEl_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_TessEl__FindType_stub,TA_taList_TessEl__FindType_MethArgs},
  {NULL,"::TessEl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_TessEl__Pop_stub,NULL},
  {NULL,"::TessEl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_TessEl__Peek_stub,NULL},
  {NULL,"::TessEl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_TessEl__AddUniqNameOld_stub,TA_taList_TessEl__AddUniqNameOld_MethArgs},
  {NULL,"::TessEl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_TessEl__LinkUniqNameOld_stub,TA_taList_TessEl__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_TesselPrjnSpec_LinkType[]={
  {"NO_LINK"," weights are not linked","",0},
  {"GP_LINK"," weights are linked by groups of units","",1},
  {"UN_LINK"," weights are linked among all units","",2},
  NULL};
static int TesselPrjnSpec::* TA_TesselPrjnSpec_MbrOff;
static MemberDef_data TA_TesselPrjnSpec_MemberDef[]={
  {&TA_TwoDCoord,NULL,"recv_off"," offset in layer for start of recv units to begin connecting","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::recv_off))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_n"," number of receiving units to connect in each dimension (-1 for all)","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::recv_n))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_skip"," increment for recv units in each dimension -- 1 = connect all units; 2 = skip every other unit, etc","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::recv_skip))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_group"," group together this many units under the same starting coord, resulting in a tile pattern","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::recv_group))),0,NULL,0},
  {&TA_bool,NULL,"wrap"," whether to wrap coordinates around (else clip)","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::wrap))),0,NULL,0},
  {NULL,"::LinkType","link_type"," type of weight linking to use","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::link_type))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"link_src"," index for source unit for unit linking (should have full set of connections)","CONDEDIT_OFF_link_type:NO_LINK ","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::link_src))),0,NULL,0},
  {&TA_FloatTwoDCoord,NULL,"send_scale"," scale to apply to transform receiving unit coords into sending unit coords","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::send_scale))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"send_border"," border size around sending layer (constant offset to add to sending offsets)","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::send_border))),0,NULL,0},
  {&TA_TessEl_List,NULL,"send_offs"," offsets of the sending units","","",
    *((ta_memb_ptr*)&(TA_TesselPrjnSpec_MbrOff=(int TesselPrjnSpec::*)(&TesselPrjnSpec::send_offs))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_Connect_NonLinked_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_Connect_GpLinked_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_Connect_GpLinkFmSrc_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_Connect_UnLinked_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_Connect_UnLinkFmSrc_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_GetCtrFmRecv_MethArgs[]={
  {&TA_TwoDCoord_ref,NULL,"sctr",""},
  {&TA_TwoDCoord,NULL,"ruc",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_Connect_RecvUnit_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru_u",""},
  {&TA_const_TwoDCoord_ref,NULL,"ruc",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_MakeEllipse_MethArgs[]={
  {&TA_int,NULL,"half_width",""},
  {&TA_int,NULL,"half_height",""},
  {&TA_int,NULL,"ctr_x",""},
  {&TA_int,NULL,"ctr_y",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_MakeRectangle_MethArgs[]={
  {&TA_int,NULL,"width",""},
  {&TA_int,NULL,"height",""},
  {&TA_int,NULL,"left",""},
  {&TA_int,NULL,"bottom",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_WeightsFromDist_MethArgs[]={
  {&TA_float,NULL,"scale",""},
  NULL};
static MethodArgs_data TA_TesselPrjnSpec_WeightsFromGausDist_MethArgs[]={
  {&TA_float,NULL,"scale",""},
  {&TA_float,NULL,"sigma",""},
  NULL};
static MethodDef_data TA_TesselPrjnSpec_MethodDef[]={
  {&TA_void,NULL,"Connect_NonLinked"," connect non-linked units","","",
    0,1,-1,0,NULL,cssElCFun_TesselPrjnSpec_Connect_NonLinked_stub,TA_TesselPrjnSpec_Connect_NonLinked_MethArgs},
  {&TA_void,NULL,"Connect_GpLinked"," connect group linked units","","",
    0,1,-1,0,NULL,cssElCFun_TesselPrjnSpec_Connect_GpLinked_stub,TA_TesselPrjnSpec_Connect_GpLinked_MethArgs},
  {&TA_void,NULL,"Connect_GpLinkFmSrc"," connect group linked units from source","","",
    0,1,-1,0,NULL,cssElCFun_TesselPrjnSpec_Connect_GpLinkFmSrc_stub,TA_TesselPrjnSpec_Connect_GpLinkFmSrc_MethArgs},
  {&TA_void,NULL,"Connect_UnLinked"," connect linked units","","",
    0,1,-1,0,NULL,cssElCFun_TesselPrjnSpec_Connect_UnLinked_stub,TA_TesselPrjnSpec_Connect_UnLinked_MethArgs},
  {&TA_void,NULL,"Connect_UnLinkFmSrc"," connect linked units from source","","",
    0,1,-1,0,NULL,cssElCFun_TesselPrjnSpec_Connect_UnLinkFmSrc_stub,TA_TesselPrjnSpec_Connect_UnLinkFmSrc_MethArgs},
  {&TA_void,NULL,"GetCtrFmRecv"," get center of sender coords from receiving coords","","",
    0,2,-1,0,NULL,cssElCFun_TesselPrjnSpec_GetCtrFmRecv_stub,TA_TesselPrjnSpec_GetCtrFmRecv_MethArgs},
  {&TA_void,NULL,"Connect_RecvUnit"," connects one recv unit to all senders (doesn't check for linking..)","","",
    0,3,-1,0,NULL,cssElCFun_TesselPrjnSpec_Connect_RecvUnit_stub,TA_TesselPrjnSpec_Connect_RecvUnit_MethArgs},
  {&TA_void,NULL,"MakeEllipse"," make a connection pattern in the form of an elipse: center is located at ctr_x,y and extends half_width and half_height therefrom","MENU MENU_ON_Actions MENU_SEP_BEFORE ","",
    0,4,-1,0,NULL,cssElCFun_TesselPrjnSpec_MakeEllipse_stub,TA_TesselPrjnSpec_MakeEllipse_MethArgs},
  {&TA_void,NULL,"MakeRectangle"," make a connection pattern in the form of a rectangle starting at left, bottom coordinate and going right and up by width, height","MENU ","",
    0,4,-1,0,NULL,cssElCFun_TesselPrjnSpec_MakeRectangle_stub,TA_TesselPrjnSpec_MakeRectangle_MethArgs},
  {&TA_void,NULL,"WeightsFromDist"," assign weights as a linear function of sender distance","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_TesselPrjnSpec_WeightsFromDist_stub,TA_TesselPrjnSpec_WeightsFromDist_MethArgs},
  {&TA_void,NULL,"WeightsFromGausDist"," assign weights as a Gaussian function of sender distance","MENU ","",
    0,2,-1,0,NULL,cssElCFun_TesselPrjnSpec_WeightsFromGausDist_stub,TA_TesselPrjnSpec_WeightsFromGausDist_MethArgs},
  NULL};
static int OneToOnePrjnSpec::* TA_OneToOnePrjnSpec_MbrOff;
static MemberDef_data TA_OneToOnePrjnSpec_MemberDef[]={
  {&TA_int,NULL,"n_conns"," number of connections to make (-1 for size of layer)","","",
    *((ta_memb_ptr*)&(TA_OneToOnePrjnSpec_MbrOff=(int OneToOnePrjnSpec::*)(&OneToOnePrjnSpec::n_conns))),0,NULL,0},
  {&TA_int,NULL,"recv_start"," starting unit index for recv connections","","",
    *((ta_memb_ptr*)&(TA_OneToOnePrjnSpec_MbrOff=(int OneToOnePrjnSpec::*)(&OneToOnePrjnSpec::recv_start))),0,NULL,0},
  {&TA_int,NULL,"send_start"," starting unit index for sending connections","","",
    *((ta_memb_ptr*)&(TA_OneToOnePrjnSpec_MbrOff=(int OneToOnePrjnSpec::*)(&OneToOnePrjnSpec::send_start))),0,NULL,0},
  NULL};
static int UniformRndPrjnSpec::* TA_UniformRndPrjnSpec_MbrOff;
static MemberDef_data TA_UniformRndPrjnSpec_MemberDef[]={
  {&TA_float,NULL,"p_con"," overall probability of connection","","",
    *((ta_memb_ptr*)&(TA_UniformRndPrjnSpec_MbrOff=(int UniformRndPrjnSpec::*)(&UniformRndPrjnSpec::p_con))),0,NULL,0},
  {&TA_bool,NULL,"permute"," use permuted order for same number of cons","","",
    *((ta_memb_ptr*)&(TA_UniformRndPrjnSpec_MbrOff=(int UniformRndPrjnSpec::*)(&UniformRndPrjnSpec::permute))),0,NULL,0},
  {&TA_bool,NULL,"sym_self"," if a self projection, make it symmetric (senders = receivers) otherwise it is not","","",
    *((ta_memb_ptr*)&(TA_UniformRndPrjnSpec_MbrOff=(int UniformRndPrjnSpec::*)(&UniformRndPrjnSpec::sym_self))),0,NULL,0},
  {&TA_bool,NULL,"same_seed"," use the same random seed each time (same connect pattern)","","",
    *((ta_memb_ptr*)&(TA_UniformRndPrjnSpec_MbrOff=(int UniformRndPrjnSpec::*)(&UniformRndPrjnSpec::same_seed))),0,NULL,0},
  {&TA_RndSeed,NULL,"rndm_seed"," random seed","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_UniformRndPrjnSpec_MbrOff=(int UniformRndPrjnSpec::*)(&UniformRndPrjnSpec::rndm_seed))),0,NULL,0},
  NULL};
static EnumDef_data TA_PolarRndPrjnSpec_UnitDistType[]={
  {"XY_DIST"," X-Y axis distance between units","",0},
  {"XY_DIST_CENTER"," centered distance (layers centered over each other)","",1},
  {"XY_DIST_NORM"," normalized range (0-1 for each layer) distance","",2},
  {"XY_DIST_CENTER_NORM"," normalized and centered (-1:1 for each layer) distance","",3},
  NULL};
static int PolarRndPrjnSpec::* TA_PolarRndPrjnSpec_MbrOff;
static MemberDef_data TA_PolarRndPrjnSpec_MemberDef[]={
  {&TA_float,NULL,"p_con"," overall probability of connection (number of samples)","","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::p_con))),0,NULL,0},
  {&TA_Random,NULL,"rnd_dist"," prob density of connectivity as a fctn of distance","","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::rnd_dist))),0,NULL,0},
  {&TA_Random,NULL,"rnd_angle"," prob density of connectivity as a fctn of angle (1 = 2pi)","","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::rnd_angle))),0,NULL,0},
  {NULL,"::UnitDistType","dist_type"," type of distance function to use","","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::dist_type))),0,NULL,0},
  {&TA_bool,NULL,"wrap"," wrap around layer coordinates (else clip at ends)","","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::wrap))),0,NULL,0},
  {&TA_int,NULL,"max_retries"," maximum number of times attempt to con same sender allowed","","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::max_retries))),0,NULL,0},
  {&TA_bool,NULL,"same_seed"," use the same random seed each time (same connect pattern)","","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::same_seed))),0,NULL,0},
  {&TA_RndSeed,NULL,"rndm_seed"," random seed","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_PolarRndPrjnSpec_MbrOff=(int PolarRndPrjnSpec::*)(&PolarRndPrjnSpec::rndm_seed))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PolarRndPrjnSpec_UnitDist_MethArgs[]={
  {NULL,"::UnitDistType","typ",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_const_TwoDCoord_ref,NULL,"ru",""},
  {&TA_const_TwoDCoord_ref,NULL,"su",""},
  NULL};
static MethodArgs_data TA_PolarRndPrjnSpec_GetUnitFmOff_MethArgs[]={
  {NULL,"::UnitDistType","typ",""},
  {&TA_bool,NULL,"wrap",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_const_TwoDCoord_ref,NULL,"ru",""},
  {&TA_const_FloatTwoDCoord_ref,NULL,"su_off",""},
  NULL};
static MethodArgs_data TA_PolarRndPrjnSpec_GetDistProb_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodDef_data TA_PolarRndPrjnSpec_MethodDef[]={
  {&TA_float,NULL,"UnitDist"," computes the distance between two units according to distance type","","",
    0,4,-1,1,(ta_void_fun)(PolarRndPrjnSpec::UnitDist),cssElCFun_PolarRndPrjnSpec_UnitDist_stub,TA_PolarRndPrjnSpec_UnitDist_MethArgs},
  {&TA_Unit_ptr,NULL,"GetUnitFmOff"," gets unit from real-valued offset scaled according to distance type","","",
    0,5,-1,1,(ta_void_fun)(PolarRndPrjnSpec::GetUnitFmOff),cssElCFun_PolarRndPrjnSpec_GetUnitFmOff_stub,TA_PolarRndPrjnSpec_GetUnitFmOff_MethArgs},
  {&TA_float,NULL,"GetDistProb"," compute the probability for connecting two units as a fctn of distance","","",
    0,3,-1,0,NULL,cssElCFun_PolarRndPrjnSpec_GetDistProb_stub,TA_PolarRndPrjnSpec_GetDistProb_MethArgs},
  NULL};
static int LinkPrjnConPtr::* TA_LinkPrjnConPtr_MbrOff;
static MemberDef_data TA_LinkPrjnConPtr_MemberDef[]={
  {&TA_taString,NULL,"recv_layer"," layer name receiving unit is in","","",
    *((ta_memb_ptr*)&(TA_LinkPrjnConPtr_MbrOff=(int LinkPrjnConPtr::*)(&LinkPrjnConPtr::recv_layer))),0,NULL,0},
  {&TA_int,NULL,"recv_idx"," leaf index of receiving unit within layer","","",
    *((ta_memb_ptr*)&(TA_LinkPrjnConPtr_MbrOff=(int LinkPrjnConPtr::*)(&LinkPrjnConPtr::recv_idx))),0,NULL,0},
  {&TA_taString,NULL,"send_layer"," layer name sending unit is in","","",
    *((ta_memb_ptr*)&(TA_LinkPrjnConPtr_MbrOff=(int LinkPrjnConPtr::*)(&LinkPrjnConPtr::send_layer))),0,NULL,0},
  {&TA_int,NULL,"send_idx"," leaf index of sending unit within layer","","",
    *((ta_memb_ptr*)&(TA_LinkPrjnConPtr_MbrOff=(int LinkPrjnConPtr::*)(&LinkPrjnConPtr::send_idx))),0,NULL,0},
  NULL};
static EnumDef_data TA_taList_LinkPrjnConPtr__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__MoveBefore_MethArgs[]={
  {NULL,"::LinkPrjnConPtr_ptr","trg",""},
  {NULL,"::LinkPrjnConPtr_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__MoveAfter_MethArgs[]={
  {NULL,"::LinkPrjnConPtr_ptr","trg",""},
  {NULL,"::LinkPrjnConPtr_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__Edit_El_MethArgs[]={
  {NULL,"::LinkPrjnConPtr_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__AddUniqNameOld_MethArgs[]={
  {NULL,"::LinkPrjnConPtr_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_LinkPrjnConPtr__LinkUniqNameOld_MethArgs[]={
  {NULL,"::LinkPrjnConPtr_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_LinkPrjnConPtr__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__MoveBefore_stub,TA_taList_LinkPrjnConPtr__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__MoveAfter_stub,TA_taList_LinkPrjnConPtr__MoveAfter_MethArgs},
  {NULL,"::LinkPrjnConPtr_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__SafeEl_stub,TA_taList_LinkPrjnConPtr__SafeEl_MethArgs},
  {NULL,"::LinkPrjnConPtr_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__FastEl_stub,TA_taList_LinkPrjnConPtr__FastEl_MethArgs},
  {NULL,"::LinkPrjnConPtr_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__DefaultEl_stub,NULL},
  {NULL,"::LinkPrjnConPtr_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__Edit_El_stub,TA_taList_LinkPrjnConPtr__Edit_El_MethArgs},
  {NULL,"::LinkPrjnConPtr_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__FindName_stub,TA_taList_LinkPrjnConPtr__FindName_MethArgs},
  {NULL,"::LinkPrjnConPtr_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__FindType_stub,TA_taList_LinkPrjnConPtr__FindType_MethArgs},
  {NULL,"::LinkPrjnConPtr_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__Pop_stub,NULL},
  {NULL,"::LinkPrjnConPtr_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__Peek_stub,NULL},
  {NULL,"::LinkPrjnConPtr_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__AddUniqNameOld_stub,TA_taList_LinkPrjnConPtr__AddUniqNameOld_MethArgs},
  {NULL,"::LinkPrjnConPtr_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_LinkPrjnConPtr__LinkUniqNameOld_stub,TA_taList_LinkPrjnConPtr__LinkUniqNameOld_MethArgs},
  NULL};
static int LinkPrjnSpec::* TA_LinkPrjnSpec_MbrOff;
static MemberDef_data TA_LinkPrjnSpec_MemberDef[]={
  {&TA_LinkPrjnConPtr_List,NULL,"links","","","",
    *((ta_memb_ptr*)&(TA_LinkPrjnSpec_MbrOff=(int LinkPrjnSpec::*)(&LinkPrjnSpec::links))),0,NULL,0},
  NULL};
static int ScriptPrjnSpec::* TA_ScriptPrjnSpec_MbrOff;
static MemberDef_data TA_ScriptPrjnSpec_MemberDef[]={
  {&TA_Projection_ptr,NULL,"prjn"," this holds the argument to the prjn","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ScriptPrjnSpec_MbrOff=(int ScriptPrjnSpec::*)(&ScriptPrjnSpec::prjn))),0,NULL,0},
  {&TA_SArg_Array,NULL,"s_args"," string-valued arguments to pass to script","","",
    *((ta_memb_ptr*)&(TA_ScriptPrjnSpec_MbrOff=(int ScriptPrjnSpec::*)(&ScriptPrjnSpec::s_args))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_SetUnique_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  {&TA_bool,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_GetUnique_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_UpdateMember_MethArgs[]={
  {&TA_BaseSpec_ptr,NULL,"from",""},
  {&TA_int,NULL,"memb_no",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_CheckType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_CheckObjectType_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_FindMakeChild_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  {&TA_const_char_ptr,NULL,"alt_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_RemoveChild_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_RemoveCons_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_PreConnect_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_Connect_impl_MethArgs[]={
  {&TA_Projection_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_Connect_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_ProbAddCons_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_float,NULL,"p_add_con",""},
  {&TA_float,NULL,"init_wt"," 0.0"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_InitWtDelta_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_InitWtState_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_C_InitWtState_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_CopyNetwork_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  {&TA_Network_ptr,NULL,"cn",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_Projection_ptr,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_SetScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm",""},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_LoadScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_ScriptPrjnSpec_LoadScriptString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string"," ((void *)0)"},
  NULL};
static MethodDef_data TA_ScriptPrjnSpec_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_ScriptPrjnSpec_GetColText_stub,TA_ScriptPrjnSpec_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_ScriptPrjnSpec_ChildQueryEditActions_stub,TA_ScriptPrjnSpec_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_ScriptPrjnSpec_ChildEditAction_stub,TA_ScriptPrjnSpec_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_ScriptPrjnSpec_QueryEditActions_stub,TA_ScriptPrjnSpec_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_ScriptPrjnSpec_EditAction_stub,TA_ScriptPrjnSpec_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UnSafeCopy_stub,TA_ScriptPrjnSpec_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CastCopyTo_stub,TA_ScriptPrjnSpec_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_GetOwner_stub,TA_ScriptPrjnSpec_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_ScriptPrjnSpec_GetPath_stub,TA_ScriptPrjnSpec_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_ScriptPrjnSpec_FindFromPath_stub,TA_ScriptPrjnSpec_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_ScriptPrjnSpec_New_stub,TA_ScriptPrjnSpec_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_StructUpdate_stub,TA_ScriptPrjnSpec_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_DataUpdate_stub,TA_ScriptPrjnSpec_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_AddDataView_stub,TA_ScriptPrjnSpec_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_RemoveDataView_stub,TA_ScriptPrjnSpec_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_InheritsFrom_stub,TA_ScriptPrjnSpec_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_ScriptPrjnSpec_GetEnumString_stub,TA_ScriptPrjnSpec_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_ScriptPrjnSpec_GetEnumVal_stub,TA_ScriptPrjnSpec_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_ScriptPrjnSpec_Load_stub,TA_ScriptPrjnSpec_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_ScriptPrjnSpec_Save_stub,TA_ScriptPrjnSpec_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_ScriptPrjnSpec_SaveAs_stub,TA_ScriptPrjnSpec_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_ScriptPrjnSpec_ReShowEdit_stub,TA_ScriptPrjnSpec_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CopyFrom_stub,TA_ScriptPrjnSpec_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CopyTo_stub,TA_ScriptPrjnSpec_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_ScriptPrjnSpec_ChildUpdateAfterEdit_stub,TA_ScriptPrjnSpec_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_ChangeMyType_stub,TA_ScriptPrjnSpec_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_ScriptPrjnSpec_SelectForEdit_stub,TA_ScriptPrjnSpec_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_ScriptPrjnSpec_SelectFunForEdit_stub,TA_ScriptPrjnSpec_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CallFun_stub,TA_ScriptPrjnSpec_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_SetAdapter_stub,TA_ScriptPrjnSpec_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_addr_data_link_stub,NULL},
  {&TA_BaseSpec_ptr,NULL,"FindParent"," Find the parent spec of this one","MENU USE_RVAL MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_FindParent_stub,NULL},
  {&TA_void,NULL,"SetUnique"," set inherit bit set inherit bit","","",
    1,2,-1,0,NULL,cssElCFun_ScriptPrjnSpec_SetUnique_stub,TA_ScriptPrjnSpec_SetUnique_MethArgs},
  {&TA_bool,NULL,"GetUnique"," check inherit bit check inherit bit","","",
    1,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_GetUnique_stub,TA_ScriptPrjnSpec_GetUnique_MethArgs},
  {&TA_void,NULL,"UpdateMember"," copy member from given parent","","",
    0,2,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UpdateMember_stub,TA_ScriptPrjnSpec_UpdateMember_MethArgs},
  {&TA_void,NULL,"UpdateSpec"," update values from parent, and update children","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UpdateSpec_stub,NULL},
  {&TA_void,NULL,"UpdateChildren"," update any children","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UpdateChildren_stub,NULL},
  {&TA_void,NULL,"UpdateSubSpecs"," update any subspec objects (overload me)","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UpdateSubSpecs_stub,NULL},
  {&TA_BaseSpec_ptr,NULL,"NewChild"," create a new childspec","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_NewChild_stub,NULL},
  {&TA_bool,NULL,"CheckType"," checks typedef type, issues error and returns false if not sufficient","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CheckType_stub,TA_ScriptPrjnSpec_CheckType_MethArgs},
  {&TA_bool,NULL,"CheckObjectType"," checks object type, issues error and returns false if not sufficient","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CheckObjectType_stub,TA_ScriptPrjnSpec_CheckObjectType_MethArgs},
  {&TA_BaseSpec_ptr,NULL,"FindMakeChild"," find a child spec of given name, and if not, make it (if nm is not found and alt_nm != NULL, it is searched for)","","",
    0,4,1,0,NULL,cssElCFun_ScriptPrjnSpec_FindMakeChild_stub,TA_ScriptPrjnSpec_FindMakeChild_MethArgs},
  {&TA_bool,NULL,"RemoveChild"," remove a child based on name or type","","",
    0,2,1,0,NULL,cssElCFun_ScriptPrjnSpec_RemoveChild_stub,TA_ScriptPrjnSpec_RemoveChild_MethArgs},
  {&TA_void,NULL,"RemoveCons"," deletes any existing connections","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_RemoveCons_stub,TA_ScriptPrjnSpec_RemoveCons_MethArgs},
  {&TA_void,NULL,"PreConnect"," Prepare to connect (init con_groups)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_PreConnect_stub,TA_ScriptPrjnSpec_PreConnect_MethArgs},
  {&TA_void,NULL,"Connect_impl"," actually implements specific connection code","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_Connect_impl_stub,TA_ScriptPrjnSpec_Connect_impl_MethArgs},
  {&TA_void,NULL,"Connect"," connects the network, first removing existing cons, and inits weights","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_Connect_stub,TA_ScriptPrjnSpec_Connect_MethArgs},
  {&TA_int,NULL,"ProbAddCons"," probabilistically add a proportion of new connections to replace those pruned previously, init_wt = initial weight value of new connection","","",
    0,3,2,0,NULL,cssElCFun_ScriptPrjnSpec_ProbAddCons_stub,TA_ScriptPrjnSpec_ProbAddCons_MethArgs},
  {&TA_void,NULL,"InitWtDelta"," initializes the delta","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_InitWtDelta_stub,TA_ScriptPrjnSpec_InitWtDelta_MethArgs},
  {&TA_void,NULL,"InitWtState"," initializes the wt`s state","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_InitWtState_stub,TA_ScriptPrjnSpec_InitWtState_MethArgs},
  {&TA_void,NULL,"C_InitWtState"," custom initialize weights in this con group for given receiving unit ru","","",
    0,3,-1,0,NULL,cssElCFun_ScriptPrjnSpec_C_InitWtState_stub,TA_ScriptPrjnSpec_C_InitWtState_MethArgs},
  {&TA_void,NULL,"CopyNetwork","","","",
    0,4,-1,0,NULL,cssElCFun_ScriptPrjnSpec_CopyNetwork_stub,TA_ScriptPrjnSpec_CopyNetwork_MethArgs},
  {&TA_int,NULL,"UseCount"," return number of times this spec is used","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_UseCount_stub,NULL},
  {&TA_bool,NULL,"HasScript"," returns true if we have some kind of script file or string to run","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_HasScript_stub,NULL},
  {&TA_bool,NULL,"RunScript"," run the script (returns false for no scr)","","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_RunScript_stub,NULL},
  {&TA_void,NULL,"SetScript"," set the script file (e.g. from the script)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptPrjnSpec_SetScript_stub,TA_ScriptPrjnSpec_SetScript_MethArgs},
  {&TA_void,NULL,"LoadScript"," compile script from script file into internal runnable format","MENU LABEL_Compile MENU_ON_Actions ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_ScriptPrjnSpec_LoadScript_stub,TA_ScriptPrjnSpec_LoadScript_MethArgs},
  {&TA_void,NULL,"LoadScriptString"," load and recompile the script string","","",
    0,1,0,0,NULL,cssElCFun_ScriptPrjnSpec_LoadScriptString_stub,TA_ScriptPrjnSpec_LoadScriptString_MethArgs},
  {&TA_void,NULL,"InteractScript"," change to this shell in script (terminal) window to interact, debug etc script","MENU LABEL_Interact ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_InteractScript_stub,NULL},
  {&TA_void,NULL,"Interact"," change to this shell in script (terminal) window to interact, debug etc script","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_Interact_stub,NULL},
  {&TA_void,NULL,"Compile"," compile script from script file into internal runnable format","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptPrjnSpec_Compile_stub,NULL},
  NULL};
static EnumDef_data TA_GpFullPrjnSpec_NConGroups[]={
  {"RECV_SEND_PAIR"," create separate con_groups for each recv_send pair","",0},
  {"SEND_ONLY"," create separate recv con_groups for ea sending gp","",1},
  NULL};
static int GpFullPrjnSpec::* TA_GpFullPrjnSpec_MbrOff;
static MemberDef_data TA_GpFullPrjnSpec_MemberDef[]={
  {NULL,"::NConGroups","n_con_groups"," number of con_groups to create","","",
    *((ta_memb_ptr*)&(TA_GpFullPrjnSpec_MbrOff=(int GpFullPrjnSpec::*)(&GpFullPrjnSpec::n_con_groups))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GpFullPrjnSpec_GetNGroups_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_int_ref,NULL,"r_n_ugp",""},
  {&TA_int_ref,NULL,"s_n_ugp",""},
  NULL};
static MethodDef_data TA_GpFullPrjnSpec_MethodDef[]={
  {&TA_void,NULL,"GetNGroups"," get number of connection groups for the projection","","",
    0,3,-1,0,NULL,cssElCFun_GpFullPrjnSpec_GetNGroups_stub,TA_GpFullPrjnSpec_GetNGroups_MethArgs},
  NULL};
static int RndGpOneToOnePrjnSpec::* TA_RndGpOneToOnePrjnSpec_MbrOff;
static MemberDef_data TA_RndGpOneToOnePrjnSpec_MemberDef[]={
  {&TA_float,NULL,"p_con"," overall probability of connection","","",
    *((ta_memb_ptr*)&(TA_RndGpOneToOnePrjnSpec_MbrOff=(int RndGpOneToOnePrjnSpec::*)(&RndGpOneToOnePrjnSpec::p_con))),0,NULL,0},
  {&TA_bool,NULL,"permute"," use permuted order for same number of cons","","",
    *((ta_memb_ptr*)&(TA_RndGpOneToOnePrjnSpec_MbrOff=(int RndGpOneToOnePrjnSpec::*)(&RndGpOneToOnePrjnSpec::permute))),0,NULL,0},
  {&TA_bool,NULL,"same_seed"," use the same random seed each time (same connect pattern)","","",
    *((ta_memb_ptr*)&(TA_RndGpOneToOnePrjnSpec_MbrOff=(int RndGpOneToOnePrjnSpec::*)(&RndGpOneToOnePrjnSpec::same_seed))),0,NULL,0},
  {&TA_RndSeed,NULL,"rndm_seed"," random seed","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RndGpOneToOnePrjnSpec_MbrOff=(int RndGpOneToOnePrjnSpec::*)(&RndGpOneToOnePrjnSpec::rndm_seed))),0,NULL,0},
  NULL};
static EnumDef_data TA_GpOneToManyPrjnSpec_NConGroups[]={
  {"RECV_SEND_PAIR"," create separate con_groups for each recv_send pair","",0},
  {"SEND_ONLY"," create separate recv con_groups for ea sending gp","",1},
  {"ONE_GROUP"," make only one con_group","",2},
  NULL};
static int GpOneToManyPrjnSpec::* TA_GpOneToManyPrjnSpec_MbrOff;
static MemberDef_data TA_GpOneToManyPrjnSpec_MemberDef[]={
  {NULL,"::NConGroups","n_con_groups"," number of con_groups to create","","",
    *((ta_memb_ptr*)&(TA_GpOneToManyPrjnSpec_MbrOff=(int GpOneToManyPrjnSpec::*)(&GpOneToManyPrjnSpec::n_con_groups))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GpOneToManyPrjnSpec_GetNGroups_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  {&TA_int_ref,NULL,"r_n_ugp",""},
  {&TA_int_ref,NULL,"s_n_ugp",""},
  NULL};
static MethodDef_data TA_GpOneToManyPrjnSpec_MethodDef[]={
  {&TA_void,NULL,"GetNGroups"," get number of connection groups for the projection","","",
    0,3,-1,0,NULL,cssElCFun_GpOneToManyPrjnSpec_GetNGroups_stub,TA_GpOneToManyPrjnSpec_GetNGroups_MethArgs},
  NULL};
static int GpTessEl::* TA_GpTessEl_MbrOff;
static MemberDef_data TA_GpTessEl_MemberDef[]={
  {&TA_TwoDCoord,NULL,"send_gp_off"," offset of group from current receiving group","","",
    *((ta_memb_ptr*)&(TA_GpTessEl_MbrOff=(int GpTessEl::*)(&GpTessEl::send_gp_off))),0,NULL,0},
  {&TA_float,NULL,"p_con"," proportion connectivity from this group -- negative value means just make symmetric cons","","",
    *((ta_memb_ptr*)&(TA_GpTessEl_MbrOff=(int GpTessEl::*)(&GpTessEl::p_con))),0,NULL,0},
  NULL};
static EnumDef_data TA_taList_GpTessEl__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__MoveBefore_MethArgs[]={
  {NULL,"::GpTessEl_ptr","trg",""},
  {NULL,"::GpTessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__MoveAfter_MethArgs[]={
  {NULL,"::GpTessEl_ptr","trg",""},
  {NULL,"::GpTessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__Edit_El_MethArgs[]={
  {NULL,"::GpTessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__AddUniqNameOld_MethArgs[]={
  {NULL,"::GpTessEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GpTessEl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::GpTessEl_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_GpTessEl__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_GpTessEl__MoveBefore_stub,TA_taList_GpTessEl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_GpTessEl__MoveAfter_stub,TA_taList_GpTessEl__MoveAfter_MethArgs},
  {NULL,"::GpTessEl_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_GpTessEl__SafeEl_stub,TA_taList_GpTessEl__SafeEl_MethArgs},
  {NULL,"::GpTessEl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_GpTessEl__FastEl_stub,TA_taList_GpTessEl__FastEl_MethArgs},
  {NULL,"::GpTessEl_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_GpTessEl__DefaultEl_stub,NULL},
  {NULL,"::GpTessEl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_GpTessEl__Edit_El_stub,TA_taList_GpTessEl__Edit_El_MethArgs},
  {NULL,"::GpTessEl_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_GpTessEl__FindName_stub,TA_taList_GpTessEl__FindName_MethArgs},
  {NULL,"::GpTessEl_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_GpTessEl__FindType_stub,TA_taList_GpTessEl__FindType_MethArgs},
  {NULL,"::GpTessEl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_GpTessEl__Pop_stub,NULL},
  {NULL,"::GpTessEl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_GpTessEl__Peek_stub,NULL},
  {NULL,"::GpTessEl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_GpTessEl__AddUniqNameOld_stub,TA_taList_GpTessEl__AddUniqNameOld_MethArgs},
  {NULL,"::GpTessEl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_GpTessEl__LinkUniqNameOld_stub,TA_taList_GpTessEl__LinkUniqNameOld_MethArgs},
  NULL};
static int GpRndTesselPrjnSpec::* TA_GpRndTesselPrjnSpec_MbrOff;
static MemberDef_data TA_GpRndTesselPrjnSpec_MemberDef[]={
  {&TA_TwoDCoord,NULL,"recv_gp_off"," offset for start of recv group to begin connecting","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::recv_gp_off))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_gp_n"," number of receiving groups to connect in each dimension (-1 for all)","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::recv_gp_n))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_gp_skip"," increment for recv groups in each dimension -- 1 = connect all groups; 2 = skip every other group, etc","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::recv_gp_skip))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_gp_group"," group together this many units under the same starting coord, resulting in a tile pattern","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::recv_gp_group))),0,NULL,0},
  {&TA_FloatTwoDCoord,NULL,"send_gp_scale"," scale to apply to transform receiving unit coords into sending unit coords","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::send_gp_scale))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"send_gp_border"," border size around sending layer (constant offset to add to sending offsets)","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::send_gp_border))),0,NULL,0},
  {&TA_TessEl_List,NULL,"send_gp_offs"," offsets of the sending units","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::send_gp_offs))),0,NULL,0},
  {&TA_bool,NULL,"wrap"," whether to wrap coordinates around (else clip)","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::wrap))),0,NULL,0},
  {&TA_float,NULL,"def_p_con"," default probability of connectivity when new send_gp_offs are created","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::def_p_con))),0,NULL,0},
  {&TA_bool,NULL,"permute"," use permuted order for same number of cons","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::permute))),0,NULL,0},
  {&TA_bool,NULL,"sym_self"," if a self projection, make it symmetric (senders = receivers) otherwise it is not","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::sym_self))),0,NULL,0},
  {&TA_bool,NULL,"same_seed"," use the same random seed each time (same connect pattern)","","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::same_seed))),0,NULL,0},
  {&TA_RndSeed,NULL,"rndm_seed"," random seed","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_GpRndTesselPrjnSpec_MbrOff=(int GpRndTesselPrjnSpec::*)(&GpRndTesselPrjnSpec::rndm_seed))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GpRndTesselPrjnSpec_GetCtrFmRecv_MethArgs[]={
  {&TA_TwoDCoord_ref,NULL,"sctr",""},
  {&TA_TwoDCoord,NULL,"ruc",""},
  NULL};
static MethodArgs_data TA_GpRndTesselPrjnSpec_Connect_Gps_MethArgs[]={
  {&TA_Unit_Group_ptr,NULL,"ru_gp",""},
  {&TA_Unit_Group_ptr,NULL,"su_gp",""},
  {&TA_float,NULL,"p_con",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_GpRndTesselPrjnSpec_Connect_RecvGp_MethArgs[]={
  {&TA_Unit_Group_ptr,NULL,"ru_gp",""},
  {&TA_const_TwoDCoord_ref,NULL,"ruc",""},
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodArgs_data TA_GpRndTesselPrjnSpec_MakeEllipse_MethArgs[]={
  {&TA_int,NULL,"half_width",""},
  {&TA_int,NULL,"half_height",""},
  {&TA_int,NULL,"ctr_x",""},
  {&TA_int,NULL,"ctr_y",""},
  NULL};
static MethodArgs_data TA_GpRndTesselPrjnSpec_MakeRectangle_MethArgs[]={
  {&TA_int,NULL,"width",""},
  {&TA_int,NULL,"height",""},
  {&TA_int,NULL,"left",""},
  {&TA_int,NULL,"bottom",""},
  NULL};
static MethodArgs_data TA_GpRndTesselPrjnSpec_SetPCon_MethArgs[]={
  {&TA_float,NULL,"p_con",""},
  {&TA_int,NULL,"start"," 0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodDef_data TA_GpRndTesselPrjnSpec_MethodDef[]={
  {&TA_void,NULL,"GetCtrFmRecv"," get center of sender coords from receiving coords","","",
    0,2,-1,0,NULL,cssElCFun_GpRndTesselPrjnSpec_GetCtrFmRecv_stub,TA_GpRndTesselPrjnSpec_GetCtrFmRecv_MethArgs},
  {&TA_void,NULL,"Connect_Gps","","","",
    0,4,-1,0,NULL,cssElCFun_GpRndTesselPrjnSpec_Connect_Gps_stub,TA_GpRndTesselPrjnSpec_Connect_Gps_MethArgs},
  {&TA_void,NULL,"Connect_RecvGp"," connects one recv unit to all senders (doesn't check for linking..)","","",
    0,3,-1,0,NULL,cssElCFun_GpRndTesselPrjnSpec_Connect_RecvGp_stub,TA_GpRndTesselPrjnSpec_Connect_RecvGp_MethArgs},
  {&TA_void,NULL,"MakeEllipse"," make a connection pattern in the form of an elipse: center is located at ctr_x,y and extends half_width and half_height therefrom","MENU MENU_ON_Actions MENU_SEP_BEFORE ","",
    0,4,-1,0,NULL,cssElCFun_GpRndTesselPrjnSpec_MakeEllipse_stub,TA_GpRndTesselPrjnSpec_MakeEllipse_MethArgs},
  {&TA_void,NULL,"MakeRectangle"," make a connection pattern in the form of a rectangle starting at left, bottom coordinate and going right and up by width, height","MENU ","",
    0,4,-1,0,NULL,cssElCFun_GpRndTesselPrjnSpec_MakeRectangle_stub,TA_GpRndTesselPrjnSpec_MakeRectangle_MethArgs},
  {&TA_void,NULL,"SetPCon"," set p_con value for a range of send_gp_offs (default = all; end-1 = all)","MENU ","",
    0,3,1,0,NULL,cssElCFun_GpRndTesselPrjnSpec_SetPCon_stub,TA_GpRndTesselPrjnSpec_SetPCon_MethArgs},
  NULL};
static int TiledRFPrjnSpec::* TA_TiledRFPrjnSpec_MbrOff;
static MemberDef_data TA_TiledRFPrjnSpec_MemberDef[]={
  {&TA_TwoDCoord,NULL,"recv_gp_border"," number of groups around edge of layer to not connect ","","",
    *((ta_memb_ptr*)&(TA_TiledRFPrjnSpec_MbrOff=(int TiledRFPrjnSpec::*)(&TiledRFPrjnSpec::recv_gp_border))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_gp_ex_st"," start of groups to exclude (e.g., from the middle; -1 = no exclude)","","",
    *((ta_memb_ptr*)&(TA_TiledRFPrjnSpec_MbrOff=(int TiledRFPrjnSpec::*)(&TiledRFPrjnSpec::recv_gp_ex_st))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"recv_gp_ex_n"," number of groups to exclude","","",
    *((ta_memb_ptr*)&(TA_TiledRFPrjnSpec_MbrOff=(int TiledRFPrjnSpec::*)(&TiledRFPrjnSpec::recv_gp_ex_n))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"send_border"," number of units around edge of sending layer to not connect","","",
    *((ta_memb_ptr*)&(TA_TiledRFPrjnSpec_MbrOff=(int TiledRFPrjnSpec::*)(&TiledRFPrjnSpec::send_border))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"send_adj_rfsz"," adjust the total number of sending units by this amount in computing rfield size","","",
    *((ta_memb_ptr*)&(TA_TiledRFPrjnSpec_MbrOff=(int TiledRFPrjnSpec::*)(&TiledRFPrjnSpec::send_adj_rfsz))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"send_adj_sndloc"," adjust the total number of sending units by this amount in computing sending locations","","",
    *((ta_memb_ptr*)&(TA_TiledRFPrjnSpec_MbrOff=(int TiledRFPrjnSpec::*)(&TiledRFPrjnSpec::send_adj_sndloc))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TiledRFPrjnSpec_SelectRF_MethArgs[]={
  {&TA_Projection_ptr,NULL,"prjn",""},
  NULL};
static MethodDef_data TA_TiledRFPrjnSpec_MethodDef[]={
  {&TA_void,NULL,"SelectRF"," select all sending and receiving units in the receptive field of this projection","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_TiledRFPrjnSpec_SelectRF_stub,TA_TiledRFPrjnSpec_SelectRF_MethArgs},
  NULL};
static int TiledGpRFPrjnSpec::* TA_TiledGpRFPrjnSpec_MbrOff;
static MemberDef_data TA_TiledGpRFPrjnSpec_MemberDef[]={
  {&TA_TwoDCoord,NULL,"send_gp_size"," number of groups in the sending receptive field","","",
    *((ta_memb_ptr*)&(TA_TiledGpRFPrjnSpec_MbrOff=(int TiledGpRFPrjnSpec::*)(&TiledGpRFPrjnSpec::send_gp_size))),0,NULL,0},
  {&TA_TwoDCoord,NULL,"send_gp_skip"," number of groups to skip per each recv group (typically 1/2 of the size for nice overlap)","","",
    *((ta_memb_ptr*)&(TA_TiledGpRFPrjnSpec_MbrOff=(int TiledGpRFPrjnSpec::*)(&TiledGpRFPrjnSpec::send_gp_skip))),0,NULL,0},
  {&TA_bool,NULL,"reciprocal"," if true, make the appropriate reciprocal connections for a backwards projection from recv to send","","",
    *((ta_memb_ptr*)&(TA_TiledGpRFPrjnSpec_MbrOff=(int TiledGpRFPrjnSpec::*)(&TiledGpRFPrjnSpec::reciprocal))),0,NULL,0},
  NULL};
static int PatternSpec_Group::* TA_PatternSpec_Group_MbrOff;
static MemberDef_data TA_PatternSpec_Group_MemberDef[]={
  {&TA_TypeDef_ptr,NULL,"pat_gp_type"," type of pattern group to use","TYPE_Pattern_Group ","",
    *((ta_memb_ptr*)&(TA_PatternSpec_Group_MbrOff=(int PatternSpec_Group::*)(&PatternSpec_Group::pat_gp_type))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PatternSpec_Group_Remove_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_PatternSpec_Group_NewPatternGroup_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  {&TA_Pattern_Group_ptr,NULL,"par",""},
  NULL};
static MethodArgs_data TA_PatternSpec_Group_UpdatePatternGroup_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  {&TA_Pattern_Group_ptr,NULL,"pg",""},
  NULL};
static MethodDef_data TA_PatternSpec_Group_MethodDef[]={
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove object at given index on list","","",
    13,1,-1,0,NULL,cssElCFun_PatternSpec_Group_Remove_stub,TA_PatternSpec_Group_Remove_MethArgs},
  {&TA_Pattern_Group_ptr,NULL,"NewPatternGroup"," creates a new pattern_group in my image in event in parent group at index","","",
    0,2,-1,0,NULL,cssElCFun_PatternSpec_Group_NewPatternGroup_stub,TA_PatternSpec_Group_NewPatternGroup_MethArgs},
  {&TA_void,NULL,"UpdatePatternGroup"," updates existing pattern group to current spec settings","","",
    0,2,-1,0,NULL,cssElCFun_PatternSpec_Group_UpdatePatternGroup_stub,TA_PatternSpec_Group_UpdatePatternGroup_MethArgs},
  {&TA_void,NULL,"LinearLayout"," Layout PatternSpecs linearly based according to event spec default layout","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_PatternSpec_Group_LinearLayout_stub,NULL},
  NULL};
static EnumDef_data TA_SpecPtr_EventSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int SpecPtr<EventSpec>::* TA_SpecPtr_EventSpec__MbrOff;
static MemberDef_data TA_SpecPtr_EventSpec__MemberDef[]={
  {NULL,"::EventSpec_ptr","spec"," the actual spec itself","","",
    *((ta_memb_ptr*)&(TA_SpecPtr_EventSpec__MbrOff=(int SpecPtr<EventSpec>::*)(&SpecPtr<EventSpec>::spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SpecPtr_EventSpec__SetDefaultSpec_MethArgs[]={
  {&TA_TAPtr,NULL,"ownr",""},
  NULL};
static MethodDef_data TA_SpecPtr_EventSpec__MethodDef[]={
  {&TA_void,NULL,"SetDefaultSpec"," for class that owns ptr","","",
    1,1,-1,0,NULL,cssElCFun_SpecPtr_EventSpec__SetDefaultSpec_stub,TA_SpecPtr_EventSpec__SetDefaultSpec_MethArgs},
  {&TA_bool,NULL,"CheckSpec","","","",
    1,0,-1,0,NULL,cssElCFun_SpecPtr_EventSpec__CheckSpec_stub,NULL},
  {NULL,"::EventSpec_ptr","NewChild","","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_EventSpec__NewChild_stub,NULL},
  NULL};
static EnumDef_data TA_taGroup_Event__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Event__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__MoveBefore_MethArgs[]={
  {NULL,"::Event_ptr","trg",""},
  {NULL,"::Event_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__MoveAfter_MethArgs[]={
  {NULL,"::Event_ptr","trg",""},
  {NULL,"::Event_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__Edit_El_MethArgs[]={
  {NULL,"::Event_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Event__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Event__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Event__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Event__AddUniqNameOld_MethArgs[]={
  {NULL,"::Event_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Event_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Event__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Event__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Event__MethodDef[]={
  {NULL,"::Event_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Event__FirstEl_stub,TA_taGroup_Event__FirstEl_MethArgs},
  {NULL,"::Event_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Event__NextEl_stub,TA_taGroup_Event__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Event__MoveBefore_stub,TA_taGroup_Event__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Event__MoveAfter_stub,TA_taGroup_Event__MoveAfter_MethArgs},
  {NULL,"::Event_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__SafeEl_stub,TA_taGroup_Event__SafeEl_MethArgs},
  {NULL,"::Event_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__FastEl_stub,TA_taGroup_Event__FastEl_MethArgs},
  {NULL,"::Event_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Event__DefaultEl_stub,NULL},
  {NULL,"::Event_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__Edit_El_stub,TA_taGroup_Event__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__SafeGp_stub,TA_taGroup_Event__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__FastGp_stub,TA_taGroup_Event__FastGp_MethArgs},
  {NULL,"::Event_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__Leaf_stub,TA_taGroup_Event__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__LeafGp_stub,TA_taGroup_Event__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Event__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__FirstGp_stub,TA_taGroup_Event__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__NextGp_stub,TA_taGroup_Event__NextGp_MethArgs},
  {NULL,"::Event_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Event__NewEl_stub,TA_taGroup_Event__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Event__NewGp_stub,TA_taGroup_Event__NewGp_MethArgs},
  {NULL,"::Event_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Event__FindName_stub,TA_taGroup_Event__FindName_MethArgs},
  {NULL,"::Event_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Event__FindType_stub,TA_taGroup_Event__FindType_MethArgs},
  {NULL,"::Event_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Event__Pop_stub,NULL},
  {NULL,"::Event_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Event__Peek_stub,NULL},
  {NULL,"::Event_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__AddUniqNameOld_stub,TA_taGroup_Event__AddUniqNameOld_MethArgs},
  {NULL,"::Event_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Event__LinkUniqNameOld_stub,TA_taGroup_Event__LinkUniqNameOld_MethArgs},
  {NULL,"::Event_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Event__FindLeafName_stub,TA_taGroup_Event__FindLeafName_MethArgs},
  {NULL,"::Event_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Event__FindLeafType_stub,TA_taGroup_Event__FindLeafType_MethArgs},
  NULL};
static MethodArgs_data TA_Event_MGroup_InitEvents_MethArgs[]={
  {&TA_Environment_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Event_MGroup_GetEvent_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_Event_MGroup_NewFmSpec_MethArgs[]={
  {&TA_int,NULL,"n_objs",""},
  {&TA_TypeDef_ptr,NULL,"typ"," ((void *)0)"},
  {&TA_EventSpec_ptr,NULL,"es"," ((void *)0)"},
  NULL};
static MethodDef_data TA_Event_MGroup_MethodDef[]={
  {&TA_void,NULL,"InitEvents"," initialize events at the level of each event group (can be called by enviro)","","",
    0,1,-1,0,NULL,cssElCFun_Event_MGroup_InitEvents_stub,TA_Event_MGroup_InitEvents_MethArgs},
  {&TA_int,NULL,"EventCount"," number of events in environment","MENU MENU_ON_Actions USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_Event_MGroup_EventCount_stub,NULL},
  {&TA_Event_ptr,NULL,"GetEvent","","","",
    0,1,-1,0,NULL,cssElCFun_Event_MGroup_GetEvent_stub,TA_Event_MGroup_GetEvent_MethArgs},
  {&TA_Event_ptr,NULL,"NewFmSpec"," make using given event spec","MENU MENU_ON_Object TYPE_ON_el_base UPDATE_MENUS ","",
    0,3,1,0,NULL,cssElCFun_Event_MGroup_NewFmSpec_stub,TA_Event_MGroup_NewFmSpec_MethArgs},
  {&TA_void,NULL,"AddToView","","","",
    0,0,-1,0,NULL,cssElCFun_Event_MGroup_AddToView_stub,NULL},
  {&TA_void,NULL,"RemoveFromView","","","",
    0,0,-1,0,NULL,cssElCFun_Event_MGroup_RemoveFromView_stub,NULL},
  NULL};
static EnumDef_data TA_taGroup_Environment__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__MoveBefore_MethArgs[]={
  {NULL,"::Environment_ptr","trg",""},
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__MoveAfter_MethArgs[]={
  {NULL,"::Environment_ptr","trg",""},
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__Edit_El_MethArgs[]={
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Environment__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Environment__AddUniqNameOld_MethArgs[]={
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Environment__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Environment__MethodDef[]={
  {NULL,"::Environment_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Environment__FirstEl_stub,TA_taGroup_Environment__FirstEl_MethArgs},
  {NULL,"::Environment_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Environment__NextEl_stub,TA_taGroup_Environment__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Environment__MoveBefore_stub,TA_taGroup_Environment__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Environment__MoveAfter_stub,TA_taGroup_Environment__MoveAfter_MethArgs},
  {NULL,"::Environment_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__SafeEl_stub,TA_taGroup_Environment__SafeEl_MethArgs},
  {NULL,"::Environment_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__FastEl_stub,TA_taGroup_Environment__FastEl_MethArgs},
  {NULL,"::Environment_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Environment__DefaultEl_stub,NULL},
  {NULL,"::Environment_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__Edit_El_stub,TA_taGroup_Environment__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__SafeGp_stub,TA_taGroup_Environment__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__FastGp_stub,TA_taGroup_Environment__FastGp_MethArgs},
  {NULL,"::Environment_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__Leaf_stub,TA_taGroup_Environment__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__LeafGp_stub,TA_taGroup_Environment__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Environment__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__FirstGp_stub,TA_taGroup_Environment__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__NextGp_stub,TA_taGroup_Environment__NextGp_MethArgs},
  {NULL,"::Environment_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Environment__NewEl_stub,TA_taGroup_Environment__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Environment__NewGp_stub,TA_taGroup_Environment__NewGp_MethArgs},
  {NULL,"::Environment_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Environment__FindName_stub,TA_taGroup_Environment__FindName_MethArgs},
  {NULL,"::Environment_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Environment__FindType_stub,TA_taGroup_Environment__FindType_MethArgs},
  {NULL,"::Environment_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Environment__Pop_stub,NULL},
  {NULL,"::Environment_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Environment__Peek_stub,NULL},
  {NULL,"::Environment_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__AddUniqNameOld_stub,TA_taGroup_Environment__AddUniqNameOld_MethArgs},
  {NULL,"::Environment_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Environment__LinkUniqNameOld_stub,TA_taGroup_Environment__LinkUniqNameOld_MethArgs},
  {NULL,"::Environment_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Environment__FindLeafName_stub,TA_taGroup_Environment__FindLeafName_MethArgs},
  {NULL,"::Environment_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Environment__FindLeafType_stub,TA_taGroup_Environment__FindLeafType_MethArgs},
  NULL};
static EnumDef_data TA_taList_Environment__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_Environment__MoveBefore_MethArgs[]={
  {NULL,"::Environment_ptr","trg",""},
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Environment__MoveAfter_MethArgs[]={
  {NULL,"::Environment_ptr","trg",""},
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Environment__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_Environment__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_Environment__Edit_El_MethArgs[]={
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Environment__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Environment__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Environment__AddUniqNameOld_MethArgs[]={
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Environment__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Environment_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_Environment__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_Environment__MoveBefore_stub,TA_taList_Environment__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_Environment__MoveAfter_stub,TA_taList_Environment__MoveAfter_MethArgs},
  {NULL,"::Environment_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_Environment__SafeEl_stub,TA_taList_Environment__SafeEl_MethArgs},
  {NULL,"::Environment_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_Environment__FastEl_stub,TA_taList_Environment__FastEl_MethArgs},
  {NULL,"::Environment_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_Environment__DefaultEl_stub,NULL},
  {NULL,"::Environment_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_Environment__Edit_El_stub,TA_taList_Environment__Edit_El_MethArgs},
  {NULL,"::Environment_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_Environment__FindName_stub,TA_taList_Environment__FindName_MethArgs},
  {NULL,"::Environment_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_Environment__FindType_stub,TA_taList_Environment__FindType_MethArgs},
  {NULL,"::Environment_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_Environment__Pop_stub,NULL},
  {NULL,"::Environment_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_Environment__Peek_stub,NULL},
  {NULL,"::Environment_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_Environment__AddUniqNameOld_stub,TA_taList_Environment__AddUniqNameOld_MethArgs},
  {NULL,"::Environment_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_Environment__LinkUniqNameOld_stub,TA_taList_Environment__LinkUniqNameOld_MethArgs},
  NULL};
static int InteractiveScriptEnv::* TA_InteractiveScriptEnv_MbrOff;
static MemberDef_data TA_InteractiveScriptEnv_MemberDef[]={
  {&TA_Event_ptr,NULL,"next_event"," script must set this to point to the next event to present (or NULL to signal end of epoch)","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_InteractiveScriptEnv_MbrOff=(int InteractiveScriptEnv::*)(&InteractiveScriptEnv::next_event))),0,NULL,0},
  NULL};
static int FreqEvent::* TA_FreqEvent_MbrOff;
static MemberDef_data TA_FreqEvent_MemberDef[]={
  {&TA_float,NULL,"frequency"," frequency of occurance for this event","ENVIROVIEW_freq ","",
    *((ta_memb_ptr*)&(TA_FreqEvent_MbrOff=(int FreqEvent::*)(&FreqEvent::frequency))),0,NULL,0},
  NULL};
static EnumDef_data TA_FreqEnv_FreqLevel[]={
  {"NO_FREQ"," don't use frequency","",0},
  {"EVENT"," use frequency at the event level","",1},
  {"GROUP"," use frequency at the group level","",2},
  {"GROUP_EVENT"," frequency at both group and event levels","",3},
  NULL};
static EnumDef_data TA_FreqEnv_SampleType[]={
  {"RANDOM"," random sampling (n_samples at freq probability)","",0},
  {"PERMUTED"," permuted (n_sample * freq evts per epoch)","",1},
  NULL};
static int FreqEnv::* TA_FreqEnv_MbrOff;
static MemberDef_data TA_FreqEnv_MemberDef[]={
  {&TA_int_Array,NULL,"list"," list of event/group indicies to present","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_FreqEnv_MbrOff=(int FreqEnv::*)(&FreqEnv::list))),0,NULL,0},
  {NULL,"::FreqLevel","freq_level"," level at which to use the frequency information","","",
    *((ta_memb_ptr*)&(TA_FreqEnv_MbrOff=(int FreqEnv::*)(&FreqEnv::freq_level))),0,NULL,0},
  {&TA_int,NULL,"n_sample"," number samples of the events to make per epoch","CONDEDIT_OFF_freq_level:NO_FREQ ","",
    *((ta_memb_ptr*)&(TA_FreqEnv_MbrOff=(int FreqEnv::*)(&FreqEnv::n_sample))),0,NULL,0},
  {NULL,"::SampleType","sample_type"," type of sampling (random with freq or permuted n_samples * freq)","CONDEDIT_OFF_freq_level:NO_FREQ ","",
    *((ta_memb_ptr*)&(TA_FreqEnv_MbrOff=(int FreqEnv::*)(&FreqEnv::sample_type))),0,NULL,0},
  NULL};
static int FreqEvent_Group::* TA_FreqEvent_Group_MbrOff;
static MemberDef_data TA_FreqEvent_Group_MemberDef[]={
  {&TA_FreqEnv_ptr,NULL,"fenv"," parent frequency environment","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_FreqEvent_Group_MbrOff=(int FreqEvent_Group::*)(&FreqEvent_Group::fenv))),0,NULL,0},
  {&TA_int_Array,NULL,"list"," list of event indicies to present for GROUP_EVENT","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_FreqEvent_Group_MbrOff=(int FreqEvent_Group::*)(&FreqEvent_Group::list))),0,NULL,0},
  {&TA_float,NULL,"frequency"," frequency of occurance for this group of events","","",
    *((ta_memb_ptr*)&(TA_FreqEvent_Group_MbrOff=(int FreqEvent_Group::*)(&FreqEvent_Group::frequency))),0,NULL,0},
  NULL};
static int TimeEvent::* TA_TimeEvent_MbrOff;
static MemberDef_data TA_TimeEvent_MemberDef[]={
  {&TA_float,NULL,"time"," time at which it should appear","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_TimeEvent_MbrOff=(int TimeEvent::*)(&TimeEvent::time))),0,NULL,0},
  NULL};
static EnumDef_data TA_TimeEvent_MGroup_Interpolate[]={
  {"PUNCTATE"," events appear for a single instant only","",0},
  {"CONSTANT"," events persist constantly, change discretely","",1},
  {"LINEAR"," linear interpolation is performed between events","",2},
  {"USE_ENVIRO"," use interpolation specified in the environment","",3},
  NULL};
static int TimeEvent_MGroup::* TA_TimeEvent_MGroup_MbrOff;
static MemberDef_data TA_TimeEvent_MGroup_MemberDef[]={
  {NULL,"::Interpolate","interpolate"," if and how to interpolate between given event times","","",
    *((ta_memb_ptr*)&(TA_TimeEvent_MGroup_MbrOff=(int TimeEvent_MGroup::*)(&TimeEvent_MGroup::interpolate))),0,NULL,0},
  {&TA_float,NULL,"end_time"," time this sequence ends at","","",
    *((ta_memb_ptr*)&(TA_TimeEvent_MGroup_MbrOff=(int TimeEvent_MGroup::*)(&TimeEvent_MGroup::end_time))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TimeEvent_MGroup_GetTimeEvent_MethArgs[]={
  {&TA_float,NULL,"time",""},
  NULL};
static MethodArgs_data TA_TimeEvent_MGroup_RegularlySpacedTimes_MethArgs[]={
  {&TA_float,NULL,"start_time",""},
  {&TA_float,NULL,"increment",""},
  NULL};
static MethodDef_data TA_TimeEvent_MGroup_MethodDef[]={
  {&TA_TimeEvent_ptr,NULL,"GetTimeEvent","","","",
    0,1,-1,0,NULL,cssElCFun_TimeEvent_MGroup_GetTimeEvent_stub,TA_TimeEvent_MGroup_GetTimeEvent_MethArgs},
  {&TA_void,NULL,"RegularlySpacedTimes"," fill in the time values of the events in the group with regularly spaced times","MENU ","",
    0,2,-1,0,NULL,cssElCFun_TimeEvent_MGroup_RegularlySpacedTimes_stub,TA_TimeEvent_MGroup_RegularlySpacedTimes_MethArgs},
  NULL};
static int FreqTimeEvent::* TA_FreqTimeEvent_MbrOff;
static MemberDef_data TA_FreqTimeEvent_MemberDef[]={
  {&TA_float,NULL,"frequency"," frequency of occurance for this event","ENVIROVIEW_freq ","",
    *((ta_memb_ptr*)&(TA_FreqTimeEvent_MbrOff=(int FreqTimeEvent::*)(&FreqTimeEvent::frequency))),0,NULL,0},
  NULL};
static int FreqTimeEvent_Group::* TA_FreqTimeEvent_Group_MbrOff;
static MemberDef_data TA_FreqTimeEvent_Group_MemberDef[]={
  {&TA_float,NULL,"frequency"," frequency of occurance for this group of events","","",
    *((ta_memb_ptr*)&(TA_FreqTimeEvent_Group_MbrOff=(int FreqTimeEvent_Group::*)(&FreqTimeEvent_Group::frequency))),0,NULL,0},
  NULL};
static EnumDef_data TA_FreqTimeEnv_FreqLevel[]={
  {"NO_FREQ"," don't use frequency","",0},
  {"EVENT"," use frequency at the event level","",1},
  {"GROUP"," use frequency at the group level","",2},
  NULL};
static EnumDef_data TA_FreqTimeEnv_SampleType[]={
  {"RANDOM"," random sampling (n_samples at freq probability)","",0},
  {"PERMUTED"," permuted (n_sample * freq evts per epoch)","",1},
  NULL};
static int FreqTimeEnv::* TA_FreqTimeEnv_MbrOff;
static MemberDef_data TA_FreqTimeEnv_MemberDef[]={
  {&TA_int_Array,NULL,"list"," list of event/group indicies to present","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_FreqTimeEnv_MbrOff=(int FreqTimeEnv::*)(&FreqTimeEnv::list))),0,NULL,0},
  {NULL,"::FreqLevel","freq_level"," level at which to use the frequency information","","",
    *((ta_memb_ptr*)&(TA_FreqTimeEnv_MbrOff=(int FreqTimeEnv::*)(&FreqTimeEnv::freq_level))),0,NULL,0},
  {&TA_int,NULL,"n_sample"," number samples of the events to make per epoch","CONDEDIT_OFF_freq_level:NO_FREQ ","",
    *((ta_memb_ptr*)&(TA_FreqTimeEnv_MbrOff=(int FreqTimeEnv::*)(&FreqTimeEnv::n_sample))),0,NULL,0},
  {NULL,"::SampleType","sample_type"," type of sampling (random with freq or permuted n_samples * freq)","CONDEDIT_OFF_freq_level:NO_FREQ ","",
    *((ta_memb_ptr*)&(TA_FreqTimeEnv_MbrOff=(int FreqTimeEnv::*)(&FreqTimeEnv::sample_type))),0,NULL,0},
  NULL};
static int ProbPattern::* TA_ProbPattern_MbrOff;
static MemberDef_data TA_ProbPattern_MemberDef[]={
  {&TA_float,NULL,"prob"," probability of showing this pattern","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_ProbPattern_MbrOff=(int ProbPattern::*)(&ProbPattern::prob))),0,NULL,0},
  {&TA_bool,NULL,"applied"," whether it was applied","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ProbPattern_MbrOff=(int ProbPattern::*)(&ProbPattern::applied))),0,NULL,0},
  NULL};
static int ProbPatternSpec_Group::* TA_ProbPatternSpec_Group_MbrOff;
static MemberDef_data TA_ProbPatternSpec_Group_MemberDef[]={
  {&TA_int,NULL,"last_pat"," last pattern chosen","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ProbPatternSpec_Group_MbrOff=(int ProbPatternSpec_Group::*)(&ProbPatternSpec_Group::last_pat))),0,NULL,0},
  NULL};
static int ProbEventSpec::* TA_ProbEventSpec_MbrOff;
static MemberDef_data TA_ProbEventSpec_MemberDef[]={
  {&TA_float,NULL,"default_prob"," default probability","","",
    *((ta_memb_ptr*)&(TA_ProbEventSpec_MbrOff=(int ProbEventSpec::*)(&ProbEventSpec::default_prob))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ProbEventSpec_ApplySamePats_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodDef_data TA_ProbEventSpec_MethodDef[]={
  {&TA_void,NULL,"ApplySamePats","","","",
    0,2,-1,0,NULL,cssElCFun_ProbEventSpec_ApplySamePats_stub,TA_ProbEventSpec_ApplySamePats_MethArgs},
  NULL};
static int XYPatternSpec::* TA_XYPatternSpec_MbrOff;
static MemberDef_data TA_XYPatternSpec_MemberDef[]={
  {&TA_bool,NULL,"wrap"," whether to wrap around target layer if pattern extends beyond coords","","",
    *((ta_memb_ptr*)&(TA_XYPatternSpec_MbrOff=(int XYPatternSpec::*)(&XYPatternSpec::wrap))),0,NULL,0},
  {&TA_bool,NULL,"apply_background"," whether to give all units not in the pattern a background value","","",
    *((ta_memb_ptr*)&(TA_XYPatternSpec_MbrOff=(int XYPatternSpec::*)(&XYPatternSpec::apply_background))),0,NULL,0},
  {&TA_float,NULL,"background_value"," value to apply to all other units in the layer (if applied)","","",
    *((ta_memb_ptr*)&(TA_XYPatternSpec_MbrOff=(int XYPatternSpec::*)(&XYPatternSpec::background_value))),0,NULL,0},
  NULL};
static MethodArgs_data TA_XYPatternSpec_WrapClip_MethArgs[]={
  {&TA_int,NULL,"coord",""},
  {&TA_int,NULL,"max_coord",""},
  NULL};
static MethodDef_data TA_XYPatternSpec_MethodDef[]={
  {&TA_int,NULL,"WrapClip"," implements wrap-around (or not)","","",
    0,2,-1,0,NULL,cssElCFun_XYPatternSpec_WrapClip_stub,TA_XYPatternSpec_WrapClip_MethArgs},
  NULL};
static int XYPattern::* TA_XYPattern_MbrOff;
static MemberDef_data TA_XYPattern_MemberDef[]={
  {&TA_TwoDCoord,NULL,"offset"," offset within network layer for pattern","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_XYPattern_MbrOff=(int XYPattern::*)(&XYPattern::offset))),0,NULL,0},
  NULL};
static int XYSubPatternSpec::* TA_XYSubPatternSpec_MbrOff;
static MemberDef_data TA_XYSubPatternSpec_MemberDef[]={
  {&TA_bool,NULL,"wrap"," whether to wrap around pattern if layer extends beyond coords","","",
    *((ta_memb_ptr*)&(TA_XYSubPatternSpec_MbrOff=(int XYSubPatternSpec::*)(&XYSubPatternSpec::wrap))),0,NULL,0},
  NULL};
static MethodArgs_data TA_XYSubPatternSpec_WrapClip_MethArgs[]={
  {&TA_int,NULL,"coord",""},
  {&TA_int,NULL,"max_coord",""},
  NULL};
static MethodDef_data TA_XYSubPatternSpec_MethodDef[]={
  {&TA_int,NULL,"WrapClip"," implements wrap-around (or not)","","",
    0,2,-1,0,NULL,cssElCFun_XYSubPatternSpec_WrapClip_stub,TA_XYSubPatternSpec_WrapClip_MethArgs},
  NULL};
static int XYSubPattern::* TA_XYSubPattern_MbrOff;
static MemberDef_data TA_XYSubPattern_MemberDef[]={
  {&TA_TwoDCoord,NULL,"offset"," offset within pattern for network layer","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_XYSubPattern_MbrOff=(int XYSubPattern::*)(&XYSubPattern::offset))),0,NULL,0},
  NULL};
static int GroupPatternSpec::* TA_GroupPatternSpec_MbrOff;
static MemberDef_data TA_GroupPatternSpec_MemberDef[]={
  {&TA_PosTDCoord,NULL,"sub_geom"," geometry of the individual sub-groups: must evenly divide into overall geom in both x & y","","",
    *((ta_memb_ptr*)&(TA_GroupPatternSpec_MbrOff=(int GroupPatternSpec::*)(&GroupPatternSpec::sub_geom))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"gp_geom"," geometry of the groups within overall geom (just geom / sub_geom)","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_GroupPatternSpec_MbrOff=(int GroupPatternSpec::*)(&GroupPatternSpec::gp_geom))),0,NULL,0},
  {&TA_bool,NULL,"trans_apply"," translate apply of values to network (only if units are flat, not grouped!)","","",
    *((ta_memb_ptr*)&(TA_GroupPatternSpec_MbrOff=(int GroupPatternSpec::*)(&GroupPatternSpec::trans_apply))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GroupPatternSpec_FlatToValueIdx_MethArgs[]={
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_GroupPatternSpec_CoordToValueIdx_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"gp_coord",""},
  {&TA_const_TwoDCoord_ref,NULL,"sub_coord",""},
  NULL};
static MethodArgs_data TA_GroupPatternSpec_ValueToFlatIdx_MethArgs[]={
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_GroupPatternSpec_CoordToFlatIdx_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"gp_coord",""},
  {&TA_const_TwoDCoord_ref,NULL,"sub_coord",""},
  NULL};
static MethodDef_data TA_GroupPatternSpec_MethodDef[]={
  {&TA_int,NULL,"FlatToValueIdx"," translate given index from a flat view into the value index taking into account groups","","",
    0,1,-1,0,NULL,cssElCFun_GroupPatternSpec_FlatToValueIdx_stub,TA_GroupPatternSpec_FlatToValueIdx_MethArgs},
  {&TA_int,NULL,"CoordToValueIdx"," get index into actual values from given coordinates of group and sub-group","","",
    0,2,-1,0,NULL,cssElCFun_GroupPatternSpec_CoordToValueIdx_stub,TA_GroupPatternSpec_CoordToValueIdx_MethArgs},
  {&TA_int,NULL,"ValueToFlatIdx"," translate given index of a value into a flat view taking into account groups","","",
    0,1,-1,0,NULL,cssElCFun_GroupPatternSpec_ValueToFlatIdx_stub,TA_GroupPatternSpec_ValueToFlatIdx_MethArgs},
  {&TA_int,NULL,"CoordToFlatIdx"," get index into flat structure from given coordinates of group and sub-group","","",
    0,2,-1,0,NULL,cssElCFun_GroupPatternSpec_CoordToFlatIdx_stub,TA_GroupPatternSpec_CoordToFlatIdx_MethArgs},
  NULL};
static int DurEvent::* TA_DurEvent_MbrOff;
static MemberDef_data TA_DurEvent_MemberDef[]={
  {&TA_float,NULL,"duration"," length of time (cycles) event should be presented","ENVIROVIEW ","",
    *((ta_memb_ptr*)&(TA_DurEvent_MbrOff=(int DurEvent::*)(&DurEvent::duration))),0,NULL,0},
  NULL};
static EnumDef_data TA_FromFileEnv_ReadMode[]={
  {"ONE_EPOCH"," read one epoch at a time, using InitEvents interface","",0},
  {"ONE_EVENT"," read one event at a time, using GetNextEvent interface (requires InteractiveEpoch process)","",1},
  NULL};
static int FromFileEnv::* TA_FromFileEnv_MbrOff;
static MemberDef_data TA_FromFileEnv_MemberDef[]={
  {NULL,"::ReadMode","read_mode"," how to read in events: either one epoch or one event at a time (one event requires InteractiveEpoch process)","","",
    *((ta_memb_ptr*)&(TA_FromFileEnv_MbrOff=(int FromFileEnv::*)(&FromFileEnv::read_mode))),0,NULL,0},
  {&TA_taFiler_ptr,NULL,"event_file"," file to read events from","","",
    *((ta_memb_ptr*)&(TA_FromFileEnv_MbrOff=(int FromFileEnv::*)(&FromFileEnv::event_file))),0,NULL,0},
  {NULL,"Environment::TextFmt","text_file_fmt"," format of text file","","",
    *((ta_memb_ptr*)&(TA_FromFileEnv_MbrOff=(int FromFileEnv::*)(&FromFileEnv::text_file_fmt))),0,NULL,0},
  {&TA_bool,NULL,"binary"," file is binary (written by WriteBinary). Otherwise, its Text as readable by ReadText","","",
    *((ta_memb_ptr*)&(TA_FromFileEnv_MbrOff=(int FromFileEnv::*)(&FromFileEnv::binary))),0,NULL,0},
  {&TA_int,NULL,"events_per_epc"," how many events to present per epoch","","",
    *((ta_memb_ptr*)&(TA_FromFileEnv_MbrOff=(int FromFileEnv::*)(&FromFileEnv::events_per_epc))),0,NULL,0},
  {&TA_int,NULL,"file_pos"," position (in terms of events) within the file","READ_ONLY SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_FromFileEnv_MbrOff=(int FromFileEnv::*)(&FromFileEnv::file_pos))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FromFileEnv_ReadEvent_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  NULL};
static MethodDef_data TA_FromFileEnv_MethodDef[]={
  {&TA_void,NULL,"ReadEvent"," read from file into one event (assumes file is open, etc)","","",
    0,1,-1,0,NULL,cssElCFun_FromFileEnv_ReadEvent_stub,TA_FromFileEnv_ReadEvent_MethArgs},
  NULL};
static int CtrlPanelData::* TA_CtrlPanelData_MbrOff;
static MemberDef_data TA_CtrlPanelData_MemberDef[]={
  {&TA_bool,NULL,"active"," is panel active (save this state)","","",
    *((ta_memb_ptr*)&(TA_CtrlPanelData_MbrOff=(int CtrlPanelData::*)(&CtrlPanelData::active))),0,NULL,0},
  {&TA_float,NULL,"lft"," panel window left coord","","",
    *((ta_memb_ptr*)&(TA_CtrlPanelData_MbrOff=(int CtrlPanelData::*)(&CtrlPanelData::lft))),0,NULL,0},
  {&TA_float,NULL,"top"," panel window top coord","","",
    *((ta_memb_ptr*)&(TA_CtrlPanelData_MbrOff=(int CtrlPanelData::*)(&CtrlPanelData::top))),0,NULL,0},
  NULL};
static MethodArgs_data TA_CtrlPanelData_ScriptWinPos_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_CtrlPanelData_Place_MethArgs[]={
  {&TA_float,NULL,"left"," 0.0f"},
  {&TA_float,NULL,"top"," 0.0f"},
  NULL};
static MethodDef_data TA_CtrlPanelData_MethodDef[]={
  {&TA_void,NULL,"GetPanel"," get pointer to current dialog for owner proc","","",
    0,0,-1,0,NULL,cssElCFun_CtrlPanelData_GetPanel_stub,NULL},
  {&TA_void,NULL,"GetWinPos"," get current window position","","",
    0,0,-1,0,NULL,cssElCFun_CtrlPanelData_GetWinPos_stub,NULL},
  {&TA_void,NULL,"ScriptWinPos"," script current window position","","",
    0,1,0,0,NULL,cssElCFun_CtrlPanelData_ScriptWinPos_stub,TA_CtrlPanelData_ScriptWinPos_MethArgs},
  {&TA_void,NULL,"SetWinPos"," set window position from lft, bot","","",
    0,0,-1,0,NULL,cssElCFun_CtrlPanelData_SetWinPos_stub,NULL},
  {&TA_void,NULL,"Place"," place window in given position","","",
    0,2,0,0,NULL,cssElCFun_CtrlPanelData_Place_stub,TA_CtrlPanelData_Place_MethArgs},
  {&TA_void,NULL,"Revert"," revert (update) the display","","",
    0,0,-1,0,NULL,cssElCFun_CtrlPanelData_Revert_stub,NULL},
  NULL};
static MethodArgs_data TA_Process_Group_FindMakeProc_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodDef_data TA_Process_Group_MethodDef[]={
  {&TA_Process_ptr,NULL,"FindMakeProc"," find a process of given type and name -- if not found, make it","","",
    0,3,2,0,NULL,cssElCFun_Process_Group_FindMakeProc_stub,TA_Process_Group_FindMakeProc_MethArgs},
  NULL};
static EnumDef_data TA_taGroup_Process__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Process__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__MoveBefore_MethArgs[]={
  {NULL,"::Process_ptr","trg",""},
  {NULL,"::Process_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__MoveAfter_MethArgs[]={
  {NULL,"::Process_ptr","trg",""},
  {NULL,"::Process_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__Edit_El_MethArgs[]={
  {NULL,"::Process_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Process__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Process__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Process__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Process__AddUniqNameOld_MethArgs[]={
  {NULL,"::Process_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Process_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Process__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Process__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Process__MethodDef[]={
  {NULL,"::Process_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Process__FirstEl_stub,TA_taGroup_Process__FirstEl_MethArgs},
  {NULL,"::Process_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Process__NextEl_stub,TA_taGroup_Process__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Process__MoveBefore_stub,TA_taGroup_Process__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Process__MoveAfter_stub,TA_taGroup_Process__MoveAfter_MethArgs},
  {NULL,"::Process_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__SafeEl_stub,TA_taGroup_Process__SafeEl_MethArgs},
  {NULL,"::Process_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__FastEl_stub,TA_taGroup_Process__FastEl_MethArgs},
  {NULL,"::Process_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Process__DefaultEl_stub,NULL},
  {NULL,"::Process_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__Edit_El_stub,TA_taGroup_Process__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__SafeGp_stub,TA_taGroup_Process__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__FastGp_stub,TA_taGroup_Process__FastGp_MethArgs},
  {NULL,"::Process_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__Leaf_stub,TA_taGroup_Process__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__LeafGp_stub,TA_taGroup_Process__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Process__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__FirstGp_stub,TA_taGroup_Process__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__NextGp_stub,TA_taGroup_Process__NextGp_MethArgs},
  {NULL,"::Process_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Process__NewEl_stub,TA_taGroup_Process__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Process__NewGp_stub,TA_taGroup_Process__NewGp_MethArgs},
  {NULL,"::Process_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Process__FindName_stub,TA_taGroup_Process__FindName_MethArgs},
  {NULL,"::Process_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Process__FindType_stub,TA_taGroup_Process__FindType_MethArgs},
  {NULL,"::Process_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Process__Pop_stub,NULL},
  {NULL,"::Process_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Process__Peek_stub,NULL},
  {NULL,"::Process_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__AddUniqNameOld_stub,TA_taGroup_Process__AddUniqNameOld_MethArgs},
  {NULL,"::Process_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Process__LinkUniqNameOld_stub,TA_taGroup_Process__LinkUniqNameOld_MethArgs},
  {NULL,"::Process_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Process__FindLeafName_stub,TA_taGroup_Process__FindLeafName_MethArgs},
  {NULL,"::Process_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Process__FindLeafType_stub,TA_taGroup_Process__FindLeafType_MethArgs},
  NULL};
static MethodArgs_data TA_Process_MGroup_DuplicateEl_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_Process_MGroup_ReplaceEnvPtrs_MethArgs[]={
  {&TA_Environment_ptr,NULL,"old_ev",""},
  {&TA_Environment_ptr,NULL,"new_ev",""},
  NULL};
static MethodArgs_data TA_Process_MGroup_ReplaceNetPtrs_MethArgs[]={
  {&TA_Network_ptr,NULL,"old_net",""},
  {&TA_Network_ptr,NULL,"new_net",""},
  NULL};
static MethodArgs_data TA_Process_MGroup_FindMakeProc_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_Process_MGroup_ControlPanel_mc_MethArgs[]={
  {&TA_taiMenuEl_ptr,NULL,"sel",""},
  NULL};
static MethodDef_data TA_Process_MGroup_MethodDef[]={
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_Process_MGroup_DuplicateEl_stub,TA_Process_MGroup_DuplicateEl_MethArgs},
  {&TA_int,NULL,"ReplaceEnvPtrs"," replace environment pointers in all processes with new environment pointer","","",
    0,2,-1,0,NULL,cssElCFun_Process_MGroup_ReplaceEnvPtrs_stub,TA_Process_MGroup_ReplaceEnvPtrs_MethArgs},
  {&TA_int,NULL,"ReplaceNetPtrs"," replace network pointers in all processes with new network pointer","","",
    0,2,-1,0,NULL,cssElCFun_Process_MGroup_ReplaceNetPtrs_stub,TA_Process_MGroup_ReplaceNetPtrs_MethArgs},
  {&TA_Process_ptr,NULL,"FindMakeProc"," find a process of given type and name -- if not found, make it","","",
    0,3,2,0,NULL,cssElCFun_Process_MGroup_FindMakeProc_stub,TA_Process_MGroup_FindMakeProc_MethArgs},
  {&TA_void,NULL,"ControlPanel_mc","","","",
    0,1,-1,0,NULL,cssElCFun_Process_MGroup_ControlPanel_mc_stub,TA_Process_MGroup_ControlPanel_mc_MethArgs},
  NULL};
static EnumDef_data TA_CritParam_Relation[]={
  {"EQUAL"," ","LABEL_= ",0},
  {"NOTEQUAL"," ","LABEL_!= ",1},
  {"LESSTHAN"," ","LABEL_< ",2},
  {"GREATERTHAN"," ","LABEL_> ",3},
  {"LESSTHANOREQUAL"," ","LABEL_<= ",4},
  {"GREATERTHANOREQUAL"," ","LABEL_>= ",5},
  NULL};
static int CritParam::* TA_CritParam_MbrOff;
static MemberDef_data TA_CritParam_MemberDef[]={
  {&TA_bool,NULL,"flag"," whether to use this criterion or not","LABEL_ ","",
    *((ta_memb_ptr*)&(TA_CritParam_MbrOff=(int CritParam::*)(&CritParam::flag))),0,NULL,0},
  {NULL,"::Relation","rel"," relation of statistic to target value","LABEL_ CONDEDIT_ON_flag:true ","",
    *((ta_memb_ptr*)&(TA_CritParam_MbrOff=(int CritParam::*)(&CritParam::rel))),0,NULL,0},
  {&TA_float,NULL,"val"," target or comparison value","LABEL_ CONDEDIT_ON_flag:true ","",
    *((ta_memb_ptr*)&(TA_CritParam_MbrOff=(int CritParam::*)(&CritParam::val))),0,NULL,0},
  {&TA_int,NULL,"cnt"," Number of times criterion must be met before stopping","CONDEDIT_ON_flag:true ","",
    *((ta_memb_ptr*)&(TA_CritParam_MbrOff=(int CritParam::*)(&CritParam::cnt))),0,NULL,0},
  {&TA_int,NULL,"n_met"," number of times actually met","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_CritParam_MbrOff=(int CritParam::*)(&CritParam::n_met))),0,NULL,0},
  NULL};
static MethodArgs_data TA_CritParam_Evaluate_MethArgs[]={
  {&TA_float,NULL,"cmp",""},
  NULL};
static MethodDef_data TA_CritParam_MethodDef[]={
  {&TA_bool,NULL,"Evaluate","","","",
    0,1,-1,0,NULL,cssElCFun_CritParam_Evaluate_stub,TA_CritParam_Evaluate_MethArgs},
  {&TA_void,NULL,"Init"," initialize the process (n_met counter)","","",
    0,0,-1,0,NULL,cssElCFun_CritParam_Init_stub,NULL},
  NULL};
static int StatVal::* TA_StatVal_MbrOff;
static MemberDef_data TA_StatVal_MemberDef[]={
  {&TA_float,NULL,"val"," value of statistic","","",
    *((ta_memb_ptr*)&(TA_StatVal_MbrOff=(int StatVal::*)(&StatVal::val))),0,NULL,0},
  {&TA_taString,NULL,"str_val"," value of statistic if its a string","HIDDEN_INLINE ","",
    *((ta_memb_ptr*)&(TA_StatVal_MbrOff=(int StatVal::*)(&StatVal::str_val))),0,NULL,0},
  {&TA_CritParam,NULL,"stopcrit"," Stopping Criteria Parameters","","",
    *((ta_memb_ptr*)&(TA_StatVal_MbrOff=(int StatVal::*)(&StatVal::stopcrit))),0,NULL,0},
  NULL};
static MethodArgs_data TA_StatVal_InitStat_MethArgs[]={
  {&TA_float,NULL,"value","0.0"},
  NULL};
static MethodDef_data TA_StatVal_MethodDef[]={
  {&TA_void,NULL,"InitStat","","","",
    0,1,0,0,NULL,cssElCFun_StatVal_InitStat_stub,TA_StatVal_InitStat_MethArgs},
  {&TA_void,NULL,"Init","","","",
    0,0,-1,0,NULL,cssElCFun_StatVal_Init_stub,NULL},
  {&TA_bool,NULL,"Crit","","","",
    0,0,-1,0,NULL,cssElCFun_StatVal_Crit_stub,NULL},
  NULL};
static MethodArgs_data TA_StatVal_List_InitStat_MethArgs[]={
  {&TA_float,NULL,"value","0.0"},
  NULL};
static MethodArgs_data TA_StatVal_List_NameStatVals_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_const_char_ptr,NULL,"opts",""},
  {&TA_bool,NULL,"is_string","false"},
  NULL};
static MethodArgs_data TA_StatVal_List_GenLogData_MethArgs[]={
  {&TA_LogData_ptr,NULL,"ld",""},
  NULL};
static MethodDef_data TA_StatVal_List_MethodDef[]={
  {&TA_void,NULL,"InitStat"," initialize statistic value","","",
    0,1,0,0,NULL,cssElCFun_StatVal_List_InitStat_stub,TA_StatVal_List_InitStat_MethArgs},
  {&TA_void,NULL,"Init"," initialize process (eg. n_met) (not value!)","","",
    0,0,-1,0,NULL,cssElCFun_StatVal_List_Init_stub,NULL},
  {&TA_bool,NULL,"Crit"," does an OR of each member","","",
    0,0,-1,0,NULL,cssElCFun_StatVal_List_Crit_stub,NULL},
  {&TA_void,NULL,"NameStatVals"," give statvals default names, options","MENU MENU_ON_Actions ","",
    0,3,1,0,NULL,cssElCFun_StatVal_List_NameStatVals_stub,TA_StatVal_List_NameStatVals_MethArgs},
  {&TA_bool,NULL,"HasStopCrit"," check if any of the statvals have crit flags set","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_StatVal_List_HasStopCrit_stub,NULL},
  {&TA_void,NULL,"GenLogData"," generate log data","","",
    0,1,-1,0,NULL,cssElCFun_StatVal_List_GenLogData_stub,TA_StatVal_List_GenLogData_MethArgs},
  NULL};
static MethodArgs_data TA_StatValAgg_ComputeAgg_MethArgs[]={
  {&TA_StatVal_ptr,NULL,"to",""},
  {&TA_float,NULL,"fm_val",""},
  NULL};
static MethodArgs_data TA_StatValAgg_ComputeAggNoUpdt_MethArgs[]={
  {&TA_StatVal_ptr,NULL,"to",""},
  {&TA_StatVal_ptr,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_StatValAgg_NewCopyAgg_MethArgs[]={
  {&TA_StatVal_ptr,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_StatValAgg_ComputeAggs_MethArgs[]={
  {&TA_StatVal_List_ptr,NULL,"to",""},
  {&TA_StatVal_List_ptr,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_StatValAgg_ComputeAggsNoUpdt_MethArgs[]={
  {&TA_StatVal_List_ptr,NULL,"to",""},
  {&TA_StatVal_List_ptr,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_StatValAgg_AggFromCopy_MethArgs[]={
  {&TA_StatVal_List_ptr,NULL,"fm",""},
  NULL};
static MethodDef_data TA_StatValAgg_MethodDef[]={
  {&TA_void,NULL,"ComputeAgg"," compute aggregation into `to' based on current op from `fm' compute aggregation into `to' based on current op from `fm' compute aggregation into `to' based on current op from value fm_val","","",
    3,2,-1,0,NULL,cssElCFun_StatValAgg_ComputeAgg_stub,TA_StatValAgg_ComputeAgg_MethArgs},
  {&TA_bool,NULL,"ComputeAggNoUpdt"," compute aggregation but don't update the n_updt counter (for lists) (return false if fm = 0, else true) compute aggregation but don't update the n_updt counter (for lists) (returns false if 0, else true)","","",
    2,2,-1,0,NULL,cssElCFun_StatValAgg_ComputeAggNoUpdt_stub,TA_StatValAgg_ComputeAggNoUpdt_MethArgs},
  {&TA_void,NULL,"NewCopyAgg"," make a new copy aggregate","","",
    0,1,-1,0,NULL,cssElCFun_StatValAgg_NewCopyAgg_stub,TA_StatValAgg_NewCopyAgg_MethArgs},
  {&TA_void,NULL,"ComputeAggs"," compute aggregation for whole list of statvals (updt after list)","","",
    0,2,-1,0,NULL,cssElCFun_StatValAgg_ComputeAggs_stub,TA_StatValAgg_ComputeAggs_MethArgs},
  {&TA_bool,NULL,"ComputeAggsNoUpdt"," compute aggregation for whole list of statvals (no updt at all) (returns false if all 0, else true)","","",
    0,2,-1,0,NULL,cssElCFun_StatValAgg_ComputeAggsNoUpdt_stub,TA_StatValAgg_ComputeAggsNoUpdt_MethArgs},
  {&TA_bool,NULL,"AggFromCopy"," from list is the copy_vals of another stat, goes to copy_vals in owner stat","","",
    0,1,-1,0,NULL,cssElCFun_StatValAgg_AggFromCopy_stub,TA_StatValAgg_AggFromCopy_MethArgs},
  NULL};
static int AggStat::* TA_AggStat_MbrOff;
static MemberDef_data TA_AggStat_MemberDef[]={
  {&TA_Stat_ptr,NULL,"real_stat"," the 'real' (non-agg) stat","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_AggStat_MbrOff=(int AggStat::*)(&AggStat::real_stat))),0,NULL,0},
  {&TA_Stat_ptr,NULL,"from"," which statisitic to aggregate from (a statistic of a sub process)","","",
    *((ta_memb_ptr*)&(TA_AggStat_MbrOff=(int AggStat::*)(&AggStat::from))),0,NULL,0},
  {&TA_bool,NULL,"type_safe"," true if from ptr should be kept type-safe","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_AggStat_MbrOff=(int AggStat::*)(&AggStat::type_safe))),0,NULL,0},
  NULL};
static MethodArgs_data TA_AggStat_AppendAggName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_AggStat_PrependAggName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_AggStat_SetFrom_MethArgs[]={
  {&TA_Stat_ptr,NULL,"frm",""},
  NULL};
static MethodDef_data TA_AggStat_MethodDef[]={
  {&TA_taString,NULL,"AppendAggName"," append aggregation name to given name","","",
    1,1,-1,0,NULL,cssElCFun_AggStat_AppendAggName_stub,TA_AggStat_AppendAggName_MethArgs},
  {&TA_taString,NULL,"PrependAggName"," prepend aggregation name to given name","","",
    1,1,-1,0,NULL,cssElCFun_AggStat_PrependAggName_stub,TA_AggStat_PrependAggName_MethArgs},
  {&TA_void,NULL,"FindRealStat"," find and set the real_stat","","",
    0,0,-1,0,NULL,cssElCFun_AggStat_FindRealStat_stub,NULL},
  {&TA_void,NULL,"SetFrom"," set the from field (convenience)","","",
    0,1,-1,0,NULL,cssElCFun_AggStat_SetFrom_stub,TA_AggStat_SetFrom_MethArgs},
  NULL};
static MethodArgs_data TA_Stat_Group_FindMakeStat_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_const_char_ptr,NULL,"nm"," ((void *)0)"},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodArgs_data TA_Stat_Group_FindAggregator_MethArgs[]={
  {&TA_Stat_ptr,NULL,"of_stat",""},
  {NULL,"Aggregate::Operator","agg_op"," Aggregate::DEFAULT"},
  NULL};
static MethodArgs_data TA_Stat_Group_FindMonitor_MethArgs[]={
  {&TA_TAPtr,NULL,"of_obj",""},
  {&TA_const_char_ptr,NULL,"of_var"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_Stat_Group_FindMakeMonitor_MethArgs[]={
  {&TA_TAPtr,NULL,"of_obj",""},
  {&TA_const_char_ptr,NULL,"of_var",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodDef_data TA_Stat_Group_MethodDef[]={
  {&TA_Stat_ptr,NULL,"FindMakeStat"," find a stat of the given type and name (if non-null), and if not found, make it","","",
    0,3,1,0,NULL,cssElCFun_Stat_Group_FindMakeStat_stub,TA_Stat_Group_FindMakeStat_MethArgs},
  {&TA_Stat_ptr,NULL,"FindAggregator"," find a statistic that is aggregating a given statistic using specified agg_op (DEFAULT = don't care about agg_op)","","",
    0,2,1,0,NULL,cssElCFun_Stat_Group_FindAggregator_stub,TA_Stat_Group_FindAggregator_MethArgs},
  {&TA_MonitorStat_ptr,NULL,"FindMonitor"," find a statistic that is monitoring given object and variable","","",
    0,2,1,0,NULL,cssElCFun_Stat_Group_FindMonitor_stub,TA_Stat_Group_FindMonitor_MethArgs},
  {&TA_MonitorStat_ptr,NULL,"FindMakeMonitor"," find a statistic that is monitoring given object and variable, and if not found, make one","","",
    0,3,2,0,NULL,cssElCFun_Stat_Group_FindMakeMonitor_stub,TA_Stat_Group_FindMakeMonitor_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Edit_El_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__AddUniqNameOld_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__LinkUniqNameOld_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__FindEl_MethArgs[]={
  {NULL,"::const_LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__AddEl_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Add_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__AddUnique_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__AddUniqNameNew_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Insert_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::LogView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__ReplaceEl_MethArgs[]={
  {NULL,"::LogView_ptr","old_it",""},
  {NULL,"::LogView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::LogView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__RemoveEl_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__DuplicateEl_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Link_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__LinkUnique_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__LinkUniqNameNew_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__InsertLink_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::LogView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__ReplaceLinkEl_MethArgs[]={
  {NULL,"::LogView_ptr","old_it",""},
  {NULL,"::LogView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::LogView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Push_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__MoveEl_MethArgs[]={
  {NULL,"::LogView_ptr","from",""},
  {NULL,"::LogView_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__Transfer_MethArgs[]={
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__MoveBefore_MethArgs[]={
  {NULL,"::LogView_ptr","trg",""},
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_LogView__MoveAfter_MethArgs[]={
  {NULL,"::LogView_ptr","trg",""},
  {NULL,"::LogView_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_LogView__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_LogView__Find_stub,TA_taPtrList_LogView__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_LogView__Remove_stub,TA_taPtrList_LogView__Remove_MethArgs},
  {NULL,"::LogView_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__SafeEl_stub,TA_taPtrList_LogView__SafeEl_MethArgs},
  {NULL,"::LogView_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__FastEl_stub,TA_taPtrList_LogView__FastEl_MethArgs},
  {NULL,"::LogView_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__Edit_El_stub,TA_taPtrList_LogView__Edit_El_MethArgs},
  {NULL,"::LogView_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_LogView__FindName_stub,TA_taPtrList_LogView__FindName_MethArgs},
  {NULL,"::LogView_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_LogView__Pop_stub,NULL},
  {NULL,"::LogView_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_LogView__Peek_stub,NULL},
  {NULL,"::LogView_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__AddUniqNameOld_stub,TA_taPtrList_LogView__AddUniqNameOld_MethArgs},
  {NULL,"::LogView_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__LinkUniqNameOld_stub,TA_taPtrList_LogView__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__FindEl_stub,TA_taPtrList_LogView__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__AddEl_stub,TA_taPtrList_LogView__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__Add_stub,TA_taPtrList_LogView__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__AddUnique_stub,TA_taPtrList_LogView__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__AddUniqNameNew_stub,TA_taPtrList_LogView__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__Insert_stub,TA_taPtrList_LogView__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_LogView__Replace_stub,TA_taPtrList_LogView__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__ReplaceEl_stub,TA_taPtrList_LogView__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__ReplaceName_stub,TA_taPtrList_LogView__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__RemoveEl_stub,TA_taPtrList_LogView__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__DuplicateEl_stub,TA_taPtrList_LogView__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__Link_stub,TA_taPtrList_LogView__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__LinkUnique_stub,TA_taPtrList_LogView__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__LinkUniqNameNew_stub,TA_taPtrList_LogView__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_LogView__InsertLink_stub,TA_taPtrList_LogView__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_LogView__ReplaceLink_stub,TA_taPtrList_LogView__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__ReplaceLinkEl_stub,TA_taPtrList_LogView__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__ReplaceLinkName_stub,TA_taPtrList_LogView__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__Push_stub,TA_taPtrList_LogView__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__MoveEl_stub,TA_taPtrList_LogView__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_LogView__Transfer_stub,TA_taPtrList_LogView__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__MoveBefore_stub,TA_taPtrList_LogView__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_LogView__MoveAfter_stub,TA_taPtrList_LogView__MoveAfter_MethArgs},
  NULL};
static int LogView_PtrList::* TA_LogView_PtrList_MbrOff;
static MemberDef_data TA_LogView_PtrList_MemberDef[]={
  {&TA_TypeDef_ptr,NULL,"el_typ"," actual type set by subclass of owner","","",
    *((ta_memb_ptr*)&(TA_LogView_PtrList_MbrOff=(int LogView_PtrList::*)(&LogView_PtrList::el_typ))),0,NULL,0},
  NULL};
static EnumDef_data TA_taGroup_PDPLog__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__MoveBefore_MethArgs[]={
  {NULL,"::PDPLog_ptr","trg",""},
  {NULL,"::PDPLog_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__MoveAfter_MethArgs[]={
  {NULL,"::PDPLog_ptr","trg",""},
  {NULL,"::PDPLog_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__Edit_El_MethArgs[]={
  {NULL,"::PDPLog_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__AddUniqNameOld_MethArgs[]={
  {NULL,"::PDPLog_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__LinkUniqNameOld_MethArgs[]={
  {NULL,"::PDPLog_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_PDPLog__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_PDPLog__MethodDef[]={
  {NULL,"::PDPLog_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__FirstEl_stub,TA_taGroup_PDPLog__FirstEl_MethArgs},
  {NULL,"::PDPLog_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__NextEl_stub,TA_taGroup_PDPLog__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_PDPLog__MoveBefore_stub,TA_taGroup_PDPLog__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_PDPLog__MoveAfter_stub,TA_taGroup_PDPLog__MoveAfter_MethArgs},
  {NULL,"::PDPLog_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__SafeEl_stub,TA_taGroup_PDPLog__SafeEl_MethArgs},
  {NULL,"::PDPLog_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__FastEl_stub,TA_taGroup_PDPLog__FastEl_MethArgs},
  {NULL,"::PDPLog_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_PDPLog__DefaultEl_stub,NULL},
  {NULL,"::PDPLog_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__Edit_El_stub,TA_taGroup_PDPLog__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__SafeGp_stub,TA_taGroup_PDPLog__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__FastGp_stub,TA_taGroup_PDPLog__FastGp_MethArgs},
  {NULL,"::PDPLog_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__Leaf_stub,TA_taGroup_PDPLog__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__LeafGp_stub,TA_taGroup_PDPLog__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_PDPLog__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__FirstGp_stub,TA_taGroup_PDPLog__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__NextGp_stub,TA_taGroup_PDPLog__NextGp_MethArgs},
  {NULL,"::PDPLog_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_PDPLog__NewEl_stub,TA_taGroup_PDPLog__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_PDPLog__NewGp_stub,TA_taGroup_PDPLog__NewGp_MethArgs},
  {NULL,"::PDPLog_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_PDPLog__FindName_stub,TA_taGroup_PDPLog__FindName_MethArgs},
  {NULL,"::PDPLog_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_PDPLog__FindType_stub,TA_taGroup_PDPLog__FindType_MethArgs},
  {NULL,"::PDPLog_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_PDPLog__Pop_stub,NULL},
  {NULL,"::PDPLog_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_PDPLog__Peek_stub,NULL},
  {NULL,"::PDPLog_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__AddUniqNameOld_stub,TA_taGroup_PDPLog__AddUniqNameOld_MethArgs},
  {NULL,"::PDPLog_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_PDPLog__LinkUniqNameOld_stub,TA_taGroup_PDPLog__LinkUniqNameOld_MethArgs},
  {NULL,"::PDPLog_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_PDPLog__FindLeafName_stub,TA_taGroup_PDPLog__FindLeafName_MethArgs},
  {NULL,"::PDPLog_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_PDPLog__FindLeafType_stub,TA_taGroup_PDPLog__FindLeafType_MethArgs},
  NULL};
static MethodArgs_data TA_PDPLog_MGroup_FindMakeLog_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  {&TA_bool_ref,NULL,"nw_itm"," nw_itm_def_arg"},
  NULL};
static MethodDef_data TA_PDPLog_MGroup_MethodDef[]={
  {&TA_PDPLog_ptr,NULL,"FindMakeLog","","","",
    0,3,2,0,NULL,cssElCFun_PDPLog_MGroup_FindMakeLog_stub,TA_PDPLog_MGroup_FindMakeLog_MethArgs},
  NULL};
static MethodArgs_data TA_NetLog_SetNetwork_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodDef_data TA_NetLog_MethodDef[]={
  {&TA_void,NULL,"SetNetwork"," select given network as the one to update views on","MENU MENU_ON_Object ","",
    0,1,-1,0,NULL,cssElCFun_NetLog_SetNetwork_stub,TA_NetLog_SetNetwork_MethArgs},
  NULL};
static int Counter::* TA_Counter_MbrOff;
static MemberDef_data TA_Counter_MemberDef[]={
  {&TA_taString,NULL,"name"," not an taNBase to hide name","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_Counter_MbrOff=(int Counter::*)(&Counter::name))),0,NULL,0},
  {&TA_int,NULL,"val"," value of the counter","IV_READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_Counter_MbrOff=(int Counter::*)(&Counter::val))),0,NULL,0},
  {&TA_int,NULL,"max"," maximum value of the counter","","",
    *((ta_memb_ptr*)&(TA_Counter_MbrOff=(int Counter::*)(&Counter::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Counter_SetMax_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodDef_data TA_Counter_MethodDef[]={
  {&TA_bool,NULL,"Crit","","","",
    0,0,-1,0,NULL,cssElCFun_Counter_Crit_stub,NULL},
  {&TA_void,NULL,"Inc","","","",
    0,0,-1,0,NULL,cssElCFun_Counter_Inc_stub,NULL},
  {&TA_void,NULL,"SetMax","","","",
    0,1,-1,0,NULL,cssElCFun_Counter_SetMax_stub,TA_Counter_SetMax_MethArgs},
  NULL};
static int StepParams::* TA_StepParams_MbrOff;
static MemberDef_data TA_StepParams_MemberDef[]={
  {&TA_SchedProcess_ptr,NULL,"owner"," use this to find the subtypes","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_StepParams_MbrOff=(int StepParams::*)(&StepParams::owner))),0,NULL,0},
  {&TA_SchedProcess_ptr,NULL,"proc"," process to step","SUBTYPE_SchedProcess ","",
    *((ta_memb_ptr*)&(TA_StepParams_MbrOff=(int StepParams::*)(&StepParams::proc))),0,NULL,0},
  {&TA_int,NULL,"n"," number of steps to take","","",
    *((ta_memb_ptr*)&(TA_StepParams_MbrOff=(int StepParams::*)(&StepParams::n))),0,NULL,0},
  NULL};
static MethodArgs_data TA_StepParams_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodDef_data TA_StepParams_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_StepParams_GetOwner_stub,TA_StepParams_GetOwner_MethArgs},
  NULL};
static int InteractiveEpoch::* TA_InteractiveEpoch_MbrOff;
static MemberDef_data TA_InteractiveEpoch_MemberDef[]={
  {&TA_int,NULL,"last_trial_val"," last trial.val when GetCurEvent was called -- decide wether its time to get a new event or not","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_InteractiveEpoch_MbrOff=(int InteractiveEpoch::*)(&InteractiveEpoch::last_trial_val))),0,NULL,0},
  NULL};
static int ScriptProcess::* TA_ScriptProcess_MbrOff;
static MemberDef_data TA_ScriptProcess_MemberDef[]={
  {&TA_SArg_Array,NULL,"s_args"," string-valued arguments to pass to script","","",
    *((ta_memb_ptr*)&(TA_ScriptProcess_MbrOff=(int ScriptProcess::*)(&ScriptProcess::s_args))),0,NULL,0},
  NULL};
static MethodDef_data TA_ScriptProcess_MethodDef[]={
  {&TA_void,NULL,"Interact"," change to this shell in script (terminal) window to interact, debug etc script","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptProcess_Interact_stub,NULL},
  {&TA_void,NULL,"Compile"," compile script from script file into internal runnable format","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ScriptProcess_Compile_stub,NULL},
  NULL};
static int LoadWtsProc::* TA_LoadWtsProc_MbrOff;
static MemberDef_data TA_LoadWtsProc_MemberDef[]={
  {&TA_taString,NULL,"weights_file"," the file name for the weights file to read in","","",
    *((ta_memb_ptr*)&(TA_LoadWtsProc_MbrOff=(int LoadWtsProc::*)(&LoadWtsProc::weights_file))),0,NULL,0},
  NULL};
static int SyncEpochProc::* TA_SyncEpochProc_MbrOff;
static MemberDef_data TA_SyncEpochProc_MemberDef[]={
  {&TA_Network_ptr,NULL,"second_network"," the network for the second trial process","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_SyncEpochProc_MbrOff=(int SyncEpochProc::*)(&SyncEpochProc::second_network))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"second_proc_type"," type of second process","TYPE_SchedProcess ","",
    *((ta_memb_ptr*)&(TA_SyncEpochProc_MbrOff=(int SyncEpochProc::*)(&SyncEpochProc::second_proc_type))),0,NULL,0},
  {&TA_SchedProcess_ptr,NULL,"second_proc"," second process to call","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_SyncEpochProc_MbrOff=(int SyncEpochProc::*)(&SyncEpochProc::second_proc))),0,NULL,0},
  NULL};
static int GridSearchBatch::* TA_GridSearchBatch_MbrOff;
static MemberDef_data TA_GridSearchBatch_MemberDef[]={
  {&TA_float,NULL,"start_val"," start value of parameter being searched","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_GridSearchBatch_MbrOff=(int GridSearchBatch::*)(&GridSearchBatch::start_val))),0,NULL,0},
  {&TA_float,NULL,"inc_val"," increment of parameter being searched","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_GridSearchBatch_MbrOff=(int GridSearchBatch::*)(&GridSearchBatch::inc_val))),0,NULL,0},
  {&TA_float,NULL,"cur_val"," current value of parameter based on batch value","CONTROL_PANEL IV_READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_GridSearchBatch_MbrOff=(int GridSearchBatch::*)(&GridSearchBatch::cur_val))),0,NULL,0},
  {&TA_taString,NULL,"param_path"," path to the parameter (starting at the project)","","",
    *((ta_memb_ptr*)&(TA_GridSearchBatch_MbrOff=(int GridSearchBatch::*)(&GridSearchBatch::param_path))),0,NULL,0},
  NULL};
static MethodDef_data TA_GridSearchBatch_MethodDef[]={
  {&TA_void,NULL,"Compute_CurVal"," compute the current value from batch counter","","",
    0,0,-1,0,NULL,cssElCFun_GridSearchBatch_Compute_CurVal_stub,NULL},
  {&TA_void,NULL,"SetParamVal"," set parameter value to be current value","","",
    0,0,-1,0,NULL,cssElCFun_GridSearchBatch_SetParamVal_stub,NULL},
  NULL};
static int SameSeedBatch::* TA_SameSeedBatch_MbrOff;
static MemberDef_data TA_SameSeedBatch_MemberDef[]={
  {&TA_taBase_List,NULL,"rnd_seeds"," the random seeds","","",
    *((ta_memb_ptr*)&(TA_SameSeedBatch_MbrOff=(int SameSeedBatch::*)(&SameSeedBatch::rnd_seeds))),0,NULL,0},
  {&TA_int,NULL,"in_goto_val"," currently inside a GoTo call (with this val): affects seed usage","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SameSeedBatch_MbrOff=(int SameSeedBatch::*)(&SameSeedBatch::in_goto_val))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SameSeedBatch_InitSeeds_MethArgs[]={
  {&TA_int,NULL,"n_seeds",""},
  NULL};
static MethodDef_data TA_SameSeedBatch_MethodDef[]={
  {&TA_void,NULL,"InitSeeds"," initialize the seeds for subsequent use","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_SameSeedBatch_InitSeeds_stub,TA_SameSeedBatch_InitSeeds_MethArgs},
  {&TA_void,NULL,"UseCurrentSeed"," use the current seed based on batch counter value","","",
    0,0,-1,0,NULL,cssElCFun_SameSeedBatch_UseCurrentSeed_stub,NULL},
  NULL};
static int ForkProcess::* TA_ForkProcess_MbrOff;
static MemberDef_data TA_ForkProcess_MemberDef[]={
  {&TA_Network_ptr,NULL,"second_network"," the network for the second process","","",
    *((ta_memb_ptr*)&(TA_ForkProcess_MbrOff=(int ForkProcess::*)(&ForkProcess::second_network))),0,NULL,0},
  {&TA_Environment_ptr,NULL,"second_environment"," the environment for the second process","","",
    *((ta_memb_ptr*)&(TA_ForkProcess_MbrOff=(int ForkProcess::*)(&ForkProcess::second_environment))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"second_proc_type"," type of second process","TYPE_SchedProcess NULL_OK ","",
    *((ta_memb_ptr*)&(TA_ForkProcess_MbrOff=(int ForkProcess::*)(&ForkProcess::second_proc_type))),0,NULL,0},
  {&TA_SchedProcess_ptr,NULL,"second_proc"," second process to call","","",
    *((ta_memb_ptr*)&(TA_ForkProcess_MbrOff=(int ForkProcess::*)(&ForkProcess::second_proc))),0,NULL,0},
  NULL};
static EnumDef_data TA_BridgeProcess_BridgeDirection[]={
  {"ONE_TO_TWO"," first network (network) copies to second_network","",0},
  {"TWO_TO_ONE"," second_network copies to first one (network)","",1},
  NULL};
static int BridgeProcess::* TA_BridgeProcess_MbrOff;
static MemberDef_data TA_BridgeProcess_MemberDef[]={
  {&TA_Network_ptr,NULL,"second_network"," the other network to bridge to","","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::second_network))),0,NULL,0},
  {&TA_Layer_ptr,NULL,"src_layer"," the actual source layer","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::src_layer))),0,NULL,0},
  {&TA_Layer_ptr,NULL,"trg_layer"," the actual target layer","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::trg_layer))),0,NULL,0},
  {NULL,"::BridgeDirection","direction"," direction to copy in","","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::direction))),0,NULL,0},
  {&TA_taString,NULL,"src_layer_nm"," name of the source layer","","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::src_layer_nm))),0,NULL,0},
  {&TA_taString,NULL,"trg_layer_nm"," name of the target layer","","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::trg_layer_nm))),0,NULL,0},
  {&TA_taString,NULL,"src_variable"," the source variable (member) to copy","","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::src_variable))),0,NULL,0},
  {&TA_taString,NULL,"trg_variable"," the target variable (member) to copy","","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::trg_variable))),0,NULL,0},
  {NULL,"Unit::ExtType","trg_ext_flag"," flag to apply to the target units","","",
    *((ta_memb_ptr*)&(TA_BridgeProcess_MbrOff=(int BridgeProcess::*)(&BridgeProcess::trg_ext_flag))),0,NULL,0},
  NULL};
static MethodDef_data TA_BridgeProcess_MethodDef[]={
  {&TA_bool,NULL,"SetLayerPtrs"," set the layer pointers from names, direction","","",
    0,0,-1,0,NULL,cssElCFun_BridgeProcess_SetLayerPtrs_stub,NULL},
  NULL};
static int MultiEnvProcess::* TA_MultiEnvProcess_MbrOff;
static MemberDef_data TA_MultiEnvProcess_MemberDef[]={
  {&TA_Environment_List,NULL,"environments"," list of environments to process","LINK_GROUP ","",
    *((ta_memb_ptr*)&(TA_MultiEnvProcess_MbrOff=(int MultiEnvProcess::*)(&MultiEnvProcess::environments))),0,NULL,0},
  {&TA_bool,NULL,"use_subctr_max"," determines whether subctr_max values are actually used","","",
    *((ta_memb_ptr*)&(TA_MultiEnvProcess_MbrOff=(int MultiEnvProcess::*)(&MultiEnvProcess::use_subctr_max))),0,NULL,0},
  {&TA_int_Array,NULL,"subctr_max"," sets the counter max value for the subprocess under this one for each environment (e.g., if subproc is nepochproc, sets numb of epochs per enviro)","","",
    *((ta_memb_ptr*)&(TA_MultiEnvProcess_MbrOff=(int MultiEnvProcess::*)(&MultiEnvProcess::subctr_max))),0,NULL,0},
  {&TA_Counter,NULL,"env"," current environment number","","",
    *((ta_memb_ptr*)&(TA_MultiEnvProcess_MbrOff=(int MultiEnvProcess::*)(&MultiEnvProcess::env))),0,NULL,0},
  NULL};
static MethodDef_data TA_MultiEnvProcess_MethodDef[]={
  {&TA_void,NULL,"SetCurEnvironment"," set up environment from the counter","","",
    0,0,-1,0,NULL,cssElCFun_MultiEnvProcess_SetCurEnvironment_stub,NULL},
  NULL};
static int PatternFlagProcess::* TA_PatternFlagProcess_MbrOff;
static MemberDef_data TA_PatternFlagProcess_MemberDef[]={
  {&TA_int,NULL,"pattern_no"," index of pattern to update","","",
    *((ta_memb_ptr*)&(TA_PatternFlagProcess_MbrOff=(int PatternFlagProcess::*)(&PatternFlagProcess::pattern_no))),0,NULL,0},
  {NULL,"PatternSpec::PatFlags","flag"," flag to be set (or unset if invert)","","",
    *((ta_memb_ptr*)&(TA_PatternFlagProcess_MbrOff=(int PatternFlagProcess::*)(&PatternFlagProcess::flag))),0,NULL,0},
  {&TA_bool,NULL,"invert"," unset the flag instead of setting it","","",
    *((ta_memb_ptr*)&(TA_PatternFlagProcess_MbrOff=(int PatternFlagProcess::*)(&PatternFlagProcess::invert))),0,NULL,0},
  {&TA_Counter,NULL,"val_idx"," index of current pattern value to be flagged","","",
    *((ta_memb_ptr*)&(TA_PatternFlagProcess_MbrOff=(int PatternFlagProcess::*)(&PatternFlagProcess::val_idx))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PatternFlagProcess_SetCurFlags_MethArgs[]={
  {&TA_int_ptr,NULL,"old_flag",""},
  NULL};
static MethodArgs_data TA_PatternFlagProcess_ClearCurFlags_MethArgs[]={
  {&TA_int_ptr,NULL,"old_flag",""},
  NULL};
static MethodDef_data TA_PatternFlagProcess_MethodDef[]={
  {&TA_void,NULL,"SetCurFlags"," set up flags for current counter (sets old_flag if provided to prev flag val)","","",
    0,1,-1,0,NULL,cssElCFun_PatternFlagProcess_SetCurFlags_stub,TA_PatternFlagProcess_SetCurFlags_MethArgs},
  {&TA_void,NULL,"ClearCurFlags"," clear flags for current counter (resetting to old_flag if provided)","","",
    0,1,-1,0,NULL,cssElCFun_PatternFlagProcess_ClearCurFlags_stub,TA_PatternFlagProcess_ClearCurFlags_MethArgs},
  NULL};
static int ActThreshRTStat::* TA_ActThreshRTStat_MbrOff;
static MemberDef_data TA_ActThreshRTStat_MemberDef[]={
  {&TA_SettleProcess_ptr,NULL,"settle"," settle process to record","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ActThreshRTStat_MbrOff=(int ActThreshRTStat::*)(&ActThreshRTStat::settle))),0,NULL,0},
  {&TA_float,NULL,"act_thresh"," threshold activation level -- rt_cycles are updated until layer max_act >= thresh (also auto sets max_act.stopcrit.val)","","",
    *((ta_memb_ptr*)&(TA_ActThreshRTStat_MbrOff=(int ActThreshRTStat::*)(&ActThreshRTStat::act_thresh))),0,NULL,0},
  {&TA_StatVal,NULL,"max_act"," maximum activation of units in layer -- computed continuously, if stopcrit set here then process will actually stop at rt threshold","","",
    *((ta_memb_ptr*)&(TA_ActThreshRTStat_MbrOff=(int ActThreshRTStat::*)(&ActThreshRTStat::max_act))),0,NULL,0},
  {&TA_StatVal,NULL,"rt_cycles"," number of cycles of settling prior to max_act.val >= act_tresh","","",
    *((ta_memb_ptr*)&(TA_ActThreshRTStat_MbrOff=(int ActThreshRTStat::*)(&ActThreshRTStat::rt_cycles))),0,NULL,0},
  {&TA_bool,NULL,"crossed_thresh"," true if already crossed threshold","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ActThreshRTStat_MbrOff=(int ActThreshRTStat::*)(&ActThreshRTStat::crossed_thresh))),0,NULL,0},
  NULL};
static MethodDef_data TA_ActThreshRTStat_MethodDef[]={
  {&TA_void,NULL,"GetSettleProc","","","",
    0,0,-1,0,NULL,cssElCFun_ActThreshRTStat_GetSettleProc_stub,NULL},
  NULL};
static int ProjectionStat::* TA_ProjectionStat_MbrOff;
static MemberDef_data TA_ProjectionStat_MemberDef[]={
  {&TA_Stat_ptr,NULL,"stat"," stat to get values to project","","",
    *((ta_memb_ptr*)&(TA_ProjectionStat_MbrOff=(int ProjectionStat::*)(&ProjectionStat::stat))),0,NULL,0},
  {&TA_float_RArray,NULL,"prjn_vector"," vector of values to project along","","",
    *((ta_memb_ptr*)&(TA_ProjectionStat_MbrOff=(int ProjectionStat::*)(&ProjectionStat::prjn_vector))),0,NULL,0},
  {NULL,"float_RArray::DistMetric","dist_metric"," distance metric for projection (INNER_PROD = standard metric for projections)","","",
    *((ta_memb_ptr*)&(TA_ProjectionStat_MbrOff=(int ProjectionStat::*)(&ProjectionStat::dist_metric))),0,NULL,0},
  {&TA_float,NULL,"dist_tol"," tolerance value for distance metric","CONDEDIT_ON_dist_metric:SUM_SQUARES,EUCLIDIAN,HAMMING ","",
    *((ta_memb_ptr*)&(TA_ProjectionStat_MbrOff=(int ProjectionStat::*)(&ProjectionStat::dist_tol))),0,NULL,0},
  {&TA_bool,NULL,"dist_norm"," whether to normalize distances (distance, inner prod)","CONDEDIT_OFF_dist_metric:COVAR,CORREL,CROSS_ENTROPY ","",
    *((ta_memb_ptr*)&(TA_ProjectionStat_MbrOff=(int ProjectionStat::*)(&ProjectionStat::dist_norm))),0,NULL,0},
  {&TA_StatVal,NULL,"prjn"," projection value","","",
    *((ta_memb_ptr*)&(TA_ProjectionStat_MbrOff=(int ProjectionStat::*)(&ProjectionStat::prjn))),0,NULL,0},
  {&TA_float_RArray,NULL,"svals"," stat values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ProjectionStat_MbrOff=(int ProjectionStat::*)(&ProjectionStat::svals))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ProjectionStat_GetStatVals_MethArgs[]={
  {&TA_Stat_ptr,NULL,"st",""},
  {&TA_float_RArray_ref,NULL,"sv",""},
  NULL};
static MethodArgs_data TA_ProjectionStat_VecFmPCA_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  {&TA_int,NULL,"pat_no",""},
  {&TA_int,NULL,"pca_component",""},
  NULL};
static MethodArgs_data TA_ProjectionStat_VecFmEvent_MethArgs[]={
  {&TA_Event_ptr,NULL,"event",""},
  {&TA_int,NULL,"pat_no",""},
  NULL};
static MethodDef_data TA_ProjectionStat_MethodDef[]={
  {&TA_void,NULL,"GetStatVals"," get stat vals into an array","","",
    0,2,-1,0,NULL,cssElCFun_ProjectionStat_GetStatVals_stub,TA_ProjectionStat_GetStatVals_MethArgs},
  {&TA_void,NULL,"VecFmPCA"," get projection vector from principal components analysis on pattern number pat_no, using specified component","BUTTON ","",
    0,3,-1,0,NULL,cssElCFun_ProjectionStat_VecFmPCA_stub,TA_ProjectionStat_VecFmPCA_MethArgs},
  {&TA_void,NULL,"VecFmEvent"," get projection vector from given event","BUTTON ","",
    0,2,-1,0,NULL,cssElCFun_ProjectionStat_VecFmEvent_stub,TA_ProjectionStat_VecFmEvent_MethArgs},
  NULL};
static int ComputeStat::* TA_ComputeStat_MbrOff;
static MemberDef_data TA_ComputeStat_MemberDef[]={
  {&TA_Stat_ptr,NULL,"stat_1"," first comparison stat","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::stat_1))),0,NULL,0},
  {&TA_Stat_ptr,NULL,"stat_2"," second comparison stat (optional)","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::stat_2))),0,NULL,0},
  {&TA_StatVal,NULL,"cpt"," aggregated computed value (if not COPY)","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::cpt))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_1"," step 1 of pre-processing to apply to each stat before computing","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::pre_proc_1))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_2"," step 2 of pre-processing to apply to each stat before computing","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::pre_proc_2))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_3"," step 3 of pre-processing to apply to each stat before computing","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::pre_proc_3))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"compute_1"," step 1 of computation: stat1 is val stat2 is arg","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::compute_1))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"compute_2"," step 2 of computation: stat1 is val stat2 is arg","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::compute_2))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"compute_3"," step 3 of computation: stat1 is val stat2 is arg","","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::compute_3))),0,NULL,0},
  {&TA_float_RArray,NULL,"svals_1"," stat_1 values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::svals_1))),0,NULL,0},
  {&TA_float_RArray,NULL,"svals_2"," stat_2 values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_ComputeStat_MbrOff=(int ComputeStat::*)(&ComputeStat::svals_2))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ComputeStat_GetStatVals_MethArgs[]={
  {&TA_Stat_ptr,NULL,"st",""},
  {&TA_float_RArray_ref,NULL,"sv",""},
  NULL};
static MethodDef_data TA_ComputeStat_MethodDef[]={
  {&TA_void,NULL,"GetStatVals"," get stat vals into an array","","",
    0,2,-1,0,NULL,cssElCFun_ComputeStat_GetStatVals_stub,TA_ComputeStat_GetStatVals_MethArgs},
  NULL};
static EnumDef_data TA_CopyToEnvStat_AccumScope[]={
  {"SUPER"," accumulate over the sched process just above the one in hierarchy (super proc) that owns this stat","",0},
  {"OWNER"," accumulate over the sched process that owns this stat","",1},
  {"TRAIN"," accumulate over the training process (train must be ABOVE this stat in hierarchy)","",2},
  {"EPOCH"," accumulate over the epoch process in this hierarchy (epoch must be ABOVE this stat in hierarchy)","",3},
  {"SEQUENCE"," accumulate over the sequence process in this hierarcy (sequence must be ABOVE this stat in hierarchy)","",4},
  {"SETTLE"," accumulate over the settle process in this hierarchy (settle must be ABOVE this stat in hierarchy)","",5},
  NULL};
static int CopyToEnvStat::* TA_CopyToEnvStat_MbrOff;
static MemberDef_data TA_CopyToEnvStat_MemberDef[]={
  {&TA_Stat_ptr,NULL,"stat"," stat to get copy vals from","","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::stat))),0,NULL,0},
  {&TA_Environment_ptr,NULL,"data_env"," environment to store data in","","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::data_env))),0,NULL,0},
  {NULL,"::AccumScope","accum_scope"," over what scope of processing to accumulate data?","","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::accum_scope))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_1"," step 1 of pre-processing to apply before storage","","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::pre_proc_1))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_2"," step 2 of pre-processing to apply before storage","","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::pre_proc_2))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_3"," step 3 of pre-processing to apply before storage","","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::pre_proc_3))),0,NULL,0},
  {&TA_float_RArray,NULL,"svals"," stat values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::svals))),0,NULL,0},
  {&TA_int,NULL,"evt_idx"," current event index","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::evt_idx))),0,NULL,0},
  {&TA_int_Array,NULL,"last_ctr_vals"," last accumulation counter values for all procs up to accum proc","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_CopyToEnvStat_MbrOff=(int CopyToEnvStat::*)(&CopyToEnvStat::last_ctr_vals))),0,NULL,0},
  NULL};
static MethodArgs_data TA_CopyToEnvStat_GetStatVals_MethArgs[]={
  {&TA_Stat_ptr,NULL,"st",""},
  {&TA_float_RArray_ref,NULL,"sv",""},
  NULL};
static MethodDef_data TA_CopyToEnvStat_MethodDef[]={
  {&TA_void,NULL,"InitEnv"," initalize environment to hold data","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_CopyToEnvStat_InitEnv_stub,NULL},
  {&TA_void,NULL,"GetStatVals"," get stat vals into an array","","",
    0,2,-1,0,NULL,cssElCFun_CopyToEnvStat_GetStatVals_stub,TA_CopyToEnvStat_GetStatVals_MethArgs},
  {&TA_SchedProcess_ptr,NULL,"GetAccumProc"," get the accumulator-scope process","","",
    0,0,-1,0,NULL,cssElCFun_CopyToEnvStat_GetAccumProc_stub,NULL},
  {&TA_bool,NULL,"InitEvtIdx"," determine if event index needs to be initialized","","",
    0,0,-1,0,NULL,cssElCFun_CopyToEnvStat_InitEvtIdx_stub,NULL},
  NULL};
static int MaxActTrgStat::* TA_MaxActTrgStat_MbrOff;
static MemberDef_data TA_MaxActTrgStat_MemberDef[]={
  {&TA_StatVal,NULL,"mxat"," max activation = target 0-1 err value","","",
    *((ta_memb_ptr*)&(TA_MaxActTrgStat_MbrOff=(int MaxActTrgStat::*)(&MaxActTrgStat::mxat))),0,NULL,0},
  NULL};
static EnumDef_data TA_UnitActRFStat_NormMode[]={
  {"NORM_UNIT"," normalize each unit separately","",0},
  {"NORM_LAYER"," normalize over entire layer (divide by layer max of avg_norms)","",1},
  {"NORM_GROUP"," normalize by unit groups (divide by group max of avg_norms)","",2},
  NULL};
static int UnitActRFStat::* TA_UnitActRFStat_MbrOff;
static MemberDef_data TA_UnitActRFStat_MemberDef[]={
  {&TA_Layer_MGroup,NULL,"rf_layers"," layers to compute receptive field over: (sending-layers -- receiving layer is in layer member)","LINK_GROUP ","",
    *((ta_memb_ptr*)&(TA_UnitActRFStat_MbrOff=(int UnitActRFStat::*)(&UnitActRFStat::rf_layers))),0,NULL,0},
  {&TA_Environment_ptr,NULL,"data_env"," environment to store data into","","",
    *((ta_memb_ptr*)&(TA_UnitActRFStat_MbrOff=(int UnitActRFStat::*)(&UnitActRFStat::data_env))),0,NULL,0},
  {NULL,"::NormMode","norm_mode"," how to normalize the values","","",
    *((ta_memb_ptr*)&(TA_UnitActRFStat_MbrOff=(int UnitActRFStat::*)(&UnitActRFStat::norm_mode))),0,NULL,0},
  {&TA_float_RArray,NULL,"avg_norms"," average normalizers (sum of unit activity vals)","","",
    *((ta_memb_ptr*)&(TA_UnitActRFStat_MbrOff=(int UnitActRFStat::*)(&UnitActRFStat::avg_norms))),0,NULL,0},
  NULL};
static MethodDef_data TA_UnitActRFStat_MethodDef[]={
  {&TA_void,NULL,"InitRFVals"," initalize rf aggregation values","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_UnitActRFStat_InitRFVals_stub,NULL},
  {&TA_bool,NULL,"CheckRFLayersInNet"," make sure rf layers are all in network.","","",
    0,0,-1,0,NULL,cssElCFun_UnitActRFStat_CheckRFLayersInNet_stub,NULL},
  NULL};
static int UnitActRFStatResetProc::* TA_UnitActRFStatResetProc_MbrOff;
static MemberDef_data TA_UnitActRFStatResetProc_MemberDef[]={
  {&TA_UnitActRFStat_ptr,NULL,"unit_act_rf_stat"," pointer to the stat to reset time for","","",
    *((ta_memb_ptr*)&(TA_UnitActRFStatResetProc_MbrOff=(int UnitActRFStatResetProc::*)(&UnitActRFStatResetProc::unit_act_rf_stat))),0,NULL,0},
  NULL};
static int UnitEventRFStat::* TA_UnitEventRFStat_MbrOff;
static MemberDef_data TA_UnitEventRFStat_MemberDef[]={
  {&TA_EpochProcess_ptr,NULL,"epoch_proc"," epoch process for event count","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_UnitEventRFStat_MbrOff=(int UnitEventRFStat::*)(&UnitEventRFStat::epoch_proc))),0,NULL,0},
  {&TA_Environment_ptr,NULL,"data_env"," environment to store data into","","",
    *((ta_memb_ptr*)&(TA_UnitEventRFStat_MbrOff=(int UnitEventRFStat::*)(&UnitEventRFStat::data_env))),0,NULL,0},
  NULL};
static MethodDef_data TA_UnitEventRFStat_MethodDef[]={
  {&TA_void,NULL,"GetEpochProc","","","",
    0,0,-1,0,NULL,cssElCFun_UnitEventRFStat_GetEpochProc_stub,NULL},
  {&TA_void,NULL,"InitRFVals"," initalize rf aggregation values","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_UnitEventRFStat_InitRFVals_stub,NULL},
  NULL};
static int UniquePatStat::* TA_UniquePatStat_MbrOff;
static MemberDef_data TA_UniquePatStat_MemberDef[]={
  {&TA_Stat_ptr,NULL,"pat_stat"," stat that is the source of patterns","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::pat_stat))),0,NULL,0},
  {&TA_Environment_ptr,NULL,"data_env"," environment to store patterns into during computation","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::data_env))),0,NULL,0},
  {NULL,"float_RArray::DistMetric","cmp_type"," comparison type to perform to determine uniqueness","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::cmp_type))),0,NULL,0},
  {&TA_StatVal,NULL,"unq"," number of unique patterns","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::unq))),0,NULL,0},
  {&TA_float,NULL,"dist_tol"," tolerance value for distance functions","CONDEDIT_ON_cmp_type:SUM_SQUARES,EUCLIDIAN,HAMMING ","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::dist_tol))),0,NULL,0},
  {&TA_bool,NULL,"norm"," whether to normalize (distance, inner prod)","CONDEDIT_OFF_cmp_type:COVAR,CORREL,CROSS_ENTROPY ","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::norm))),0,NULL,0},
  {&TA_float,NULL,"uniq_tol"," overall distance tolerance to determine if unique or not","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::uniq_tol))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_1"," step 1 of pre-processing to apply before comparision","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::pre_proc_1))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_2"," step 2 of pre-processing to apply before comparision","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::pre_proc_2))),0,NULL,0},
  {&TA_SimpleMathSpec,NULL,"pre_proc_3"," step 3 of pre-processing to apply before comparision","","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::pre_proc_3))),0,NULL,0},
  {&TA_float_RArray,NULL,"svals"," stat values","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_UniquePatStat_MbrOff=(int UniquePatStat::*)(&UniquePatStat::svals))),0,NULL,0},
  NULL};
static MethodArgs_data TA_UniquePatStat_GetStatVals_MethArgs[]={
  {&TA_Stat_ptr,NULL,"st",""},
  {&TA_float_RArray_ref,NULL,"sv",""},
  NULL};
static MethodDef_data TA_UniquePatStat_MethodDef[]={
  {&TA_void,NULL,"GetStatVals"," get stat vals into an array","","",
    0,2,-1,0,NULL,cssElCFun_UniquePatStat_GetStatVals_stub,TA_UniquePatStat_GetStatVals_MethArgs},
  NULL};
static int TimeCounterStat::* TA_TimeCounterStat_MbrOff;
static MemberDef_data TA_TimeCounterStat_MemberDef[]={
  {&TA_StatVal,NULL,"time","","","",
    *((ta_memb_ptr*)&(TA_TimeCounterStat_MbrOff=(int TimeCounterStat::*)(&TimeCounterStat::time))),0,NULL,0},
  NULL};
static MethodDef_data TA_TimeCounterStat_MethodDef[]={
  {&TA_void,NULL,"InitTime"," reset time to zero","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_TimeCounterStat_InitTime_stub,NULL},
  NULL};
static int TimeCounterStatResetProc::* TA_TimeCounterStatResetProc_MbrOff;
static MemberDef_data TA_TimeCounterStatResetProc_MemberDef[]={
  {&TA_TimeCounterStat_ptr,NULL,"time_ctr_stat"," pointer to the stat to reset time for","","",
    *((ta_memb_ptr*)&(TA_TimeCounterStatResetProc_MbrOff=(int TimeCounterStatResetProc::*)(&TimeCounterStatResetProc::time_ctr_stat))),0,NULL,0},
  NULL};
static EnumDef_data TA_DispDataEnvProc_DispType[]={
  {"RAW_DATA_GRID"," directly plot the data to a grid log","",0},
  {"DIST_MATRIX"," distance matrix in grid log","",1},
  {"CLUSTER_PLOT"," cluster plot of distance matrix in graph log","",2},
  {"CORREL_MATRIX"," correlation matrix for values across patterns displayed in grid log","",3},
  {"PCA_EIGEN_GRID"," principal components analysis plot of eigen vectors in grid log","",4},
  {"PCA_PRJN_PLOT"," principal components analysis projection plot in graph log","",5},
  {"MDS_PRJN_PLOT"," multidimensional scaling on distance matrix in graph log","",6},
  NULL};
static int DispDataEnvProc::* TA_DispDataEnvProc_MbrOff;
static MemberDef_data TA_DispDataEnvProc_MemberDef[]={
  {&TA_Environment_ptr,NULL,"data_env"," environment containing data to be plotted (data is assumed to be in pattern 0)","","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::data_env))),0,NULL,0},
  {&TA_int,NULL,"pat_no"," pattern number in the environment to display","","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::pat_no))),0,NULL,0},
  {NULL,"::DispType","disp_type"," what type of data display to make","","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::disp_type))),0,NULL,0},
  {&TA_PDPLog_ptr,NULL,"disp_log"," log view to contain the display","","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::disp_log))),0,NULL,0},
  {NULL,"float_RArray::DistMetric","dist_metric"," distance metric (where appropriate)","","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::dist_metric))),0,NULL,0},
  {&TA_bool,NULL,"dist_norm"," normalize distances?","CONDEDIT_OFF_dist_metric:COVAR,CORREL,CROSS_ENTROPY ","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::dist_norm))),0,NULL,0},
  {&TA_float,NULL,"dist_tol"," tolerance for computing distances (below tol = 0 error)","CONDEDIT_ON_dist_metric:SUM_SQUARES,EUCLIDIAN,HAMMING ","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::dist_tol))),0,NULL,0},
  {&TA_int,NULL,"x_axis_component"," for PCA & MDS Prjn Plots -- use this component for x axis","","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::x_axis_component))),0,NULL,0},
  {&TA_int,NULL,"y_axis_component"," for PCA & MDS Prjn Plots -- use this component for y axis","","",
    *((ta_memb_ptr*)&(TA_DispDataEnvProc_MbrOff=(int DispDataEnvProc::*)(&DispDataEnvProc::y_axis_component))),0,NULL,0},
  NULL};
static MethodDef_data TA_DispDataEnvProc_MethodDef[]={
  {&TA_bool,NULL,"DispIsGridLog"," make sure disp_log is a grid log -- if not or NULL, make one..","","",
    0,0,-1,0,NULL,cssElCFun_DispDataEnvProc_DispIsGridLog_stub,NULL},
  {&TA_bool,NULL,"DispIsGraphLog"," make sure disp_log is a graph log -- if not or NULL, make one..","","",
    0,0,-1,0,NULL,cssElCFun_DispDataEnvProc_DispIsGraphLog_stub,NULL},
  NULL};
static int DispNetWeightsProc::* TA_DispNetWeightsProc_MbrOff;
static MemberDef_data TA_DispNetWeightsProc_MemberDef[]={
  {&TA_taString,NULL,"recv_layer_nm"," name of the receiving layer (plot weights into these units)","","",
    *((ta_memb_ptr*)&(TA_DispNetWeightsProc_MbrOff=(int DispNetWeightsProc::*)(&DispNetWeightsProc::recv_layer_nm))),0,NULL,0},
  {&TA_taString,NULL,"send_layer_nm"," name of the sending layer (plot weights from these units into recv)","","",
    *((ta_memb_ptr*)&(TA_DispNetWeightsProc_MbrOff=(int DispNetWeightsProc::*)(&DispNetWeightsProc::send_layer_nm))),0,NULL,0},
  {&TA_GridLog_ptr,NULL,"grid_log"," grid log to display weights in","","",
    *((ta_memb_ptr*)&(TA_DispNetWeightsProc_MbrOff=(int DispNetWeightsProc::*)(&DispNetWeightsProc::grid_log))),0,NULL,0},
  {&TA_Layer_ptr,NULL,"recv_layer"," the actual recv layer","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DispNetWeightsProc_MbrOff=(int DispNetWeightsProc::*)(&DispNetWeightsProc::recv_layer))),0,NULL,0},
  {&TA_Layer_ptr,NULL,"send_layer"," the actual send layer","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DispNetWeightsProc_MbrOff=(int DispNetWeightsProc::*)(&DispNetWeightsProc::send_layer))),0,NULL,0},
  NULL};
static MethodDef_data TA_DispNetWeightsProc_MethodDef[]={
  {&TA_bool,NULL,"SetPtrs"," set the layer pointers from names and the grid_log pointer","","",
    0,0,-1,0,NULL,cssElCFun_DispNetWeightsProc_SetPtrs_stub,NULL},
  NULL};
static int ClearLogProc::* TA_ClearLogProc_MbrOff;
static MemberDef_data TA_ClearLogProc_MemberDef[]={
  {&TA_PDPLog_ptr,NULL,"log_to_clear"," log to clear","","",
    *((ta_memb_ptr*)&(TA_ClearLogProc_MbrOff=(int ClearLogProc::*)(&ClearLogProc::log_to_clear))),0,NULL,0},
  NULL};
static EnumDef_data TA_taGroup_TypeDefault__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__MoveBefore_MethArgs[]={
  {NULL,"::TypeDefault_ptr","trg",""},
  {NULL,"::TypeDefault_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__MoveAfter_MethArgs[]={
  {NULL,"::TypeDefault_ptr","trg",""},
  {NULL,"::TypeDefault_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__Edit_El_MethArgs[]={
  {NULL,"::TypeDefault_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__AddUniqNameOld_MethArgs[]={
  {NULL,"::TypeDefault_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__LinkUniqNameOld_MethArgs[]={
  {NULL,"::TypeDefault_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_TypeDefault__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_TypeDefault__MethodDef[]={
  {NULL,"::TypeDefault_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__FirstEl_stub,TA_taGroup_TypeDefault__FirstEl_MethArgs},
  {NULL,"::TypeDefault_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__NextEl_stub,TA_taGroup_TypeDefault__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_TypeDefault__MoveBefore_stub,TA_taGroup_TypeDefault__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_TypeDefault__MoveAfter_stub,TA_taGroup_TypeDefault__MoveAfter_MethArgs},
  {NULL,"::TypeDefault_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__SafeEl_stub,TA_taGroup_TypeDefault__SafeEl_MethArgs},
  {NULL,"::TypeDefault_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__FastEl_stub,TA_taGroup_TypeDefault__FastEl_MethArgs},
  {NULL,"::TypeDefault_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_TypeDefault__DefaultEl_stub,NULL},
  {NULL,"::TypeDefault_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__Edit_El_stub,TA_taGroup_TypeDefault__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__SafeGp_stub,TA_taGroup_TypeDefault__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__FastGp_stub,TA_taGroup_TypeDefault__FastGp_MethArgs},
  {NULL,"::TypeDefault_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__Leaf_stub,TA_taGroup_TypeDefault__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__LeafGp_stub,TA_taGroup_TypeDefault__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_TypeDefault__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__FirstGp_stub,TA_taGroup_TypeDefault__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__NextGp_stub,TA_taGroup_TypeDefault__NextGp_MethArgs},
  {NULL,"::TypeDefault_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_TypeDefault__NewEl_stub,TA_taGroup_TypeDefault__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_TypeDefault__NewGp_stub,TA_taGroup_TypeDefault__NewGp_MethArgs},
  {NULL,"::TypeDefault_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_TypeDefault__FindName_stub,TA_taGroup_TypeDefault__FindName_MethArgs},
  {NULL,"::TypeDefault_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_TypeDefault__FindType_stub,TA_taGroup_TypeDefault__FindType_MethArgs},
  {NULL,"::TypeDefault_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_TypeDefault__Pop_stub,NULL},
  {NULL,"::TypeDefault_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_TypeDefault__Peek_stub,NULL},
  {NULL,"::TypeDefault_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__AddUniqNameOld_stub,TA_taGroup_TypeDefault__AddUniqNameOld_MethArgs},
  {NULL,"::TypeDefault_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_TypeDefault__LinkUniqNameOld_stub,TA_taGroup_TypeDefault__LinkUniqNameOld_MethArgs},
  {NULL,"::TypeDefault_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_TypeDefault__FindLeafName_stub,TA_taGroup_TypeDefault__FindLeafName_MethArgs},
  {NULL,"::TypeDefault_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_TypeDefault__FindLeafType_stub,TA_taGroup_TypeDefault__FindLeafType_MethArgs},
  NULL};
static EnumDef_data TA_taGroup_SelectEdit__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__MoveBefore_MethArgs[]={
  {NULL,"::SelectEdit_ptr","trg",""},
  {NULL,"::SelectEdit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__MoveAfter_MethArgs[]={
  {NULL,"::SelectEdit_ptr","trg",""},
  {NULL,"::SelectEdit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__Edit_El_MethArgs[]={
  {NULL,"::SelectEdit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__AddUniqNameOld_MethArgs[]={
  {NULL,"::SelectEdit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__LinkUniqNameOld_MethArgs[]={
  {NULL,"::SelectEdit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_SelectEdit__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_SelectEdit__MethodDef[]={
  {NULL,"::SelectEdit_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__FirstEl_stub,TA_taGroup_SelectEdit__FirstEl_MethArgs},
  {NULL,"::SelectEdit_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__NextEl_stub,TA_taGroup_SelectEdit__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_SelectEdit__MoveBefore_stub,TA_taGroup_SelectEdit__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_SelectEdit__MoveAfter_stub,TA_taGroup_SelectEdit__MoveAfter_MethArgs},
  {NULL,"::SelectEdit_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__SafeEl_stub,TA_taGroup_SelectEdit__SafeEl_MethArgs},
  {NULL,"::SelectEdit_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__FastEl_stub,TA_taGroup_SelectEdit__FastEl_MethArgs},
  {NULL,"::SelectEdit_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_SelectEdit__DefaultEl_stub,NULL},
  {NULL,"::SelectEdit_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__Edit_El_stub,TA_taGroup_SelectEdit__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__SafeGp_stub,TA_taGroup_SelectEdit__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__FastGp_stub,TA_taGroup_SelectEdit__FastGp_MethArgs},
  {NULL,"::SelectEdit_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__Leaf_stub,TA_taGroup_SelectEdit__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__LeafGp_stub,TA_taGroup_SelectEdit__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_SelectEdit__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__FirstGp_stub,TA_taGroup_SelectEdit__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__NextGp_stub,TA_taGroup_SelectEdit__NextGp_MethArgs},
  {NULL,"::SelectEdit_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_SelectEdit__NewEl_stub,TA_taGroup_SelectEdit__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_SelectEdit__NewGp_stub,TA_taGroup_SelectEdit__NewGp_MethArgs},
  {NULL,"::SelectEdit_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_SelectEdit__FindName_stub,TA_taGroup_SelectEdit__FindName_MethArgs},
  {NULL,"::SelectEdit_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_SelectEdit__FindType_stub,TA_taGroup_SelectEdit__FindType_MethArgs},
  {NULL,"::SelectEdit_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_SelectEdit__Pop_stub,NULL},
  {NULL,"::SelectEdit_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_SelectEdit__Peek_stub,NULL},
  {NULL,"::SelectEdit_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__AddUniqNameOld_stub,TA_taGroup_SelectEdit__AddUniqNameOld_MethArgs},
  {NULL,"::SelectEdit_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_SelectEdit__LinkUniqNameOld_stub,TA_taGroup_SelectEdit__LinkUniqNameOld_MethArgs},
  {NULL,"::SelectEdit_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_SelectEdit__FindLeafName_stub,TA_taGroup_SelectEdit__FindLeafName_MethArgs},
  {NULL,"::SelectEdit_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_SelectEdit__FindLeafType_stub,TA_taGroup_SelectEdit__FindLeafType_MethArgs},
  NULL};
static MethodDef_data TA_SelectEdit_MGroup_MethodDef[]={
  {&TA_void,NULL,"AutoEdit","","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_MGroup_AutoEdit_stub,NULL},
  NULL};
static EnumDef_data TA_LayerWizEl_InputOutput[]={
  {"INPUT","","",0},
  {"HIDDEN","","",1},
  {"OUTPUT","","",2},
  NULL};
static int LayerWizEl::* TA_LayerWizEl_MbrOff;
static MemberDef_data TA_LayerWizEl_MemberDef[]={
  {&TA_int,NULL,"n_units"," number of units in the layer","","",
    *((ta_memb_ptr*)&(TA_LayerWizEl_MbrOff=(int LayerWizEl::*)(&LayerWizEl::n_units))),0,NULL,0},
  {NULL,"::InputOutput","io_type"," is it an input, hidden, or output layer -- determines environment patterns","","",
    *((ta_memb_ptr*)&(TA_LayerWizEl_MbrOff=(int LayerWizEl::*)(&LayerWizEl::io_type))),0,NULL,0},
  NULL};
static EnumDef_data TA_Wizard_Connectivity[]={
  {"FEEDFORWARD"," each layer projects to the next one in sequence","",0},
  {"BIDIRECTIONAL"," layers are bidirectionally connected in sequence (each sends and receives from its neighbors)","",1},
  NULL};
static int Wizard::* TA_Wizard_MbrOff;
static MemberDef_data TA_Wizard_MemberDef[]={
  {&TA_bool,NULL,"auto_open"," open this wizard dialog upon startup","","",
    *((ta_memb_ptr*)&(TA_Wizard_MbrOff=(int Wizard::*)(&Wizard::auto_open))),0,NULL,0},
  {&TA_int,NULL,"n_layers"," number of layers","","",
    *((ta_memb_ptr*)&(TA_Wizard_MbrOff=(int Wizard::*)(&Wizard::n_layers))),0,NULL,0},
  {&TA_taBase_List,NULL,"layer_cfg"," provides configuration information for each layer","","",
    *((ta_memb_ptr*)&(TA_Wizard_MbrOff=(int Wizard::*)(&Wizard::layer_cfg))),0,NULL,0},
  {NULL,"::Connectivity","connectivity"," how to connect the layers","","",
    *((ta_memb_ptr*)&(TA_Wizard_MbrOff=(int Wizard::*)(&Wizard::connectivity))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"event_type"," type of event to create by default","TYPE_Event ","",
    *((ta_memb_ptr*)&(TA_Wizard_MbrOff=(int Wizard::*)(&Wizard::event_type))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Wizard_MultiLayerNet_MethArgs[]={
  {&TA_int,NULL,"n_inputs"," 1"},
  {&TA_int,NULL,"n_hiddens"," 1"},
  {&TA_int,NULL,"n_outputs"," 1"},
  NULL};
static MethodArgs_data TA_Wizard_StdNetwork_MethArgs[]={
  {&TA_Network_ptr,NULL,"net","((void *)0)"},
  NULL};
static MethodArgs_data TA_Wizard_StdEnv_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env","((void *)0)"},
  {&TA_int,NULL,"n_events"," 0"},
  NULL};
static MethodArgs_data TA_Wizard_UpdateEnvFmNet_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  NULL};
static MethodArgs_data TA_Wizard_SequenceEvents_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  {&TA_int,NULL,"n_seqs"," 10"},
  {&TA_int,NULL,"events_per_seq"," 4"},
  NULL};
static MethodArgs_data TA_Wizard_TimeSeqEvents_MethArgs[]={
  {&TA_TimeEnvironment_ptr,NULL,"env",""},
  {&TA_int,NULL,"n_seqs"," 10"},
  {&TA_int,NULL,"events_per_seq"," 4"},
  {&TA_float,NULL,"start_time"," 0.0"},
  {&TA_float,NULL,"time_inc"," 1.0"},
  NULL};
static MethodArgs_data TA_Wizard_NetAutoSave_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process_level_to_save_at",""},
  {&TA_bool,NULL,"just_weights"," false"},
  NULL};
static MethodArgs_data TA_Wizard_AutoTestProc_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"training_process",""},
  {&TA_Environment_ptr,NULL,"test_env",""},
  NULL};
static MethodArgs_data TA_Wizard_CrossValidation_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"training_process",""},
  {&TA_Environment_ptr,NULL,"test_env",""},
  NULL};
static MethodArgs_data TA_Wizard_ToSequenceEvents_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process",""},
  NULL};
static MethodArgs_data TA_Wizard_NoSequenceEvents_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process",""},
  NULL};
static MethodArgs_data TA_Wizard_RecordLayerValues_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process_level_record_at",""},
  {NULL,"SchedProcess::StatLoc","at_level",""},
  {&TA_Layer_ptr,NULL,"layer",""},
  {&TA_const_char_ptr,NULL,"var"," act"},
  NULL};
static MethodArgs_data TA_Wizard_SaveValuesInDataEnv_MethArgs[]={
  {&TA_MonitorStat_ptr,NULL,"stat",""},
  NULL};
static MethodArgs_data TA_Wizard_AutoAnalyzeDataEnv_MethArgs[]={
  {&TA_Environment_ptr,NULL,"data_env",""},
  {&TA_int,NULL,"pattern_no",""},
  {NULL,"DispDataEnvProc::DispType","analysis_disp",""},
  {&TA_SchedProcess_ptr,NULL,"process_level_analyze_at",""},
  {NULL,"SchedProcess::ProcLoc","at_level",""},
  NULL};
static MethodArgs_data TA_Wizard_AnalyzeNetLayer_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process_level_record_at",""},
  {NULL,"SchedProcess::StatLoc","rec_at_level",""},
  {&TA_Layer_ptr,NULL,"layer",""},
  {&TA_const_char_ptr,NULL,"var"," act"},
  {NULL,"DispDataEnvProc::DispType","analysis_disp"," DispDataEnvProc::CLUSTER_PLOT"},
  {&TA_SchedProcess_ptr,NULL,"process_level_analyze_at"," ((void *)0)"},
  {NULL,"SchedProcess::ProcLoc","analyze_at_level"," SchedProcess::FINAL_PROCS"},
  NULL};
static MethodArgs_data TA_Wizard_ActBasedReceptiveField_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process_level_record_at",""},
  {NULL,"SchedProcess::StatLoc","rec_at_level",""},
  {&TA_Layer_ptr,NULL,"recv_layer",""},
  {&TA_Layer_ptr,NULL,"send_layer",""},
  {&TA_Layer_ptr,NULL,"send2_layer",""},
  {&TA_SchedProcess_ptr,NULL,"process_level_disp_rfs_at",""},
  {NULL,"SchedProcess::ProcLoc","disp_at_level"," SchedProcess::FINAL_PROCS"},
  NULL};
static MethodArgs_data TA_Wizard_DisplayNetWeights_MethArgs[]={
  {&TA_Layer_ptr,NULL,"recv_layer",""},
  {&TA_Layer_ptr,NULL,"send_layer",""},
  {&TA_SchedProcess_ptr,NULL,"process_level_disp_wts_at",""},
  {NULL,"SchedProcess::ProcLoc","disp_at_level"," SchedProcess::FINAL_PROCS"},
  NULL};
static MethodArgs_data TA_Wizard_StopOnActThresh_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process_to_stop",""},
  {&TA_Layer_ptr,NULL,"layer",""},
  {&TA_float,NULL,"thresh"," .75"},
  NULL};
static MethodArgs_data TA_Wizard_AddCountersToTest_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"testing_process",""},
  {&TA_SchedProcess_ptr,NULL,"training_process",""},
  NULL};
static MethodArgs_data TA_Wizard_GetStatsFromProc_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"proc_with_stats",""},
  {&TA_SchedProcess_ptr,NULL,"proc_to_get_stats",""},
  {NULL,"SchedProcess::StatLoc","trg_stat_loc",""},
  {NULL,"Aggregate::Operator","agg_op"," Aggregate::LAST"},
  NULL};
static MethodArgs_data TA_Wizard_AddTimeCounter_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"proc_where_time_incr",""},
  {NULL,"SchedProcess::StatLoc","inc_at_level",""},
  {&TA_SchedProcess_ptr,NULL,"proc_reset_time",""},
  NULL};
static MethodArgs_data TA_Wizard_StdLogs_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process",""},
  NULL};
static MethodArgs_data TA_Wizard_LogProcess_MethArgs[]={
  {&TA_SchedProcess_ptr,NULL,"process",""},
  {&TA_TypeDef_ptr,NULL,"log_type",""},
  NULL};
static MethodDef_data TA_Wizard_MethodDef[]={
  {&TA_void,NULL,"ThreeLayerNet"," set configuration to a standard three-layer network (input, hidden, output) -- DOESN'T MAKE NETWORK (use StdEnv!)","MENU_BUTTON MENU_ON_Defaults ","",
    0,0,-1,0,NULL,cssElCFun_Wizard_ThreeLayerNet_stub,NULL},
  {&TA_void,NULL,"MultiLayerNet"," set configuration for specified number of each type of layer -- DOESN'T MAKE NETWORK (use StdEnv!)","MENU_BUTTON ","",
    0,3,0,0,NULL,cssElCFun_Wizard_MultiLayerNet_stub,TA_Wizard_MultiLayerNet_MethArgs},
  {&TA_void,NULL,"StdNetwork"," make a standard network according to the current settings (if net == NULL, new network is created)","MENU_BUTTON MENU_ON_Network NULL_OK ","",
    0,1,0,0,NULL,cssElCFun_Wizard_StdNetwork_stub,TA_Wizard_StdNetwork_MethArgs},
  {&TA_void,NULL,"StdEnv"," make a standard environment according to the current settings (if env == NULL, new environment is created)","MENU_BUTTON MENU_ON_Environment NULL_OK ","",
    0,2,0,0,NULL,cssElCFun_Wizard_StdEnv_stub,TA_Wizard_StdEnv_MethArgs},
  {&TA_void,NULL,"UpdateEnvFmNet"," update environment (event specs controlling layout of events) based on current configuration of network (default network if multiple exist)","MENU_BUTTON MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Wizard_UpdateEnvFmNet_stub,TA_Wizard_UpdateEnvFmNet_MethArgs},
  {&TA_void,NULL,"SequenceEvents"," make sequences (groups) of events, for use with SequenceEpoch and SequenceProcess","MENU_BUTTON MENU_SEP_BEFORE ","",
    0,3,1,0,NULL,cssElCFun_Wizard_SequenceEvents_stub,TA_Wizard_SequenceEvents_MethArgs},
  {&TA_void,NULL,"TimeSeqEvents"," make sequences (groups) of TimeEvents, with each sequence having the same sequence of times (start + inc for each addnl event)","MENU_BUTTON ","",
    0,5,1,0,NULL,cssElCFun_Wizard_TimeSeqEvents_stub,TA_Wizard_TimeSeqEvents_MethArgs},
  {&TA_void,NULL,"StdProcs"," create a standard set of processes, starting with a batch process","MENU_BUTTON MENU_ON_Processes CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Wizard_StdProcs_stub,NULL},
  {&TA_void,NULL,"NetAutoSave"," make the given process save a network when it is complted (just_weights = just save the weights)","MENU_BUTTON MENU_SEP_BEFORE ","",
    0,2,1,0,NULL,cssElCFun_Wizard_NetAutoSave_stub,TA_Wizard_NetAutoSave_MethArgs},
  {&TA_EpochProcess_ptr,NULL,"AutoTestProc"," create an automatic testing epoch process that runs on the test environment, and is called automatically from the training process","MENU_BUTTON ","",
    0,2,-1,0,NULL,cssElCFun_Wizard_AutoTestProc_stub,TA_Wizard_AutoTestProc_MethArgs},
  {&TA_EpochProcess_ptr,NULL,"CrossValidation"," create a cross-validation setup where training stops when testing on the test environment goes below a threshold","MENU_BUTTON ","",
    0,2,-1,0,NULL,cssElCFun_Wizard_CrossValidation_stub,TA_Wizard_CrossValidation_MethArgs},
  {&TA_void,NULL,"ToSequenceEvents"," make the given process hierarchy work with event groups (sequences) (process can be any one in hierarchy)","MENU_BUTTON MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_Wizard_ToSequenceEvents_stub,TA_Wizard_ToSequenceEvents_MethArgs},
  {&TA_void,NULL,"NoSequenceEvents"," get rid of sequence-level processing in given process hierarchy (process can be any one in hierarchy)","MENU_BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_Wizard_NoSequenceEvents_stub,TA_Wizard_NoSequenceEvents_MethArgs},
  {&TA_MonitorStat_ptr,NULL,"RecordLayerValues"," record (e.g., in the log associated with given process) at the given level (loop or final) the given variable for the given layer (e.g., Trial FINAL = record at end of each trial)","MENU_BUTTON MENU_ON_Stats ","",
    0,4,3,0,NULL,cssElCFun_Wizard_RecordLayerValues_stub,TA_Wizard_RecordLayerValues_MethArgs},
  {&TA_CopyToEnvStat_ptr,NULL,"SaveValuesInDataEnv"," save the values recorded by the given monitor statistic into a data environment (for viewing, clustering, distance computations, etc)","MENU_BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_Wizard_SaveValuesInDataEnv_stub,TA_Wizard_SaveValuesInDataEnv_MethArgs},
  {&TA_DispDataEnvProc_ptr,NULL,"AutoAnalyzeDataEnv"," automatically analyze (and display results) on given data environment and pattern number, at given processing level (e.g., Epoch FINAL = at end of each epoch)","MENU_BUTTON ","",
    0,5,-1,0,NULL,cssElCFun_Wizard_AutoAnalyzeDataEnv_stub,TA_Wizard_AutoAnalyzeDataEnv_MethArgs},
  {&TA_DispDataEnvProc_ptr,NULL,"AnalyzeNetLayer"," record data from the named layer, variable at given level (e.g., Trial FINAL) (RecordLayerValues), and send it to a data environment (SaveValuesInDataEnv), and then automatically analyze the data at given processing level (e.g., Epoch FINAL) (AutoAnalyzeDataEnv)","MENU_BUTTON ","",
    0,7,3,0,NULL,cssElCFun_Wizard_AnalyzeNetLayer_stub,TA_Wizard_AnalyzeNetLayer_MethArgs},
  {&TA_UnitActRFStat_ptr,NULL,"ActBasedReceptiveField"," record activation-based data from the named layer, variable at given level (e.g., Trial FINAL) (RecordLayerValues), and send it to a data environment (SaveValuesInDataEnv), and then automatically analyze the data at given processing level (e.g., Epoch FINAL) (AutoAnalyzeDataEnv)","MENU_BUTTON NULL_OK ","",
    0,7,6,0,NULL,cssElCFun_Wizard_ActBasedReceptiveField_stub,TA_Wizard_ActBasedReceptiveField_MethArgs},
  {&TA_DispNetWeightsProc_ptr,NULL,"DisplayNetWeights"," automatically display network weight values from send_layer to recv_layer in given process and level (e.g., Epoch FINAL)","MENU_BUTTON NULL_OK ","",
    0,4,3,0,NULL,cssElCFun_Wizard_DisplayNetWeights_stub,TA_Wizard_DisplayNetWeights_MethArgs},
  {&TA_void,NULL,"StopOnActThresh"," make the given process stop (e.g., settle process) when activations in given layer get above given threshold","MENU_BUTTON MENU_SEP_BEFORE ","",
    0,3,2,0,NULL,cssElCFun_Wizard_StopOnActThresh_stub,TA_Wizard_StopOnActThresh_MethArgs},
  {&TA_void,NULL,"AddCountersToTest"," add training process counters (e.g., epoch, batch) to the given testing process log output (via ProcCounterStat)","MENU_BUTTON ","",
    0,2,-1,0,NULL,cssElCFun_Wizard_AddCountersToTest_stub,TA_Wizard_AddCountersToTest_MethArgs},
  {&TA_void,NULL,"GetStatsFromProc"," have proc_to_get_stats get all the stats (into its trg_stat_loc) from the proc_with_stats (using given aggregation operator)","MENU_BUTTON ","",
    0,4,3,0,NULL,cssElCFun_Wizard_GetStatsFromProc_stub,TA_Wizard_GetStatsFromProc_MethArgs},
  {&TA_TimeCounterStat_ptr,NULL,"AddTimeCounter"," add a time counter statistic to given process (useful as an X axis in graph plotting over longer time scales), resetting the time counter in given process","MENU_BUTTON ","",
    0,3,-1,0,NULL,cssElCFun_Wizard_AddTimeCounter_stub,TA_Wizard_AddTimeCounter_MethArgs},
  {&TA_void,NULL,"StdLogs"," create standard logs (Trial TextLog, Epoch GraphLog, Batch TextLog) for given process hierarchy (process can be any proc in hierarchy)","MENU_BUTTON MENU_ON_Logs CONFIRM ","",
    0,1,-1,0,NULL,cssElCFun_Wizard_StdLogs_stub,TA_Wizard_StdLogs_MethArgs},
  {&TA_void,NULL,"LogProcess"," create log of a given type for given process","MENU_BUTTON MENU_SEP_BEFORE TYPE_PDPLog ","",
    0,2,-1,0,NULL,cssElCFun_Wizard_LogProcess_stub,TA_Wizard_LogProcess_MethArgs},
  NULL};
static EnumDef_data TA_taGroup_Wizard__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__MoveBefore_MethArgs[]={
  {NULL,"::Wizard_ptr","trg",""},
  {NULL,"::Wizard_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__MoveAfter_MethArgs[]={
  {NULL,"::Wizard_ptr","trg",""},
  {NULL,"::Wizard_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__Edit_El_MethArgs[]={
  {NULL,"::Wizard_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__AddUniqNameOld_MethArgs[]={
  {NULL,"::Wizard_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Wizard_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Wizard__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Wizard__MethodDef[]={
  {NULL,"::Wizard_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Wizard__FirstEl_stub,TA_taGroup_Wizard__FirstEl_MethArgs},
  {NULL,"::Wizard_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Wizard__NextEl_stub,TA_taGroup_Wizard__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Wizard__MoveBefore_stub,TA_taGroup_Wizard__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Wizard__MoveAfter_stub,TA_taGroup_Wizard__MoveAfter_MethArgs},
  {NULL,"::Wizard_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__SafeEl_stub,TA_taGroup_Wizard__SafeEl_MethArgs},
  {NULL,"::Wizard_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__FastEl_stub,TA_taGroup_Wizard__FastEl_MethArgs},
  {NULL,"::Wizard_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Wizard__DefaultEl_stub,NULL},
  {NULL,"::Wizard_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__Edit_El_stub,TA_taGroup_Wizard__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__SafeGp_stub,TA_taGroup_Wizard__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__FastGp_stub,TA_taGroup_Wizard__FastGp_MethArgs},
  {NULL,"::Wizard_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__Leaf_stub,TA_taGroup_Wizard__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__LeafGp_stub,TA_taGroup_Wizard__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Wizard__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__FirstGp_stub,TA_taGroup_Wizard__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__NextGp_stub,TA_taGroup_Wizard__NextGp_MethArgs},
  {NULL,"::Wizard_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Wizard__NewEl_stub,TA_taGroup_Wizard__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Wizard__NewGp_stub,TA_taGroup_Wizard__NewGp_MethArgs},
  {NULL,"::Wizard_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Wizard__FindName_stub,TA_taGroup_Wizard__FindName_MethArgs},
  {NULL,"::Wizard_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Wizard__FindType_stub,TA_taGroup_Wizard__FindType_MethArgs},
  {NULL,"::Wizard_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Wizard__Pop_stub,NULL},
  {NULL,"::Wizard_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Wizard__Peek_stub,NULL},
  {NULL,"::Wizard_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__AddUniqNameOld_stub,TA_taGroup_Wizard__AddUniqNameOld_MethArgs},
  {NULL,"::Wizard_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Wizard__LinkUniqNameOld_stub,TA_taGroup_Wizard__LinkUniqNameOld_MethArgs},
  {NULL,"::Wizard_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Wizard__FindLeafName_stub,TA_taGroup_Wizard__FindLeafName_MethArgs},
  {NULL,"::Wizard_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Wizard__FindLeafType_stub,TA_taGroup_Wizard__FindLeafType_MethArgs},
  NULL};
static MethodDef_data TA_Wizard_MGroup_MethodDef[]={
  {&TA_void,NULL,"AutoEdit","","","",
    0,0,-1,0,NULL,cssElCFun_Wizard_MGroup_AutoEdit_stub,NULL},
  NULL};
static EnumDef_data TA_taGroup_Project__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_Project__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__MoveBefore_MethArgs[]={
  {NULL,"::Project_ptr","trg",""},
  {NULL,"::Project_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__MoveAfter_MethArgs[]={
  {NULL,"::Project_ptr","trg",""},
  {NULL,"::Project_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__Edit_El_MethArgs[]={
  {NULL,"::Project_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Project__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_Project__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Project__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Project__AddUniqNameOld_MethArgs[]={
  {NULL,"::Project_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Project_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_Project__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_Project__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_Project__MethodDef[]={
  {NULL,"::Project_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Project__FirstEl_stub,TA_taGroup_Project__FirstEl_MethArgs},
  {NULL,"::Project_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_Project__NextEl_stub,TA_taGroup_Project__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Project__MoveBefore_stub,TA_taGroup_Project__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_Project__MoveAfter_stub,TA_taGroup_Project__MoveAfter_MethArgs},
  {NULL,"::Project_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__SafeEl_stub,TA_taGroup_Project__SafeEl_MethArgs},
  {NULL,"::Project_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__FastEl_stub,TA_taGroup_Project__FastEl_MethArgs},
  {NULL,"::Project_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Project__DefaultEl_stub,NULL},
  {NULL,"::Project_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__Edit_El_stub,TA_taGroup_Project__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__SafeGp_stub,TA_taGroup_Project__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__FastGp_stub,TA_taGroup_Project__FastGp_MethArgs},
  {NULL,"::Project_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__Leaf_stub,TA_taGroup_Project__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__LeafGp_stub,TA_taGroup_Project__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Project__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__FirstGp_stub,TA_taGroup_Project__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__NextGp_stub,TA_taGroup_Project__NextGp_MethArgs},
  {NULL,"::Project_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Project__NewEl_stub,TA_taGroup_Project__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_Project__NewGp_stub,TA_taGroup_Project__NewGp_MethArgs},
  {NULL,"::Project_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Project__FindName_stub,TA_taGroup_Project__FindName_MethArgs},
  {NULL,"::Project_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Project__FindType_stub,TA_taGroup_Project__FindType_MethArgs},
  {NULL,"::Project_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Project__Pop_stub,NULL},
  {NULL,"::Project_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_Project__Peek_stub,NULL},
  {NULL,"::Project_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__AddUniqNameOld_stub,TA_taGroup_Project__AddUniqNameOld_MethArgs},
  {NULL,"::Project_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_Project__LinkUniqNameOld_stub,TA_taGroup_Project__LinkUniqNameOld_MethArgs},
  {NULL,"::Project_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_Project__FindLeafName_stub,TA_taGroup_Project__FindLeafName_MethArgs},
  {NULL,"::Project_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_Project__FindLeafType_stub,TA_taGroup_Project__FindLeafType_MethArgs},
  NULL};
static int Project_MGroup::* TA_Project_MGroup_MbrOff;
static MemberDef_data TA_Project_MGroup_MemberDef[]={
  {&TA_ColorScaleSpec_MGroup_ptr,NULL,"colorspecs"," -- aliased from projects","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Project_MGroup_MbrOff=(int Project_MGroup::*)(&Project_MGroup::colorspecs))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Project_MGroup_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodDef_data TA_Project_MGroup_MethodDef[]={
  {&TA_int,NULL,"Load"," Load object data from a file call reconnect on nets afterwards","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    1,2,1,0,NULL,cssElCFun_Project_MGroup_Load_stub,TA_Project_MGroup_Load_MethArgs},
  NULL};
static MemberDef_data TA_T3UnitNode_MemberDef[]={
  {&TA_float,NULL,"base_height"," height when not active or empty","DEF_0.1 ","",
    (ta_memb_ptr)NULL,1,(void*)(&T3UnitNode::base_height),0},
  {&TA_float,NULL,"max_height"," height when fully active","DEF_0.8 ","",
    (ta_memb_ptr)NULL,1,(void*)(&T3UnitNode::max_height),0},
  NULL};
static MethodArgs_data TA_T3UnitNode_setAppearance_MethArgs[]={
  {&TA_float,NULL,"act",""},
  {&TA_const_T3Color_ref,NULL,"color",""},
  NULL};
static MethodArgs_data TA_T3UnitNode_setPicked_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodDef_data TA_T3UnitNode_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3UnitNode::initClass),cssElCFun_T3UnitNode_initClass_stub,NULL},
  {&TA_void,NULL,"setAppearance"," act is -1:1","","",
    0,2,-1,0,NULL,cssElCFun_T3UnitNode_setAppearance_stub,TA_T3UnitNode_setAppearance_MethArgs},
  {&TA_void,NULL,"setPicked","","","",
    0,1,-1,0,NULL,cssElCFun_T3UnitNode_setPicked_stub,TA_T3UnitNode_setPicked_MethArgs},
  NULL};
static MemberDef_data TA_T3UnitGroupNode_MemberDef[]={
  {&TA_float,NULL,"height"," nominal amount of height, so doesn't vanish","","",
    (ta_memb_ptr)NULL,1,(void*)(&T3UnitGroupNode::height),0},
  {&TA_float,NULL,"inset"," amount inset from the layer","","",
    (ta_memb_ptr)NULL,1,(void*)(&T3UnitGroupNode::inset),0},
  NULL};
static MethodArgs_data TA_T3UnitGroupNode_shapeCallback_MethArgs[]={
  {&TA_void_ptr,NULL,"data",""},
  {&TA_SoAction_ptr,NULL,"act",""},
  NULL};
static MethodArgs_data TA_T3UnitGroupNode_drawGrid_MethArgs[]={
  {&TA_T3UnitGroupNode_ptr,NULL,"node",""},
  NULL};
static MethodArgs_data TA_T3UnitGroupNode_unitCaptionFont_MethArgs[]={
  {&TA_bool,NULL,"auto_create"," false"},
  NULL};
static MethodArgs_data TA_T3UnitGroupNode_setGeom_MethArgs[]={
  {&TA_int,NULL,"px",""},
  {&TA_int,NULL,"py",""},
  NULL};
static MethodDef_data TA_T3UnitGroupNode_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3UnitGroupNode::initClass),cssElCFun_T3UnitGroupNode_initClass_stub,NULL},
  {&TA_void,NULL,"shapeCallback","","","",
    0,2,-1,1,(ta_void_fun)(T3UnitGroupNode::shapeCallback),cssElCFun_T3UnitGroupNode_shapeCallback_stub,TA_T3UnitGroupNode_shapeCallback_MethArgs},
  {&TA_void,NULL,"drawGrid"," void	clearUnits(); // remove all units","","",
    0,1,-1,1,(ta_void_fun)(T3UnitGroupNode::drawGrid),cssElCFun_T3UnitGroupNode_drawGrid_stub,TA_T3UnitGroupNode_drawGrid_MethArgs},
  {&TA_SoFont_ptr,NULL,"unitCaptionFont","","","",
    0,1,0,0,NULL,cssElCFun_T3UnitGroupNode_unitCaptionFont_stub,TA_T3UnitGroupNode_unitCaptionFont_MethArgs},
  {&TA_void,NULL,"setGeom"," sets (actual) geom of group; creates/positions units;","","",
    0,2,-1,0,NULL,cssElCFun_T3UnitGroupNode_setGeom_stub,TA_T3UnitGroupNode_setGeom_MethArgs},
  {&TA_SoCube_ptr,NULL,"shape","","","",
    0,0,-1,0,NULL,cssElCFun_T3UnitGroupNode_shape_stub,NULL},
  NULL};
static MemberDef_data TA_T3LayerNode_MemberDef[]={
  {&TA_float,NULL,"height"," height of the layer shape itself","","",
    (ta_memb_ptr)NULL,1,(void*)(&T3LayerNode::height),0},
  NULL};
static MethodArgs_data TA_T3LayerNode_setGeom_MethArgs[]={
  {&TA_int,NULL,"px",""},
  {&TA_int,NULL,"py",""},
  NULL};
static MethodDef_data TA_T3LayerNode_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3LayerNode::initClass),cssElCFun_T3LayerNode_initClass_stub,NULL},
  {&TA_void,NULL,"setGeom"," sets (actual) geom of layer","","",
    0,2,-1,0,NULL,cssElCFun_T3LayerNode_setGeom_stub,TA_T3LayerNode_setGeom_MethArgs},
  NULL};
static MethodDef_data TA_T3PrjnNode_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3PrjnNode::initClass),cssElCFun_T3PrjnNode_initClass_stub,NULL},
  NULL};
static MethodDef_data TA_T3NetNode_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3NetNode::initClass),cssElCFun_T3NetNode_initClass_stub,NULL},
  {&TA_SoCube_ptr,NULL,"shape","","","",
    0,0,-1,0,NULL,cssElCFun_T3NetNode_shape_stub,NULL},
  NULL};
static MethodArgs_data TA_T3LogViewNode_setShowFrame_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_T3LogViewNode_setGeom_MethArgs[]={
  {&TA_int,NULL,"px",""},
  {&TA_int,NULL,"py",""},
  {&TA_int,NULL,"pz",""},
  NULL};
static MethodDef_data TA_T3LogViewNode_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3LogViewNode::initClass),cssElCFun_T3LogViewNode_initClass_stub,NULL},
  {&TA_SoSeparator_ptr,NULL,"canvas"," note: transformed to compensate for frame inset, if any","","",
    0,0,-1,0,NULL,cssElCFun_T3LogViewNode_canvas_stub,NULL},
  {&TA_SoFrame_ptr,NULL,"frame"," note: may be null","","",
    0,0,-1,0,NULL,cssElCFun_T3LogViewNode_frame_stub,NULL},
  {&TA_bool,NULL,"showFrame","","","",
    0,0,-1,0,NULL,cssElCFun_T3LogViewNode_showFrame_stub,NULL},
  {&TA_void,NULL,"setShowFrame","","","",
    0,1,-1,0,NULL,cssElCFun_T3LogViewNode_setShowFrame_stub,TA_T3LogViewNode_setShowFrame_MethArgs},
  {&TA_void,NULL,"setGeom"," sets (actual) geom of log","","",
    0,3,-1,0,NULL,cssElCFun_T3LogViewNode_setGeom_stub,TA_T3LogViewNode_setGeom_MethArgs},
  NULL};
static MethodDef_data TA_T3GridLogViewBaseNode_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3GridLogViewBaseNode::initClass),cssElCFun_T3GridLogViewBaseNode_initClass_stub,NULL},
  {&TA_SoGroup_ptr,NULL,"header","","","",
    0,0,-1,0,NULL,cssElCFun_T3GridLogViewBaseNode_header_stub,NULL},
  {&TA_SoGroup_ptr,NULL,"body","","","",
    0,0,-1,0,NULL,cssElCFun_T3GridLogViewBaseNode_body_stub,NULL},
  NULL};
static MemberDef_data TA_T3UnitNode_Cylinder_MemberDef[]={
  {&TA_float,NULL,"shape_radius"," radius (also used for _Circle)","","",
    (ta_memb_ptr)NULL,1,(void*)(&T3UnitNode_Cylinder::shape_radius),0},
  NULL};
static MethodDef_data TA_T3UnitNode_Cylinder_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3UnitNode_Cylinder::initClass),cssElCFun_T3UnitNode_Cylinder_initClass_stub,NULL},
  {&TA_SoCylinder_ptr,NULL,"shape","","","",
    0,0,-1,0,NULL,cssElCFun_T3UnitNode_Cylinder_shape_stub,NULL},
  NULL};
static MethodDef_data TA_T3UnitNode_Circle_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3UnitNode_Circle::initClass),cssElCFun_T3UnitNode_Circle_initClass_stub,NULL},
  {&TA_SoCylinder_ptr,NULL,"shape","","","",
    0,0,-1,0,NULL,cssElCFun_T3UnitNode_Circle_shape_stub,NULL},
  NULL};
static MemberDef_data TA_T3UnitNode_Block_MemberDef[]={
  {&TA_float,NULL,"shape_width"," (also used for _Rect)","","",
    (ta_memb_ptr)NULL,1,(void*)(&T3UnitNode_Block::shape_width),0},
  {&TA_float,NULL,"shape_depth"," (also used for _Rect)","","",
    (ta_memb_ptr)NULL,1,(void*)(&T3UnitNode_Block::shape_depth),0},
  NULL};
static MethodDef_data TA_T3UnitNode_Block_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3UnitNode_Block::initClass),cssElCFun_T3UnitNode_Block_initClass_stub,NULL},
  {&TA_SoCube_ptr,NULL,"shape","","","",
    0,0,-1,0,NULL,cssElCFun_T3UnitNode_Block_shape_stub,NULL},
  NULL};
static MethodDef_data TA_T3UnitNode_Rect_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3UnitNode_Rect::initClass),cssElCFun_T3UnitNode_Rect_initClass_stub,NULL},
  {&TA_SoCube_ptr,NULL,"shape","","","",
    0,0,-1,0,NULL,cssElCFun_T3UnitNode_Rect_shape_stub,NULL},
  NULL};
static MethodDef_data TA_T3GraphLogViewNode_MethodDef[]={
  {&TA_void,NULL,"initClass"," TODO: graphs, axes, body, etc. SoGroup* header() {return header_;} SoGroup* body() {return body_;} ","","",
    0,0,-1,1,(ta_void_fun)(T3GraphLogViewNode::initClass),cssElCFun_T3GraphLogViewNode_initClass_stub,NULL},
  NULL};
static EnumDef_data TA_NetView_MDFlags[]={
  {"MD_FLOAT","","",0},
  {"MD_DOUBLE","","",1},
  {"MD_INT","","",2},
  {"MD_UNKNOWN","","",0},
  {"F","","",1},
  NULL};
static EnumDef_data TA_NetView_UnitTextDisplay[]={
  {"UTD_NONE"," no text (default)","LABEL_None ",0},
  {"UTD_VALUES"," unit values only","LABEL_Values ",1},
  {"UTD_NAMES"," unit names only","LABEL_Names ",2},
  {"UTD_BOTH"," both unit values and names","LABEL_Both ",3},
  NULL};
static EnumDef_data TA_NetView_UnitDisplayMode[]={
  {"UDM_CIRCLE"," just color, no 3d -- best for when displaying labels","LABEL_2d_Circle ",0},
  {"UDM_RECT"," just color, no 3d -- best for when displaying labels","LABEL_2d_Rect ",1},
  {"UDM_BLOCK"," ","LABEL_3d_Block ",2},
  {"UDM_CYLINDER"," ","LABEL_3d_Cylinder ",3},
  NULL};
static int NetView::* TA_NetView_MbrOff;
static MemberDef_data TA_NetView_MemberDef[]={
  {&TA_T3DataView_PtrList,NULL,"layers"," ","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::layers))),0,NULL,0},
  {&TA_T3DataView_PtrList,NULL,"prjns"," ","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::prjns))),0,NULL,0},
  {&TA_ColorScale,NULL,"scale"," contains current min,max,range,zero,auto_scale","","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::scale))),0,NULL,0},
  {&TA_ScaleRange_List,NULL,"scale_ranges"," Auto ranges for member buttons","","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::scale_ranges))),0,NULL,0},
  {&TA_bool,NULL,"display","","","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::display))),0,NULL,0},
  {&TA_MemberSpace,NULL,"membs"," list of all the members possible in units","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::membs))),0,NULL,0},
  {&TA_int_Array,NULL,"ordered_uvg_list"," selected var buttons","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::ordered_uvg_list))),0,NULL,0},
  {&TA_Unit_ptr,NULL,"unit_src"," unit last picked (if any) for display","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::unit_src))),0,NULL,0},
  {&TA_MemberDef_ptr,NULL,"unit_disp_md"," memberdef (if any) of Unit (or Connection) to display","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::unit_disp_md))),0,NULL,0},
  {&TA_ScaleRange_ptr,NULL,"unit_sr"," scalerange of disp_md","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::unit_sr))),0,NULL,0},
  {NULL,"::MDFlags","unit_md_flags"," type to display in units","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::unit_md_flags))),0,NULL,0},
  {NULL,"::UnitDisplayMode","unit_disp_mode","","","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::unit_disp_mode))),0,NULL,0},
  {NULL,"::UnitTextDisplay","unit_text_disp","","","",
    *((ta_memb_ptr*)&(TA_NetView_MbrOff=(int NetView::*)(&NetView::unit_text_disp))),0,NULL,0},
  NULL};
static MethodArgs_data TA_NetView_New_MethArgs[]={
  {&TA_pdpDataViewer_ptr,NULL,"viewer",""},
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_NetView_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_NetView_setUnitSrc_MethArgs[]={
  {&TA_UnitView_ptr,NULL,"uv",""},
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodArgs_data TA_NetView_setUnitDisp_MethArgs[]={
  {&TA_int,NULL,"value",""},
  NULL};
static MethodArgs_data TA_NetView_setUnitDispMd_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_NetView_FindUnitView_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodArgs_data TA_NetView_GetUnitColor_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_iColor_ref,NULL,"col",""},
  NULL};
static MethodArgs_data TA_NetView_GetUnitDisplayVals_MethArgs[]={
  {&TA_UnitGroupView_ptr,NULL,"ugrv",""},
  {&TA_TwoDCoord_ref,NULL,"co",""},
  {&TA_float_ref,NULL,"val",""},
  {&TA_T3Color_ref,NULL,"col",""},
  NULL};
static MethodArgs_data TA_NetView_InitScaleRange_MethArgs[]={
  {&TA_ScaleRange_ref,NULL,"sr",""},
  NULL};
static MethodArgs_data TA_NetView_InitDisplay_MethArgs[]={
  {&TA_bool,NULL,"init_panel"," true"},
  NULL};
static MethodArgs_data TA_NetView_InitDisplay_Layer_MethArgs[]={
  {&TA_LayerView_ptr,NULL,"lv",""},
  {&TA_bool,NULL,"check_build"," true"},
  NULL};
static MethodArgs_data TA_NetView_InitDisplay_UnitGroup_MethArgs[]={
  {&TA_UnitGroupView_ptr,NULL,"ugrv",""},
  {&TA_bool,NULL,"check_build"," true"},
  NULL};
static MethodArgs_data TA_NetView_Layer_DataUAE_MethArgs[]={
  {&TA_LayerView_ptr,NULL,"lv",""},
  NULL};
static MethodArgs_data TA_NetView_NewLayer_MethArgs[]={
  {&TA_int,NULL,"x"," 3"},
  {&TA_int,NULL,"y"," 3"},
  NULL};
static MethodArgs_data TA_NetView_SelectVar_MethArgs[]={
  {&TA_const_char_ptr,NULL,"var_name",""},
  {&TA_bool,NULL,"add","false"},
  {&TA_bool,NULL,"update"," true"},
  NULL};
static MethodArgs_data TA_NetView_SetScaleData_MethArgs[]={
  {&TA_bool,NULL,"auto_scale",""},
  {&TA_float,NULL,"scale_min",""},
  {&TA_float,NULL,"scale_max",""},
  {&TA_bool,NULL,"update_panel"," true"},
  NULL};
static MethodArgs_data TA_NetView_UpdateDisplay_MethArgs[]={
  {&TA_bool,NULL,"update_panel"," true"},
  NULL};
static MethodDef_data TA_NetView_MethodDef[]={
  {&TA_NetView_ptr,NULL,"New"," Create n_objs objects of given type (type is optional) create a new instance and add to viewer","","",
    1,2,-1,1,(ta_void_fun)(NetView::New),cssElCFun_NetView_New_stub,TA_NetView_New_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    1,2,-1,0,NULL,cssElCFun_NetView_ChildUpdateAfterEdit_stub,TA_NetView_ChildUpdateAfterEdit_MethArgs},
  {&TA_Network_ptr,NULL,"net","","","",
    0,0,-1,0,NULL,cssElCFun_NetView_net_stub,NULL},
  {&TA_void,NULL,"setUnitSrc"," updates picked unit","","",
    0,2,-1,0,NULL,cssElCFun_NetView_setUnitSrc_stub,TA_NetView_setUnitSrc_MethArgs},
  {&TA_void,NULL,"setUnitDisp"," sets a new md to display, index in membs","","",
    0,1,-1,0,NULL,cssElCFun_NetView_setUnitDisp_stub,TA_NetView_setUnitDisp_MethArgs},
  {&TA_void,NULL,"setUnitDispMd"," sets a new md to display, lookup/set scale values","","",
    0,1,-1,0,NULL,cssElCFun_NetView_setUnitDispMd_stub,TA_NetView_setUnitDispMd_MethArgs},
  {&TA_UnitView_ptr,NULL,"FindUnitView"," find the uv for the unit","","",
    0,1,-1,0,NULL,cssElCFun_NetView_FindUnitView_stub,TA_NetView_FindUnitView_MethArgs},
  {&TA_void,NULL,"GetMembs"," note: called/controlled by the NetViewPanel TODO: net updates???","","",
    0,0,-1,0,NULL,cssElCFun_NetView_GetMembs_stub,NULL},
  {&TA_void,NULL,"GetUnitColor","","","",
    0,2,-1,0,NULL,cssElCFun_NetView_GetUnitColor_stub,TA_NetView_GetUnitColor_MethArgs},
  {&TA_void,NULL,"GetUnitDisplayVals","","","",
    0,4,-1,0,NULL,cssElCFun_NetView_GetUnitDisplayVals_stub,TA_NetView_GetUnitDisplayVals_MethArgs},
  {&TA_void,NULL,"InitScaleRange"," initialize sr to its defaults; used when creating, and if user clicks 'default' button for the scale","","",
    0,1,-1,0,NULL,cssElCFun_NetView_InitScaleRange_stub,TA_NetView_InitScaleRange_MethArgs},
  {&TA_void,NULL,"InitDisplay"," hard reset of display, esp. Unit values","","",
    0,1,0,0,NULL,cssElCFun_NetView_InitDisplay_stub,TA_NetView_InitDisplay_MethArgs},
  {&TA_void,NULL,"InitDisplay_Layer","","","",
    0,2,1,0,NULL,cssElCFun_NetView_InitDisplay_Layer_stub,TA_NetView_InitDisplay_Layer_MethArgs},
  {&TA_void,NULL,"InitDisplay_UnitGroup","","","",
    0,2,1,0,NULL,cssElCFun_NetView_InitDisplay_UnitGroup_stub,TA_NetView_InitDisplay_UnitGroup_MethArgs},
  {&TA_void,NULL,"InitPanel"," hard reset of panel, esp. membr vars","","",
    0,0,-1,0,NULL,cssElCFun_NetView_InitPanel_stub,NULL},
  {&TA_void,NULL,"Layer_DataUAE"," send a DataUAE for all prjns for this layer","","",
    0,1,-1,0,NULL,cssElCFun_NetView_Layer_DataUAE_stub,TA_NetView_Layer_DataUAE_MethArgs},
  {&TA_void,NULL,"NewLayer","","","",
    0,2,0,0,NULL,cssElCFun_NetView_NewLayer_stub,TA_NetView_NewLayer_MethArgs},
  {&TA_void,NULL,"SelectVar"," select given variable for viewing on units (add to currently disp vars if add)","","",
    0,3,1,0,NULL,cssElCFun_NetView_SelectVar_stub,TA_NetView_SelectVar_MethArgs},
  {&TA_void,NULL,"SetScaleData"," updates the values in us and the stored ones in the colorscale list","","",
    0,4,3,0,NULL,cssElCFun_NetView_SetScaleData_stub,TA_NetView_SetScaleData_MethArgs},
  {&TA_void,NULL,"SetScaleDefault"," revert scale to its default","","",
    0,0,-1,0,NULL,cssElCFun_NetView_SetScaleDefault_stub,NULL},
  {&TA_void,NULL,"UpdateDisplay"," updates dynamic values, esp. Unit values","","",
    0,1,0,0,NULL,cssElCFun_NetView_UpdateDisplay_stub,TA_NetView_UpdateDisplay_MethArgs},
  {&TA_void,NULL,"UpdatePanel"," updates nvp, esp. after UAE etc.","","",
    0,0,-1,0,NULL,cssElCFun_NetView_UpdatePanel_stub,NULL},
  NULL};
static MethodDef_data TA_nvDataView_MethodDef[]={
  {&TA_NetView_ptr,NULL,"nv","","","",
    0,0,-1,0,NULL,cssElCFun_nvDataView_nv_stub,NULL},
  NULL};
static int LayerView::* TA_LayerView_MbrOff;
static MemberDef_data TA_LayerView_MemberDef[]={
  {&TA_T3DataView_PtrList,NULL,"ugrps"," ","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LayerView_MbrOff=(int LayerView::*)(&LayerView::ugrps))),0,NULL,0},
  NULL};
static MethodDef_data TA_LayerView_MethodDef[]={
  {&TA_Layer_ptr,NULL,"layer","","","",
    0,0,-1,0,NULL,cssElCFun_LayerView_layer_stub,NULL},
  NULL};
static MethodDef_data TA_PrjnView_MethodDef[]={
  {&TA_Projection_ptr,NULL,"prjn","","","",
    0,0,-1,0,NULL,cssElCFun_PrjnView_prjn_stub,NULL},
  NULL};
static MethodArgs_data TA_UnitGroupView_ValToDispText_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_taString_ref,NULL,"str",""},
  NULL};
static MethodArgs_data TA_UnitGroupView_GetUnitDisplayVal_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"co",""},
  {&TA_int,NULL,"unit_md_flags",""},
  NULL};
static MethodArgs_data TA_UnitGroupView_UpdateUnitViewBase_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"disp_md",""},
  {&TA_Unit_ptr,NULL,"src_u",""},
  NULL};
static MethodDef_data TA_UnitGroupView_MethodDef[]={
  {&TA_void,NULL,"ValToDispText"," renders the display text, typ 6 chars max","","",
    0,2,-1,1,(ta_void_fun)(UnitGroupView::ValToDispText),cssElCFun_UnitGroupView_ValToDispText_stub,TA_UnitGroupView_ValToDispText_MethArgs},
  {&TA_Unit_Group_ptr,NULL,"ugrp","","","",
    0,0,-1,0,NULL,cssElCFun_UnitGroupView_ugrp_stub,NULL},
  {&TA_void,NULL,"AllocUnitViewData"," make sure we have correct space in uvd array","","",
    0,0,-1,0,NULL,cssElCFun_UnitGroupView_AllocUnitViewData_stub,NULL},
  {&TA_float,NULL,"GetUnitDisplayVal"," get val for unit at co","","",
    0,2,-1,0,NULL,cssElCFun_UnitGroupView_GetUnitDisplayVal_stub,TA_UnitGroupView_GetUnitDisplayVal_MethArgs},
  {&TA_void,NULL,"UpdateUnitViewBase"," set the base for the given md; src_u only used for s./r. values","","",
    0,2,-1,0,NULL,cssElCFun_UnitGroupView_UpdateUnitViewBase_stub,TA_UnitGroupView_UpdateUnitViewBase_MethArgs},
  NULL};
static MethodDef_data TA_UnitView_MethodDef[]={
  {&TA_Unit_ptr,NULL,"unit","","","",
    0,0,-1,0,NULL,cssElCFun_UnitView_unit_stub,NULL},
  {&TA_UnitGroupView_ptr,NULL,"ugrv","","","",
    0,0,-1,0,NULL,cssElCFun_UnitView_ugrv_stub,NULL},
  {&TA_NetView_ptr,NULL,"nv","","","",
    0,0,-1,0,NULL,cssElCFun_UnitView_nv_stub,NULL},
  NULL};
static int GridLogViewBase::* TA_GridLogViewBase_MbrOff;
static MemberDef_data TA_GridLogViewBase_MemberDef[]={
  {&TA_MinMaxInt,NULL,"col_range"," column range that is visible","","",
    *((ta_memb_ptr*)&(TA_GridLogViewBase_MbrOff=(int GridLogViewBase::*)(&GridLogViewBase::col_range))),0,NULL,0},
  {&TA_float_Array,NULL,"col_widths","","","",
    *((ta_memb_ptr*)&(TA_GridLogViewBase_MbrOff=(int GridLogViewBase::*)(&GridLogViewBase::col_widths))),0,NULL,0},
  {&TA_float,NULL,"tot_col_widths"," total of all col widths","","",
    *((ta_memb_ptr*)&(TA_GridLogViewBase_MbrOff=(int GridLogViewBase::*)(&GridLogViewBase::tot_col_widths))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GridLogViewBase_VScroll_MethArgs[]={
  {&TA_bool,NULL,"left",""},
  NULL};
static MethodDef_data TA_GridLogViewBase_MethodDef[]={
  {&TA_void,NULL,"VScroll"," scroll left or right","","",
    0,1,-1,0,NULL,cssElCFun_GridLogViewBase_VScroll_stub,TA_GridLogViewBase_VScroll_MethArgs},
  NULL};
static MethodArgs_data TA_TextLogView_RemoveLine_MethArgs[]={
  {&TA_int,NULL,"index",""},
  NULL};
static MethodDef_data TA_TextLogView_MethodDef[]={
  {&TA_DT_ViewSpec_ptr,NULL,"viewSpec","","","",
    0,0,-1,0,NULL,cssElCFun_TextLogView_viewSpec_stub,NULL},
  {&TA_void,NULL,"RemoveLine"," remove line from scrollbox, -1 = all","","",
    0,1,-1,0,NULL,cssElCFun_TextLogView_RemoveLine_stub,TA_TextLogView_RemoveLine_MethArgs},
  NULL};
static EnumDef_data TA_EnviroView_EventLayout[]={
  {"HORIZONTAL"," display selected events in order horizontally then vertically","",0},
  {"VERTICAL"," display selected events in order vertically then horizontally","",1},
  NULL};
static EnumDef_data TA_EnviroView_ValDispMode[]={
  {"COLOR"," color indicates value","",0},
  {"AREA"," area indicates value","",1},
  {"LINEAR"," linear size of square side indicates value","",2},
  NULL};
static EnumDef_data TA_EnviroView_ValTextMode[]={
  {"NONE"," no text (default)","",0},
  {"VALUES"," values only","",1},
  {"NAMES"," value_name names only","AKA_LABELS ",2},
  {"BOTH"," both unit values and names","",3},
  NULL};
static int EnviroView::* TA_EnviroView_MbrOff;
static MemberDef_data TA_EnviroView_MemberDef[]={
  {NULL,"::EventLayout","event_layout"," layout of the events when mulitple are displayed","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::event_layout))),0,NULL,0},
  {&TA_bool,NULL,"auto_scale"," whether to update the min/max range automatically","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::auto_scale))),0,NULL,0},
  {NULL,"::ValDispMode","val_disp_mode"," method of displaying values","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::val_disp_mode))),0,NULL,0},
  {&TA_ColorScaleSpec_ptr,NULL,"colorspec"," color scale to use","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::colorspec))),0,NULL,0},
  {NULL,"::ValTextMode","val_text"," how to display the text values","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::val_text))),0,NULL,0},
  {&TA_bool,NULL,"no_border"," do not display a border around the values","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::no_border))),0,NULL,0},
  {&TA_FontSpec,NULL,"view_font"," the font to use for the labels (pattern names, etc) in the display","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::view_font))),0,NULL,0},
  {&TA_FontSpec,NULL,"value_font"," the font to use for the values","","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::value_font))),0,NULL,0},
  {&TA_taString,NULL,"event_header"," what member to display in the event header","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::event_header))),0,NULL,0},
  {&TA_taString,NULL,"pattern_header"," what member to display in the pattern header","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::pattern_header))),0,NULL,0},
  {&TA_taString,NULL,"pattern_blocks"," what to display in the pattern blocks","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::pattern_blocks))),0,NULL,0},
  {&TA_MinMax,NULL,"scale_range"," range of scalebar","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::scale_range))),0,NULL,0},
  {&TA_Event_MGroup,NULL,"events_displayed"," ","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::events_displayed))),0,NULL,0},
  {&TA_TALOG,NULL,"ev_gps_displayed"," ","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::ev_gps_displayed))),0,NULL,0},
  {&TA_BaseSpec_MGroup,NULL,"specs_displayed"," ","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_EnviroView_MbrOff=(int EnviroView::*)(&EnviroView::specs_displayed))),0,NULL,0},
  NULL};
static MethodArgs_data TA_EnviroView_SetColorSpec_MethArgs[]={
  {&TA_ColorScaleSpec_ptr,NULL,"colors",""},
  NULL};
static MethodArgs_data TA_EnviroView_SetLayout_MethArgs[]={
  {NULL,"::EventLayout","layout"," HORIZONTAL"},
  NULL};
static MethodArgs_data TA_EnviroView_SetBorder_MethArgs[]={
  {&TA_bool,NULL,"border"," true"},
  NULL};
static MethodArgs_data TA_EnviroView_SetViewFontSize_MethArgs[]={
  {&TA_int,NULL,"point_size"," 10"},
  NULL};
static MethodArgs_data TA_EnviroView_SetValueFontSize_MethArgs[]={
  {&TA_int,NULL,"point_size"," 10"},
  NULL};
static MethodArgs_data TA_EnviroView_SelectEvents_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"n_events","-1"},
  NULL};
static MethodArgs_data TA_EnviroView_DeselectEvents_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"n_events","-1"},
  NULL};
static MethodArgs_data TA_EnviroView_SelectEvent_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  NULL};
static MethodArgs_data TA_EnviroView_DeselectEvent_MethArgs[]={
  {&TA_Event_ptr,NULL,"ev",""},
  NULL};
static MethodArgs_data TA_EnviroView_SelectEventGp_MethArgs[]={
  {&TA_Event_MGroup_ptr,NULL,"eg",""},
  NULL};
static MethodArgs_data TA_EnviroView_SelectGpEvents_MethArgs[]={
  {&TA_Event_MGroup_ptr,NULL,"eg",""},
  NULL};
static MethodArgs_data TA_EnviroView_DeselectEventGp_MethArgs[]={
  {&TA_Event_MGroup_ptr,NULL,"eg",""},
  NULL};
static MethodArgs_data TA_EnviroView_SetEventSpec_MethArgs[]={
  {&TA_EventSpec_ptr,NULL,"es",""},
  NULL};
static MethodArgs_data TA_EnviroView_ChangeEventType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_EnviroView_ChangeEventGpType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_EnviroView_SetPatLabel_MethArgs[]={
  {&TA_const_char_ptr,NULL,"pat_lbl",""},
  NULL};
static MethodArgs_data TA_EnviroView_SetEventLabel_MethArgs[]={
  {&TA_const_char_ptr,NULL,"evt_lbl",""},
  NULL};
static MethodArgs_data TA_EnviroView_UpdateDisplay_MethArgs[]={
  {&TA_TAPtr,NULL,"updtr","((void *)0)"},
  NULL};
static MethodDef_data TA_EnviroView_MethodDef[]={
  {&TA_void,NULL,"SetColorSpec"," set the color spectrum to use for color-coding values (NULL = use default)","MENU MENU_ON_Actions NULL_OK ","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_SetColorSpec_stub,TA_EnviroView_SetColorSpec_MethArgs},
  {&TA_void,NULL,"SetLayout"," set the order in which events are displayed when selected (horizontal = fill horizontally then vertically, vertical = vertical then horizontal)","MENU ","",
    0,1,0,0,NULL,cssElCFun_EnviroView_SetLayout_stub,TA_EnviroView_SetLayout_MethArgs},
  {&TA_void,NULL,"SetBorder"," display a line border around the event values, or not (not is appropriate for continuous images)","MENU ","",
    0,1,0,0,NULL,cssElCFun_EnviroView_SetBorder_stub,TA_EnviroView_SetBorder_MethArgs},
  {&TA_void,NULL,"SetViewFontSize"," set the point size of the view labels font (used for pattern names, etc).","MENU MENU_SEP_BEFORE ","",
    0,1,0,0,NULL,cssElCFun_EnviroView_SetViewFontSize_stub,TA_EnviroView_SetViewFontSize_MethArgs},
  {&TA_void,NULL,"SetValueFontSize"," set the point size of the value font (used for unit values)","MENU ","",
    0,1,0,0,NULL,cssElCFun_EnviroView_SetValueFontSize_stub,TA_EnviroView_SetValueFontSize_MethArgs},
  {&TA_void,NULL,"SelectEvents"," select events to view starting with given event continuing until n (-1 = to end)","MENU MENU_SEP_BEFORE ","",
    0,2,0,0,NULL,cssElCFun_EnviroView_SelectEvents_stub,TA_EnviroView_SelectEvents_MethArgs},
  {&TA_void,NULL,"DeselectEvents"," deselect events to view starting with given event continuing until n (-1 = to end)","MENU ","",
    0,2,0,0,NULL,cssElCFun_EnviroView_DeselectEvents_stub,TA_EnviroView_DeselectEvents_MethArgs},
  {&TA_void,NULL,"SelectEvent"," select given event for display","","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_SelectEvent_stub,TA_EnviroView_SelectEvent_MethArgs},
  {&TA_void,NULL,"DeselectEvent"," deselect given event for display","","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_DeselectEvent_stub,TA_EnviroView_DeselectEvent_MethArgs},
  {&TA_void,NULL,"SelectEventGp"," select given event group for display","","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_SelectEventGp_stub,TA_EnviroView_SelectEventGp_MethArgs},
  {&TA_void,NULL,"SelectGpEvents"," select all the events within given event group (and deselect group itself) for display","","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_SelectGpEvents_stub,TA_EnviroView_SelectGpEvents_MethArgs},
  {&TA_void,NULL,"DeselectEventGp"," deselect given event group for display","","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_DeselectEventGp_stub,TA_EnviroView_DeselectEventGp_MethArgs},
  {&TA_void,NULL,"DeselectAllEvents"," deselect all events for display","","",
    0,0,-1,0,NULL,cssElCFun_EnviroView_DeselectAllEvents_stub,NULL},
  {&TA_void,NULL,"SetEventSpec"," Set event spec for selected events","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_SetEventSpec_stub,TA_EnviroView_SetEventSpec_MethArgs},
  {&TA_void,NULL,"ChangeEventType"," Change event types for selected events","MENU TYPE_Event ","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_ChangeEventType_stub,TA_EnviroView_ChangeEventType_MethArgs},
  {&TA_void,NULL,"ChangeEventGpType"," Change event group types for selected event groups","MENU TYPE_Event_MGroup ","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_ChangeEventGpType_stub,TA_EnviroView_ChangeEventGpType_MethArgs},
  {&TA_void,NULL,"DuplicateEvents"," Duplicate selected events","MENU ","",
    0,0,-1,0,NULL,cssElCFun_EnviroView_DuplicateEvents_stub,NULL},
  {&TA_void,NULL,"DuplicateEventGps"," Duplicate selected event groups","MENU ","",
    0,0,-1,0,NULL,cssElCFun_EnviroView_DuplicateEventGps_stub,NULL},
  {&TA_void,NULL,"SetPatLabel"," set display of events to include pattern label displaying pat_lbl info, specified as Type::member, or NONE for nothing","","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_SetPatLabel_stub,TA_EnviroView_SetPatLabel_MethArgs},
  {&TA_void,NULL,"SetEventLabel"," set display of events to include event label displaying evt_lbl info, specified as Type::member, or NONE for nothing","","",
    0,1,-1,0,NULL,cssElCFun_EnviroView_SetEventLabel_stub,TA_EnviroView_SetEventLabel_MethArgs},
  {&TA_void,NULL,"InitDisplay","","","",
    0,0,-1,0,NULL,cssElCFun_EnviroView_InitDisplay_stub,NULL},
  {&TA_void,NULL,"UpdateDisplay"," obs void	UpdateMenus_impl();","","",
    0,1,0,0,NULL,cssElCFun_EnviroView_UpdateDisplay_stub,TA_EnviroView_UpdateDisplay_MethArgs},
  NULL};

// Init Function


static bool ta_Init_pdp_done = false;

void ta_Init_pdp() {
  TypeDef* sbt;

  if(ta_Init_pdp_done) return;
  ta_Init_pdp_done = true;

  ta_Init_ta();
  ta_Init_tamisc();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_BaseSpec);
    TAI_BaseSpec = new BaseSpec;
    TA_BaseSpec.AddParFormal(&TA_class);
    TA_BaseSpec.AddParCache(&TA_taBase);
    TA_BaseSpec.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_BaseSpec,TA_BaseSpec_MemberDef);
    tac_AddMethods(TA_BaseSpec,TA_BaseSpec_MethodDef);
  taMisc::types.Add(&TA_BaseSpec_MGroup);
    TAI_BaseSpec_MGroup = new BaseSpec_MGroup;
    TA_BaseSpec_MGroup.AddParFormal(&TA_class);
    TA_BaseSpec_MGroup.AddParCache(&TA_taBase);
    TA_BaseSpec_MGroup.AddClassPar(&TA_taBase_Group,0);
    tac_AddMethods(TA_BaseSpec_MGroup,TA_BaseSpec_MGroup_MethodDef);
  taMisc::types.Add(&TA_Process);
    TAI_Process = new Process;
    TA_Process.AddParFormal(&TA_class);
    TA_Process.AddParCache(&TA_taBase);
    TA_Process.AddClassPar(&TA_taNBase,(int)((unsigned long)((taNBase*)TAI_Process)-(unsigned long)TAI_Process), &TA_ScriptBase,(int)((unsigned long)((ScriptBase*)TAI_Process)-(unsigned long)TAI_Process));
    tac_AddEnum(TA_Process, "Type", "", "", "", "", TA_Process_Type);
    tac_AddMembers(TA_Process,TA_Process_MemberDef);
    tac_AddMethods(TA_Process,TA_Process_MethodDef);
  taMisc::types.Add(&TA_SigmoidSpec);
    TAI_SigmoidSpec = new SigmoidSpec;
    TA_SigmoidSpec.AddParFormal(&TA_class);
    TA_SigmoidSpec.AddParCache(&TA_taBase);
    TA_SigmoidSpec.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_SigmoidSpec,TA_SigmoidSpec_MemberDef);
    tac_AddMethods(TA_SigmoidSpec,TA_SigmoidSpec_MethodDef);
  taMisc::types.Add(&TA_ConSpec);
    TAI_ConSpec = new ConSpec;
    TA_ConSpec.AddParFormal(&TA_class);
    TA_ConSpec.AddParCache(&TA_taBase);
    TA_ConSpec.AddClassPar(&TA_BaseSpec,0);
    tac_AddMembers(TA_ConSpec,TA_ConSpec_MemberDef);
    tac_AddMethods(TA_ConSpec,TA_ConSpec_MethodDef);
  taMisc::types.Add(&TA_Connection);
    TAI_Connection = new Connection;
    TA_Connection.AddParFormal(&TA_class);
    TA_Connection.AddParCache(&TA_taBase);
    TA_Connection.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_Connection,TA_Connection_MemberDef);
  taMisc::types.Add(&TA_Con_Group);
    TAI_Con_Group = new Con_Group;
    TA_Con_Group.AddParFormal(&TA_class);
    TA_Con_Group.AddParCache(&TA_taBase);
    TA_Con_Group.AddClassPar(&TA_taBase_Group,0);
    tac_AddEnum(TA_Con_Group, "WtSaveFormat", "", "", "", "", TA_Con_Group_WtSaveFormat);
    tac_AddMembers(TA_Con_Group,TA_Con_Group_MemberDef);
    tac_AddMethods(TA_Con_Group,TA_Con_Group_MethodDef);
  taMisc::types.Add(&TA_UnitSpec);
    TAI_UnitSpec = new UnitSpec;
    TA_UnitSpec.AddParFormal(&TA_class);
    TA_UnitSpec.AddParCache(&TA_taBase);
    TA_UnitSpec.AddClassPar(&TA_BaseSpec,0);
    tac_AddMembers(TA_UnitSpec,TA_UnitSpec_MemberDef);
    tac_AddMethods(TA_UnitSpec,TA_UnitSpec_MethodDef);
  taMisc::types.Add(&TA_Unit);
    TAI_Unit = new Unit;
    TA_Unit.AddParFormal(&TA_class);
    TA_Unit.AddParCache(&TA_taBase);
    TA_Unit.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_Unit, "ExtType", " indicates type of external input unit received", "", "", "", TA_Unit_ExtType);
    tac_AddMembers(TA_Unit,TA_Unit_MemberDef);
    tac_AddMethods(TA_Unit,TA_Unit_MethodDef);
  taMisc::types.Add(&TA_ProjectionSpec);
    TAI_ProjectionSpec = new ProjectionSpec;
    TA_ProjectionSpec.AddParFormal(&TA_class);
    TA_ProjectionSpec.AddParCache(&TA_taBase);
    TA_ProjectionSpec.AddClassPar(&TA_BaseSpec,0);
    tac_AddMembers(TA_ProjectionSpec,TA_ProjectionSpec_MemberDef);
    tac_AddMethods(TA_ProjectionSpec,TA_ProjectionSpec_MethodDef);
  taMisc::types.Add(&TA_Projection);
    TAI_Projection = new Projection;
    TA_Projection.AddParFormal(&TA_class);
    TA_Projection.AddParCache(&TA_taBase);
    TA_Projection.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_Projection, "PrjnSource", "", "", "", "", TA_Projection_PrjnSource);
    tac_AddMembers(TA_Projection,TA_Projection_MemberDef);
    tac_AddMethods(TA_Projection,TA_Projection_MethodDef);
  taMisc::types.Add(&TA_LayerSpec);
    TAI_LayerSpec = new LayerSpec;
    TA_LayerSpec.AddParFormal(&TA_class);
    TA_LayerSpec.AddParCache(&TA_taBase);
    TA_LayerSpec.AddClassPar(&TA_BaseSpec,0);
    tac_AddMethods(TA_LayerSpec,TA_LayerSpec_MethodDef);
  taMisc::types.Add(&TA_Layer);
    TAI_Layer = new Layer;
    TA_Layer.AddParFormal(&TA_class);
    TA_Layer.AddParCache(&TA_taBase);
    TA_Layer.AddClassPar(&TA_taNBase,(int)((unsigned long)((taNBase*)TAI_Layer)-(unsigned long)TAI_Layer), &TA_IDataSource,(int)((unsigned long)((IDataSource*)TAI_Layer)-(unsigned long)TAI_Layer));
    tac_AddEnum(TA_Layer, "DMemDist", "", "", "", "", TA_Layer_DMemDist);
    tac_AddMembers(TA_Layer,TA_Layer_MemberDef);
    tac_AddMethods(TA_Layer,TA_Layer_MethodDef);
  taMisc::types.Add(&TA_Network);
    TAI_Network = new Network;
    TA_Network.AddParFormal(&TA_class);
    TA_Network.AddParCache(&TA_taBase);
    TA_Network.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_Network, "LayerLayout", " Visual mode of layer position/view", "", "", "", TA_Network_LayerLayout);
    tac_AddEnum(TA_Network, "Usr1SaveFmt", " how to save network on -USR1 signal", "", "", "", TA_Network_Usr1SaveFmt);
    tac_AddEnum(TA_Network, "DMem_SyncLevel", "", "", "", "", TA_Network_DMem_SyncLevel);
    tac_AddEnum(TA_Network, "WtSaveFormat", "", "", "", "", TA_Network_WtSaveFormat);
    tac_AddMembers(TA_Network,TA_Network_MemberDef);
    tac_AddMethods(TA_Network,TA_Network_MethodDef);
  taMisc::types.Add(&TA_Project);
    TAI_Project = new Project;
    TA_Project.AddParFormal(&TA_class);
    TA_Project.AddParCache(&TA_taBase);
    TA_Project.AddClassPar(&TA_taFBase,0);
    tac_AddEnum(TA_Project, "ViewColors", " indicies for view_colors", "", "", "", TA_Project_ViewColors);
    tac_AddMembers(TA_Project,TA_Project_MemberDef);
    tac_AddMethods(TA_Project,TA_Project_MethodDef);
  taMisc::types.Add(&TA_PDPRoot);
    TAI_PDPRoot = new PDPRoot;
    TA_PDPRoot.AddParFormal(&TA_class);
    TA_PDPRoot.AddParCache(&TA_taBase);
    TA_PDPRoot.AddClassPar(&TA_taNBase,(int)((unsigned long)((taNBase*)TAI_PDPRoot)-(unsigned long)TAI_PDPRoot), &TA_IApp,(int)((unsigned long)((IApp*)TAI_PDPRoot)-(unsigned long)TAI_PDPRoot));
    tac_AddMembers(TA_PDPRoot,TA_PDPRoot_MemberDef);
    tac_AddMethods(TA_PDPRoot,TA_PDPRoot_MethodDef);
  taMisc::types.Add(&TA_EventSpec);
    TAI_EventSpec = new EventSpec;
    TA_EventSpec.AddParFormal(&TA_class);
    TA_EventSpec.AddParCache(&TA_taBase);
    TA_EventSpec.AddClassPar(&TA_BaseSpec,0);
    tac_AddEnum(TA_EventSpec, "PatternLayout", "", "", "", "", TA_EventSpec_PatternLayout);
    tac_AddMembers(TA_EventSpec,TA_EventSpec_MemberDef);
    tac_AddMethods(TA_EventSpec,TA_EventSpec_MethodDef);
  taMisc::types.Add(&TA_Pattern);
    TAI_Pattern = new Pattern;
    TA_Pattern.AddParFormal(&TA_class);
    TA_Pattern.AddParCache(&TA_taBase);
    TA_Pattern.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_Pattern,TA_Pattern_MemberDef);
  taMisc::types.Add(&TA_Event);
    TAI_Event = new Event;
    TA_Event.AddParFormal(&TA_class);
    TA_Event.AddParCache(&TA_taBase);
    TA_Event.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_Event,TA_Event_MemberDef);
    tac_AddMethods(TA_Event,TA_Event_MethodDef);
  taMisc::types.Add(&TA_Environment);
    TAI_Environment = new Environment;
    TA_Environment.AddParFormal(&TA_class);
    TA_Environment.AddParCache(&TA_taBase);
    TA_Environment.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_Environment, "TextFmt", "", "", "", "", TA_Environment_TextFmt);
    tac_AddEnum(TA_Environment, "DistMatFmt", " distance matrix format", "", "", "", TA_Environment_DistMatFmt);
    tac_AddMembers(TA_Environment,TA_Environment_MemberDef);
    tac_AddMethods(TA_Environment,TA_Environment_MethodDef);
  taMisc::types.Add(&TA_ScriptEnv);
    TAI_ScriptEnv = new ScriptEnv;
    TA_ScriptEnv.AddParFormal(&TA_class);
    TA_ScriptEnv.AddParCache(&TA_taBase);
    TA_ScriptEnv.AddClassPar(&TA_Environment,(int)((unsigned long)((Environment*)TAI_ScriptEnv)-(unsigned long)TAI_ScriptEnv), &TA_ScriptBase,(int)((unsigned long)((ScriptBase*)TAI_ScriptEnv)-(unsigned long)TAI_ScriptEnv));
    tac_AddMembers(TA_ScriptEnv,TA_ScriptEnv_MemberDef);
    tac_AddMethods(TA_ScriptEnv,TA_ScriptEnv_MethodDef);
  taMisc::types.Add(&TA_TimeEnvironment);
    TAI_TimeEnvironment = new TimeEnvironment;
    TA_TimeEnvironment.AddParFormal(&TA_class);
    TA_TimeEnvironment.AddParCache(&TA_taBase);
    TA_TimeEnvironment.AddClassPar(&TA_Environment,0);
    tac_AddEnum(TA_TimeEnvironment, "Interpolate", "", "", "", "", TA_TimeEnvironment_Interpolate);
    tac_AddMembers(TA_TimeEnvironment,TA_TimeEnvironment_MemberDef);
  taMisc::types.Add(&TA_Stat);
    TAI_Stat = new Stat;
    TA_Stat.AddParFormal(&TA_class);
    TA_Stat.AddParCache(&TA_taBase);
    TA_Stat.AddClassPar(&TA_Process,0);
    tac_AddEnum(TA_Stat, "LoopInitType", "", "", "", "", TA_Stat_LoopInitType);
    tac_AddMembers(TA_Stat,TA_Stat_MemberDef);
    tac_AddMethods(TA_Stat,TA_Stat_MethodDef);
  taMisc::types.Add(&TA_SE_Stat);
    TAI_SE_Stat = new SE_Stat;
    TA_SE_Stat.AddParFormal(&TA_class);
    TA_SE_Stat.AddParCache(&TA_taBase);
    TA_SE_Stat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_SE_Stat,TA_SE_Stat_MemberDef);
  taMisc::types.Add(&TA_MonitorStat);
    TAI_MonitorStat = new MonitorStat;
    TA_MonitorStat.AddParFormal(&TA_class);
    TA_MonitorStat.AddParCache(&TA_taBase);
    TA_MonitorStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_MonitorStat,TA_MonitorStat_MemberDef);
    tac_AddMethods(TA_MonitorStat,TA_MonitorStat_MethodDef);
  taMisc::types.Add(&TA_ClosestEventStat);
    TAI_ClosestEventStat = new ClosestEventStat;
    TA_ClosestEventStat.AddParFormal(&TA_class);
    TA_ClosestEventStat.AddParCache(&TA_taBase);
    TA_ClosestEventStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_ClosestEventStat,TA_ClosestEventStat_MemberDef);
  taMisc::types.Add(&TA_CyclesToSettle);
    TAI_CyclesToSettle = new CyclesToSettle;
    TA_CyclesToSettle.AddParFormal(&TA_class);
    TA_CyclesToSettle.AddParCache(&TA_taBase);
    TA_CyclesToSettle.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_CyclesToSettle,TA_CyclesToSettle_MemberDef);
    tac_AddMethods(TA_CyclesToSettle,TA_CyclesToSettle_MethodDef);
  taMisc::types.Add(&TA_ScriptStat);
    TAI_ScriptStat = new ScriptStat;
    TA_ScriptStat.AddParFormal(&TA_class);
    TA_ScriptStat.AddParCache(&TA_taBase);
    TA_ScriptStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_ScriptStat,TA_ScriptStat_MemberDef);
    tac_AddMethods(TA_ScriptStat,TA_ScriptStat_MethodDef);
  taMisc::types.Add(&TA_CompareStat);
    TAI_CompareStat = new CompareStat;
    TA_CompareStat.AddParFormal(&TA_class);
    TA_CompareStat.AddParCache(&TA_taBase);
    TA_CompareStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_CompareStat,TA_CompareStat_MemberDef);
    tac_AddMethods(TA_CompareStat,TA_CompareStat_MethodDef);
  taMisc::types.Add(&TA_EpochCounterStat);
    TAI_EpochCounterStat = new EpochCounterStat;
    TA_EpochCounterStat.AddParFormal(&TA_class);
    TA_EpochCounterStat.AddParCache(&TA_taBase);
    TA_EpochCounterStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_EpochCounterStat,TA_EpochCounterStat_MemberDef);
  taMisc::types.Add(&TA_ProcCounterStat);
    TAI_ProcCounterStat = new ProcCounterStat;
    TA_ProcCounterStat.AddParFormal(&TA_class);
    TA_ProcCounterStat.AddParCache(&TA_taBase);
    TA_ProcCounterStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_ProcCounterStat,TA_ProcCounterStat_MemberDef);
    tac_AddMethods(TA_ProcCounterStat,TA_ProcCounterStat_MethodDef);
  taMisc::types.Add(&TA_SchedProcess);
    TAI_SchedProcess = new SchedProcess;
    TA_SchedProcess.AddParFormal(&TA_class);
    TA_SchedProcess.AddParCache(&TA_taBase);
    TA_SchedProcess.AddClassPar(&TA_Process,0);
    tac_AddEnum(TA_SchedProcess, "StatLoc", " locations for statistics", "", "", "", TA_SchedProcess_StatLoc);
    tac_AddEnum(TA_SchedProcess, "ProcLoc", " locations for processes", "", "", "", TA_SchedProcess_ProcLoc);
    tac_AddEnum(TA_SchedProcess, "SchedProcLoc", " locations for schedule processes", "", "", "", TA_SchedProcess_SchedProcLoc);
    tac_AddMembers(TA_SchedProcess,TA_SchedProcess_MemberDef);
    tac_AddMethods(TA_SchedProcess,TA_SchedProcess_MethodDef);
  taMisc::types.Add(&TA_BatchProcess);
    TAI_BatchProcess = new BatchProcess;
    TA_BatchProcess.AddParFormal(&TA_class);
    TA_BatchProcess.AddParCache(&TA_taBase);
    TA_BatchProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_BatchProcess,TA_BatchProcess_MemberDef);
  taMisc::types.Add(&TA_TrainProcess);
    TAI_TrainProcess = new TrainProcess;
    TA_TrainProcess.AddParFormal(&TA_class);
    TA_TrainProcess.AddParCache(&TA_taBase);
    TA_TrainProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_TrainProcess,TA_TrainProcess_MemberDef);
  taMisc::types.Add(&TA_NEpochProcess);
    TAI_NEpochProcess = new NEpochProcess;
    TA_NEpochProcess.AddParFormal(&TA_class);
    TA_NEpochProcess.AddParCache(&TA_taBase);
    TA_NEpochProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_NEpochProcess,TA_NEpochProcess_MemberDef);
  taMisc::types.Add(&TA_EpochProcess);
    TAI_EpochProcess = new EpochProcess;
    TA_EpochProcess.AddParFormal(&TA_class);
    TA_EpochProcess.AddParCache(&TA_taBase);
    TA_EpochProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddEnum(TA_EpochProcess, "Order", "", "", "", "", TA_EpochProcess_Order);
    tac_AddEnum(TA_EpochProcess, "WtUpdate", "", "", "", "", TA_EpochProcess_WtUpdate);
    tac_AddMembers(TA_EpochProcess,TA_EpochProcess_MemberDef);
    tac_AddMethods(TA_EpochProcess,TA_EpochProcess_MethodDef);
  taMisc::types.Add(&TA_SequenceProcess);
    TAI_SequenceProcess = new SequenceProcess;
    TA_SequenceProcess.AddParFormal(&TA_class);
    TA_SequenceProcess.AddParCache(&TA_taBase);
    TA_SequenceProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddEnum(TA_SequenceProcess, "Order", "", "", "", "", TA_SequenceProcess_Order);
    tac_AddEnum(TA_SequenceProcess, "StateInit", " ways of initializing the state of the network", "", "", "", TA_SequenceProcess_StateInit);
    tac_AddMembers(TA_SequenceProcess,TA_SequenceProcess_MemberDef);
    tac_AddMethods(TA_SequenceProcess,TA_SequenceProcess_MethodDef);
  taMisc::types.Add(&TA_TrialProcess);
    TAI_TrialProcess = new TrialProcess;
    TA_TrialProcess.AddParFormal(&TA_class);
    TA_TrialProcess.AddParCache(&TA_taBase);
    TA_TrialProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_TrialProcess,TA_TrialProcess_MemberDef);
  taMisc::types.Add(&TA_SettleProcess);
    TAI_SettleProcess = new SettleProcess;
    TA_SettleProcess.AddParFormal(&TA_class);
    TA_SettleProcess.AddParCache(&TA_taBase);
    TA_SettleProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_SettleProcess,TA_SettleProcess_MemberDef);
  taMisc::types.Add(&TA_CycleProcess);
    TAI_CycleProcess = new CycleProcess;
    TA_CycleProcess.AddParFormal(&TA_class);
    TA_CycleProcess.AddParCache(&TA_taBase);
    TA_CycleProcess.AddClassPar(&TA_SchedProcess,0);
  taMisc::types.Add(&TA_SequenceEpoch);
    TAI_SequenceEpoch = new SequenceEpoch;
    TA_SequenceEpoch.AddParFormal(&TA_class);
    TA_SequenceEpoch.AddParCache(&TA_taBase);
    TA_SequenceEpoch.AddClassPar(&TA_EpochProcess,0);
    tac_AddEnum(TA_SequenceEpoch, "SmallBatchType", "", "", "", "", TA_SequenceEpoch_SmallBatchType);
    tac_AddMembers(TA_SequenceEpoch,TA_SequenceEpoch_MemberDef);
  taMisc::types.Add(&TA_PDPLog);
    TAI_PDPLog = new PDPLog;
    TA_PDPLog.AddParFormal(&TA_class);
    TA_PDPLog.AddParCache(&TA_taBase);
    TA_PDPLog.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_PDPLog,TA_PDPLog_MemberDef);
    tac_AddMethods(TA_PDPLog,TA_PDPLog_MethodDef);
  taMisc::types.Add(&TA_TextLog);
    TAI_TextLog = new TextLog;
    TA_TextLog.AddParFormal(&TA_class);
    TA_TextLog.AddParCache(&TA_taBase);
    TA_TextLog.AddClassPar(&TA_PDPLog,0);
  taMisc::types.Add(&TA_GraphLog);
    TAI_GraphLog = new GraphLog;
    TA_GraphLog.AddParFormal(&TA_class);
    TA_GraphLog.AddParCache(&TA_taBase);
    TA_GraphLog.AddClassPar(&TA_PDPLog,0);
  taMisc::types.Add(&TA_GridLog);
    TAI_GridLog = new GridLog;
    TA_GridLog.AddParFormal(&TA_class);
    TA_GridLog.AddParCache(&TA_taBase);
    TA_GridLog.AddClassPar(&TA_TextLog,0);
  taMisc::types.Add(&TA_PDPView);
    TAI_PDPView = new PDPView;
    TA_PDPView.AddParFormal(&TA_class);
    TA_PDPView.AddParCache(&TA_taBase);
    TA_PDPView.AddClassPar(&TA_DataViewer,0);
    tac_AddMethods(TA_PDPView,TA_PDPView_MethodDef);
  taMisc::types.Add(&TA_pdpDataViewer);
    TAI_pdpDataViewer = new pdpDataViewer;
    TA_pdpDataViewer.AddParFormal(&TA_class);
    TA_pdpDataViewer.AddClassPar(&TA_T3DataViewer,0);
    tac_AddMethods(TA_pdpDataViewer,TA_pdpDataViewer_MethodDef);
  taMisc::types.Add(&TA_LogView);
    TAI_LogView = new LogView;
    TA_LogView.AddParFormal(&TA_class);
    TA_LogView.AddParCache(&TA_taBase);
    TA_LogView.AddClassPar(&TA_T3DataViewPar,0);
    tac_AddMembers(TA_LogView,TA_LogView_MemberDef);
    tac_AddMethods(TA_LogView,TA_LogView_MethodDef);
  taMisc::types.Add(&TA_GridLogView);
    TAI_GridLogView = new GridLogView;
    TA_GridLogView.AddParFormal(&TA_class);
    TA_GridLogView.AddParCache(&TA_taBase);
    TA_GridLogView.AddClassPar(&TA_LogView,0);
    tac_AddMembers(TA_GridLogView,TA_GridLogView_MemberDef);
    tac_AddMethods(TA_GridLogView,TA_GridLogView_MethodDef);
  taMisc::types.Add(&TA_NetLogView);
    TAI_NetLogView = new NetLogView;
    TA_NetLogView.AddParFormal(&TA_class);
    TA_NetLogView.AddParCache(&TA_taBase);
    TA_NetLogView.AddClassPar(&TA_LogView,0);
    tac_AddMembers(TA_NetLogView,TA_NetLogView_MemberDef);
    tac_AddMethods(TA_NetLogView,TA_NetLogView_MethodDef);
  taMisc::types.Add(&TA_GraphLogView);
    TAI_GraphLogView = new GraphLogView;
    TA_GraphLogView.AddParFormal(&TA_class);
    TA_GraphLogView.AddParCache(&TA_taBase);
    TA_GraphLogView.AddClassPar(&TA_LogView,0);
    tac_AddMembers(TA_GraphLogView,TA_GraphLogView_MemberDef);
    tac_AddMethods(TA_GraphLogView,TA_GraphLogView_MethodDef);
  taMisc::types.Add(&TA_ProcessDialog);
    TAI_ProcessDialog = new ProcessDialog;
    TA_ProcessDialog.AddParFormal(&TA_class);
    TA_ProcessDialog.AddClassPar(&TA_taiEditDataHost,0);
  taMisc::types.Add(&TA_PDPRoot_ptr);
    TA_PDPRoot_ptr.AddParents(&TA_PDPRoot);
  taMisc::types.Add(&TA_Project_ptr);
    TA_Project_ptr.AddParents(&TA_Project);
  taMisc::types.Add(&TA_PDPLog_ptr);
    TA_PDPLog_ptr.AddParents(&TA_PDPLog);
  taMisc::types.Add(&TA_Environment_ptr);
    TA_Environment_ptr.AddParents(&TA_Environment);
  taMisc::types.Add(&TA_Network_ptr);
    TA_Network_ptr.AddParents(&TA_Network);
  taMisc::types.Add(&TA_BaseSpec_MGroup_ptr);
    TA_BaseSpec_MGroup_ptr.AddParents(&TA_BaseSpec_MGroup);
  taMisc::types.Add(&TA_BaseSpec_ptr);
    TA_BaseSpec_ptr.AddParents(&TA_BaseSpec);
  taMisc::types.Add(&TA_Process_ptr);
    TA_Process_ptr.AddParents(&TA_Process);
  taMisc::types.Add(&TA_pdpMisc);
    TAI_pdpMisc = new pdpMisc;
    TA_pdpMisc.AddParFormal(&TA_class);
    tac_AddMembers(TA_pdpMisc,TA_pdpMisc_MemberDef);
    tac_AddMethods(TA_pdpMisc,TA_pdpMisc_MethodDef);
  taMisc::types.Add(&TA_PosGroup);
    TAI_PosGroup = new PosGroup;
    TA_PosGroup.AddParFormal(&TA_class);
    TA_PosGroup.AddParCache(&TA_taBase);
    TA_PosGroup.AddClassPar(&TA_taBase_Group,0);
    tac_AddMembers(TA_PosGroup,TA_PosGroup_MemberDef);
  taMisc::types.Add(&TA_const_BaseSpec_MGroup);
    TA_const_BaseSpec_MGroup.AddParents(&TA_const, &TA_BaseSpec_MGroup);
  taMisc::types.Add(&TA_const_PosGroup);
    TA_const_PosGroup.AddParents(&TA_const, &TA_PosGroup);
  taMisc::types.Add(&TA_const_BaseSpec_MGroup_ref);
    TA_const_BaseSpec_MGroup_ref.AddParents(&TA_const_BaseSpec_MGroup);
  taMisc::types.Add(&TA_const_PosGroup_ref);
    TA_const_PosGroup_ref.AddParents(&TA_const_PosGroup);
  taMisc::types.Add(&TA_const_BaseSpec);
    TA_const_BaseSpec.AddParents(&TA_const, &TA_BaseSpec);
  taMisc::types.Add(&TA_const_BaseSpec_ref);
    TA_const_BaseSpec_ref.AddParents(&TA_const_BaseSpec);
  taMisc::types.Add(&TA_BaseSubSpec);
    TAI_BaseSubSpec = new BaseSubSpec;
    TA_BaseSubSpec.AddParFormal(&TA_class);
    TA_BaseSubSpec.AddParCache(&TA_taBase);
    TA_BaseSubSpec.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_BaseSubSpec,TA_BaseSubSpec_MemberDef);
    tac_AddMethods(TA_BaseSubSpec,TA_BaseSubSpec_MethodDef);
  taMisc::types.Add(&TA_BaseSubSpec_ptr);
    TA_BaseSubSpec_ptr.AddParents(&TA_BaseSubSpec);
  taMisc::types.Add(&TA_const_BaseSubSpec);
    TA_const_BaseSubSpec.AddParents(&TA_const, &TA_BaseSubSpec);
  taMisc::types.Add(&TA_PatternSpec);
    TAI_PatternSpec = new PatternSpec;
    TA_PatternSpec.AddParFormal(&TA_class);
    TA_PatternSpec.AddParCache(&TA_taBase);
    TA_PatternSpec.AddClassPar(&TA_BaseSubSpec,0);
    tac_AddEnum(TA_PatternSpec, "PatTypes", "", "", "", "", TA_PatternSpec_PatTypes);
    tac_AddEnum(TA_PatternSpec, "PatLayer", "", "", "", "", TA_PatternSpec_PatLayer);
    tac_AddEnum(TA_PatternSpec, "PatFlags", " bit-flags for the flag field on pattern", "", "", "", TA_PatternSpec_PatFlags);
    tac_AddEnum(TA_PatternSpec, "LayerFlags", " how to flag the layer's external input status", "", "", "", TA_PatternSpec_LayerFlags);
    tac_AddEnum(TA_PatternSpec, "PatUseFlags", " control use of the flag field", "", "", "", TA_PatternSpec_PatUseFlags);
    tac_AddMembers(TA_PatternSpec,TA_PatternSpec_MemberDef);
    tac_AddMethods(TA_PatternSpec,TA_PatternSpec_MethodDef);
  taMisc::types.Add(&TA_const_BaseSubSpec_ref);
    TA_const_BaseSubSpec_ref.AddParents(&TA_const_BaseSubSpec);
  taMisc::types.Add(&TA_SpecPtr_impl);
    TAI_SpecPtr_impl = new SpecPtr_impl;
    TA_SpecPtr_impl.AddParFormal(&TA_class);
    TA_SpecPtr_impl.AddParCache(&TA_taBase);
    TA_SpecPtr_impl.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_SpecPtr_impl,TA_SpecPtr_impl_MemberDef);
    tac_AddMethods(TA_SpecPtr_impl,TA_SpecPtr_impl_MethodDef);
  taMisc::types.Add(&TA_const_SpecPtr_impl);
    TA_const_SpecPtr_impl.AddParents(&TA_const, &TA_SpecPtr_impl);
  taMisc::types.Add(&TA_const_SpecPtr_impl_ref);
    TA_const_SpecPtr_impl_ref.AddParents(&TA_const_SpecPtr_impl);
  taMisc::types.Add(&TA_SpecPtr);
    TA_SpecPtr.AddParFormal(&TA_class, &TA_template);
    TA_SpecPtr.AddParCache(&TA_taBase);
    TA_SpecPtr.AddParents(&TA_SpecPtr_impl);
  taMisc::types.Add(&TA_const_SpecPtr);
    TA_const_SpecPtr.AddParents(&TA_const, &TA_SpecPtr);
  taMisc::types.Add(&TA_const_SigmoidSpec);
    TA_const_SigmoidSpec.AddParents(&TA_const, &TA_SigmoidSpec);
  taMisc::types.Add(&TA_const_SpecPtr_ref);
    TA_const_SpecPtr_ref.AddParents(&TA_const_SpecPtr);
  taMisc::types.Add(&TA_const_SigmoidSpec_ref);
    TA_const_SigmoidSpec_ref.AddParents(&TA_const_SigmoidSpec);
  taMisc::types.Add(&TA_SchedItem);
    TAI_SchedItem = new SchedItem;
    TA_SchedItem.AddParFormal(&TA_class);
    TA_SchedItem.AddParCache(&TA_taBase);
    TA_SchedItem.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_SchedItem,TA_SchedItem_MemberDef);
    tac_AddMethods(TA_SchedItem,TA_SchedItem_MethodDef);
  taMisc::types.Add(&TA_taList_SchedItem_);
    TAI_taList_SchedItem_ = new taList<SchedItem>;
    TA_taList_SchedItem_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_SchedItem_.AddParCache(&TA_taBase);
    TA_taList_SchedItem_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_SchedItem_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_SchedItem_.sub_types.FindName("const_taBase"));
    TA_taList_SchedItem_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_SchedItem_.sub_types.Add(sbt);
    sbt = new TypeDef("SchedItem_ptr", 1, 1, 0);
    sbt->AddParents(&TA_SchedItem);
    TA_taList_SchedItem_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_SchedItem_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_SchedItem__Orientation);
    tac_AddMethods(TA_taList_SchedItem_,TA_taList_SchedItem__MethodDef);
  taMisc::types.Add(&TA_const_SchedItem);
    TA_const_SchedItem.AddParents(&TA_const, &TA_SchedItem);
  taMisc::types.Add(&TA_const_SchedItem_ref);
    TA_const_SchedItem_ref.AddParents(&TA_const_SchedItem);
  taMisc::types.Add(&TA_Schedule);
    TAI_Schedule = new Schedule;
    TA_Schedule.AddParFormal(&TA_class);
    TA_Schedule.AddParCache(&TA_taBase);
    TA_Schedule.AddClassPar(&TA_taList_SchedItem_,0);
    tac_AddMembers(TA_Schedule,TA_Schedule_MemberDef);
    tac_AddMethods(TA_Schedule,TA_Schedule_MethodDef);
  taMisc::types.Add(&TA_const_Connection);
    TA_const_Connection.AddParents(&TA_const, &TA_Connection);
  taMisc::types.Add(&TA_const_Schedule);
    TA_const_Schedule.AddParents(&TA_const, &TA_Schedule);
  taMisc::types.Add(&TA_const_Connection_ref);
    TA_const_Connection_ref.AddParents(&TA_const_Connection);
  taMisc::types.Add(&TA_const_Schedule_ref);
    TA_const_Schedule_ref.AddParents(&TA_const_Schedule);
  taMisc::types.Add(&TA_WeightLimits);
    TAI_WeightLimits = new WeightLimits;
    TA_WeightLimits.AddParFormal(&TA_class);
    TA_WeightLimits.AddParCache(&TA_taBase);
    TA_WeightLimits.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_WeightLimits, "LimitType", "", "", "", "", TA_WeightLimits_LimitType);
    tac_AddMembers(TA_WeightLimits,TA_WeightLimits_MemberDef);
    tac_AddMethods(TA_WeightLimits,TA_WeightLimits_MethodDef);
  taMisc::types.Add(&TA_Connection_ptr);
    TA_Connection_ptr.AddParents(&TA_Connection);
  taMisc::types.Add(&TA_const_WeightLimits);
    TA_const_WeightLimits.AddParents(&TA_const, &TA_WeightLimits);
  taMisc::types.Add(&TA_Unit_ptr);
    TA_Unit_ptr.AddParents(&TA_Unit);
  taMisc::types.Add(&TA_const_WeightLimits_ref);
    TA_const_WeightLimits_ref.AddParents(&TA_const_WeightLimits);
  taMisc::types.Add(&TA_Con_Group_ptr);
    TA_Con_Group_ptr.AddParents(&TA_Con_Group);
  taMisc::types.Add(&TA_Layer_ptr);
    TA_Layer_ptr.AddParents(&TA_Layer);
  taMisc::types.Add(&TA_TrialProcess_ptr);
    TA_TrialProcess_ptr.AddParents(&TA_TrialProcess);
  taMisc::types.Add(&TA_const_ConSpec);
    TA_const_ConSpec.AddParents(&TA_const, &TA_ConSpec);
  taMisc::types.Add(&TA_const_ConSpec_ref);
    TA_const_ConSpec_ref.AddParents(&TA_const_ConSpec);
  taMisc::types.Add(&TA_SpecPtr_ConSpec_);
    TAI_SpecPtr_ConSpec_ = new SpecPtr<ConSpec>;
    TA_SpecPtr_ConSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SpecPtr_ConSpec_.AddParCache(&TA_taBase);
    TA_SpecPtr_ConSpec_.AddClassPar(&TA_SpecPtr,0);
    sbt = new TypeDef("ConSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ConSpec);
    TA_SpecPtr_ConSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_SpecPtr_ConSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_SpecPtr_ConSpec__Orientation);
    tac_AddMembers(TA_SpecPtr_ConSpec_,TA_SpecPtr_ConSpec__MemberDef);
    tac_AddMethods(TA_SpecPtr_ConSpec_,TA_SpecPtr_ConSpec__MethodDef);
  taMisc::types.Add(&TA_ConSpec_SPtr);
    TAI_ConSpec_SPtr = new ConSpec_SPtr;
    TA_ConSpec_SPtr.AddParFormal(&TA_class);
    TA_ConSpec_SPtr.AddParCache(&TA_taBase);
    TA_ConSpec_SPtr.AddClassPar(&TA_SpecPtr_ConSpec_,0);
  taMisc::types.Add(&TA_taList_Unit_);
    TAI_taList_Unit_ = new taList<Unit>;
    TA_taList_Unit_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_Unit_.AddParCache(&TA_taBase);
    TA_taList_Unit_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_Unit_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_Unit_.sub_types.FindName("const_taBase"));
    TA_taList_Unit_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_Unit_.sub_types.Add(sbt);
    sbt = new TypeDef("Unit_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Unit);
    TA_taList_Unit_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_Unit_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_Unit__Orientation);
    tac_AddMethods(TA_taList_Unit_,TA_taList_Unit__MethodDef);
  taMisc::types.Add(&TA_const_ConSpec_SPtr);
    TA_const_ConSpec_SPtr.AddParents(&TA_const, &TA_ConSpec_SPtr);
  taMisc::types.Add(&TA_const_ConSpec_SPtr_ref);
    TA_const_ConSpec_SPtr_ref.AddParents(&TA_const_ConSpec_SPtr);
  taMisc::types.Add(&TA_Unit_List);
    TAI_Unit_List = new Unit_List;
    TA_Unit_List.AddParFormal(&TA_class);
    TA_Unit_List.AddParCache(&TA_taBase);
    TA_Unit_List.AddClassPar(&TA_taList_Unit_,0);
  taMisc::types.Add(&TA_Projection_ptr);
    TA_Projection_ptr.AddParents(&TA_Projection);
  taMisc::types.Add(&TA_const_Unit_List);
    TA_const_Unit_List.AddParents(&TA_const, &TA_Unit_List);
  taMisc::types.Add(&TA_const_Con_Group);
    TA_const_Con_Group.AddParents(&TA_const, &TA_Con_Group);
  taMisc::types.Add(&TA_const_Unit_List_ref);
    TA_const_Unit_List_ref.AddParents(&TA_const_Unit_List);
  taMisc::types.Add(&TA_const_Con_Group_ptr);
    TA_const_Con_Group_ptr.AddParents(&TA_const_Con_Group);
  taMisc::types.Add(&TA_ConSpec_ptr);
    TA_ConSpec_ptr.AddParents(&TA_ConSpec);
  taMisc::types.Add(&TA_const_Con_Group_ref);
    TA_const_Con_Group_ref.AddParents(&TA_const_Con_Group);
  taMisc::types.Add(&TA_const_UnitSpec);
    TA_const_UnitSpec.AddParents(&TA_const, &TA_UnitSpec);
  taMisc::types.Add(&TA_const_UnitSpec_ref);
    TA_const_UnitSpec_ref.AddParents(&TA_const_UnitSpec);
  taMisc::types.Add(&TA_SpecPtr_UnitSpec_);
    TAI_SpecPtr_UnitSpec_ = new SpecPtr<UnitSpec>;
    TA_SpecPtr_UnitSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SpecPtr_UnitSpec_.AddParCache(&TA_taBase);
    TA_SpecPtr_UnitSpec_.AddClassPar(&TA_SpecPtr,0);
    sbt = new TypeDef("UnitSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_UnitSpec);
    TA_SpecPtr_UnitSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_SpecPtr_UnitSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_SpecPtr_UnitSpec__Orientation);
    tac_AddMembers(TA_SpecPtr_UnitSpec_,TA_SpecPtr_UnitSpec__MemberDef);
    tac_AddMethods(TA_SpecPtr_UnitSpec_,TA_SpecPtr_UnitSpec__MethodDef);
  taMisc::types.Add(&TA_UnitSpec_SPtr);
    TAI_UnitSpec_SPtr = new UnitSpec_SPtr;
    TA_UnitSpec_SPtr.AddParFormal(&TA_class);
    TA_UnitSpec_SPtr.AddParCache(&TA_taBase);
    TA_UnitSpec_SPtr.AddClassPar(&TA_SpecPtr_UnitSpec_,0);
  taMisc::types.Add(&TA_const_UnitSpec_SPtr);
    TA_const_UnitSpec_SPtr.AddParents(&TA_const, &TA_UnitSpec_SPtr);
  taMisc::types.Add(&TA_const_Unit);
    TA_const_Unit.AddParents(&TA_const, &TA_Unit);
  taMisc::types.Add(&TA_const_UnitSpec_SPtr_ref);
    TA_const_UnitSpec_SPtr_ref.AddParents(&TA_const_UnitSpec_SPtr);
  taMisc::types.Add(&TA_const_Unit_ptr);
    TA_const_Unit_ptr.AddParents(&TA_const_Unit);
  taMisc::types.Add(&TA_Con_Group_ptr_ref);
    TA_Con_Group_ptr_ref.AddParents(&TA_Con_Group_ptr);
  taMisc::types.Add(&TA_UnitSpec_ptr);
    TA_UnitSpec_ptr.AddParents(&TA_UnitSpec);
  taMisc::types.Add(&TA_const_Unit_ref);
    TA_const_Unit_ref.AddParents(&TA_const_Unit);
  taMisc::types.Add(&TA_const_ProjectionSpec);
    TA_const_ProjectionSpec.AddParents(&TA_const, &TA_ProjectionSpec);
  taMisc::types.Add(&TA_const_ProjectionSpec_ref);
    TA_const_ProjectionSpec_ref.AddParents(&TA_const_ProjectionSpec);
  taMisc::types.Add(&TA_SpecPtr_ProjectionSpec_);
    TAI_SpecPtr_ProjectionSpec_ = new SpecPtr<ProjectionSpec>;
    TA_SpecPtr_ProjectionSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SpecPtr_ProjectionSpec_.AddParCache(&TA_taBase);
    TA_SpecPtr_ProjectionSpec_.AddClassPar(&TA_SpecPtr,0);
    sbt = new TypeDef("ProjectionSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ProjectionSpec);
    TA_SpecPtr_ProjectionSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_SpecPtr_ProjectionSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_SpecPtr_ProjectionSpec__Orientation);
    tac_AddMembers(TA_SpecPtr_ProjectionSpec_,TA_SpecPtr_ProjectionSpec__MemberDef);
    tac_AddMethods(TA_SpecPtr_ProjectionSpec_,TA_SpecPtr_ProjectionSpec__MethodDef);
  taMisc::types.Add(&TA_ProjectionSpec_SPtr);
    TAI_ProjectionSpec_SPtr = new ProjectionSpec_SPtr;
    TA_ProjectionSpec_SPtr.AddParFormal(&TA_class);
    TA_ProjectionSpec_SPtr.AddParCache(&TA_taBase);
    TA_ProjectionSpec_SPtr.AddClassPar(&TA_SpecPtr_ProjectionSpec_,0);
  taMisc::types.Add(&TA_const_Projection);
    TA_const_Projection.AddParents(&TA_const, &TA_Projection);
  taMisc::types.Add(&TA_const_ProjectionSpec_SPtr);
    TA_const_ProjectionSpec_SPtr.AddParents(&TA_const, &TA_ProjectionSpec_SPtr);
  taMisc::types.Add(&TA_const_Projection_ptr);
    TA_const_Projection_ptr.AddParents(&TA_const_Projection);
  taMisc::types.Add(&TA_const_ProjectionSpec_SPtr_ref);
    TA_const_ProjectionSpec_SPtr_ref.AddParents(&TA_const_ProjectionSpec_SPtr);
  taMisc::types.Add(&TA_ProjectionSpec_ptr);
    TA_ProjectionSpec_ptr.AddParents(&TA_ProjectionSpec);
  taMisc::types.Add(&TA_GridLog_ptr);
    TA_GridLog_ptr.AddParents(&TA_GridLog);
  taMisc::types.Add(&TA_const_Projection_ref);
    TA_const_Projection_ref.AddParents(&TA_const_Projection);
  taMisc::types.Add(&TA_Projection_Group);
    TAI_Projection_Group = new Projection_Group;
    TA_Projection_Group.AddParFormal(&TA_class);
    TA_Projection_Group.AddParCache(&TA_taBase);
    TA_Projection_Group.AddClassPar(&TA_taBase_Group,0);
  taMisc::types.Add(&TA_taGroup_Unit_);
    TAI_taGroup_Unit_ = new taGroup<Unit>;
    TA_taGroup_Unit_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Unit_.AddParCache(&TA_taBase);
    TA_taGroup_Unit_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Unit_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Unit_.sub_types.FindName("const_taBase"));
    TA_taGroup_Unit_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Unit_.sub_types.Add(sbt);
    sbt = new TypeDef("Unit_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Unit);
    TA_taGroup_Unit_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Unit_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Unit__Orientation);
    tac_AddMethods(TA_taGroup_Unit_,TA_taGroup_Unit__MethodDef);
  taMisc::types.Add(&TA_const_Projection_Group);
    TA_const_Projection_Group.AddParents(&TA_const, &TA_Projection_Group);
  taMisc::types.Add(&TA_Unit_Group);
    TAI_Unit_Group = new Unit_Group;
    TA_Unit_Group.AddParFormal(&TA_class);
    TA_Unit_Group.AddParCache(&TA_taBase);
    TA_Unit_Group.AddClassPar(&TA_taGroup_Unit_,0);
    tac_AddMembers(TA_Unit_Group,TA_Unit_Group_MemberDef);
    tac_AddMethods(TA_Unit_Group,TA_Unit_Group_MethodDef);
  taMisc::types.Add(&TA_const_Projection_Group_ref);
    TA_const_Projection_Group_ref.AddParents(&TA_const_Projection_Group);
  taMisc::types.Add(&TA_const_Unit_Group);
    TA_const_Unit_Group.AddParents(&TA_const, &TA_Unit_Group);
  taMisc::types.Add(&TA_Unit_Group_ptr);
    TA_Unit_Group_ptr.AddParents(&TA_Unit_Group);
  taMisc::types.Add(&TA_const_Unit_Group_ptr);
    TA_const_Unit_Group_ptr.AddParents(&TA_const_Unit_Group);
  taMisc::types.Add(&TA_const_Unit_Group_ref);
    TA_const_Unit_Group_ref.AddParents(&TA_const_Unit_Group);
  taMisc::types.Add(&TA_const_LayerSpec);
    TA_const_LayerSpec.AddParents(&TA_const, &TA_LayerSpec);
  taMisc::types.Add(&TA_const_LayerSpec_ref);
    TA_const_LayerSpec_ref.AddParents(&TA_const_LayerSpec);
  taMisc::types.Add(&TA_DMemShare_ref);
  taMisc::types.Add(&TA_const_Layer);
    TA_const_Layer.AddParents(&TA_const, &TA_Layer);
  taMisc::types.Add(&TA_const_Layer_ptr);
    TA_const_Layer_ptr.AddParents(&TA_const_Layer);
  taMisc::types.Add(&TA_LayerSpec_ptr);
    TA_LayerSpec_ptr.AddParents(&TA_LayerSpec);
  taMisc::types.Add(&TA_const_Layer_ref);
    TA_const_Layer_ref.AddParents(&TA_const_Layer);
  taMisc::types.Add(&TA_taGroup_Layer_);
    TAI_taGroup_Layer_ = new taGroup<Layer>;
    TA_taGroup_Layer_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Layer_.AddParCache(&TA_taBase);
    TA_taGroup_Layer_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Layer_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Layer_.sub_types.FindName("const_taBase"));
    TA_taGroup_Layer_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Layer_.sub_types.Add(sbt);
    sbt = new TypeDef("Layer_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Layer);
    TA_taGroup_Layer_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Layer_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Layer__Orientation);
    tac_AddMethods(TA_taGroup_Layer_,TA_taGroup_Layer__MethodDef);
  taMisc::types.Add(&TA_Layer_MGroup);
    TAI_Layer_MGroup = new Layer_MGroup;
    TA_Layer_MGroup.AddParFormal(&TA_class);
    TA_Layer_MGroup.AddParCache(&TA_taBase);
    TA_Layer_MGroup.AddClassPar(&TA_taGroup_Layer_,0);
    tac_AddMembers(TA_Layer_MGroup,TA_Layer_MGroup_MemberDef);
  taMisc::types.Add(&TA_const_Network);
    TA_const_Network.AddParents(&TA_const, &TA_Network);
  taMisc::types.Add(&TA_const_Layer_MGroup);
    TA_const_Layer_MGroup.AddParents(&TA_const, &TA_Layer_MGroup);
  taMisc::types.Add(&TA_const_Network_ptr);
    TA_const_Network_ptr.AddParents(&TA_const_Network);
  taMisc::types.Add(&TA_const_Layer_MGroup_ref);
    TA_const_Layer_MGroup_ref.AddParents(&TA_const_Layer_MGroup);
  taMisc::types.Add(&TA_const_Network_ref);
    TA_const_Network_ref.AddParents(&TA_const_Network);
  taMisc::types.Add(&TA_taGroup_Network_);
    TAI_taGroup_Network_ = new taGroup<Network>;
    TA_taGroup_Network_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Network_.AddParCache(&TA_taBase);
    TA_taGroup_Network_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Network_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Network_.sub_types.FindName("const_taBase"));
    TA_taGroup_Network_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Network_.sub_types.Add(sbt);
    sbt = new TypeDef("Network_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Network);
    TA_taGroup_Network_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Network_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Network__Orientation);
    tac_AddMethods(TA_taGroup_Network_,TA_taGroup_Network__MethodDef);
  taMisc::types.Add(&TA_Network_MGroup);
    TAI_Network_MGroup = new Network_MGroup;
    TA_Network_MGroup.AddParFormal(&TA_class);
    TA_Network_MGroup.AddParCache(&TA_taBase);
    TA_Network_MGroup.AddClassPar(&TA_taGroup_Network_,0);
  taMisc::types.Add(&TA_const_Network_MGroup);
    TA_const_Network_MGroup.AddParents(&TA_const, &TA_Network_MGroup);
  taMisc::types.Add(&TA_FullPrjnSpec);
    TAI_FullPrjnSpec = new FullPrjnSpec;
    TA_FullPrjnSpec.AddParFormal(&TA_class);
    TA_FullPrjnSpec.AddParCache(&TA_taBase);
    TA_FullPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
  taMisc::types.Add(&TA_const_Network_MGroup_ref);
    TA_const_Network_MGroup_ref.AddParents(&TA_const_Network_MGroup);
  taMisc::types.Add(&TA_const_FullPrjnSpec);
    TA_const_FullPrjnSpec.AddParents(&TA_const, &TA_FullPrjnSpec);
  taMisc::types.Add(&TA_const_FullPrjnSpec_ref);
    TA_const_FullPrjnSpec_ref.AddParents(&TA_const_FullPrjnSpec);
  taMisc::types.Add(&TA_TessEl);
    TAI_TessEl = new TessEl;
    TA_TessEl.AddParFormal(&TA_class);
    TA_TessEl.AddParCache(&TA_taBase);
    TA_TessEl.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_TessEl,TA_TessEl_MemberDef);
  taMisc::types.Add(&TA_taList_TessEl_);
    TAI_taList_TessEl_ = new taList<TessEl>;
    TA_taList_TessEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_TessEl_.AddParCache(&TA_taBase);
    TA_taList_TessEl_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_TessEl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_TessEl_.sub_types.FindName("const_taBase"));
    TA_taList_TessEl_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_TessEl_.sub_types.Add(sbt);
    sbt = new TypeDef("TessEl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_TessEl);
    TA_taList_TessEl_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_TessEl_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_TessEl__Orientation);
    tac_AddMethods(TA_taList_TessEl_,TA_taList_TessEl__MethodDef);
  taMisc::types.Add(&TA_const_TessEl);
    TA_const_TessEl.AddParents(&TA_const, &TA_TessEl);
  taMisc::types.Add(&TA_const_TessEl_ref);
    TA_const_TessEl_ref.AddParents(&TA_const_TessEl);
  taMisc::types.Add(&TA_TessEl_List);
    TAI_TessEl_List = new TessEl_List;
    TA_TessEl_List.AddParFormal(&TA_class);
    TA_TessEl_List.AddParCache(&TA_taBase);
    TA_TessEl_List.AddClassPar(&TA_taList_TessEl_,0);
  taMisc::types.Add(&TA_const_TessEl_List);
    TA_const_TessEl_List.AddParents(&TA_const, &TA_TessEl_List);
  taMisc::types.Add(&TA_const_TessEl_List_ref);
    TA_const_TessEl_List_ref.AddParents(&TA_const_TessEl_List);
  taMisc::types.Add(&TA_TesselPrjnSpec);
    TAI_TesselPrjnSpec = new TesselPrjnSpec;
    TA_TesselPrjnSpec.AddParFormal(&TA_class);
    TA_TesselPrjnSpec.AddParCache(&TA_taBase);
    TA_TesselPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddEnum(TA_TesselPrjnSpec, "LinkType", "", "", "", "", TA_TesselPrjnSpec_LinkType);
    tac_AddMembers(TA_TesselPrjnSpec,TA_TesselPrjnSpec_MemberDef);
    tac_AddMethods(TA_TesselPrjnSpec,TA_TesselPrjnSpec_MethodDef);
  taMisc::types.Add(&TA_const_TesselPrjnSpec);
    TA_const_TesselPrjnSpec.AddParents(&TA_const, &TA_TesselPrjnSpec);
  taMisc::types.Add(&TA_const_TesselPrjnSpec_ref);
    TA_const_TesselPrjnSpec_ref.AddParents(&TA_const_TesselPrjnSpec);
  taMisc::types.Add(&TA_OneToOnePrjnSpec);
    TAI_OneToOnePrjnSpec = new OneToOnePrjnSpec;
    TA_OneToOnePrjnSpec.AddParFormal(&TA_class);
    TA_OneToOnePrjnSpec.AddParCache(&TA_taBase);
    TA_OneToOnePrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddMembers(TA_OneToOnePrjnSpec,TA_OneToOnePrjnSpec_MemberDef);
  taMisc::types.Add(&TA_const_OneToOnePrjnSpec);
    TA_const_OneToOnePrjnSpec.AddParents(&TA_const, &TA_OneToOnePrjnSpec);
  taMisc::types.Add(&TA_const_OneToOnePrjnSpec_ref);
    TA_const_OneToOnePrjnSpec_ref.AddParents(&TA_const_OneToOnePrjnSpec);
  taMisc::types.Add(&TA_UniformRndPrjnSpec);
    TAI_UniformRndPrjnSpec = new UniformRndPrjnSpec;
    TA_UniformRndPrjnSpec.AddParFormal(&TA_class);
    TA_UniformRndPrjnSpec.AddParCache(&TA_taBase);
    TA_UniformRndPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddMembers(TA_UniformRndPrjnSpec,TA_UniformRndPrjnSpec_MemberDef);
  taMisc::types.Add(&TA_const_UniformRndPrjnSpec);
    TA_const_UniformRndPrjnSpec.AddParents(&TA_const, &TA_UniformRndPrjnSpec);
  taMisc::types.Add(&TA_const_UniformRndPrjnSpec_ref);
    TA_const_UniformRndPrjnSpec_ref.AddParents(&TA_const_UniformRndPrjnSpec);
  taMisc::types.Add(&TA_PolarRndPrjnSpec);
    TAI_PolarRndPrjnSpec = new PolarRndPrjnSpec;
    TA_PolarRndPrjnSpec.AddParFormal(&TA_class);
    TA_PolarRndPrjnSpec.AddParCache(&TA_taBase);
    TA_PolarRndPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddEnum(TA_PolarRndPrjnSpec, "UnitDistType", " how to compute the distance between two units", "", "", "", TA_PolarRndPrjnSpec_UnitDistType);
    tac_AddMembers(TA_PolarRndPrjnSpec,TA_PolarRndPrjnSpec_MemberDef);
    tac_AddMethods(TA_PolarRndPrjnSpec,TA_PolarRndPrjnSpec_MethodDef);
  taMisc::types.Add(&TA_const_PolarRndPrjnSpec);
    TA_const_PolarRndPrjnSpec.AddParents(&TA_const, &TA_PolarRndPrjnSpec);
  taMisc::types.Add(&TA_SymmetricPrjnSpec);
    TAI_SymmetricPrjnSpec = new SymmetricPrjnSpec;
    TA_SymmetricPrjnSpec.AddParFormal(&TA_class);
    TA_SymmetricPrjnSpec.AddParCache(&TA_taBase);
    TA_SymmetricPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
  taMisc::types.Add(&TA_const_PolarRndPrjnSpec_ref);
    TA_const_PolarRndPrjnSpec_ref.AddParents(&TA_const_PolarRndPrjnSpec);
  taMisc::types.Add(&TA_Unit_ptr_ref);
    TA_Unit_ptr_ref.AddParents(&TA_Unit_ptr);
  taMisc::types.Add(&TA_const_SymmetricPrjnSpec);
    TA_const_SymmetricPrjnSpec.AddParents(&TA_const, &TA_SymmetricPrjnSpec);
  taMisc::types.Add(&TA_const_SymmetricPrjnSpec_ref);
    TA_const_SymmetricPrjnSpec_ref.AddParents(&TA_const_SymmetricPrjnSpec);
  taMisc::types.Add(&TA_LinkPrjnConPtr);
    TAI_LinkPrjnConPtr = new LinkPrjnConPtr;
    TA_LinkPrjnConPtr.AddParFormal(&TA_class);
    TA_LinkPrjnConPtr.AddParCache(&TA_taBase);
    TA_LinkPrjnConPtr.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_LinkPrjnConPtr,TA_LinkPrjnConPtr_MemberDef);
  taMisc::types.Add(&TA_taList_LinkPrjnConPtr_);
    TAI_taList_LinkPrjnConPtr_ = new taList<LinkPrjnConPtr>;
    TA_taList_LinkPrjnConPtr_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_LinkPrjnConPtr_.AddParCache(&TA_taBase);
    TA_taList_LinkPrjnConPtr_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_LinkPrjnConPtr_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_LinkPrjnConPtr_.sub_types.FindName("const_taBase"));
    TA_taList_LinkPrjnConPtr_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_LinkPrjnConPtr_.sub_types.Add(sbt);
    sbt = new TypeDef("LinkPrjnConPtr_ptr", 1, 1, 0);
    sbt->AddParents(&TA_LinkPrjnConPtr);
    TA_taList_LinkPrjnConPtr_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_LinkPrjnConPtr_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_LinkPrjnConPtr__Orientation);
    tac_AddMethods(TA_taList_LinkPrjnConPtr_,TA_taList_LinkPrjnConPtr__MethodDef);
  taMisc::types.Add(&TA_const_LinkPrjnConPtr);
    TA_const_LinkPrjnConPtr.AddParents(&TA_const, &TA_LinkPrjnConPtr);
  taMisc::types.Add(&TA_const_LinkPrjnConPtr_ref);
    TA_const_LinkPrjnConPtr_ref.AddParents(&TA_const_LinkPrjnConPtr);
  taMisc::types.Add(&TA_LinkPrjnConPtr_List);
    TAI_LinkPrjnConPtr_List = new LinkPrjnConPtr_List;
    TA_LinkPrjnConPtr_List.AddParFormal(&TA_class);
    TA_LinkPrjnConPtr_List.AddParCache(&TA_taBase);
    TA_LinkPrjnConPtr_List.AddClassPar(&TA_taList_LinkPrjnConPtr_,0);
  taMisc::types.Add(&TA_const_LinkPrjnConPtr_List);
    TA_const_LinkPrjnConPtr_List.AddParents(&TA_const, &TA_LinkPrjnConPtr_List);
  taMisc::types.Add(&TA_const_LinkPrjnConPtr_List_ref);
    TA_const_LinkPrjnConPtr_List_ref.AddParents(&TA_const_LinkPrjnConPtr_List);
  taMisc::types.Add(&TA_LinkPrjnSpec);
    TAI_LinkPrjnSpec = new LinkPrjnSpec;
    TA_LinkPrjnSpec.AddParFormal(&TA_class);
    TA_LinkPrjnSpec.AddParCache(&TA_taBase);
    TA_LinkPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddMembers(TA_LinkPrjnSpec,TA_LinkPrjnSpec_MemberDef);
  taMisc::types.Add(&TA_const_LinkPrjnSpec);
    TA_const_LinkPrjnSpec.AddParents(&TA_const, &TA_LinkPrjnSpec);
  taMisc::types.Add(&TA_const_LinkPrjnSpec_ref);
    TA_const_LinkPrjnSpec_ref.AddParents(&TA_const_LinkPrjnSpec);
  taMisc::types.Add(&TA_ScriptPrjnSpec);
    TAI_ScriptPrjnSpec = new ScriptPrjnSpec;
    TA_ScriptPrjnSpec.AddParFormal(&TA_class);
    TA_ScriptPrjnSpec.AddParCache(&TA_taBase);
    TA_ScriptPrjnSpec.AddClassPar(&TA_ProjectionSpec,(int)((unsigned long)((ProjectionSpec*)TAI_ScriptPrjnSpec)-(unsigned long)TAI_ScriptPrjnSpec), &TA_ScriptBase,(int)((unsigned long)((ScriptBase*)TAI_ScriptPrjnSpec)-(unsigned long)TAI_ScriptPrjnSpec));
    tac_AddMembers(TA_ScriptPrjnSpec,TA_ScriptPrjnSpec_MemberDef);
    tac_AddMethods(TA_ScriptPrjnSpec,TA_ScriptPrjnSpec_MethodDef);
  taMisc::types.Add(&TA_const_ScriptPrjnSpec);
    TA_const_ScriptPrjnSpec.AddParents(&TA_const, &TA_ScriptPrjnSpec);
  taMisc::types.Add(&TA_const_ScriptPrjnSpec_ref);
    TA_const_ScriptPrjnSpec_ref.AddParents(&TA_const_ScriptPrjnSpec);
  taMisc::types.Add(&TA_CustomPrjnSpec);
    TAI_CustomPrjnSpec = new CustomPrjnSpec;
    TA_CustomPrjnSpec.AddParFormal(&TA_class);
    TA_CustomPrjnSpec.AddParCache(&TA_taBase);
    TA_CustomPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
  taMisc::types.Add(&TA_const_CustomPrjnSpec);
    TA_const_CustomPrjnSpec.AddParents(&TA_const, &TA_CustomPrjnSpec);
  taMisc::types.Add(&TA_const_CustomPrjnSpec_ref);
    TA_const_CustomPrjnSpec_ref.AddParents(&TA_const_CustomPrjnSpec);
  taMisc::types.Add(&TA_GpFullPrjnSpec);
    TAI_GpFullPrjnSpec = new GpFullPrjnSpec;
    TA_GpFullPrjnSpec.AddParFormal(&TA_class);
    TA_GpFullPrjnSpec.AddParCache(&TA_taBase);
    TA_GpFullPrjnSpec.AddClassPar(&TA_FullPrjnSpec,0);
    tac_AddEnum(TA_GpFullPrjnSpec, "NConGroups", " number of connection groups for this projection", "", "", "", TA_GpFullPrjnSpec_NConGroups);
    tac_AddMembers(TA_GpFullPrjnSpec,TA_GpFullPrjnSpec_MemberDef);
    tac_AddMethods(TA_GpFullPrjnSpec,TA_GpFullPrjnSpec_MethodDef);
  taMisc::types.Add(&TA_const_GpFullPrjnSpec);
    TA_const_GpFullPrjnSpec.AddParents(&TA_const, &TA_GpFullPrjnSpec);
  taMisc::types.Add(&TA_const_GpFullPrjnSpec_ref);
    TA_const_GpFullPrjnSpec_ref.AddParents(&TA_const_GpFullPrjnSpec);
  taMisc::types.Add(&TA_GpOneToOnePrjnSpec);
    TAI_GpOneToOnePrjnSpec = new GpOneToOnePrjnSpec;
    TA_GpOneToOnePrjnSpec.AddParFormal(&TA_class);
    TA_GpOneToOnePrjnSpec.AddParCache(&TA_taBase);
    TA_GpOneToOnePrjnSpec.AddClassPar(&TA_OneToOnePrjnSpec,0);
  taMisc::types.Add(&TA_const_GpOneToOnePrjnSpec);
    TA_const_GpOneToOnePrjnSpec.AddParents(&TA_const, &TA_GpOneToOnePrjnSpec);
  taMisc::types.Add(&TA_const_GpOneToOnePrjnSpec_ref);
    TA_const_GpOneToOnePrjnSpec_ref.AddParents(&TA_const_GpOneToOnePrjnSpec);
  taMisc::types.Add(&TA_RndGpOneToOnePrjnSpec);
    TAI_RndGpOneToOnePrjnSpec = new RndGpOneToOnePrjnSpec;
    TA_RndGpOneToOnePrjnSpec.AddParFormal(&TA_class);
    TA_RndGpOneToOnePrjnSpec.AddParCache(&TA_taBase);
    TA_RndGpOneToOnePrjnSpec.AddClassPar(&TA_GpOneToOnePrjnSpec,0);
    tac_AddMembers(TA_RndGpOneToOnePrjnSpec,TA_RndGpOneToOnePrjnSpec_MemberDef);
  taMisc::types.Add(&TA_const_RndGpOneToOnePrjnSpec);
    TA_const_RndGpOneToOnePrjnSpec.AddParents(&TA_const, &TA_RndGpOneToOnePrjnSpec);
  taMisc::types.Add(&TA_const_RndGpOneToOnePrjnSpec_ref);
    TA_const_RndGpOneToOnePrjnSpec_ref.AddParents(&TA_const_RndGpOneToOnePrjnSpec);
  taMisc::types.Add(&TA_GpOneToManyPrjnSpec);
    TAI_GpOneToManyPrjnSpec = new GpOneToManyPrjnSpec;
    TA_GpOneToManyPrjnSpec.AddParFormal(&TA_class);
    TA_GpOneToManyPrjnSpec.AddParCache(&TA_taBase);
    TA_GpOneToManyPrjnSpec.AddClassPar(&TA_OneToOnePrjnSpec,0);
    tac_AddEnum(TA_GpOneToManyPrjnSpec, "NConGroups", " number of connection groups for this projection", "", "", "", TA_GpOneToManyPrjnSpec_NConGroups);
    tac_AddMembers(TA_GpOneToManyPrjnSpec,TA_GpOneToManyPrjnSpec_MemberDef);
    tac_AddMethods(TA_GpOneToManyPrjnSpec,TA_GpOneToManyPrjnSpec_MethodDef);
  taMisc::types.Add(&TA_const_GpOneToManyPrjnSpec);
    TA_const_GpOneToManyPrjnSpec.AddParents(&TA_const, &TA_GpOneToManyPrjnSpec);
  taMisc::types.Add(&TA_const_GpOneToManyPrjnSpec_ref);
    TA_const_GpOneToManyPrjnSpec_ref.AddParents(&TA_const_GpOneToManyPrjnSpec);
  taMisc::types.Add(&TA_GpTessEl);
    TAI_GpTessEl = new GpTessEl;
    TA_GpTessEl.AddParFormal(&TA_class);
    TA_GpTessEl.AddParCache(&TA_taBase);
    TA_GpTessEl.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_GpTessEl,TA_GpTessEl_MemberDef);
  taMisc::types.Add(&TA_taList_GpTessEl_);
    TAI_taList_GpTessEl_ = new taList<GpTessEl>;
    TA_taList_GpTessEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_GpTessEl_.AddParCache(&TA_taBase);
    TA_taList_GpTessEl_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_GpTessEl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_GpTessEl_.sub_types.FindName("const_taBase"));
    TA_taList_GpTessEl_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_GpTessEl_.sub_types.Add(sbt);
    sbt = new TypeDef("GpTessEl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_GpTessEl);
    TA_taList_GpTessEl_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_GpTessEl_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_GpTessEl__Orientation);
    tac_AddMethods(TA_taList_GpTessEl_,TA_taList_GpTessEl__MethodDef);
  taMisc::types.Add(&TA_const_GpTessEl);
    TA_const_GpTessEl.AddParents(&TA_const, &TA_GpTessEl);
  taMisc::types.Add(&TA_const_GpTessEl_ref);
    TA_const_GpTessEl_ref.AddParents(&TA_const_GpTessEl);
  taMisc::types.Add(&TA_GpTessEl_List);
    TAI_GpTessEl_List = new GpTessEl_List;
    TA_GpTessEl_List.AddParFormal(&TA_class);
    TA_GpTessEl_List.AddParCache(&TA_taBase);
    TA_GpTessEl_List.AddClassPar(&TA_taList_GpTessEl_,0);
  taMisc::types.Add(&TA_const_GpTessEl_List);
    TA_const_GpTessEl_List.AddParents(&TA_const, &TA_GpTessEl_List);
  taMisc::types.Add(&TA_const_GpTessEl_List_ref);
    TA_const_GpTessEl_List_ref.AddParents(&TA_const_GpTessEl_List);
  taMisc::types.Add(&TA_GpRndTesselPrjnSpec);
    TAI_GpRndTesselPrjnSpec = new GpRndTesselPrjnSpec;
    TA_GpRndTesselPrjnSpec.AddParFormal(&TA_class);
    TA_GpRndTesselPrjnSpec.AddParCache(&TA_taBase);
    TA_GpRndTesselPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddMembers(TA_GpRndTesselPrjnSpec,TA_GpRndTesselPrjnSpec_MemberDef);
    tac_AddMethods(TA_GpRndTesselPrjnSpec,TA_GpRndTesselPrjnSpec_MethodDef);
  taMisc::types.Add(&TA_const_GpRndTesselPrjnSpec);
    TA_const_GpRndTesselPrjnSpec.AddParents(&TA_const, &TA_GpRndTesselPrjnSpec);
  taMisc::types.Add(&TA_const_GpRndTesselPrjnSpec_ref);
    TA_const_GpRndTesselPrjnSpec_ref.AddParents(&TA_const_GpRndTesselPrjnSpec);
  taMisc::types.Add(&TA_TiledRFPrjnSpec);
    TAI_TiledRFPrjnSpec = new TiledRFPrjnSpec;
    TA_TiledRFPrjnSpec.AddParFormal(&TA_class);
    TA_TiledRFPrjnSpec.AddParCache(&TA_taBase);
    TA_TiledRFPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddMembers(TA_TiledRFPrjnSpec,TA_TiledRFPrjnSpec_MemberDef);
    tac_AddMethods(TA_TiledRFPrjnSpec,TA_TiledRFPrjnSpec_MethodDef);
  taMisc::types.Add(&TA_const_TiledRFPrjnSpec);
    TA_const_TiledRFPrjnSpec.AddParents(&TA_const, &TA_TiledRFPrjnSpec);
  taMisc::types.Add(&TA_const_TiledRFPrjnSpec_ref);
    TA_const_TiledRFPrjnSpec_ref.AddParents(&TA_const_TiledRFPrjnSpec);
  taMisc::types.Add(&TA_TiledGpRFPrjnSpec);
    TAI_TiledGpRFPrjnSpec = new TiledGpRFPrjnSpec;
    TA_TiledGpRFPrjnSpec.AddParFormal(&TA_class);
    TA_TiledGpRFPrjnSpec.AddParCache(&TA_taBase);
    TA_TiledGpRFPrjnSpec.AddClassPar(&TA_ProjectionSpec,0);
    tac_AddMembers(TA_TiledGpRFPrjnSpec,TA_TiledGpRFPrjnSpec_MemberDef);
  taMisc::types.Add(&TA_Pattern_Group);
    TAI_Pattern_Group = new Pattern_Group;
    TA_Pattern_Group.AddParFormal(&TA_class);
    TA_Pattern_Group.AddParCache(&TA_taBase);
    TA_Pattern_Group.AddClassPar(&TA_taBase_Group,0);
  taMisc::types.Add(&TA_const_TiledGpRFPrjnSpec);
    TA_const_TiledGpRFPrjnSpec.AddParents(&TA_const, &TA_TiledGpRFPrjnSpec);
  taMisc::types.Add(&TA_Pattern_ptr);
    TA_Pattern_ptr.AddParents(&TA_Pattern);
  taMisc::types.Add(&TA_const_TiledGpRFPrjnSpec_ref);
    TA_const_TiledGpRFPrjnSpec_ref.AddParents(&TA_const_TiledGpRFPrjnSpec);
  taMisc::types.Add(&TA_Event_ptr);
    TA_Event_ptr.AddParents(&TA_Event);
  taMisc::types.Add(&TA_Pattern_Group_ptr);
    TA_Pattern_Group_ptr.AddParents(&TA_Pattern_Group);
  taMisc::types.Add(&TA_const_PatternSpec);
    TA_const_PatternSpec.AddParents(&TA_const, &TA_PatternSpec);
  taMisc::types.Add(&TA_const_PatternSpec_ref);
    TA_const_PatternSpec_ref.AddParents(&TA_const_PatternSpec);
  taMisc::types.Add(&TA_taGroup_taBase__ptr);
  taMisc::types.Add(&TA_PatternSpec_Group);
    TAI_PatternSpec_Group = new PatternSpec_Group;
    TA_PatternSpec_Group.AddParFormal(&TA_class);
    TA_PatternSpec_Group.AddParCache(&TA_taBase);
    TA_PatternSpec_Group.AddClassPar(&TA_taBase_Group,0);
    tac_AddMembers(TA_PatternSpec_Group,TA_PatternSpec_Group_MemberDef);
    tac_AddMethods(TA_PatternSpec_Group,TA_PatternSpec_Group_MethodDef);
  taMisc::types.Add(&TA_const_EventSpec);
    TA_const_EventSpec.AddParents(&TA_const, &TA_EventSpec);
  taMisc::types.Add(&TA_const_PatternSpec_Group);
    TA_const_PatternSpec_Group.AddParents(&TA_const, &TA_PatternSpec_Group);
  taMisc::types.Add(&TA_const_EventSpec_ref);
    TA_const_EventSpec_ref.AddParents(&TA_const_EventSpec);
  taMisc::types.Add(&TA_const_PatternSpec_Group_ref);
    TA_const_PatternSpec_Group_ref.AddParents(&TA_const_PatternSpec_Group);
  taMisc::types.Add(&TA_SpecPtr_EventSpec_);
    TAI_SpecPtr_EventSpec_ = new SpecPtr<EventSpec>;
    TA_SpecPtr_EventSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SpecPtr_EventSpec_.AddParCache(&TA_taBase);
    TA_SpecPtr_EventSpec_.AddClassPar(&TA_SpecPtr,0);
    sbt = new TypeDef("EventSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_EventSpec);
    TA_SpecPtr_EventSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_SpecPtr_EventSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_SpecPtr_EventSpec__Orientation);
    tac_AddMembers(TA_SpecPtr_EventSpec_,TA_SpecPtr_EventSpec__MemberDef);
    tac_AddMethods(TA_SpecPtr_EventSpec_,TA_SpecPtr_EventSpec__MethodDef);
  taMisc::types.Add(&TA_EventSpec_SPtr);
    TAI_EventSpec_SPtr = new EventSpec_SPtr;
    TA_EventSpec_SPtr.AddParFormal(&TA_class);
    TA_EventSpec_SPtr.AddParCache(&TA_taBase);
    TA_EventSpec_SPtr.AddClassPar(&TA_SpecPtr_EventSpec_,0);
  taMisc::types.Add(&TA_const_Pattern);
    TA_const_Pattern.AddParents(&TA_const, &TA_Pattern);
  taMisc::types.Add(&TA_const_EventSpec_SPtr);
    TA_const_EventSpec_SPtr.AddParents(&TA_const, &TA_EventSpec_SPtr);
  taMisc::types.Add(&TA_const_Pattern_ref);
    TA_const_Pattern_ref.AddParents(&TA_const_Pattern);
  taMisc::types.Add(&TA_const_EventSpec_SPtr_ref);
    TA_const_EventSpec_SPtr_ref.AddParents(&TA_const_EventSpec_SPtr);
  taMisc::types.Add(&TA_const_Pattern_Group);
    TA_const_Pattern_Group.AddParents(&TA_const, &TA_Pattern_Group);
  taMisc::types.Add(&TA_const_Pattern_Group_ref);
    TA_const_Pattern_Group_ref.AddParents(&TA_const_Pattern_Group);
  taMisc::types.Add(&TA_EventSpec_ptr);
    TA_EventSpec_ptr.AddParents(&TA_EventSpec);
  taMisc::types.Add(&TA_const_Event);
    TA_const_Event.AddParents(&TA_const, &TA_Event);
  taMisc::types.Add(&TA_const_Event_ref);
    TA_const_Event_ref.AddParents(&TA_const_Event);
  taMisc::types.Add(&TA_taGroup_Event_);
    TAI_taGroup_Event_ = new taGroup<Event>;
    TA_taGroup_Event_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Event_.AddParCache(&TA_taBase);
    TA_taGroup_Event_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Event_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Event_.sub_types.FindName("const_taBase"));
    TA_taGroup_Event_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Event_.sub_types.Add(sbt);
    sbt = new TypeDef("Event_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Event);
    TA_taGroup_Event_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Event_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Event__Orientation);
    tac_AddMethods(TA_taGroup_Event_,TA_taGroup_Event__MethodDef);
  taMisc::types.Add(&TA_Event_MGroup);
    TAI_Event_MGroup = new Event_MGroup;
    TA_Event_MGroup.AddParFormal(&TA_class);
    TA_Event_MGroup.AddParCache(&TA_taBase);
    TA_Event_MGroup.AddClassPar(&TA_taGroup_Event_,0);
    tac_AddMethods(TA_Event_MGroup,TA_Event_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_Event_MGroup);
    TA_const_Event_MGroup.AddParents(&TA_const, &TA_Event_MGroup);
  taMisc::types.Add(&TA_Event_MGroup_ptr);
    TA_Event_MGroup_ptr.AddParents(&TA_Event_MGroup);
  taMisc::types.Add(&TA_const_Event_MGroup_ref);
    TA_const_Event_MGroup_ref.AddParents(&TA_const_Event_MGroup);
  taMisc::types.Add(&TA_GraphLog_ptr);
    TA_GraphLog_ptr.AddParents(&TA_GraphLog);
  taMisc::types.Add(&TA_const_Environment);
    TA_const_Environment.AddParents(&TA_const, &TA_Environment);
  taMisc::types.Add(&TA_const_Environment_ref);
    TA_const_Environment_ref.AddParents(&TA_const_Environment);
  taMisc::types.Add(&TA_taGroup_Environment_);
    TAI_taGroup_Environment_ = new taGroup<Environment>;
    TA_taGroup_Environment_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Environment_.AddParCache(&TA_taBase);
    TA_taGroup_Environment_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Environment_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Environment_.sub_types.FindName("const_taBase"));
    TA_taGroup_Environment_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Environment_.sub_types.Add(sbt);
    sbt = new TypeDef("Environment_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Environment);
    TA_taGroup_Environment_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Environment_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Environment__Orientation);
    tac_AddMethods(TA_taGroup_Environment_,TA_taGroup_Environment__MethodDef);
  taMisc::types.Add(&TA_Environment_MGroup);
    TAI_Environment_MGroup = new Environment_MGroup;
    TA_Environment_MGroup.AddParFormal(&TA_class);
    TA_Environment_MGroup.AddParCache(&TA_taBase);
    TA_Environment_MGroup.AddClassPar(&TA_taGroup_Environment_,0);
  taMisc::types.Add(&TA_taList_Environment_);
    TAI_taList_Environment_ = new taList<Environment>;
    TA_taList_Environment_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_Environment_.AddParCache(&TA_taBase);
    TA_taList_Environment_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_Environment_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_Environment_.sub_types.FindName("const_taBase"));
    TA_taList_Environment_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_Environment_.sub_types.Add(sbt);
    sbt = new TypeDef("Environment_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Environment);
    TA_taList_Environment_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_Environment_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_Environment__Orientation);
    tac_AddMethods(TA_taList_Environment_,TA_taList_Environment__MethodDef);
  taMisc::types.Add(&TA_const_Environment_MGroup);
    TA_const_Environment_MGroup.AddParents(&TA_const, &TA_Environment_MGroup);
  taMisc::types.Add(&TA_const_Environment_MGroup_ref);
    TA_const_Environment_MGroup_ref.AddParents(&TA_const_Environment_MGroup);
  taMisc::types.Add(&TA_Environment_List);
    TAI_Environment_List = new Environment_List;
    TA_Environment_List.AddParFormal(&TA_class);
    TA_Environment_List.AddParCache(&TA_taBase);
    TA_Environment_List.AddClassPar(&TA_taList_Environment_,0);
  taMisc::types.Add(&TA_const_ScriptEnv);
    TA_const_ScriptEnv.AddParents(&TA_const, &TA_ScriptEnv);
  taMisc::types.Add(&TA_const_Environment_List);
    TA_const_Environment_List.AddParents(&TA_const, &TA_Environment_List);
  taMisc::types.Add(&TA_const_ScriptEnv_ref);
    TA_const_ScriptEnv_ref.AddParents(&TA_const_ScriptEnv);
  taMisc::types.Add(&TA_const_Environment_List_ref);
    TA_const_Environment_List_ref.AddParents(&TA_const_Environment_List);
  taMisc::types.Add(&TA_InteractiveScriptEnv);
    TAI_InteractiveScriptEnv = new InteractiveScriptEnv;
    TA_InteractiveScriptEnv.AddParFormal(&TA_class);
    TA_InteractiveScriptEnv.AddParCache(&TA_taBase);
    TA_InteractiveScriptEnv.AddClassPar(&TA_ScriptEnv,0);
    tac_AddMembers(TA_InteractiveScriptEnv,TA_InteractiveScriptEnv_MemberDef);
  taMisc::types.Add(&TA_const_InteractiveScriptEnv);
    TA_const_InteractiveScriptEnv.AddParents(&TA_const, &TA_InteractiveScriptEnv);
  taMisc::types.Add(&TA_FreqEvent);
    TAI_FreqEvent = new FreqEvent;
    TA_FreqEvent.AddParFormal(&TA_class);
    TA_FreqEvent.AddParCache(&TA_taBase);
    TA_FreqEvent.AddClassPar(&TA_Event,0);
    tac_AddMembers(TA_FreqEvent,TA_FreqEvent_MemberDef);
  taMisc::types.Add(&TA_const_InteractiveScriptEnv_ref);
    TA_const_InteractiveScriptEnv_ref.AddParents(&TA_const_InteractiveScriptEnv);
  taMisc::types.Add(&TA_FreqEnv);
    TAI_FreqEnv = new FreqEnv;
    TA_FreqEnv.AddParFormal(&TA_class);
    TA_FreqEnv.AddParCache(&TA_taBase);
    TA_FreqEnv.AddClassPar(&TA_Environment,0);
    tac_AddEnum(TA_FreqEnv, "FreqLevel", "", "", "", "", TA_FreqEnv_FreqLevel);
    tac_AddEnum(TA_FreqEnv, "SampleType", " type of frequency sampling to use", "", "", "", TA_FreqEnv_SampleType);
    tac_AddMembers(TA_FreqEnv,TA_FreqEnv_MemberDef);
  taMisc::types.Add(&TA_const_FreqEvent);
    TA_const_FreqEvent.AddParents(&TA_const, &TA_FreqEvent);
  taMisc::types.Add(&TA_FreqEnv_ptr);
    TA_FreqEnv_ptr.AddParents(&TA_FreqEnv);
  taMisc::types.Add(&TA_const_FreqEvent_ref);
    TA_const_FreqEvent_ref.AddParents(&TA_const_FreqEvent);
  taMisc::types.Add(&TA_FreqEvent_Group);
    TAI_FreqEvent_Group = new FreqEvent_Group;
    TA_FreqEvent_Group.AddParFormal(&TA_class);
    TA_FreqEvent_Group.AddParCache(&TA_taBase);
    TA_FreqEvent_Group.AddClassPar(&TA_Event_MGroup,0);
    tac_AddMembers(TA_FreqEvent_Group,TA_FreqEvent_Group_MemberDef);
  taMisc::types.Add(&TA_const_FreqEnv);
    TA_const_FreqEnv.AddParents(&TA_const, &TA_FreqEnv);
  taMisc::types.Add(&TA_const_FreqEvent_Group);
    TA_const_FreqEvent_Group.AddParents(&TA_const, &TA_FreqEvent_Group);
  taMisc::types.Add(&TA_const_FreqEnv_ref);
    TA_const_FreqEnv_ref.AddParents(&TA_const_FreqEnv);
  taMisc::types.Add(&TA_const_FreqEvent_Group_ref);
    TA_const_FreqEvent_Group_ref.AddParents(&TA_const_FreqEvent_Group);
  taMisc::types.Add(&TA_TimeEvent);
    TAI_TimeEvent = new TimeEvent;
    TA_TimeEvent.AddParFormal(&TA_class);
    TA_TimeEvent.AddParCache(&TA_taBase);
    TA_TimeEvent.AddClassPar(&TA_Event,0);
    tac_AddMembers(TA_TimeEvent,TA_TimeEvent_MemberDef);
  taMisc::types.Add(&TA_TimeEvent_ptr);
    TA_TimeEvent_ptr.AddParents(&TA_TimeEvent);
  taMisc::types.Add(&TA_const_TimeEvent);
    TA_const_TimeEvent.AddParents(&TA_const, &TA_TimeEvent);
  taMisc::types.Add(&TA_const_TimeEvent_ref);
    TA_const_TimeEvent_ref.AddParents(&TA_const_TimeEvent);
  taMisc::types.Add(&TA_TimeEvent_MGroup);
    TAI_TimeEvent_MGroup = new TimeEvent_MGroup;
    TA_TimeEvent_MGroup.AddParFormal(&TA_class);
    TA_TimeEvent_MGroup.AddParCache(&TA_taBase);
    TA_TimeEvent_MGroup.AddClassPar(&TA_Event_MGroup,0);
    tac_AddEnum(TA_TimeEvent_MGroup, "Interpolate", "", "", "", "", TA_TimeEvent_MGroup_Interpolate);
    tac_AddMembers(TA_TimeEvent_MGroup,TA_TimeEvent_MGroup_MemberDef);
    tac_AddMethods(TA_TimeEvent_MGroup,TA_TimeEvent_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_TimeEnvironment);
    TA_const_TimeEnvironment.AddParents(&TA_const, &TA_TimeEnvironment);
  taMisc::types.Add(&TA_const_TimeEvent_MGroup);
    TA_const_TimeEvent_MGroup.AddParents(&TA_const, &TA_TimeEvent_MGroup);
  taMisc::types.Add(&TA_const_TimeEnvironment_ref);
    TA_const_TimeEnvironment_ref.AddParents(&TA_const_TimeEnvironment);
  taMisc::types.Add(&TA_const_TimeEvent_MGroup_ref);
    TA_const_TimeEvent_MGroup_ref.AddParents(&TA_const_TimeEvent_MGroup);
  taMisc::types.Add(&TA_FreqTimeEvent);
    TAI_FreqTimeEvent = new FreqTimeEvent;
    TA_FreqTimeEvent.AddParFormal(&TA_class);
    TA_FreqTimeEvent.AddParCache(&TA_taBase);
    TA_FreqTimeEvent.AddClassPar(&TA_TimeEvent,0);
    tac_AddMembers(TA_FreqTimeEvent,TA_FreqTimeEvent_MemberDef);
  taMisc::types.Add(&TA_const_FreqTimeEvent);
    TA_const_FreqTimeEvent.AddParents(&TA_const, &TA_FreqTimeEvent);
  taMisc::types.Add(&TA_FreqTimeEvent_Group);
    TAI_FreqTimeEvent_Group = new FreqTimeEvent_Group;
    TA_FreqTimeEvent_Group.AddParFormal(&TA_class);
    TA_FreqTimeEvent_Group.AddParCache(&TA_taBase);
    TA_FreqTimeEvent_Group.AddClassPar(&TA_TimeEvent_MGroup,0);
    tac_AddMembers(TA_FreqTimeEvent_Group,TA_FreqTimeEvent_Group_MemberDef);
  taMisc::types.Add(&TA_const_FreqTimeEvent_ref);
    TA_const_FreqTimeEvent_ref.AddParents(&TA_const_FreqTimeEvent);
  taMisc::types.Add(&TA_const_FreqTimeEvent_Group);
    TA_const_FreqTimeEvent_Group.AddParents(&TA_const, &TA_FreqTimeEvent_Group);
  taMisc::types.Add(&TA_const_FreqTimeEvent_Group_ref);
    TA_const_FreqTimeEvent_Group_ref.AddParents(&TA_const_FreqTimeEvent_Group);
  taMisc::types.Add(&TA_FreqTimeEnv);
    TAI_FreqTimeEnv = new FreqTimeEnv;
    TA_FreqTimeEnv.AddParFormal(&TA_class);
    TA_FreqTimeEnv.AddParCache(&TA_taBase);
    TA_FreqTimeEnv.AddClassPar(&TA_TimeEnvironment,0);
    tac_AddEnum(TA_FreqTimeEnv, "FreqLevel", "", "", "", "", TA_FreqTimeEnv_FreqLevel);
    tac_AddEnum(TA_FreqTimeEnv, "SampleType", " type of frequency sampling to use", "", "", "", TA_FreqTimeEnv_SampleType);
    tac_AddMembers(TA_FreqTimeEnv,TA_FreqTimeEnv_MemberDef);
  taMisc::types.Add(&TA_const_FreqTimeEnv);
    TA_const_FreqTimeEnv.AddParents(&TA_const, &TA_FreqTimeEnv);
  taMisc::types.Add(&TA_const_FreqTimeEnv_ref);
    TA_const_FreqTimeEnv_ref.AddParents(&TA_const_FreqTimeEnv);
  taMisc::types.Add(&TA_ProbPattern);
    TAI_ProbPattern = new ProbPattern;
    TA_ProbPattern.AddParFormal(&TA_class);
    TA_ProbPattern.AddParCache(&TA_taBase);
    TA_ProbPattern.AddClassPar(&TA_Pattern,0);
    tac_AddMembers(TA_ProbPattern,TA_ProbPattern_MemberDef);
  taMisc::types.Add(&TA_const_ProbPattern);
    TA_const_ProbPattern.AddParents(&TA_const, &TA_ProbPattern);
  taMisc::types.Add(&TA_const_ProbPattern_ref);
    TA_const_ProbPattern_ref.AddParents(&TA_const_ProbPattern);
  taMisc::types.Add(&TA_ProbPatternSpec_Group);
    TAI_ProbPatternSpec_Group = new ProbPatternSpec_Group;
    TA_ProbPatternSpec_Group.AddParFormal(&TA_class);
    TA_ProbPatternSpec_Group.AddParCache(&TA_taBase);
    TA_ProbPatternSpec_Group.AddClassPar(&TA_PatternSpec_Group,0);
    tac_AddMembers(TA_ProbPatternSpec_Group,TA_ProbPatternSpec_Group_MemberDef);
  taMisc::types.Add(&TA_const_ProbPatternSpec_Group);
    TA_const_ProbPatternSpec_Group.AddParents(&TA_const, &TA_ProbPatternSpec_Group);
  taMisc::types.Add(&TA_const_ProbPatternSpec_Group_ref);
    TA_const_ProbPatternSpec_Group_ref.AddParents(&TA_const_ProbPatternSpec_Group);
  taMisc::types.Add(&TA_ProbEventSpec);
    TAI_ProbEventSpec = new ProbEventSpec;
    TA_ProbEventSpec.AddParFormal(&TA_class);
    TA_ProbEventSpec.AddParCache(&TA_taBase);
    TA_ProbEventSpec.AddClassPar(&TA_EventSpec,0);
    tac_AddMembers(TA_ProbEventSpec,TA_ProbEventSpec_MemberDef);
    tac_AddMethods(TA_ProbEventSpec,TA_ProbEventSpec_MethodDef);
  taMisc::types.Add(&TA_const_ProbEventSpec);
    TA_const_ProbEventSpec.AddParents(&TA_const, &TA_ProbEventSpec);
  taMisc::types.Add(&TA_const_ProbEventSpec_ref);
    TA_const_ProbEventSpec_ref.AddParents(&TA_const_ProbEventSpec);
  taMisc::types.Add(&TA_XYPatternSpec);
    TAI_XYPatternSpec = new XYPatternSpec;
    TA_XYPatternSpec.AddParFormal(&TA_class);
    TA_XYPatternSpec.AddParCache(&TA_taBase);
    TA_XYPatternSpec.AddClassPar(&TA_PatternSpec,0);
    tac_AddMembers(TA_XYPatternSpec,TA_XYPatternSpec_MemberDef);
    tac_AddMethods(TA_XYPatternSpec,TA_XYPatternSpec_MethodDef);
  taMisc::types.Add(&TA_const_XYPatternSpec);
    TA_const_XYPatternSpec.AddParents(&TA_const, &TA_XYPatternSpec);
  taMisc::types.Add(&TA_const_XYPatternSpec_ref);
    TA_const_XYPatternSpec_ref.AddParents(&TA_const_XYPatternSpec);
  taMisc::types.Add(&TA_XYPattern);
    TAI_XYPattern = new XYPattern;
    TA_XYPattern.AddParFormal(&TA_class);
    TA_XYPattern.AddParCache(&TA_taBase);
    TA_XYPattern.AddClassPar(&TA_Pattern,0);
    tac_AddMembers(TA_XYPattern,TA_XYPattern_MemberDef);
  taMisc::types.Add(&TA_const_XYPattern);
    TA_const_XYPattern.AddParents(&TA_const, &TA_XYPattern);
  taMisc::types.Add(&TA_const_XYPattern_ref);
    TA_const_XYPattern_ref.AddParents(&TA_const_XYPattern);
  taMisc::types.Add(&TA_XYSubPatternSpec);
    TAI_XYSubPatternSpec = new XYSubPatternSpec;
    TA_XYSubPatternSpec.AddParFormal(&TA_class);
    TA_XYSubPatternSpec.AddParCache(&TA_taBase);
    TA_XYSubPatternSpec.AddClassPar(&TA_PatternSpec,0);
    tac_AddMembers(TA_XYSubPatternSpec,TA_XYSubPatternSpec_MemberDef);
    tac_AddMethods(TA_XYSubPatternSpec,TA_XYSubPatternSpec_MethodDef);
  taMisc::types.Add(&TA_const_XYSubPatternSpec);
    TA_const_XYSubPatternSpec.AddParents(&TA_const, &TA_XYSubPatternSpec);
  taMisc::types.Add(&TA_const_XYSubPatternSpec_ref);
    TA_const_XYSubPatternSpec_ref.AddParents(&TA_const_XYSubPatternSpec);
  taMisc::types.Add(&TA_XYSubPattern);
    TAI_XYSubPattern = new XYSubPattern;
    TA_XYSubPattern.AddParFormal(&TA_class);
    TA_XYSubPattern.AddParCache(&TA_taBase);
    TA_XYSubPattern.AddClassPar(&TA_Pattern,0);
    tac_AddMembers(TA_XYSubPattern,TA_XYSubPattern_MemberDef);
  taMisc::types.Add(&TA_const_XYSubPattern);
    TA_const_XYSubPattern.AddParents(&TA_const, &TA_XYSubPattern);
  taMisc::types.Add(&TA_const_XYSubPattern_ref);
    TA_const_XYSubPattern_ref.AddParents(&TA_const_XYSubPattern);
  taMisc::types.Add(&TA_GroupPatternSpec);
    TAI_GroupPatternSpec = new GroupPatternSpec;
    TA_GroupPatternSpec.AddParFormal(&TA_class);
    TA_GroupPatternSpec.AddParCache(&TA_taBase);
    TA_GroupPatternSpec.AddClassPar(&TA_PatternSpec,0);
    tac_AddMembers(TA_GroupPatternSpec,TA_GroupPatternSpec_MemberDef);
    tac_AddMethods(TA_GroupPatternSpec,TA_GroupPatternSpec_MethodDef);
  taMisc::types.Add(&TA_const_GroupPatternSpec);
    TA_const_GroupPatternSpec.AddParents(&TA_const, &TA_GroupPatternSpec);
  taMisc::types.Add(&TA_const_GroupPatternSpec_ref);
    TA_const_GroupPatternSpec_ref.AddParents(&TA_const_GroupPatternSpec);
  taMisc::types.Add(&TA_DurEvent);
    TAI_DurEvent = new DurEvent;
    TA_DurEvent.AddParFormal(&TA_class);
    TA_DurEvent.AddParCache(&TA_taBase);
    TA_DurEvent.AddClassPar(&TA_Event,0);
    tac_AddMembers(TA_DurEvent,TA_DurEvent_MemberDef);
  taMisc::types.Add(&TA_const_DurEvent);
    TA_const_DurEvent.AddParents(&TA_const, &TA_DurEvent);
  taMisc::types.Add(&TA_const_DurEvent_ref);
    TA_const_DurEvent_ref.AddParents(&TA_const_DurEvent);
  taMisc::types.Add(&TA_FromFileEnv);
    TAI_FromFileEnv = new FromFileEnv;
    TA_FromFileEnv.AddParFormal(&TA_class);
    TA_FromFileEnv.AddParCache(&TA_taBase);
    TA_FromFileEnv.AddClassPar(&TA_Environment,0);
    tac_AddEnum(TA_FromFileEnv, "ReadMode", "", "", "", "", TA_FromFileEnv_ReadMode);
    tac_AddMembers(TA_FromFileEnv,TA_FromFileEnv_MemberDef);
    tac_AddMethods(TA_FromFileEnv,TA_FromFileEnv_MethodDef);
  taMisc::types.Add(&TA_const_FromFileEnv);
    TA_const_FromFileEnv.AddParents(&TA_const, &TA_FromFileEnv);
  taMisc::types.Add(&TA_const_FromFileEnv_ref);
    TA_const_FromFileEnv_ref.AddParents(&TA_const_FromFileEnv);
  taMisc::types.Add(&TA_CtrlPanelData);
    TAI_CtrlPanelData = new CtrlPanelData;
    TA_CtrlPanelData.AddParFormal(&TA_class);
    TA_CtrlPanelData.AddParCache(&TA_taBase);
    TA_CtrlPanelData.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_CtrlPanelData,TA_CtrlPanelData_MemberDef);
    tac_AddMethods(TA_CtrlPanelData,TA_CtrlPanelData_MethodDef);
  taMisc::types.Add(&TA_const_CtrlPanelData);
    TA_const_CtrlPanelData.AddParents(&TA_const, &TA_CtrlPanelData);
  taMisc::types.Add(&TA_LogData_ptr);
    TA_LogData_ptr.AddParents(&TA_LogData);
  taMisc::types.Add(&TA_const_CtrlPanelData_ref);
    TA_const_CtrlPanelData_ref.AddParents(&TA_const_CtrlPanelData);
  taMisc::types.Add(&TA_SchedProcess_ptr);
    TA_SchedProcess_ptr.AddParents(&TA_SchedProcess);
  taMisc::types.Add(&TA_EpochProcess_ptr);
    TA_EpochProcess_ptr.AddParents(&TA_EpochProcess);
  taMisc::types.Add(&TA_const_Process);
    TA_const_Process.AddParents(&TA_const, &TA_Process);
  taMisc::types.Add(&TA_const_Process_ref);
    TA_const_Process_ref.AddParents(&TA_const_Process);
  taMisc::types.Add(&TA_Process_Group);
    TAI_Process_Group = new Process_Group;
    TA_Process_Group.AddParFormal(&TA_class);
    TA_Process_Group.AddParCache(&TA_taBase);
    TA_Process_Group.AddClassPar(&TA_taBase_Group,0);
    tac_AddMethods(TA_Process_Group,TA_Process_Group_MethodDef);
  taMisc::types.Add(&TA_taGroup_Process_);
    TAI_taGroup_Process_ = new taGroup<Process>;
    TA_taGroup_Process_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Process_.AddParCache(&TA_taBase);
    TA_taGroup_Process_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Process_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Process_.sub_types.FindName("const_taBase"));
    TA_taGroup_Process_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Process_.sub_types.Add(sbt);
    sbt = new TypeDef("Process_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Process);
    TA_taGroup_Process_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Process_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Process__Orientation);
    tac_AddMethods(TA_taGroup_Process_,TA_taGroup_Process__MethodDef);
  taMisc::types.Add(&TA_const_Process_Group);
    TA_const_Process_Group.AddParents(&TA_const, &TA_Process_Group);
  taMisc::types.Add(&TA_const_Process_Group_ref);
    TA_const_Process_Group_ref.AddParents(&TA_const_Process_Group);
  taMisc::types.Add(&TA_Process_MGroup);
    TAI_Process_MGroup = new Process_MGroup;
    TA_Process_MGroup.AddParFormal(&TA_class);
    TA_Process_MGroup.AddParCache(&TA_taBase);
    TA_Process_MGroup.AddClassPar(&TA_taGroup_Process_,0);
    tac_AddMethods(TA_Process_MGroup,TA_Process_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_Process_MGroup);
    TA_const_Process_MGroup.AddParents(&TA_const, &TA_Process_MGroup);
  taMisc::types.Add(&TA_CritParam);
    TAI_CritParam = new CritParam;
    TA_CritParam.AddParFormal(&TA_class);
    TA_CritParam.AddParCache(&TA_taBase);
    TA_CritParam.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_CritParam, "Relation", "", "", "", "", TA_CritParam_Relation);
    tac_AddMembers(TA_CritParam,TA_CritParam_MemberDef);
    tac_AddMethods(TA_CritParam,TA_CritParam_MethodDef);
  taMisc::types.Add(&TA_const_Process_MGroup_ref);
    TA_const_Process_MGroup_ref.AddParents(&TA_const_Process_MGroup);
  taMisc::types.Add(&TA_const_CritParam);
    TA_const_CritParam.AddParents(&TA_const, &TA_CritParam);
  taMisc::types.Add(&TA_const_CritParam_ref);
    TA_const_CritParam_ref.AddParents(&TA_const_CritParam);
  taMisc::types.Add(&TA_StatVal);
    TAI_StatVal = new StatVal;
    TA_StatVal.AddParFormal(&TA_class);
    TA_StatVal.AddParCache(&TA_taBase);
    TA_StatVal.AddClassPar(&TA_DataItem,0);
    tac_AddMembers(TA_StatVal,TA_StatVal_MemberDef);
    tac_AddMethods(TA_StatVal,TA_StatVal_MethodDef);
  taMisc::types.Add(&TA_const_StatVal);
    TA_const_StatVal.AddParents(&TA_const, &TA_StatVal);
  taMisc::types.Add(&TA_const_StatVal_ref);
    TA_const_StatVal_ref.AddParents(&TA_const_StatVal);
  taMisc::types.Add(&TA_StatVal_List);
    TAI_StatVal_List = new StatVal_List;
    TA_StatVal_List.AddParFormal(&TA_class);
    TA_StatVal_List.AddParCache(&TA_taBase);
    TA_StatVal_List.AddClassPar(&TA_taBase_List,0);
    tac_AddMethods(TA_StatVal_List,TA_StatVal_List_MethodDef);
  taMisc::types.Add(&TA_StatVal_ptr);
    TA_StatVal_ptr.AddParents(&TA_StatVal);
  taMisc::types.Add(&TA_const_StatVal_List);
    TA_const_StatVal_List.AddParents(&TA_const, &TA_StatVal_List);
  taMisc::types.Add(&TA_StatVal_List_ptr);
    TA_StatVal_List_ptr.AddParents(&TA_StatVal_List);
  taMisc::types.Add(&TA_const_StatVal_List_ref);
    TA_const_StatVal_List_ref.AddParents(&TA_const_StatVal_List);
  taMisc::types.Add(&TA_StatValAgg);
    TAI_StatValAgg = new StatValAgg;
    TA_StatValAgg.AddParFormal(&TA_class);
    TA_StatValAgg.AddParCache(&TA_taBase);
    TA_StatValAgg.AddClassPar(&TA_Aggregate,0);
    tac_AddMethods(TA_StatValAgg,TA_StatValAgg_MethodDef);
  taMisc::types.Add(&TA_Stat_ptr);
    TA_Stat_ptr.AddParents(&TA_Stat);
  taMisc::types.Add(&TA_const_StatValAgg);
    TA_const_StatValAgg.AddParents(&TA_const, &TA_StatValAgg);
  taMisc::types.Add(&TA_const_StatValAgg_ref);
    TA_const_StatValAgg_ref.AddParents(&TA_const_StatValAgg);
  taMisc::types.Add(&TA_AggStat);
    TAI_AggStat = new AggStat;
    TA_AggStat.AddParFormal(&TA_class);
    TA_AggStat.AddParCache(&TA_taBase);
    TA_AggStat.AddClassPar(&TA_StatValAgg,0);
    tac_AddMembers(TA_AggStat,TA_AggStat_MemberDef);
    tac_AddMethods(TA_AggStat,TA_AggStat_MethodDef);
  taMisc::types.Add(&TA_const_Stat);
    TA_const_Stat.AddParents(&TA_const, &TA_Stat);
  taMisc::types.Add(&TA_const_AggStat);
    TA_const_AggStat.AddParents(&TA_const, &TA_AggStat);
  taMisc::types.Add(&TA_const_Stat_ref);
    TA_const_Stat_ref.AddParents(&TA_const_Stat);
  taMisc::types.Add(&TA_const_AggStat_ref);
    TA_const_AggStat_ref.AddParents(&TA_const_AggStat);
  taMisc::types.Add(&TA_MonitorStat_ptr);
    TA_MonitorStat_ptr.AddParents(&TA_MonitorStat);
  taMisc::types.Add(&TA_Stat_Group);
    TAI_Stat_Group = new Stat_Group;
    TA_Stat_Group.AddParFormal(&TA_class);
    TA_Stat_Group.AddParCache(&TA_taBase);
    TA_Stat_Group.AddClassPar(&TA_taBase_Group,0);
    tac_AddMethods(TA_Stat_Group,TA_Stat_Group_MethodDef);
  taMisc::types.Add(&TA_const_SE_Stat);
    TA_const_SE_Stat.AddParents(&TA_const, &TA_SE_Stat);
  taMisc::types.Add(&TA_const_Stat_Group);
    TA_const_Stat_Group.AddParents(&TA_const, &TA_Stat_Group);
  taMisc::types.Add(&TA_const_SE_Stat_ref);
    TA_const_SE_Stat_ref.AddParents(&TA_const_SE_Stat);
  taMisc::types.Add(&TA_const_Stat_Group_ref);
    TA_const_Stat_Group_ref.AddParents(&TA_const_Stat_Group);
  taMisc::types.Add(&TA_const_MonitorStat);
    TA_const_MonitorStat.AddParents(&TA_const, &TA_MonitorStat);
  taMisc::types.Add(&TA_const_MonitorStat_ref);
    TA_const_MonitorStat_ref.AddParents(&TA_const_MonitorStat);
  taMisc::types.Add(&TA_taPtrList_LogView_);
    TAI_taPtrList_LogView_ = new taPtrList<LogView>;
    TA_taPtrList_LogView_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_LogView_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("LogView_ptr", 1, 1, 0);
    sbt->AddParents(&TA_LogView);
    TA_taPtrList_LogView_.sub_types.Add(sbt);
    sbt = new TypeDef("const_LogView", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_LogView);
    TA_taPtrList_LogView_.sub_types.Add(sbt);
    sbt = new TypeDef("const_LogView_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_LogView_.sub_types.FindName("const_LogView"));
    TA_taPtrList_LogView_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_LogView_,TA_taPtrList_LogView__MethodDef);
  taMisc::types.Add(&TA_LogView_PtrList);
    TAI_LogView_PtrList = new LogView_PtrList;
    TA_LogView_PtrList.AddParFormal(&TA_class);
    TA_LogView_PtrList.AddClassPar(&TA_taPtrList_LogView_,0);
    tac_AddMembers(TA_LogView_PtrList,TA_LogView_PtrList_MemberDef);
  taMisc::types.Add(&TA_LogView_ptr);
    TA_LogView_ptr.AddParents(&TA_LogView);
  taMisc::types.Add(&TA_const_PDPLog);
    TA_const_PDPLog.AddParents(&TA_const, &TA_PDPLog);
  taMisc::types.Add(&TA_const_PDPLog_ref);
    TA_const_PDPLog_ref.AddParents(&TA_const_PDPLog);
  taMisc::types.Add(&TA_PDPLog_Group);
    TAI_PDPLog_Group = new PDPLog_Group;
    TA_PDPLog_Group.AddParFormal(&TA_class);
    TA_PDPLog_Group.AddParCache(&TA_taBase);
    TA_PDPLog_Group.AddClassPar(&TA_taBase_Group,0);
  taMisc::types.Add(&TA_taGroup_PDPLog_);
    TAI_taGroup_PDPLog_ = new taGroup<PDPLog>;
    TA_taGroup_PDPLog_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_PDPLog_.AddParCache(&TA_taBase);
    TA_taGroup_PDPLog_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_PDPLog_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_PDPLog_.sub_types.FindName("const_taBase"));
    TA_taGroup_PDPLog_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_PDPLog_.sub_types.Add(sbt);
    sbt = new TypeDef("PDPLog_ptr", 1, 1, 0);
    sbt->AddParents(&TA_PDPLog);
    TA_taGroup_PDPLog_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_PDPLog_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_PDPLog__Orientation);
    tac_AddMethods(TA_taGroup_PDPLog_,TA_taGroup_PDPLog__MethodDef);
  taMisc::types.Add(&TA_const_PDPLog_Group);
    TA_const_PDPLog_Group.AddParents(&TA_const, &TA_PDPLog_Group);
  taMisc::types.Add(&TA_const_PDPLog_Group_ref);
    TA_const_PDPLog_Group_ref.AddParents(&TA_const_PDPLog_Group);
  taMisc::types.Add(&TA_PDPLog_MGroup);
    TAI_PDPLog_MGroup = new PDPLog_MGroup;
    TA_PDPLog_MGroup.AddParFormal(&TA_class);
    TA_PDPLog_MGroup.AddParCache(&TA_taBase);
    TA_PDPLog_MGroup.AddClassPar(&TA_taGroup_PDPLog_,0);
    tac_AddMethods(TA_PDPLog_MGroup,TA_PDPLog_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_TextLog);
    TA_const_TextLog.AddParents(&TA_const, &TA_TextLog);
  taMisc::types.Add(&TA_const_PDPLog_MGroup);
    TA_const_PDPLog_MGroup.AddParents(&TA_const, &TA_PDPLog_MGroup);
  taMisc::types.Add(&TA_const_TextLog_ref);
    TA_const_TextLog_ref.AddParents(&TA_const_TextLog);
  taMisc::types.Add(&TA_const_PDPLog_MGroup_ref);
    TA_const_PDPLog_MGroup_ref.AddParents(&TA_const_PDPLog_MGroup);
  taMisc::types.Add(&TA_const_GridLog);
    TA_const_GridLog.AddParents(&TA_const, &TA_GridLog);
  taMisc::types.Add(&TA_const_GridLog_ref);
    TA_const_GridLog_ref.AddParents(&TA_const_GridLog);
  taMisc::types.Add(&TA_NetLog);
    TAI_NetLog = new NetLog;
    TA_NetLog.AddParFormal(&TA_class);
    TA_NetLog.AddParCache(&TA_taBase);
    TA_NetLog.AddClassPar(&TA_TextLog,0);
    tac_AddMethods(TA_NetLog,TA_NetLog_MethodDef);
  taMisc::types.Add(&TA_const_GraphLog);
    TA_const_GraphLog.AddParents(&TA_const, &TA_GraphLog);
  taMisc::types.Add(&TA_const_NetLog);
    TA_const_NetLog.AddParents(&TA_const, &TA_NetLog);
  taMisc::types.Add(&TA_const_GraphLog_ref);
    TA_const_GraphLog_ref.AddParents(&TA_const_GraphLog);
  taMisc::types.Add(&TA_const_NetLog_ref);
    TA_const_NetLog_ref.AddParents(&TA_const_NetLog);
  taMisc::types.Add(&TA_Counter);
    TAI_Counter = new Counter;
    TA_Counter.AddParFormal(&TA_class);
    TA_Counter.AddParCache(&TA_taBase);
    TA_Counter.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_Counter,TA_Counter_MemberDef);
    tac_AddMethods(TA_Counter,TA_Counter_MethodDef);
  taMisc::types.Add(&TA_const_Counter);
    TA_const_Counter.AddParents(&TA_const, &TA_Counter);
  taMisc::types.Add(&TA_StepParams);
    TAI_StepParams = new StepParams;
    TA_StepParams.AddParFormal(&TA_class);
    TA_StepParams.AddParCache(&TA_taBase);
    TA_StepParams.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_StepParams,TA_StepParams_MemberDef);
    tac_AddMethods(TA_StepParams,TA_StepParams_MethodDef);
  taMisc::types.Add(&TA_const_Counter_ref);
    TA_const_Counter_ref.AddParents(&TA_const_Counter);
  taMisc::types.Add(&TA_Counter_ptr);
    TA_Counter_ptr.AddParents(&TA_Counter);
  taMisc::types.Add(&TA_const_StepParams);
    TA_const_StepParams.AddParents(&TA_const, &TA_StepParams);
  taMisc::types.Add(&TA_Process_MGroup_ptr);
    TA_Process_MGroup_ptr.AddParents(&TA_Process_MGroup);
  taMisc::types.Add(&TA_const_StepParams_ref);
    TA_const_StepParams_ref.AddParents(&TA_const_StepParams);
  taMisc::types.Add(&TA_Stat_Group_ptr);
    TA_Stat_Group_ptr.AddParents(&TA_Stat_Group);
  taMisc::types.Add(&TA_Process_Group_ptr);
    TA_Process_Group_ptr.AddParents(&TA_Process_Group);
  taMisc::types.Add(&TA_const_SchedProcess);
    TA_const_SchedProcess.AddParents(&TA_const, &TA_SchedProcess);
  taMisc::types.Add(&TA_const_SchedProcess_ref);
    TA_const_SchedProcess_ref.AddParents(&TA_const_SchedProcess);
  taMisc::types.Add(&TA_const_CycleProcess);
    TA_const_CycleProcess.AddParents(&TA_const, &TA_CycleProcess);
  taMisc::types.Add(&TA_const_CycleProcess_ref);
    TA_const_CycleProcess_ref.AddParents(&TA_const_CycleProcess);
  taMisc::types.Add(&TA_const_SettleProcess);
    TA_const_SettleProcess.AddParents(&TA_const, &TA_SettleProcess);
  taMisc::types.Add(&TA_const_SettleProcess_ref);
    TA_const_SettleProcess_ref.AddParents(&TA_const_SettleProcess);
  taMisc::types.Add(&TA_const_TrialProcess);
    TA_const_TrialProcess.AddParents(&TA_const, &TA_TrialProcess);
  taMisc::types.Add(&TA_const_TrialProcess_ref);
    TA_const_TrialProcess_ref.AddParents(&TA_const_TrialProcess);
  taMisc::types.Add(&TA_const_EpochProcess);
    TA_const_EpochProcess.AddParents(&TA_const, &TA_EpochProcess);
  taMisc::types.Add(&TA_const_EpochProcess_ref);
    TA_const_EpochProcess_ref.AddParents(&TA_const_EpochProcess);
  taMisc::types.Add(&TA_SequenceEpoch_ptr);
    TA_SequenceEpoch_ptr.AddParents(&TA_SequenceEpoch);
  taMisc::types.Add(&TA_const_SequenceProcess);
    TA_const_SequenceProcess.AddParents(&TA_const, &TA_SequenceProcess);
  taMisc::types.Add(&TA_const_SequenceProcess_ref);
    TA_const_SequenceProcess_ref.AddParents(&TA_const_SequenceProcess);
  taMisc::types.Add(&TA_const_SequenceEpoch);
    TA_const_SequenceEpoch.AddParents(&TA_const, &TA_SequenceEpoch);
  taMisc::types.Add(&TA_const_SequenceEpoch_ref);
    TA_const_SequenceEpoch_ref.AddParents(&TA_const_SequenceEpoch);
  taMisc::types.Add(&TA_InteractiveEpoch);
    TAI_InteractiveEpoch = new InteractiveEpoch;
    TA_InteractiveEpoch.AddParFormal(&TA_class);
    TA_InteractiveEpoch.AddParCache(&TA_taBase);
    TA_InteractiveEpoch.AddClassPar(&TA_EpochProcess,0);
    tac_AddMembers(TA_InteractiveEpoch,TA_InteractiveEpoch_MemberDef);
  taMisc::types.Add(&TA_const_NEpochProcess);
    TA_const_NEpochProcess.AddParents(&TA_const, &TA_NEpochProcess);
  taMisc::types.Add(&TA_const_InteractiveEpoch);
    TA_const_InteractiveEpoch.AddParents(&TA_const, &TA_InteractiveEpoch);
  taMisc::types.Add(&TA_const_NEpochProcess_ref);
    TA_const_NEpochProcess_ref.AddParents(&TA_const_NEpochProcess);
  taMisc::types.Add(&TA_const_InteractiveEpoch_ref);
    TA_const_InteractiveEpoch_ref.AddParents(&TA_const_InteractiveEpoch);
  taMisc::types.Add(&TA_const_TrainProcess);
    TA_const_TrainProcess.AddParents(&TA_const, &TA_TrainProcess);
  taMisc::types.Add(&TA_const_TrainProcess_ref);
    TA_const_TrainProcess_ref.AddParents(&TA_const_TrainProcess);
  taMisc::types.Add(&TA_const_BatchProcess);
    TA_const_BatchProcess.AddParents(&TA_const, &TA_BatchProcess);
  taMisc::types.Add(&TA_const_BatchProcess_ref);
    TA_const_BatchProcess_ref.AddParents(&TA_const_BatchProcess);
  taMisc::types.Add(&TA_ScriptProcess);
    TAI_ScriptProcess = new ScriptProcess;
    TA_ScriptProcess.AddParFormal(&TA_class);
    TA_ScriptProcess.AddParCache(&TA_taBase);
    TA_ScriptProcess.AddClassPar(&TA_Process,0);
    tac_AddMembers(TA_ScriptProcess,TA_ScriptProcess_MemberDef);
    tac_AddMethods(TA_ScriptProcess,TA_ScriptProcess_MethodDef);
  taMisc::types.Add(&TA_const_ScriptProcess);
    TA_const_ScriptProcess.AddParents(&TA_const, &TA_ScriptProcess);
  taMisc::types.Add(&TA_SaveNetsProc);
    TAI_SaveNetsProc = new SaveNetsProc;
    TA_SaveNetsProc.AddParFormal(&TA_class);
    TA_SaveNetsProc.AddParCache(&TA_taBase);
    TA_SaveNetsProc.AddClassPar(&TA_Process,0);
  taMisc::types.Add(&TA_const_ScriptProcess_ref);
    TA_const_ScriptProcess_ref.AddParents(&TA_const_ScriptProcess);
  taMisc::types.Add(&TA_const_SaveNetsProc);
    TA_const_SaveNetsProc.AddParents(&TA_const, &TA_SaveNetsProc);
  taMisc::types.Add(&TA_const_SaveNetsProc_ref);
    TA_const_SaveNetsProc_ref.AddParents(&TA_const_SaveNetsProc);
  taMisc::types.Add(&TA_SaveWtsProc);
    TAI_SaveWtsProc = new SaveWtsProc;
    TA_SaveWtsProc.AddParFormal(&TA_class);
    TA_SaveWtsProc.AddParCache(&TA_taBase);
    TA_SaveWtsProc.AddClassPar(&TA_Process,0);
  taMisc::types.Add(&TA_const_SaveWtsProc);
    TA_const_SaveWtsProc.AddParents(&TA_const, &TA_SaveWtsProc);
  taMisc::types.Add(&TA_const_SaveWtsProc_ref);
    TA_const_SaveWtsProc_ref.AddParents(&TA_const_SaveWtsProc);
  taMisc::types.Add(&TA_LoadWtsProc);
    TAI_LoadWtsProc = new LoadWtsProc;
    TA_LoadWtsProc.AddParFormal(&TA_class);
    TA_LoadWtsProc.AddParCache(&TA_taBase);
    TA_LoadWtsProc.AddClassPar(&TA_Process,0);
    tac_AddMembers(TA_LoadWtsProc,TA_LoadWtsProc_MemberDef);
  taMisc::types.Add(&TA_const_LoadWtsProc);
    TA_const_LoadWtsProc.AddParents(&TA_const, &TA_LoadWtsProc);
  taMisc::types.Add(&TA_const_LoadWtsProc_ref);
    TA_const_LoadWtsProc_ref.AddParents(&TA_const_LoadWtsProc);
  taMisc::types.Add(&TA_InitWtsProc);
    TAI_InitWtsProc = new InitWtsProc;
    TA_InitWtsProc.AddParFormal(&TA_class);
    TA_InitWtsProc.AddParCache(&TA_taBase);
    TA_InitWtsProc.AddClassPar(&TA_Process,0);
  taMisc::types.Add(&TA_const_InitWtsProc);
    TA_const_InitWtsProc.AddParents(&TA_const, &TA_InitWtsProc);
  taMisc::types.Add(&TA_const_InitWtsProc_ref);
    TA_const_InitWtsProc_ref.AddParents(&TA_const_InitWtsProc);
  taMisc::types.Add(&TA_SyncEpochProc);
    TAI_SyncEpochProc = new SyncEpochProc;
    TA_SyncEpochProc.AddParFormal(&TA_class);
    TA_SyncEpochProc.AddParCache(&TA_taBase);
    TA_SyncEpochProc.AddClassPar(&TA_EpochProcess,0);
    tac_AddMembers(TA_SyncEpochProc,TA_SyncEpochProc_MemberDef);
  taMisc::types.Add(&TA_const_SyncEpochProc);
    TA_const_SyncEpochProc.AddParents(&TA_const, &TA_SyncEpochProc);
  taMisc::types.Add(&TA_const_SyncEpochProc_ref);
    TA_const_SyncEpochProc_ref.AddParents(&TA_const_SyncEpochProc);
  taMisc::types.Add(&TA_GridSearchBatch);
    TAI_GridSearchBatch = new GridSearchBatch;
    TA_GridSearchBatch.AddParFormal(&TA_class);
    TA_GridSearchBatch.AddParCache(&TA_taBase);
    TA_GridSearchBatch.AddClassPar(&TA_BatchProcess,0);
    tac_AddMembers(TA_GridSearchBatch,TA_GridSearchBatch_MemberDef);
    tac_AddMethods(TA_GridSearchBatch,TA_GridSearchBatch_MethodDef);
  taMisc::types.Add(&TA_const_GridSearchBatch);
    TA_const_GridSearchBatch.AddParents(&TA_const, &TA_GridSearchBatch);
  taMisc::types.Add(&TA_const_GridSearchBatch_ref);
    TA_const_GridSearchBatch_ref.AddParents(&TA_const_GridSearchBatch);
  taMisc::types.Add(&TA_SameSeedBatch);
    TAI_SameSeedBatch = new SameSeedBatch;
    TA_SameSeedBatch.AddParFormal(&TA_class);
    TA_SameSeedBatch.AddParCache(&TA_taBase);
    TA_SameSeedBatch.AddClassPar(&TA_BatchProcess,0);
    tac_AddMembers(TA_SameSeedBatch,TA_SameSeedBatch_MemberDef);
    tac_AddMethods(TA_SameSeedBatch,TA_SameSeedBatch_MethodDef);
  taMisc::types.Add(&TA_const_SameSeedBatch);
    TA_const_SameSeedBatch.AddParents(&TA_const, &TA_SameSeedBatch);
  taMisc::types.Add(&TA_const_SameSeedBatch_ref);
    TA_const_SameSeedBatch_ref.AddParents(&TA_const_SameSeedBatch);
  taMisc::types.Add(&TA_ForkProcess);
    TAI_ForkProcess = new ForkProcess;
    TA_ForkProcess.AddParFormal(&TA_class);
    TA_ForkProcess.AddParCache(&TA_taBase);
    TA_ForkProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_ForkProcess,TA_ForkProcess_MemberDef);
  taMisc::types.Add(&TA_const_ForkProcess);
    TA_const_ForkProcess.AddParents(&TA_const, &TA_ForkProcess);
  taMisc::types.Add(&TA_const_ForkProcess_ref);
    TA_const_ForkProcess_ref.AddParents(&TA_const_ForkProcess);
  taMisc::types.Add(&TA_BridgeProcess);
    TAI_BridgeProcess = new BridgeProcess;
    TA_BridgeProcess.AddParFormal(&TA_class);
    TA_BridgeProcess.AddParCache(&TA_taBase);
    TA_BridgeProcess.AddClassPar(&TA_Process,0);
    tac_AddEnum(TA_BridgeProcess, "BridgeDirection", "", "", "", "", TA_BridgeProcess_BridgeDirection);
    tac_AddMembers(TA_BridgeProcess,TA_BridgeProcess_MemberDef);
    tac_AddMethods(TA_BridgeProcess,TA_BridgeProcess_MethodDef);
  taMisc::types.Add(&TA_const_BridgeProcess);
    TA_const_BridgeProcess.AddParents(&TA_const, &TA_BridgeProcess);
  taMisc::types.Add(&TA_const_BridgeProcess_ref);
    TA_const_BridgeProcess_ref.AddParents(&TA_const_BridgeProcess);
  taMisc::types.Add(&TA_MultiEnvProcess);
    TAI_MultiEnvProcess = new MultiEnvProcess;
    TA_MultiEnvProcess.AddParFormal(&TA_class);
    TA_MultiEnvProcess.AddParCache(&TA_taBase);
    TA_MultiEnvProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_MultiEnvProcess,TA_MultiEnvProcess_MemberDef);
    tac_AddMethods(TA_MultiEnvProcess,TA_MultiEnvProcess_MethodDef);
  taMisc::types.Add(&TA_const_MultiEnvProcess);
    TA_const_MultiEnvProcess.AddParents(&TA_const, &TA_MultiEnvProcess);
  taMisc::types.Add(&TA_const_MultiEnvProcess_ref);
    TA_const_MultiEnvProcess_ref.AddParents(&TA_const_MultiEnvProcess);
  taMisc::types.Add(&TA_PatternFlagProcess);
    TAI_PatternFlagProcess = new PatternFlagProcess;
    TA_PatternFlagProcess.AddParFormal(&TA_class);
    TA_PatternFlagProcess.AddParCache(&TA_taBase);
    TA_PatternFlagProcess.AddClassPar(&TA_SchedProcess,0);
    tac_AddMembers(TA_PatternFlagProcess,TA_PatternFlagProcess_MemberDef);
    tac_AddMethods(TA_PatternFlagProcess,TA_PatternFlagProcess_MethodDef);
  taMisc::types.Add(&TA_const_ClosestEventStat);
    TA_const_ClosestEventStat.AddParents(&TA_const, &TA_ClosestEventStat);
  taMisc::types.Add(&TA_const_PatternFlagProcess);
    TA_const_PatternFlagProcess.AddParents(&TA_const, &TA_PatternFlagProcess);
  taMisc::types.Add(&TA_const_ClosestEventStat_ref);
    TA_const_ClosestEventStat_ref.AddParents(&TA_const_ClosestEventStat);
  taMisc::types.Add(&TA_const_PatternFlagProcess_ref);
    TA_const_PatternFlagProcess_ref.AddParents(&TA_const_PatternFlagProcess);
  taMisc::types.Add(&TA_SettleProcess_ptr);
    TA_SettleProcess_ptr.AddParents(&TA_SettleProcess);
  taMisc::types.Add(&TA_const_CyclesToSettle);
    TA_const_CyclesToSettle.AddParents(&TA_const, &TA_CyclesToSettle);
  taMisc::types.Add(&TA_const_CyclesToSettle_ref);
    TA_const_CyclesToSettle_ref.AddParents(&TA_const_CyclesToSettle);
  taMisc::types.Add(&TA_ActThreshRTStat);
    TAI_ActThreshRTStat = new ActThreshRTStat;
    TA_ActThreshRTStat.AddParFormal(&TA_class);
    TA_ActThreshRTStat.AddParCache(&TA_taBase);
    TA_ActThreshRTStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_ActThreshRTStat,TA_ActThreshRTStat_MemberDef);
    tac_AddMethods(TA_ActThreshRTStat,TA_ActThreshRTStat_MethodDef);
  taMisc::types.Add(&TA_const_ScriptStat);
    TA_const_ScriptStat.AddParents(&TA_const, &TA_ScriptStat);
  taMisc::types.Add(&TA_const_ActThreshRTStat);
    TA_const_ActThreshRTStat.AddParents(&TA_const, &TA_ActThreshRTStat);
  taMisc::types.Add(&TA_const_ScriptStat_ref);
    TA_const_ScriptStat_ref.AddParents(&TA_const_ScriptStat);
  taMisc::types.Add(&TA_const_ActThreshRTStat_ref);
    TA_const_ActThreshRTStat_ref.AddParents(&TA_const_ActThreshRTStat);
  taMisc::types.Add(&TA_const_CompareStat);
    TA_const_CompareStat.AddParents(&TA_const, &TA_CompareStat);
  taMisc::types.Add(&TA_const_CompareStat_ref);
    TA_const_CompareStat_ref.AddParents(&TA_const_CompareStat);
  taMisc::types.Add(&TA_ProjectionStat);
    TAI_ProjectionStat = new ProjectionStat;
    TA_ProjectionStat.AddParFormal(&TA_class);
    TA_ProjectionStat.AddParCache(&TA_taBase);
    TA_ProjectionStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_ProjectionStat,TA_ProjectionStat_MemberDef);
    tac_AddMethods(TA_ProjectionStat,TA_ProjectionStat_MethodDef);
  taMisc::types.Add(&TA_const_ProjectionStat);
    TA_const_ProjectionStat.AddParents(&TA_const, &TA_ProjectionStat);
  taMisc::types.Add(&TA_ComputeStat);
    TAI_ComputeStat = new ComputeStat;
    TA_ComputeStat.AddParFormal(&TA_class);
    TA_ComputeStat.AddParCache(&TA_taBase);
    TA_ComputeStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_ComputeStat,TA_ComputeStat_MemberDef);
    tac_AddMethods(TA_ComputeStat,TA_ComputeStat_MethodDef);
  taMisc::types.Add(&TA_const_ProjectionStat_ref);
    TA_const_ProjectionStat_ref.AddParents(&TA_const_ProjectionStat);
  taMisc::types.Add(&TA_const_ComputeStat);
    TA_const_ComputeStat.AddParents(&TA_const, &TA_ComputeStat);
  taMisc::types.Add(&TA_const_ComputeStat_ref);
    TA_const_ComputeStat_ref.AddParents(&TA_const_ComputeStat);
  taMisc::types.Add(&TA_CopyToEnvStat);
    TAI_CopyToEnvStat = new CopyToEnvStat;
    TA_CopyToEnvStat.AddParFormal(&TA_class);
    TA_CopyToEnvStat.AddParCache(&TA_taBase);
    TA_CopyToEnvStat.AddClassPar(&TA_Stat,0);
    tac_AddEnum(TA_CopyToEnvStat, "AccumScope", " over what scope of processing to accumulate data", "", "", "", TA_CopyToEnvStat_AccumScope);
    tac_AddMembers(TA_CopyToEnvStat,TA_CopyToEnvStat_MemberDef);
    tac_AddMethods(TA_CopyToEnvStat,TA_CopyToEnvStat_MethodDef);
  taMisc::types.Add(&TA_const_EpochCounterStat);
    TA_const_EpochCounterStat.AddParents(&TA_const, &TA_EpochCounterStat);
  taMisc::types.Add(&TA_const_CopyToEnvStat);
    TA_const_CopyToEnvStat.AddParents(&TA_const, &TA_CopyToEnvStat);
  taMisc::types.Add(&TA_const_EpochCounterStat_ref);
    TA_const_EpochCounterStat_ref.AddParents(&TA_const_EpochCounterStat);
  taMisc::types.Add(&TA_const_CopyToEnvStat_ref);
    TA_const_CopyToEnvStat_ref.AddParents(&TA_const_CopyToEnvStat);
  taMisc::types.Add(&TA_const_ProcCounterStat);
    TA_const_ProcCounterStat.AddParents(&TA_const, &TA_ProcCounterStat);
  taMisc::types.Add(&TA_const_ProcCounterStat_ref);
    TA_const_ProcCounterStat_ref.AddParents(&TA_const_ProcCounterStat);
  taMisc::types.Add(&TA_MaxActTrgStat);
    TAI_MaxActTrgStat = new MaxActTrgStat;
    TA_MaxActTrgStat.AddParFormal(&TA_class);
    TA_MaxActTrgStat.AddParCache(&TA_taBase);
    TA_MaxActTrgStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_MaxActTrgStat,TA_MaxActTrgStat_MemberDef);
  taMisc::types.Add(&TA_const_MaxActTrgStat);
    TA_const_MaxActTrgStat.AddParents(&TA_const, &TA_MaxActTrgStat);
  taMisc::types.Add(&TA_UnitActRFStat);
    TAI_UnitActRFStat = new UnitActRFStat;
    TA_UnitActRFStat.AddParFormal(&TA_class);
    TA_UnitActRFStat.AddParCache(&TA_taBase);
    TA_UnitActRFStat.AddClassPar(&TA_Stat,0);
    tac_AddEnum(TA_UnitActRFStat, "NormMode", "", "", "", "", TA_UnitActRFStat_NormMode);
    tac_AddMembers(TA_UnitActRFStat,TA_UnitActRFStat_MemberDef);
    tac_AddMethods(TA_UnitActRFStat,TA_UnitActRFStat_MethodDef);
  taMisc::types.Add(&TA_const_MaxActTrgStat_ref);
    TA_const_MaxActTrgStat_ref.AddParents(&TA_const_MaxActTrgStat);
  taMisc::types.Add(&TA_UnitActRFStat_ptr);
    TA_UnitActRFStat_ptr.AddParents(&TA_UnitActRFStat);
  taMisc::types.Add(&TA_const_UnitActRFStat);
    TA_const_UnitActRFStat.AddParents(&TA_const, &TA_UnitActRFStat);
  taMisc::types.Add(&TA_const_UnitActRFStat_ref);
    TA_const_UnitActRFStat_ref.AddParents(&TA_const_UnitActRFStat);
  taMisc::types.Add(&TA_UnitActRFStatResetProc);
    TAI_UnitActRFStatResetProc = new UnitActRFStatResetProc;
    TA_UnitActRFStatResetProc.AddParFormal(&TA_class);
    TA_UnitActRFStatResetProc.AddParCache(&TA_taBase);
    TA_UnitActRFStatResetProc.AddClassPar(&TA_Process,0);
    tac_AddMembers(TA_UnitActRFStatResetProc,TA_UnitActRFStatResetProc_MemberDef);
  taMisc::types.Add(&TA_const_UnitActRFStatResetProc);
    TA_const_UnitActRFStatResetProc.AddParents(&TA_const, &TA_UnitActRFStatResetProc);
  taMisc::types.Add(&TA_const_UnitActRFStatResetProc_ref);
    TA_const_UnitActRFStatResetProc_ref.AddParents(&TA_const_UnitActRFStatResetProc);
  taMisc::types.Add(&TA_UnitEventRFStat);
    TAI_UnitEventRFStat = new UnitEventRFStat;
    TA_UnitEventRFStat.AddParFormal(&TA_class);
    TA_UnitEventRFStat.AddParCache(&TA_taBase);
    TA_UnitEventRFStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_UnitEventRFStat,TA_UnitEventRFStat_MemberDef);
    tac_AddMethods(TA_UnitEventRFStat,TA_UnitEventRFStat_MethodDef);
  taMisc::types.Add(&TA_const_UnitEventRFStat);
    TA_const_UnitEventRFStat.AddParents(&TA_const, &TA_UnitEventRFStat);
  taMisc::types.Add(&TA_const_UnitEventRFStat_ref);
    TA_const_UnitEventRFStat_ref.AddParents(&TA_const_UnitEventRFStat);
  taMisc::types.Add(&TA_UniquePatStat);
    TAI_UniquePatStat = new UniquePatStat;
    TA_UniquePatStat.AddParFormal(&TA_class);
    TA_UniquePatStat.AddParCache(&TA_taBase);
    TA_UniquePatStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_UniquePatStat,TA_UniquePatStat_MemberDef);
    tac_AddMethods(TA_UniquePatStat,TA_UniquePatStat_MethodDef);
  taMisc::types.Add(&TA_const_UniquePatStat);
    TA_const_UniquePatStat.AddParents(&TA_const, &TA_UniquePatStat);
  taMisc::types.Add(&TA_const_UniquePatStat_ref);
    TA_const_UniquePatStat_ref.AddParents(&TA_const_UniquePatStat);
  taMisc::types.Add(&TA_TimeCounterStat);
    TAI_TimeCounterStat = new TimeCounterStat;
    TA_TimeCounterStat.AddParFormal(&TA_class);
    TA_TimeCounterStat.AddParCache(&TA_taBase);
    TA_TimeCounterStat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_TimeCounterStat,TA_TimeCounterStat_MemberDef);
    tac_AddMethods(TA_TimeCounterStat,TA_TimeCounterStat_MethodDef);
  taMisc::types.Add(&TA_TimeCounterStat_ptr);
    TA_TimeCounterStat_ptr.AddParents(&TA_TimeCounterStat);
  taMisc::types.Add(&TA_const_TimeCounterStat);
    TA_const_TimeCounterStat.AddParents(&TA_const, &TA_TimeCounterStat);
  taMisc::types.Add(&TA_const_TimeCounterStat_ref);
    TA_const_TimeCounterStat_ref.AddParents(&TA_const_TimeCounterStat);
  taMisc::types.Add(&TA_TimeCounterStatResetProc);
    TAI_TimeCounterStatResetProc = new TimeCounterStatResetProc;
    TA_TimeCounterStatResetProc.AddParFormal(&TA_class);
    TA_TimeCounterStatResetProc.AddParCache(&TA_taBase);
    TA_TimeCounterStatResetProc.AddClassPar(&TA_Process,0);
    tac_AddMembers(TA_TimeCounterStatResetProc,TA_TimeCounterStatResetProc_MemberDef);
  taMisc::types.Add(&TA_const_TimeCounterStatResetProc);
    TA_const_TimeCounterStatResetProc.AddParents(&TA_const, &TA_TimeCounterStatResetProc);
  taMisc::types.Add(&TA_const_TimeCounterStatResetProc_ref);
    TA_const_TimeCounterStatResetProc_ref.AddParents(&TA_const_TimeCounterStatResetProc);
  taMisc::types.Add(&TA_DispDataEnvProc);
    TAI_DispDataEnvProc = new DispDataEnvProc;
    TA_DispDataEnvProc.AddParFormal(&TA_class);
    TA_DispDataEnvProc.AddParCache(&TA_taBase);
    TA_DispDataEnvProc.AddClassPar(&TA_Process,0);
    tac_AddEnum(TA_DispDataEnvProc, "DispType", "", "", "", "", TA_DispDataEnvProc_DispType);
    tac_AddMembers(TA_DispDataEnvProc,TA_DispDataEnvProc_MemberDef);
    tac_AddMethods(TA_DispDataEnvProc,TA_DispDataEnvProc_MethodDef);
  taMisc::types.Add(&TA_const_DispDataEnvProc);
    TA_const_DispDataEnvProc.AddParents(&TA_const, &TA_DispDataEnvProc);
  taMisc::types.Add(&TA_const_DispDataEnvProc_ref);
    TA_const_DispDataEnvProc_ref.AddParents(&TA_const_DispDataEnvProc);
  taMisc::types.Add(&TA_DispNetWeightsProc);
    TAI_DispNetWeightsProc = new DispNetWeightsProc;
    TA_DispNetWeightsProc.AddParFormal(&TA_class);
    TA_DispNetWeightsProc.AddParCache(&TA_taBase);
    TA_DispNetWeightsProc.AddClassPar(&TA_Process,0);
    tac_AddMembers(TA_DispNetWeightsProc,TA_DispNetWeightsProc_MemberDef);
    tac_AddMethods(TA_DispNetWeightsProc,TA_DispNetWeightsProc_MethodDef);
  taMisc::types.Add(&TA_const_DispNetWeightsProc);
    TA_const_DispNetWeightsProc.AddParents(&TA_const, &TA_DispNetWeightsProc);
  taMisc::types.Add(&TA_const_DispNetWeightsProc_ref);
    TA_const_DispNetWeightsProc_ref.AddParents(&TA_const_DispNetWeightsProc);
  taMisc::types.Add(&TA_ClearLogProc);
    TAI_ClearLogProc = new ClearLogProc;
    TA_ClearLogProc.AddParFormal(&TA_class);
    TA_ClearLogProc.AddParCache(&TA_taBase);
    TA_ClearLogProc.AddClassPar(&TA_Process,0);
    tac_AddMembers(TA_ClearLogProc,TA_ClearLogProc_MemberDef);
  taMisc::types.Add(&TA_taGroup_TypeDefault_);
    TAI_taGroup_TypeDefault_ = new taGroup<TypeDefault>;
    TA_taGroup_TypeDefault_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_TypeDefault_.AddParCache(&TA_taBase);
    TA_taGroup_TypeDefault_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_TypeDefault_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_TypeDefault_.sub_types.FindName("const_taBase"));
    TA_taGroup_TypeDefault_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_TypeDefault_.sub_types.Add(sbt);
    sbt = new TypeDef("TypeDefault_ptr", 1, 1, 0);
    sbt->AddParents(&TA_TypeDefault);
    TA_taGroup_TypeDefault_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_TypeDefault_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_TypeDefault__Orientation);
    tac_AddMethods(TA_taGroup_TypeDefault_,TA_taGroup_TypeDefault__MethodDef);
  taMisc::types.Add(&TA_const_ClearLogProc);
    TA_const_ClearLogProc.AddParents(&TA_const, &TA_ClearLogProc);
  taMisc::types.Add(&TA_const_ClearLogProc_ref);
    TA_const_ClearLogProc_ref.AddParents(&TA_const_ClearLogProc);
  taMisc::types.Add(&TA_TypeDefault_MGroup);
    TAI_TypeDefault_MGroup = new TypeDefault_MGroup;
    TA_TypeDefault_MGroup.AddParFormal(&TA_class);
    TA_TypeDefault_MGroup.AddParCache(&TA_taBase);
    TA_TypeDefault_MGroup.AddClassPar(&TA_taGroup_TypeDefault_,0);
  taMisc::types.Add(&TA_taGroup_SelectEdit_);
    TAI_taGroup_SelectEdit_ = new taGroup<SelectEdit>;
    TA_taGroup_SelectEdit_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_SelectEdit_.AddParCache(&TA_taBase);
    TA_taGroup_SelectEdit_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_SelectEdit_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_SelectEdit_.sub_types.FindName("const_taBase"));
    TA_taGroup_SelectEdit_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_SelectEdit_.sub_types.Add(sbt);
    sbt = new TypeDef("SelectEdit_ptr", 1, 1, 0);
    sbt->AddParents(&TA_SelectEdit);
    TA_taGroup_SelectEdit_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_SelectEdit_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_SelectEdit__Orientation);
    tac_AddMethods(TA_taGroup_SelectEdit_,TA_taGroup_SelectEdit__MethodDef);
  taMisc::types.Add(&TA_const_TypeDefault_MGroup);
    TA_const_TypeDefault_MGroup.AddParents(&TA_const, &TA_TypeDefault_MGroup);
  taMisc::types.Add(&TA_const_TypeDefault_MGroup_ref);
    TA_const_TypeDefault_MGroup_ref.AddParents(&TA_const_TypeDefault_MGroup);
  taMisc::types.Add(&TA_SelectEdit_MGroup);
    TAI_SelectEdit_MGroup = new SelectEdit_MGroup;
    TA_SelectEdit_MGroup.AddParFormal(&TA_class);
    TA_SelectEdit_MGroup.AddParCache(&TA_taBase);
    TA_SelectEdit_MGroup.AddClassPar(&TA_taGroup_SelectEdit_,0);
    tac_AddMethods(TA_SelectEdit_MGroup,TA_SelectEdit_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_SelectEdit_MGroup);
    TA_const_SelectEdit_MGroup.AddParents(&TA_const, &TA_SelectEdit_MGroup);
  taMisc::types.Add(&TA_const_SelectEdit_MGroup_ref);
    TA_const_SelectEdit_MGroup_ref.AddParents(&TA_const_SelectEdit_MGroup);
  taMisc::types.Add(&TA_LayerWizEl);
    TAI_LayerWizEl = new LayerWizEl;
    TA_LayerWizEl.AddParFormal(&TA_class);
    TA_LayerWizEl.AddParCache(&TA_taBase);
    TA_LayerWizEl.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_LayerWizEl, "InputOutput", "", "", "", "", TA_LayerWizEl_InputOutput);
    tac_AddMembers(TA_LayerWizEl,TA_LayerWizEl_MemberDef);
  taMisc::types.Add(&TA_TimeEnvironment_ptr);
    TA_TimeEnvironment_ptr.AddParents(&TA_TimeEnvironment);
  taMisc::types.Add(&TA_const_LayerWizEl);
    TA_const_LayerWizEl.AddParents(&TA_const, &TA_LayerWizEl);
  taMisc::types.Add(&TA_CopyToEnvStat_ptr);
    TA_CopyToEnvStat_ptr.AddParents(&TA_CopyToEnvStat);
  taMisc::types.Add(&TA_const_LayerWizEl_ref);
    TA_const_LayerWizEl_ref.AddParents(&TA_const_LayerWizEl);
  taMisc::types.Add(&TA_DispDataEnvProc_ptr);
    TA_DispDataEnvProc_ptr.AddParents(&TA_DispDataEnvProc);
  taMisc::types.Add(&TA_DispNetWeightsProc_ptr);
    TA_DispNetWeightsProc_ptr.AddParents(&TA_DispNetWeightsProc);
  taMisc::types.Add(&TA_Wizard);
    TAI_Wizard = new Wizard;
    TA_Wizard.AddParFormal(&TA_class);
    TA_Wizard.AddParCache(&TA_taBase);
    TA_Wizard.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_Wizard, "Connectivity", "", "", "", "", TA_Wizard_Connectivity);
    tac_AddMembers(TA_Wizard,TA_Wizard_MemberDef);
    tac_AddMethods(TA_Wizard,TA_Wizard_MethodDef);
  taMisc::types.Add(&TA_taGroup_Wizard_);
    TAI_taGroup_Wizard_ = new taGroup<Wizard>;
    TA_taGroup_Wizard_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Wizard_.AddParCache(&TA_taBase);
    TA_taGroup_Wizard_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Wizard_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Wizard_.sub_types.FindName("const_taBase"));
    TA_taGroup_Wizard_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Wizard_.sub_types.Add(sbt);
    sbt = new TypeDef("Wizard_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Wizard);
    TA_taGroup_Wizard_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Wizard_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Wizard__Orientation);
    tac_AddMethods(TA_taGroup_Wizard_,TA_taGroup_Wizard__MethodDef);
  taMisc::types.Add(&TA_const_Wizard);
    TA_const_Wizard.AddParents(&TA_const, &TA_Wizard);
  taMisc::types.Add(&TA_const_Wizard_ref);
    TA_const_Wizard_ref.AddParents(&TA_const_Wizard);
  taMisc::types.Add(&TA_Wizard_MGroup);
    TAI_Wizard_MGroup = new Wizard_MGroup;
    TA_Wizard_MGroup.AddParFormal(&TA_class);
    TA_Wizard_MGroup.AddParCache(&TA_taBase);
    TA_Wizard_MGroup.AddClassPar(&TA_taGroup_Wizard_,0);
    tac_AddMethods(TA_Wizard_MGroup,TA_Wizard_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_Wizard_MGroup);
    TA_const_Wizard_MGroup.AddParents(&TA_const, &TA_Wizard_MGroup);
  taMisc::types.Add(&TA_const_Wizard_MGroup_ref);
    TA_const_Wizard_MGroup_ref.AddParents(&TA_const_Wizard_MGroup);
  taMisc::types.Add(&TA_pdpDataViewer_ptr);
    TA_pdpDataViewer_ptr.AddParents(&TA_pdpDataViewer);
  taMisc::types.Add(&TA_const_Project);
    TA_const_Project.AddParents(&TA_const, &TA_Project);
  taMisc::types.Add(&TA_const_Project_ref);
    TA_const_Project_ref.AddParents(&TA_const_Project);
  taMisc::types.Add(&TA_taGroup_Project_);
    TAI_taGroup_Project_ = new taGroup<Project>;
    TA_taGroup_Project_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_Project_.AddParCache(&TA_taBase);
    TA_taGroup_Project_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_Project_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_Project_.sub_types.FindName("const_taBase"));
    TA_taGroup_Project_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_Project_.sub_types.Add(sbt);
    sbt = new TypeDef("Project_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Project);
    TA_taGroup_Project_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_Project_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_Project__Orientation);
    tac_AddMethods(TA_taGroup_Project_,TA_taGroup_Project__MethodDef);
  taMisc::types.Add(&TA_ColorScaleSpec_MGroup_ptr);
    TA_ColorScaleSpec_MGroup_ptr.AddParents(&TA_ColorScaleSpec_MGroup);
  taMisc::types.Add(&TA_Project_MGroup);
    TAI_Project_MGroup = new Project_MGroup;
    TA_Project_MGroup.AddParFormal(&TA_class);
    TA_Project_MGroup.AddParCache(&TA_taBase);
    TA_Project_MGroup.AddClassPar(&TA_taGroup_Project_,0);
    tac_AddMembers(TA_Project_MGroup,TA_Project_MGroup_MemberDef);
    tac_AddMethods(TA_Project_MGroup,TA_Project_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_PDPRoot);
    TA_const_PDPRoot.AddParents(&TA_const, &TA_PDPRoot);
  taMisc::types.Add(&TA_const_Project_MGroup);
    TA_const_Project_MGroup.AddParents(&TA_const, &TA_Project_MGroup);
  taMisc::types.Add(&TA_const_PDPRoot_ref);
    TA_const_PDPRoot_ref.AddParents(&TA_const_PDPRoot);
  taMisc::types.Add(&TA_const_Project_MGroup_ref);
    TA_const_Project_MGroup_ref.AddParents(&TA_const_Project_MGroup);
  taMisc::types.Add(&TA_const_PDPView);
    TA_const_PDPView.AddParents(&TA_const, &TA_PDPView);
  taMisc::types.Add(&TA_const_PDPView_ref);
    TA_const_PDPView_ref.AddParents(&TA_const_PDPView);
  taMisc::types.Add(&TA_T3UnitNode);
    TA_T3UnitNode.AddParFormal(&TA_class);
    TA_T3UnitNode.AddClassPar(&TA_T3NodeLeaf,0);
    tac_AddMembers(TA_T3UnitNode,TA_T3UnitNode_MemberDef);
    tac_AddMethods(TA_T3UnitNode,TA_T3UnitNode_MethodDef);
  taMisc::types.Add(&TA_T3UnitGroupNode);
    TA_T3UnitGroupNode.AddParFormal(&TA_class);
    TA_T3UnitGroupNode.AddClassPar(&TA_T3NodeParent,0);
    tac_AddMembers(TA_T3UnitGroupNode,TA_T3UnitGroupNode_MemberDef);
    tac_AddMethods(TA_T3UnitGroupNode,TA_T3UnitGroupNode_MethodDef);
  taMisc::types.Add(&TA_T3LayerNode);
    TA_T3LayerNode.AddParFormal(&TA_class);
    TA_T3LayerNode.AddClassPar(&TA_T3NodeParent,0);
    tac_AddMembers(TA_T3LayerNode,TA_T3LayerNode_MemberDef);
    tac_AddMethods(TA_T3LayerNode,TA_T3LayerNode_MethodDef);
  taMisc::types.Add(&TA_T3PrjnNode);
    TA_T3PrjnNode.AddParFormal(&TA_class);
    TA_T3PrjnNode.AddClassPar(&TA_T3NodeParent,0);
    tac_AddMethods(TA_T3PrjnNode,TA_T3PrjnNode_MethodDef);
  taMisc::types.Add(&TA_T3NetNode);
    TA_T3NetNode.AddParFormal(&TA_class);
    TA_T3NetNode.AddClassPar(&TA_T3NodeParent,0);
    tac_AddMethods(TA_T3NetNode,TA_T3NetNode_MethodDef);
  taMisc::types.Add(&TA_T3LogViewNode);
    TA_T3LogViewNode.AddParFormal(&TA_class);
    TA_T3LogViewNode.AddClassPar(&TA_T3NodeParent,0);
    tac_AddMethods(TA_T3LogViewNode,TA_T3LogViewNode_MethodDef);
  taMisc::types.Add(&TA_T3GridLogViewBaseNode);
    TA_T3GridLogViewBaseNode.AddParFormal(&TA_class);
    TA_T3GridLogViewBaseNode.AddClassPar(&TA_T3LogViewNode,0);
    tac_AddMethods(TA_T3GridLogViewBaseNode,TA_T3GridLogViewBaseNode_MethodDef);
  taMisc::types.Add(&TA_T3UnitNode_Cylinder);
    TA_T3UnitNode_Cylinder.AddParFormal(&TA_class);
    TA_T3UnitNode_Cylinder.AddClassPar(&TA_T3UnitNode,0);
    tac_AddMembers(TA_T3UnitNode_Cylinder,TA_T3UnitNode_Cylinder_MemberDef);
    tac_AddMethods(TA_T3UnitNode_Cylinder,TA_T3UnitNode_Cylinder_MethodDef);
  taMisc::types.Add(&TA_T3UnitNode_Circle);
    TA_T3UnitNode_Circle.AddParFormal(&TA_class);
    TA_T3UnitNode_Circle.AddClassPar(&TA_T3UnitNode,0);
    tac_AddMethods(TA_T3UnitNode_Circle,TA_T3UnitNode_Circle_MethodDef);
  taMisc::types.Add(&TA_T3UnitNode_Block);
    TA_T3UnitNode_Block.AddParFormal(&TA_class);
    TA_T3UnitNode_Block.AddClassPar(&TA_T3UnitNode,0);
    tac_AddMembers(TA_T3UnitNode_Block,TA_T3UnitNode_Block_MemberDef);
    tac_AddMethods(TA_T3UnitNode_Block,TA_T3UnitNode_Block_MethodDef);
  taMisc::types.Add(&TA_T3UnitNode_Rect);
    TA_T3UnitNode_Rect.AddParFormal(&TA_class);
    TA_T3UnitNode_Rect.AddClassPar(&TA_T3UnitNode,0);
    tac_AddMethods(TA_T3UnitNode_Rect,TA_T3UnitNode_Rect_MethodDef);
  taMisc::types.Add(&TA_T3UnitGroupNode_ptr);
    TA_T3UnitGroupNode_ptr.AddParents(&TA_T3UnitGroupNode);
  taMisc::types.Add(&TA_SoFrame_ptr);
  taMisc::types.Add(&TA_T3GraphLogViewNode);
    TA_T3GraphLogViewNode.AddParFormal(&TA_class);
    TA_T3GraphLogViewNode.AddClassPar(&TA_T3LogViewNode,0);
    tac_AddMethods(TA_T3GraphLogViewNode,TA_T3GraphLogViewNode_MethodDef);
  taMisc::types.Add(&TA_NetView);
    TAI_NetView = new NetView;
    TA_NetView.AddParFormal(&TA_class);
    TA_NetView.AddParCache(&TA_taBase);
    TA_NetView.AddClassPar(&TA_T3DataViewPar,0);
    tac_AddEnum(TA_NetView, "MDFlags", " indicates type that unit.disp_base points to", "", "", "", TA_NetView_MDFlags);
    tac_AddEnum(TA_NetView, "UnitTextDisplay", " how to display unit text", "", "", "", TA_NetView_UnitTextDisplay);
    tac_AddEnum(TA_NetView, "UnitDisplayMode", "", "", "", "", TA_NetView_UnitDisplayMode);
    tac_AddMembers(TA_NetView,TA_NetView_MemberDef);
    tac_AddMethods(TA_NetView,TA_NetView_MethodDef);
  taMisc::types.Add(&TA_NetViewPanel);
    TA_NetViewPanel.AddParFormal(&TA_class);
    TA_NetViewPanel.AddClassPar(&TA_iViewPanelFrame,0);
  taMisc::types.Add(&TA_NetView_ptr);
    TA_NetView_ptr.AddParents(&TA_NetView);
  taMisc::types.Add(&TA_nvDataView);
    TAI_nvDataView = new nvDataView;
    TA_nvDataView.AddParFormal(&TA_class);
    TA_nvDataView.AddParCache(&TA_taBase);
    TA_nvDataView.AddClassPar(&TA_T3DataViewPar,0);
    tac_AddMethods(TA_nvDataView,TA_nvDataView_MethodDef);
  taMisc::types.Add(&TA_const_nvDataView);
    TA_const_nvDataView.AddParents(&TA_const, &TA_nvDataView);
  taMisc::types.Add(&TA_LayerView);
    TAI_LayerView = new LayerView;
    TA_LayerView.AddParFormal(&TA_class);
    TA_LayerView.AddParCache(&TA_taBase);
    TA_LayerView.AddClassPar(&TA_nvDataView,0);
    tac_AddMembers(TA_LayerView,TA_LayerView_MemberDef);
    tac_AddMethods(TA_LayerView,TA_LayerView_MethodDef);
  taMisc::types.Add(&TA_const_nvDataView_ref);
    TA_const_nvDataView_ref.AddParents(&TA_const_nvDataView);
  taMisc::types.Add(&TA_PrjnView);
    TAI_PrjnView = new PrjnView;
    TA_PrjnView.AddParFormal(&TA_class);
    TA_PrjnView.AddParCache(&TA_taBase);
    TA_PrjnView.AddClassPar(&TA_nvDataView,0);
    tac_AddMethods(TA_PrjnView,TA_PrjnView_MethodDef);
  taMisc::types.Add(&TA_UnitGroupView);
    TAI_UnitGroupView = new UnitGroupView;
    TA_UnitGroupView.AddParFormal(&TA_class);
    TA_UnitGroupView.AddParCache(&TA_taBase);
    TA_UnitGroupView.AddClassPar(&TA_nvDataView,0);
    tac_AddMethods(TA_UnitGroupView,TA_UnitGroupView_MethodDef);
  taMisc::types.Add(&TA_T3UnitNode_ptr);
    TA_T3UnitNode_ptr.AddParents(&TA_T3UnitNode);
  taMisc::types.Add(&TA_UnitGroupView_ptr);
    TA_UnitGroupView_ptr.AddParents(&TA_UnitGroupView);
  taMisc::types.Add(&TA_UnitView);
    TAI_UnitView = new UnitView;
    TA_UnitView.AddParFormal(&TA_class);
    TA_UnitView.AddParCache(&TA_taBase);
    TA_UnitView.AddClassPar(&TA_T3DataView,0);
    tac_AddMethods(TA_UnitView,TA_UnitView_MethodDef);
  taMisc::types.Add(&TA_const_UnitViewData_BArray_ref);
  taMisc::types.Add(&TA_const_UnitView);
    TA_const_UnitView.AddParents(&TA_const, &TA_UnitView);
  taMisc::types.Add(&TA_const_UnitViewData_ref);
  taMisc::types.Add(&TA_const_UnitView_ref);
    TA_const_UnitView_ref.AddParents(&TA_const_UnitView);
  taMisc::types.Add(&TA_const_UnitGroupView);
    TA_const_UnitGroupView.AddParents(&TA_const, &TA_UnitGroupView);
  taMisc::types.Add(&TA_const_UnitGroupView_ref);
    TA_const_UnitGroupView_ref.AddParents(&TA_const_UnitGroupView);
  taMisc::types.Add(&TA_T3LayerNode_ptr);
    TA_T3LayerNode_ptr.AddParents(&TA_T3LayerNode);
  taMisc::types.Add(&TA_const_LayerView);
    TA_const_LayerView.AddParents(&TA_const, &TA_LayerView);
  taMisc::types.Add(&TA_const_LayerView_ref);
    TA_const_LayerView_ref.AddParents(&TA_const_LayerView);
  taMisc::types.Add(&TA_T3PrjnNode_ptr);
    TA_T3PrjnNode_ptr.AddParents(&TA_T3PrjnNode);
  taMisc::types.Add(&TA_const_PrjnView);
    TA_const_PrjnView.AddParents(&TA_const, &TA_PrjnView);
  taMisc::types.Add(&TA_const_PrjnView_ref);
    TA_const_PrjnView_ref.AddParents(&TA_const_PrjnView);
  taMisc::types.Add(&TA_T3NetNode_ptr);
    TA_T3NetNode_ptr.AddParents(&TA_T3NetNode);
  taMisc::types.Add(&TA_UnitView_ptr);
    TA_UnitView_ptr.AddParents(&TA_UnitView);
  taMisc::types.Add(&TA_ScaleRange_ref);
  taMisc::types.Add(&TA_LayerView_ptr);
    TA_LayerView_ptr.AddParents(&TA_LayerView);
  taMisc::types.Add(&TA_const_NetView);
    TA_const_NetView.AddParents(&TA_const, &TA_NetView);
  taMisc::types.Add(&TA_const_NetView_ref);
    TA_const_NetView_ref.AddParents(&TA_const_NetView);
  taMisc::types.Add(&TA_NetViewPanel_ptr);
    TA_NetViewPanel_ptr.AddParents(&TA_NetViewPanel);
  taMisc::types.Add(&TA_taiComboBox_ptr);
  taMisc::types.Add(&TA_taiProcess);
    TAI_taiProcess = new taiProcess;
    TA_taiProcess.AddParFormal(&TA_class);
    TA_taiProcess.AddClassPar(&TA_taiEdit,0);
  taMisc::types.Add(&TA_taiProcessRunBox);
    TAI_taiProcessRunBox = new taiProcessRunBox;
    TA_taiProcessRunBox.AddParFormal(&TA_class);
    TA_taiProcessRunBox.AddClassPar(&TA_taiProcess,0);
  taMisc::types.Add(&TA_taiProcess_ptr);
    TA_taiProcess_ptr.AddParents(&TA_taiProcess);
  taMisc::types.Add(&TA_taiSpecMember);
    TAI_taiSpecMember = new taiSpecMember;
    TA_taiSpecMember.AddParFormal(&TA_class);
    TA_taiSpecMember.AddClassPar(&TA_taiMember,0);
  taMisc::types.Add(&TA_const_pdpDataViewer);
    TA_const_pdpDataViewer.AddParents(&TA_const, &TA_pdpDataViewer);
  taMisc::types.Add(&TA_const_pdpDataViewer_ref);
    TA_const_pdpDataViewer_ref.AddParents(&TA_const_pdpDataViewer);
  taMisc::types.Add(&TA_iLogView_Panel);
    TA_iLogView_Panel.AddParFormal(&TA_class);
    TA_iLogView_Panel.AddClassPar(&TA_iViewPanelFrame,0);
  taMisc::types.Add(&TA_iGridLogViewBase_Panel);
    TA_iGridLogViewBase_Panel.AddParFormal(&TA_class);
    TA_iGridLogViewBase_Panel.AddClassPar(&TA_iLogView_Panel,0);
  taMisc::types.Add(&TA_iTextLogView_Panel);
    TA_iTextLogView_Panel.AddParFormal(&TA_class);
    TA_iTextLogView_Panel.AddClassPar(&TA_iGridLogViewBase_Panel,0);
  taMisc::types.Add(&TA_iNetLogView_Panel);
    TA_iNetLogView_Panel.AddParFormal(&TA_class);
    TA_iNetLogView_Panel.AddClassPar(&TA_iLogView_Panel,0);
  taMisc::types.Add(&TA_iGridLogView_Panel);
    TA_iGridLogView_Panel.AddParFormal(&TA_class);
    TA_iGridLogView_Panel.AddClassPar(&TA_iLogView_Panel,0);
  taMisc::types.Add(&TA_iGraphLogView_Panel);
    TA_iGraphLogView_Panel.AddParFormal(&TA_class);
    TA_iGraphLogView_Panel.AddClassPar(&TA_iLogView_Panel,0);
  taMisc::types.Add(&TA_DT_ViewSpec_ptr);
  taMisc::types.Add(&TA_T3LogViewNode_ptr);
    TA_T3LogViewNode_ptr.AddParents(&TA_T3LogViewNode);
  taMisc::types.Add(&TA_const_LogView);
    TA_const_LogView.AddParents(&TA_const, &TA_LogView);
  taMisc::types.Add(&TA_const_LogView_ref);
    TA_const_LogView_ref.AddParents(&TA_const_LogView);
  taMisc::types.Add(&TA_iLogView_Panel_ptr);
    TA_iLogView_Panel_ptr.AddParents(&TA_iLogView_Panel);
  taMisc::types.Add(&TA_T3GridLogViewBaseNode_ptr);
    TA_T3GridLogViewBaseNode_ptr.AddParents(&TA_T3GridLogViewBaseNode);
  taMisc::types.Add(&TA_GridLogViewBase);
    TA_GridLogViewBase.AddParFormal(&TA_class);
    TA_GridLogViewBase.AddParCache(&TA_taBase);
    TA_GridLogViewBase.AddClassPar(&TA_LogView,0);
    tac_AddMembers(TA_GridLogViewBase,TA_GridLogViewBase_MemberDef);
    tac_AddMethods(TA_GridLogViewBase,TA_GridLogViewBase_MethodDef);
  taMisc::types.Add(&TA_iTextLogView_Panel_ptr);
    TA_iTextLogView_Panel_ptr.AddParents(&TA_iTextLogView_Panel);
  taMisc::types.Add(&TA_const_GridLogViewBase);
    TA_const_GridLogViewBase.AddParents(&TA_const, &TA_GridLogViewBase);
  taMisc::types.Add(&TA_TextLogView);
    TAI_TextLogView = new TextLogView;
    TA_TextLogView.AddParFormal(&TA_class);
    TA_TextLogView.AddParCache(&TA_taBase);
    TA_TextLogView.AddClassPar(&TA_GridLogViewBase,0);
    tac_AddMethods(TA_TextLogView,TA_TextLogView_MethodDef);
  taMisc::types.Add(&TA_const_GridLogViewBase_ref);
    TA_const_GridLogViewBase_ref.AddParents(&TA_const_GridLogViewBase);
  taMisc::types.Add(&TA_const_TextLogView);
    TA_const_TextLogView.AddParents(&TA_const, &TA_TextLogView);
  taMisc::types.Add(&TA_const_TextLogView_ref);
    TA_const_TextLogView_ref.AddParents(&TA_const_TextLogView);
  taMisc::types.Add(&TA_iNetLogView_Panel_ptr);
    TA_iNetLogView_Panel_ptr.AddParents(&TA_iNetLogView_Panel);
  taMisc::types.Add(&TA_const_NetLogView);
    TA_const_NetLogView.AddParents(&TA_const, &TA_NetLogView);
  taMisc::types.Add(&TA_const_NetLogView_ref);
    TA_const_NetLogView_ref.AddParents(&TA_const_NetLogView);
  taMisc::types.Add(&TA_iGridLogView_Panel_ptr);
    TA_iGridLogView_Panel_ptr.AddParents(&TA_iGridLogView_Panel);
  taMisc::types.Add(&TA_const_GridLogView);
    TA_const_GridLogView.AddParents(&TA_const, &TA_GridLogView);
  taMisc::types.Add(&TA_const_GridLogView_ref);
    TA_const_GridLogView_ref.AddParents(&TA_const_GridLogView);
  taMisc::types.Add(&TA_GridLogView_ptr);
    TA_GridLogView_ptr.AddParents(&TA_GridLogView);
  taMisc::types.Add(&TA_GraphLogViewLabel);
    TAI_GraphLogViewLabel = new GraphLogViewLabel;
    TA_GraphLogViewLabel.AddParFormal(&TA_class);
    TA_GraphLogViewLabel.AddParCache(&TA_taBase);
    TA_GraphLogViewLabel.AddClassPar(&TA_ViewLabel,0);
  taMisc::types.Add(&TA_const_GraphLogViewLabel);
    TA_const_GraphLogViewLabel.AddParents(&TA_const, &TA_GraphLogViewLabel);
  taMisc::types.Add(&TA_iGraphLogView_Panel_ptr);
    TA_iGraphLogView_Panel_ptr.AddParents(&TA_iGraphLogView_Panel);
  taMisc::types.Add(&TA_const_GraphLogViewLabel_ref);
    TA_const_GraphLogViewLabel_ref.AddParents(&TA_const_GraphLogViewLabel);
  taMisc::types.Add(&TA_T3GraphLogViewNode_ptr);
    TA_T3GraphLogViewNode_ptr.AddParents(&TA_T3GraphLogViewNode);
  taMisc::types.Add(&TA_const_GraphLogView);
    TA_const_GraphLogView.AddParents(&TA_const, &TA_GraphLogView);
  taMisc::types.Add(&TA_const_GraphLogView_ref);
    TA_const_GraphLogView_ref.AddParents(&TA_const_GraphLogView);
  taMisc::types.Add(&TA_GridLogViewBase_ptr);
    TA_GridLogViewBase_ptr.AddParents(&TA_GridLogViewBase);
  taMisc::types.Add(&TA_TextLogView_ptr);
    TA_TextLogView_ptr.AddParents(&TA_TextLogView);
  taMisc::types.Add(&TA_NetLogView_ptr);
    TA_NetLogView_ptr.AddParents(&TA_NetLogView);
  taMisc::types.Add(&TA_GraphLogView_ptr);
    TA_GraphLogView_ptr.AddParents(&TA_GraphLogView);
  taMisc::types.Add(&TA_EnviroView);
    TAI_EnviroView = new EnviroView;
    TA_EnviroView.AddParFormal(&TA_class);
    TA_EnviroView.AddParCache(&TA_taBase);
    TA_EnviroView.AddClassPar(&TA_PDPView,0);
    tac_AddEnum(TA_EnviroView, "EventLayout", "", "", "", "", TA_EnviroView_EventLayout);
    tac_AddEnum(TA_EnviroView, "ValDispMode", " ways of displaying values", "", "", "", TA_EnviroView_ValDispMode);
    tac_AddEnum(TA_EnviroView, "ValTextMode", " how to display text for values", "", "", "", TA_EnviroView_ValTextMode);
    tac_AddMembers(TA_EnviroView,TA_EnviroView_MemberDef);
    tac_AddMethods(TA_EnviroView,TA_EnviroView_MethodDef);
  taMisc::types.Add(&TA_const_EnviroView);
    TA_const_EnviroView.AddParents(&TA_const, &TA_EnviroView);
  taMisc::types.Add(&TA_const_EnviroView_ref);
    TA_const_EnviroView_ref.AddParents(&TA_const_EnviroView);
  taMisc::types.Add(&TA_ipdpDataViewer_ptr);
    TA_ipdpDataViewer_ptr.AddParents(&TA_ipdpDataViewer);
  taMisc::types.Add(&TA_ipdpDataViewer);
    TA_ipdpDataViewer.AddParFormal(&TA_class);
    TA_ipdpDataViewer.AddParents(&TA_iT3DataViewer);
  taMisc::types.Add(&TA_SoAction_ptr);
    TA_SoAction_ptr.AddParents(&TA_SoAction);
  taMisc::types.Add(&TA_SoAction);
    TA_SoAction.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoCube_ptr);
    TA_SoCube_ptr.AddParents(&TA_SoCube);
  taMisc::types.Add(&TA_SoCube);
    TA_SoCube.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoCylinder_ptr);
    TA_SoCylinder_ptr.AddParents(&TA_SoCylinder);
  taMisc::types.Add(&TA_SoCylinder);
    TA_SoCylinder.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iColor_ref);
    TA_iColor_ref.AddParents(&TA_iColor);
  taMisc::types.Add(&TA_ScaleBar_ptr);
    TA_ScaleBar_ptr.AddParents(&TA_ScaleBar);
  taMisc::types.Add(&TA_ScaleBar);
    TA_ScaleBar.AddParFormal(&TA_class);
    TA_ScaleBar.AddParents(&TA_QWidget);
  taMisc::types.Add(&TA_iGraphButtons_ptr);
    TA_iGraphButtons_ptr.AddParents(&TA_iGraphButtons);
  taMisc::types.Add(&TA_iGraphButtons);
    TA_iGraphButtons.AddParFormal(&TA_class);


  taMisc::in_init = false;
} 

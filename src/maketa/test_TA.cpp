// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "test_maketa.h"
#include "test_TA_type.h"
#include "test_TA_inst.h"


// Types

TypeDef TA_void("void", 1, 0, 0, 0,1);
TypeDef TA_int("int", 1, 0, 0, 0,1);
TypeDef TA_short("short", 1, 0, 0, 0,1);
TypeDef TA_long("long", 1, 0, 0, 0,1);
TypeDef TA_char("char", 1, 0, 0, 0,1);
TypeDef TA_unsigned("unsigned", 1, 0, 0, 0,1);
TypeDef TA_signed("signed", 1, 0, 0, 0,1);
TypeDef TA_float("float", 1, 0, 0, 0,1);
TypeDef TA_double("double", 1, 0, 0, 0,1);
TypeDef TA_bool("bool", 1, 0, 0, 0,1);
TypeDef TA_const("const", 1, 0, 0, 0,1);
TypeDef TA_enum("enum", 1, 0, 0, 1,1);
TypeDef TA_struct("struct", 1, 0, 0, 1,1);
TypeDef TA_union("union", 1, 0, 0, 1,1);
TypeDef TA_class("class", 1, 0, 0, 1,1);
TypeDef TA_template("template", 1, 0, 0, 1,1);
TypeDef TA_templ_inst("templ_inst", 1, 0, 0, 1,1);
TypeDef TA_ta_array("ta_array", 1, 0, 0, 1,1);
TypeDef TA_taBase("taBase", " Base type for all type-aware classes", 
	"", "", "", sizeof(taBase), (void**)0, 0, 0, 0,1);
TypeDef TA_taRegFun("taRegFun", 1, 0, 0, 0,1);
TypeDef TA_TypeDef("TypeDef", 1, 0, 0, 0,1);
TypeDef TA_MemberDef("MemberDef", 1, 0, 0, 0,1);
TypeDef TA_MethodDef("MethodDef", 1, 0, 0, 0,1);
TypeDef TA_taString("taString", "", 
	"", "", "", sizeof(taString), (void**)0, 0, 0, 0,1);
TypeDef TA_void_ptr("void_ptr", 1, 1, 0, 1,1);
TypeDef TA_MyClass("MyClass", "", 
	"", "", "", sizeof(MyClass), (void**)0, 1, 0, 0,1);
TypeDef TA_MySubClass("MySubClass", "", 
	"", "", "", sizeof(MySubClass), (void**)0, 1, 0, 0,1);

// Instances


// Type Data

static int MyClass::* TA_MyClass_MbrOff;
static MemberDef_data TA_MyClass_MemberDef[]={
  {&TA_int,NULL,"my_int","","","",
    *((ta_memb_ptr*)&(TA_MyClass_MbrOff=(int MyClass::*)(&MyClass::my_int))),0,NULL,0},
  {&TA_float,NULL,"my_float","","","",
    *((ta_memb_ptr*)&(TA_MyClass_MbrOff=(int MyClass::*)(&MyClass::my_float))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MyClass_myFunc_MethArgs[]={
  {&TA_int,NULL,"myParam",""},
  NULL};
static MethodDef_data TA_MyClass_MethodDef[]={
  {&TA_void,NULL,"myFunc","","","",
    0,1,-1,0,NULL,NULL,TA_MyClass_myFunc_MethArgs},
  NULL};
static int MySubClass::* TA_MySubClass_MbrOff;
static MemberDef_data TA_MySubClass_MemberDef[]={
  {&TA_int,NULL,"my_int2","","","",
    *((ta_memb_ptr*)&(TA_MySubClass_MbrOff=(int MySubClass::*)(&MySubClass::my_int2))),0,NULL,0},
  {&TA_float,NULL,"my_float2","","","",
    *((ta_memb_ptr*)&(TA_MySubClass_MbrOff=(int MySubClass::*)(&MySubClass::my_float2))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MySubClass_myFunc2_MethArgs[]={
  {&TA_int,NULL,"myParam",""},
  NULL};
static MethodDef_data TA_MySubClass_MethodDef[]={
  {&TA_void,NULL,"myFunc2","","","",
    0,1,-1,0,NULL,NULL,TA_MySubClass_myFunc2_MethArgs},
  NULL};

// Init Function


static bool ta_Init_test_done = false;

void ta_Init_test() {
  TypeDef* sbt;

  if(ta_Init_test_done) return;
  ta_Init_test_done = true;


  taMisc::in_init = true;

  taMisc::types.Add(&TA_void);
  taMisc::types.Add(&TA_int);
  taMisc::types.Add(&TA_short);
  taMisc::types.Add(&TA_long);
  taMisc::types.Add(&TA_char);
  taMisc::types.Add(&TA_unsigned);
  taMisc::types.Add(&TA_signed);
  taMisc::types.Add(&TA_float);
  taMisc::types.Add(&TA_double);
  taMisc::types.Add(&TA_bool);
  taMisc::types.Add(&TA_const);
  taMisc::types.Add(&TA_enum);
  taMisc::types.Add(&TA_struct);
  taMisc::types.Add(&TA_union);
  taMisc::types.Add(&TA_class);
  taMisc::types.Add(&TA_template);
  taMisc::types.Add(&TA_templ_inst);
  taMisc::types.Add(&TA_ta_array);
  taMisc::types.Add(&TA_taBase);
    TA_taBase.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_TypeDef);
  taMisc::types.Add(&TA_MemberDef);
  taMisc::types.Add(&TA_MethodDef);
  taMisc::types.Add(&TA_taString);
    TA_taString.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_void_ptr);
    TA_void_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_MyClass);
    TA_MyClass.AddParFormal(&TA_class);
    tac_AddMembers(TA_MyClass,TA_MyClass_MemberDef);
    tac_AddMethods(TA_MyClass,TA_MyClass_MethodDef);
  taMisc::types.Add(&TA_MySubClass);
    TA_MySubClass.AddParFormal(&TA_class);
    TA_MySubClass.AddClassPar(&TA_MyClass,0);
    tac_AddMembers(TA_MySubClass,TA_MySubClass_MemberDef);
    tac_AddMethods(TA_MySubClass,TA_MySubClass_MethodDef);


  taMisc::in_init = false;
} 

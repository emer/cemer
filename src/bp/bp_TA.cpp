// Copyright, 1995-2005, Regents of the University of Colorado,
// Carnegie Mellon University, Princeton University.
//
// This file is part of TA/PDP++
//
//   TA/PDP++ is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
//
//   TA/PDP++ is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.


// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "ta_css.h"
#include "ta_TA_type.h"
#include "tamisc_TA_type.h"
#include "pdp_TA_type.h"
#include "bp.h"
#include "rbp.h"
#include "bp_TA_type.h"
#include "bp_TA_inst.h"


// Types

TypeDef TA_BpConSpec("BpConSpec", " Bp connection specifications", 
	"", "", "", sizeof(BpConSpec), (void**)&TAI_BpConSpec, 1, 0, 0,1);
TypeDef TA_BpCon("BpCon", " Bp connection", 
	"", "", "", sizeof(BpCon), (void**)&TAI_BpCon, 0, 0, 0,1);
TypeDef TA_BpCon_Group("BpCon_Group", " group of Bp connections", 
	"", "", "", sizeof(BpCon_Group), (void**)&TAI_BpCon_Group, 0, 0, 0,1);
TypeDef TA_BpUnit("BpUnit", " standard feed-forward Bp unit", 
	"", "", "", sizeof(BpUnit), (void**)&TAI_BpUnit, 0, 0, 0,1);
TypeDef TA_BpUnitSpec("BpUnitSpec", " specifications for Bp units", 
	"", "", "", sizeof(BpUnitSpec), (void**)&TAI_BpUnitSpec, 1, 0, 0,1);
TypeDef TA_BpTrial("BpTrial", " standard Bp feed-forward trial", 
	"", "", "", sizeof(BpTrial), (void**)&TAI_BpTrial, 1, 0, 0,1);
TypeDef TA_const_BpCon("const_BpCon", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BpCon_ref("const_BpCon_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_BpConSpec_ptr("BpConSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_BpCon_ptr("BpCon_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_BpUnit_ptr("BpUnit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_BpCon_Group_ptr("BpCon_Group_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_BpConSpec("const_BpConSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BpConSpec_ref("const_BpConSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_BpCon_Group("const_BpCon_Group", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BpCon_Group_ref("const_BpCon_Group_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_BpUnitSpec_ptr("BpUnitSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_BpUnitSpec("const_BpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BpUnitSpec_ref("const_BpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_BpUnit("const_BpUnit", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BpUnit_ref("const_BpUnit_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_BpTrial("const_BpTrial", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BpTrial_ref("const_BpTrial_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_CE_Stat("CE_Stat", " Cross-entropy error statistic (asymmetric divergence)", 
	"", "", "", sizeof(CE_Stat), (void**)&TAI_CE_Stat, 1, 0, 0,1);
TypeDef TA_const_CE_Stat("const_CE_Stat", 1, 0, 0, 0, 1, 0);
TypeDef TA_NormDotProd_Stat("NormDotProd_Stat", " Normalized Dot Product of act and target values", 
	"", "", "", sizeof(NormDotProd_Stat), (void**)&TAI_NormDotProd_Stat, 1, 0, 0,1);
TypeDef TA_const_CE_Stat_ref("const_CE_Stat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_NormDotProd_Stat("const_NormDotProd_Stat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NormDotProd_Stat_ref("const_NormDotProd_Stat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_VecCor_Stat("VecCor_Stat", " Vector Correlation of act and target values", 
	"", "", "", sizeof(VecCor_Stat), (void**)&TAI_VecCor_Stat, 1, 0, 0,1);
TypeDef TA_const_VecCor_Stat("const_VecCor_Stat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_VecCor_Stat_ref("const_VecCor_Stat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_NormVecLen_Stat("NormVecLen_Stat", " Normalized Vector Length of act and target values", 
	"", "", "", sizeof(NormVecLen_Stat), (void**)&TAI_NormVecLen_Stat, 1, 0, 0,1);
TypeDef TA_const_NormVecLen_Stat("const_NormVecLen_Stat", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NormVecLen_Stat_ref("const_NormVecLen_Stat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_HebbBpConSpec("HebbBpConSpec", " Simple Hebbian wt update (send act * recv act)", 
	"", "", "", sizeof(HebbBpConSpec), (void**)&TAI_HebbBpConSpec, 1, 0, 0,1);
TypeDef TA_const_HebbBpConSpec("const_HebbBpConSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_HebbBpConSpec_ref("const_HebbBpConSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ErrScaleBpConSpec("ErrScaleBpConSpec", " con spec that scales the error by given parameter", 
	"", "", "", sizeof(ErrScaleBpConSpec), (void**)&TAI_ErrScaleBpConSpec, 1, 0, 0,1);
TypeDef TA_const_ErrScaleBpConSpec("const_ErrScaleBpConSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ErrScaleBpConSpec_ref("const_ErrScaleBpConSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DeltaBarDeltaBpCon("DeltaBarDeltaBpCon", " delta-bar-delta connection object with local learning rate", 
	"", "", "", sizeof(DeltaBarDeltaBpCon), (void**)&TAI_DeltaBarDeltaBpCon, 0, 0, 0,1);
TypeDef TA_DeltaBarDeltaBpCon_ptr("DeltaBarDeltaBpCon_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_DeltaBarDeltaBpCon("const_DeltaBarDeltaBpCon", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DeltaBarDeltaBpCon_ref("const_DeltaBarDeltaBpCon_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DeltaBarDeltaBpConSpec("DeltaBarDeltaBpConSpec", " delta-bar-delta has local learning rates for each connection", 
	"", "", "", sizeof(DeltaBarDeltaBpConSpec), (void**)&TAI_DeltaBarDeltaBpConSpec, 1, 0, 0,1);
TypeDef TA_const_DeltaBarDeltaBpConSpec("const_DeltaBarDeltaBpConSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DeltaBarDeltaBpConSpec_ref("const_DeltaBarDeltaBpConSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_BpContextSpec("BpContextSpec", " for context units in simple recurrent nets (SRN), expects one-to-one prjn from layer it copies, must be AFTER that layer in .layers", 
	"", "", "", sizeof(BpContextSpec), (void**)&TAI_BpContextSpec, 1, 0, 0,1);
TypeDef TA_const_BpContextSpec("const_BpContextSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_LinearBpUnitSpec("LinearBpUnitSpec", " linear unit in Bp", 
	"", "", "", sizeof(LinearBpUnitSpec), (void**)&TAI_LinearBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_BpContextSpec_ref("const_BpContextSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_LinearBpUnitSpec("const_LinearBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LinearBpUnitSpec_ref("const_LinearBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ThreshLinBpUnitSpec("ThreshLinBpUnitSpec", " thresholded linear unit in Bp", 
	"", "", "", sizeof(ThreshLinBpUnitSpec), (void**)&TAI_ThreshLinBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_ThreshLinBpUnitSpec("const_ThreshLinBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ThreshLinBpUnitSpec_ref("const_ThreshLinBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_NoisyBpUnitSpec("NoisyBpUnitSpec", " Bp with noisy output signal (act plus noise)", 
	"", "", "", sizeof(NoisyBpUnitSpec), (void**)&TAI_NoisyBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_NoisyBpUnitSpec("const_NoisyBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NoisyBpUnitSpec_ref("const_NoisyBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_StochasticBpUnitSpec("StochasticBpUnitSpec", " Bp with a binary stochastic activation function", 
	"", "", "", sizeof(StochasticBpUnitSpec), (void**)&TAI_StochasticBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_StochasticBpUnitSpec("const_StochasticBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_StochasticBpUnitSpec_ref("const_StochasticBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_RBFBpUnitSpec("RBFBpUnitSpec", " Radial basis function (Gaussian) function units in Bp", 
	"", "", "", sizeof(RBFBpUnitSpec), (void**)&TAI_RBFBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_RBFBpUnitSpec("const_RBFBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RBFBpUnitSpec_ref("const_RBFBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_BumpBpUnitSpec("BumpBpUnitSpec", " bump function in Bp: Gaussian of std net input", 
	"", "", "", sizeof(BumpBpUnitSpec), (void**)&TAI_BumpBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_BumpBpUnitSpec("const_BumpBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BumpBpUnitSpec_ref("const_BumpBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ExpBpUnitSpec("ExpBpUnitSpec", " exponential units in Bp: simple exponent of net input", 
	"", "", "", sizeof(ExpBpUnitSpec), (void**)&TAI_ExpBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_ExpBpUnitSpec("const_ExpBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ExpBpUnitSpec_ref("const_ExpBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoftMaxBpUnitSpec("SoftMaxBpUnitSpec", " SoftMax Units: first one-to-one prjn is from corresp exponential unit, second prjn is from single summing linear unit, this then divides two ", 
	"", "", "", sizeof(SoftMaxBpUnitSpec), (void**)&TAI_SoftMaxBpUnitSpec, 1, 0, 0,1);
TypeDef TA_RBpConSpec("RBpConSpec", " Recurrent Backprop Con Spec", 
	"", "", "", sizeof(RBpConSpec), (void**)&TAI_RBpConSpec, 1, 0, 0,1);
TypeDef TA_const_SoftMaxBpUnitSpec("const_SoftMaxBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_RBpUnit("RBpUnit", " recurrent BP unit", 
	"", "", "", sizeof(RBpUnit), (void**)&TAI_RBpUnit, 0, 0, 0,1);
TypeDef TA_const_SoftMaxBpUnitSpec_ref("const_SoftMaxBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_RBpUnitSpec("RBpUnitSpec", " Recurrent Backprop Unit Specification", 
	"", "", "", sizeof(RBpUnitSpec), (void**)&TAI_RBpUnitSpec, 1, 0, 0,1);
TypeDef TA_RBpTrial("RBpTrial", " one presentation of an event to RBp", 
	"", "", "", sizeof(RBpTrial), (void**)&TAI_RBpTrial, 1, 0, 0,1);
TypeDef TA_RBpSequence("RBpSequence", " one sequence of events, handles TimeEvents properly", 
	"", "", "", sizeof(RBpSequence), (void**)&TAI_RBpSequence, 1, 0, 0,1);
TypeDef TA_APBpCycle("APBpCycle", " one cycle of processing in almeida-pineda (either act or bp depending on 'phase')", 
	"", "", "", sizeof(APBpCycle), (void**)&TAI_APBpCycle, 1, 0, 0,1);
TypeDef TA_APBpSettle("APBpSettle", " one settling phase in Almeide-Pineda (either act or bp depending on phase)", 
	"", "", "", sizeof(APBpSettle), (void**)&TAI_APBpSettle, 1, 0, 0,1);
TypeDef TA_APBpTrial("APBpTrial", " one Almeida-Pineda BP Trial", 
	"", "", "", sizeof(APBpTrial), (void**)&TAI_APBpTrial, 1, 0, 0,1);
TypeDef TA_APBpMaxDa_De("APBpMaxDa_De", " _ computes max of da and ddE to determine when to stop settling in almeida-pineda algorithm ", 
	"", "", "", sizeof(APBpMaxDa_De), (void**)&TAI_APBpMaxDa_De, 1, 0, 0,1);
TypeDef TA_RBpUnit_ptr("RBpUnit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_RBpConSpec("const_RBpConSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RBpConSpec_ref("const_RBpConSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SymRBpConSpec("SymRBpConSpec", " Recurrent Backprop Con Spec: option to maintain weight symmetry through simple averaging of two weight changes", 
	"", "", "", sizeof(SymRBpConSpec), (void**)&TAI_SymRBpConSpec, 1, 0, 0,1);
TypeDef TA_const_RBpUnitSpec("const_RBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SymRBpConSpec("const_SymRBpConSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RBpUnitSpec_ref("const_RBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SymRBpConSpec_ref("const_SymRBpConSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_float_CircBuffer("float_CircBuffer", " Circular buffer for holding state information", 
	"", "", "", sizeof(float_CircBuffer), (void**)0, 0, 0, 0,1);
TypeDef TA_const_RBpUnit("const_RBpUnit", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_float_CircBuffer("const_float_CircBuffer", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RBpUnit_ref("const_RBpUnit_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_float_CircBuffer_ref("const_float_CircBuffer_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_RBpTrial("const_RBpTrial", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RBpTrial_ref("const_RBpTrial_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_RBpSequence("const_RBpSequence", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RBpSequence_ref("const_RBpSequence_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_RBpSE_Stat("RBpSE_Stat", " Squared error for recurrent backprop, mulitplies by dt", 
	"", "", "", sizeof(RBpSE_Stat), (void**)&TAI_RBpSE_Stat, 1, 0, 0,1);
TypeDef TA_const_RBpSE_Stat("const_RBpSE_Stat", 1, 0, 0, 0, 1, 0);
TypeDef TA_RBpContextSpec("RBpContextSpec", " RBp version of context units in simple recurrent nets (SRN), expects one-to-one prjn from layer it copies, Trial->CopyContext() must be called by script to update!", 
	"", "", "", sizeof(RBpContextSpec), (void**)&TAI_RBpContextSpec, 1, 0, 0,1);
TypeDef TA_const_RBpSE_Stat_ref("const_RBpSE_Stat_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_APBpSettle_ptr("APBpSettle_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_RBpContextSpec("const_RBpContextSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_APBpTrial_ptr("APBpTrial_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_RBpContextSpec_ref("const_RBpContextSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_APBpCycle("const_APBpCycle", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_APBpCycle_ref("const_APBpCycle_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_APBpSettle("const_APBpSettle", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_APBpSettle_ref("const_APBpSettle_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_APBpTrial("const_APBpTrial", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_APBpTrial_ref("const_APBpTrial_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_APBpMaxDa_De("const_APBpMaxDa_De", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_APBpMaxDa_De_ref("const_APBpMaxDa_De_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_NoisyRBpUnitSpec("NoisyRBpUnitSpec", " RBp with noisy output signal (act plus noise)", 
	"", "", "", sizeof(NoisyRBpUnitSpec), (void**)&TAI_NoisyRBpUnitSpec, 1, 0, 0,1);
TypeDef TA_const_NoisyRBpUnitSpec("const_NoisyRBpUnitSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NoisyRBpUnitSpec_ref("const_NoisyRBpUnitSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_BpWizard("BpWizard", " backprop-specific wizard for automating construction of simulation objects", 
	"", "", "", sizeof(BpWizard), (void**)&TAI_BpWizard, 1, 0, 0,1);
TypeDef TA_const_BpWizard("const_BpWizard", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_BpWizard_ref("const_BpWizard_ref", 1, 0, 1, 0, 1, 0);

// Instances

  static cssEl* cssElCFun_Bp_Simple_WtDecay_stub(void*,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Bp_Simple_WtDecay((BpConSpec*)(void*)*arg[1], (BpCon*)(void*)*arg[2], (BpUnit*)(void*)*arg[3], (BpUnit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_Bp_WtElim_WtDecay_stub(void*,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Bp_WtElim_WtDecay((BpConSpec*)(void*)*arg[1], (BpCon*)(void*)*arg[2], (BpUnit*)(void*)*arg[3], (BpUnit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_Bp_Squared_Error_stub(void*,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Bp_Squared_Error((BpUnitSpec*)(void*)*arg[1], (BpUnit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Bp_CrossEnt_Error_stub(void*,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Bp_CrossEnt_Error((BpUnitSpec*)(void*)*arg[1], (BpUnit*)(void*)*arg[2]);
    return rval;}
BpConSpec*		 TAI_BpConSpec=NULL;
  static cssEl* cssElCFun_BpConSpec_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->C_InitWtState((Con_Group*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_C_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->C_InitWtDelta((Con_Group*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->C_Compute_dWt((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->UpdateWeights((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_C_Compute_dEdA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BpConSpec*)ths)->C_Compute_dEdA((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_BpConSpec_Compute_dEdA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BpConSpec*)ths)->Compute_dEdA((BpCon_Group*)(void*)*arg[1], (BpUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BpConSpec_B_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->B_Compute_dWt((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_C_Compute_WtDecay_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->C_Compute_WtDecay((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_C_BEF_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->C_BEF_UpdateWeights((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_C_AFT_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->C_AFT_UpdateWeights((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_C_NRM_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->C_NRM_UpdateWeights((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_B_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->B_UpdateWeights((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BpConSpec_SetCurLrate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpConSpec*)ths)->SetCurLrate((int)*arg[1]);
    return rval;}
BpCon*		 TAI_BpCon=NULL;
BpCon_Group*		 TAI_BpCon_Group=NULL;
  static cssEl* cssElCFun_BpCon_Group_SetCurLrate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpCon_Group*)ths)->SetCurLrate((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpCon_Group_Compute_dEdA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BpCon_Group*)ths)->Compute_dEdA((BpUnit*)(void*)*arg[1]));
    return rval;}
BpUnit*		 TAI_BpUnit=NULL;
  static cssEl* cssElCFun_BpUnit_SetCurLrate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnit*)ths)->SetCurLrate((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnit_Compute_Error_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnit*)ths)->Compute_Error();
    return rval;}
  static cssEl* cssElCFun_BpUnit_Compute_dEdA_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnit*)ths)->Compute_dEdA();
    return rval;}
  static cssEl* cssElCFun_BpUnit_Compute_dEdNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnit*)ths)->Compute_dEdNet();
    return rval;}
  static cssEl* cssElCFun_BpUnit_Compute_dEdA_dEdNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnit*)ths)->Compute_dEdA_dEdNet();
    return rval;}
BpUnitSpec*		 TAI_BpUnitSpec=NULL;
  static cssEl* cssElCFun_BpUnitSpec_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->InitState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_Compute_Error_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->Compute_Error((BpUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_Compute_dEdA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->Compute_dEdA((BpUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_Compute_dEdNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->Compute_dEdNet((BpUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_SetCurLrate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpUnitSpec*)ths)->SetCurLrate((BpUnit*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BpUnitSpec_GraphActFun_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((BpUnitSpec*)ths)->GraphActFun((GraphLog*)(void*)*arg[1]);}
    if(na == 2) {
      ((BpUnitSpec*)ths)->GraphActFun((GraphLog*)(void*)*arg[1], (float)*arg[2]);}
    if(na == 3) {
      ((BpUnitSpec*)ths)->GraphActFun((GraphLog*)(void*)*arg[1], (float)*arg[2], (float)*arg[3]);}
    return rval;}
BpTrial*		 TAI_BpTrial=NULL;
  static cssEl* cssElCFun_BpTrial_SetCurLrate_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpTrial*)ths)->SetCurLrate();
    return rval;}
  static cssEl* cssElCFun_BpTrial_Compute_Act_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpTrial*)ths)->Compute_Act();
    return rval;}
  static cssEl* cssElCFun_BpTrial_Compute_Error_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpTrial*)ths)->Compute_Error();
    return rval;}
  static cssEl* cssElCFun_BpTrial_Compute_dEdA_dEdNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpTrial*)ths)->Compute_dEdA_dEdNet();
    return rval;}
  static cssEl* cssElCFun_BpTrial_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BpTrial*)ths)->Compute_dWt();
    return rval;}
CE_Stat*		 TAI_CE_Stat=NULL;
  static cssEl* cssElCFun_CE_Stat_RecvCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((CE_Stat*)ths)->RecvCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_CE_Stat_SendCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((CE_Stat*)ths)->SendCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_CE_Stat_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((CE_Stat*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
NormDotProd_Stat*		 TAI_NormDotProd_Stat=NULL;
  static cssEl* cssElCFun_NormDotProd_Stat_RecvCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NormDotProd_Stat*)ths)->RecvCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NormDotProd_Stat_SendCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NormDotProd_Stat*)ths)->SendCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NormDotProd_Stat_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NormDotProd_Stat*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
VecCor_Stat*		 TAI_VecCor_Stat=NULL;
  static cssEl* cssElCFun_VecCor_Stat_RecvCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((VecCor_Stat*)ths)->RecvCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_VecCor_Stat_SendCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((VecCor_Stat*)ths)->SendCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_VecCor_Stat_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((VecCor_Stat*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
NormVecLen_Stat*		 TAI_NormVecLen_Stat=NULL;
  static cssEl* cssElCFun_NormVecLen_Stat_RecvCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NormVecLen_Stat*)ths)->RecvCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NormVecLen_Stat_SendCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NormVecLen_Stat*)ths)->SendCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_NormVecLen_Stat_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NormVecLen_Stat*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
HebbBpConSpec*		 TAI_HebbBpConSpec=NULL;
  static cssEl* cssElCFun_HebbBpConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((HebbBpConSpec*)ths)->C_Compute_dWt((BpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_HebbBpConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((HebbBpConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
ErrScaleBpConSpec*		 TAI_ErrScaleBpConSpec=NULL;
DeltaBarDeltaBpCon*		 TAI_DeltaBarDeltaBpCon=NULL;
DeltaBarDeltaBpConSpec*		 TAI_DeltaBarDeltaBpConSpec=NULL;
  static cssEl* cssElCFun_DeltaBarDeltaBpConSpec_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DeltaBarDeltaBpConSpec*)ths)->C_InitWtState((Con_Group*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_DeltaBarDeltaBpConSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DeltaBarDeltaBpConSpec*)ths)->UpdateWeights((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_DeltaBarDeltaBpConSpec_C_BEF_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DeltaBarDeltaBpConSpec*)ths)->C_BEF_UpdateWeights((DeltaBarDeltaBpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_DeltaBarDeltaBpConSpec_C_AFT_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DeltaBarDeltaBpConSpec*)ths)->C_AFT_UpdateWeights((DeltaBarDeltaBpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_DeltaBarDeltaBpConSpec_C_NRM_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DeltaBarDeltaBpConSpec*)ths)->C_NRM_UpdateWeights((DeltaBarDeltaBpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_DeltaBarDeltaBpConSpec_C_UpdateLrate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DeltaBarDeltaBpConSpec*)ths)->C_UpdateLrate((DeltaBarDeltaBpCon*)(void*)*arg[1], (BpUnit*)(void*)*arg[2], (BpUnit*)(void*)*arg[3]);
    return rval;}
BpContextSpec*		 TAI_BpContextSpec=NULL;
  static cssEl* cssElCFun_BpContextSpec_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpContextSpec*)ths)->InitState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpContextSpec_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpContextSpec*)ths)->InitWtDelta((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpContextSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpContextSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpContextSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpContextSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpContextSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpContextSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpContextSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpContextSpec*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpContextSpec_CheckConfig_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BpContextSpec*)ths)->CheckConfig((Unit*)(void*)*arg[1], (Layer*)(void*)*arg[2], (TrialProcess*)(void*)*arg[3]));
    return rval;}
LinearBpUnitSpec*		 TAI_LinearBpUnitSpec=NULL;
  static cssEl* cssElCFun_LinearBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LinearBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
ThreshLinBpUnitSpec*		 TAI_ThreshLinBpUnitSpec=NULL;
  static cssEl* cssElCFun_ThreshLinBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ThreshLinBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
NoisyBpUnitSpec*		 TAI_NoisyBpUnitSpec=NULL;
  static cssEl* cssElCFun_NoisyBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NoisyBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
StochasticBpUnitSpec*		 TAI_StochasticBpUnitSpec=NULL;
  static cssEl* cssElCFun_StochasticBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((StochasticBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
RBFBpUnitSpec*		 TAI_RBFBpUnitSpec=NULL;
  static cssEl* cssElCFun_RBFBpUnitSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBFBpUnitSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBFBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBFBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
BumpBpUnitSpec*		 TAI_BumpBpUnitSpec=NULL;
  static cssEl* cssElCFun_BumpBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BumpBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
ExpBpUnitSpec*		 TAI_ExpBpUnitSpec=NULL;
  static cssEl* cssElCFun_ExpBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ExpBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
SoftMaxBpUnitSpec*		 TAI_SoftMaxBpUnitSpec=NULL;
  static cssEl* cssElCFun_SoftMaxBpUnitSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftMaxBpUnitSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoftMaxBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftMaxBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoftMaxBpUnitSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftMaxBpUnitSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoftMaxBpUnitSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftMaxBpUnitSpec*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
RBpConSpec*		 TAI_RBpConSpec=NULL;
  static cssEl* cssElCFun_RBpConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpConSpec*)ths)->C_Compute_dWt((BpCon*)(void*)*arg[1], (RBpUnit*)(void*)*arg[2], (RBpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_RBpConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
RBpUnit*		 TAI_RBpUnit=NULL;
  static cssEl* cssElCFun_RBpUnit_StoreState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnit*)ths)->StoreState();
    return rval;}
  static cssEl* cssElCFun_RBpUnit_InitForBP_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnit*)ths)->InitForBP();
    return rval;}
  static cssEl* cssElCFun_RBpUnit_StepBack_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((RBpUnit*)ths)->StepBack((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_RBpUnit_RestoreState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((RBpUnit*)ths)->RestoreState((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_RBpUnit_ShiftBuffers_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnit*)ths)->ShiftBuffers((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnit_ResetStored_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnit*)ths)->ResetStored();
    return rval;}
  static cssEl* cssElCFun_RBpUnit_Compute_ClampExt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnit*)ths)->Compute_ClampExt();
    return rval;}
  static cssEl* cssElCFun_RBpUnit_Compute_HardClampNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnit*)ths)->Compute_HardClampNet();
    return rval;}
RBpUnitSpec*		 TAI_RBpUnitSpec=NULL;
  static cssEl* cssElCFun_RBpUnitSpec_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->InitState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_ResetStored_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->ResetStored((RBpUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_Compute_ClampExt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->Compute_ClampExt((RBpUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_Compute_HardClampNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->Compute_HardClampNet((RBpUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpUnitSpec_Compute_Act_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpUnitSpec*)ths)->Compute_Act_impl((RBpUnit*)(void*)*arg[1]);
    return rval;}
RBpTrial*		 TAI_RBpTrial=NULL;
  static cssEl* cssElCFun_RBpTrial_GenCntrLog_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->GenCntrLog((LogData*)(void*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_RBpTrial_Compute_ClampExt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->Compute_ClampExt();
    return rval;}
  static cssEl* cssElCFun_RBpTrial_StoreState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->StoreState();
    return rval;}
  static cssEl* cssElCFun_RBpTrial_InitForBP_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->InitForBP();
    return rval;}
  static cssEl* cssElCFun_RBpTrial_StepBack_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->StepBack((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpTrial_RestoreState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->RestoreState((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpTrial_ShiftBuffers_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->ShiftBuffers();
    return rval;}
  static cssEl* cssElCFun_RBpTrial_PerformBP_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((RBpTrial*)ths)->PerformBP());
    return rval;}
  static cssEl* cssElCFun_RBpTrial_PerformBP_impl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->PerformBP_impl();
    return rval;}
  static cssEl* cssElCFun_RBpTrial_GetUnitBufSize_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((RBpTrial*)ths)->GetUnitBufSize());}
    if(na == 1) {
      rval=new cssInt((int)((RBpTrial*)ths)->GetUnitBufSize((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_RBpTrial_ResetStored_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->ResetStored();
    return rval;}
  static cssEl* cssElCFun_RBpTrial_CopyContext_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RBpTrial*)ths)->CopyContext();
    return rval;}
RBpSequence*		 TAI_RBpSequence=NULL;
  static cssEl* cssElCFun_RBpSequence_GetMaxTick_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    rval=new cssInt((int)((RBpSequence*)ths)->GetMaxTick(refarg_0));
    *arg[1]=(Real)refarg_0;
    return rval;}
APBpCycle*		 TAI_APBpCycle=NULL;
  static cssEl* cssElCFun_APBpCycle_Compute_Act_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((APBpCycle*)ths)->Compute_Act();
    return rval;}
  static cssEl* cssElCFun_APBpCycle_Compute_Error_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((APBpCycle*)ths)->Compute_Error();
    return rval;}
  static cssEl* cssElCFun_APBpCycle_Compute_dEdA_dEdNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((APBpCycle*)ths)->Compute_dEdA_dEdNet();
    return rval;}
APBpSettle*		 TAI_APBpSettle=NULL;
  static cssEl* cssElCFun_APBpSettle_Compute_ClampExt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((APBpSettle*)ths)->Compute_ClampExt();
    return rval;}
  static cssEl* cssElCFun_APBpSettle_Compute_HardClampNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((APBpSettle*)ths)->Compute_HardClampNet();
    return rval;}
APBpTrial*		 TAI_APBpTrial=NULL;
  static cssEl* cssElCFun_APBpTrial_GenCntrLog_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((APBpTrial*)ths)->GenCntrLog((LogData*)(void*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_APBpTrial_SetCurLrate_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((APBpTrial*)ths)->SetCurLrate();
    return rval;}
  static cssEl* cssElCFun_APBpTrial_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((APBpTrial*)ths)->Compute_dWt();
    return rval;}
APBpMaxDa_De*		 TAI_APBpMaxDa_De=NULL;
  static cssEl* cssElCFun_APBpMaxDa_De_RecvCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((APBpMaxDa_De*)ths)->RecvCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_APBpMaxDa_De_SendCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((APBpMaxDa_De*)ths)->SendCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_APBpMaxDa_De_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((APBpMaxDa_De*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
SymRBpConSpec*		 TAI_SymRBpConSpec=NULL;
  static cssEl* cssElCFun_SymRBpConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SymRBpConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SymRBpConSpec_C_Compute_dWt_Sym_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SymRBpConSpec*)ths)->C_Compute_dWt_Sym((BpCon*)(void*)*arg[1], (RBpUnit*)(void*)*arg[2], (RBpUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_float_CircBuffer_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_CircBuffer*)ths)->Add((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_CircBuffer_CircIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((float_CircBuffer*)ths)->CircIdx((uint)*arg[1]));
    return rval;}
RBpSE_Stat*		 TAI_RBpSE_Stat=NULL;
RBpContextSpec*		 TAI_RBpContextSpec=NULL;
  static cssEl* cssElCFun_RBpContextSpec_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpContextSpec*)ths)->InitWtDelta((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpContextSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpContextSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpContextSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpContextSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpContextSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpContextSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpContextSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpContextSpec*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_RBpContextSpec_CheckConfig_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((RBpContextSpec*)ths)->CheckConfig((Unit*)(void*)*arg[1], (Layer*)(void*)*arg[2], (TrialProcess*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_RBpContextSpec_CopyContext_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RBpContextSpec*)ths)->CopyContext((RBpUnit*)(void*)*arg[1]);
    return rval;}
NoisyRBpUnitSpec*		 TAI_NoisyRBpUnitSpec=NULL;
BpWizard*		 TAI_BpWizard=NULL;
  static cssEl* cssElCFun_BpWizard_SRNContext_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BpWizard*)ths)->SRNContext((Network*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BpWizard_ToTimeEvents_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BpWizard*)ths)->ToTimeEvents((Environment*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BpWizard_ToRBPEvents_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((BpWizard*)ths)->ToRBPEvents((Environment*)(void*)*arg[1]);}
    if(na == 2) {
      ((BpWizard*)ths)->ToRBPEvents((Environment*)(void*)*arg[1], (int)*arg[2]);}
    return rval;}

// Type Data

static MethodArgs_data TA_taRegFun_Bp_Simple_WtDecay_MethArgs[]={
  {&TA_BpConSpec_ptr,NULL,"spec",""},
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_taRegFun_Bp_WtElim_WtDecay_MethArgs[]={
  {&TA_BpConSpec_ptr,NULL,"spec",""},
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_taRegFun_Bp_Squared_Error_MethArgs[]={
  {&TA_BpUnitSpec_ptr,NULL,"spec",""},
  {&TA_BpUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_taRegFun_Bp_CrossEnt_Error_MethArgs[]={
  {&TA_BpUnitSpec_ptr,NULL,"spec",""},
  {&TA_BpUnit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_taRegFun_MethodDef[]={
  {&TA_void,NULL,"Bp_Simple_WtDecay"," Simple weight decay (subtract decay*wt)","","BpConSpec_WtDecay ",
    0,4,-1,1,(ta_void_fun)(Bp_Simple_WtDecay),cssElCFun_Bp_Simple_WtDecay_stub,TA_taRegFun_Bp_Simple_WtDecay_MethArgs},
  {&TA_void,NULL,"Bp_WtElim_WtDecay"," Weight Elimination (Rumelhart) weight decay","","BpConSpec_WtDecay ",
    0,4,-1,1,(ta_void_fun)(Bp_WtElim_WtDecay),cssElCFun_Bp_WtElim_WtDecay_stub,TA_taRegFun_Bp_WtElim_WtDecay_MethArgs},
  {&TA_void,NULL,"Bp_Squared_Error"," Squared error function for bp","","BpUnit_Error ",
    0,2,-1,1,(ta_void_fun)(Bp_Squared_Error),cssElCFun_Bp_Squared_Error_stub,TA_taRegFun_Bp_Squared_Error_MethArgs},
  {&TA_void,NULL,"Bp_CrossEnt_Error"," Cross entropy error function for bp","","BpUnit_Error ",
    0,2,-1,1,(ta_void_fun)(Bp_CrossEnt_Error),cssElCFun_Bp_CrossEnt_Error_stub,TA_taRegFun_Bp_CrossEnt_Error_MethArgs},
  NULL};
static EnumDef_data TA_BpConSpec_MomentumType[]={
  {"AFTER_LRATE"," apply momentum after learning rate (old pdp style)","",0},
  {"BEFORE_LRATE"," apply momentum before learning rate","",1},
  {"NORMALIZED"," like BEFORE, but normalize direction to unit length","",2},
  NULL};
static int BpConSpec::* TA_BpConSpec_MbrOff;
static MemberDef_data TA_BpConSpec_MemberDef[]={
  {&TA_float,NULL,"lrate"," learning rate","","",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::lrate))),0,NULL,0},
  {&TA_float,NULL,"cur_lrate"," current actual learning rate = lrate * lrate_sched current value (* 1 if no lrate_sched)","READ_ONLY NO_INHERIT SHOW ","",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::cur_lrate))),0,NULL,0},
  {&TA_Schedule,NULL,"lrate_sched"," schedule of learning rate over training epochs (multiplies lrate!)","","",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::lrate_sched))),0,NULL,0},
  {&TA_float,NULL,"momentum"," momentum","","",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::momentum))),0,NULL,0},
  {NULL,"::MomentumType","momentum_type"," type of momentum function to use","CONDEDIT_OFF_momentum:0 ","",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::momentum_type))),0,NULL,0},
  {&TA_float,NULL,"momentum_c"," complement of momentum (for NORMALIZED)","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::momentum_c))),0,NULL,0},
  {&TA_float,NULL,"decay"," decay rate (before lrate and momentum)","","",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::decay))),0,NULL,0},
  {&TA_void,NULL,"decay_fun"," the weight decay function to use","CONDEDIT_OFF_decay:0 ","BpConSpec_WtDecay ",
    *((ta_memb_ptr*)&(TA_BpConSpec_MbrOff=(int BpConSpec::*)(&BpConSpec::decay_fun))),0,NULL,1},
  NULL};
static MethodArgs_data TA_BpConSpec_C_InitWtState_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_C_InitWtDelta_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_BpConSpec_UpdateWeights_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_BpConSpec_C_Compute_dEdA_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_Compute_dEdA_MethArgs[]={
  {&TA_BpCon_Group_ptr,NULL,"cg",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_B_Compute_dWt_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_BpConSpec_C_Compute_WtDecay_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_C_BEF_UpdateWeights_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_C_AFT_UpdateWeights_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_C_NRM_UpdateWeights_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BpConSpec_B_UpdateWeights_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_BpConSpec_SetCurLrate_MethArgs[]={
  {&TA_int,NULL,"epoch",""},
  NULL};
static MethodDef_data TA_BpConSpec_MethodDef[]={
  {&TA_void,NULL,"C_InitWtState","","","",
    1,4,-1,0,NULL,cssElCFun_BpConSpec_C_InitWtState_stub,TA_BpConSpec_C_InitWtState_MethArgs},
  {&TA_void,NULL,"C_InitWtDelta","","","",
    1,4,-1,0,NULL,cssElCFun_BpConSpec_C_InitWtDelta_stub,TA_BpConSpec_C_InitWtDelta_MethArgs},
  {&TA_void,NULL,"C_Compute_dWt","","","",
    1,3,-1,0,NULL,cssElCFun_BpConSpec_C_Compute_dWt_stub,TA_BpConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change","","",
    1,2,-1,0,NULL,cssElCFun_BpConSpec_Compute_dWt_stub,TA_BpConSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights (ie. add delta-wt to wt, zero delta-wt)","","",
    1,2,-1,0,NULL,cssElCFun_BpConSpec_UpdateWeights_stub,TA_BpConSpec_UpdateWeights_MethArgs},
  {&TA_float,NULL,"C_Compute_dEdA","","","",
    0,3,-1,0,NULL,cssElCFun_BpConSpec_C_Compute_dEdA_stub,TA_BpConSpec_C_Compute_dEdA_MethArgs},
  {&TA_float,NULL,"Compute_dEdA"," get error from units I send to","","",
    0,2,-1,0,NULL,cssElCFun_BpConSpec_Compute_dEdA_stub,TA_BpConSpec_Compute_dEdA_MethArgs},
  {&TA_void,NULL,"B_Compute_dWt"," Compute dE with respect to the weights","","",
    0,2,-1,0,NULL,cssElCFun_BpConSpec_B_Compute_dWt_stub,TA_BpConSpec_B_Compute_dWt_MethArgs},
  {&TA_void,NULL,"C_Compute_WtDecay"," call the decay function","","",
    0,3,-1,0,NULL,cssElCFun_BpConSpec_C_Compute_WtDecay_stub,TA_BpConSpec_C_Compute_WtDecay_MethArgs},
  {&TA_void,NULL,"C_BEF_UpdateWeights"," BEFORE_LRATE","","",
    0,3,-1,0,NULL,cssElCFun_BpConSpec_C_BEF_UpdateWeights_stub,TA_BpConSpec_C_BEF_UpdateWeights_MethArgs},
  {&TA_void,NULL,"C_AFT_UpdateWeights"," AFTER_LRATE","","",
    0,3,-1,0,NULL,cssElCFun_BpConSpec_C_AFT_UpdateWeights_stub,TA_BpConSpec_C_AFT_UpdateWeights_MethArgs},
  {&TA_void,NULL,"C_NRM_UpdateWeights"," NORMALIZED","","",
    0,3,-1,0,NULL,cssElCFun_BpConSpec_C_NRM_UpdateWeights_stub,TA_BpConSpec_C_NRM_UpdateWeights_MethArgs},
  {&TA_void,NULL,"B_UpdateWeights"," for the bias unit","","",
    0,2,-1,0,NULL,cssElCFun_BpConSpec_B_UpdateWeights_stub,TA_BpConSpec_B_UpdateWeights_MethArgs},
  {&TA_void,NULL,"SetCurLrate"," set current learning rate based on schedule given epoch","","",
    0,1,-1,0,NULL,cssElCFun_BpConSpec_SetCurLrate_stub,TA_BpConSpec_SetCurLrate_MethArgs},
  NULL};
static int BpCon::* TA_BpCon_MbrOff;
static MemberDef_data TA_BpCon_MemberDef[]={
  {&TA_float,NULL,"dwt"," Change in weight","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BpCon_MbrOff=(int BpCon::*)(&BpCon::dwt))),0,NULL,0},
  {&TA_float,NULL,"dEdW"," derivative of Error wrt weight","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BpCon_MbrOff=(int BpCon::*)(&BpCon::dEdW))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BpCon_Group_SetCurLrate_MethArgs[]={
  {&TA_int,NULL,"epoch",""},
  NULL};
static MethodArgs_data TA_BpCon_Group_Compute_dEdA_MethArgs[]={
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodDef_data TA_BpCon_Group_MethodDef[]={
  {&TA_void,NULL,"SetCurLrate","","","",
    0,1,-1,0,NULL,cssElCFun_BpCon_Group_SetCurLrate_stub,TA_BpCon_Group_SetCurLrate_MethArgs},
  {&TA_float,NULL,"Compute_dEdA","","","",
    0,1,-1,0,NULL,cssElCFun_BpCon_Group_Compute_dEdA_stub,TA_BpCon_Group_Compute_dEdA_MethArgs},
  NULL};
static int BpUnit::* TA_BpUnit_MbrOff;
static MemberDef_data TA_BpUnit_MemberDef[]={
  {&TA_float,NULL,"err"," this is E, not dEdA","","",
    *((ta_memb_ptr*)&(TA_BpUnit_MbrOff=(int BpUnit::*)(&BpUnit::err))),0,NULL,0},
  {&TA_float,NULL,"dEdA"," error wrt activation","LABEL_dEdA DMEM_SHARE_SET_3 ","",
    *((ta_memb_ptr*)&(TA_BpUnit_MbrOff=(int BpUnit::*)(&BpUnit::dEdA))),0,NULL,0},
  {&TA_float,NULL,"dEdNet"," error wrt net input","LABEL_dEdNet ","",
    *((ta_memb_ptr*)&(TA_BpUnit_MbrOff=(int BpUnit::*)(&BpUnit::dEdNet))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BpUnit_SetCurLrate_MethArgs[]={
  {&TA_int,NULL,"epoch",""},
  NULL};
static MethodDef_data TA_BpUnit_MethodDef[]={
  {&TA_void,NULL,"SetCurLrate","","","",
    0,1,-1,0,NULL,cssElCFun_BpUnit_SetCurLrate_stub,TA_BpUnit_SetCurLrate_MethArgs},
  {&TA_void,NULL,"Compute_Error","","","",
    0,0,-1,0,NULL,cssElCFun_BpUnit_Compute_Error_stub,NULL},
  {&TA_void,NULL,"Compute_dEdA","","","",
    0,0,-1,0,NULL,cssElCFun_BpUnit_Compute_dEdA_stub,NULL},
  {&TA_void,NULL,"Compute_dEdNet","","","",
    0,0,-1,0,NULL,cssElCFun_BpUnit_Compute_dEdNet_stub,NULL},
  {&TA_void,NULL,"Compute_dEdA_dEdNet","","","",
    0,0,-1,0,NULL,cssElCFun_BpUnit_Compute_dEdA_dEdNet_stub,NULL},
  NULL};
static int BpUnitSpec::* TA_BpUnitSpec_MbrOff;
static MemberDef_data TA_BpUnitSpec_MemberDef[]={
  {&TA_SigmoidSpec,NULL,"sig"," sigmoid activation parameters","","",
    *((ta_memb_ptr*)&(TA_BpUnitSpec_MbrOff=(int BpUnitSpec::*)(&BpUnitSpec::sig))),0,NULL,0},
  {&TA_float,NULL,"err_tol"," error tolerance (no error signal if |t-o|<err_tol)","","",
    *((ta_memb_ptr*)&(TA_BpUnitSpec_MbrOff=(int BpUnitSpec::*)(&BpUnitSpec::err_tol))),0,NULL,0},
  {&TA_void,NULL,"err_fun"," this points to the error fun, set appropriately","","BpUnit_Error ",
    *((ta_memb_ptr*)&(TA_BpUnitSpec_MbrOff=(int BpUnitSpec::*)(&BpUnitSpec::err_fun))),0,NULL,1},
  NULL};
static MethodArgs_data TA_BpUnitSpec_InitState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_Compute_Error_MethArgs[]={
  {&TA_BpUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_Compute_dEdA_MethArgs[]={
  {&TA_BpUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_Compute_dEdNet_MethArgs[]={
  {&TA_BpUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_SetCurLrate_MethArgs[]={
  {&TA_BpUnit_ptr,NULL,"u",""},
  {&TA_int,NULL,"epoch",""},
  NULL};
static MethodArgs_data TA_BpUnitSpec_GraphActFun_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"graph_log",""},
  {&TA_float,NULL,"min"," -5.0"},
  {&TA_float,NULL,"max"," 5.0"},
  NULL};
static MethodDef_data TA_BpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","","",
    1,1,-1,0,NULL,cssElCFun_BpUnitSpec_InitState_stub,TA_BpUnitSpec_InitState_MethArgs},
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_BpUnitSpec_Compute_Act_stub,TA_BpUnitSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights for all of my recv weights","","",
    1,1,-1,0,NULL,cssElCFun_BpUnitSpec_Compute_dWt_stub,TA_BpUnitSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights from deltas modify to update bias weight","","",
    1,1,-1,0,NULL,cssElCFun_BpUnitSpec_UpdateWeights_stub,TA_BpUnitSpec_UpdateWeights_MethArgs},
  {&TA_void,NULL,"Compute_Error"," call the error function (testing only)","","",
    0,1,-1,0,NULL,cssElCFun_BpUnitSpec_Compute_Error_stub,TA_BpUnitSpec_Compute_Error_MethArgs},
  {&TA_void,NULL,"Compute_dEdA"," error wrt unit activation","","",
    0,1,-1,0,NULL,cssElCFun_BpUnitSpec_Compute_dEdA_stub,TA_BpUnitSpec_Compute_dEdA_MethArgs},
  {&TA_void,NULL,"Compute_dEdNet"," error wrt net input","","",
    0,1,-1,0,NULL,cssElCFun_BpUnitSpec_Compute_dEdNet_stub,TA_BpUnitSpec_Compute_dEdNet_MethArgs},
  {&TA_void,NULL,"SetCurLrate"," set current learning rate based on epoch","","",
    0,2,-1,0,NULL,cssElCFun_BpUnitSpec_SetCurLrate_stub,TA_BpUnitSpec_SetCurLrate_MethArgs},
  {&TA_void,NULL,"GraphActFun"," graph the activation function (NULL = new graph log)","BUTTON NULL_OK ","",
    0,3,1,0,NULL,cssElCFun_BpUnitSpec_GraphActFun_stub,TA_BpUnitSpec_GraphActFun_MethArgs},
  NULL};
static int BpTrial::* TA_BpTrial_MbrOff;
static MemberDef_data TA_BpTrial_MemberDef[]={
  {&TA_bool,NULL,"bp_to_inputs"," backpropagate errors to input layers (faster if not done, which is the default)","DEF_false ","",
    *((ta_memb_ptr*)&(TA_BpTrial_MbrOff=(int BpTrial::*)(&BpTrial::bp_to_inputs))),0,NULL,0},
  NULL};
static MethodDef_data TA_BpTrial_MethodDef[]={
  {&TA_void,NULL,"SetCurLrate","","","",
    0,0,-1,0,NULL,cssElCFun_BpTrial_SetCurLrate_stub,NULL},
  {&TA_void,NULL,"Compute_Act","","","",
    0,0,-1,0,NULL,cssElCFun_BpTrial_Compute_Act_stub,NULL},
  {&TA_void,NULL,"Compute_Error","","","",
    0,0,-1,0,NULL,cssElCFun_BpTrial_Compute_Error_stub,NULL},
  {&TA_void,NULL,"Compute_dEdA_dEdNet","","","",
    0,0,-1,0,NULL,cssElCFun_BpTrial_Compute_dEdA_dEdNet_stub,NULL},
  {&TA_void,NULL,"Compute_dWt","","","",
    0,0,-1,0,NULL,cssElCFun_BpTrial_Compute_dWt_stub,NULL},
  NULL};
static int CE_Stat::* TA_CE_Stat_MbrOff;
static MemberDef_data TA_CE_Stat_MemberDef[]={
  {&TA_StatVal,NULL,"ce"," cross-entropy error","","",
    *((ta_memb_ptr*)&(TA_CE_Stat_MbrOff=(int CE_Stat::*)(&CE_Stat::ce))),0,NULL,0},
  {&TA_float,NULL,"tolerance"," if error is less than this, its 0","","",
    *((ta_memb_ptr*)&(TA_CE_Stat_MbrOff=(int CE_Stat::*)(&CE_Stat::tolerance))),0,NULL,0},
  NULL};
static MethodArgs_data TA_CE_Stat_RecvCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_CE_Stat_SendCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_CE_Stat_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodDef_data TA_CE_Stat_MethodDef[]={
  {&TA_void,NULL,"RecvCon_Run"," Compute over recv conns of a unit don't do these!","","",
    1,1,-1,0,NULL,cssElCFun_CE_Stat_RecvCon_Run_stub,TA_CE_Stat_RecvCon_Run_MethArgs},
  {&TA_void,NULL,"SendCon_Run"," Compute over send conns of a unit","","",
    1,1,-1,0,NULL,cssElCFun_CE_Stat_SendCon_Run_stub,TA_CE_Stat_SendCon_Run_MethArgs},
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    1,1,-1,0,NULL,cssElCFun_CE_Stat_Unit_Stat_stub,TA_CE_Stat_Unit_Stat_MethArgs},
  NULL};
static int NormDotProd_Stat::* TA_NormDotProd_Stat_MbrOff;
static MemberDef_data TA_NormDotProd_Stat_MemberDef[]={
  {&TA_StatVal,NULL,"ndp"," normalized dot product","","",
    *((ta_memb_ptr*)&(TA_NormDotProd_Stat_MbrOff=(int NormDotProd_Stat::*)(&NormDotProd_Stat::ndp))),0,NULL,0},
  NULL};
static MethodArgs_data TA_NormDotProd_Stat_RecvCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_NormDotProd_Stat_SendCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_NormDotProd_Stat_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodDef_data TA_NormDotProd_Stat_MethodDef[]={
  {&TA_void,NULL,"RecvCon_Run"," Compute over recv conns of a unit don't do these!","","",
    1,1,-1,0,NULL,cssElCFun_NormDotProd_Stat_RecvCon_Run_stub,TA_NormDotProd_Stat_RecvCon_Run_MethArgs},
  {&TA_void,NULL,"SendCon_Run"," Compute over send conns of a unit","","",
    1,1,-1,0,NULL,cssElCFun_NormDotProd_Stat_SendCon_Run_stub,TA_NormDotProd_Stat_SendCon_Run_MethArgs},
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    1,1,-1,0,NULL,cssElCFun_NormDotProd_Stat_Unit_Stat_stub,TA_NormDotProd_Stat_Unit_Stat_MethArgs},
  NULL};
static int VecCor_Stat::* TA_VecCor_Stat_MbrOff;
static MemberDef_data TA_VecCor_Stat_MemberDef[]={
  {&TA_StatVal,NULL,"vcor"," vector correlation","","",
    *((ta_memb_ptr*)&(TA_VecCor_Stat_MbrOff=(int VecCor_Stat::*)(&VecCor_Stat::vcor))),0,NULL,0},
  {&TA_float,NULL,"dp"," ","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_VecCor_Stat_MbrOff=(int VecCor_Stat::*)(&VecCor_Stat::dp))),0,NULL,0},
  {&TA_float,NULL,"l1"," ","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_VecCor_Stat_MbrOff=(int VecCor_Stat::*)(&VecCor_Stat::l1))),0,NULL,0},
  {&TA_float,NULL,"l2"," ","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_VecCor_Stat_MbrOff=(int VecCor_Stat::*)(&VecCor_Stat::l2))),0,NULL,0},
  NULL};
static MethodArgs_data TA_VecCor_Stat_RecvCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_VecCor_Stat_SendCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_VecCor_Stat_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodDef_data TA_VecCor_Stat_MethodDef[]={
  {&TA_void,NULL,"RecvCon_Run"," Compute over recv conns of a unit don't do these!","","",
    1,1,-1,0,NULL,cssElCFun_VecCor_Stat_RecvCon_Run_stub,TA_VecCor_Stat_RecvCon_Run_MethArgs},
  {&TA_void,NULL,"SendCon_Run"," Compute over send conns of a unit","","",
    1,1,-1,0,NULL,cssElCFun_VecCor_Stat_SendCon_Run_stub,TA_VecCor_Stat_SendCon_Run_MethArgs},
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    1,1,-1,0,NULL,cssElCFun_VecCor_Stat_Unit_Stat_stub,TA_VecCor_Stat_Unit_Stat_MethArgs},
  NULL};
static int NormVecLen_Stat::* TA_NormVecLen_Stat_MbrOff;
static MemberDef_data TA_NormVecLen_Stat_MemberDef[]={
  {&TA_StatVal,NULL,"nvl"," normalized vector length","","",
    *((ta_memb_ptr*)&(TA_NormVecLen_Stat_MbrOff=(int NormVecLen_Stat::*)(&NormVecLen_Stat::nvl))),0,NULL,0},
  NULL};
static MethodArgs_data TA_NormVecLen_Stat_RecvCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_NormVecLen_Stat_SendCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_NormVecLen_Stat_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodDef_data TA_NormVecLen_Stat_MethodDef[]={
  {&TA_void,NULL,"RecvCon_Run"," Compute over recv conns of a unit don't do these!","","",
    1,1,-1,0,NULL,cssElCFun_NormVecLen_Stat_RecvCon_Run_stub,TA_NormVecLen_Stat_RecvCon_Run_MethArgs},
  {&TA_void,NULL,"SendCon_Run"," Compute over send conns of a unit","","",
    1,1,-1,0,NULL,cssElCFun_NormVecLen_Stat_SendCon_Run_stub,TA_NormVecLen_Stat_SendCon_Run_MethArgs},
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    1,1,-1,0,NULL,cssElCFun_NormVecLen_Stat_Unit_Stat_stub,TA_NormVecLen_Stat_Unit_Stat_MethArgs},
  NULL};
static MethodArgs_data TA_HebbBpConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_HebbBpConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_HebbBpConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt","","","",
    1,3,-1,0,NULL,cssElCFun_HebbBpConSpec_C_Compute_dWt_stub,TA_HebbBpConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change","","",
    1,2,-1,0,NULL,cssElCFun_HebbBpConSpec_Compute_dWt_stub,TA_HebbBpConSpec_Compute_dWt_MethArgs},
  NULL};
static int ErrScaleBpConSpec::* TA_ErrScaleBpConSpec_MbrOff;
static MemberDef_data TA_ErrScaleBpConSpec_MemberDef[]={
  {&TA_float,NULL,"err_scale"," the scaling parameter","","",
    *((ta_memb_ptr*)&(TA_ErrScaleBpConSpec_MbrOff=(int ErrScaleBpConSpec::*)(&ErrScaleBpConSpec::err_scale))),0,NULL,0},
  NULL};
static int DeltaBarDeltaBpCon::* TA_DeltaBarDeltaBpCon_MbrOff;
static MemberDef_data TA_DeltaBarDeltaBpCon_MemberDef[]={
  {&TA_float,NULL,"lrate"," local learning rate","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DeltaBarDeltaBpCon_MbrOff=(int DeltaBarDeltaBpCon::*)(&DeltaBarDeltaBpCon::lrate))),0,NULL,0},
  NULL};
static int DeltaBarDeltaBpConSpec::* TA_DeltaBarDeltaBpConSpec_MbrOff;
static MemberDef_data TA_DeltaBarDeltaBpConSpec_MemberDef[]={
  {&TA_float,NULL,"lrate_incr"," rate of learning rate increase (additive)","","",
    *((ta_memb_ptr*)&(TA_DeltaBarDeltaBpConSpec_MbrOff=(int DeltaBarDeltaBpConSpec::*)(&DeltaBarDeltaBpConSpec::lrate_incr))),0,NULL,0},
  {&TA_float,NULL,"lrate_decr"," rate of learning rate decrease (multiplicative)","","",
    *((ta_memb_ptr*)&(TA_DeltaBarDeltaBpConSpec_MbrOff=(int DeltaBarDeltaBpConSpec::*)(&DeltaBarDeltaBpConSpec::lrate_decr))),0,NULL,0},
  {&TA_float,NULL,"act_lrate_incr"," actual lrate increase (times lrate)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DeltaBarDeltaBpConSpec_MbrOff=(int DeltaBarDeltaBpConSpec::*)(&DeltaBarDeltaBpConSpec::act_lrate_incr))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DeltaBarDeltaBpConSpec_C_InitWtState_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_DeltaBarDeltaBpConSpec_UpdateWeights_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_DeltaBarDeltaBpConSpec_C_BEF_UpdateWeights_MethArgs[]={
  {&TA_DeltaBarDeltaBpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_DeltaBarDeltaBpConSpec_C_AFT_UpdateWeights_MethArgs[]={
  {&TA_DeltaBarDeltaBpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_DeltaBarDeltaBpConSpec_C_NRM_UpdateWeights_MethArgs[]={
  {&TA_DeltaBarDeltaBpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_DeltaBarDeltaBpConSpec_C_UpdateLrate_MethArgs[]={
  {&TA_DeltaBarDeltaBpCon_ptr,NULL,"cn",""},
  {&TA_BpUnit_ptr,NULL,"ru",""},
  {&TA_BpUnit_ptr,NULL,"su",""},
  NULL};
static MethodDef_data TA_DeltaBarDeltaBpConSpec_MethodDef[]={
  {&TA_void,NULL,"C_InitWtState"," set initial learning rate","","",
    1,4,-1,0,NULL,cssElCFun_DeltaBarDeltaBpConSpec_C_InitWtState_stub,TA_DeltaBarDeltaBpConSpec_C_InitWtState_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights (ie. add delta-wt to wt, zero delta-wt)","","",
    1,2,-1,0,NULL,cssElCFun_DeltaBarDeltaBpConSpec_UpdateWeights_stub,TA_DeltaBarDeltaBpConSpec_UpdateWeights_MethArgs},
  {&TA_void,NULL,"C_BEF_UpdateWeights"," BEFORE_LRATE","","",
    1,3,-1,0,NULL,cssElCFun_DeltaBarDeltaBpConSpec_C_BEF_UpdateWeights_stub,TA_DeltaBarDeltaBpConSpec_C_BEF_UpdateWeights_MethArgs},
  {&TA_void,NULL,"C_AFT_UpdateWeights"," AFTER_LRATE","","",
    1,3,-1,0,NULL,cssElCFun_DeltaBarDeltaBpConSpec_C_AFT_UpdateWeights_stub,TA_DeltaBarDeltaBpConSpec_C_AFT_UpdateWeights_MethArgs},
  {&TA_void,NULL,"C_NRM_UpdateWeights"," NORMALIZED","","",
    1,3,-1,0,NULL,cssElCFun_DeltaBarDeltaBpConSpec_C_NRM_UpdateWeights_stub,TA_DeltaBarDeltaBpConSpec_C_NRM_UpdateWeights_MethArgs},
  {&TA_void,NULL,"C_UpdateLrate","","","",
    0,3,-1,0,NULL,cssElCFun_DeltaBarDeltaBpConSpec_C_UpdateLrate_stub,TA_DeltaBarDeltaBpConSpec_C_UpdateLrate_MethArgs},
  NULL};
static int BpContextSpec::* TA_BpContextSpec_MbrOff;
static MemberDef_data TA_BpContextSpec_MemberDef[]={
  {&TA_float,NULL,"hysteresis"," hysteresis factor: (1-hyst)*new + hyst*old","","",
    *((ta_memb_ptr*)&(TA_BpContextSpec_MbrOff=(int BpContextSpec::*)(&BpContextSpec::hysteresis))),0,NULL,0},
  {&TA_float,NULL,"hysteresis_c"," complement of hysteresis","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_BpContextSpec_MbrOff=(int BpContextSpec::*)(&BpContextSpec::hysteresis_c))),0,NULL,0},
  {&TA_Random,NULL,"initial_act"," initial activation value","","",
    *((ta_memb_ptr*)&(TA_BpContextSpec_MbrOff=(int BpContextSpec::*)(&BpContextSpec::initial_act))),0,NULL,0},
  {&TA_taString,NULL,"variable"," name of unit variable to copy into","","",
    *((ta_memb_ptr*)&(TA_BpContextSpec_MbrOff=(int BpContextSpec::*)(&BpContextSpec::variable))),0,NULL,0},
  {NULL,"Unit::ExtType","unit_flags"," flags to set on the unit after copying value","","",
    *((ta_memb_ptr*)&(TA_BpContextSpec_MbrOff=(int BpContextSpec::*)(&BpContextSpec::unit_flags))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BpContextSpec_InitState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpContextSpec_InitWtDelta_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BpContextSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BpContextSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BpContextSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BpContextSpec_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BpContextSpec_CheckConfig_MethArgs[]={
  {&TA_Unit_ptr,NULL,"un",""},
  {&TA_Layer_ptr,NULL,"lay",""},
  {&TA_TrialProcess_ptr,NULL,"tp",""},
  NULL};
static MethodDef_data TA_BpContextSpec_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","","",
    1,1,-1,0,NULL,cssElCFun_BpContextSpec_InitState_stub,TA_BpContextSpec_InitState_MethArgs},
  {&TA_void,NULL,"InitWtDelta"," init weight delta variables","","",
    1,1,-1,0,NULL,cssElCFun_BpContextSpec_InitWtDelta_stub,TA_BpContextSpec_InitWtDelta_MethArgs},
  {&TA_void,NULL,"Compute_Net","","","",
    1,1,-1,0,NULL,cssElCFun_BpContextSpec_Compute_Net_stub,TA_BpContextSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid) copy activation from corresponding unit in projection from layer","","",
    1,1,-1,0,NULL,cssElCFun_BpContextSpec_Compute_Act_stub,TA_BpContextSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights for all of my recv weights","","",
    1,1,-1,0,NULL,cssElCFun_BpContextSpec_Compute_dWt_stub,TA_BpContextSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights from deltas modify to update bias weight bp special functions","","",
    1,1,-1,0,NULL,cssElCFun_BpContextSpec_UpdateWeights_stub,TA_BpContextSpec_UpdateWeights_MethArgs},
  {&TA_bool,NULL,"CheckConfig"," check for for misc configuration settings required by different algorithms, including settings on the processes","","",
    1,3,-1,0,NULL,cssElCFun_BpContextSpec_CheckConfig_stub,TA_BpContextSpec_CheckConfig_MethArgs},
  NULL};
static MethodArgs_data TA_LinearBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_LinearBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_LinearBpUnitSpec_Compute_Act_stub,TA_LinearBpUnitSpec_Compute_Act_MethArgs},
  NULL};
static int ThreshLinBpUnitSpec::* TA_ThreshLinBpUnitSpec_MbrOff;
static MemberDef_data TA_ThreshLinBpUnitSpec_MemberDef[]={
  {&TA_float,NULL,"threshold","","","",
    *((ta_memb_ptr*)&(TA_ThreshLinBpUnitSpec_MbrOff=(int ThreshLinBpUnitSpec::*)(&ThreshLinBpUnitSpec::threshold))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ThreshLinBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_ThreshLinBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_ThreshLinBpUnitSpec_Compute_Act_stub,TA_ThreshLinBpUnitSpec_Compute_Act_MethArgs},
  NULL};
static int NoisyBpUnitSpec::* TA_NoisyBpUnitSpec_MbrOff;
static MemberDef_data TA_NoisyBpUnitSpec_MemberDef[]={
  {&TA_Random,NULL,"noise"," what kind of noise to add to activations","","",
    *((ta_memb_ptr*)&(TA_NoisyBpUnitSpec_MbrOff=(int NoisyBpUnitSpec::*)(&NoisyBpUnitSpec::noise))),0,NULL,0},
  NULL};
static MethodArgs_data TA_NoisyBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_NoisyBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_NoisyBpUnitSpec_Compute_Act_stub,TA_NoisyBpUnitSpec_Compute_Act_MethArgs},
  NULL};
static MethodArgs_data TA_StochasticBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_StochasticBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_StochasticBpUnitSpec_Compute_Act_stub,TA_StochasticBpUnitSpec_Compute_Act_MethArgs},
  NULL};
static int RBFBpUnitSpec::* TA_RBFBpUnitSpec_MbrOff;
static MemberDef_data TA_RBFBpUnitSpec_MemberDef[]={
  {&TA_float,NULL,"var"," variance of Gaussian","","",
    *((ta_memb_ptr*)&(TA_RBFBpUnitSpec_MbrOff=(int RBFBpUnitSpec::*)(&RBFBpUnitSpec::var))),0,NULL,0},
  {&TA_float,NULL,"norm_const"," normalization const for Gaussian","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBFBpUnitSpec_MbrOff=(int RBFBpUnitSpec::*)(&RBFBpUnitSpec::norm_const))),0,NULL,0},
  {&TA_float,NULL,"denom_const"," denominator const for Gaussian","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBFBpUnitSpec_MbrOff=(int RBFBpUnitSpec::*)(&RBFBpUnitSpec::denom_const))),0,NULL,0},
  NULL};
static MethodArgs_data TA_RBFBpUnitSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBFBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_RBFBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Net","","","",
    1,1,-1,0,NULL,cssElCFun_RBFBpUnitSpec_Compute_Net_stub,TA_RBFBpUnitSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_RBFBpUnitSpec_Compute_Act_stub,TA_RBFBpUnitSpec_Compute_Act_MethArgs},
  NULL};
static int BumpBpUnitSpec::* TA_BumpBpUnitSpec_MbrOff;
static MemberDef_data TA_BumpBpUnitSpec_MemberDef[]={
  {&TA_float,NULL,"mean"," mean of Gaussian","","",
    *((ta_memb_ptr*)&(TA_BumpBpUnitSpec_MbrOff=(int BumpBpUnitSpec::*)(&BumpBpUnitSpec::mean))),0,NULL,0},
  {&TA_float,NULL,"std_dev"," std deviation of Gaussian","","",
    *((ta_memb_ptr*)&(TA_BumpBpUnitSpec_MbrOff=(int BumpBpUnitSpec::*)(&BumpBpUnitSpec::std_dev))),0,NULL,0},
  {&TA_float,NULL,"std_dev_r"," reciprocal of std_dev","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_BumpBpUnitSpec_MbrOff=(int BumpBpUnitSpec::*)(&BumpBpUnitSpec::std_dev_r))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BumpBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_BumpBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_BumpBpUnitSpec_Compute_Act_stub,TA_BumpBpUnitSpec_Compute_Act_MethArgs},
  NULL};
static MethodArgs_data TA_ExpBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_ExpBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_ExpBpUnitSpec_Compute_Act_stub,TA_ExpBpUnitSpec_Compute_Act_MethArgs},
  NULL};
static MethodArgs_data TA_SoftMaxBpUnitSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_SoftMaxBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_SoftMaxBpUnitSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_SoftMaxBpUnitSpec_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodDef_data TA_SoftMaxBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Net"," do nothing","","",
    1,1,-1,0,NULL,cssElCFun_SoftMaxBpUnitSpec_Compute_Net_stub,TA_SoftMaxBpUnitSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_SoftMaxBpUnitSpec_Compute_Act_stub,TA_SoftMaxBpUnitSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights for all of my recv weights","","",
    1,1,-1,0,NULL,cssElCFun_SoftMaxBpUnitSpec_Compute_dWt_stub,TA_SoftMaxBpUnitSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights from deltas modify to update bias weight","","",
    1,1,-1,0,NULL,cssElCFun_SoftMaxBpUnitSpec_UpdateWeights_stub,TA_SoftMaxBpUnitSpec_UpdateWeights_MethArgs},
  NULL};
static MethodArgs_data TA_RBpConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_RBpUnit_ptr,NULL,"ru",""},
  {&TA_RBpUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_RBpConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_RBpConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt","","","",
    2,3,-1,0,NULL,cssElCFun_RBpConSpec_C_Compute_dWt_stub,TA_RBpConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change Compute dE with respect to the weights (using prv_act) as sender","","",
    1,2,-1,0,NULL,cssElCFun_RBpConSpec_Compute_dWt_stub,TA_RBpConSpec_Compute_dWt_MethArgs},
  NULL};
static int RBpUnit::* TA_RBpUnit_MbrOff;
static MemberDef_data TA_RBpUnit_MemberDef[]={
  {&TA_float,NULL,"da"," delta-activation (change in activation value)","","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::da))),0,NULL,0},
  {&TA_float,NULL,"ddE"," delta-delta-Error (change in error derivative)","","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::ddE))),0,NULL,0},
  {NULL,"Unit::ExtType","prv_ext_flag"," previous external input flag","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::prv_ext_flag))),0,NULL,0},
  {&TA_float,NULL,"prv_targ"," previous target value","NO_VIEW HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::prv_targ))),0,NULL,0},
  {&TA_float,NULL,"prv_ext"," previous external input value","NO_VIEW HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::prv_ext))),0,NULL,0},
  {&TA_float,NULL,"prv_act"," previous activation value","NO_VIEW HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::prv_act))),0,NULL,0},
  {&TA_float,NULL,"act_raw"," current raw activation value","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::act_raw))),0,NULL,0},
  {&TA_float,NULL,"prv_net"," previous net-input value","NO_VIEW HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::prv_net))),0,NULL,0},
  {&TA_float,NULL,"prv_dEdA"," previous dEdA value","NO_VIEW HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::prv_dEdA))),0,NULL,0},
  {&TA_float,NULL,"prv_dEdNet"," previous dEdNet value","NO_VIEW HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::prv_dEdNet))),0,NULL,0},
  {&TA_float,NULL,"clmp_net"," net input from hard-clamped input layers","NO_VIEW HIDDEN ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::clmp_net))),0,NULL,0},
  {&TA_float_CircBuffer,NULL,"ext_flags"," array of external_flag values","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::ext_flags))),0,NULL,0},
  {&TA_float_CircBuffer,NULL,"targs"," array of target values","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::targs))),0,NULL,0},
  {&TA_float_CircBuffer,NULL,"exts"," array of external input values","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::exts))),0,NULL,0},
  {&TA_float_CircBuffer,NULL,"acts"," array of activation values","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_RBpUnit_MbrOff=(int RBpUnit::*)(&RBpUnit::acts))),0,NULL,0},
  NULL};
static MethodArgs_data TA_RBpUnit_StepBack_MethArgs[]={
  {&TA_int,NULL,"tick",""},
  NULL};
static MethodArgs_data TA_RBpUnit_RestoreState_MethArgs[]={
  {&TA_int,NULL,"tick",""},
  NULL};
static MethodArgs_data TA_RBpUnit_ShiftBuffers_MethArgs[]={
  {&TA_int,NULL,"ticks",""},
  NULL};
static MethodDef_data TA_RBpUnit_MethodDef[]={
  {&TA_void,NULL,"StoreState"," store state information in buffers","","",
    0,0,-1,0,NULL,cssElCFun_RBpUnit_StoreState_stub,NULL},
  {&TA_void,NULL,"InitForBP"," initialization prior to backpropagation (prv_dEdA, prv_dEdNet)","","",
    0,0,-1,0,NULL,cssElCFun_RBpUnit_InitForBP_stub,NULL},
  {&TA_bool,NULL,"StepBack"," move units backwards in time at given tick position in array","","",
    0,1,-1,0,NULL,cssElCFun_RBpUnit_StepBack_stub,TA_RBpUnit_StepBack_MethArgs},
  {&TA_bool,NULL,"RestoreState"," restore state of units to current values at given tick","","",
    0,1,-1,0,NULL,cssElCFun_RBpUnit_RestoreState_stub,TA_RBpUnit_RestoreState_MethArgs},
  {&TA_void,NULL,"ShiftBuffers"," shift unit data buffers by given number of ticks","","",
    0,1,-1,0,NULL,cssElCFun_RBpUnit_ShiftBuffers_stub,TA_RBpUnit_ShiftBuffers_MethArgs},
  {&TA_void,NULL,"ResetStored","","","",
    0,0,-1,0,NULL,cssElCFun_RBpUnit_ResetStored_stub,NULL},
  {&TA_void,NULL,"Compute_ClampExt","","","",
    0,0,-1,0,NULL,cssElCFun_RBpUnit_Compute_ClampExt_stub,NULL},
  {&TA_void,NULL,"Compute_HardClampNet","","","",
    0,0,-1,0,NULL,cssElCFun_RBpUnit_Compute_HardClampNet_stub,NULL},
  NULL};
static EnumDef_data TA_RBpUnitSpec_TimeAvgType[]={
  {"ACTIVATION"," time-average the activations","",0},
  {"NET_INPUT"," time-average the net inputs","",1},
  NULL};
static int RBpUnitSpec::* TA_RBpUnitSpec_MbrOff;
static MemberDef_data TA_RBpUnitSpec_MemberDef[]={
  {&TA_float,NULL,"dt"," grain of time computing on (must be in [0..1] range)","","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::dt))),0,NULL,0},
  {NULL,"::TimeAvgType","time_avg"," type of time-averaging to perform","","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::time_avg))),0,NULL,0},
  {&TA_bool,NULL,"soft_clamp","","","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::soft_clamp))),0,NULL,0},
  {&TA_bool,NULL,"fast_hard_clamp_net"," compute netin from hard clamped layers only once: ONLY IF ALL LAYERS HARD CLAMPED","CONDEDIT_OFF_soft_clamp:true ","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::fast_hard_clamp_net))),0,NULL,0},
  {&TA_float,NULL,"soft_clamp_gain"," gain on the soft clamping","CONDEDIT_ON_soft_clamp:true ","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::soft_clamp_gain))),0,NULL,0},
  {&TA_bool,NULL,"teacher_force"," use teacher forcing","","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::teacher_force))),0,NULL,0},
  {&TA_bool,NULL,"store_states"," store activity states (usually true, except in AP mode)","","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::store_states))),0,NULL,0},
  {&TA_Random,NULL,"initial_act"," initial activation value","","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::initial_act))),0,NULL,0},
  {&TA_bool,NULL,"updt_clamped_wts"," update weights for clamped units: need this for symmetric cons!","","",
    *((ta_memb_ptr*)&(TA_RBpUnitSpec_MbrOff=(int RBpUnitSpec::*)(&RBpUnitSpec::updt_clamped_wts))),0,NULL,0},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_InitState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_ResetStored_MethArgs[]={
  {&TA_RBpUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_Compute_ClampExt_MethArgs[]={
  {&TA_RBpUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_Compute_HardClampNet_MethArgs[]={
  {&TA_RBpUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpUnitSpec_Compute_Act_impl_MethArgs[]={
  {&TA_RBpUnit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_RBpUnitSpec_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","","",
    1,1,-1,0,NULL,cssElCFun_RBpUnitSpec_InitState_stub,TA_RBpUnitSpec_InitState_MethArgs},
  {&TA_void,NULL,"Compute_Net","","","",
    1,1,-1,0,NULL,cssElCFun_RBpUnitSpec_Compute_Net_stub,TA_RBpUnitSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid)","","",
    1,1,-1,0,NULL,cssElCFun_RBpUnitSpec_Compute_Act_stub,TA_RBpUnitSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights for all of my recv weights","","",
    1,1,-1,0,NULL,cssElCFun_RBpUnitSpec_Compute_dWt_stub,TA_RBpUnitSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights from deltas modify to update bias weight","","",
    1,1,-1,0,NULL,cssElCFun_RBpUnitSpec_UpdateWeights_stub,TA_RBpUnitSpec_UpdateWeights_MethArgs},
  {&TA_void,NULL,"ResetStored"," reset the stored state values, which clears bp sequence and resets time, but leaves current state intact","","",
    0,1,-1,0,NULL,cssElCFun_RBpUnitSpec_ResetStored_stub,TA_RBpUnitSpec_ResetStored_MethArgs},
  {&TA_void,NULL,"Compute_ClampExt"," compute activations resulting from clamped external input (for initial state)","","",
    0,1,-1,0,NULL,cssElCFun_RBpUnitSpec_Compute_ClampExt_stub,TA_RBpUnitSpec_Compute_ClampExt_MethArgs},
  {&TA_void,NULL,"Compute_HardClampNet"," for fast-hard-clamp-net: call this first","","",
    0,1,-1,0,NULL,cssElCFun_RBpUnitSpec_Compute_HardClampNet_stub,TA_RBpUnitSpec_Compute_HardClampNet_MethArgs},
  {&TA_void,NULL,"Compute_Act_impl","","","",
    0,1,-1,0,NULL,cssElCFun_RBpUnitSpec_Compute_Act_impl_stub,TA_RBpUnitSpec_Compute_Act_impl_MethArgs},
  NULL};
static int RBpTrial::* TA_RBpTrial_MbrOff;
static MemberDef_data TA_RBpTrial_MemberDef[]={
  {&TA_float,NULL,"time"," current time (relative to start of sequence)","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::time))),0,NULL,0},
  {&TA_float,NULL,"dt"," this is made to correspond to the dt used by units","READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::dt))),0,NULL,0},
  {&TA_float,NULL,"time_window"," time window to pay attention to derivatives for","","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::time_window))),0,NULL,0},
  {&TA_float,NULL,"bp_gap"," time period to go before performing a bp","","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::bp_gap))),0,NULL,0},
  {&TA_bool,NULL,"real_time"," use 'real time' model (else time_window = length of sequence)","","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::real_time))),0,NULL,0},
  {&TA_bool,NULL,"bp_performed"," true if bp was just performed last step","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::bp_performed))),0,NULL,0},
  {&TA_int,NULL,"time_win_ticks"," time window in ticks","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::time_win_ticks))),0,NULL,0},
  {&TA_int,NULL,"bp_gap_ticks"," bp window in ticks","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RBpTrial_MbrOff=(int RBpTrial::*)(&RBpTrial::bp_gap_ticks))),0,NULL,0},
  NULL};
static MethodArgs_data TA_RBpTrial_GenCntrLog_MethArgs[]={
  {&TA_LogData_ptr,NULL,"ld",""},
  {&TA_bool,NULL,"gen",""},
  NULL};
static MethodArgs_data TA_RBpTrial_StepBack_MethArgs[]={
  {&TA_int,NULL,"tick",""},
  NULL};
static MethodArgs_data TA_RBpTrial_RestoreState_MethArgs[]={
  {&TA_int,NULL,"tick",""},
  NULL};
static MethodArgs_data TA_RBpTrial_GetUnitBufSize_MethArgs[]={
  {&TA_bool,NULL,"in_updt_after"," false"},
  NULL};
static MethodDef_data TA_RBpTrial_MethodDef[]={
  {&TA_void,NULL,"GenCntrLog"," generate log data for the counters output time information","","",
    1,2,-1,0,NULL,cssElCFun_RBpTrial_GenCntrLog_stub,TA_RBpTrial_GenCntrLog_MethArgs},
  {&TA_void,NULL,"Compute_ClampExt"," compute clamped external activations (for zero time step)","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_Compute_ClampExt_stub,NULL},
  {&TA_void,NULL,"StoreState"," store current state of network in buffers","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_StoreState_stub,NULL},
  {&TA_void,NULL,"InitForBP"," initialize prior to performing BP","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_InitForBP_stub,NULL},
  {&TA_void,NULL,"StepBack"," step back during BP process at given tick","","",
    0,1,-1,0,NULL,cssElCFun_RBpTrial_StepBack_stub,TA_RBpTrial_StepBack_MethArgs},
  {&TA_void,NULL,"RestoreState"," restore state to values at given point in time","","",
    0,1,-1,0,NULL,cssElCFun_RBpTrial_RestoreState_stub,TA_RBpTrial_RestoreState_MethArgs},
  {&TA_void,NULL,"ShiftBuffers"," shift buffers back by bp_gap_ticks","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_ShiftBuffers_stub,NULL},
  {&TA_bool,NULL,"PerformBP"," checks if its time to perform bp, does so, returns if it did or not","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_PerformBP_stub,NULL},
  {&TA_void,NULL,"PerformBP_impl"," actually do the bp","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_PerformBP_impl_stub,NULL},
  {&TA_int,NULL,"GetUnitBufSize"," finds first unit in first layer and gets current buffer size of that unit","","",
    0,1,0,0,NULL,cssElCFun_RBpTrial_GetUnitBufSize_stub,TA_RBpTrial_GetUnitBufSize_MethArgs},
  {&TA_void,NULL,"ResetStored"," reset the stored state values (clears bp sequence, resets time, but doesn't fully clear unit states -- callable by script if needed)","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_ResetStored_stub,NULL},
  {&TA_void,NULL,"CopyContext"," copy the SRN context layer info (must be called by a script at appropriate times)","","",
    0,0,-1,0,NULL,cssElCFun_RBpTrial_CopyContext_stub,NULL},
  NULL};
static MethodArgs_data TA_RBpSequence_GetMaxTick_MethArgs[]={
  {&TA_float_ref,NULL,"last_time",""},
  NULL};
static MethodDef_data TA_RBpSequence_MethodDef[]={
  {&TA_int,NULL,"GetMaxTick"," get maximum tick val based on current group","","",
    0,1,-1,0,NULL,cssElCFun_RBpSequence_GetMaxTick_stub,TA_RBpSequence_GetMaxTick_MethArgs},
  NULL};
static int APBpCycle::* TA_APBpCycle_MbrOff;
static MemberDef_data TA_APBpCycle_MemberDef[]={
  {&TA_APBpSettle_ptr,NULL,"apbp_settle"," pointer to parent settle proc","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_APBpCycle_MbrOff=(int APBpCycle::*)(&APBpCycle::apbp_settle))),0,NULL,0},
  {&TA_APBpTrial_ptr,NULL,"apbp_trial"," pointer to parent phase trial","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_APBpCycle_MbrOff=(int APBpCycle::*)(&APBpCycle::apbp_trial))),0,NULL,0},
  NULL};
static MethodDef_data TA_APBpCycle_MethodDef[]={
  {&TA_void,NULL,"Compute_Act","","","",
    0,0,-1,0,NULL,cssElCFun_APBpCycle_Compute_Act_stub,NULL},
  {&TA_void,NULL,"Compute_Error","","","",
    0,0,-1,0,NULL,cssElCFun_APBpCycle_Compute_Error_stub,NULL},
  {&TA_void,NULL,"Compute_dEdA_dEdNet","","","",
    0,0,-1,0,NULL,cssElCFun_APBpCycle_Compute_dEdA_dEdNet_stub,NULL},
  NULL};
static int APBpSettle::* TA_APBpSettle_MbrOff;
static MemberDef_data TA_APBpSettle_MemberDef[]={
  {&TA_APBpTrial_ptr,NULL,"apbp_trial"," pointer to parent phase trial","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_APBpSettle_MbrOff=(int APBpSettle::*)(&APBpSettle::apbp_trial))),0,NULL,0},
  NULL};
static MethodDef_data TA_APBpSettle_MethodDef[]={
  {&TA_void,NULL,"Compute_ClampExt"," compute clamped external activations (for zero time step)","","",
    0,0,-1,0,NULL,cssElCFun_APBpSettle_Compute_ClampExt_stub,NULL},
  {&TA_void,NULL,"Compute_HardClampNet","","","",
    0,0,-1,0,NULL,cssElCFun_APBpSettle_Compute_HardClampNet_stub,NULL},
  NULL};
static EnumDef_data TA_APBpTrial_StateInit[]={
  {"DO_NOTHING"," do nothing","",0},
  {"INIT_STATE"," initialize state","",1},
  NULL};
static EnumDef_data TA_APBpTrial_Phase[]={
  {"ACT_PHASE"," activation phase","",0},
  {"BP_PHASE"," backpropagation phase","",1},
  NULL};
static int APBpTrial::* TA_APBpTrial_MbrOff;
static MemberDef_data TA_APBpTrial_MemberDef[]={
  {&TA_Counter,NULL,"phase_no"," Current phase number","","",
    *((ta_memb_ptr*)&(TA_APBpTrial_MbrOff=(int APBpTrial::*)(&APBpTrial::phase_no))),0,NULL,0},
  {NULL,"::Phase","phase"," state variable for phase","","",
    *((ta_memb_ptr*)&(TA_APBpTrial_MbrOff=(int APBpTrial::*)(&APBpTrial::phase))),0,NULL,0},
  {NULL,"::StateInit","trial_init"," how to initialize network state at start of trial","","",
    *((ta_memb_ptr*)&(TA_APBpTrial_MbrOff=(int APBpTrial::*)(&APBpTrial::trial_init))),0,NULL,0},
  {&TA_bool,NULL,"no_bp_stats"," don't do stats/logging in the bp phase","","",
    *((ta_memb_ptr*)&(TA_APBpTrial_MbrOff=(int APBpTrial::*)(&APBpTrial::no_bp_stats))),0,NULL,0},
  {&TA_bool,NULL,"no_bp_test"," don't run the bp phase when testing","","",
    *((ta_memb_ptr*)&(TA_APBpTrial_MbrOff=(int APBpTrial::*)(&APBpTrial::no_bp_test))),0,NULL,0},
  NULL};
static MethodArgs_data TA_APBpTrial_GenCntrLog_MethArgs[]={
  {&TA_LogData_ptr,NULL,"ld",""},
  {&TA_bool,NULL,"gen",""},
  NULL};
static MethodDef_data TA_APBpTrial_MethodDef[]={
  {&TA_void,NULL,"GenCntrLog"," generate log data for the counters","","",
    1,2,-1,0,NULL,cssElCFun_APBpTrial_GenCntrLog_stub,TA_APBpTrial_GenCntrLog_MethArgs},
  {&TA_void,NULL,"SetCurLrate","","","",
    0,0,-1,0,NULL,cssElCFun_APBpTrial_SetCurLrate_stub,NULL},
  {&TA_void,NULL,"Compute_dWt"," compute weight changes","","",
    0,0,-1,0,NULL,cssElCFun_APBpTrial_Compute_dWt_stub,NULL},
  NULL};
static int APBpMaxDa_De::* TA_APBpMaxDa_De_MbrOff;
static MemberDef_data TA_APBpMaxDa_De_MemberDef[]={
  {&TA_StatVal,NULL,"da_de"," max of delta-activation or delta-error","","",
    *((ta_memb_ptr*)&(TA_APBpMaxDa_De_MbrOff=(int APBpMaxDa_De::*)(&APBpMaxDa_De::da_de))),0,NULL,0},
  NULL};
static MethodArgs_data TA_APBpMaxDa_De_RecvCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_APBpMaxDa_De_SendCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_APBpMaxDa_De_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodDef_data TA_APBpMaxDa_De_MethodDef[]={
  {&TA_void,NULL,"RecvCon_Run"," Compute over recv conns of a unit don't do these!","","",
    1,1,-1,0,NULL,cssElCFun_APBpMaxDa_De_RecvCon_Run_stub,TA_APBpMaxDa_De_RecvCon_Run_MethArgs},
  {&TA_void,NULL,"SendCon_Run"," Compute over send conns of a unit","","",
    1,1,-1,0,NULL,cssElCFun_APBpMaxDa_De_SendCon_Run_stub,TA_APBpMaxDa_De_SendCon_Run_MethArgs},
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    1,1,-1,0,NULL,cssElCFun_APBpMaxDa_De_Unit_Stat_stub,TA_APBpMaxDa_De_Unit_Stat_MethArgs},
  NULL};
static int SymRBpConSpec::* TA_SymRBpConSpec_MbrOff;
static MemberDef_data TA_SymRBpConSpec_MemberDef[]={
  {&TA_bool,NULL,"sym_wt_updt"," if true, use symmetric weight updates","","",
    *((ta_memb_ptr*)&(TA_SymRBpConSpec_MbrOff=(int SymRBpConSpec::*)(&SymRBpConSpec::sym_wt_updt))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SymRBpConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_SymRBpConSpec_C_Compute_dWt_Sym_MethArgs[]={
  {&TA_BpCon_ptr,NULL,"cn",""},
  {&TA_RBpUnit_ptr,NULL,"ru",""},
  {&TA_RBpUnit_ptr,NULL,"su",""},
  NULL};
static MethodDef_data TA_SymRBpConSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change Compute dE with respect to the weights (using prv_act) as sender Compute dE with respect to the weights (using prv_act) as sender","","",
    1,2,-1,0,NULL,cssElCFun_SymRBpConSpec_Compute_dWt_stub,TA_SymRBpConSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"C_Compute_dWt_Sym","","","",
    0,3,-1,0,NULL,cssElCFun_SymRBpConSpec_C_Compute_dWt_Sym_stub,TA_SymRBpConSpec_C_Compute_dWt_Sym_MethArgs},
  NULL};
static int float_CircBuffer::* TA_float_CircBuffer_MbrOff;
static MemberDef_data TA_float_CircBuffer_MemberDef[]={
  {&TA_int,NULL,"st_idx"," starting index","","",
    *((ta_memb_ptr*)&(TA_float_CircBuffer_MbrOff=(int float_CircBuffer::*)(&float_CircBuffer::st_idx))),0,NULL,0},
  {&TA_int,NULL,"length"," logical length of the list","","",
    *((ta_memb_ptr*)&(TA_float_CircBuffer_MbrOff=(int float_CircBuffer::*)(&float_CircBuffer::length))),0,NULL,0},
  NULL};
static MethodArgs_data TA_float_CircBuffer_Add_MethArgs[]={
  {&TA_const_float_ref,NULL,"item",""},
  NULL};
static MethodArgs_data TA_float_CircBuffer_CircIdx_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodDef_data TA_float_CircBuffer_MethodDef[]={
  {&TA_void,NULL,"Add"," add the item to the array adds in the framework of a circular buffer","MENU ","",
    1,1,-1,0,NULL,cssElCFun_float_CircBuffer_Add_stub,TA_float_CircBuffer_Add_MethArgs},
  {&TA_int,NULL,"CircIdx"," gets real index based on circular buffer given logical index","","",
    0,1,-1,0,NULL,cssElCFun_float_CircBuffer_CircIdx_stub,TA_float_CircBuffer_CircIdx_MethArgs},
  NULL};
static int RBpContextSpec::* TA_RBpContextSpec_MbrOff;
static MemberDef_data TA_RBpContextSpec_MemberDef[]={
  {&TA_float,NULL,"hysteresis"," hysteresis factor: (1-hyst)*new + hyst*old","","",
    *((ta_memb_ptr*)&(TA_RBpContextSpec_MbrOff=(int RBpContextSpec::*)(&RBpContextSpec::hysteresis))),0,NULL,0},
  {&TA_float,NULL,"hysteresis_c"," complement of hysteresis","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RBpContextSpec_MbrOff=(int RBpContextSpec::*)(&RBpContextSpec::hysteresis_c))),0,NULL,0},
  {&TA_taString,NULL,"variable"," name of unit variable to copy into","","",
    *((ta_memb_ptr*)&(TA_RBpContextSpec_MbrOff=(int RBpContextSpec::*)(&RBpContextSpec::variable))),0,NULL,0},
  {NULL,"Unit::ExtType","unit_flags"," flags to set on the unit after copying value","","",
    *((ta_memb_ptr*)&(TA_RBpContextSpec_MbrOff=(int RBpContextSpec::*)(&RBpContextSpec::unit_flags))),0,NULL,0},
  NULL};
static MethodArgs_data TA_RBpContextSpec_InitWtDelta_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_RBpContextSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_RBpContextSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_RBpContextSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_RBpContextSpec_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_RBpContextSpec_CheckConfig_MethArgs[]={
  {&TA_Unit_ptr,NULL,"un",""},
  {&TA_Layer_ptr,NULL,"lay",""},
  {&TA_TrialProcess_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_RBpContextSpec_CopyContext_MethArgs[]={
  {&TA_RBpUnit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_RBpContextSpec_MethodDef[]={
  {&TA_void,NULL,"InitWtDelta"," init weight delta variables","","",
    1,1,-1,0,NULL,cssElCFun_RBpContextSpec_InitWtDelta_stub,TA_RBpContextSpec_InitWtDelta_MethArgs},
  {&TA_void,NULL,"Compute_Net","","","",
    1,1,-1,0,NULL,cssElCFun_RBpContextSpec_Compute_Net_stub,TA_RBpContextSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," activation from net input (sigmoid) nullify all other functions..","","",
    1,1,-1,0,NULL,cssElCFun_RBpContextSpec_Compute_Act_stub,TA_RBpContextSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights for all of my recv weights","","",
    1,1,-1,0,NULL,cssElCFun_RBpContextSpec_Compute_dWt_stub,TA_RBpContextSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights from deltas modify to update bias weight bp special functions","","",
    1,1,-1,0,NULL,cssElCFun_RBpContextSpec_UpdateWeights_stub,TA_RBpContextSpec_UpdateWeights_MethArgs},
  {&TA_bool,NULL,"CheckConfig"," check for for misc configuration settings required by different algorithms, including settings on the processes","","",
    1,3,-1,0,NULL,cssElCFun_RBpContextSpec_CheckConfig_stub,TA_RBpContextSpec_CheckConfig_MethArgs},
  {&TA_void,NULL,"CopyContext"," copy the values in to the context units: called by trial CopyContext under control of a script..","","",
    0,1,-1,0,NULL,cssElCFun_RBpContextSpec_CopyContext_stub,TA_RBpContextSpec_CopyContext_MethArgs},
  NULL};
static int NoisyRBpUnitSpec::* TA_NoisyRBpUnitSpec_MbrOff;
static MemberDef_data TA_NoisyRBpUnitSpec_MemberDef[]={
  {&TA_Random,NULL,"noise"," what kind of noise to add to activations","","",
    *((ta_memb_ptr*)&(TA_NoisyRBpUnitSpec_MbrOff=(int NoisyRBpUnitSpec::*)(&NoisyRBpUnitSpec::noise))),0,NULL,0},
  {&TA_float,NULL,"sqrt_dt"," square-root of dt for noise","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_NoisyRBpUnitSpec_MbrOff=(int NoisyRBpUnitSpec::*)(&NoisyRBpUnitSpec::sqrt_dt))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BpWizard_SRNContext_MethArgs[]={
  {&TA_Network_ptr,NULL,"net",""},
  NULL};
static MethodArgs_data TA_BpWizard_ToTimeEvents_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  NULL};
static MethodArgs_data TA_BpWizard_ToRBPEvents_MethArgs[]={
  {&TA_Environment_ptr,NULL,"env",""},
  {&TA_int,NULL,"targ_time"," 2"},
  NULL};
static MethodDef_data TA_BpWizard_MethodDef[]={
  {&TA_void,NULL,"SRNContext"," configure a simple-recurrent-network context layer in the network","MENU_BUTTON MENU_ON_Network MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_BpWizard_SRNContext_stub,TA_BpWizard_SRNContext_MethArgs},
  {&TA_bool,NULL,"ToTimeEvents"," convert events, groups, and environment to TimeEvent format","MENU_BUTTON MENU_ON_Environment MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_BpWizard_ToTimeEvents_stub,TA_BpWizard_ToTimeEvents_MethArgs},
  {&TA_void,NULL,"ToRBPEvents"," convert events to format suitable for training by RBP, with inputs coming on first, and then targets coming on after targ_time time steps","MENU_BUTTON ","",
    0,2,1,0,NULL,cssElCFun_BpWizard_ToRBPEvents_stub,TA_BpWizard_ToRBPEvents_MethArgs},
  NULL};

// Init Function


static bool ta_Init_bp_done = false;

void ta_Init_bp() {
  TypeDef* sbt;

  if(ta_Init_bp_done) return;
  ta_Init_bp_done = true;

  ta_Init_ta();
  ta_Init_tamisc();
  ta_Init_pdp();

  taMisc::in_init = true;

    tac_AddMethods(TA_taRegFun,TA_taRegFun_MethodDef);
  taMisc::types.Add(&TA_BpConSpec);
    TAI_BpConSpec = new BpConSpec;
    TA_BpConSpec.AddParFormal(&TA_class);
    TA_BpConSpec.AddParCache(&TA_taBase);
    TA_BpConSpec.AddClassPar(&TA_ConSpec,0);
    tac_AddEnum(TA_BpConSpec, "MomentumType", "", "", "", "", TA_BpConSpec_MomentumType);
    tac_AddMembers(TA_BpConSpec,TA_BpConSpec_MemberDef);
    tac_AddMethods(TA_BpConSpec,TA_BpConSpec_MethodDef);
  taMisc::types.Add(&TA_BpCon);
    TAI_BpCon = new BpCon;
    TA_BpCon.AddParFormal(&TA_class);
    TA_BpCon.AddParCache(&TA_taBase);
    TA_BpCon.AddClassPar(&TA_Connection,0);
    tac_AddMembers(TA_BpCon,TA_BpCon_MemberDef);
  taMisc::types.Add(&TA_BpCon_Group);
    TAI_BpCon_Group = new BpCon_Group;
    TA_BpCon_Group.AddParFormal(&TA_class);
    TA_BpCon_Group.AddParCache(&TA_taBase);
    TA_BpCon_Group.AddClassPar(&TA_Con_Group,0);
    tac_AddMethods(TA_BpCon_Group,TA_BpCon_Group_MethodDef);
  taMisc::types.Add(&TA_BpUnit);
    TAI_BpUnit = new BpUnit;
    TA_BpUnit.AddParFormal(&TA_class);
    TA_BpUnit.AddParCache(&TA_taBase);
    TA_BpUnit.AddClassPar(&TA_Unit,0);
    tac_AddMembers(TA_BpUnit,TA_BpUnit_MemberDef);
    tac_AddMethods(TA_BpUnit,TA_BpUnit_MethodDef);
  taMisc::types.Add(&TA_BpUnitSpec);
    TAI_BpUnitSpec = new BpUnitSpec;
    TA_BpUnitSpec.AddParFormal(&TA_class);
    TA_BpUnitSpec.AddParCache(&TA_taBase);
    TA_BpUnitSpec.AddClassPar(&TA_UnitSpec,0);
    tac_AddMembers(TA_BpUnitSpec,TA_BpUnitSpec_MemberDef);
    tac_AddMethods(TA_BpUnitSpec,TA_BpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_BpTrial);
    TAI_BpTrial = new BpTrial;
    TA_BpTrial.AddParFormal(&TA_class);
    TA_BpTrial.AddParCache(&TA_taBase);
    TA_BpTrial.AddClassPar(&TA_TrialProcess,0);
    tac_AddMembers(TA_BpTrial,TA_BpTrial_MemberDef);
    tac_AddMethods(TA_BpTrial,TA_BpTrial_MethodDef);
  taMisc::types.Add(&TA_const_BpCon);
    TA_const_BpCon.AddParents(&TA_const, &TA_BpCon);
  taMisc::types.Add(&TA_const_BpCon_ref);
    TA_const_BpCon_ref.AddParents(&TA_const_BpCon);
  taMisc::types.Add(&TA_BpConSpec_ptr);
    TA_BpConSpec_ptr.AddParents(&TA_BpConSpec);
  taMisc::types.Add(&TA_BpCon_ptr);
    TA_BpCon_ptr.AddParents(&TA_BpCon);
  taMisc::types.Add(&TA_BpUnit_ptr);
    TA_BpUnit_ptr.AddParents(&TA_BpUnit);
  taMisc::types.Add(&TA_BpCon_Group_ptr);
    TA_BpCon_Group_ptr.AddParents(&TA_BpCon_Group);
  taMisc::types.Add(&TA_const_BpConSpec);
    TA_const_BpConSpec.AddParents(&TA_const, &TA_BpConSpec);
  taMisc::types.Add(&TA_const_BpConSpec_ref);
    TA_const_BpConSpec_ref.AddParents(&TA_const_BpConSpec);
  taMisc::types.Add(&TA_const_BpCon_Group);
    TA_const_BpCon_Group.AddParents(&TA_const, &TA_BpCon_Group);
  taMisc::types.Add(&TA_const_BpCon_Group_ref);
    TA_const_BpCon_Group_ref.AddParents(&TA_const_BpCon_Group);
  taMisc::types.Add(&TA_BpUnitSpec_ptr);
    TA_BpUnitSpec_ptr.AddParents(&TA_BpUnitSpec);
  taMisc::types.Add(&TA_const_BpUnitSpec);
    TA_const_BpUnitSpec.AddParents(&TA_const, &TA_BpUnitSpec);
  taMisc::types.Add(&TA_const_BpUnitSpec_ref);
    TA_const_BpUnitSpec_ref.AddParents(&TA_const_BpUnitSpec);
  taMisc::types.Add(&TA_const_BpUnit);
    TA_const_BpUnit.AddParents(&TA_const, &TA_BpUnit);
  taMisc::types.Add(&TA_const_BpUnit_ref);
    TA_const_BpUnit_ref.AddParents(&TA_const_BpUnit);
  taMisc::types.Add(&TA_const_BpTrial);
    TA_const_BpTrial.AddParents(&TA_const, &TA_BpTrial);
  taMisc::types.Add(&TA_const_BpTrial_ref);
    TA_const_BpTrial_ref.AddParents(&TA_const_BpTrial);
  taMisc::types.Add(&TA_CE_Stat);
    TAI_CE_Stat = new CE_Stat;
    TA_CE_Stat.AddParFormal(&TA_class);
    TA_CE_Stat.AddParCache(&TA_taBase);
    TA_CE_Stat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_CE_Stat,TA_CE_Stat_MemberDef);
    tac_AddMethods(TA_CE_Stat,TA_CE_Stat_MethodDef);
  taMisc::types.Add(&TA_const_CE_Stat);
    TA_const_CE_Stat.AddParents(&TA_const, &TA_CE_Stat);
  taMisc::types.Add(&TA_NormDotProd_Stat);
    TAI_NormDotProd_Stat = new NormDotProd_Stat;
    TA_NormDotProd_Stat.AddParFormal(&TA_class);
    TA_NormDotProd_Stat.AddParCache(&TA_taBase);
    TA_NormDotProd_Stat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_NormDotProd_Stat,TA_NormDotProd_Stat_MemberDef);
    tac_AddMethods(TA_NormDotProd_Stat,TA_NormDotProd_Stat_MethodDef);
  taMisc::types.Add(&TA_const_CE_Stat_ref);
    TA_const_CE_Stat_ref.AddParents(&TA_const_CE_Stat);
  taMisc::types.Add(&TA_const_NormDotProd_Stat);
    TA_const_NormDotProd_Stat.AddParents(&TA_const, &TA_NormDotProd_Stat);
  taMisc::types.Add(&TA_const_NormDotProd_Stat_ref);
    TA_const_NormDotProd_Stat_ref.AddParents(&TA_const_NormDotProd_Stat);
  taMisc::types.Add(&TA_VecCor_Stat);
    TAI_VecCor_Stat = new VecCor_Stat;
    TA_VecCor_Stat.AddParFormal(&TA_class);
    TA_VecCor_Stat.AddParCache(&TA_taBase);
    TA_VecCor_Stat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_VecCor_Stat,TA_VecCor_Stat_MemberDef);
    tac_AddMethods(TA_VecCor_Stat,TA_VecCor_Stat_MethodDef);
  taMisc::types.Add(&TA_const_VecCor_Stat);
    TA_const_VecCor_Stat.AddParents(&TA_const, &TA_VecCor_Stat);
  taMisc::types.Add(&TA_const_VecCor_Stat_ref);
    TA_const_VecCor_Stat_ref.AddParents(&TA_const_VecCor_Stat);
  taMisc::types.Add(&TA_NormVecLen_Stat);
    TAI_NormVecLen_Stat = new NormVecLen_Stat;
    TA_NormVecLen_Stat.AddParFormal(&TA_class);
    TA_NormVecLen_Stat.AddParCache(&TA_taBase);
    TA_NormVecLen_Stat.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_NormVecLen_Stat,TA_NormVecLen_Stat_MemberDef);
    tac_AddMethods(TA_NormVecLen_Stat,TA_NormVecLen_Stat_MethodDef);
  taMisc::types.Add(&TA_const_NormVecLen_Stat);
    TA_const_NormVecLen_Stat.AddParents(&TA_const, &TA_NormVecLen_Stat);
  taMisc::types.Add(&TA_const_NormVecLen_Stat_ref);
    TA_const_NormVecLen_Stat_ref.AddParents(&TA_const_NormVecLen_Stat);
  taMisc::types.Add(&TA_HebbBpConSpec);
    TAI_HebbBpConSpec = new HebbBpConSpec;
    TA_HebbBpConSpec.AddParFormal(&TA_class);
    TA_HebbBpConSpec.AddParCache(&TA_taBase);
    TA_HebbBpConSpec.AddClassPar(&TA_BpConSpec,0);
    tac_AddMethods(TA_HebbBpConSpec,TA_HebbBpConSpec_MethodDef);
  taMisc::types.Add(&TA_const_HebbBpConSpec);
    TA_const_HebbBpConSpec.AddParents(&TA_const, &TA_HebbBpConSpec);
  taMisc::types.Add(&TA_const_HebbBpConSpec_ref);
    TA_const_HebbBpConSpec_ref.AddParents(&TA_const_HebbBpConSpec);
  taMisc::types.Add(&TA_ErrScaleBpConSpec);
    TAI_ErrScaleBpConSpec = new ErrScaleBpConSpec;
    TA_ErrScaleBpConSpec.AddParFormal(&TA_class);
    TA_ErrScaleBpConSpec.AddParCache(&TA_taBase);
    TA_ErrScaleBpConSpec.AddClassPar(&TA_BpConSpec,0);
    tac_AddMembers(TA_ErrScaleBpConSpec,TA_ErrScaleBpConSpec_MemberDef);
  taMisc::types.Add(&TA_const_ErrScaleBpConSpec);
    TA_const_ErrScaleBpConSpec.AddParents(&TA_const, &TA_ErrScaleBpConSpec);
  taMisc::types.Add(&TA_const_ErrScaleBpConSpec_ref);
    TA_const_ErrScaleBpConSpec_ref.AddParents(&TA_const_ErrScaleBpConSpec);
  taMisc::types.Add(&TA_DeltaBarDeltaBpCon);
    TAI_DeltaBarDeltaBpCon = new DeltaBarDeltaBpCon;
    TA_DeltaBarDeltaBpCon.AddParFormal(&TA_class);
    TA_DeltaBarDeltaBpCon.AddParCache(&TA_taBase);
    TA_DeltaBarDeltaBpCon.AddClassPar(&TA_BpCon,0);
    tac_AddMembers(TA_DeltaBarDeltaBpCon,TA_DeltaBarDeltaBpCon_MemberDef);
  taMisc::types.Add(&TA_DeltaBarDeltaBpCon_ptr);
    TA_DeltaBarDeltaBpCon_ptr.AddParents(&TA_DeltaBarDeltaBpCon);
  taMisc::types.Add(&TA_const_DeltaBarDeltaBpCon);
    TA_const_DeltaBarDeltaBpCon.AddParents(&TA_const, &TA_DeltaBarDeltaBpCon);
  taMisc::types.Add(&TA_const_DeltaBarDeltaBpCon_ref);
    TA_const_DeltaBarDeltaBpCon_ref.AddParents(&TA_const_DeltaBarDeltaBpCon);
  taMisc::types.Add(&TA_DeltaBarDeltaBpConSpec);
    TAI_DeltaBarDeltaBpConSpec = new DeltaBarDeltaBpConSpec;
    TA_DeltaBarDeltaBpConSpec.AddParFormal(&TA_class);
    TA_DeltaBarDeltaBpConSpec.AddParCache(&TA_taBase);
    TA_DeltaBarDeltaBpConSpec.AddClassPar(&TA_BpConSpec,0);
    tac_AddMembers(TA_DeltaBarDeltaBpConSpec,TA_DeltaBarDeltaBpConSpec_MemberDef);
    tac_AddMethods(TA_DeltaBarDeltaBpConSpec,TA_DeltaBarDeltaBpConSpec_MethodDef);
  taMisc::types.Add(&TA_const_DeltaBarDeltaBpConSpec);
    TA_const_DeltaBarDeltaBpConSpec.AddParents(&TA_const, &TA_DeltaBarDeltaBpConSpec);
  taMisc::types.Add(&TA_const_DeltaBarDeltaBpConSpec_ref);
    TA_const_DeltaBarDeltaBpConSpec_ref.AddParents(&TA_const_DeltaBarDeltaBpConSpec);
  taMisc::types.Add(&TA_BpContextSpec);
    TAI_BpContextSpec = new BpContextSpec;
    TA_BpContextSpec.AddParFormal(&TA_class);
    TA_BpContextSpec.AddParCache(&TA_taBase);
    TA_BpContextSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMembers(TA_BpContextSpec,TA_BpContextSpec_MemberDef);
    tac_AddMethods(TA_BpContextSpec,TA_BpContextSpec_MethodDef);
  taMisc::types.Add(&TA_const_BpContextSpec);
    TA_const_BpContextSpec.AddParents(&TA_const, &TA_BpContextSpec);
  taMisc::types.Add(&TA_LinearBpUnitSpec);
    TAI_LinearBpUnitSpec = new LinearBpUnitSpec;
    TA_LinearBpUnitSpec.AddParFormal(&TA_class);
    TA_LinearBpUnitSpec.AddParCache(&TA_taBase);
    TA_LinearBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMethods(TA_LinearBpUnitSpec,TA_LinearBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_BpContextSpec_ref);
    TA_const_BpContextSpec_ref.AddParents(&TA_const_BpContextSpec);
  taMisc::types.Add(&TA_const_LinearBpUnitSpec);
    TA_const_LinearBpUnitSpec.AddParents(&TA_const, &TA_LinearBpUnitSpec);
  taMisc::types.Add(&TA_const_LinearBpUnitSpec_ref);
    TA_const_LinearBpUnitSpec_ref.AddParents(&TA_const_LinearBpUnitSpec);
  taMisc::types.Add(&TA_ThreshLinBpUnitSpec);
    TAI_ThreshLinBpUnitSpec = new ThreshLinBpUnitSpec;
    TA_ThreshLinBpUnitSpec.AddParFormal(&TA_class);
    TA_ThreshLinBpUnitSpec.AddParCache(&TA_taBase);
    TA_ThreshLinBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMembers(TA_ThreshLinBpUnitSpec,TA_ThreshLinBpUnitSpec_MemberDef);
    tac_AddMethods(TA_ThreshLinBpUnitSpec,TA_ThreshLinBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_ThreshLinBpUnitSpec);
    TA_const_ThreshLinBpUnitSpec.AddParents(&TA_const, &TA_ThreshLinBpUnitSpec);
  taMisc::types.Add(&TA_const_ThreshLinBpUnitSpec_ref);
    TA_const_ThreshLinBpUnitSpec_ref.AddParents(&TA_const_ThreshLinBpUnitSpec);
  taMisc::types.Add(&TA_NoisyBpUnitSpec);
    TAI_NoisyBpUnitSpec = new NoisyBpUnitSpec;
    TA_NoisyBpUnitSpec.AddParFormal(&TA_class);
    TA_NoisyBpUnitSpec.AddParCache(&TA_taBase);
    TA_NoisyBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMembers(TA_NoisyBpUnitSpec,TA_NoisyBpUnitSpec_MemberDef);
    tac_AddMethods(TA_NoisyBpUnitSpec,TA_NoisyBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_NoisyBpUnitSpec);
    TA_const_NoisyBpUnitSpec.AddParents(&TA_const, &TA_NoisyBpUnitSpec);
  taMisc::types.Add(&TA_const_NoisyBpUnitSpec_ref);
    TA_const_NoisyBpUnitSpec_ref.AddParents(&TA_const_NoisyBpUnitSpec);
  taMisc::types.Add(&TA_StochasticBpUnitSpec);
    TAI_StochasticBpUnitSpec = new StochasticBpUnitSpec;
    TA_StochasticBpUnitSpec.AddParFormal(&TA_class);
    TA_StochasticBpUnitSpec.AddParCache(&TA_taBase);
    TA_StochasticBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMethods(TA_StochasticBpUnitSpec,TA_StochasticBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_StochasticBpUnitSpec);
    TA_const_StochasticBpUnitSpec.AddParents(&TA_const, &TA_StochasticBpUnitSpec);
  taMisc::types.Add(&TA_const_StochasticBpUnitSpec_ref);
    TA_const_StochasticBpUnitSpec_ref.AddParents(&TA_const_StochasticBpUnitSpec);
  taMisc::types.Add(&TA_RBFBpUnitSpec);
    TAI_RBFBpUnitSpec = new RBFBpUnitSpec;
    TA_RBFBpUnitSpec.AddParFormal(&TA_class);
    TA_RBFBpUnitSpec.AddParCache(&TA_taBase);
    TA_RBFBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMembers(TA_RBFBpUnitSpec,TA_RBFBpUnitSpec_MemberDef);
    tac_AddMethods(TA_RBFBpUnitSpec,TA_RBFBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_RBFBpUnitSpec);
    TA_const_RBFBpUnitSpec.AddParents(&TA_const, &TA_RBFBpUnitSpec);
  taMisc::types.Add(&TA_const_RBFBpUnitSpec_ref);
    TA_const_RBFBpUnitSpec_ref.AddParents(&TA_const_RBFBpUnitSpec);
  taMisc::types.Add(&TA_BumpBpUnitSpec);
    TAI_BumpBpUnitSpec = new BumpBpUnitSpec;
    TA_BumpBpUnitSpec.AddParFormal(&TA_class);
    TA_BumpBpUnitSpec.AddParCache(&TA_taBase);
    TA_BumpBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMembers(TA_BumpBpUnitSpec,TA_BumpBpUnitSpec_MemberDef);
    tac_AddMethods(TA_BumpBpUnitSpec,TA_BumpBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_BumpBpUnitSpec);
    TA_const_BumpBpUnitSpec.AddParents(&TA_const, &TA_BumpBpUnitSpec);
  taMisc::types.Add(&TA_const_BumpBpUnitSpec_ref);
    TA_const_BumpBpUnitSpec_ref.AddParents(&TA_const_BumpBpUnitSpec);
  taMisc::types.Add(&TA_ExpBpUnitSpec);
    TAI_ExpBpUnitSpec = new ExpBpUnitSpec;
    TA_ExpBpUnitSpec.AddParFormal(&TA_class);
    TA_ExpBpUnitSpec.AddParCache(&TA_taBase);
    TA_ExpBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMethods(TA_ExpBpUnitSpec,TA_ExpBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_ExpBpUnitSpec);
    TA_const_ExpBpUnitSpec.AddParents(&TA_const, &TA_ExpBpUnitSpec);
  taMisc::types.Add(&TA_const_ExpBpUnitSpec_ref);
    TA_const_ExpBpUnitSpec_ref.AddParents(&TA_const_ExpBpUnitSpec);
  taMisc::types.Add(&TA_SoftMaxBpUnitSpec);
    TAI_SoftMaxBpUnitSpec = new SoftMaxBpUnitSpec;
    TA_SoftMaxBpUnitSpec.AddParFormal(&TA_class);
    TA_SoftMaxBpUnitSpec.AddParCache(&TA_taBase);
    TA_SoftMaxBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddMethods(TA_SoftMaxBpUnitSpec,TA_SoftMaxBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_RBpConSpec);
    TAI_RBpConSpec = new RBpConSpec;
    TA_RBpConSpec.AddParFormal(&TA_class);
    TA_RBpConSpec.AddParCache(&TA_taBase);
    TA_RBpConSpec.AddClassPar(&TA_BpConSpec,0);
    tac_AddMethods(TA_RBpConSpec,TA_RBpConSpec_MethodDef);
  taMisc::types.Add(&TA_const_SoftMaxBpUnitSpec);
    TA_const_SoftMaxBpUnitSpec.AddParents(&TA_const, &TA_SoftMaxBpUnitSpec);
  taMisc::types.Add(&TA_RBpUnit);
    TAI_RBpUnit = new RBpUnit;
    TA_RBpUnit.AddParFormal(&TA_class);
    TA_RBpUnit.AddParCache(&TA_taBase);
    TA_RBpUnit.AddClassPar(&TA_BpUnit,0);
    tac_AddMembers(TA_RBpUnit,TA_RBpUnit_MemberDef);
    tac_AddMethods(TA_RBpUnit,TA_RBpUnit_MethodDef);
  taMisc::types.Add(&TA_const_SoftMaxBpUnitSpec_ref);
    TA_const_SoftMaxBpUnitSpec_ref.AddParents(&TA_const_SoftMaxBpUnitSpec);
  taMisc::types.Add(&TA_RBpUnitSpec);
    TAI_RBpUnitSpec = new RBpUnitSpec;
    TA_RBpUnitSpec.AddParFormal(&TA_class);
    TA_RBpUnitSpec.AddParCache(&TA_taBase);
    TA_RBpUnitSpec.AddClassPar(&TA_BpUnitSpec,0);
    tac_AddEnum(TA_RBpUnitSpec, "TimeAvgType", " type of time-averaging to perform", "", "", "", TA_RBpUnitSpec_TimeAvgType);
    tac_AddMembers(TA_RBpUnitSpec,TA_RBpUnitSpec_MemberDef);
    tac_AddMethods(TA_RBpUnitSpec,TA_RBpUnitSpec_MethodDef);
  taMisc::types.Add(&TA_RBpTrial);
    TAI_RBpTrial = new RBpTrial;
    TA_RBpTrial.AddParFormal(&TA_class);
    TA_RBpTrial.AddParCache(&TA_taBase);
    TA_RBpTrial.AddClassPar(&TA_BpTrial,0);
    tac_AddMembers(TA_RBpTrial,TA_RBpTrial_MemberDef);
    tac_AddMethods(TA_RBpTrial,TA_RBpTrial_MethodDef);
  taMisc::types.Add(&TA_RBpSequence);
    TAI_RBpSequence = new RBpSequence;
    TA_RBpSequence.AddParFormal(&TA_class);
    TA_RBpSequence.AddParCache(&TA_taBase);
    TA_RBpSequence.AddClassPar(&TA_SequenceProcess,0);
    tac_AddMethods(TA_RBpSequence,TA_RBpSequence_MethodDef);
  taMisc::types.Add(&TA_APBpCycle);
    TAI_APBpCycle = new APBpCycle;
    TA_APBpCycle.AddParFormal(&TA_class);
    TA_APBpCycle.AddParCache(&TA_taBase);
    TA_APBpCycle.AddClassPar(&TA_CycleProcess,0);
    tac_AddMembers(TA_APBpCycle,TA_APBpCycle_MemberDef);
    tac_AddMethods(TA_APBpCycle,TA_APBpCycle_MethodDef);
  taMisc::types.Add(&TA_APBpSettle);
    TAI_APBpSettle = new APBpSettle;
    TA_APBpSettle.AddParFormal(&TA_class);
    TA_APBpSettle.AddParCache(&TA_taBase);
    TA_APBpSettle.AddClassPar(&TA_SettleProcess,0);
    tac_AddMembers(TA_APBpSettle,TA_APBpSettle_MemberDef);
    tac_AddMethods(TA_APBpSettle,TA_APBpSettle_MethodDef);
  taMisc::types.Add(&TA_APBpTrial);
    TAI_APBpTrial = new APBpTrial;
    TA_APBpTrial.AddParFormal(&TA_class);
    TA_APBpTrial.AddParCache(&TA_taBase);
    TA_APBpTrial.AddClassPar(&TA_TrialProcess,0);
    tac_AddEnum(TA_APBpTrial, "StateInit", " ways of initializing the state of the network", "", "", "", TA_APBpTrial_StateInit);
    tac_AddEnum(TA_APBpTrial, "Phase", "", "", "", "", TA_APBpTrial_Phase);
    tac_AddMembers(TA_APBpTrial,TA_APBpTrial_MemberDef);
    tac_AddMethods(TA_APBpTrial,TA_APBpTrial_MethodDef);
  taMisc::types.Add(&TA_APBpMaxDa_De);
    TAI_APBpMaxDa_De = new APBpMaxDa_De;
    TA_APBpMaxDa_De.AddParFormal(&TA_class);
    TA_APBpMaxDa_De.AddParCache(&TA_taBase);
    TA_APBpMaxDa_De.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_APBpMaxDa_De,TA_APBpMaxDa_De_MemberDef);
    tac_AddMethods(TA_APBpMaxDa_De,TA_APBpMaxDa_De_MethodDef);
  taMisc::types.Add(&TA_RBpUnit_ptr);
    TA_RBpUnit_ptr.AddParents(&TA_RBpUnit);
  taMisc::types.Add(&TA_const_RBpConSpec);
    TA_const_RBpConSpec.AddParents(&TA_const, &TA_RBpConSpec);
  taMisc::types.Add(&TA_const_RBpConSpec_ref);
    TA_const_RBpConSpec_ref.AddParents(&TA_const_RBpConSpec);
  taMisc::types.Add(&TA_SymRBpConSpec);
    TAI_SymRBpConSpec = new SymRBpConSpec;
    TA_SymRBpConSpec.AddParFormal(&TA_class);
    TA_SymRBpConSpec.AddParCache(&TA_taBase);
    TA_SymRBpConSpec.AddClassPar(&TA_RBpConSpec,0);
    tac_AddMembers(TA_SymRBpConSpec,TA_SymRBpConSpec_MemberDef);
    tac_AddMethods(TA_SymRBpConSpec,TA_SymRBpConSpec_MethodDef);
  taMisc::types.Add(&TA_const_RBpUnitSpec);
    TA_const_RBpUnitSpec.AddParents(&TA_const, &TA_RBpUnitSpec);
  taMisc::types.Add(&TA_const_SymRBpConSpec);
    TA_const_SymRBpConSpec.AddParents(&TA_const, &TA_SymRBpConSpec);
  taMisc::types.Add(&TA_const_RBpUnitSpec_ref);
    TA_const_RBpUnitSpec_ref.AddParents(&TA_const_RBpUnitSpec);
  taMisc::types.Add(&TA_const_SymRBpConSpec_ref);
    TA_const_SymRBpConSpec_ref.AddParents(&TA_const_SymRBpConSpec);
  taMisc::types.Add(&TA_float_CircBuffer);
    TA_float_CircBuffer.AddParFormal(&TA_class);
    TA_float_CircBuffer.AddParCache(&TA_taBase);
    TA_float_CircBuffer.AddClassPar(&TA_float_Array,0);
    tac_AddMembers(TA_float_CircBuffer,TA_float_CircBuffer_MemberDef);
    tac_AddMethods(TA_float_CircBuffer,TA_float_CircBuffer_MethodDef);
  taMisc::types.Add(&TA_const_RBpUnit);
    TA_const_RBpUnit.AddParents(&TA_const, &TA_RBpUnit);
  taMisc::types.Add(&TA_const_float_CircBuffer);
    TA_const_float_CircBuffer.AddParents(&TA_const, &TA_float_CircBuffer);
  taMisc::types.Add(&TA_const_RBpUnit_ref);
    TA_const_RBpUnit_ref.AddParents(&TA_const_RBpUnit);
  taMisc::types.Add(&TA_const_float_CircBuffer_ref);
    TA_const_float_CircBuffer_ref.AddParents(&TA_const_float_CircBuffer);
  taMisc::types.Add(&TA_const_RBpTrial);
    TA_const_RBpTrial.AddParents(&TA_const, &TA_RBpTrial);
  taMisc::types.Add(&TA_const_RBpTrial_ref);
    TA_const_RBpTrial_ref.AddParents(&TA_const_RBpTrial);
  taMisc::types.Add(&TA_const_RBpSequence);
    TA_const_RBpSequence.AddParents(&TA_const, &TA_RBpSequence);
  taMisc::types.Add(&TA_const_RBpSequence_ref);
    TA_const_RBpSequence_ref.AddParents(&TA_const_RBpSequence);
  taMisc::types.Add(&TA_RBpSE_Stat);
    TAI_RBpSE_Stat = new RBpSE_Stat;
    TA_RBpSE_Stat.AddParFormal(&TA_class);
    TA_RBpSE_Stat.AddParCache(&TA_taBase);
    TA_RBpSE_Stat.AddClassPar(&TA_SE_Stat,0);
  taMisc::types.Add(&TA_const_RBpSE_Stat);
    TA_const_RBpSE_Stat.AddParents(&TA_const, &TA_RBpSE_Stat);
  taMisc::types.Add(&TA_RBpContextSpec);
    TAI_RBpContextSpec = new RBpContextSpec;
    TA_RBpContextSpec.AddParFormal(&TA_class);
    TA_RBpContextSpec.AddParCache(&TA_taBase);
    TA_RBpContextSpec.AddClassPar(&TA_RBpUnitSpec,0);
    tac_AddMembers(TA_RBpContextSpec,TA_RBpContextSpec_MemberDef);
    tac_AddMethods(TA_RBpContextSpec,TA_RBpContextSpec_MethodDef);
  taMisc::types.Add(&TA_const_RBpSE_Stat_ref);
    TA_const_RBpSE_Stat_ref.AddParents(&TA_const_RBpSE_Stat);
  taMisc::types.Add(&TA_APBpSettle_ptr);
    TA_APBpSettle_ptr.AddParents(&TA_APBpSettle);
  taMisc::types.Add(&TA_const_RBpContextSpec);
    TA_const_RBpContextSpec.AddParents(&TA_const, &TA_RBpContextSpec);
  taMisc::types.Add(&TA_APBpTrial_ptr);
    TA_APBpTrial_ptr.AddParents(&TA_APBpTrial);
  taMisc::types.Add(&TA_const_RBpContextSpec_ref);
    TA_const_RBpContextSpec_ref.AddParents(&TA_const_RBpContextSpec);
  taMisc::types.Add(&TA_const_APBpCycle);
    TA_const_APBpCycle.AddParents(&TA_const, &TA_APBpCycle);
  taMisc::types.Add(&TA_const_APBpCycle_ref);
    TA_const_APBpCycle_ref.AddParents(&TA_const_APBpCycle);
  taMisc::types.Add(&TA_const_APBpSettle);
    TA_const_APBpSettle.AddParents(&TA_const, &TA_APBpSettle);
  taMisc::types.Add(&TA_const_APBpSettle_ref);
    TA_const_APBpSettle_ref.AddParents(&TA_const_APBpSettle);
  taMisc::types.Add(&TA_const_APBpTrial);
    TA_const_APBpTrial.AddParents(&TA_const, &TA_APBpTrial);
  taMisc::types.Add(&TA_const_APBpTrial_ref);
    TA_const_APBpTrial_ref.AddParents(&TA_const_APBpTrial);
  taMisc::types.Add(&TA_const_APBpMaxDa_De);
    TA_const_APBpMaxDa_De.AddParents(&TA_const, &TA_APBpMaxDa_De);
  taMisc::types.Add(&TA_const_APBpMaxDa_De_ref);
    TA_const_APBpMaxDa_De_ref.AddParents(&TA_const_APBpMaxDa_De);
  taMisc::types.Add(&TA_NoisyRBpUnitSpec);
    TAI_NoisyRBpUnitSpec = new NoisyRBpUnitSpec;
    TA_NoisyRBpUnitSpec.AddParFormal(&TA_class);
    TA_NoisyRBpUnitSpec.AddParCache(&TA_taBase);
    TA_NoisyRBpUnitSpec.AddClassPar(&TA_RBpUnitSpec,0);
    tac_AddMembers(TA_NoisyRBpUnitSpec,TA_NoisyRBpUnitSpec_MemberDef);
  taMisc::types.Add(&TA_const_NoisyRBpUnitSpec);
    TA_const_NoisyRBpUnitSpec.AddParents(&TA_const, &TA_NoisyRBpUnitSpec);
  taMisc::types.Add(&TA_const_NoisyRBpUnitSpec_ref);
    TA_const_NoisyRBpUnitSpec_ref.AddParents(&TA_const_NoisyRBpUnitSpec);
  taMisc::types.Add(&TA_BpWizard);
    TAI_BpWizard = new BpWizard;
    TA_BpWizard.AddParFormal(&TA_class);
    TA_BpWizard.AddParCache(&TA_taBase);
    TA_BpWizard.AddClassPar(&TA_Wizard,0);
    tac_AddMethods(TA_BpWizard,TA_BpWizard_MethodDef);
  taMisc::types.Add(&TA_const_BpWizard);
    TA_const_BpWizard.AddParents(&TA_const, &TA_BpWizard);
  taMisc::types.Add(&TA_const_BpWizard_ref);
    TA_const_BpWizard_ref.AddParents(&TA_const_BpWizard);


  taMisc::in_init = false;
} 

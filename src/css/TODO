TODO list for CSS:

------------------
Program todo:

- String should have only relevant stuff visible for css (more protected??) type String

- type <css class> doesn't work

- lots of enum stuff: getscoped returns wrong type, etc

- register DynEnum obj in types (Programs)?

- cmdshell should print out the prompt! displayPrompt(true);

- figure out PtrAssignPtr in Cptr type operator= funs
- add quit confirm prompt taChoice
- convert enums to c_ptr_enum

------------------
Immediate:

- suppress redundant { } block within a IF_TRUE or IF_FALSE block: just replace code in upper
  with code in lower.  CleanDoubleBlock is written: need to figure out when to call it!
  seems like we need a post-processing optimization step..

- run optimizer!: clearly addframe and addprog are big.

-----------------------
Longer-term:

- has a problem with: var-num types of exprs -- gobbles the - into the
num, sees var num (need to fix parser somehow)

- document issues about progspaces and class objects refering
to extern objects, etc.

- extern class objects -- when to call constructor?

- fix gui for: inline's

- tab-completion for cssClass things like members, methods, etc.

- compile scoped refs -- enums, etc, with GetScopedNo, etc.

- use new const things to do multi-dim arrays as const objects?

- use ConstExprTop for static variable initializers -- tricky part is
	using it for '=' case, but not for simple decl.

- build in parse code for reading array initializers instead of using
	the existing method, which does not parse variables at all,
	and has trouble with comments, etc.

- multi_space has some bugs on exit (dtor).

- also register the taLeafItr too.

- initializers for css arrays do not convert variable names into corresponding
	 values, its a pain in the ass..

- static member elements (functions and members) 
	add static_methods and static_members to class type object
	put in the appropriate searching, etc. functionality

- warnings on enum assignment to non-enum values..

- copy constructors for css classes?

- #define for arbitrary macros (currently only defined or not defined)
	- need to read everything until newline as text, pass it
	to the define constr.  this parses it.
	when its called, it needs to register macro invocation, 
	which reads until ')' as text, performs substitution, 
	replaces text buffer with substituted text, which is then
	parsed..

- initializer values for classes: just "read" in data
	and not assumed order like C inits

- a "rigorous" mode that turns off the flexibility and laxitude
	esp. with respect to the C_ptr types



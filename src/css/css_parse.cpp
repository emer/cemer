
/*  A Bison parser, made from css_parse.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	CSS_PP_INCLUDE	257
#define	CSS_PP_DEFINE	258
#define	CSS_PP_UNDEF	259
#define	CSS_PP_IFDEF	260
#define	CSS_PP_IFNDEF	261
#define	CSS_PP_ELSE	262
#define	CSS_PP_ENDIF	263
#define	CSS_NUMBER	264
#define	CSS_STRING	265
#define	CSS_VAR	266
#define	CSS_FUN	267
#define	CSS_PTR	268
#define	CSS_PP_DEF	269
#define	CSS_NAME	270
#define	CSS_COMMENT	271
#define	CSS_TYPE	272
#define	CSS_PTRTYPE	273
#define	CSS_CLASS	274
#define	CSS_ENUM	275
#define	CSS_SCPTYPE	276
#define	CSS_WHILE	277
#define	CSS_DO	278
#define	CSS_IF	279
#define	CSS_ELSE	280
#define	CSS_SWITCH	281
#define	CSS_CASE	282
#define	CSS_DEFAULT	283
#define	CSS_RETURN	284
#define	CSS_BREAK	285
#define	CSS_CONTINUE	286
#define	CSS_FOR	287
#define	CSS_NEW	288
#define	CSS_DELETE	289
#define	CSS_COMMAND	290
#define	CSS_ALIAS	291
#define	CSS_HELP	292
#define	CSS_EXTERN	293
#define	CSS_STATIC	294
#define	CSS_CONST	295
#define	CSS_PRIVATE	296
#define	CSS_PUBLIC	297
#define	CSS_PROTECTED	298
#define	CSS_VIRTUAL	299
#define	CSS_INLINE	300
#define	CSS_ASGN_ADD	301
#define	CSS_ASGN_SUB	302
#define	CSS_ASGN_MULT	303
#define	CSS_ASGN_DIV	304
#define	CSS_ASGN_MOD	305
#define	CSS_ASGN_LSHIFT	306
#define	CSS_ASGN_RSHIFT	307
#define	CSS_ASGN_AND	308
#define	CSS_ASGN_XOR	309
#define	CSS_ASGN_OR	310
#define	CSS_OR	311
#define	CSS_AND	312
#define	CSS_GT	313
#define	CSS_GE	314
#define	CSS_LT	315
#define	CSS_LE	316
#define	CSS_EQ	317
#define	CSS_NE	318
#define	CSS_LSHIFT	319
#define	CSS_RSHIFT	320
#define	CSS_UNARY	321
#define	CSS_PLUSPLUS	322
#define	CSS_MINMIN	323
#define	CSS_UNARYMINUS	324
#define	CSS_NOT	325
#define	CSS_POINTSAT	326
#define	CSS_SCOPER	327

#line 18 "css_parse.y"


#include "css_machine.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "css_builtin.h"
#include "ta_css.h"
#ifdef GUI_IV
#include "css_iv.h"
#endif // GUI_IV
#ifdef GUI_QT
#include "css_qt.h"
#include "css_qtdata.h"
#include "css_qtdialog.h"
#endif

#include <sstream>

#if defined(SUN4) && !defined(__GNUG__) && !defined(SOLARIS)
#include <alloca.h>
#endif

#if defined(SGI) || defined(SGIdebug)
#include <alloca.h>
#endif

void yyerror(char* s);
/* int yyparse(); */
int yylex();

#define Code1(x) 	cssMisc::cur_top->Prog()->Code(x)
#define Code2(x,y) 	cssMisc::cur_top->Prog()->Code(x); cssMisc::cur_top->Prog()->Code(y)
#define Code3(x,y,z) 	cssMisc::cur_top->Prog()->Code(x); cssMisc::cur_top->Prog()->Code(y); cssMisc::cur_top->Prog()->Code(z)
#define Code4(w,x,y,z) 	cssMisc::cur_top->Prog()->Code(w); cssMisc::cur_top->Prog()->Code(x); cssMisc::cur_top->Prog()->Code(y); cssMisc::cur_top->Prog()->Code(z);
#define Code5(w,x,y,z,zz) 	cssMisc::cur_top->Prog()->Code(w); cssMisc::cur_top->Prog()->Code(x); cssMisc::cur_top->Prog()->Code(y); cssMisc::cur_top->Prog()->Code(z); cssMisc::cur_top->Prog()->Code(zz);


#line 59 "css_parse.y"
typedef struct {
  cssElPlusIVal el_ival;
  cssElPtr     	el;		/* for coding */
  int		ival;		/* for program indexes (progdx) and other ints */
  char*        	nm;
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		500
#define	YYFLAG		-32768
#define	YYNTBASE	96

#define YYTRANSLATE(x) ((unsigned)(x) <= 327 ? yytranslate[x] : 199)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    90,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    79,    66,     2,    88,
    92,    77,    75,    48,    76,    86,    78,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    61,    91,     2,
    49,     2,    60,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    89,     2,    93,    65,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    47,    64,    94,    95,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    62,    63,    67,    68,    69,    70,    71,    72,    73,    74,
    80,    81,    82,    83,    84,    85,    87
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     8,    12,    15,    18,    21,    25,    27,
    29,    31,    33,    35,    37,    39,    41,    44,    47,    50,
    53,    56,    59,    62,    65,    67,    69,    72,    76,    80,
    82,    86,    90,    94,    98,   102,   103,   106,   111,   113,
   116,   118,   120,   122,   124,   129,   136,   143,   150,   152,
   155,   159,   166,   169,   172,   174,   176,   179,   181,   184,
   186,   188,   192,   201,   209,   214,   216,   220,   222,   224,
   226,   228,   230,   234,   236,   238,   241,   243,   246,   248,
   250,   252,   254,   257,   259,   261,   264,   267,   270,   273,
   275,   280,   287,   288,   290,   293,   297,   302,   307,   313,
   320,   323,   324,   326,   329,   334,   339,   344,   350,   355,
   358,   362,   365,   369,   372,   376,   380,   385,   387,   391,
   393,   397,   400,   403,   405,   409,   411,   413,   416,   419,
   422,   425,   428,   432,   436,   438,   441,   444,   448,   450,
   452,   455,   458,   461,   463,   465,   467,   470,   472,   474,
   476,   478,   481,   483,   485,   489,   494,   497,   500,   502,
   504,   506,   510,   513,   515,   517,   519,   526,   528,   535,
   543,   545,   547,   550,   552,   554,   557,   559,   561,   564,
   566,   570,   574,   576,   580,   584,   587,   590,   592,   594,
   598,   600,   602,   604,   606,   608,   610,   612,   614,   618,
   622,   626,   630,   634,   638,   642,   646,   650,   654,   658,
   662,   666,   672,   677,   681,   687,   691,   695,   698,   701,
   705,   709,   713,   717,   721,   725,   731,   735,   739,   743,
   747,   751,   755,   759,   763,   767,   771,   774,   777,   780,
   783,   786,   789,   794,   799,   804,   806,   810,   812,   814,
   816,   818,   820,   822,   825,   829,   832,   836,   840,   843,
   846,   850,   855,   860,   865,   869,   871,   873,   875,   877,
   879,   881,   883,   885,   887,   889,   891,   893,   895,   897,
   899,   901,   903,   905,   909,   911,   913,   915,   919,   921,
   923,   925,   927,   928,   930,   932,   936,   938
};

static const short yyrhs[] = {    -1,
    96,    90,     0,    96,    99,    98,     0,    96,   105,    98,
     0,    96,   177,     0,    96,   107,     0,    96,   151,     0,
    96,     1,    98,     0,    91,     0,    91,     0,    90,     0,
   100,     0,   101,     0,   102,     0,   103,     0,   104,     0,
     3,    11,     0,     4,    16,     0,     4,    15,     0,     5,
    15,     0,     6,    16,     0,     6,    15,     0,     7,    15,
     0,     7,    16,     0,     8,     0,     9,     0,    36,   106,
     0,    37,   181,   187,     0,    37,   181,   181,     0,    38,
     0,    38,   195,   181,     0,    38,   195,    13,     0,    38,
   195,    37,     0,    38,   195,    38,     0,    38,   195,    19,
     0,     0,   195,   193,     0,    88,   195,   193,    92,     0,
   108,     0,   109,    97,     0,   110,     0,   113,     0,   118,
     0,   136,     0,   145,   143,   198,    97,     0,   145,   187,
    49,   195,   178,   198,     0,   186,    49,   195,   178,   198,
    97,     0,   145,   187,   195,   111,   198,    97,     0,   112,
     0,   111,   112,     0,    89,   178,    93,     0,   114,    47,
   115,    94,   198,    97,     0,    21,   187,     0,    21,    18,
     0,    21,     0,   116,     0,   115,   116,     0,   117,     0,
   117,    48,     0,     1,     0,   187,     0,   187,    49,    10,
     0,    20,   119,    47,   135,   127,    94,   198,    97,     0,
    20,   119,    47,   135,    94,   198,    97,     0,    20,   121,
   198,    97,     0,   120,     0,   120,    61,   122,     0,   187,
     0,    18,     0,   187,     0,    18,     0,   123,     0,   122,
    48,   123,     0,   124,     0,   146,     0,   125,   146,     0,
   126,     0,   125,   126,     0,    43,     0,    45,     0,    42,
     0,   128,     0,   127,   128,     0,   129,     0,   133,     0,
   113,   135,     0,    43,    61,     0,    42,    61,     0,    44,
    61,     0,     1,     0,   145,   187,    97,   135,     0,   145,
   187,   130,   131,    97,   135,     0,     0,   132,     0,   131,
   132,     0,    89,    10,    93,     0,   134,   139,    97,   135,
     0,    18,   139,    97,   135,     0,    95,    18,   139,    97,
   135,     0,    45,    95,    18,   139,    97,   135,     0,   145,
   187,     0,     0,    17,     0,   135,    17,     0,   137,   139,
   198,    97,     0,   137,   139,   198,   175,     0,   145,    13,
   139,    97,     0,   145,    13,   139,   198,   175,     0,   138,
   139,   198,   176,     0,   145,   187,     0,   145,   148,   187,
     0,   148,    18,     0,   148,    95,    18,     0,    88,    92,
     0,    88,   140,    92,     0,    88,    92,    41,     0,    88,
   140,    92,    41,     0,   141,     0,   140,    48,   141,     0,
   142,     0,   142,    49,   180,     0,   145,    16,     0,   145,
    12,     0,   144,     0,   143,    48,   144,     0,   187,     0,
   146,     0,    39,   146,     0,    40,   146,     0,    41,   146,
     0,    45,   146,     0,    46,   146,     0,    46,    45,   146,
     0,    45,    46,   146,     0,   147,     0,   147,   150,     0,
   147,    66,     0,   147,   150,    66,     0,    18,     0,    19,
     0,   148,    22,     0,    18,    87,     0,    19,    87,     0,
    18,     0,    19,     0,    77,     0,   150,    77,     0,   152,
     0,   169,     0,   153,     0,   165,     0,   178,    97,     0,
   158,     0,   167,     0,    30,   195,    97,     0,    30,   195,
   178,    97,     0,    31,    97,     0,    32,    97,     0,   156,
     0,   154,     0,   175,     0,    28,   155,    61,     0,    29,
    61,     0,    10,     0,    11,     0,    12,     0,   157,    88,
   195,   178,    92,    47,     0,    27,     0,   159,    88,   160,
   162,   164,   151,     0,   159,    88,   196,   160,   162,   164,
   151,     0,    33,     0,   161,     0,   161,   178,     0,    91,
     0,   163,     0,   163,   196,     0,    91,     0,    92,     0,
   166,   151,     0,    24,     0,   168,   172,    97,     0,   168,
   172,   151,     0,    23,     0,   170,   172,   152,     0,   170,
   172,   169,     0,   171,   152,     0,   171,   169,     0,    25,
     0,    26,     0,   173,   178,   174,     0,    88,     0,    92,
     0,    47,     0,    47,     0,    94,     0,   180,     0,   179,
     0,   184,     0,   178,    49,   178,     0,   178,    49,    47,
     0,   178,    50,   178,     0,   178,    51,   178,     0,   178,
    52,   178,     0,   178,    53,   178,     0,   178,    54,   178,
     0,   178,    55,   178,     0,   178,    56,   178,     0,   178,
    57,   178,     0,   178,    58,   178,     0,   178,    59,   178,
     0,    34,   195,   149,     0,    34,   195,   149,    88,    92,
     0,    34,   195,   149,   112,     0,    35,   195,   178,     0,
    35,    89,    93,   195,   178,     0,   178,    62,   178,     0,
   178,    63,   178,     0,    66,   178,     0,    77,   178,     0,
   178,    67,   178,     0,   178,    68,   178,     0,   178,    69,
   178,     0,   178,    70,   178,     0,   178,    71,   178,     0,
   178,    72,   178,     0,   178,    60,   178,    61,   178,     0,
   178,    75,   178,     0,   178,    76,   178,     0,   178,    77,
   178,     0,   178,    78,   178,     0,   178,    79,   178,     0,
   178,    73,   178,     0,   178,    74,   178,     0,   178,    66,
   178,     0,   178,    65,   178,     0,   178,    64,   178,     0,
   178,    81,     0,    81,   178,     0,   178,    82,     0,    82,
   178,     0,    76,   178,     0,    84,   178,     0,   178,    89,
   178,    93,     0,    88,   145,    92,   178,     0,   145,    88,
   178,    92,     0,   182,     0,    88,   178,    92,     0,    10,
     0,    11,     0,    12,     0,    14,     0,    36,     0,    13,
     0,   183,    92,     0,   183,   191,    92,     0,    13,    88,
     0,   179,   188,   189,     0,   180,   188,   189,     0,    86,
   189,     0,   148,   189,     0,   185,   198,    92,     0,   185,
   198,   191,    92,     0,   179,   188,   189,    88,     0,   180,
   188,   189,    88,     0,   148,   189,    88,     0,    16,     0,
    16,     0,    10,     0,    11,     0,    12,     0,    14,     0,
    13,     0,    86,     0,    85,     0,    16,     0,    11,     0,
   190,     0,    12,     0,    14,     0,    13,     0,    19,     0,
   181,     0,   192,     0,   191,    48,   192,     0,   178,     0,
    19,     0,   194,     0,   193,    48,   194,     0,   178,     0,
    19,     0,    16,     0,    18,     0,     0,   197,     0,   109,
     0,   196,    48,   196,     0,   178,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   162,   163,   164,   165,   166,   169,   172,   173,   176,   179,
   180,   183,   184,   185,   186,   187,   191,   198,   200,   201,
   204,   207,   208,   211,   214,   218,   229,   231,   235,   237,
   239,   243,   247,   251,   255,   261,   262,   263,   267,   268,
   269,   270,   271,   272,   275,   285,   303,   322,   338,   340,
   343,   347,   354,   361,   368,   376,   377,   380,   381,   382,
   385,   402,   421,   426,   430,   435,   437,   440,   447,   469,
   475,   483,   484,   487,   497,   498,   501,   502,   505,   506,
   507,   510,   511,   514,   515,   516,   517,   518,   519,   520,
   523,   535,   551,   558,   560,   563,   568,   574,   590,   607,
   627,   648,   649,   650,   653,   659,   671,   679,   697,   710,
   723,   749,   770,   792,   793,   794,   795,   798,   799,   802,
   803,   808,   817,   827,   828,   835,   844,   845,   846,   847,
   849,   850,   851,   852,   855,   856,   862,   864,   872,   873,
   874,   885,   890,   894,   895,   898,   899,   902,   903,   906,
   907,   910,   911,   912,   913,   914,   915,   916,   917,   918,
   919,   922,   931,   942,   944,   945,   948,   966,   975,   990,
  1013,  1020,  1022,  1025,  1033,  1034,  1037,  1048,  1059,  1062,
  1072,  1095,  1109,  1112,  1115,  1118,  1125,  1129,  1133,  1148,
  1156,  1164,  1168,  1175,  1178,  1187,  1188,  1191,  1193,  1194,
  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,  1218,  1219,  1220,  1221,  1222,  1223,  1224,
  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,
  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,  1244,
  1245,  1246,  1247,  1248,  1254,  1260,  1261,  1264,  1266,  1267,
  1268,  1271,  1274,  1276,  1277,  1292,  1307,  1309,  1317,  1318,
  1324,  1329,  1346,  1348,  1366,  1389,  1394,  1396,  1398,  1400,
  1404,  1408,  1414,  1415,  1418,  1421,  1422,  1427,  1428,  1429,
  1430,  1431,  1434,  1435,  1438,  1439,  1442,  1443,  1446,  1447,
  1448,  1451,  1454,  1457,  1458,  1459,  1462,  1465
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","CSS_PP_INCLUDE",
"CSS_PP_DEFINE","CSS_PP_UNDEF","CSS_PP_IFDEF","CSS_PP_IFNDEF","CSS_PP_ELSE",
"CSS_PP_ENDIF","CSS_NUMBER","CSS_STRING","CSS_VAR","CSS_FUN","CSS_PTR","CSS_PP_DEF",
"CSS_NAME","CSS_COMMENT","CSS_TYPE","CSS_PTRTYPE","CSS_CLASS","CSS_ENUM","CSS_SCPTYPE",
"CSS_WHILE","CSS_DO","CSS_IF","CSS_ELSE","CSS_SWITCH","CSS_CASE","CSS_DEFAULT",
"CSS_RETURN","CSS_BREAK","CSS_CONTINUE","CSS_FOR","CSS_NEW","CSS_DELETE","CSS_COMMAND",
"CSS_ALIAS","CSS_HELP","CSS_EXTERN","CSS_STATIC","CSS_CONST","CSS_PRIVATE","CSS_PUBLIC",
"CSS_PROTECTED","CSS_VIRTUAL","CSS_INLINE","'{'","','","'='","CSS_ASGN_ADD",
"CSS_ASGN_SUB","CSS_ASGN_MULT","CSS_ASGN_DIV","CSS_ASGN_MOD","CSS_ASGN_LSHIFT",
"CSS_ASGN_RSHIFT","CSS_ASGN_AND","CSS_ASGN_XOR","CSS_ASGN_OR","'?'","':'","CSS_OR",
"CSS_AND","'|'","'^'","'&'","CSS_GT","CSS_GE","CSS_LT","CSS_LE","CSS_EQ","CSS_NE",
"CSS_LSHIFT","CSS_RSHIFT","'+'","'-'","'*'","'/'","'%'","CSS_UNARY","CSS_PLUSPLUS",
"CSS_MINMIN","CSS_UNARYMINUS","CSS_NOT","CSS_POINTSAT","'.'","CSS_SCOPER","'('",
"'['","'\\n'","';'","')'","']'","'}'","'~'","toplev","term","crterm","pproc",
"ppinclude","ppdefine","ppifdef","ppelse","ppendif","command","cmd_args","defn",
"vardefn","vardefin","arraydefn","arraydims","arraydim","enumdefn","enumname",
"enums","enumline","enumitms","classdefn","classhead","classnm","classfwd","classinh",
"classpar","classtyp","inh_mods","inh_mod","membs","membline","membdefn","membardimstop",
"membardims","membardim","methdefn","methname","classcmt","fundefn","fundname",
"methdname","funargs","arglist","argdefn","subargdefn","tynames","tyname","type",
"type_el","typeorscp","scopetype","typeonly","ptrs","stmt","noifstmt","nodostmt",
"caseitem","caseexpr","switchblock","switch","forloop","for","for_cond","for_cond_sc",
"for_incr","for_incr_sc","for_end_paren","doloop","do","whiloop","while","ifstmt",
"if","else","cond","cond_paren","cond_end_paren","bra","mbr_bra","ket","expr",
"comb_expr","primitive","anycmd","normfuncall","normfun","memb_expr","membfun",
"undefname","name","getmemb","membname","membnms","exprlist","exprlsel","cmd_exprlist",
"cmd_exprlsel","argstop","stmtlist","stmtel","end", NULL
};
#endif

static const short yyr1[] = {     0,
    96,    96,    96,    96,    96,    96,    96,    96,    97,    98,
    98,    99,    99,    99,    99,    99,   100,   101,   101,   101,
   102,   102,   102,   102,   103,   104,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   106,   106,   106,   107,   107,
   107,   107,   107,   107,   108,   109,   109,   110,   111,   111,
   112,   113,   114,   114,   114,   115,   115,   116,   116,   116,
   117,   117,   118,   118,   118,   119,   119,   120,   120,   121,
   121,   122,   122,   123,   124,   124,   125,   125,   126,   126,
   126,   127,   127,   128,   128,   128,   128,   128,   128,   128,
   129,   129,   130,   131,   131,   132,   133,   133,   133,   133,
   134,   135,   135,   135,   136,   136,   136,   136,   136,   137,
   138,   138,   138,   139,   139,   139,   139,   140,   140,   141,
   141,   142,   142,   143,   143,   144,   145,   145,   145,   145,
   145,   145,   145,   145,   146,   146,   146,   146,   147,   147,
   147,   148,   148,   149,   149,   150,   150,   151,   151,   152,
   152,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   154,   154,   155,   155,   155,   156,   157,   158,   158,
   159,   160,   160,   161,   162,   162,   163,   164,   165,   166,
   167,   167,   168,   169,   169,   169,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   178,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   180,   180,   180,
   180,   181,   182,   182,   182,   183,   184,   184,   184,   184,
   184,   184,   185,   185,   185,   186,   187,   187,   187,   187,
   187,   187,   188,   188,   189,   189,   189,   190,   190,   190,
   190,   190,   191,   191,   192,   192,   193,   193,   194,   194,
   194,   194,   195,   196,   196,   196,   197,   198
};

static const short yyr2[] = {     0,
     0,     2,     3,     3,     2,     2,     2,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     1,     1,     2,     3,     3,     1,
     3,     3,     3,     3,     3,     0,     2,     4,     1,     2,
     1,     1,     1,     1,     4,     6,     6,     6,     1,     2,
     3,     6,     2,     2,     1,     1,     2,     1,     2,     1,
     1,     3,     8,     7,     4,     1,     3,     1,     1,     1,
     1,     1,     3,     1,     1,     2,     1,     2,     1,     1,
     1,     1,     2,     1,     1,     2,     2,     2,     2,     1,
     4,     6,     0,     1,     2,     3,     4,     4,     5,     6,
     2,     0,     1,     2,     4,     4,     4,     5,     4,     2,
     3,     2,     3,     2,     3,     3,     4,     1,     3,     1,
     3,     2,     2,     1,     3,     1,     1,     2,     2,     2,
     2,     2,     3,     3,     1,     2,     2,     3,     1,     1,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     1,
     1,     2,     1,     1,     3,     4,     2,     2,     1,     1,
     1,     3,     2,     1,     1,     1,     6,     1,     6,     7,
     1,     1,     2,     1,     1,     2,     1,     1,     2,     1,
     3,     3,     1,     3,     3,     2,     2,     1,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     4,     3,     5,     3,     3,     2,     2,     3,
     3,     3,     3,     3,     3,     5,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     2,     2,     2,     2,
     2,     2,     4,     4,     4,     1,     3,     1,     1,     1,
     1,     1,     1,     2,     3,     2,     3,     3,     2,     2,
     3,     4,     4,     4,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     1,     1,     3,     1,     1,
     1,     1,     0,     1,     1,     3,     1,     0
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,     0,     0,    25,    26,   248,
   249,   250,   253,   251,   266,   139,   140,     0,    55,   183,
   180,   188,   189,   168,     0,     0,   293,     0,     0,   171,
   293,   293,   293,     0,   293,     0,     0,     0,     0,     0,
   193,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   195,     0,    12,    13,    14,    15,    16,     0,     6,    39,
     0,    41,    42,     0,    43,    44,     0,     0,     0,   127,
   135,     0,     7,   148,   150,   160,   159,     0,   153,     0,
   151,     0,   154,     0,   149,     0,     0,   161,     5,     0,
   197,   196,   246,     0,   198,   298,     0,    11,    10,     8,
    17,    19,    18,    20,    22,    21,    23,    24,   256,   142,
   143,   268,   269,   270,   272,   271,   267,    69,     0,    66,
   298,    68,    54,    53,   164,   165,   166,     0,   163,     0,
     9,   157,   158,     0,     0,     0,   293,    27,     0,   252,
     0,     0,   128,     0,   129,   130,     0,   131,     0,   132,
     0,     0,   218,   241,   219,   238,   240,   242,   276,   278,
   280,   279,   275,   281,   282,   259,   277,     0,     0,     3,
     4,    40,     0,     0,   298,   298,   272,     0,     0,     0,
   298,   124,     0,   126,   137,   146,   136,   112,   141,     0,
   260,   293,     0,   179,   191,     0,     0,     0,   186,   187,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   237,   239,     0,   152,   274,   273,     0,     0,   140,   254,
   285,     0,   283,     0,   293,   102,     0,     0,   162,   155,
     0,   144,   145,   211,   293,   214,     0,   291,   292,   290,
   289,    37,   287,    29,    28,    32,    35,    33,    34,    31,
   134,   133,     0,   247,    60,     0,    56,    58,    61,   114,
     0,   118,   120,     0,     0,     0,   298,     0,     0,     0,
   111,   293,     0,   138,   147,   113,   265,     0,   174,   295,
     0,     0,   172,   297,     0,   294,   181,   182,     0,   184,
   185,   200,   199,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,     0,   216,   217,   236,   235,   234,   220,
   221,   222,   223,   224,   225,   232,   233,   227,   228,   229,
   230,   231,     0,   257,   258,     0,   255,   261,     0,     0,
   103,     0,    81,    79,    80,    67,    72,    74,     0,    77,
    75,    65,   156,     0,     0,   213,     0,     0,     0,   244,
   298,    57,    59,     0,   116,     0,   115,     0,   123,   122,
   105,   106,   194,   109,   107,     0,   245,   125,   126,    45,
     0,   298,    49,     0,     0,   177,     0,   175,   173,     0,
     0,   192,   190,     0,   243,   263,   264,   284,   262,   298,
    90,   104,   139,     0,     0,     0,     0,   298,     0,   102,
     0,    82,    84,    85,     0,     0,     0,    78,    76,   212,
     0,   215,    38,   288,     0,    62,   119,   117,   121,   108,
   298,    50,     0,     0,   178,     0,   176,   296,     0,   226,
     0,     0,    88,    87,    89,     0,     0,     0,    86,   298,
    83,     0,    93,    73,    51,    52,    46,    48,   167,   169,
     0,    47,   102,     0,    64,     0,     0,   102,   102,     0,
   170,    98,     0,   102,    63,    97,    91,     0,     0,    94,
   102,    99,     0,   102,    95,   100,    96,    92,     0,     0
};

static const short yydefgoto[] = {     1,
   132,   100,    52,    53,    54,    55,    56,    57,    58,   138,
    59,    60,   300,    62,   392,   366,   420,    64,   276,   277,
   278,    65,   119,   120,   121,   356,   357,   358,   359,   360,
   421,   422,   423,   480,   489,   490,   424,   425,   352,    66,
    67,    68,   175,   281,   282,   283,   181,   182,   151,    70,
    71,   152,   254,   187,    73,    74,    75,    76,   128,    77,
    78,    79,    80,   302,   303,   397,   398,   446,    81,    82,
    83,    84,    85,    86,    87,   196,   197,   403,    88,   384,
    89,    90,    91,    92,   165,    93,    94,    95,    96,    97,
   279,   237,   191,   167,   242,   243,   262,   263,   130,   305,
   306,   244
};

static const short yypact[] = {-32768,
   496,    85,    12,   202,    26,   216,   225,-32768,-32768,-32768,
-32768,-32768,   -38,-32768,-32768,     5,    70,   678,   725,-32768,
-32768,-32768,-32768,-32768,   241,    38,-32768,    13,    13,-32768,
-32768,    83,   135,    22,   175,   261,   261,   261,    75,    84,
-32768,  1112,  1112,  1112,  1112,  1112,  1112,   317,  1112,-32768,
-32768,    85,-32768,-32768,-32768,-32768,-32768,    85,-32768,-32768,
    13,-32768,-32768,    72,-32768,-32768,    92,    92,    62,-32768,
    30,    35,-32768,-32768,-32768,-32768,-32768,    97,-32768,    99,
-32768,   928,-32768,   101,-32768,   101,   928,-32768,-32768,  1497,
   208,   208,-32768,   585,-32768,-32768,   145,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   108,   156,   153,
-32768,   130,-32768,-32768,-32768,-32768,-32768,   168,-32768,   846,
-32768,-32768,-32768,   307,   178,  1112,-32768,-32768,  1007,-32768,
   142,   226,-32768,   213,-32768,-32768,   261,-32768,   261,-32768,
   158,   256,    42,   184,    42,    42,    42,   184,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    18,  1321,-32768,
-32768,-32768,   333,   197,-32768,-32768,    92,     5,    70,  1112,
   229,-32768,   553,    46,-32768,-32768,    32,-32768,-32768,   267,
   247,-32768,   833,-32768,-32768,   751,  1112,   928,-32768,-32768,
  1020,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,
  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,
  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,
-32768,-32768,  1112,-32768,-32768,-32768,   317,   317,    -5,-32768,
  1581,   -33,-32768,   668,-32768,   273,   150,    13,-32768,-32768,
  1497,-32768,-32768,   251,-32768,    42,  1007,-32768,   113,   125,
  1581,   289,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1112,-32768,-32768,    54,-32768,   294,   301,   313,
    -6,-32768,   309,   102,   -28,   314,    13,  1365,   553,    13,
-32768,-32768,   274,-32768,-32768,-32768,-32768,  1112,-32768,-32768,
    17,   277,  1112,  1581,   -31,-32768,-32768,-32768,  1409,-32768,
-32768,-32768,  1581,  1581,  1581,  1581,  1581,  1581,  1581,  1581,
  1581,  1581,  1581,  1540,   571,   651,   479,   733,   909,   296,
   296,   296,   296,   296,   296,   360,   360,    82,    82,    42,
    42,    42,  1231,   276,   293,  1191,-32768,-32768,    -4,  1112,
-32768,   165,-32768,-32768,-32768,   334,-32768,-32768,   150,-32768,
-32768,-32768,-32768,   291,  1112,-32768,  1112,    -3,  1007,    42,
-32768,-32768,-32768,   355,-32768,   209,   343,   272,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   339,-32768,-32768,-32768,-32768,
  1112,   274,-32768,  1453,   338,-32768,   297,  1099,  1581,  1099,
   277,-32768,-32768,  1112,-32768,-32768,-32768,-32768,-32768,  1581,
-32768,-32768,   269,   335,   337,   341,    16,-32768,   376,   273,
   570,-32768,-32768,-32768,    92,   553,   150,-32768,-32768,-32768,
  1276,    42,-32768,-32768,    13,-32768,-32768,-32768,-32768,-32768,
  1581,-32768,    13,   348,-32768,   928,   351,-32768,   297,   402,
    13,    13,-32768,-32768,-32768,   386,    13,    92,   388,-32768,
-32768,    13,    74,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   928,-32768,   273,    92,-32768,    13,    13,   273,   273,   318,
-32768,   388,    13,   273,-32768,   388,   388,   398,    24,-32768,
   273,   388,   319,   273,-32768,   388,-32768,   388,   410,-32768
};

static const short yypgoto[] = {-32768,
   -29,    25,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   414,-32768,-32768,  -275,   415,-32768,-32768,   143,
-32768,-32768,-32768,-32768,-32768,-32768,    -7,-32768,-32768,    59,
-32768,     4,-32768,-32768,-32768,   -63,-32768,-32768,  -394,-32768,
-32768,-32768,   -65,-32768,    53,-32768,-32768,   154,     3,   -27,
-32768,     0,-32768,-32768,   -80,   -73,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   126,-32768,    31,-32768,     1,-32768,-32768,
-32768,-32768,   -71,-32768,-32768,   359,-32768,-32768,  -278,-32768,
-32768,    94,-32768,    68,    -9,-32768,-32768,-32768,-32768,-32768,
   -13,   361,   -40,-32768,   207,   106,   198,    87,   -11,  -256,
-32768,   -30
};


#define	YYLAST		1670


static const short yytable[] = {   133,
    72,   194,   176,    69,   122,   124,   382,   166,   143,   145,
   146,   148,   150,   199,   346,   200,   400,   393,    41,   134,
   136,   139,   101,   142,   141,   459,   112,   113,   114,   115,
   116,   172,   117,    16,    17,   144,   144,   144,   144,   144,
   104,   376,  -286,   346,   369,   159,   160,   161,   162,   109,
   163,   168,   188,   164,   275,   184,   189,   140,   347,   299,
   234,   147,   131,   112,   113,   114,   115,   116,   183,   117,
   140,   112,   113,   114,   177,   116,   170,   117,   482,   178,
   179,   111,   171,   486,   487,   377,  -286,   409,   433,   492,
   248,   110,    16,    17,   292,   185,   496,   294,   129,   498,
   250,    16,    17,   131,   180,   180,   186,   440,   295,   273,
   456,   287,   488,   379,   131,   308,   442,   380,   173,   271,
   147,   272,   231,   232,   310,   257,   311,   265,   149,   190,
   233,   264,   270,  -110,  -293,   153,   154,   155,   156,   157,
   158,   447,   169,   448,   285,   286,   144,   371,   144,   180,
   290,   112,   113,   114,   115,   116,   111,   117,   228,   229,
   230,  -101,   231,   232,   131,   411,   307,    16,    17,   291,
   233,   135,   293,   144,    98,    99,   284,   140,  -139,   174,
   298,   412,   413,    17,   192,    19,   193,   241,   195,  -139,
  -140,   353,   354,   245,   355,   301,   344,   345,   -71,   110,
  -139,  -140,   246,    36,    37,    38,   414,   415,   416,   417,
    40,   111,  -140,   247,    16,    17,   102,   103,   362,   361,
   -70,   363,   137,   251,   -36,   -36,    16,    17,   249,   256,
   105,   106,   261,   350,   189,    36,    37,    38,   266,   107,
   108,    39,    40,   367,   267,   180,   144,    36,    37,    38,
   125,   126,   127,    39,    40,   381,   386,   385,   418,   419,
   390,   140,   268,   269,   -30,   -30,   159,   160,   161,   162,
   255,   163,   233,   288,   164,   389,   289,   189,    16,    17,
   391,    10,    11,    12,   296,    14,   304,   395,   280,   351,
   309,   140,   235,   236,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   341,   342,   252,   253,   343,   159,   160,   161,
   162,   429,   163,   275,   297,   164,   369,   241,   364,   365,
   435,   373,   112,   113,   114,   115,   116,   452,   117,   374,
   261,   144,   140,   375,   426,   110,   174,   378,   144,   462,
   383,   443,   365,   406,   436,   470,   370,   396,   224,   225,
   226,   227,   228,   229,   230,   144,   231,   232,   284,   451,
   407,   427,   430,   438,   233,    41,   292,   457,   445,   148,
   481,   394,   476,   458,   469,   453,   399,   454,   400,   361,
   301,   455,   301,   474,   412,   466,   488,   493,   483,   500,
   467,   497,   463,   468,    61,    63,   144,   428,   372,   464,
   144,   472,   473,   426,   461,   495,   144,   475,   437,   477,
   401,   449,   478,   479,   226,   227,   228,   229,   230,   241,
   231,   232,   388,   410,   198,   439,   484,   485,   233,   471,
   349,   408,   238,   491,   368,   434,     0,     0,   431,   494,
   432,   212,   261,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,     0,   231,   232,   441,     0,     0,     0,     0,     0,
   233,   304,     0,   304,     0,   499,     2,   450,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
     0,    15,     0,    16,    17,    18,    19,     0,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,     0,     0,     0,
    39,    40,    41,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
   232,    42,   112,   113,   114,   115,   116,   233,   117,     0,
   411,    43,    44,     0,     0,     0,    45,    46,     0,    47,
     0,    48,     0,    49,     0,    50,     0,   413,    17,    51,
    19,     0,     0,     0,    10,    11,    12,    13,    14,     0,
     0,     0,    16,   239,     0,     0,     0,     0,    36,    37,
    38,   414,   415,   416,   417,    40,     0,     0,    31,    32,
     0,     0,     0,    36,    37,    38,     0,     0,     0,    39,
    40,     0,     0,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
    42,   231,   232,     0,     0,     0,     0,     0,     0,   233,
    43,    44,     0,   460,   419,    45,    46,     0,    47,     0,
    48,     0,    49,     0,     0,     0,   240,    10,    11,    12,
    13,    14,     0,     0,     0,    16,   239,   112,   113,   114,
   115,   116,     0,   117,     0,   118,     0,     0,     0,     0,
     0,    31,    32,     0,     0,     0,    36,    37,    38,     0,
     0,     0,    39,    40,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     0,   231,   232,    42,   112,   113,   114,   115,   116,   233,
   117,     0,   123,    43,    44,     0,     0,     0,    45,    46,
     0,    47,     0,    48,     0,    49,     0,     0,     0,   348,
    10,    11,    12,    13,    14,     0,     0,     0,    16,    17,
     0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,     0,     0,    36,
    37,    38,     0,     0,     0,    39,    40,    41,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,     0,   231,   232,     0,    42,     0,     0,     0,
     0,   233,     0,     0,     0,     0,    43,    44,     0,     0,
     0,    45,    46,     0,    47,     0,    48,     0,    49,     0,
     0,   131,    10,    11,    12,    13,    14,     0,    15,     0,
    16,    17,     0,     0,     0,    10,    11,    12,    13,    14,
     0,     0,     0,    16,    17,     0,    31,    32,     0,     0,
     0,    36,    37,    38,     0,     0,     0,    39,    40,    31,
    32,     0,     0,     0,    36,    37,    38,     0,     0,     0,
    39,    40,     0,     0,     0,     0,     0,     0,    42,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     0,    42,     0,    45,    46,     0,    47,     0,    48,     0,
    49,    43,    44,   299,     0,     0,    45,    46,     0,    47,
     0,    48,     0,    49,     0,     0,   131,    10,    11,    12,
    13,    14,     0,     0,     0,    16,    17,     0,     0,     0,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     0,     0,     0,    36,    37,    38,     0,
     0,     0,    39,    40,    41,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
   232,     0,     0,    42,     0,     0,     0,   233,     0,     0,
     0,     0,     0,    43,    44,     0,     0,     0,    45,    46,
     0,    47,     0,    48,     0,    49,    10,    11,    12,    13,
    14,     0,   258,     0,   259,   260,     0,     0,     0,    10,
    11,    12,    13,    14,     0,     0,     0,    16,    17,     0,
    31,    32,     0,     0,     0,    36,    37,    38,     0,     0,
     0,    39,    40,    31,    32,     0,     0,     0,    36,    37,
    38,     0,     0,     0,    39,    40,   312,     0,     0,     0,
     0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    43,    44,     0,    42,     0,    45,    46,     0,
    47,     0,    48,     0,    49,    43,    44,     0,     0,     0,
    45,    46,     0,    47,     0,    48,     0,    49,    10,    11,
    12,    13,    14,     0,    15,     0,    16,    17,     0,     0,
     0,    10,    11,    12,    13,    14,     0,     0,     0,    16,
    17,     0,    31,    32,     0,     0,     0,    36,    37,    38,
     0,     0,     0,    39,    40,    31,    32,     0,     0,     0,
    36,    37,    38,     0,     0,     0,    39,    40,     0,     0,
     0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    43,    44,     0,    42,     0,    45,
    46,     0,    47,     0,    48,     0,    49,    43,    44,     0,
     0,     0,    45,    46,     0,    47,     0,    48,     0,    49,
    10,    11,    12,    13,    14,     0,     0,     0,    16,   239,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    31,    32,     0,     0,     0,    36,
    37,    38,     0,     0,     0,    39,    40,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
     0,    45,    46,     0,    47,     0,    48,     0,    49,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     0,   231,   232,     0,     0,     0,     0,     0,     0,   233,
     0,     0,     0,   405,   201,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,     0,   231,   232,     0,     0,
     0,     0,     0,     0,   233,     0,     0,     0,   465,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     0,   231,   232,     0,     0,     0,     0,     0,     0,   233,
     0,     0,   274,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,     0,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   230,     0,   231,   232,     0,     0,     0,
     0,     0,     0,   233,     0,     0,   387,   201,   202,   203,
   204,   205,   206,   207,   208,   209,   210,   211,   212,     0,
   213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
   232,     0,     0,     0,     0,     0,     0,   233,     0,     0,
   402,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,     0,   231,   232,     0,     0,     0,     0,     0,
     0,   233,     0,     0,   444,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,     0,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,   230,     0,   231,   232,     0,
     0,     0,     0,     0,     0,   233,     0,   131,   201,   202,
   203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
   404,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
   231,   232,     0,     0,     0,     0,     0,     0,   233,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     0,   231,   232,     0,     0,     0,     0,     0,     0,   233
};

static const short yycheck[] = {    29,
     1,    82,    68,     1,    18,    19,   285,    48,    36,    37,
    38,    39,    40,    87,    48,    87,    48,   293,    47,    31,
    32,    33,    11,    35,    34,   420,    10,    11,    12,    13,
    14,    61,    16,    18,    19,    36,    37,    38,    39,    40,
    15,    48,    48,    48,    48,    11,    12,    13,    14,    88,
    16,    49,    18,    19,     1,    69,    22,    36,    92,    91,
    90,    46,    91,    10,    11,    12,    13,    14,    69,    16,
    36,    10,    11,    12,    13,    14,    52,    16,   473,    18,
    19,    87,    58,   478,   479,    92,    92,    92,    92,   484,
   121,    87,    18,    19,    49,    66,   491,    66,    61,   494,
   130,    18,    19,    91,    88,    88,    77,   386,    77,    92,
    95,   177,    89,    12,    91,   196,   392,    16,    47,   147,
    46,   149,    81,    82,   198,   137,   198,   141,    45,    95,
    89,   141,   142,    88,    89,    42,    43,    44,    45,    46,
    47,   398,    49,   400,   175,   176,   147,    94,   149,    88,
   181,    10,    11,    12,    13,    14,    87,    16,    77,    78,
    79,    88,    81,    82,    91,     1,   196,    18,    19,   183,
    89,    89,   184,   174,    90,    91,   174,    36,    66,    88,
   192,    17,    18,    19,    88,    21,    88,    94,    88,    77,
    66,    42,    43,    49,    45,   193,   237,   238,    91,    87,
    88,    77,    47,    39,    40,    41,    42,    43,    44,    45,
    46,    87,    88,    61,    18,    19,    15,    16,   248,   247,
    91,   251,    88,   130,    90,    91,    18,    19,    61,   136,
    15,    16,   139,   245,    22,    39,    40,    41,    13,    15,
    16,    45,    46,   255,    19,    88,   247,    39,    40,    41,
    10,    11,    12,    45,    46,   285,   287,   287,    94,    95,
   290,    36,    37,    38,    90,    91,    11,    12,    13,    14,
    93,    16,    89,   180,    19,   289,    48,    22,    18,    19,
   292,    10,    11,    12,    18,    14,   193,   301,    92,    17,
   197,    36,    85,    86,   201,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   230,    18,    19,   233,    11,    12,    13,
    14,   359,    16,     1,    88,    19,    48,   244,    88,    89,
   371,    48,    10,    11,    12,    13,    14,   413,    16,    49,
   257,   352,    36,    41,   352,    87,    88,    49,   359,   425,
    47,   392,    89,    88,    10,   446,   273,    91,    73,    74,
    75,    76,    77,    78,    79,   376,    81,    82,   376,   410,
    88,    48,    92,    41,    89,    47,    49,   418,    92,   417,
   471,   298,   458,    18,    47,    61,   303,    61,    48,   427,
   398,    61,   400,    18,    17,   435,    89,    10,   474,     0,
   441,    93,   426,   443,     1,     1,   417,   359,   276,   427,
   421,   451,   452,   421,   421,   489,   427,   457,   376,   460,
   305,   401,   462,   463,    75,    76,    77,    78,    79,   346,
    81,    82,   289,   350,    86,   378,   476,   477,    89,   449,
   244,   346,    92,   483,   257,   369,    -1,    -1,   365,   489,
   367,    60,   369,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    -1,    81,    82,   391,    -1,    -1,    -1,    -1,    -1,
    89,   398,    -1,   400,    -1,     0,     1,   404,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    -1,    16,    -1,    18,    19,    20,    21,    -1,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    -1,    -1,    -1,
    45,    46,    47,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
    82,    66,    10,    11,    12,    13,    14,    89,    16,    -1,
     1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    84,
    -1,    86,    -1,    88,    -1,    90,    -1,    18,    19,    94,
    21,    -1,    -1,    -1,    10,    11,    12,    13,    14,    -1,
    -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    39,    40,
    41,    42,    43,    44,    45,    46,    -1,    -1,    34,    35,
    -1,    -1,    -1,    39,    40,    41,    -1,    -1,    -1,    45,
    46,    -1,    -1,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    66,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    76,    77,    -1,    94,    95,    81,    82,    -1,    84,    -1,
    86,    -1,    88,    -1,    -1,    -1,    92,    10,    11,    12,
    13,    14,    -1,    -1,    -1,    18,    19,    10,    11,    12,
    13,    14,    -1,    16,    -1,    18,    -1,    -1,    -1,    -1,
    -1,    34,    35,    -1,    -1,    -1,    39,    40,    41,    -1,
    -1,    -1,    45,    46,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    -1,    81,    82,    66,    10,    11,    12,    13,    14,    89,
    16,    -1,    18,    76,    77,    -1,    -1,    -1,    81,    82,
    -1,    84,    -1,    86,    -1,    88,    -1,    -1,    -1,    92,
    10,    11,    12,    13,    14,    -1,    -1,    -1,    18,    19,
    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    -1,    -1,    -1,    39,
    40,    41,    -1,    -1,    -1,    45,    46,    47,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    -1,    81,    82,    -1,    66,    -1,    -1,    -1,
    -1,    89,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    81,    82,    -1,    84,    -1,    86,    -1,    88,    -1,
    -1,    91,    10,    11,    12,    13,    14,    -1,    16,    -1,
    18,    19,    -1,    -1,    -1,    10,    11,    12,    13,    14,
    -1,    -1,    -1,    18,    19,    -1,    34,    35,    -1,    -1,
    -1,    39,    40,    41,    -1,    -1,    -1,    45,    46,    34,
    35,    -1,    -1,    -1,    39,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
    -1,    66,    -1,    81,    82,    -1,    84,    -1,    86,    -1,
    88,    76,    77,    91,    -1,    -1,    81,    82,    -1,    84,
    -1,    86,    -1,    88,    -1,    -1,    91,    10,    11,    12,
    13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    -1,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    -1,    -1,    -1,    39,    40,    41,    -1,
    -1,    -1,    45,    46,    47,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
    82,    -1,    -1,    66,    -1,    -1,    -1,    89,    -1,    -1,
    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    82,
    -1,    84,    -1,    86,    -1,    88,    10,    11,    12,    13,
    14,    -1,    16,    -1,    18,    19,    -1,    -1,    -1,    10,
    11,    12,    13,    14,    -1,    -1,    -1,    18,    19,    -1,
    34,    35,    -1,    -1,    -1,    39,    40,    41,    -1,    -1,
    -1,    45,    46,    34,    35,    -1,    -1,    -1,    39,    40,
    41,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    76,    77,    -1,    66,    -1,    81,    82,    -1,
    84,    -1,    86,    -1,    88,    76,    77,    -1,    -1,    -1,
    81,    82,    -1,    84,    -1,    86,    -1,    88,    10,    11,
    12,    13,    14,    -1,    16,    -1,    18,    19,    -1,    -1,
    -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,    18,
    19,    -1,    34,    35,    -1,    -1,    -1,    39,    40,    41,
    -1,    -1,    -1,    45,    46,    34,    35,    -1,    -1,    -1,
    39,    40,    41,    -1,    -1,    -1,    45,    46,    -1,    -1,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    76,    77,    -1,    66,    -1,    81,
    82,    -1,    84,    -1,    86,    -1,    88,    76,    77,    -1,
    -1,    -1,    81,    82,    -1,    84,    -1,    86,    -1,    88,
    10,    11,    12,    13,    14,    -1,    -1,    -1,    18,    19,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,
    40,    41,    -1,    -1,    -1,    45,    46,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    81,    82,    -1,    84,    -1,    86,    -1,    88,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    -1,    -1,    -1,    93,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    -1,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    -1,    81,    82,    -1,    -1,
    -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    93,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    -1,    -1,    92,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    -1,    81,    82,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    -1,    -1,    92,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,
    92,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    -1,    -1,    92,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 163 "css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Blank; ;
    break;}
case 3:
#line 164 "css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Ok; ;
    break;}
case 4:
#line 165 "css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return yyvsp[-1].ival; ;
    break;}
case 5:
#line 166 "css_parse.y"
{ cssMisc::cur_top->Prog()->ResetLasts();
				  cssMisc::cur_top->ResetParseFlags();
				  return cssProg::YY_Ok; ;
    break;}
case 6:
#line 169 "css_parse.y"
{ cssMisc::cur_top->Prog()->ResetLasts();
				  cssMisc::cur_top->ResetParseFlags();
				  return cssProg::YY_Ok; ;
    break;}
case 7:
#line 172 "css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Ok; ;
    break;}
case 8:
#line 173 "css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Err; ;
    break;}
case 9:
#line 176 "css_parse.y"
{ yyval.ival = cssMisc::cur_top->Prog()->size; ;
    break;}
case 10:
#line 179 "css_parse.y"
{ yyval.ival = cssMisc::cur_top->Prog()->size; ;
    break;}
case 11:
#line 180 "css_parse.y"
{ yyval.ival = cssMisc::cur_top->Prog()->size; ;
    break;}
case 17:
#line 192 "css_parse.y"
{
            cssEl* tmp = yyvsp[0].el.El();
	    cssMisc::cur_top->SetInclude((const char*)*tmp);
	    cssEl::Done(yyvsp[0].el.El()); ;
    break;}
case 18:
#line 198 "css_parse.y"
{
            cssMisc::Defines.Push(new cssDef(0, yyvsp[0].nm)); ;
    break;}
case 20:
#line 201 "css_parse.y"
{ cssMisc::Defines.Remove(yyvsp[0].el.El()); ;
    break;}
case 21:
#line 204 "css_parse.y"
{ /* if its a name, its not defined.. */
            cssDef::Skip_To_Endif(cssMisc::cur_top->Prog());
	    return cssProg::YY_Ok; ;
    break;}
case 23:
#line 208 "css_parse.y"
{ /* if its a def, its defined.. */
            cssDef::Skip_To_Endif(cssMisc::cur_top->Prog());
	    return cssProg::YY_Ok; ;
    break;}
case 25:
#line 214 "css_parse.y"
{ /* if you see it, it applies to u*/
            cssDef::Skip_To_Endif(cssMisc::cur_top->Prog()); ;
    break;}
case 27:
#line 229 "css_parse.y"
{
            Code1(yyvsp[-1].el); yyval.ival = cssProg::YY_Ok; ;
    break;}
case 28:
#line 231 "css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(new cssRef(yyvsp[-1].el));
	    (yyvsp[-2].el.El())->Do(cssMisc::cur_top->Prog()); ;
    break;}
case 29:
#line 235 "css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc; ;
    break;}
case 30:
#line 237 "css_parse.y"
{
	    Code1(yyvsp[0].el); yyval.ival = cssProg::YY_Ok; ;
    break;}
case 31:
#line 239 "css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-2].el.El())->Do(cssMisc::cur_top->Prog()); ;
    break;}
case 32:
#line 243 "css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-2].el.El())->Do(cssMisc::cur_top->Prog()); ;
    break;}
case 33:
#line 247 "css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-2].el.El())->Do(cssMisc::cur_top->Prog()); ;
    break;}
case 34:
#line 251 "css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-2].el.El())->Do(cssMisc::cur_top->Prog()); ;
    break;}
case 35:
#line 255 "css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-2].el.El())->Do(cssMisc::cur_top->Prog()); ;
    break;}
case 36:
#line 261 "css_parse.y"
{ yyval.ival = 0; ;
    break;}
case 38:
#line 263 "css_parse.y"
{ yyval.ival = yyvsp[-2].ival; ;
    break;}
case 45:
#line 275 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival);
	    if(yyvsp[-2].ival < 0) yyval.ival = yyvsp[-1].ival-1; /* if no coding, its the end, else not */
	    else yyval.ival = yyvsp[-2].ival; ;
    break;}
case 46:
#line 285 "css_parse.y"
{
 	    (yyvsp[-5].el.El())->MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    /* constants get dealt with differently */
	    if(tmp->ptr.ptr == (void*)&(cssMisc::Constants)) {
	      /* code in ConstExpr space the initializer */
	      cssMisc::ConstExprTop->Prog()->UnCode();	/* undo the end jump coding */
	      Code3(tmp->ptr, cssBI::init_asgn, cssBI::pop);
	      cssMisc::ConstExprTop->Run(); /* run the const expr assigning val */
	      cssMisc::CodeTop(); /* revert to coding using top */
	      yyval.ival = Code1(cssMisc::cur_top->Prog()->size+1); /* need to have an rval */
	    }
	    else {
	      cssMisc::cur_top->Prog()->UnCode();	/* undo the end jump coding */
	      yyval.ival = Code3(tmp->ptr, cssBI::init_asgn, cssBI::pop);
	    }
	    cssEl::Done(tmp); ;
    break;}
case 47:
#line 303 "css_parse.y"
{	/* no type information, get from last expr */
	    cssMisc::cur_top->Prog()->UnCode();	/* undo the end jump coding */
	    css_progdx actln = yyvsp[-1].ival-2;
	    if(cssMisc::cur_top->Prog()->insts[actln]->IsJump()) { /* if jmp, get before */
	      actln = yyvsp[-3].ival+1;	/* go for the first thing if the last is no good */
	    }
	    cssEl* extyp = cssMisc::cur_top->Prog()->insts[actln]->inst.El();
 	    extyp->MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    yyval.ival = Code3(tmp->ptr, cssBI::init_asgn, cssBI::pop);
	    if(!cssMisc::cur_top->AmCmdProg()) {
	      cssMisc::Warning(cssMisc::cur_top->Prog(),
			       "Warning: created implicit variable:",
			       tmp->ptr.El()->name,
			       "of type: ", extyp->GetTypeName()); }
	    cssEl::Done(tmp); ;
    break;}
case 48:
#line 323 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-5].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::cur_top->Prog()->UnCode();	/* undo the end jump coding */
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[-5].el.El()); /* type is an arg */
	    cssMisc::cur_top->Prog()->Stack()->Push(new cssInt(yyvsp[-2].ival)); /* num of dims */
	    cssMisc::VoidArray.tmp_str = (yyvsp[-5].el.El())->tmp_str;
	    cssMisc::VoidArray.MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    yyval.ival = Code3(tmp->ptr, cssBI::array_alloc, cssBI::pop);
	    cssEl::Done(tmp); ;
    break;}
case 49:
#line 339 "css_parse.y"
{ yyval.ival = 1; ;
    break;}
case 50:
#line 340 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival + 1; ;
    break;}
case 51:
#line 344 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival; ;
    break;}
case 52:
#line 347 "css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1;
	    if(cssMisc::cur_enum->name.before(5) == "enum_") /* don't keep anon enums around */
	      delete cssMisc::cur_enum;
	    cssMisc::cur_enum = NULL; ;
    break;}
case 53:
#line 354 "css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
            cssMisc::cur_enum = new cssEnumType((const char*)*nm);
	    if(cssMisc::cur_class != NULL) cssMisc::cur_class->types->Push(cssMisc::cur_enum);
	    /* todo: global keyword?? else cssMisc::TypesSpace.Push(cssMisc::cur_enum); */
	    else cssMisc::cur_top->types.Push(cssMisc::cur_enum);
	    cssEl::Done(nm); ;
    break;}
case 54:
#line 361 "css_parse.y"
{ /* redefining */
	    if(yyvsp[0].el.El()->GetType() != cssEl::T_EnumType) {
	      yyerror("Attempt to redefine non-enum type as an enum");
	      return cssProg::YY_Err; }
   	    cssMisc::cur_enum = (cssEnumType*)yyvsp[0].el.El();
 	    cssMisc::cur_enum->enums->Reset(); /* prepare for new enums.. */
	    cssMisc::cur_enum->enum_cnt = 0; ;
    break;}
case 55:
#line 368 "css_parse.y"
{ /* anonymous  */
	    String nm = "anonenum_"; nm += String(cssMisc::anon_type_cnt++); nm += "_";
            cssMisc::cur_enum = new cssEnumType((const char*)nm);
	    if(cssMisc::cur_class != NULL) cssMisc::cur_class->types->Push(cssMisc::cur_enum);
	    /* todo: global keyword?? else cssMisc::TypesSpace.Push(cssMisc::cur_enum); */
	    else cssMisc::cur_top->types.Push(cssMisc::cur_enum); ;
    break;}
case 60:
#line 382 "css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; ;
    break;}
case 61:
#line 385 "css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssSpace* en_own;
	    if(cssMisc::cur_class != NULL) en_own = cssMisc::cur_class->types;
	    else en_own = &(cssMisc::Enums);
	    cssElPtr itm_ptr = en_own->FindName((const char*)*nm); 	cssEnum* itm;
	    if(itm_ptr != 0) { /* redef */
	      itm = (cssEnum*)itm_ptr.El();
	      itm->val = cssMisc::cur_enum->enum_cnt;
	      itm->SetEnumType(cssMisc::cur_enum);
	    } else {
	      itm = new cssEnum(cssMisc::cur_enum, cssMisc::cur_enum->enum_cnt,
				(const char*)*nm);
	      en_own->Push(itm);
	    }
	    cssMisc::cur_enum->enum_cnt = itm->val + 1;
	    cssMisc::cur_enum->enums->Push(itm); cssEl::Done(nm); ;
    break;}
case 62:
#line 402 "css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssSpace* en_own;
	    if(cssMisc::cur_class != NULL) en_own = cssMisc::cur_class->types;
	    else en_own = &(cssMisc::Enums);
	    cssElPtr itm_ptr = en_own->FindName((const char*)*nm);	cssEnum* itm;
	    if(itm_ptr != 0) { /* redef */
	      itm = (cssEnum*)itm_ptr.El();
	      itm->val = (int)*(yyvsp[0].el.El());
	      itm->SetEnumType(cssMisc::cur_enum);
	    }
	    else {
	      itm = new cssEnum(cssMisc::cur_enum, (int)*(yyvsp[0].el.El()), (const char*)*nm);
	      en_own->Push(itm);
	    }
	    cssMisc::cur_enum->enum_cnt = itm->val + 1;
	    cssMisc::cur_enum->enums->Push(itm); cssEl::Done(nm); ;
    break;}
case 63:
#line 422 "css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1;
            cssMisc::cur_class->GetComments(cssMisc::cur_class, yyvsp[-4].el);
            cssMisc::cur_class = NULL; cssMisc::cur_method = NULL; ;
    break;}
case 64:
#line 426 "css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1;
            cssMisc::cur_class->GetComments(cssMisc::cur_class, yyvsp[-3].el);
            cssMisc::cur_class = NULL; cssMisc::cur_method = NULL; ;
    break;}
case 65:
#line 430 "css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1;
            cssMisc::cur_class = NULL; cssMisc::cur_method = NULL; ;
    break;}
case 68:
#line 440 "css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssMisc::cur_class = new cssClassType((const char*)*nm);
	    cssMisc::cur_class->last_top = cssMisc::cur_top;
	    /*	todo: keyword for global??    cssMisc::TypesSpace.Push(cssMisc::cur_class); */
	    cssMisc::cur_top->types.Push(cssMisc::cur_class);
	    cssEl::Done(nm); ;
    break;}
case 69:
#line 447 "css_parse.y"
{ /* redefining */
	    if(yyvsp[0].el.El()->GetType() != cssEl::T_ClassType) {
	      yyerror("Attempt to redefine non-class type as a class");
	      return cssProg::YY_Err;
	    }
	    cssMisc::cur_class = (cssClassType*)yyvsp[0].el.El();
#ifdef GUI_IV
	    cssivSession::CancelClassEdits(cssMisc::cur_class);
#endif // GUI_IV
	    if(cssMisc::cur_class->last_top != cssMisc::cur_top) {
	      cssMisc::cur_class->last_top = cssMisc::cur_top;
	      cssMisc::cur_class->multi_space = true;
	    }
            cssMisc::cur_class->methods->Reset();
	    cssMisc::cur_class->members->Reset();
            cssMisc::cur_class->member_desc.Reset();
            cssMisc::cur_class->member_opts.Reset();
            cssMisc::cur_class->types->Reset();
	    cssMisc::cur_class->parents->Reset();
	    cssMisc::cur_class->AddBuiltins();  ;
    break;}
case 70:
#line 469 "css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
            cssMisc::cur_class = new cssClassType((const char*)*nm);
	    /*	todo: keyword for global??    cssMisc::TypesSpace.Push(cssMisc::cur_class); */
	    cssMisc::cur_top->types.Push(cssMisc::cur_class);
            cssEl::Done(nm); ;
    break;}
case 71:
#line 475 "css_parse.y"
{
            if(yyvsp[0].el.El()->GetType() != cssEl::T_ClassType) {
              yyerror("Attempt to redefine non-class type as a class");
              return cssProg::YY_Err;
            }
            cssMisc::cur_class = (cssClassType*)yyvsp[0].el.El(); ;
    break;}
case 74:
#line 487 "css_parse.y"
{
            if(yyvsp[0].el.El()->GetType() != cssEl::T_ClassType) {
	      yyerror("Cannot inherit from non-class type");
	      /* cssMisc::TypesSpace.Remove(cssMisc::cur_class); */
	      cssMisc::cur_top->types.Remove(cssMisc::cur_class);
	      return cssProg::YY_Err;
	    }
	    cssMisc::cur_class->AddParent((cssClassType*)(yyvsp[0].el.El())); ;
    break;}
case 76:
#line 498 "css_parse.y"
{ yyval.el = yyvsp[0].el; ;
    break;}
case 85:
#line 515 "css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; ;
    break;}
case 86:
#line 516 "css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; ;
    break;}
case 90:
#line 520 "css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; ;
    break;}
case 91:
#line 523 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
            cssMisc::parsing_membdefn = true;
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssClassMember* mbr = new cssClassMember(yyvsp[-3].el.El(), (const char*)*nm);
            cssMisc::cur_class->members->Push(mbr);
            cssMisc::cur_class->GetComments(mbr, yyvsp[0].el);
            cssMisc::parsing_membdefn = false;
            cssEl::Done(nm); ;
    break;}
case 92:
#line 535 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-5].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
            cssMisc::parsing_membdefn = true;
            cssMisc::cur_top->Prog()->Stack()->Push(new cssInt(yyvsp[-2].ival)); /* num of dims */
            cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[-5].el.El()); /* type is an arg */
            cssMisc::VoidArrayType.MakeTempToken(cssMisc::cur_top->Prog());
            cssArrayType* tmp = (cssArrayType*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssClassMember* mbr = new cssClassMember(tmp, tmp->name);
            cssMisc::cur_class->members->Push(mbr);
            cssMisc::cur_class->GetComments(mbr, yyvsp[0].el);
            cssMisc::parsing_membdefn = false; ;
    break;}
case 93:
#line 551 "css_parse.y"
{
            /* swap places with void marker */
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
            cssMisc::cur_top->Prog()->Stack()->Push(&cssMisc::Void);
            cssMisc::cur_top->Prog()->Stack()->Push(nm); ;
    break;}
case 94:
#line 559 "css_parse.y"
{ yyval.ival = 1; ;
    break;}
case 95:
#line 560 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival + 1; ;
    break;}
case 96:
#line 564 "css_parse.y"
{
            cssMisc::cur_top->Prog()->Stack()->Push(new cssInt((int)*yyvsp[-1].el.El())); ;
    break;}
case 97:
#line 568 "css_parse.y"
{       /* pre-declare function */
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)yyvsp[-3].el.El();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el);
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    fun->Define(cssMisc::ConstExpr, true); ;
    break;}
case 98:
#line 574 "css_parse.y"
{       /* constructor */
	    if(yyvsp[-3].el.El() != cssMisc::cur_class) {
	      yyerror("constructor-like method does not match current class type");
	      return cssProg::YY_Err; }
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)cssMisc::cur_class->name);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0)
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	    else {
	      fun = new cssMbrScriptFun
		((const char*)cssMisc::cur_class->name, cssMisc::cur_class);
	      cssMisc::cur_class->methods->Push(fun);
	    }
	    fun->is_tor = true;
	    fun->argc = yyvsp[-2].ival + 1;	      	fun->GetArgDefs();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el); ;
    break;}
case 99:
#line 590 "css_parse.y"
{       /* destructor */
	    if(yyvsp[-3].el.El() != cssMisc::cur_class) {
	      yyerror("destructor-like method does not match current class type");
	      return cssProg::YY_Err; }
	    String nm = "~";
	    nm += cssMisc::cur_class->name;
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)nm);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0)
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	    else {
	      fun = new cssMbrScriptFun(nm, cssMisc::cur_class);
	      cssMisc::cur_class->methods->Push(fun);
	    }
	    fun->is_tor = true;
	    fun->argc = yyvsp[-2].ival + 1;		fun->GetArgDefs();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el);;
    break;}
case 100:
#line 607 "css_parse.y"
{       /* destructor */
	    if(yyvsp[-3].el.El() != cssMisc::cur_class) {
	      yyerror("destructor-like method does not match current class type");
	      return cssProg::YY_Err; }
	    String nm = "~";
	    nm += cssMisc::cur_class->name;
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)nm);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0)
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	    else {
	      fun = new cssMbrScriptFun(nm, cssMisc::cur_class);
	      cssMisc::cur_class->methods->Push(fun);
	    }
	    fun->is_tor = true;
	    fun->is_virtual = true;
	    fun->argc = yyvsp[-2].ival + 1;		fun->GetArgDefs();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el);;
    break;}
case 101:
#line 627 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssEl* nm = cssMisc::cur_top->Prog()->Stack()->Pop();  /* get rid of name */
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)*nm);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0) {
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	      yyval.el = fun_ptr;
	    }
	    else {
	      fun = new cssMbrScriptFun((const char*)*nm, cssMisc::cur_class);
	      yyval.el = cssMisc::cur_class->methods->Push(fun);
	    }
	    if(yyvsp[-1].el.El()->tmp_str == "virtual") fun->is_virtual = true;
	    fun->SetRetvType(yyvsp[-1].el.El()); /* preserve type info for later if nec */
            cssEl::Done(nm); ;
    break;}
case 102:
#line 648 "css_parse.y"
{ yyval.el.Reset(); ;
    break;}
case 103:
#line 649 "css_parse.y"
{ yyval.el = yyvsp[0].el; ;
    break;}
case 104:
#line 650 "css_parse.y"
{ yyval.el = yyvsp[-1].el; ;
    break;}
case 105:
#line 653 "css_parse.y"
{	/* pre-declare function */
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival);	yyval.ival = yyvsp[-1].ival-1;
	    cssScriptFun* fun = (cssScriptFun*)yyvsp[-3].el.El();
	    fun->argc = yyvsp[-2].ival; fun->GetArgDefs(); ;
    break;}
case 106:
#line 659 "css_parse.y"
{
	    cssScriptFun* fun = (cssScriptFun*)yyvsp[-3].el.El();
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[0].ival+1); yyval.ival = yyvsp[-1].ival-1;
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    cssCodeBlock* bra_blk = (cssCodeBlock*)(cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->inst.El());
	    cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->SetInst(yyvsp[-3].el); /* replace bra_blk with fun */
	    cssMisc::cur_top->RemoveVar(bra_blk);	/* get rid of the bra_blk */
	    cssMisc::cur_top->SetPush(fun->fun); /* this is the one we want to push */
	    fun->Define(cssMisc::ConstExpr); ;
    break;}
case 107:
#line 671 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    yyval.ival = cssMisc::cur_top->Prog()->size; ;
    break;}
case 108:
#line 679 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-4].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[0].ival+1);	yyval.ival = yyvsp[-1].ival-1;
	    cssScriptFun* fun = (cssScriptFun*)yyvsp[-3].el.El();
	    fun->SetRetvType(yyvsp[-4].el.El());
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    cssCodeBlock* bra_blk = (cssCodeBlock*)(cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->inst.El());
	    cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->SetInst(yyvsp[-3].el); /* replace bra with existing one */
	    cssMisc::cur_top->RemoveVar(bra_blk);	/* get rid of the bra_blk */
	    fun->fun->Reset();	/* reset it for new defn */
	    cssMisc::cur_top->SetPush(fun->fun); /* push this one */
	    fun->Define(cssMisc::ConstExpr); ;
    break;}
case 109:
#line 697 "css_parse.y"
{
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)yyvsp[-3].el.El();
	    cssClassType* cls = cssMisc::cur_class;
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    fun->Define(cssMisc::ConstExpr);
	    cssMisc::cur_method = fun; /* this is now the current method */
	    cssElPtr fun_ptr;  fun_ptr.SetNVirtMethod(cls, cls->methods->GetIndex(fun));
	    css_progdx nxt_ln = Code1(fun_ptr); /* code it so it shows up in a listing.. */
	    cssMisc::cur_top->SetPush(fun->fun); /* put it on the stack.. */
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(nxt_ln+1); yyval.ival = yyvsp[-1].ival-1; ;
    break;}
case 110:
#line 710 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssEl* nm = cssMisc::cur_top->Prog()->Stack()->Pop();  /* get rid of name */
	    cssScriptFun* fun = new cssScriptFun((const char*)*nm);
	    fun->SetRetvType(yyvsp[-1].el.El()); /* preserve type info for later if nec */
	    if(yyvsp[-1].el.El()->tmp_str == "extern") yyval.el = cssMisc::Externs.PushUniqNameOld(fun);
	    else yyval.el = cssMisc::cur_top->AddStatic(fun);
            cssEl::Done(nm); ;
    break;}
case 111:
#line 723 "css_parse.y"
{
            cssMisc::cur_scope = NULL;
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-2].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    if((yyvsp[-1].el.El())->GetType() != cssEl::T_ClassType) {
	      yyerror("attempt to define member function in non-class type");
	      return cssProg::YY_Err; }
	    cssClassType* cls = (cssClassType*)yyvsp[-1].el.El();
	    cssMisc::cur_class = cls; /* this is now the current class */
	    cssEl* nm = cssMisc::cur_top->Prog()->Stack()->Pop();  /* get rid of name */
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)cls->GetMethodFmName((const char*)*nm);
	    if(fun == &cssMisc::Void) {
	      yyerror("member function not declared in class type");
	      return cssProg::YY_Err; }
            if(fun->GetType() == cssEl::T_MbrCFun) {
              yyerror("member function is hardcoded");
              return cssProg::YY_Err; }
	    if((fun->retv_type != yyvsp[-2].el.El())
	       && !(fun->retv_type->IsRef() || fun->retv_type->GetType() == cssEl::T_Ptr))
	      cssMisc::Warning(NULL, "return type does not match that of declaration");
	    fun->SetRetvType(yyvsp[-2].el.El());
	    yyval.el.SetDirect(fun);  cssEl::Done(nm); ;
    break;}
case 112:
#line 749 "css_parse.y"
{
            cssMisc::cur_scope = NULL;
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    if((yyvsp[-1].el.El())->GetType() != cssEl::T_ClassType) {
	      yyerror("attempt to define constructor member function in non-class type");
	      return cssProg::YY_Err; }
	    cssClassType* cls = (cssClassType*)yyvsp[-1].el.El();
	    cssMisc::cur_class = cls; /* this is now the current class */
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)cls->GetMethodFmName((const char*)cls->name);
	    if(fun == &cssMisc::Void) {
	      yyerror("constructor member function not declared in class type");
	      return cssProg::YY_Err; }
            if(fun->GetType() == cssEl::T_MbrCFun) {
              yyerror("member function is hardcoded");
              return cssProg::YY_Err; }
	    yyval.el.SetDirect(fun); ;
    break;}
case 113:
#line 770 "css_parse.y"
{
            cssMisc::cur_scope = NULL;
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-2].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    if((yyvsp[-2].el.El())->GetType() != cssEl::T_ClassType) {
	      yyerror("attempt to define destructor member function in non-class type");
	      return cssProg::YY_Err; }
	    cssClassType* cls = (cssClassType*)yyvsp[-2].el.El();
	    cssMisc::cur_class = cls; /* this is now the current class */
	    String nm = "~"; nm += cls->name;
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)cls->GetMethodFmName((const char*)nm);
	    if(fun == &cssMisc::Void) {
	      yyerror("destructor member function not declared in class type");
              return cssProg::YY_Err; }
            if(fun->GetType() == cssEl::T_MbrCFun) {
              yyerror("member function is hardcoded");
	      return cssProg::YY_Err; }
	    yyval.el.SetDirect(fun); ;
    break;}
case 114:
#line 792 "css_parse.y"
{ yyval.ival = 0; ;
    break;}
case 115:
#line 793 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival; ;
    break;}
case 116:
#line 794 "css_parse.y"
{ yyval.ival = 0; ;
    break;}
case 117:
#line 795 "css_parse.y"
{ yyval.ival = yyvsp[-2].ival; ;
    break;}
case 118:
#line 798 "css_parse.y"
{ yyval.ival = 1; ;
    break;}
case 119:
#line 799 "css_parse.y"
{ yyval.ival = yyvsp[-2].ival + 1; ;
    break;}
case 120:
#line 802 "css_parse.y"
{ cssMisc::parsing_args = false; ;
    break;}
case 121:
#line 803 "css_parse.y"
{
	    cssMisc::parsing_args = false;
	    cssMisc::default_args.Push(yyvsp[0].el.El()); ;
    break;}
case 122:
#line 809 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::parsing_args = true;
	    yyval.el = cssMisc::ConstExpr->Stack()->Push(new cssString(yyvsp[0].nm));
	    (yyvsp[-1].el.El())->MakeToken(cssMisc::ConstExpr); ;
    break;}
case 123:
#line 817 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::parsing_args = true;
	    yyval.el = cssMisc::ConstExpr->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    (yyvsp[-1].el.El())->MakeToken(cssMisc::ConstExpr); ;
    break;}
case 125:
#line 828 "css_parse.y"
{
	    if((yyvsp[-2].ival < 0) && (yyvsp[0].ival < 0)) yyval.ival = -1;
	    else if((yyvsp[-2].ival >= 0) && (yyvsp[0].ival < 0)) yyval.ival = yyvsp[-2].ival;
	    else if((yyvsp[-2].ival < 0) && (yyvsp[0].ival >= 0)) yyval.ival = yyvsp[0].ival;
	    else yyval.ival = -1; ;
    break;}
case 126:
#line 835 "css_parse.y"
{
            (cssMisc::cur_type.El())->MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    if(tmp->ptr.El()->GetType() == cssEl::T_Class) {
	      yyval.ival = Code2(tmp->ptr, cssBI::constr); }
	    else yyval.ival = -1;
	    cssEl::Done(tmp); ;
    break;}
case 127:
#line 844 "css_parse.y"
{ yyvsp[0].el.El()->tmp_str = ""; ;
    break;}
case 128:
#line 845 "css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "extern"; yyval.el = yyvsp[0].el; ;
    break;}
case 129:
#line 846 "css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "static"; yyval.el = yyvsp[0].el; ;
    break;}
case 130:
#line 847 "css_parse.y"
{ /* use const expr prog to code stuff */
	  yyvsp[0].el.El()->tmp_str = "const"; yyval.el = yyvsp[0].el; cssMisc::CodeConstExpr(); ;
    break;}
case 131:
#line 849 "css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "virtual"; yyval.el = yyvsp[0].el; ;
    break;}
case 132:
#line 850 "css_parse.y"
{ yyvsp[0].el.El()->tmp_str = ""; yyval.el = yyvsp[0].el; ;
    break;}
case 133:
#line 851 "css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "virtual"; yyval.el = yyvsp[0].el; ;
    break;}
case 134:
#line 852 "css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "virtual"; yyval.el = yyvsp[0].el; ;
    break;}
case 135:
#line 855 "css_parse.y"
{ yyval.el = yyvsp[0].el; cssMisc::cur_type = yyval.el; ;
    break;}
case 136:
#line 856 "css_parse.y"
{
	  if((yyvsp[-1].el.El()->GetParse() != CSS_PTR) || (yyvsp[0].ival >= 2)) {
	    yyval.el = cssMisc::cur_top->AddPtrType(yyvsp[-1].el.El()); cssMisc::cur_type = yyval.el;
	  }
	  else {
	    yyval.el = yyvsp[-1].el; cssMisc::cur_type = yyval.el; } ;
    break;}
case 137:
#line 862 "css_parse.y"
{
	  yyval.el = cssMisc::cur_top->AddRefType(yyvsp[-1].el.El()); cssMisc::cur_type = yyval.el; ;
    break;}
case 138:
#line 864 "css_parse.y"
{
	  if((yyvsp[-2].el.El()->GetParse() != CSS_PTR) || (yyvsp[-1].ival >= 2)) {
            cssElPtr npt = cssMisc::cur_top->AddPtrType(yyvsp[-2].el.El());
            yyval.el = cssMisc::cur_top->AddRefType(npt.El()); cssMisc::cur_type = yyval.el; }
	  else {
	    yyval.el = cssMisc::cur_top->AddRefType(yyvsp[-2].el.El()); cssMisc::cur_type = yyval.el; } ;
    break;}
case 141:
#line 874 "css_parse.y"
{
          cssEl* itm;
          if(yyvsp[-1].el.El()->GetParse() != CSS_PTR)
	    itm = yyvsp[-1].el.El()->GetScoped((const char*)yyvsp[0].el.El()->name);
	  else
	    itm = yyvsp[0].el.El();
	  if(itm != &cssMisc::Void)  yyval.el.SetDirect(itm);
	  else			yyval.el.Reset();
	  cssMisc::cur_type = yyval.el; cssMisc::cur_scope = NULL; ;
    break;}
case 142:
#line 885 "css_parse.y"
{
           if(yyvsp[-1].el.El()->GetType() != cssEl::T_ClassType) {
	     yyerror("scoping of non-class type");
	     return cssProg::YY_Err; }
           cssMisc::cur_scope = yyvsp[-1].el.El(); ;
    break;}
case 143:
#line 890 "css_parse.y"
{
           cssMisc::cur_scope = yyvsp[-1].el.El(); ;
    break;}
case 146:
#line 898 "css_parse.y"
{ yyval.ival = 1; ;
    break;}
case 147:
#line 899 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival + 1; ;
    break;}
case 148:
#line 902 "css_parse.y"
{ cssMisc::cur_top->Prog()->lastif = -1; ;
    break;}
case 152:
#line 910 "css_parse.y"
{ Code1(cssBI::pop); ;
    break;}
case 155:
#line 913 "css_parse.y"
{ Code1(yyvsp[-2].el); yyval.ival = yyvsp[-1].ival; ;
    break;}
case 156:
#line 914 "css_parse.y"
{ Code1(yyvsp[-3].el); yyval.ival = yyvsp[-2].ival; ;
    break;}
case 157:
#line 915 "css_parse.y"
{ yyval.ival = Code1(yyvsp[-1].el); ;
    break;}
case 158:
#line 916 "css_parse.y"
{ yyval.ival = Code1(yyvsp[-1].el); ;
    break;}
case 162:
#line 922 "css_parse.y"
{
	    yyval.ival = cssMisc::cur_top->Prog()->size; // next instr is 'it'
  	    if(cssMisc::cur_top->Prog()->name != cssSwitchBlock_Name) {
	      yyerror("case statement not in a switch block");
	      return cssProg::YY_Err;
	    }
	    cssElPtr aryptr = cssMisc::cur_top->Prog()->literals.FindName(cssSwitchJump_Name);
	    cssArray* val_ary = (cssArray*)aryptr.El();
	    val_ary->items->Push(new cssInt(yyval.ival, (const char*)*(yyvsp[-1].el.El()))); ;
    break;}
case 163:
#line 931 "css_parse.y"
{
	    yyval.ival = cssMisc::cur_top->Prog()->size; // next instr is 'it'
  	    if(cssMisc::cur_top->Prog()->name != cssSwitchBlock_Name) {
	      yyerror("case statement not in a switch block");
	      return cssProg::YY_Err;
	    }
	    cssElPtr aryptr = cssMisc::cur_top->Prog()->literals.FindName(cssSwitchJump_Name);
	    cssArray* val_ary = (cssArray*)aryptr.El();
	    val_ary->items->Push(new cssInt(yyval.ival, cssSwitchDefault_Name)); ;
    break;}
case 167:
#line 949 "css_parse.y"
{
            yyval.ival = yyvsp[-5].ival;
	    /* value to switch on is already on stack */
            cssCodeBlock* jmp_blk = (cssCodeBlock*)(cssMisc::cur_top->Prog()->owner_blk);
	    /* make the jump-table address array: ints whose name is val, val is adr */
	    jmp_blk->code->Stack()->Push(new cssString(cssSwitchJump_Name));
	    jmp_blk->code->Stack()->Push(new cssInt(1)); /* type of ary element */
	    jmp_blk->code->Stack()->Push(new cssInt(1)); /* number of dimensions */
  	    cssMisc::VoidArray.tmp_str = "literal";
	    cssMisc::VoidArray.MakeToken(jmp_blk->code); /* make the array */
	    cssMisc::VoidArray.tmp_str = "";
	    cssRef* aryptr = (cssRef*) jmp_blk->code->Stack()->Pop();
	    ((cssArray*)aryptr->ptr.El())->items->DelPop(); /* get rid of first el */
	    Code1(cssBI::switch_jump); /* this gets expr as arg! */
	    cssEl::Done(aryptr); ;
    break;}
case 168:
#line 966 "css_parse.y"
{ 
            cssCodeBlock* blk = new cssCodeBlock(cssSwitchBlock_Name);
	    blk->loop_type = cssCodeBlock::SWITCH;
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    cssMisc::cur_top->AddStatic(blk);
	    yyval.ival = Code1(blk); cssMisc::cur_top->Push(blk->code); ;
    break;}
case 169:
#line 975 "css_parse.y"
{
	   cssProg* cp = cssMisc::cur_top->Prog();
	   if(cp->owner_blk == NULL) {
	     yyerror("for loop current prog should have owner_blk, doesnt!");
	   }
	   cssMisc::cur_top->Pop(); /* pop the for_incr block */
	   Code1(cssBI::pop);	/* and code for getting rid of cond val */
	   cp = cssMisc::cur_top->Prog(); /* current guy */
	   cssInst* for_incr = cp->insts[yyvsp[-2].ival];
	   cssInst* for_loop_stmt = cp->insts[yyvsp[-1].ival];
	   /* swap */
	   cp->insts[yyvsp[-2].ival] = for_loop_stmt;
	   cp->insts[yyvsp[-1].ival] = for_incr;
	   cssMisc::cur_top->Pop(); /* pop the whole for loop! */
	   yyval.ival = yyvsp[-5].ival; ;
    break;}
case 170:
#line 990 "css_parse.y"
{
	   cssProg* cp = cssMisc::cur_top->Prog();
	   if(cp->owner_blk == NULL) {
	     yyerror("for loop current prog should have owner_blk, doesnt!");
	   }
	   cssMisc::cur_top->Pop(); /* pop the for_incr block */
	   Code1(cssBI::pop);	/* and code for getting rid of cond val */
	   /* swap the order of these: $6 = for_end_paren = stmt block,  $5 = for_incr = incr block */
	   cp = cssMisc::cur_top->Prog(); /* current guy */
	   cssInst* for_incr = cp->insts[yyvsp[-2].ival];
	   cssInst* for_loop_stmt = cp->insts[yyvsp[-1].ival];
	   /* swap */
	   cp->insts[yyvsp[-2].ival] = for_loop_stmt;
	   cp->insts[yyvsp[-1].ival] = for_incr;
	   /* check if stmt is a new block: if so, then don't pop this guy */
	   
	   cssMisc::cur_top->Pop(); /* pop the whole for loop! */
	   yyval.ival = yyvsp[-6].ival; ;
    break;}
case 171:
#line 1013 "css_parse.y"
{ /* for loop contained within own block */
            cssCodeBlock* blk = new cssCodeBlock(cssForLoop_Name);
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    cssMisc::cur_top->AddStatic(blk);
	    yyval.ival = Code1(blk); cssMisc::cur_top->Push(blk->code); ;
    break;}
case 174:
#line 1025 "css_parse.y"
{
            cssCodeBlock* blk = new cssCodeBlock(cssCondBlock_Name);
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    blk->action = cssCodeBlock::PUSH_RVAL; /* start conditional */
	    cssMisc::cur_top->AddStatic(blk);
	    yyval.ival = Code1(blk); cssMisc::cur_top->Push(blk->code); ;
    break;}
case 177:
#line 1037 "css_parse.y"
{
              cssMisc::cur_top->Pop(); /* get rid of cond, push incr */
	      cssMisc::cur_top->ResetParseFlags();
	      cssCodeBlock* blk = new cssCodeBlock(cssForIncr_Name);
	      blk->owner_prog = cssMisc::cur_top->Prog();
  	      blk->action = cssCodeBlock::IF_TRUE; /* start block of if-true */
	      blk->loop_back = 3; /* go back 3 to the cond */
	      cssMisc::cur_top->AddStatic(blk);
	      yyval.ival = Code1(blk); cssMisc::cur_top->Push(blk->code); ;
    break;}
case 178:
#line 1048 "css_parse.y"
{
              cssMisc::cur_top->Pop(); /* get rid of incr */
	      cssCodeBlock* blk = new cssCodeBlock(cssForLoopStmt_Name);
	      blk->owner_prog = cssMisc::cur_top->Prog();
  	      blk->action = cssCodeBlock::IF_TRUE; /* start block of if-true */
	      blk->loop_type = cssCodeBlock::FOR;
	      cssMisc::cur_top->AddStatic(blk);
	      yyval.ival = Code1(blk); cssMisc::cur_top->Push(blk->code); ;
    break;}
case 180:
#line 1062 "css_parse.y"
{ 
            cssCodeBlock* blk = new cssCodeBlock(cssDoLoop_Name);
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    blk->loop_type = cssCodeBlock::DO;
	    cssMisc::cur_top->AddStatic(blk); /* while is all inside this do! */
	    yyval.ival = Code1(blk); cssMisc::cur_top->Push(blk->code); ;
    break;}
case 181:
#line 1072 "css_parse.y"
{
            cssProg* prv_prg = cssMisc::cur_top->PrvProg();
	    if((prv_prg != NULL) && (prv_prg->owner_blk != NULL)
	       && (prv_prg->owner_blk->loop_type == cssCodeBlock::DO)) {
	      cssMisc::cur_top->Pop(); /* pop the if_true block from cond
					  null and should be removed (todo:!) */	      
	      yyval.ival = Code1(cssBI::doloop); /* this is inside of the do block */
	      cssMisc::cur_top->Pop(); /* pop the do_loop from do */
	      
	    }
	    else {
	      cssProg* cp = cssMisc::cur_top->Prog();
	      if(cp->owner_blk == NULL) {
		yyerror("while loop current prog should have owner_blk, doesnt!");
	      }
	      else {
		cp->owner_blk->loop_back = 2; /* jump back 2 steps to cond if loop was run! */
		cp->owner_blk->loop_type = cssCodeBlock::WHILE;
	      }	    
	      cssMisc::cur_top->Pop(); /* pop the if_true block */
	      Code1(cssBI::pop);	/* and code for getting rid of cond val */
	      yyval.ival = yyvsp[-1].ival;
	    } ;
    break;}
case 182:
#line 1095 "css_parse.y"
{
	  cssProg* cp = cssMisc::cur_top->Prog();
	  if(cp->owner_blk == NULL) {
	    yyerror("while loop current prog should have owner_blk, doesnt!");
	  }
	  else {
	    cp->owner_blk->loop_back = 2; /* jump back 2 steps to cond if loop was run! */
	    cp->owner_blk->loop_type = cssCodeBlock::WHILE;
	  }	    
	  cssMisc::cur_top->Pop(); /* pop the if_true block */
	  Code1(cssBI::pop);	/* and code for getting rid of cond val */
	  yyval.ival = yyvsp[-1].ival; ;
    break;}
case 183:
#line 1109 "css_parse.y"
{ ;
    break;}
case 184:
#line 1112 "css_parse.y"
{
          cssMisc::cur_top->Pop(); /* pop the if_true block */
          yyval.ival = yyvsp[-1].ival; ;
    break;}
case 185:
#line 1115 "css_parse.y"
{
	  cssMisc::cur_top->Pop(); /* pop the if_true block */
	  yyval.ival = yyvsp[-1].ival; ;
    break;}
case 186:
#line 1118 "css_parse.y"
{
	  cssMisc::cur_top->Pop(); /* pop the if_false block */
	  /* now check for other else blocks that need popping! */
	  while((cssMisc::cur_top->Prog()->owner_blk != NULL) &&
		(cssMisc::cur_top->Prog()->owner_blk->action == cssCodeBlock::ELSE)) {
	    cssMisc::cur_top->Pop(); } /* pop residual elses! */
	  yyval.ival = yyvsp[-1].ival;  ;
    break;}
case 187:
#line 1125 "css_parse.y"
{ /* do not pop the ifstmt here!! */
	  yyval.ival = yyvsp[-1].ival; ;
    break;}
case 188:
#line 1129 "css_parse.y"
{
          cssMisc::cur_top->Prog()->lastif = cssMisc::cur_top->Prog()->size; ;
    break;}
case 189:
#line 1133 "css_parse.y"
{
  	    css_progdx tmp = cssMisc::cur_top->Prog()->lastif;
  	    if(tmp < 0) {
	      yyerror("else without matching if");
	      return cssProg::YY_Err;
	    }
	    cssMisc::cur_top->Prog()->lastif = -1; /* reset it */
            cssCodeBlock* blk = new cssCodeBlock(cssElseBlock_Name);
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    blk->action = cssCodeBlock::ELSE; /* start block of else */
	    cssMisc::cur_top->AddStatic(blk);
	    yyval.ival = Code2(blk, cssBI::pop); /* pop after else to get rid of prev if cond */
	    cssMisc::cur_top->Push(blk->code); ;
    break;}
case 190:
#line 1148 "css_parse.y"
{ 
            cssCodeBlock* blk = new cssCodeBlock(cssIfTrueBlock_Name);
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    blk->action = cssCodeBlock::IF_TRUE; /* start block of if-true */
	    cssMisc::cur_top->AddStatic(blk);
	    Code1(blk); cssMisc::cur_top->Push(blk->code); yyval.ival = yyvsp[-2].ival; ;
    break;}
case 191:
#line 1156 "css_parse.y"
{
            cssCodeBlock* blk = new cssCodeBlock(cssCondBlock_Name);
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    blk->action = cssCodeBlock::PUSH_RVAL; /* start conditional */
	    cssMisc::cur_top->AddStatic(blk);
	    yyval.ival = Code1(blk); cssMisc::cur_top->Push(blk->code); ;
    break;}
case 192:
#line 1164 "css_parse.y"
{
            cssMisc::cur_top->Pop(); ;
    break;}
case 193:
#line 1168 "css_parse.y"
{
            cssCodeBlock* blk = new cssCodeBlock(cssBlock_Name);
	    blk->owner_prog = cssMisc::cur_top->Prog();
	    cssMisc::cur_top->AddStatic(blk);
	    yyval.ival = Code1(blk); cssMisc::cur_top->SetPush(blk->code); ;
    break;}
case 194:
#line 1175 "css_parse.y"
{  ;
    break;}
case 195:
#line 1178 "css_parse.y"
{
            cssMisc::cur_top->SetPop();
	    cssScriptFun* sfun = cssMisc::cur_top->Prog()->owner_fun;
	    if((sfun != NULL) && (sfun->GetType() == cssEl::T_MbrScriptFun)) {
	      cssMisc::cur_class = NULL; /* get rid of current class pointer.. */
	      cssMisc::cur_method = NULL; } /* and current method pointer */
	  ;
    break;}
case 196:
#line 1187 "css_parse.y"
{ yyval.ival = Code1(yyvsp[0].el); ;
    break;}
case 199:
#line 1193 "css_parse.y"
{ Code1(cssBI::asgn); ;
    break;}
case 200:
#line 1194 "css_parse.y"
{
	    int c; String inp;
	    while(((c = cssMisc::cur_top->Prog()->Getc()) != '}') && (c != EOF)) inp += (char)c;
	    cssSStream* ss = new cssSStream();
	    cssMisc::cur_top->AddLiteral(ss);
 	    stringstream* sss = (stringstream*)ss->GetVoidPtr();
	    *sss << inp;
	    sss->seekg(0, ios::beg);
	    Code3(ss, cssBI::arg_swap, cssBI::rshift);
 	    Code1(cssBI::sstream_rewind); /* rewind stream for next use.. */ ;
    break;}
case 201:
#line 1204 "css_parse.y"
{ Code1(cssBI::asgn_add); ;
    break;}
case 202:
#line 1205 "css_parse.y"
{ Code1(cssBI::asgn_sub); ;
    break;}
case 203:
#line 1206 "css_parse.y"
{ Code1(cssBI::asgn_mult); ;
    break;}
case 204:
#line 1207 "css_parse.y"
{ Code1(cssBI::asgn_div); ;
    break;}
case 205:
#line 1208 "css_parse.y"
{ Code1(cssBI::asgn_mod); ;
    break;}
case 206:
#line 1209 "css_parse.y"
{ Code1(cssBI::asgn_lshift); ;
    break;}
case 207:
#line 1210 "css_parse.y"
{ Code1(cssBI::asgn_rshift); ;
    break;}
case 208:
#line 1211 "css_parse.y"
{ Code1(cssBI::asgn_and); ;
    break;}
case 209:
#line 1212 "css_parse.y"
{ Code1(cssBI::asgn_xor); ;
    break;}
case 210:
#line 1213 "css_parse.y"
{ Code1(cssBI::asgn_or); ;
    break;}
case 211:
#line 1214 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival; Code2(yyvsp[0].el,yyvsp[-2].el); ;
    break;}
case 212:
#line 1215 "css_parse.y"
{ yyval.ival = yyvsp[-3].ival; Code2(yyvsp[-2].el,yyvsp[-4].el); ;
    break;}
case 213:
#line 1216 "css_parse.y"
{
	  yyval.ival = yyvsp[-2].ival; Code2(yyvsp[-1].el,yyvsp[-3].el); ;
    break;}
case 214:
#line 1218 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival; Code1(yyvsp[-2].el); ;
    break;}
case 215:
#line 1219 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival; Code1(yyvsp[-4].el); ;
    break;}
case 216:
#line 1220 "css_parse.y"
{ Code1(cssBI::lor); ;
    break;}
case 217:
#line 1221 "css_parse.y"
{ Code1(cssBI::land); ;
    break;}
case 218:
#line 1222 "css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::addr_of); ;
    break;}
case 219:
#line 1223 "css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::de_ptr); ;
    break;}
case 220:
#line 1224 "css_parse.y"
{ Code1(cssBI::gt); ;
    break;}
case 221:
#line 1225 "css_parse.y"
{ Code1(cssBI::ge); ;
    break;}
case 222:
#line 1226 "css_parse.y"
{ Code1(cssBI::lt); ;
    break;}
case 223:
#line 1227 "css_parse.y"
{ Code1(cssBI::le); ;
    break;}
case 224:
#line 1228 "css_parse.y"
{ Code1(cssBI::eq); ;
    break;}
case 225:
#line 1229 "css_parse.y"
{ Code1(cssBI::ne); ;
    break;}
case 226:
#line 1230 "css_parse.y"
{ Code1(cssBI::cond); ;
    break;}
case 227:
#line 1231 "css_parse.y"
{ Code1(cssBI::add); ;
    break;}
case 228:
#line 1232 "css_parse.y"
{ Code1(cssBI::sub); ;
    break;}
case 229:
#line 1233 "css_parse.y"
{ Code1(cssBI::mul); ;
    break;}
case 230:
#line 1234 "css_parse.y"
{ Code1(cssBI::div); ;
    break;}
case 231:
#line 1235 "css_parse.y"
{ Code1(cssBI::modulo); ;
    break;}
case 232:
#line 1236 "css_parse.y"
{ Code1(cssBI::lshift); ;
    break;}
case 233:
#line 1237 "css_parse.y"
{ Code1(cssBI::rshift); ;
    break;}
case 234:
#line 1238 "css_parse.y"
{ Code1(cssBI::bit_and); ;
    break;}
case 235:
#line 1239 "css_parse.y"
{ Code1(cssBI::bit_xor); ;
    break;}
case 236:
#line 1240 "css_parse.y"
{ Code1(cssBI::bit_or); ;
    break;}
case 237:
#line 1241 "css_parse.y"
{ Code1(cssBI::asgn_post_pp); ;
    break;}
case 238:
#line 1242 "css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::asgn_pre_pp); ;
    break;}
case 239:
#line 1243 "css_parse.y"
{ Code1(cssBI::asgn_post_mm); ;
    break;}
case 240:
#line 1244 "css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::asgn_pre_mm); ;
    break;}
case 241:
#line 1245 "css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::neg); ;
    break;}
case 242:
#line 1246 "css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::lnot); ;
    break;}
case 243:
#line 1247 "css_parse.y"
{ Code1(cssBI::de_array); ;
    break;}
case 244:
#line 1248 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-2].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    yyval.ival = yyvsp[0].ival; Code2(yyvsp[-2].el, cssBI::cast); ;
    break;}
case 245:
#line 1254 "css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
  	    yyval.ival = yyvsp[-1].ival; Code2(yyvsp[-3].el, cssBI::cast); ;
    break;}
case 247:
#line 1261 "css_parse.y"
{ yyval.ival = yyvsp[-1].ival; ;
    break;}
case 253:
#line 1275 "css_parse.y"
{ yyval.ival = Code2(cssBI::push_next, yyvsp[0].el); ;
    break;}
case 254:
#line 1276 "css_parse.y"
{ yyval.ival = yyvsp[-1].el_ival.ival; Code1(yyvsp[-1].el_ival.el); ;
    break;}
case 255:
#line 1277 "css_parse.y"
{ yyval.ival = yyvsp[-2].el_ival.ival; Code1(yyvsp[-2].el_ival.el);
	  if((yyvsp[-2].el_ival.el.El()->GetType() == cssEl::T_ElCFun) ||
	     /*	     ($1.el.El()->GetType() == cssEl::T_MbrCFun) || */
	     (yyvsp[-2].el_ival.el.El()->GetType() == cssEl::T_ScriptFun) ||
	     (yyvsp[-2].el_ival.el.El()->GetType() == cssEl::T_MbrScriptFun)) {
	    cssElFun* fun = (cssElFun*)yyvsp[-2].el_ival.el.El();
	    int max_args = fun->argc;  int min_args = (fun->argc - fun->arg_defs.size);
	    int act_args = yyvsp[-1].ival;
	    if(fun->GetType() == cssEl::T_MbrScriptFun) { max_args--; min_args--; }
	    if((fun->argc >= 0) && (act_args > max_args)) {
	      cssMisc::Warning(cssMisc::cur_top->Prog(), "Too many arguments for function:",fun->name,", should have at most:", String(max_args), "got:",String(act_args)); }
	    if((fun->argc >= 0) && (act_args < min_args)) {
              cssMisc::Warning(cssMisc::cur_top->Prog(), "Too few arguments for function:",fun->name,", should have at least:",String(min_args),"got:",String(act_args)); } } ;
    break;}
case 256:
#line 1292 "css_parse.y"
{
            yyval.el_ival.ival = Code1(cssMisc::VoidElPtr); /* an arg stop */
	    yyval.el_ival.el = yyvsp[-1].el;	/* save this pointer for later.. */
            if(yyvsp[-1].el.El()->GetType() == cssEl::T_MbrScriptFun)
	      Code1(cssBI::push_cur_this); /* push this as first arg.. */
	    else if(yyvsp[-1].el.El()->GetType() == cssEl::T_MbrCFun) {
	      /* only push this for MbrCFun that are builtins (Load, Save, or InheritsFrom) on a script class! */
	      cssMbrCFun* mbrfun = (cssMbrCFun*)yyvsp[-1].el.El();
	      if((mbrfun->funp == &cssClassType::InheritsFrom_stub) ||
		 (mbrfun->funp == &cssClassType::Load_stub) ||
		 (mbrfun->funp == &cssClassType::Save_stub))
		Code1(cssBI::push_cur_this); /* push this as first arg.. */
	    } ;
    break;}
case 257:
#line 1308 "css_parse.y"
{ Code2(yyvsp[0].el, cssBI::points_at);;
    break;}
case 258:
#line 1309 "css_parse.y"
{
	    int mbno = yyvsp[-2].el.El()->GetMemberNo((const char*)*(yyvsp[0].el.El()));
	    if(mbno < 0) { yyval.ival = Code3(yyvsp[-2].el, yyvsp[0].el, cssBI::points_at); }
	    else { cssElPtr tmpint = cssMisc::cur_top->AddLiteral(mbno);
		   yyval.ival = Code3(yyvsp[-2].el, tmpint, cssBI::points_at); } ;
    break;}
case 259:
#line 1317 "css_parse.y"
{ yyval.ival = Code3(cssBI::push_root, yyvsp[0].el, cssBI::points_at); ;
    break;}
case 260:
#line 1318 "css_parse.y"
{
	  cssMisc::cur_scope = NULL;
	    cssEl* scp = yyvsp[-1].el.El()->GetScoped((const char*)*(yyvsp[0].el.El()));
	    if(scp != &cssMisc::Void) {  yyval.ival = Code1(scp); }
	    else { yyval.ival = Code3(yyvsp[-1].el, yyvsp[0].el, cssBI::scoper); } ;
    break;}
case 261:
#line 1324 "css_parse.y"
{
	  /* argstop is put in by member_fun; member_fun skips over end jump, 
	     uses it to find member_call*/
	  yyval.ival = yyvsp[-2].el_ival.ival;
	  cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(Code1(cssBI::member_call)); ;
    break;}
case 262:
#line 1329 "css_parse.y"
{
	  yyval.ival = yyvsp[-3].el_ival.ival;
	  cssMisc::cur_top->Prog()->insts[yyvsp[-2].ival-1]->SetLine(Code1(cssBI::member_call));
	  if((yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_ElCFun) ||
	     (yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_MbrCFun) ||
	     (yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_ScriptFun) ||
	     (yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_MbrScriptFun)) {
	    cssElFun* fun = (cssElFun*)yyvsp[-3].el_ival.el.El();
	    int max_args = fun->argc;  int min_args = (fun->argc - fun->arg_defs.size);
	    int act_args = yyvsp[-1].ival;
	    if(fun->GetType() == cssEl::T_MbrScriptFun) { max_args--; min_args--; }
	    if((fun->argc >= 0) && (act_args > max_args)) {
	      cssMisc::Warning(cssMisc::cur_top->Prog(), "Too many arguments for function:",fun->name,", should have at most:", String(max_args), "got:",String(act_args)); }
	    if((fun->argc >= 0) && (act_args < min_args)) {
              cssMisc::Warning(cssMisc::cur_top->Prog(), "Too few arguments for function:",fun->name,", should have at least:",String(min_args),"got:",String(act_args)); } } ;
    break;}
case 263:
#line 1346 "css_parse.y"
{ Code2(yyvsp[-1].el, cssBI::member_fun);
                                                  yyval.el_ival.ival = yyvsp[-3].ival; yyval.el_ival.el.Reset(); ;
    break;}
case 264:
#line 1348 "css_parse.y"
{ yyval.el_ival.el.Reset();
	    int mbno = yyvsp[-3].el.El()->GetMethodNo((const char*)*(yyvsp[-1].el.El()));
	    if(mbno < 0) { /* don't complain for pointers and references */
	      if(!yyvsp[-3].el.El()->MembersDynamic())
		cssMisc::Warning(NULL, "Member Function:",(const char*)*(yyvsp[-1].el.El()),
				 "not found in parent object, will be resolved dynamically");
	      yyval.el_ival.ival = Code3(yyvsp[-3].el, yyvsp[-1].el, cssBI::member_fun); }
	    else {
	      cssElPtr tmpint = cssMisc::cur_top->AddLiteral(mbno);
	      yyval.el_ival.ival = Code3(yyvsp[-3].el, tmpint, cssBI::member_fun);
	      cssEl* ths = yyvsp[-3].el.El();
	      if(ths->GetType() == cssEl::T_Ptr)
		ths = ((cssPtr*)ths)->el_type;
	      if((ths != NULL) && ((ths->GetType() == cssEl::T_Class) || (ths->GetType() == cssEl::T_ClassType))) {
		cssEl* fun = ths->GetMethodFmName((const char*)*(yyvsp[-1].el.El()));
		if(fun->GetType() != cssEl::T_MbrCFun)
		  yyval.el_ival.el.SetDirect(fun);
	      } } ;
    break;}
case 265:
#line 1366 "css_parse.y"
{
	    cssMisc::cur_scope = NULL; yyval.el_ival.el.Reset();
	    int mbno = yyvsp[-2].el.El()->GetMethodNo((const char*)*(yyvsp[-1].el.El()));
	    if(mbno < 0) { /* don't complain for pointers and references */
	      if(!yyvsp[-2].el.El()->MembersDynamic())
		cssMisc::Warning(NULL, "Member Function:",(const char*)*(yyvsp[-1].el.El()),
				 "not found in parent object, will be resolved dynamically");
	      yyval.el_ival.ival = Code3(yyvsp[-2].el, yyvsp[-1].el, cssBI::member_fun); }
	    else {
	      cssElPtr tmpint = cssMisc::cur_top->AddLiteral(mbno);
	      yyval.el_ival.ival = Code3(yyvsp[-2].el, tmpint, cssBI::member_fun);
	      cssEl* ths = yyvsp[-2].el.El();
	      if(ths->GetType() == cssEl::T_Ptr)
		ths = ((cssPtr*)ths)->el_type;
	      if((ths != NULL) && ((ths->GetType() == cssEl::T_Class) || (ths->GetType() == cssEl::T_ClassType))) {
		cssEl* fun = ths->GetMethodFmName((const char*)*(yyvsp[-1].el.El()));
		if(fun->GetType() != cssEl::T_MbrCFun)
		  yyval.el_ival.el.SetDirect(fun);
	      } } ;
    break;}
case 266:
#line 1390 "css_parse.y"
{
            yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].nm)); ;
    break;}
case 267:
#line 1394 "css_parse.y"
{
            yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].nm)); ;
    break;}
case 268:
#line 1396 "css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName())); ;
    break;}
case 269:
#line 1398 "css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName())); ;
    break;}
case 270:
#line 1400 "css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    if(cssMisc::cur_top->debug >= 1)
	    cssMisc::Warning(cssMisc::cur_top->Prog(), "Warning: hiding variable:", yyvsp[0].el.El()->PrintStr()); ;
    break;}
case 271:
#line 1404 "css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    if(cssMisc::cur_top->debug >= 1)
	    cssMisc::Warning(cssMisc::cur_top->Prog(), "Warning: hiding variable:", yyvsp[0].el.El()->PrintStr()); ;
    break;}
case 272:
#line 1408 "css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    if(cssMisc::cur_top->debug >= 1)
	    cssMisc::Warning(cssMisc::cur_top->Prog(), "Warning: hiding function:", yyvsp[0].el.El()->PrintStr()); ;
    break;}
case 275:
#line 1418 "css_parse.y"
{
   	    String tmpstr = String(yyvsp[0].nm);
            yyval.el = cssMisc::cur_top->AddLiteral(tmpstr); ;
    break;}
case 277:
#line 1422 "css_parse.y"
{ /* this is source of shift-reduce problems */
	    String tmpstr = String(yyvsp[0].el.El()->GetName());
	    yyval.el = cssMisc::cur_top->AddLiteral(tmpstr); ;
    break;}
case 283:
#line 1434 "css_parse.y"
{ yyval.ival = 1; ;
    break;}
case 284:
#line 1435 "css_parse.y"
{ yyval.ival = yyvsp[-2].ival + 1; ;
    break;}
case 286:
#line 1439 "css_parse.y"
{ yyval.ival = Code1(yyvsp[0].el); ;
    break;}
case 287:
#line 1442 "css_parse.y"
{ yyval.ival = 1; ;
    break;}
case 288:
#line 1443 "css_parse.y"
{ yyval.ival = yyvsp[-2].ival + 1; ;
    break;}
case 290:
#line 1447 "css_parse.y"
{ yyval.ival = Code1(yyvsp[0].el); ;
    break;}
case 291:
#line 1448 "css_parse.y"
{ 
	  String tmpstr = String(yyvsp[0].nm);
	  yyval.ival = Code1(cssMisc::cur_top->AddLiteral(tmpstr)); ;
    break;}
case 292:
#line 1451 "css_parse.y"
{ yyval.ival = Code1(yyvsp[0].el); ;
    break;}
case 293:
#line 1454 "css_parse.y"
{ yyval.ival = Code1(cssMisc::VoidElPtr); ;
    break;}
case 297:
#line 1462 "css_parse.y"
{ Code1(cssBI::pop); ;
    break;}
case 298:
#line 1465 "css_parse.y"
{ Code1(cssInst::Stop); yyval.ival = cssMisc::cur_top->Prog()->size; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1469 "css_parse.y"


	/* end of grammar */


void yyerror(char* s) { 	/* called for yacc syntax error */
  int i;

  ostream* fh = &cerr;
  if(cssMisc::cur_top->cmd_shell != NULL)
    fh = cssMisc::cur_top->cmd_shell->ferr;

  if(strcmp(s, "parse error") == 0) {
    String src = cssMisc::cur_top->Prog()->GetSrcLC(cssMisc::cur_top->Prog()->tok_line);
    src.gsub('\t',' ');		// replace tabs
    *(fh) << "Syntax Error, line " << cssMisc::cur_top->src_ln << ":\t"
      << src;
    *(fh) << "\t\t\t";
    for(i=0; i < cssMisc::cur_top->Prog()->tok_col; i++)
      *(fh) << " ";
    *(fh) << "^\n";
  }
  else {
    *(fh) << s << " line " << cssMisc::cur_top->src_ln << ":\t"
      << cssMisc::cur_top->Prog()->GetSrcLC(cssMisc::cur_top->Prog()->tok_line);
  }
  fh->flush();
}

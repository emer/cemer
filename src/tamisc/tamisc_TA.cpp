// Copyright, 1995-2005, Regents of the University of Colorado,
// Carnegie Mellon University, Princeton University.
//
// This file is part of TA/CSS
//
//   This library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//   
//   This library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.


// Copyright (C) 1995-2005 Regents of the University of Colorado,
// Carnegie Mellon University, Princeton University.
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "ta_css.h"
#include "ta_TA_type.h"
#include "fontspec.h"
#include "xform.h"
#include "tarandom.h"
#include "tdgeometry.h"
#include "aggregate.h"
#include "minmax.h"
#include "ta_data_defs.h"
#include "ta_data.h"
#include "colorscale.h"
#include "datatable.h"
#include "datagraph.h"
#include "fun_lookup.h"
#include "colorbar_qt.h"
#include "safeptr_so.h"
#include "t3node_so.h"
#include "t3viewer.h"
#include "colorbar_so.h"
#include "datatable_qtso.h"
#include "datagraph_so.h"
#include "datagraph_qtso.h"
#include "tamisc_maketa_defs.h"
#include "tamisc_stdef.h"
#include "tamisc_TA_type.h"
#include "tamisc_TA_inst.h"


// Types

TypeDef TA_FontSpec("FontSpec", " a specification of a font (for Unix - X logical font description)", 
	"", "INLINE ", "", sizeof(FontSpec), (void**)&TAI_FontSpec, 1, 0, 0,1);
TypeDef TA_const_FontSpec("const_FontSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_ViewLabel("ViewLabel", " contains a label in a view display", 
	"", "", "", sizeof(ViewLabel), (void**)&TAI_ViewLabel, 1, 0, 0,1);
TypeDef TA_const_FontSpec_ref("const_FontSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_ViewLabel_("taList_ViewLabel_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<ViewLabel>), (void**)&TAI_taList_ViewLabel_, 0, 0, 0,1);
TypeDef TA_const_ViewLabel("const_ViewLabel", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ViewLabel_ref("const_ViewLabel_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ViewLabel_List("ViewLabel_List", " list of ViewLabel objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(ViewLabel_List), (void**)&TAI_ViewLabel_List, 0, 0, 0,1);
TypeDef TA_const_Xform_ref("const_Xform_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ViewLabel_List("const_ViewLabel_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_taList_Xform_("taList_Xform_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<Xform>), (void**)&TAI_taList_Xform_, 0, 0, 0,1);
TypeDef TA_const_ViewLabel_List_ref("const_ViewLabel_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Xform_List("Xform_List", "", 
	"", "", "", sizeof(Xform_List), (void**)&TAI_Xform_List, 0, 0, 0,1);
TypeDef TA_const_Xform_List("const_Xform_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_RndSeed("RndSeed", " random seed support", 
	"", "NO_UPDATE_AFTER ", "", sizeof(RndSeed), (void**)&TAI_RndSeed, 0, 0, 0,1);
TypeDef TA_const_Xform_List_ref("const_Xform_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_RndSeed("const_RndSeed", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RndSeed_ref("const_RndSeed_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Random("Random", " Random Number Generation", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(Random), (void**)&TAI_Random, 0, 0, 0,1);
TypeDef TA_const_Random("const_Random", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Random_ref("const_Random_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TimeUsed("TimeUsed", " stores and computes time used for processing information", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(TimeUsed), (void**)&TAI_TimeUsed, 0, 0, 0,1);
TypeDef TA_TwoDCoord("TwoDCoord", " a value in 2D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(TwoDCoord), (void**)&TAI_TwoDCoord, 0, 0, 0,1);
TypeDef TA_const_TimeUsed("const_TimeUsed", 1, 0, 0, 0, 1, 0);
TypeDef TA_PosTwoDCoord("PosTwoDCoord", " positive-only value in 2D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(PosTwoDCoord), (void**)&TAI_PosTwoDCoord, 0, 0, 0,1);
TypeDef TA_const_TimeUsed_ref("const_TimeUsed_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TDCoord("TDCoord", " a value in 3D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(TDCoord), (void**)&TAI_TDCoord, 0, 0, 0,1);
TypeDef TA_PosTDCoord("PosTDCoord", " positive-only value in 3D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(PosTDCoord), (void**)&TAI_PosTDCoord, 0, 0, 0,1);
TypeDef TA_FloatTwoDCoord("FloatTwoDCoord", " a value in 2D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FloatTwoDCoord), (void**)&TAI_FloatTwoDCoord, 0, 0, 0,1);
TypeDef TA_FloatTDCoord("FloatTDCoord", " a real value in 3D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FloatTDCoord), (void**)&TAI_FloatTDCoord, 0, 0, 0,1);
TypeDef TA_const_TwoDCoord("const_TwoDCoord", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TwoDCoord_ref("const_TwoDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_FloatTwoDCoord("const_FloatTwoDCoord", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FloatTwoDCoord_ref("const_FloatTwoDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TwoDCoord_ref("TwoDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PosTwoDCoord("const_PosTwoDCoord", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PosTwoDCoord_ref("const_PosTwoDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PosTwoDCoord_ref("PosTwoDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_TDCoord("const_TDCoord", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TDCoord_ref("const_TDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_FloatTDCoord("const_FloatTDCoord", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FloatTDCoord_ref("const_FloatTDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TDCoord_ref("TDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PosTDCoord("const_PosTDCoord", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PosTDCoord_ref("const_PosTDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PosTDCoord_ref("PosTDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FloatTwoDCoord_ref("FloatTwoDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FloatTDCoord_ref("FloatTDCoord_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FloatRotation("FloatRotation", " 3-d rotation data, xyz specify the rotation axis", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FloatRotation), (void**)&TAI_FloatRotation, 0, 0, 0,1);
TypeDef TA_const_FloatRotation("const_FloatRotation", 1, 0, 0, 0, 1, 0);
TypeDef TA_FloatTransform("FloatTransform", " // 3-d transformation data; applied in order: s, r, t", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FloatTransform), (void**)&TAI_FloatTransform, 0, 0, 0,1);
TypeDef TA_const_FloatRotation_ref("const_FloatRotation_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_FloatTransform("const_FloatTransform", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FloatTransform_ref("const_FloatTransform_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ValIdx("ValIdx", " a float value and an index: very useful for sorting!", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(ValIdx), (void**)&TAI_ValIdx, 0, 0, 0,1);
TypeDef TA_taArray_ValIdx_("taArray_ValIdx_", " ", 
	"", "INSTANCE VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<ValIdx>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_ValIdx("const_ValIdx", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ValIdx_ref("const_ValIdx_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ValIdx_ref("ValIdx_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ValIdx_Array("ValIdx_Array", " ", 
	"", "INSTANCE NO_UPDATE_AFTER ", "", sizeof(ValIdx_Array), (void**)0, 0, 0, 0,1);
TypeDef TA_const_ValIdx_Array("const_ValIdx_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_CountParam("CountParam", " counting criteria params", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(CountParam), (void**)&TAI_CountParam, 0, 0, 0,1);
TypeDef TA_const_ValIdx_Array_ref("const_ValIdx_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_CountParam("const_CountParam", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_CountParam_ref("const_CountParam_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Aggregate("Aggregate", " Basic aggregation operations", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(Aggregate), (void**)&TAI_Aggregate, 0, 0, 0,1);
TypeDef TA_const_Aggregate("const_Aggregate", 1, 0, 0, 0, 1, 0);
TypeDef TA_SimpleMathSpec("SimpleMathSpec", " params for std kinds of simple math operators", 
	"", "NO_UPDATE_AFTER NO_TOKENS ", "", sizeof(SimpleMathSpec), (void**)&TAI_SimpleMathSpec, 0, 0, 0,1);
TypeDef TA_const_Aggregate_ref("const_Aggregate_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SimpleMathSpec("const_SimpleMathSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SimpleMathSpec_ref("const_SimpleMathSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MinMax("MinMax", " minimum-maximum values", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(MinMax), (void**)&TAI_MinMax, 0, 0, 0,1);
TypeDef TA_MinMax_ref("MinMax_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_MinMax("const_MinMax", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MinMax_ref("const_MinMax_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MinMaxRange("MinMaxRange", " min-max values plus scale and range ", 
	"", "INLINE ", "", sizeof(MinMaxRange), (void**)&TAI_MinMaxRange, 0, 0, 0,1);
TypeDef TA_const_MinMaxRange("const_MinMaxRange", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MinMaxRange_ref("const_MinMaxRange_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FixedMinMax("FixedMinMax", " minimum-maximum values with toggles for usage", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FixedMinMax), (void**)&TAI_FixedMinMax, 0, 0, 0,1);
TypeDef TA_const_FixedMinMax("const_FixedMinMax", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FixedMinMax_ref("const_FixedMinMax_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Modulo("Modulo", " modulo for things that happen periodically", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(Modulo), (void**)&TAI_Modulo, 0, 0, 0,1);
TypeDef TA_const_Modulo("const_Modulo", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Modulo_ref("const_Modulo_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MinMaxInt("MinMaxInt", " minimum-maximum values", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(MinMaxInt), (void**)&TAI_MinMaxInt, 0, 0, 0,1);
TypeDef TA_MinMaxInt_ref("MinMaxInt_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_MinMaxInt("const_MinMaxInt", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MinMaxInt_ref("const_MinMaxInt_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_IDataSource("IDataSource", " represents a source of data", 
	"", "NO_TOKENS ", "", sizeof(IDataSource), (void**)0, 0, 0, 0,1);
TypeDef TA_ISequencable("ISequencable", " interface exposed by entities that can be sequenced, particularly DataSources", 
	"", "NO_TOKENS ", "", sizeof(ISequencable), (void**)0, 0, 0, 0,1);
TypeDef TA_IDataSink("IDataSink", " represents a consumer of data", 
	"", "NO_TOKENS ", "", sizeof(IDataSink), (void**)0, 0, 0, 0,1);
TypeDef TA_DataTransferMode("DataTransferMode", "", 
	"", "", "", sizeof(int), (void**)&TAI_DataTransferMode, 0, 0, 0,1);
TypeDef TA_ptaMatrix_impl("ptaMatrix_impl", "", 
	"", "", "", sizeof(taMatrix_impl*), (void**)&TAI_ptaMatrix_impl, 0, 1, 0,1);
TypeDef TA_ISequencable_ptr("ISequencable_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ptaMatrix_impl_ref("ptaMatrix_impl_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_DataChannel("DataChannel", " a connection between a source and sink -- owned by the source list", 
	"", "NO_INSTANCE NO_TOKENS ", "", sizeof(DataChannel), (void**)0, 0, 0, 0,1);
TypeDef TA_DataConnector("DataConnector", " represents a connection between a single source channel and sink channel", 
	"", "", "", sizeof(DataConnector), (void**)&TAI_DataConnector, 0, 0, 0,1);
TypeDef TA_SinkChannel("SinkChannel", " forwards this file ", 
	"", "", "", sizeof(SinkChannel), (void**)&TAI_SinkChannel, 0, 0, 0,1);
TypeDef TA_SourceChannel("SourceChannel", " ", 
	"", "", "", sizeof(SourceChannel), (void**)&TAI_SourceChannel, 0, 0, 0,1);
TypeDef TA_SinkChannel_ptr("SinkChannel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SequenceMaster("SequenceMaster", " singleton class", 
	"", "", "", sizeof(SequenceMaster), (void**)0, 1, 0, 0,1);
TypeDef TA_SourceChannel_ptr("SourceChannel_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_DataConnector_ptr("DataConnector_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_DataConnector("const_DataConnector", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataConnector_ref("const_DataConnector_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_DataConnector_("taList_DataConnector_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<DataConnector>), (void**)&TAI_taList_DataConnector_, 0, 0, 0,1);
TypeDef TA_DataConnector_List("DataConnector_List", "  list of connectors, owned by the SourceChannel", 
	"", "", "", sizeof(DataConnector_List), (void**)&TAI_DataConnector_List, 0, 0, 0,1);
TypeDef TA_const_DataConnector_List("const_DataConnector_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataConnector_List_ref("const_DataConnector_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_DataChannel("const_DataChannel", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataChannel_ref("const_DataChannel_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_IDataSource_ptr("IDataSource_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_SourceChannel("const_SourceChannel", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SourceChannel_ref("const_SourceChannel_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_SourceChannel_("taList_SourceChannel_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<SourceChannel>), (void**)&TAI_taList_SourceChannel_, 0, 0, 0,1);
TypeDef TA_SourceChannel_List("SourceChannel_List", " ", 
	"", "", "", sizeof(SourceChannel_List), (void**)&TAI_SourceChannel_List, 0, 0, 0,1);
TypeDef TA_const_SourceChannel_List("const_SourceChannel_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_SourceChannel_List_ref("SourceChannel_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SourceChannel_List_ref("const_SourceChannel_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_IDataSink_ptr("IDataSink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_SinkChannel("const_SinkChannel", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SinkChannel_ref("const_SinkChannel_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_SinkChannel_("taList_SinkChannel_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<SinkChannel>), (void**)&TAI_taList_SinkChannel_, 0, 0, 0,1);
TypeDef TA_SinkChannel_List("SinkChannel_List", " ", 
	"", "", "", sizeof(SinkChannel_List), (void**)&TAI_SinkChannel_List, 0, 0, 0,1);
TypeDef TA_const_SinkChannel_List("const_SinkChannel_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_SinkChannel_List_ref("SinkChannel_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SinkChannel_List_ref("const_SinkChannel_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SequenceMaster_ref("SequenceMaster_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_int64_t_ref("int64_t_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_int64_t_ptr("int64_t_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_SequenceMaster("const_SequenceMaster", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SequenceMaster_ref("const_SequenceMaster_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_RGBA("RGBA", " Red Green Blue Alpha color specification", 
	"", "NO_TOKENS ", "", sizeof(RGBA), (void**)&TAI_RGBA, 0, 0, 0,1);
TypeDef TA_TAColor("TAColor", " Color", 
	"", "", "", sizeof(TAColor), (void**)&TAI_TAColor, 0, 0, 0,1);
TypeDef TA_ColorScaleSpec("ColorScaleSpec", " Color Spectrum Data", 
	"", "", "", sizeof(ColorScaleSpec), (void**)&TAI_ColorScaleSpec, 1, 0, 0,1);
TypeDef TA_ScaleRange("ScaleRange", " saves scale ranges for different variables viewed in netview", 
	"", "UAE_OWNER ", "", sizeof(ScaleRange), (void**)&TAI_ScaleRange, 0, 0, 0,1);
TypeDef TA_ColorScale("ColorScale", " defines a range of colors to code data values with", 
	"", "NO_UPDATE_AFTER ", "", sizeof(ColorScale), (void**)&TAI_ColorScale, 0, 0, 0,1);
TypeDef TA_const_RGBA("const_RGBA", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_RGBA_ref("const_RGBA_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_RGBA_("taList_RGBA_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<RGBA>), (void**)&TAI_taList_RGBA_, 0, 0, 0,1);
TypeDef TA_RGBA_List("RGBA_List", " list of RGBA objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(RGBA_List), (void**)&TAI_RGBA_List, 0, 0, 0,1);
TypeDef TA_const_RGBA_List("const_RGBA_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_RGBA_ptr("RGBA_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_RGBA_List_ref("const_RGBA_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_TAColor("const_TAColor", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TAColor_ref("const_TAColor_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_TAColor_("taList_TAColor_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<TAColor>), (void**)&TAI_taList_TAColor_, 0, 0, 0,1);
TypeDef TA_TAColor_List("TAColor_List", " list of TAColor objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(TAColor_List), (void**)&TAI_TAColor_List, 0, 0, 0,1);
TypeDef TA_const_TAColor_List("const_TAColor_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_TAColor_List_ptr("TAColor_List_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TAColor_List_ref("const_TAColor_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ColorScaleSpec("const_ColorScaleSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ColorScaleSpec_ref("const_ColorScaleSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taGroup_ColorScaleSpec_("taGroup_ColorScaleSpec_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup<ColorScaleSpec>), (void**)&TAI_taGroup_ColorScaleSpec_, 0, 0, 0,1);
TypeDef TA_ColorScaleSpec_MGroup("ColorScaleSpec_MGroup", "", 
	"", "", "", sizeof(ColorScaleSpec_MGroup), (void**)&TAI_ColorScaleSpec_MGroup, 0, 0, 0,1);
TypeDef TA_const_ColorScaleSpec_MGroup("const_ColorScaleSpec_MGroup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ColorScaleSpec_MGroup_ref("const_ColorScaleSpec_MGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ColorScale_ref("ColorScale_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ScaleRange("const_ScaleRange", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ScaleRange_ref("const_ScaleRange_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_ScaleRange_("taList_ScaleRange_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<ScaleRange>), (void**)&TAI_taList_ScaleRange_, 0, 0, 0,1);
TypeDef TA_ScaleRange_List("ScaleRange_List", " list of ScaleRange objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(ScaleRange_List), (void**)&TAI_ScaleRange_List, 0, 0, 0,1);
TypeDef TA_const_ScaleRange_List("const_ScaleRange_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_ColorScaleSpec_ptr("ColorScaleSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_ScaleRange_List_ref("const_ScaleRange_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iColor_ptr_ptr("const_iColor_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_ScaleRange_ptr("ScaleRange_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_ColorScale("const_ColorScale", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ColorScale_ref("const_ColorScale_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ClustNode("ClustNode", " node in clustering algorithm use one with leaves as children as a root node for cluster ", 
	"", "NO_TOKENS NO_UPDATE_AFTER ", "", sizeof(ClustNode), (void**)&TAI_ClustNode, 0, 0, 0,1);
TypeDef TA_DataItem("DataItem", " source of a piece of data", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(DataItem), (void**)&TAI_DataItem, 0, 0, 0,1);
TypeDef TA_taList_DataItem_("taList_DataItem_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<DataItem>), (void**)&TAI_taList_DataItem_, 0, 0, 0,1);
TypeDef TA_const_DataItem("const_DataItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataItem_ref("const_DataItem_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DataItem_List("DataItem_List", " list of DataItem objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataItem_List), (void**)&TAI_DataItem_List, 0, 0, 0,1);
TypeDef TA_DataItem_ptr("DataItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_DataItem_List("const_DataItem_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataItem_List_ref("const_DataItem_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_LogData("LogData", " log data is communicated with these objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(LogData), (void**)&TAI_LogData, 0, 0, 0,1);
TypeDef TA_const_LogData("const_LogData", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_LogData_ref("const_LogData_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Aggregate_ref("Aggregate_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_float_RArray("float_RArray", " float array with range, plus a lot of other mathematical functions", 
	"", "INSTANCE NO_UPDATE_AFTER ", "", sizeof(float_RArray), (void**)0, 0, 0, 0,1);
TypeDef TA_taArray_base_ptr("taArray_base_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_float_RArray_ref("float_RArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_float_RArray("const_float_RArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_float_RArray_ref("const_float_RArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DataArray_impl("DataArray_impl", " holds array data", 
	"", "NO_TOKENS NO_UPDATE_AFTER ", "", sizeof(DataArray_impl), (void**)&TAI_DataArray_impl, 0, 0, 0,1);
TypeDef TA_taGroup_DataArray_impl_("taGroup_DataArray_impl_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup<DataArray_impl>), (void**)&TAI_taGroup_DataArray_impl_, 0, 0, 0,1);
TypeDef TA_const_DataArray_impl("const_DataArray_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_LogData_ref("LogData_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_DataArray_impl_ref("const_DataArray_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DataArray_impl_ptr("DataArray_impl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_float_RArray_ptr("float_RArray_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_String_Array_ptr("String_Array_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_DataTable("DataTable", " table of data", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataTable), (void**)&TAI_DataTable, 0, 0, 0,1);
TypeDef TA_const_DataTable("const_DataTable", 1, 0, 0, 0, 1, 0);
TypeDef TA_DataTable_ptr("DataTable_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_DataTable_ref("const_DataTable_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DataArray("DataArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_DataArray_float_RArray_("DataArray_float_RArray_", "", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataArray<float_RArray>), (void**)&TAI_DataArray_float_RArray_, 0, 0, 0,1);
TypeDef TA_const_DataArray("const_DataArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DataArray_ref("const_DataArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_float_Data("float_Data", " floating point data", 
	"", "NO_UPDATE_AFTER ", "", sizeof(float_Data), (void**)&TAI_float_Data, 0, 0, 0,1);
TypeDef TA_const_float_Data("const_float_Data", 1, 0, 0, 0, 1, 0);
TypeDef TA_float_Data_ptr("float_Data_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_float_Data_ref("const_float_Data_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DString_Array("DString_Array", "", 
	"", "INSTANCE ", "", sizeof(DString_Array), (void**)0, 0, 0, 0,1);
TypeDef TA_DataArray_DString_Array_("DataArray_DString_Array_", "", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataArray<DString_Array>), (void**)&TAI_DataArray_DString_Array_, 0, 0, 0,1);
TypeDef TA_const_DString_Array("const_DString_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_String_Data("String_Data", "  string data", 
	"", "NO_UPDATE_AFTER ", "", sizeof(String_Data), (void**)&TAI_String_Data, 0, 0, 0,1);
TypeDef TA_const_DString_Array_ref("const_DString_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_String_Data("const_String_Data", 1, 0, 0, 0, 1, 0);
TypeDef TA_String_Data_ptr("String_Data_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_String_Data_ref("const_String_Data_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ClustNode_ptr("ClustNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ClustLink("ClustLink", " a link in the cluster tree with distance", 
	"", "NO_TOKENS NO_UPDATE_AFTER ", "", sizeof(ClustLink), (void**)&TAI_ClustLink, 0, 0, 0,1);
TypeDef TA_const_ClustLink("const_ClustLink", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ClustNode("const_ClustNode", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ClustLink_ref("const_ClustLink_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ClustNode_ref("const_ClustNode_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DA_ViewSpec("DA_ViewSpec", " base specification for the display of log data_array (DA)", 
	"", "", "", sizeof(DA_ViewSpec), (void**)&TAI_DA_ViewSpec, 1, 0, 0,1);
TypeDef TA_taGroup_DA_ViewSpec_("taGroup_DA_ViewSpec_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup<DA_ViewSpec>), (void**)&TAI_taGroup_DA_ViewSpec_, 0, 0, 0,1);
TypeDef TA_const_DA_ViewSpec("const_DA_ViewSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DA_ViewSpec_ref("const_DA_ViewSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DT_ViewSpec("DT_ViewSpec", " base specification for the display of log data_table (DT)", 
	"", "", "", sizeof(DT_ViewSpec), (void**)&TAI_DT_ViewSpec, 0, 0, 0,1);
TypeDef TA_const_DT_ViewSpec("const_DT_ViewSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_DA_TextViewSpec("DA_TextViewSpec", " data-array view spec for text-based display", 
	"", "", "", sizeof(DA_TextViewSpec), (void**)&TAI_DA_TextViewSpec, 1, 0, 0,1);
TypeDef TA_const_DT_ViewSpec_ref("const_DT_ViewSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_DA_TextViewSpec("const_DA_TextViewSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DA_TextViewSpec_ref("const_DA_TextViewSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DA_NetViewSpec("DA_NetViewSpec", " data-array view spec for netview based display", 
	"", "", "", sizeof(DA_NetViewSpec), (void**)&TAI_DA_NetViewSpec, 1, 0, 0,1);
TypeDef TA_const_DA_NetViewSpec("const_DA_NetViewSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DA_NetViewSpec_ref("const_DA_NetViewSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DA_GridViewSpec("DA_GridViewSpec", " information for display of a data array in a grid display", 
	"", "", "", sizeof(DA_GridViewSpec), (void**)&TAI_DA_GridViewSpec, 1, 0, 0,1);
TypeDef TA_const_DA_GridViewSpec("const_DA_GridViewSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_DA_GridViewSpec_ref("const_DA_GridViewSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_DT_GridViewSpec("DT_GridViewSpec", " information for display of a datatable in a grid display", 
	"", "", "", sizeof(DT_GridViewSpec), (void**)&TAI_DT_GridViewSpec, 0, 0, 0,1);
TypeDef TA_GraphColSpec("GraphColSpec", " data-array view spec for graph-based display", 
	"", "BUTROWS_1 ", "", sizeof(GraphColSpec), (void**)&TAI_GraphColSpec, 1, 0, 0,1);
TypeDef TA_const_DT_GridViewSpec("const_DT_GridViewSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_AxisSpec("AxisSpec", " specs of the axis on a graph, name is cloned from primary col", 
	"", "NO_INSTANCE ", "", sizeof(AxisSpec), (void**)0, 1, 0, 0,1);
TypeDef TA_const_DT_GridViewSpec_ref("const_DT_GridViewSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_XAxisSpec("XAxisSpec", " specs of the X axis on a graph, name is cloned from primary col", 
	"", "", "", sizeof(XAxisSpec), (void**)&TAI_XAxisSpec, 1, 0, 0,1);
TypeDef TA_YAxisSpec("YAxisSpec", " specs of the Y axis on a graph, name is cloned from primary col", 
	"", "", "", sizeof(YAxisSpec), (void**)&TAI_YAxisSpec, 1, 0, 0,1);
TypeDef TA_ZAxisSpec("ZAxisSpec", " specs of the Z axis on a graph, name is cloned from primary col", 
	"", "", "", sizeof(ZAxisSpec), (void**)&TAI_ZAxisSpec, 1, 0, 0,1);
TypeDef TA_GraphSpec("GraphSpec", " class Graph; controls display of datatable in a graph format", 
	"", "", "", sizeof(GraphSpec), (void**)&TAI_GraphSpec, 0, 0, 0,1);
TypeDef TA_GraphSpec_ptr("GraphSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_AxisSpec_ptr("AxisSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_GraphColSpec_ptr("GraphColSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GraphColSpec("const_GraphColSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphColSpec_ref("const_GraphColSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_AxisSpec("const_AxisSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_AxisSpec_ref("const_AxisSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_XAxisSpec("const_XAxisSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_XAxisSpec_ref("const_XAxisSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_YAxisSpec("const_YAxisSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_YAxisSpec_ref("const_YAxisSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_ZAxisSpec("const_ZAxisSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_ZAxisSpec_ref("const_ZAxisSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_YAxisSpec_("taList_YAxisSpec_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<YAxisSpec>), (void**)&TAI_taList_YAxisSpec_, 0, 0, 0,1);
TypeDef TA_YAxisSpec_ptr("YAxisSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_YAxisSpec_List("YAxisSpec_List", " ", 
	"", "", "", sizeof(YAxisSpec_List), (void**)&TAI_YAxisSpec_List, 0, 0, 0,1);
TypeDef TA_const_GraphColSpec_ptr("const_GraphColSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_GraphletSpec("GraphletSpec", " link list of axes, plus additional per-graphlet info", 
	"", "", "", sizeof(GraphletSpec), (void**)&TAI_GraphletSpec, 0, 0, 0,1);
TypeDef TA_int_ptr("int_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_YAxisSpec_List("const_YAxisSpec_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_YAxisSpec_List_ref("const_YAxisSpec_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_GraphletSpec("const_GraphletSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphletSpec_ref("const_GraphletSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_GraphletSpec_("taList_GraphletSpec_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<GraphletSpec>), (void**)&TAI_taList_GraphletSpec_, 0, 0, 0,1);
TypeDef TA_GraphletSpec_List("GraphletSpec_List", "", 
	"", "", "", sizeof(GraphletSpec_List), (void**)&TAI_GraphletSpec_List, 0, 0, 0,1);
TypeDef TA_const_GraphletSpec_List("const_GraphletSpec_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_ColorScale_ptr("ColorScale_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GraphletSpec_List_ref("const_GraphletSpec_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_GraphSpec("const_GraphSpec", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphSpec_ref("const_GraphSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_AxisSpec_ref("AxisSpec_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FunLookup("FunLookup", " function lookup for non-computable functions and optimization", 
	"", "INSTANCE ", "", sizeof(FunLookup), (void**)0, 0, 0, 0,1);
TypeDef TA_const_FunLookup("const_FunLookup", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FunLookup_ref("const_FunLookup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_float_ptr("float_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_FunLookupND("FunLookupND", " n-dimensional function lookup: function is defined for n_dims inputs and produces a corresponding interpolated output", 
	"", "", "", sizeof(FunLookupND), (void**)&TAI_FunLookupND, 1, 0, 0,1);
TypeDef TA_SoBase("SoBase", "  ", 
	"", "", "", sizeof(SoBase), (void**)0, 0, 0, 0,1);
TypeDef TA_const_FunLookupND("const_FunLookupND", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoNode("SoNode", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_FunLookupND_ref("const_FunLookupND_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoGroup("SoGroup", "  ", 
	"", "", "", sizeof(SoGroup), (void**)0, 0, 0, 0,1);
TypeDef TA_SoSeparator("SoSeparator", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoBase_ptr("SoBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoPtr_impl("SoPtr_impl", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_SoPtr("SoPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoPtr_SoNode_("SoPtr_SoNode_", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr<SoNode>), (void**)0, 0, 0, 0,1);
TypeDef TA_SoNode_ptr("SoNode_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoNodePtr("SoNodePtr", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoNodePtr), (void**)0, 0, 0, 0,1);
TypeDef TA_SoPtr_SoGroup_("SoPtr_SoGroup_", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr<SoGroup>), (void**)0, 0, 0, 0,1);
TypeDef TA_SoNodePtr_ref("SoNodePtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoGroup_ptr("SoGroup_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoGroupPtr("SoGroupPtr", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoGroupPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_SoPtr_SoSeparator_("SoPtr_SoSeparator_", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr<SoSeparator>), (void**)0, 0, 0, 0,1);
TypeDef TA_SoGroupPtr_ref("SoGroupPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoSeparator_ptr("SoSeparator_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoSeparatorPtr("SoSeparatorPtr", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoSeparatorPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_SoPtr_SoSeparatorKit_("SoPtr_SoSeparatorKit_", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr<SoSeparatorKit>), (void**)0, 0, 0, 0,1);
TypeDef TA_SoSeparatorPtr_ref("SoSeparatorPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoSeparatorKitPtr("SoSeparatorKitPtr", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoSeparatorKitPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_SoPtr_SoSelection_("SoPtr_SoSelection_", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr<SoSelection>), (void**)0, 0, 0, 0,1);
TypeDef TA_SoSeparatorKitPtr_ref("SoSeparatorKitPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoSelectionPtr("SoSelectionPtr", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoSelectionPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_SoPtr_SoTransform_("SoPtr_SoTransform_", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr<SoTransform>), (void**)0, 0, 0, 0,1);
TypeDef TA_SoSelectionPtr_ref("SoSelectionPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoTransformPtr("SoTransformPtr", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoTransformPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_SoTriangleStripSet("SoTriangleStripSet", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoTransformPtr_ref("SoTransformPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3Node("T3Node", " externals -- note: some are here for use by other files, not this one an base class for PDP project items, like networks, etc.", 
	"", "", "", sizeof(T3Node), (void**)0, 0, 0, 0,1);
TypeDef TA_const_SbColor_ref("const_SbColor_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3Color("T3Color", " ", 
	"", "", "", sizeof(T3Color), (void**)0, 0, 0, 0,1);
TypeDef TA_T3Color_ref("T3Color_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbRotation_ref("const_SbRotation_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbRotation_ptr("const_SbRotation_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_iVec3f_ptr("const_iVec3f_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3NodeLeaf("T3NodeLeaf", " an base class for PDP project items, like networks, etc.", 
	"", "", "", sizeof(T3NodeLeaf), (void**)0, 0, 0, 0,1);
TypeDef TA_T3NodeParent("T3NodeParent", " an base class for PDP project items, like networks, etc.", 
	"", "", "", sizeof(T3NodeParent), (void**)0, 0, 0, 0,1);
TypeDef TA_SoFrame("SoFrame", " quadraloidal frame", 
	"", "", "", sizeof(SoFrame), (void**)0, 0, 0, 0,1);
TypeDef TA_T3DataView("T3DataView", " base class for 3d-based DataView objects", 
	"", "NO_TOKENS ", "", sizeof(T3DataView), (void**)&TAI_T3DataView, 0, 0, 0,1);
TypeDef TA_T3DataViewPar("T3DataViewPar", " T3DataView that has child T3DataView's", 
	"", "", "", sizeof(T3DataViewPar), (void**)&TAI_T3DataViewPar, 0, 0, 0,1);
TypeDef TA_T3DataViewRoot("T3DataViewRoot", " Root item for a viewwidget type", 
	"", "", "", sizeof(T3DataViewRoot), (void**)&TAI_T3DataViewRoot, 0, 0, 0,1);
TypeDef TA_iT3ViewspaceWidget("iT3ViewspaceWidget", " widget that encapsulates an Inventor viewer; adds context menu handling, and optional scroll bars", 
	"", "", "", sizeof(iT3ViewspaceWidget), (void**)&TAI_iT3ViewspaceWidget, 1, 0, 0,1);
TypeDef TA_T3DataViewer("T3DataViewer", " top-level DataViewer object that contains 3D data views", 
	"", "", "", sizeof(T3DataViewer), (void**)&TAI_T3DataViewer, 1, 0, 0,1);
TypeDef TA_SoPtr_T3Node_("SoPtr_T3Node_", " 'safe' ptr for SoBase objects -- automatically does ref counts", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SoPtr<T3Node>), (void**)0, 0, 0, 0,1);
TypeDef TA_T3Node_ptr("T3Node_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3NodePtr("T3NodePtr", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(T3NodePtr), (void**)0, 0, 0, 0,1);
TypeDef TA_taList_T3DataView_("taList_T3DataView_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<T3DataView>), (void**)&TAI_taList_T3DataView_, 0, 0, 0,1);
TypeDef TA_T3NodePtr_ref("T3NodePtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3DataView_List("T3DataView_List", " ", 
	"", "", "", sizeof(T3DataView_List), (void**)&TAI_T3DataView_List, 0, 0, 0,1);
TypeDef TA_const_T3DataView_List("const_T3DataView_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_T3DataView_ptr("T3DataView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_T3DataView_List_ref("const_T3DataView_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_FloatTransform_ptr("FloatTransform_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3DataViewRoot_ptr("T3DataViewRoot_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_T3DataView("const_T3DataView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_T3DataView_ref("const_T3DataView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_T3DataView_("taPtrList_T3DataView_", " ", 
	"", "", "", sizeof(taPtrList<T3DataView>), (void**)&TAI_taPtrList_T3DataView_, 0, 0, 0,1);
TypeDef TA_T3DataView_PtrList("T3DataView_PtrList", " for selection lists, aux lists, etc.", 
	"", "", "", sizeof(T3DataView_PtrList), (void**)&TAI_T3DataView_PtrList, 0, 0, 0,1);
TypeDef TA_const_T3DataViewPar("const_T3DataViewPar", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_T3DataViewPar_ref("const_T3DataViewPar_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SoPath_ptr("const_SoPath_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_T3DataViewRoot("const_T3DataViewRoot", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_T3DataViewRoot_ref("const_T3DataViewRoot_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iT3ViewspaceWidget_ptr("iT3ViewspaceWidget_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3DataViewer_ptr("T3DataViewer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_T3DataViewer("const_T3DataViewer", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_T3DataViewer_ref("const_T3DataViewer_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3CBar("T3CBar", "", 
	"", "", "", sizeof(T3CBar), (void**)0, 0, 0, 0,1);
TypeDef TA_tabDataTableViewType("tabDataTableViewType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(tabDataTableViewType), (void**)&TAI_tabDataTableViewType, 0, 0, 0,1);
TypeDef TA_iDataTable("iDataTable", " ", 
	"NO_CSS ", "NO_CSS ", "", sizeof(iDataTable), (void**)0, 0, 0, 0,1);
TypeDef TA_iDataTablePanel("iDataTablePanel", " ////////////////////////", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(iDataTablePanel), (void**)0, 0, 0, 0,1);
TypeDef TA_const_QColorGroup_ref("const_QColorGroup_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iDataTable_ptr("iDataTable_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3Axis("T3Axis", " ", 
	"", "", "", sizeof(T3Axis), (void**)0, 0, 0, 0,1);
TypeDef TA_const_T3Color("const_T3Color", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_T3Color_ref("const_T3Color_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_T3GraphLine("T3GraphLine", " ", 
	"", "", "", sizeof(T3GraphLine), (void**)0, 0, 0, 0,1);
TypeDef TA_T3Graph("T3Graph", "", 
	"", "", "", sizeof(T3Graph), (void**)0, 0, 0, 0,1);
TypeDef TA_AxisView("AxisView", " an axis on a graph -- note: mdata is the AxisSpec", 
	"", "", "", sizeof(AxisView), (void**)&TAI_AxisView, 0, 0, 0,1);
TypeDef TA_GraphLine("GraphLine", "  a line on a graph -- mdata is the colspec -- lines are deleted if any of their AxisView refs get deleted", 
	"", "", "", sizeof(GraphLine), (void**)&TAI_GraphLine, 0, 0, 0,1);
TypeDef TA_GraphView("GraphView", " represents one entire graph object, including axes and lines -- mdata is the graphlet list", 
	"", "", "", sizeof(GraphView), (void**)&TAI_GraphView, 0, 0, 0,1);
TypeDef TA_GraphViews("GraphViews", "  container to hold one (single view) or more (multi view) graphs (.children contains GraphView objs)", 
	"", "", "", sizeof(GraphViews), (void**)&TAI_GraphViews, 0, 0, 0,1);
TypeDef TA_AxisView_ptr("AxisView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3Axis_ptr("T3Axis_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_AxisView("const_AxisView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_AxisView_ref("const_AxisView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GraphLine_ptr("GraphLine_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_XAxisSpec_ptr("XAxisSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ZAxisSpec_ptr("ZAxisSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3GraphLine_ptr("T3GraphLine_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GraphLine("const_GraphLine", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphLine_ref("const_GraphLine_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GraphView_ptr("GraphView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_GraphletSpec_ptr("GraphletSpec_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3Graph_ptr("T3Graph_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GraphView("const_GraphView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphView_ref("const_GraphView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_GraphViews_ptr("GraphViews_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3NodeParent_ptr("T3NodeParent_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_T3CBar_ptr("T3CBar_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_GraphViews("const_GraphViews", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_GraphViews_ref("const_GraphViews_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SoFieldContainer("SoFieldContainer", "", 
	"", "", "", sizeof(SoFieldContainer), (void**)0, 0, 0, 0,1);
TypeDef TA_NoScale_Text_G_ptr("NoScale_Text_G_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_NoScale_Text_G("NoScale_Text_G", 1, 0, 0, 0, 1, 0);
TypeDef TA_Xform_ptr("Xform_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Xform("Xform", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_QPixmap("const_QPixmap", 1, 0, 0, 0, 1, 0);
TypeDef TA_QPixmap("QPixmap", 1, 0, 0, 0, 1, 0);
TypeDef TA_ulong("ulong", 1, 0, 0, 0, 1, 0);
TypeDef TA_unsigned_long_int("unsigned_long_int", 1, 0, 0, 0, 1, 0);
TypeDef TA_int64_t("int64_t", 1, 0, 0, 0, 1, 0);
TypeDef TA_long_long("long_long", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoFont_ptr("SoFont_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoFont("SoFont", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoAsciiText_ptr("SoAsciiText_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoAsciiText("SoAsciiText", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoTransform_ptr("SoTransform_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoTransform("SoTransform", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoMaterial_ptr("SoMaterial_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoMaterial("SoMaterial", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_QMimeSource("const_QMimeSource", 1, 0, 0, 0, 1, 0);
TypeDef TA_iT3DataViewer_ptr("iT3DataViewer_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iT3DataViewer("iT3DataViewer", 1, 0, 0, 0, 1, 0);
TypeDef TA_QScrollBar_ptr("QScrollBar_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QScrollBar("QScrollBar", 1, 0, 0, 0, 1, 0);
TypeDef TA_SoQtRenderArea_ptr("SoQtRenderArea_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SoQtRenderArea("SoQtRenderArea", 1, 0, 0, 0, 1, 0);
TypeDef TA_QTable("QTable", 1, 0, 0, 0, 1, 0);
TypeDef TA_QTableItem_ptr("QTableItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QTableItem("QTableItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_QPainter_ptr("QPainter_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_QPainter("QPainter", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_iColor("const_iColor", 1, 0, 0, 0, 1, 0);

// Instances

FontSpec*		 TAI_FontSpec=NULL;
  static cssEl* cssElCFun_FontSpec_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((FontSpec*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((FontSpec*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_FontSpec_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((FontSpec*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_FontSpec_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((FontSpec*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_FontSpec_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((FontSpec*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_FontSpec_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_FontSpec_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_FontSpec_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((FontSpec*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_FontSpec_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((FontSpec*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((FontSpec*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((FontSpec*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_FontSpec_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((FontSpec*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((FontSpec*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((FontSpec*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_FontSpec_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((FontSpec*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((FontSpec*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((FontSpec*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_FontSpec_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_FontSpec_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_FontSpec_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((FontSpec*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((FontSpec*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((FontSpec*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_FontSpec_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_FontSpec_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_FontSpec_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((FontSpec*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_FontSpec_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_FontSpec_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_FontSpec_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((FontSpec*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((FontSpec*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_FontSpec_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_FontSpec_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((FontSpec*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_FontSpec_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_FontSpec_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_FontSpec_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_FontSpec_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((FontSpec*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_FontSpec_bold_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->bold());
    return rval;}
  static cssEl* cssElCFun_FontSpec_setBold_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->setBold((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_italic_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->italic());
    return rval;}
  static cssEl* cssElCFun_FontSpec_setItalic_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->setItalic((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_setPointSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->setPointSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_setStretch_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->setStretch((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_underline_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FontSpec*)ths)->underline());
    return rval;}
  static cssEl* cssElCFun_FontSpec_setUnderline_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->setUnderline((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_copy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->copy(*(iFont*)arg[1]->GetVoidPtrOfType(&TA_iFont));
    return rval;}
  static cssEl* cssElCFun_FontSpec_setRawName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->setRawName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_SelectFont_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->SelectFont();
    return rval;}
  static cssEl* cssElCFun_FontSpec_SetFont_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->SetFont((char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_SetFontSize_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((FontSpec*)ths)->SetFontSize();}
    if(na == 1) {
      ((FontSpec*)ths)->SetFontSize((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_FontSpec_SetTextG_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->SetTextG((NoScale_Text_G*)(void*)*arg[1]);
    return rval;}
ViewLabel*		 TAI_ViewLabel=NULL;
  static cssEl* cssElCFun_ViewLabel_GetMasterViewer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->GetMasterViewer();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_SetLabelXform_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->SetLabelXform((Xform*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ViewLabel_XFontSel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->XFontSel();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_MakeText_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->MakeText();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_AddToView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->AddToView();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_UpdateView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ViewLabel*)ths)->UpdateView());
    return rval;}
  static cssEl* cssElCFun_ViewLabel_RemoveFromView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->RemoveFromView();
    return rval;}
taList<ViewLabel>*		 TAI_taList_ViewLabel_=NULL;
  static cssEl* cssElCFun_taList_ViewLabel__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<ViewLabel>*)ths)->MoveBefore((ViewLabel*)(void*)*arg[1], (ViewLabel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<ViewLabel>*)ths)->MoveAfter((ViewLabel*)(void*)*arg[1], (ViewLabel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->SafeEl((int)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FastEl((int)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->DefaultEl(), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->Edit_El((ViewLabel*)(void*)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindName((const char*)*arg[1]), 1, &TA_ViewLabel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_ViewLabel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_ViewLabel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_ViewLabel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->Pop(), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->Peek(), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->AddUniqNameOld((ViewLabel*)(void*)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->LinkUniqNameOld((ViewLabel*)(void*)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
ViewLabel_List*		 TAI_ViewLabel_List=NULL;
taList<Xform>*		 TAI_taList_Xform_=NULL;
  static cssEl* cssElCFun_taList_Xform__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<Xform>*)ths)->MoveBefore((Xform*)(void*)*arg[1], (Xform*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_Xform__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<Xform>*)ths)->MoveAfter((Xform*)(void*)*arg[1], (Xform*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_Xform__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->SafeEl((int)*arg[1]), 1, &TA_Xform);
    return rval;}
  static cssEl* cssElCFun_taList_Xform__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->FastEl((int)*arg[1]), 1, &TA_Xform);
    return rval;}
  static cssEl* cssElCFun_taList_Xform__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->DefaultEl(), 1, &TA_Xform);
    return rval;}
  static cssEl* cssElCFun_taList_Xform__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->Edit_El((Xform*)(void*)*arg[1]), 1, &TA_Xform);
    return rval;}
  static cssEl* cssElCFun_taList_Xform__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<Xform>*)ths)->FindName((const char*)*arg[1]), 1, &TA_Xform);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_Xform);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_Xform__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<Xform>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Xform);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Xform);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_Xform__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->Pop(), 1, &TA_Xform);
    return rval;}
  static cssEl* cssElCFun_taList_Xform__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->Peek(), 1, &TA_Xform);
    return rval;}
  static cssEl* cssElCFun_taList_Xform__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->AddUniqNameOld((Xform*)(void*)*arg[1]), 1, &TA_Xform);
    return rval;}
  static cssEl* cssElCFun_taList_Xform__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<Xform>*)ths)->LinkUniqNameOld((Xform*)(void*)*arg[1]), 1, &TA_Xform);
    return rval;}
Xform_List*		 TAI_Xform_List=NULL;
RndSeed*		 TAI_RndSeed=NULL;
  static cssEl* cssElCFun_RndSeed_NewSeed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->NewSeed();
    return rval;}
  static cssEl* cssElCFun_RndSeed_OldSeed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->OldSeed();
    return rval;}
  static cssEl* cssElCFun_RndSeed_GetCurrent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->GetCurrent();
    return rval;}
  static cssEl* cssElCFun_RndSeed_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->Init((ulong)*arg[1]);
    return rval;}
Random*		 TAI_Random=NULL;
  static cssEl* cssElCFun_Random_IntZeroN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Random*)ths)->IntZeroN((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_ZeroOne_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->ZeroOne());
    return rval;}
  static cssEl* cssElCFun_Random_Range_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Range((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_Uniform_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Uniform((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_Binom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Binom((int)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_Poisson_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Poisson((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_Gamma_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Gamma((float)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_Gauss_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Gauss((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_UniformDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->UniformDen((float)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_BinomDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->BinomDen((int)*arg[1], (int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Random_PoissonDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->PoissonDen((int)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_GammaDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->GammaDen((int)*arg[1], (float)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Random_GaussDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->GaussDen((float)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_Gen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Gen());
    return rval;}
  static cssEl* cssElCFun_Random_Density_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Density((float)*arg[1]));
    return rval;}
TimeUsed*		 TAI_TimeUsed=NULL;
  static cssEl* cssElCFun_TimeUsed_InitTimes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TimeUsed*)ths)->InitTimes();
    return rval;}
  static cssEl* cssElCFun_TimeUsed_GetTimes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TimeUsed*)ths)->GetTimes();
    return rval;}
  static cssEl* cssElCFun_TimeUsed_GetUsed_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TimeUsed*)ths)->GetUsed(*(TimeUsed*)arg[1]->GetVoidPtrOfType(&TA_TimeUsed));
    return rval;}
  static cssEl* cssElCFun_TimeUsed_GetString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((TimeUsed*)ths)->GetString());
    return rval;}
TwoDCoord*		 TAI_TwoDCoord=NULL;
  static cssEl* cssElCFun_TwoDCoord_isZero_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->isZero());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SetXY((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_GetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];
    ((TwoDCoord*)ths)->GetXY(refarg_0, refarg_1);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_OrEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->OrEq(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SqMag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->SqMag());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Mag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TwoDCoord*)ths)->Mag());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TwoDCoord*)ths)->SqDist(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TwoDCoord*)ths)->Dist(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Sum_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Sum());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Sgn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Sgn((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Absv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Absv((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Invert_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->Invert();
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SumNorm_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SumNorm();
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Abs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->Abs();
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Min_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TwoDCoord& refarg_0=*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord);
    ((TwoDCoord*)ths)->Min(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Max_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TwoDCoord& refarg_0=*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord);
    ((TwoDCoord*)ths)->Max(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Product_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Product());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_MaxVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->MaxVal());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_MinVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->MinVal());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_GetStr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((TwoDCoord*)ths)->GetStr());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_FitN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->FitN((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SetGtEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SetGtEq((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SetLtEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SetLtEq((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_WrapClipOne_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];
    rval=new cssInt((int)((TwoDCoord*)ths)->WrapClipOne((bool)*arg[1], refarg_1, (int)*arg[3]));
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_WrapClip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->WrapClip((bool)*arg[1], *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
PosTwoDCoord*		 TAI_PosTwoDCoord=NULL;
TDCoord*		 TAI_TDCoord=NULL;
  static cssEl* cssElCFun_TDCoord_OrEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->OrEq(*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TDCoord*)ths)->SqDist(*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TDCoord*)ths)->Dist(*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Sgn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->Sgn((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Absv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->Absv((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Min_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TDCoord& refarg_0=*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord);
    ((TDCoord*)ths)->Min(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TDCoord_Max_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TDCoord& refarg_0=*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord);
    ((TDCoord*)ths)->Max(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TDCoord_WrapClip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->WrapClip((bool)*arg[1], *(TDCoord*)arg[2]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_SetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TDCoord*)ths)->SetXYZ((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_TDCoord_GetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];    float refarg_2=(float)*arg[3];
    ((TDCoord*)ths)->GetXYZ(refarg_0, refarg_1, refarg_2);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;    *arg[3]=(Real)refarg_2;
    return rval;}
  static cssEl* cssElCFun_TDCoord_FitNinXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->FitNinXY((int)*arg[1]));
    return rval;}
PosTDCoord*		 TAI_PosTDCoord=NULL;
FloatTwoDCoord*		 TAI_FloatTwoDCoord=NULL;
  static cssEl* cssElCFun_FloatTwoDCoord_SetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->SetXY((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_GetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];
    ((FloatTwoDCoord*)ths)->GetXY(refarg_0, refarg_1);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_SqMag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->SqMag());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Mag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->Mag());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->SqDist(*(FloatTwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->Dist(*(FloatTwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Sum_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->Sum());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Invert_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->Invert();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_MagNorm_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->MagNorm();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_SumNorm_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->SumNorm();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Abs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->Abs();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_MaxVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->MaxVal());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_MinVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->MinVal());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_GetStr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((FloatTwoDCoord*)ths)->GetStr());
    return rval;}
FloatTDCoord*		 TAI_FloatTDCoord=NULL;
  static cssEl* cssElCFun_FloatTDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTDCoord*)ths)->SqDist(*(FloatTDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTDCoord*)ths)->Dist(*(FloatTDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_SetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTDCoord*)ths)->SetXYZ((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_GetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];    float refarg_2=(float)*arg[3];
    ((FloatTDCoord*)ths)->GetXYZ(refarg_0, refarg_1, refarg_2);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;    *arg[3]=(Real)refarg_2;
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_Equals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((FloatTDCoord*)ths)->Equals((float)*arg[1], (float)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_Sgn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTDCoord*)ths)->Sgn((float)*arg[1]));
    return rval;}
FloatRotation*		 TAI_FloatRotation=NULL;
  static cssEl* cssElCFun_FloatRotation_SetXYZR_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FloatRotation*)ths)->SetXYZR((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_FloatRotation_GetXYZR_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];    float refarg_2=(float)*arg[3];    float refarg_3=(float)*arg[4];
    ((FloatRotation*)ths)->GetXYZR(refarg_0, refarg_1, refarg_2, refarg_3);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;    *arg[3]=(Real)refarg_2;    *arg[4]=(Real)refarg_3;
    return rval;}
FloatTransform*		 TAI_FloatTransform=NULL;
ValIdx*		 TAI_ValIdx=NULL;
  static cssEl* cssElCFun_ValIdx_SetValIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ValIdx*)ths)->SetValIdx((float)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ValIdx_GetValIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    int refarg_1=(int)*arg[2];
    ((ValIdx*)ths)->GetValIdx(refarg_0, refarg_1);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_ValIdx_GetStr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((ValIdx*)ths)->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->SafeEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->FastEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->RevEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Pop();
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Peek();
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Set((int)*arg[1], *(ValIdx*)arg[2]->GetVoidPtrOfType(&TA_ValIdx));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Add(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<ValIdx>*)ths)->AddUnique(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx)));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Push(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<ValIdx>*)ths)->Insert(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<ValIdx>*)ths)->Insert(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<ValIdx>*)ths)->Find(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx)));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<ValIdx>*)ths)->Find(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<ValIdx>*)ths)->RemoveEl(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx)));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<ValIdx>*)ths)->InitVals(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx));}
    if(na == 2) {
      ((taArray<ValIdx>*)ths)->InitVals(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<ValIdx>*)ths)->InitVals(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2], (int)*arg[3]);}
    return rval;}
CountParam*		 TAI_CountParam=NULL;
  static cssEl* cssElCFun_CountParam_Evaluate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((CountParam*)ths)->Evaluate((float)*arg[1]));
    return rval;}
Aggregate*		 TAI_Aggregate=NULL;
  static cssEl* cssElCFun_Aggregate_AggLAST_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggLAST(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggSUM_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggSUM(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggPROD_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggPROD(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggMIN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggMIN(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggMAX_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggMAX(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggAVG_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggAVG(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggCOPY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggCOPY(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggCOUNT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggCOUNT(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_ComputeAgg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->ComputeAgg(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_ComputeAggNoUpdt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    rval=new cssInt((int)((Aggregate*)ths)->ComputeAggNoUpdt(refarg_0, (float)*arg[2]));
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_IncUpdt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Aggregate*)ths)->IncUpdt();
    return rval;}
  static cssEl* cssElCFun_Aggregate_GetAggName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((Aggregate*)ths)->GetAggName(), 1);
    return rval;}
  static cssEl* cssElCFun_Aggregate_AppendAggName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Aggregate*)ths)->AppendAggName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Aggregate_PrependAggName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Aggregate*)ths)->PrependAggName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Aggregate_Init_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Aggregate*)ths)->Init();
    return rval;}
  static cssEl* cssElCFun_Aggregate_InitAggVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Aggregate*)ths)->InitAggVal());
    return rval;}
SimpleMathSpec*		 TAI_SimpleMathSpec=NULL;
  static cssEl* cssElCFun_SimpleMathSpec_Evaluate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SimpleMathSpec*)ths)->Evaluate((float)*arg[1]));
    return rval;}
MinMax*		 TAI_MinMax=NULL;
  static cssEl* cssElCFun_MinMax_RangeTest_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMax*)ths)->RangeTest((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_RangeTestEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMax*)ths)->RangeTestEq((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->Init((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->Set((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_MinMax_Range_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Range());
    return rval;}
  static cssEl* cssElCFun_MinMax_Scale_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Scale());
    return rval;}
  static cssEl* cssElCFun_MinMax_MidPoint_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->MidPoint());
    return rval;}
  static cssEl* cssElCFun_MinMax_UpdateRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->UpdateRange((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_MaxLT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->MaxLT((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_MinGT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->MinGT((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_WithinRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((MinMax*)ths)->WithinRange(refarg_0);
    return rval;}
  static cssEl* cssElCFun_MinMax_Normalize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Normalize((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_Project_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Project((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_Clip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Clip((float)*arg[1]));
    return rval;}
MinMaxRange*		 TAI_MinMaxRange=NULL;
FixedMinMax*		 TAI_FixedMinMax=NULL;
  static cssEl* cssElCFun_FixedMinMax_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->Init((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_InitFix_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((FixedMinMax*)ths)->InitFix();}
    if(na == 1) {
      ((FixedMinMax*)ths)->InitFix((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->Set((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_SetMin_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->SetMin((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_SetMax_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->SetMax((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_FixRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((FixedMinMax*)ths)->FixRange(refarg_0);
    return rval;}
Modulo*		 TAI_Modulo=NULL;
MinMaxInt*		 TAI_MinMaxInt=NULL;
  static cssEl* cssElCFun_MinMaxInt_RangeTest_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->RangeTest((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_RangeTestEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->RangeTestEq((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->Init((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Count_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->Count());
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Range_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->Range());
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Scale_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMaxInt*)ths)->Scale());
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_MidPoint_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->MidPoint());
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_UpdateRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->UpdateRange((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_MaxLT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->MaxLT((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_MinGT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->MinGT((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_WithinRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    MinMaxInt& refarg_0=*(MinMaxInt*)arg[1]->GetVoidPtrOfType(&TA_MinMaxInt);
    ((MinMaxInt*)ths)->WithinRange(refarg_0);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Normalize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMaxInt*)ths)->Normalize((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Project_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->Project((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Clip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->Clip((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_IDataSource_can_sequence__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((IDataSource*)ths)->can_sequence_());
    return rval;}
  static cssEl* cssElCFun_IDataSource_sequencer__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((IDataSource*)ths)->sequencer_(), 1, &TA_ISequencable);
    return rval;}
  static cssEl* cssElCFun_IDataSource_source_channels__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IDataSource*)ths)->source_channels_();
    return rval;}
  static cssEl* cssElCFun_IDataSource_GetData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((IDataSource*)ths)->GetData((SourceChannel*)(void*)*arg[1]), 1, &TA_taMatrix_impl);
    return rval;}
  static cssEl* cssElCFun_ISequencable_num_items_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ISequencable*)ths)->num_items());
    return rval;}
  static cssEl* cssElCFun_ISequencable_is_permutable_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ISequencable*)ths)->is_permutable());
    return rval;}
  static cssEl* cssElCFun_ISequencable_has_next_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ISequencable*)ths)->has_next());
    return rval;}
  static cssEl* cssElCFun_ISequencable_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ISequencable*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_ISequencable_Next_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ISequencable*)ths)->Next();
    return rval;}
  static cssEl* cssElCFun_ISequencable_GoTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ISequencable*)ths)->GoTo((uint)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_IDataSink_sink_channels_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((IDataSink*)ths)->sink_channels();
    return rval;}
DataTransferMode*		 TAI_DataTransferMode=NULL;
taMatrix_impl**		 TAI_ptaMatrix_impl=NULL;
  static cssEl* cssElCFun_DataChannel_index_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataChannel*)ths)->index());
    return rval;}
  static cssEl* cssElCFun_DataChannel_data_type_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((DataChannel*)ths)->data_type(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_DataChannel_dims_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataChannel*)ths)->dims());
    return rval;}
  static cssEl* cssElCFun_DataChannel_geom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataChannel*)ths)->geom((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataChannel_setGeom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataChannel*)ths)->setGeom(*(int_FixedArray*)arg[1]->GetVoidPtrOfType(&TA_int_FixedArray));
    return rval;}
  static cssEl* cssElCFun_DataChannel_txfer_modes_allowed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataChannel*)ths)->txfer_modes_allowed());
    return rval;}
  static cssEl* cssElCFun_DataChannel_txfer_mode_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataChannel*)ths)->txfer_mode());
    return rval;}
  static cssEl* cssElCFun_DataChannel_setTxfer_mode_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataChannel*)ths)->setTxfer_mode((int)*arg[1]);
    return rval;}
DataConnector*		 TAI_DataConnector=NULL;
  static cssEl* cssElCFun_DataConnector_CanConnect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataConnector*)ths)->CanConnect((SourceChannel*)(void*)*arg[1], (SinkChannel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_DataConnector_StatConnect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataConnector*)ths)->StatConnect((SourceChannel*)(void*)*arg[1], (SinkChannel*)(void*)*arg[2]), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_DataConnector_source_channel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataConnector*)ths)->source_channel(), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_DataConnector_sink_channel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataConnector*)ths)->sink_channel(), 1, &TA_SinkChannel);
    return rval;}
SinkChannel*		 TAI_SinkChannel=NULL;
  static cssEl* cssElCFun_SinkChannel_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SinkChannel*)ths)->New((IDataSink*)(void*)*arg[1], arg[2]->GetStr(), *(int_FixedArray*)arg[3]->GetVoidPtrOfType(&TA_int_FixedArray), (int)*arg[4], (int)*arg[5]), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_SinkChannel_data_sink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((SinkChannel*)ths)->data_sink(), 1, &TA_IDataSink);
    return rval;}
  static cssEl* cssElCFun_SinkChannel_connector_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SinkChannel*)ths)->connector(), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_SinkChannel_ConsumeData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SinkChannel*)ths)->ConsumeData());
    return rval;}
  static cssEl* cssElCFun_SinkChannel_AcceptData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SinkChannel*)ths)->AcceptData((taMatrix_impl*)(void*)*arg[1]);
    return rval;}
SourceChannel*		 TAI_SourceChannel=NULL;
  static cssEl* cssElCFun_SourceChannel_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SourceChannel*)ths)->New((IDataSource*)(void*)*arg[1], arg[2]->GetStr(), *(int_FixedArray*)arg[3]->GetVoidPtrOfType(&TA_int_FixedArray), (int)*arg[4], (int)*arg[5]), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_SourceChannel_data_source_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((SourceChannel*)ths)->data_source(), 1, &TA_IDataSource);
    return rval;}
  static cssEl* cssElCFun_SourceChannel_GetData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((SourceChannel*)ths)->GetData(), 1, &TA_taMatrix_impl);
    return rval;}
  static cssEl* cssElCFun_SequenceMaster_instance_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SequenceMaster*)ths)->instance();
    return rval;}
  static cssEl* cssElCFun_SequenceMaster_cycle_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SequenceMaster*)ths)->cycle());
    return rval;}
  static cssEl* cssElCFun_SequenceMaster_Next_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SequenceMaster*)ths)->Next();
    return rval;}
  static cssEl* cssElCFun_SequenceMaster_UpdateClient_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      int64_t refarg_0=(int64_t)*arg[1];
    rval=new cssInt((int)((SequenceMaster*)ths)->UpdateClient(refarg_0));    *arg[1]=(Int)refarg_0;
}
    if(na == 2) {
      int64_t refarg_0=(int64_t)*arg[1];
    rval=new cssInt((int)((SequenceMaster*)ths)->UpdateClient(refarg_0, (int64_t*)(void*)*arg[2]));    *arg[1]=(Int)refarg_0;
}
    return rval;}
taList<DataConnector>*		 TAI_taList_DataConnector_=NULL;
  static cssEl* cssElCFun_taList_DataConnector__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<DataConnector>*)ths)->MoveBefore((DataConnector*)(void*)*arg[1], (DataConnector*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<DataConnector>*)ths)->MoveAfter((DataConnector*)(void*)*arg[1], (DataConnector*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->FastEl((int)*arg[1]), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->DefaultEl(), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->Edit_El((DataConnector*)(void*)*arg[1]), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->FindName((const char*)*arg[1]), 1, &TA_DataConnector);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_DataConnector);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_DataConnector);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_DataConnector);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->Pop(), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->Peek(), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->AddUniqNameOld((DataConnector*)(void*)*arg[1]), 1, &TA_DataConnector);
    return rval;}
  static cssEl* cssElCFun_taList_DataConnector__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataConnector>*)ths)->LinkUniqNameOld((DataConnector*)(void*)*arg[1]), 1, &TA_DataConnector);
    return rval;}
DataConnector_List*		 TAI_DataConnector_List=NULL;
taList<SourceChannel>*		 TAI_taList_SourceChannel_=NULL;
  static cssEl* cssElCFun_taList_SourceChannel__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<SourceChannel>*)ths)->MoveBefore((SourceChannel*)(void*)*arg[1], (SourceChannel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<SourceChannel>*)ths)->MoveAfter((SourceChannel*)(void*)*arg[1], (SourceChannel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->SafeEl((int)*arg[1]), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->FastEl((int)*arg[1]), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->DefaultEl(), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->Edit_El((SourceChannel*)(void*)*arg[1]), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->FindName((const char*)*arg[1]), 1, &TA_SourceChannel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_SourceChannel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_SourceChannel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_SourceChannel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->Pop(), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->Peek(), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->AddUniqNameOld((SourceChannel*)(void*)*arg[1]), 1, &TA_SourceChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SourceChannel__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SourceChannel>*)ths)->LinkUniqNameOld((SourceChannel*)(void*)*arg[1]), 1, &TA_SourceChannel);
    return rval;}
SourceChannel_List*		 TAI_SourceChannel_List=NULL;
taList<SinkChannel>*		 TAI_taList_SinkChannel_=NULL;
  static cssEl* cssElCFun_taList_SinkChannel__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<SinkChannel>*)ths)->MoveBefore((SinkChannel*)(void*)*arg[1], (SinkChannel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<SinkChannel>*)ths)->MoveAfter((SinkChannel*)(void*)*arg[1], (SinkChannel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->SafeEl((int)*arg[1]), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->FastEl((int)*arg[1]), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->DefaultEl(), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->Edit_El((SinkChannel*)(void*)*arg[1]), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->FindName((const char*)*arg[1]), 1, &TA_SinkChannel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_SinkChannel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_SinkChannel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_SinkChannel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->Pop(), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->Peek(), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->AddUniqNameOld((SinkChannel*)(void*)*arg[1]), 1, &TA_SinkChannel);
    return rval;}
  static cssEl* cssElCFun_taList_SinkChannel__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<SinkChannel>*)ths)->LinkUniqNameOld((SinkChannel*)(void*)*arg[1]), 1, &TA_SinkChannel);
    return rval;}
SinkChannel_List*		 TAI_SinkChannel_List=NULL;
RGBA*		 TAI_RGBA=NULL;
  static cssEl* cssElCFun_RGBA_color_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((RGBA*)ths)->color(), 1, &TA_const_iColor);
    return rval;}
  static cssEl* cssElCFun_RGBA_ToString_RGBA_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((RGBA*)ths)->ToString_RGBA());
    return rval;}
TAColor*		 TAI_TAColor=NULL;
  static cssEl* cssElCFun_TAColor_SetColor_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((TAColor*)ths)->SetColor((const iColor*)(void*)*arg[1]);}
    if(na == 2) {
      ((TAColor*)ths)->SetColor((const iColor*)(void*)*arg[1], (RGBA*)(void*)*arg[2]);}
    return rval;}
ColorScaleSpec*		 TAI_ColorScaleSpec=NULL;
  static cssEl* cssElCFun_ColorScaleSpec_GenRanges_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScaleSpec*)ths)->GenRanges((TAColor_List*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
ScaleRange*		 TAI_ScaleRange=NULL;
  static cssEl* cssElCFun_ScaleRange_SetFromScale_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ColorScale& refarg_0=*(ColorScale*)arg[1]->GetVoidPtrOfType(&TA_ColorScale);
    ((ScaleRange*)ths)->SetFromScale(refarg_0);
    return rval;}
ColorScale*		 TAI_ColorScale=NULL;
  static cssEl* cssElCFun_ColorScale_GetAbsPercent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((ColorScale*)ths)->GetAbsPercent((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ColorScale_GetColor_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((ColorScale*)ths)->GetColor((float)*arg[1]), 1, &TA_const_iColor);}
    if(na == 2) {
      rval=new cssTA((void*)((ColorScale*)ths)->GetColor((float)*arg[1], (const iColor**)(void**)*arg[2]), 1, &TA_const_iColor);}
    if(na == 3) {
      rval=new cssTA((void*)((ColorScale*)ths)->GetColor((float)*arg[1], (const iColor**)(void**)*arg[2], (const iColor**)(void**)*arg[3]), 1, &TA_const_iColor);}
    return rval;}
  static cssEl* cssElCFun_ColorScale_GetContrastColor_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ColorScale*)ths)->GetContrastColor((int)*arg[1]), 1, &TA_const_iColor);
    return rval;}
  static cssEl* cssElCFun_ColorScale_GetIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ColorScale*)ths)->GetIdx((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ColorScale_DefaultChunks_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->DefaultChunks();
    return rval;}
  static cssEl* cssElCFun_ColorScale_MapColors_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->MapColors();
    return rval;}
  static cssEl* cssElCFun_ColorScale_NewDefaults_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->NewDefaults();
    return rval;}
  static cssEl* cssElCFun_ColorScale_SetFromScaleRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->SetFromScaleRange((ScaleRange*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ColorScale_ModRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->ModRange((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ColorScale_ModRoundRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->ModRoundRange((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ColorScale_FixRangeZero_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->FixRangeZero();
    return rval;}
  static cssEl* cssElCFun_ColorScale_SetMinMax_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScale*)ths)->SetMinMax((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ColorScale_UpdateMinMax_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ColorScale*)ths)->UpdateMinMax((float)*arg[1]));
    return rval;}
taList<RGBA>*		 TAI_taList_RGBA_=NULL;
  static cssEl* cssElCFun_taList_RGBA__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<RGBA>*)ths)->MoveBefore((RGBA*)(void*)*arg[1], (RGBA*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<RGBA>*)ths)->MoveAfter((RGBA*)(void*)*arg[1], (RGBA*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->SafeEl((int)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FastEl((int)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->DefaultEl(), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->Edit_El((RGBA*)(void*)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindName((const char*)*arg[1]), 1, &TA_RGBA);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_RGBA);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_RGBA);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_RGBA);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->Pop(), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->Peek(), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->AddUniqNameOld((RGBA*)(void*)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->LinkUniqNameOld((RGBA*)(void*)*arg[1]), 1, &TA_RGBA);
    return rval;}
RGBA_List*		 TAI_RGBA_List=NULL;
taList<TAColor>*		 TAI_taList_TAColor_=NULL;
  static cssEl* cssElCFun_taList_TAColor__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<TAColor>*)ths)->MoveBefore((TAColor*)(void*)*arg[1], (TAColor*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<TAColor>*)ths)->MoveAfter((TAColor*)(void*)*arg[1], (TAColor*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->SafeEl((int)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FastEl((int)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->DefaultEl(), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->Edit_El((TAColor*)(void*)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindName((const char*)*arg[1]), 1, &TA_TAColor);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_TAColor);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_TAColor);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_TAColor);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->Pop(), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->Peek(), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->AddUniqNameOld((TAColor*)(void*)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->LinkUniqNameOld((TAColor*)(void*)*arg[1]), 1, &TA_TAColor);
    return rval;}
TAColor_List*		 TAI_TAColor_List=NULL;
taGroup<ColorScaleSpec>*		 TAI_taGroup_ColorScaleSpec_=NULL;
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FirstEl(refarg_0), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NextEl(refarg_0), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<ColorScaleSpec>*)ths)->MoveBefore((ColorScaleSpec*)(void*)*arg[1], (ColorScaleSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<ColorScaleSpec>*)ths)->MoveAfter((ColorScaleSpec*)(void*)*arg[1], (ColorScaleSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->SafeEl((int)*arg[1]), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FastEl((int)*arg[1]), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->DefaultEl(), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->Edit_El((ColorScaleSpec*)(void*)*arg[1]), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->Leaf((int)*arg[1]), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NewEl(), 1, &TA_ColorScaleSpec);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NewEl((int)*arg[1]), 1, &TA_ColorScaleSpec);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_ColorScaleSpec);}
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindName((const char*)*arg[1]), 1, &TA_ColorScaleSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_ColorScaleSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_ColorScaleSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_ColorScaleSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->Pop(), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->Peek(), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->AddUniqNameOld((ColorScaleSpec*)(void*)*arg[1]), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->LinkUniqNameOld((ColorScaleSpec*)(void*)*arg[1]), 1, &TA_ColorScaleSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_ColorScaleSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_ColorScaleSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_ColorScaleSpec__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_ColorScaleSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<ColorScaleSpec>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_ColorScaleSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
ColorScaleSpec_MGroup*		 TAI_ColorScaleSpec_MGroup=NULL;
  static cssEl* cssElCFun_ColorScaleSpec_MGroup_NewDefaults_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScaleSpec_MGroup*)ths)->NewDefaults();
    return rval;}
  static cssEl* cssElCFun_ColorScaleSpec_MGroup_SetDefaultColor_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScaleSpec_MGroup*)ths)->SetDefaultColor();
    return rval;}
  static cssEl* cssElCFun_ColorScaleSpec_MGroup_ChildGetColText_impl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssString(((ColorScaleSpec_MGroup*)ths)->ChildGetColText_impl((taBase*)(void*)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssString(((ColorScaleSpec_MGroup*)ths)->ChildGetColText_impl((taBase*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
taList<ScaleRange>*		 TAI_taList_ScaleRange_=NULL;
  static cssEl* cssElCFun_taList_ScaleRange__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<ScaleRange>*)ths)->MoveBefore((ScaleRange*)(void*)*arg[1], (ScaleRange*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<ScaleRange>*)ths)->MoveAfter((ScaleRange*)(void*)*arg[1], (ScaleRange*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->SafeEl((int)*arg[1]), 1, &TA_ScaleRange);
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->FastEl((int)*arg[1]), 1, &TA_ScaleRange);
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->DefaultEl(), 1, &TA_ScaleRange);
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->Edit_El((ScaleRange*)(void*)*arg[1]), 1, &TA_ScaleRange);
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->FindName((const char*)*arg[1]), 1, &TA_ScaleRange);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_ScaleRange);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_ScaleRange);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_ScaleRange);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->Pop(), 1, &TA_ScaleRange);
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->Peek(), 1, &TA_ScaleRange);
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->AddUniqNameOld((ScaleRange*)(void*)*arg[1]), 1, &TA_ScaleRange);
    return rval;}
  static cssEl* cssElCFun_taList_ScaleRange__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ScaleRange>*)ths)->LinkUniqNameOld((ScaleRange*)(void*)*arg[1]), 1, &TA_ScaleRange);
    return rval;}
ScaleRange_List*		 TAI_ScaleRange_List=NULL;
ClustNode*		 TAI_ClustNode=NULL;
  static cssEl* cssElCFun_ClustNode_GetChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ClustNode*)ths)->GetChild((int)*arg[1]), 1, &TA_ClustNode);
    return rval;}
  static cssEl* cssElCFun_ClustNode_GetNN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ClustNode*)ths)->GetNN((int)*arg[1]), 1, &TA_ClustNode);
    return rval;}
  static cssEl* cssElCFun_ClustNode_GetNNDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((ClustNode*)ths)->GetNNDist((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ClustNode_SetPat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClustNode*)ths)->SetPat((float_RArray*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ClustNode_AddChild_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ClustNode*)ths)->AddChild((ClustNode*)(void*)*arg[1]);}
    if(na == 2) {
      ((ClustNode*)ths)->AddChild((ClustNode*)(void*)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ClustNode_LinkNN_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ClustNode*)ths)->LinkNN((ClustNode*)(void*)*arg[1]);}
    if(na == 2) {
      ((ClustNode*)ths)->LinkNN((ClustNode*)(void*)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ClustNode_RemoveChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ClustNode*)ths)->RemoveChild((ClustNode*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ClustNode_FindChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ClustNode*)ths)->FindChild((ClustNode*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ClustNode_Cluster_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ClustNode*)ths)->Cluster();}
    if(na == 1) {
      ((ClustNode*)ths)->Cluster((float_RArray::DistMetric)(int)*arg[1]);}
    if(na == 2) {
      ((ClustNode*)ths)->Cluster((float_RArray::DistMetric)(int)*arg[1], (bool)*arg[2]);}
    if(na == 3) {
      ((ClustNode*)ths)->Cluster((float_RArray::DistMetric)(int)*arg[1], (bool)*arg[2], (float)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_ClustNode_Graph_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((ClustNode*)ths)->Graph(refarg_0);
    return rval;}
  static cssEl* cssElCFun_ClustNode_XGraph_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClustNode*)ths)->XGraph((const char*)*arg[1], (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ClustNode_GraphData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClustNode*)ths)->GraphData((DataTable*)(void*)*arg[1]);
    return rval;}
DataItem*		 TAI_DataItem=NULL;
  static cssEl* cssElCFun_DataItem_SetStringName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataItem*)ths)->SetStringName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataItem_SetNarrowName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataItem*)ths)->SetNarrowName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataItem_SetFloatVecNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataItem*)ths)->SetFloatVecNm((const char*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_DataItem_SetStringVecNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataItem*)ths)->SetStringVecNm((const char*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_DataItem_AddDispOption_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataItem*)ths)->AddDispOption((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataItem_HasDispOption_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataItem*)ths)->HasDispOption((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataItem_DispOptionAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((DataItem*)ths)->DispOptionAfter((const char*)*arg[1]));
    return rval;}
taList<DataItem>*		 TAI_taList_DataItem_=NULL;
  static cssEl* cssElCFun_taList_DataItem__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<DataItem>*)ths)->MoveBefore((DataItem*)(void*)*arg[1], (DataItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<DataItem>*)ths)->MoveAfter((DataItem*)(void*)*arg[1], (DataItem*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DataItem);
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->FastEl((int)*arg[1]), 1, &TA_DataItem);
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->DefaultEl(), 1, &TA_DataItem);
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->Edit_El((DataItem*)(void*)*arg[1]), 1, &TA_DataItem);
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->FindName((const char*)*arg[1]), 1, &TA_DataItem);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_DataItem);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_DataItem);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_DataItem);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->Pop(), 1, &TA_DataItem);
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->Peek(), 1, &TA_DataItem);
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->AddUniqNameOld((DataItem*)(void*)*arg[1]), 1, &TA_DataItem);
    return rval;}
  static cssEl* cssElCFun_taList_DataItem__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<DataItem>*)ths)->LinkUniqNameOld((DataItem*)(void*)*arg[1]), 1, &TA_DataItem);
    return rval;}
DataItem_List*		 TAI_DataItem_List=NULL;
LogData*		 TAI_LogData=NULL;
  static cssEl* cssElCFun_LogData_indexSize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((LogData*)ths)->indexSize());
    return rval;}
  static cssEl* cssElCFun_LogData_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogData*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_LogData_AddFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogData*)ths)->AddFloat((DataItem*)(void*)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LogData_AddString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LogData*)ths)->AddString((DataItem*)(void*)*arg[1], (char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LogData_IsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((LogData*)ths)->IsString((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_LogData_IsVec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((LogData*)ths)->IsVec((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_LogData_GetVecN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((LogData*)ths)->GetVecN((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_LogData_GetFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((LogData*)ths)->GetFloat((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_LogData_GetString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((LogData*)ths)->GetString((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_LogData_InitBlankData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LogData*)ths)->InitBlankData();
    return rval;}
  static cssEl* cssElCFun_LogData_CompareItems_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((LogData*)ths)->CompareItems(*(LogData*)arg[1]->GetVoidPtrOfType(&TA_LogData)));
    return rval;}
  static cssEl* cssElCFun_float_RArray_Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->Set((int)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->Add((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((float_RArray*)ths)->Insert((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((float_RArray*)ths)->Insert((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_UpdateRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->UpdateRange((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_UpdateAllRange_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->UpdateAllRange();
    return rval;}
  static cssEl* cssElCFun_float_RArray_MaxVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MaxVal(refarg_0));    *arg[1]=(Int)refarg_0;
}
    if(na == 2) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MaxVal(refarg_0, (int)*arg[2]));    *arg[1]=(Int)refarg_0;
}
    if(na == 3) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MaxVal(refarg_0, (int)*arg[2], (int)*arg[3]));    *arg[1]=(Int)refarg_0;
}
    return rval;}
  static cssEl* cssElCFun_float_RArray_AbsMaxVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->AbsMaxVal(refarg_0));    *arg[1]=(Int)refarg_0;
}
    if(na == 2) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->AbsMaxVal(refarg_0, (int)*arg[2]));    *arg[1]=(Int)refarg_0;
}
    if(na == 3) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->AbsMaxVal(refarg_0, (int)*arg[2], (int)*arg[3]));    *arg[1]=(Int)refarg_0;
}
    return rval;}
  static cssEl* cssElCFun_float_RArray_MinVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MinVal(refarg_0));    *arg[1]=(Int)refarg_0;
}
    if(na == 2) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MinVal(refarg_0, (int)*arg[2]));    *arg[1]=(Int)refarg_0;
}
    if(na == 3) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MinVal(refarg_0, (int)*arg[2], (int)*arg[3]));    *arg[1]=(Int)refarg_0;
}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Sum_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->Sum());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Sum((int)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Sum((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Mean_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->Mean());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Mean((int)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Mean((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Var_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->Var());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1], (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1], (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_StdDev_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1], (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1], (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SEM_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1], (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1], (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SSLength_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->SSLength());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->SSLength((int)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->SSLength((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SumSquaresDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_EuclidDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_HammingDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Covar_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Covar(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Covar(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Covar(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Correl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Correl(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Correl(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Correl(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_InnerProd_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_CrossEntropy_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->CrossEntropy(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->CrossEntropy(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->CrossEntropy(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Dist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3], (float)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3], (float)*arg[4], (int)*arg[5]));}
    if(na == 6) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3], (float)*arg[4], (int)*arg[5], (int)*arg[6]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_LargerFurther_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((float_RArray*)ths)->LargerFurther((float_RArray::DistMetric)(int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_Histogram_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->Histogram(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_AggToArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((float_RArray*)ths)->AggToArray(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1);}
    if(na == 3) {
      Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((float_RArray*)ths)->AggToArray(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1, (int)*arg[3]);}
    if(na == 4) {
      Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((float_RArray*)ths)->AggToArray(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1, (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_AggToVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((float_RArray*)ths)->AggToVal(refarg_0));}
    if(na == 2) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((float_RArray*)ths)->AggToVal(refarg_0, (int)*arg[2]));}
    if(na == 3) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((float_RArray*)ths)->AggToVal(refarg_0, (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormLen_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen((float)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen((float)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormSum_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1], (float)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1], (float)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax((float)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax((float)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormAbsMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax((float)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax((float)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SimpleMath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((float_RArray*)ths)->SimpleMath(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));}
    if(na == 2) {
      ((float_RArray*)ths)->SimpleMath(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[2]);}
    if(na == 3) {
      ((float_RArray*)ths)->SimpleMath(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SimpleMathArg_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((float_RArray*)ths)->SimpleMathArg(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec));}
    if(na == 3) {
      ((float_RArray*)ths)->SimpleMathArg(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[3]);}
    if(na == 4) {
      ((float_RArray*)ths)->SimpleMathArg(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Threshold_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold());}
    if(na == 1) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_WritePoint_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((float_RArray*)ths)->WritePoint(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((float_RArray*)ths)->WritePoint(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (float)*arg[4]);}
    if(na == 5) {
      ((float_RArray*)ths)->WritePoint(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (float)*arg[4], (bool)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_RenderLine_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 5) {
      ((float_RArray*)ths)->RenderLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    if(na == 6) {
      ((float_RArray*)ths)->RenderLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], (float)*arg[6]);}
    if(na == 7) {
      ((float_RArray*)ths)->RenderLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], (float)*arg[6], (bool)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_WriteXPoints_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((float_RArray*)ths)->WriteXPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray));}
    if(na == 5) {
      ((float_RArray*)ths)->WriteXPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5]);}
    if(na == 6) {
      ((float_RArray*)ths)->WriteXPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5], (bool)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_WriteYPoints_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((float_RArray*)ths)->WriteYPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray));}
    if(na == 5) {
      ((float_RArray*)ths)->WriteYPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5]);}
    if(na == 6) {
      ((float_RArray*)ths)->WriteYPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5], (bool)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_RenderWideLine_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 6) {
      ((float_RArray*)ths)->RenderWideLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], *(float_RArray*)arg[6]->GetVoidPtrOfType(&TA_float_RArray));}
    if(na == 7) {
      ((float_RArray*)ths)->RenderWideLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], *(float_RArray*)arg[6]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[7]);}
    if(na == 8) {
      ((float_RArray*)ths)->RenderWideLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], *(float_RArray*)arg[6]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[7], (bool)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SafeMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->SafeMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastMatEl1_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastMatEl1((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastEl1_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastEl1((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_GetMatCol_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((float_RArray*)ths)->GetMatCol((int)*arg[1], refarg_1, (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_GetMatRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((float_RArray*)ths)->GetMatRow((int)*arg[1], refarg_1, (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_SafeTriMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->SafeTriMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastTriMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastTriMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_AllocSqMatSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->AllocSqMatSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_AllocTriMatSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->AllocTriMatSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_CopyFmTriMat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->CopyFmTriMat((int)*arg[1], *(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray));
    return rval;}
  static cssEl* cssElCFun_float_RArray_TriDiagMatRed_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->TriDiagMatRed((int)*arg[1], refarg_1, refarg_2));
    return rval;}
  static cssEl* cssElCFun_float_RArray_TriDiagQL_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->TriDiagQL((int)*arg[1], refarg_1, refarg_2));
    return rval;}
  static cssEl* cssElCFun_float_RArray_Eigens_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->Eigens((int)*arg[1], refarg_1));
    return rval;}
  static cssEl* cssElCFun_float_RArray_MDS_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2));}
    if(na == 4) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2, (int)*arg[4]));}
    if(na == 5) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2, (int)*arg[4], (int)*arg[5]));}
    if(na == 6) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2, (int)*arg[4], (int)*arg[5], (bool)*arg[6]));}
    return rval;}
DataArray_impl*		 TAI_DataArray_impl=NULL;
  static cssEl* cssElCFun_DataArray_impl_DecodeName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_1=arg[2]->GetStr();    DataArray_impl::ValType refarg_2=(DataArray_impl::ValType)(int)*arg[3];    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((DataArray_impl*)ths)->DecodeName(arg[1]->GetStr(), refarg_1, refarg_2, refarg_3, refarg_4);
    *arg[2]=(String)refarg_1;    *arg[3]=(Int)refarg_2;    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_ValTypeToStr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((DataArray_impl*)ths)->ValTypeToStr((DataArray_impl::ValType)(int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_is_float_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataArray_impl*)ths)->is_float());
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_is_string_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataArray_impl*)ths)->is_string());
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_displayWidth_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataArray_impl*)ths)->displayWidth());
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_maxColWidth_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataArray_impl*)ths)->maxColWidth());
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_valType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataArray_impl*)ths)->valType();
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_GetValAsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((DataArray_impl*)ths)->GetValAsString((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_GetValAsFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((DataArray_impl*)ths)->GetValAsFloat((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_GetValAsInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataArray_impl*)ths)->GetValAsInt((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_AR_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataArray_impl*)ths)->AR(), 1, &TA_taArray_base);
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_HasDispOption_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataArray_impl*)ths)->HasDispOption((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_DispOptionAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((DataArray_impl*)ths)->DispOptionAfter((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_AddDispOption_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataArray_impl*)ths)->AddDispOption((const char*)*arg[1]);
    return rval;}
taGroup<DataArray_impl>*		 TAI_taGroup_DataArray_impl_=NULL;
  static cssEl* cssElCFun_taGroup_DataArray_impl__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FirstEl(refarg_0), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NextEl(refarg_0), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DataArray_impl>*)ths)->MoveBefore((DataArray_impl*)(void*)*arg[1], (DataArray_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DataArray_impl>*)ths)->MoveAfter((DataArray_impl*)(void*)*arg[1], (DataArray_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FastEl((int)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->DefaultEl(), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Edit_El((DataArray_impl*)(void*)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Leaf((int)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewEl(), 1, &TA_DataArray_impl);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewEl((int)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_DataArray_impl);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Pop(), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Peek(), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->AddUniqNameOld((DataArray_impl*)(void*)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->LinkUniqNameOld((DataArray_impl*)(void*)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
DataTable*		 TAI_DataTable=NULL;
  static cssEl* cssElCFun_DataTable_SetFieldData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    LogData& refarg_0=*(LogData*)arg[1]->GetVoidPtrOfType(&TA_LogData);
    ((DataTable*)ths)->SetFieldData(refarg_0, (int)*arg[2], (DataItem*)(void*)*arg[3], (DataTable*)(void*)*arg[4], (int)*arg[5]);
    return rval;}
  static cssEl* cssElCFun_DataTable_SetFieldHead_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->SetFieldHead((DataItem*)(void*)*arg[1], (DataTable*)(void*)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_DataTable_idx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_2=(int)*arg[3];
    rval=new cssInt((int)((DataTable*)ths)->idx((int)*arg[1], (int)*arg[2], refarg_2));
    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_DataTable_ResetData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->ResetData();
    return rval;}
  static cssEl* cssElCFun_DataTable_RemoveRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->RemoveRow((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataTable_ShiftUp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->ShiftUp((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataTable_AddRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    LogData& refarg_0=*(LogData*)arg[1]->GetVoidPtrOfType(&TA_LogData);
    ((DataTable*)ths)->AddRow(refarg_0);
    return rval;}
  static cssEl* cssElCFun_DataTable_AddBlankRow_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->AddBlankRow();
    return rval;}
  static cssEl* cssElCFun_DataTable_AllocRows_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->AllocRows((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataTable_SetSaveToFile_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->SetSaveToFile((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataTable_AddRowToArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((DataTable*)ths)->AddRowToArray(refarg_0, (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_DataTable_AggRowToArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    Aggregate& refarg_2=*(Aggregate*)arg[3]->GetVoidPtrOfType(&TA_Aggregate);
    ((DataTable*)ths)->AggRowToArray(refarg_0, (int)*arg[2], refarg_2);
    return rval;}
  static cssEl* cssElCFun_DataTable_AggRowToVal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((DataTable*)ths)->AggRowToVal((int)*arg[1], refarg_1));
    return rval;}
  static cssEl* cssElCFun_DataTable_AddArrayToRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((DataTable*)ths)->AddArrayToRow(refarg_0);
    return rval;}
  static cssEl* cssElCFun_DataTable_AggArrayToRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Aggregate& refarg_2=*(Aggregate*)arg[3]->GetVoidPtrOfType(&TA_Aggregate);
    ((DataTable*)ths)->AggArrayToRow(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], refarg_2);
    return rval;}
  static cssEl* cssElCFun_DataTable_PutArrayToRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->PutArrayToRow(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_DataTable_UpdateAllRanges_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->UpdateAllRanges();
    return rval;}
  static cssEl* cssElCFun_DataTable_NewCol_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewCol((DataArray_impl::ValType)(int)*arg[1], (const char*)*arg[2]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewColFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewColFloat((const char*)*arg[1]), 1, &TA_float_Data);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewColInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewColInt((const char*)*arg[1]), 1, &TA_float_Data);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewColString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewColString((const char*)*arg[1]), 1, &TA_String_Data);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewGroupFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewGroupFloat((const char*)*arg[1], (int)*arg[2]), 1, &TA_DataTable);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewGroupInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewGroupInt((const char*)*arg[1], (int)*arg[2]), 1, &TA_DataTable);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewGroupString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewGroupString((const char*)*arg[1], (int)*arg[2]), 1, &TA_DataTable);
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColData_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColData((int)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColData((int)*arg[1], (int)*arg[2]), 1, &TA_DataArray_impl);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColFloatData_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatData((int)*arg[1]), 1, &TA_float_Data);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatData((int)*arg[1], (int)*arg[2]), 1, &TA_float_Data);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColStringData_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringData((int)*arg[1]), 1, &TA_String_Data);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringData((int)*arg[1], (int)*arg[2]), 1, &TA_String_Data);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColFloatArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatArray((int)*arg[1]), 1, &TA_float_RArray);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatArray((int)*arg[1], (int)*arg[2]), 1, &TA_float_RArray);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColStringArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringArray((int)*arg[1]), 1, &TA_String_Array);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringArray((int)*arg[1], (int)*arg[2]), 1, &TA_String_Array);}
    return rval;}
  static cssEl* cssElCFun_DataTable_PutArrayToCol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->PutArrayToCol(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->PutArrayToCol(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetCols_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    LogData& refarg_0=*(LogData*)arg[1]->GetVoidPtrOfType(&TA_LogData);
    ((DataTable*)ths)->SetCols(refarg_0);
    return rval;}
  static cssEl* cssElCFun_DataTable_SetColName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->SetColName((const char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->SetColName((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_AddColDispOpt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->AddColDispOpt((const char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->AddColDispOpt((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetFloatVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((DataTable*)ths)->SetFloatVal((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((DataTable*)ths)->SetFloatVal((float)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetStringVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((DataTable*)ths)->SetStringVal((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((DataTable*)ths)->SetStringVal((const char*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetLastFloatVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->SetLastFloatVal((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->SetLastFloatVal((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetLastStringVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->SetLastStringVal((const char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->SetLastStringVal((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetFloatVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssReal((double)((DataTable*)ths)->GetFloatVal((int)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((DataTable*)ths)->GetFloatVal((int)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetStringVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssString(((DataTable*)ths)->GetStringVal((int)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssString(((DataTable*)ths)->GetStringVal((int)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetValAsString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssString(((DataTable*)ths)->GetValAsString((int)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssString(((DataTable*)ths)->GetValAsString((int)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_DataTable_RowAdding_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->RowAdding();
    return rval;}
  static cssEl* cssElCFun_DataTable_RowAdded_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->RowAdded();
    return rval;}
DataArray<float_RArray>*		 TAI_DataArray_float_RArray_=NULL;
float_Data*		 TAI_float_Data=NULL;
DataArray<DString_Array>*		 TAI_DataArray_DString_Array_=NULL;
String_Data*		 TAI_String_Data=NULL;
ClustLink*		 TAI_ClustLink=NULL;
DA_ViewSpec*		 TAI_DA_ViewSpec=NULL;
  static cssEl* cssElCFun_DA_ViewSpec_UpdateView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DA_ViewSpec*)ths)->UpdateView();
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_SetGpVisibility_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DA_ViewSpec*)ths)->SetGpVisibility((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_CopyToGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DA_ViewSpec*)ths)->CopyToGp((MemberDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_BuildFromDataArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((DA_ViewSpec*)ths)->BuildFromDataArray());}
    if(na == 1) {
      rval=new cssInt((int)((DA_ViewSpec*)ths)->BuildFromDataArray((DataArray_impl*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_ValAsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((DA_ViewSpec*)ths)->ValAsString((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_CleanName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    rval=new cssString(((DA_ViewSpec*)ths)->CleanName(refarg_0));
    *arg[1]=(String)refarg_0;
    return rval;}
taGroup<DA_ViewSpec>*		 TAI_taGroup_DA_ViewSpec_=NULL;
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FirstEl(refarg_0), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NextEl(refarg_0), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DA_ViewSpec>*)ths)->MoveBefore((DA_ViewSpec*)(void*)*arg[1], (DA_ViewSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DA_ViewSpec>*)ths)->MoveAfter((DA_ViewSpec*)(void*)*arg[1], (DA_ViewSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FastEl((int)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->DefaultEl(), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Edit_El((DA_ViewSpec*)(void*)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Leaf((int)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__RootGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->RootGp(), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewEl(), 1, &TA_DA_ViewSpec);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewEl((int)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_DA_ViewSpec);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindName((const char*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Pop(), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Peek(), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->AddUniqNameOld((DA_ViewSpec*)(void*)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->LinkUniqNameOld((DA_ViewSpec*)(void*)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
DT_ViewSpec*		 TAI_DT_ViewSpec=NULL;
  static cssEl* cssElCFun_DT_ViewSpec_BuildFromDataTable_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((DT_ViewSpec*)ths)->BuildFromDataTable());}
    if(na == 1) {
      rval=new cssInt((int)((DT_ViewSpec*)ths)->BuildFromDataTable((DataTable*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_ReBuildFromDataTable_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->ReBuildFromDataTable();
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_SetDispNms_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->SetDispNms((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_RmvNmPrefix_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->RmvNmPrefix();
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_SetVisibility_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->SetVisibility((bool)*arg[1]);
    return rval;}
DA_TextViewSpec*		 TAI_DA_TextViewSpec=NULL;
DA_NetViewSpec*		 TAI_DA_NetViewSpec=NULL;
DA_GridViewSpec*		 TAI_DA_GridViewSpec=NULL;
DT_GridViewSpec*		 TAI_DT_GridViewSpec=NULL;
  static cssEl* cssElCFun_DT_GridViewSpec_UpdateLayout_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((DT_GridViewSpec*)ths)->UpdateLayout());}
    if(na == 1) {
      rval=new cssInt((int)((DT_GridViewSpec*)ths)->UpdateLayout((DT_GridViewSpec::MatrixLayout)(int)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_DT_GridViewSpec_UpdateGeom_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GridViewSpec*)ths)->UpdateGeom();
    return rval;}
  static cssEl* cssElCFun_DT_GridViewSpec_GetMinMaxScale_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((DT_GridViewSpec*)ths)->GetMinMaxScale(refarg_0);}
    if(na == 2) {
      MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((DT_GridViewSpec*)ths)->GetMinMaxScale(refarg_0, (bool)*arg[2]);}
    return rval;}
GraphColSpec*		 TAI_GraphColSpec=NULL;
  static cssEl* cssElCFun_GraphColSpec_def_color_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((GraphColSpec*)ths)->def_color(), 1, &TA_const_iColor);
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_is_axis_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphColSpec*)ths)->is_axis());
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_is_line_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphColSpec*)ths)->is_line());
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_is_string_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphColSpec*)ths)->is_string());
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_setVisible_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphColSpec*)ths)->setVisible((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_GpShareAxis_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphColSpec*)ths)->GpShareAxis();
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_GpSepAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphColSpec*)ths)->GpSepAxes();
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_FindStringCoords_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphColSpec*)ths)->FindStringCoords();
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_SetAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphColSpec*)ths)->SetAxis((AxisSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphColSpec_SetStringCoords_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphColSpec*)ths)->SetStringCoords((GraphColSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_AxisSpec_axis_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((AxisSpec*)ths)->axis();
    return rval;}
  static cssEl* cssElCFun_AxisSpec_def_color_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((AxisSpec*)ths)->def_color(), 1, &TA_const_iColor);
    return rval;}
  static cssEl* cssElCFun_AxisSpec_InitUpdateAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((AxisSpec*)ths)->InitUpdateAxis((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_AxisSpec_Config_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((AxisSpec*)ths)->Config();}
    if(na == 1) {
      ((AxisSpec*)ths)->Config((GraphColSpec*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_AxisSpec_InitData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((AxisSpec*)ths)->InitData();
    return rval;}
  static cssEl* cssElCFun_AxisSpec_InitRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((AxisSpec*)ths)->InitRange((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_AxisSpec_UpdateRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((AxisSpec*)ths)->UpdateRange((float)*arg[1], (float)*arg[2]));
    return rval;}
XAxisSpec*		 TAI_XAxisSpec=NULL;
YAxisSpec*		 TAI_YAxisSpec=NULL;
ZAxisSpec*		 TAI_ZAxisSpec=NULL;
GraphSpec*		 TAI_GraphSpec=NULL;
  static cssEl* cssElCFun_GraphSpec_is3d_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphSpec*)ths)->is3d());
    return rval;}
  static cssEl* cssElCFun_GraphSpec_isUpdatingChildren_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphSpec*)ths)->isUpdatingChildren());
    return rval;}
  static cssEl* cssElCFun_GraphSpec_AssertGraphlets_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->AssertGraphlets();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_FindYAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphSpec*)ths)->FindYAxis((GraphColSpec*)(void*)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_GraphSpec_MakeYAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphSpec*)ths)->MakeYAxis((GraphColSpec*)(void*)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_GraphSpec_FindMakeYAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphSpec*)ths)->FindMakeYAxis((GraphColSpec*)(void*)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_GraphSpec_RemoveAxisBySpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphSpec*)ths)->RemoveAxisBySpec((GraphColSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_GraphSpec_ColorName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((GraphSpec*)ths)->ColorName((int)*arg[1]), 1);
    return rval;}
  static cssEl* cssElCFun_GraphSpec_ColorCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphSpec*)ths)->ColorCount());
    return rval;}
  static cssEl* cssElCFun_GraphSpec_SetBgColor_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->SetBgColor();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_UpdateLineFeatures_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((GraphSpec*)ths)->UpdateLineFeatures();}
    if(na == 1) {
      ((GraphSpec*)ths)->UpdateLineFeatures((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_GraphSpec_SetLineWidths_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->SetLineWidths((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphSpec_SetLineType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->SetLineType((GraphColSpec::LineType)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphSpec_ShareAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->ShareAxes();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_SeparateAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->SeparateAxes();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_CustomAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->CustomAxes();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_StackTraces_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->StackTraces();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_UnStackTraces_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->UnStackTraces();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_StackSharedAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->StackSharedAxes();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_UnStackSharedAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->UnStackSharedAxes();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_ReBuildAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->ReBuildAxes();
    return rval;}
  static cssEl* cssElCFun_GraphSpec_UpdateAfterEdit_ColSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->UpdateAfterEdit_ColSpec((GraphColSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_GraphSpec_UpdateAfterEdit_AxisSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((GraphSpec*)ths)->UpdateAfterEdit_AxisSpec((AxisSpec*)(void*)*arg[1]);
    return rval;}
taList<YAxisSpec>*		 TAI_taList_YAxisSpec_=NULL;
  static cssEl* cssElCFun_taList_YAxisSpec__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<YAxisSpec>*)ths)->MoveBefore((YAxisSpec*)(void*)*arg[1], (YAxisSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<YAxisSpec>*)ths)->MoveAfter((YAxisSpec*)(void*)*arg[1], (YAxisSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->SafeEl((int)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->FastEl((int)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->DefaultEl(), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->Edit_El((YAxisSpec*)(void*)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->FindName((const char*)*arg[1]), 1, &TA_YAxisSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_YAxisSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_YAxisSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_YAxisSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->Pop(), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->Peek(), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->AddUniqNameOld((YAxisSpec*)(void*)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_taList_YAxisSpec__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<YAxisSpec>*)ths)->LinkUniqNameOld((YAxisSpec*)(void*)*arg[1]), 1, &TA_YAxisSpec);
    return rval;}
YAxisSpec_List*		 TAI_YAxisSpec_List=NULL;
  static cssEl* cssElCFun_YAxisSpec_List_FindBySpec_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((YAxisSpec_List*)ths)->FindBySpec((const GraphColSpec*)(void*)*arg[1]), 1, &TA_YAxisSpec);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((YAxisSpec_List*)ths)->FindBySpec((const GraphColSpec*)(void*)*arg[1], (int*)(void*)*arg[2]), 1, &TA_YAxisSpec);}
    return rval;}
GraphletSpec*		 TAI_GraphletSpec=NULL;
taList<GraphletSpec>*		 TAI_taList_GraphletSpec_=NULL;
  static cssEl* cssElCFun_taList_GraphletSpec__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<GraphletSpec>*)ths)->MoveBefore((GraphletSpec*)(void*)*arg[1], (GraphletSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<GraphletSpec>*)ths)->MoveAfter((GraphletSpec*)(void*)*arg[1], (GraphletSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->SafeEl((int)*arg[1]), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->FastEl((int)*arg[1]), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->DefaultEl(), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->Edit_El((GraphletSpec*)(void*)*arg[1]), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->FindName((const char*)*arg[1]), 1, &TA_GraphletSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_GraphletSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_GraphletSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_GraphletSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->Pop(), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->Peek(), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->AddUniqNameOld((GraphletSpec*)(void*)*arg[1]), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_taList_GraphletSpec__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<GraphletSpec>*)ths)->LinkUniqNameOld((GraphletSpec*)(void*)*arg[1]), 1, &TA_GraphletSpec);
    return rval;}
GraphletSpec_List*		 TAI_GraphletSpec_List=NULL;
  static cssEl* cssElCFun_FunLookup_Yval_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FunLookup*)ths)->Yval((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FunLookup_Xval_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FunLookup*)ths)->Xval((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FunLookup_Eval_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FunLookup*)ths)->Eval((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FunLookup_AllocForRange_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookup*)ths)->AllocForRange();
    return rval;}
  static cssEl* cssElCFun_FunLookup_Plot_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((FunLookup*)ths)->Plot(refarg_0);
    return rval;}
  static cssEl* cssElCFun_FunLookup_Convolve_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookup*)ths)->Convolve(*(FunLookup*)arg[1]->GetVoidPtrOfType(&TA_FunLookup), *(FunLookup*)arg[2]->GetVoidPtrOfType(&TA_FunLookup));
    return rval;}
FunLookupND*		 TAI_FunLookupND=NULL;
  static cssEl* cssElCFun_FunLookupND_EvalArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArray((float*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArray((float*)(void*)*arg[1], (int*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_FunLookupND_EvalArgs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5]));}
    if(na == 6) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6]));}
    if(na == 7) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7]));}
    if(na == 8) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7], (float)*arg[8]));}
    if(na == 9) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7], (float)*arg[8], (float)*arg[9]));}
    if(na == 10) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7], (float)*arg[8], (float)*arg[9], (float)*arg[10]));}
    return rval;}
  static cssEl* cssElCFun_FunLookupND_LoadTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((FunLookupND*)ths)->LoadTable(refarg_0);
    return rval;}
  static cssEl* cssElCFun_FunLookupND_ListTable_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((FunLookupND*)ths)->ListTable();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((FunLookupND*)ths)->ListTable(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_FunLookupND_ShiftNorm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookupND*)ths)->ShiftNorm((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FunLookupND_MulNorm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookupND*)ths)->MulNorm((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3Node_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3Node*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3Node_insertChildBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Node*)ths)->insertChildBefore((SoGroup*)(void*)*arg[1], (SoNode*)(void*)*arg[2], (SoNode*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_T3Node_insertChildAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Node*)ths)->insertChildAfter((SoGroup*)(void*)*arg[1], (SoNode*)(void*)*arg[2], (SoNode*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_T3Node_getNodeByName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Node*)ths)->getNodeByName((SoGroup*)(void*)*arg[1], (const char*)*arg[2]), 1, &TA_SoNode);
    return rval;}
  static cssEl* cssElCFun_T3Node_captionFont_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((T3Node*)ths)->captionFont(), 1, &TA_SoFont);}
    if(na == 1) {
      rval=new cssTA((void*)((T3Node*)ths)->captionFont((bool)*arg[1]), 1, &TA_SoFont);}
    return rval;}
  static cssEl* cssElCFun_T3Node_captionNode_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((T3Node*)ths)->captionNode(), 1, &TA_SoAsciiText);}
    if(na == 1) {
      rval=new cssTA((void*)((T3Node*)ths)->captionNode((bool)*arg[1]), 1, &TA_SoAsciiText);}
    return rval;}
  static cssEl* cssElCFun_T3Node_topSeparator_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Node*)ths)->topSeparator(), 1, &TA_SoSeparator);
    return rval;}
  static cssEl* cssElCFun_T3Node_transform_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Node*)ths)->transform(), 1, &TA_SoTransform);
    return rval;}
  static cssEl* cssElCFun_T3Node_shapeSeparator_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Node*)ths)->shapeSeparator(), 1, &TA_SoSeparator);
    return rval;}
  static cssEl* cssElCFun_T3Node_txfm_shape_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Node*)ths)->txfm_shape(), 1, &TA_SoTransform);
    return rval;}
  static cssEl* cssElCFun_T3Node_material_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Node*)ths)->material(), 1, &TA_SoMaterial);
    return rval;}
  static cssEl* cssElCFun_T3Node_childNodes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Node*)ths)->childNodes(), 1, &TA_SoSeparator);
    return rval;}
  static cssEl* cssElCFun_T3Node_caption_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((T3Node*)ths)->caption(), 1);
    return rval;}
  static cssEl* cssElCFun_T3Node_setCaption_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Node*)ths)->setCaption((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3Node_clear_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3Node*)ths)->clear();
    return rval;}
  static cssEl* cssElCFun_T3Node_expanded_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3Node*)ths)->expanded());
    return rval;}
  static cssEl* cssElCFun_T3Node_setExpanded_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Node*)ths)->setExpanded((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3Node_addRemoveChildNode_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Node*)ths)->addRemoveChildNode((SoNode*)(void*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3Color_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Color*)ths)->setValue((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_T3NodeLeaf_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3NodeLeaf*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3NodeParent_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3NodeParent*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_SoFrame_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SoFrame*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_SoFrame_setDimensions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoFrame*)ths)->setDimensions((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_SoFrame_setOrientation_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoFrame*)ths)->setOrientation((SoFrame::Orientation)(int)*arg[1]);
    return rval;}
T3DataView*		 TAI_T3DataView=NULL;
  static cssEl* cssElCFun_T3DataView_GetColText_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((T3DataView*)ths)->GetColText((int)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((T3DataView*)ths)->GetColText((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_T3DataView_ChildQueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_3=(int)*arg[4];    int refarg_4=(int)*arg[5];
    ((T3DataView*)ths)->ChildQueryEditActions((MemberDef*)*arg[1], (const taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], refarg_3, refarg_4);
    *arg[4]=(Int)refarg_3;    *arg[5]=(Int)refarg_4;
    return rval;}
  static cssEl* cssElCFun_T3DataView_ChildEditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->ChildEditAction((MemberDef*)*arg[1], (taBase*)(void*)*arg[2], (taiMimeSource*)(void*)*arg[3], (int)*arg[4]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_QueryEditActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((T3DataView*)ths)->QueryEditActions((const taiMimeSource*)(void*)*arg[1], refarg_1, refarg_2);
    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_T3DataView_EditAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->EditAction((taiMimeSource*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetDataLink_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->GetDataLink(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_T3DataView_UnRef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->UnRef();
    return rval;}
  static cssEl* cssElCFun_T3DataView_UnRefNoDelete_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->UnRefNoDelete();
    return rval;}
  static cssEl* cssElCFun_T3DataView_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((T3DataView*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((T3DataView*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((T3DataView*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((T3DataView*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_T3DataView_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((T3DataView*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((T3DataView*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((T3DataView*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_T3DataView_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((T3DataView*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((T3DataView*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((T3DataView*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_T3DataView_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_T3DataView_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_T3DataView_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_AddDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->AddDataView((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_RemoveDataView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->RemoveDataView((taDataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((T3DataView*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((T3DataView*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((T3DataView*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_T3DataView_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_T3DataView_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_T3DataView_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((T3DataView*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_T3DataView_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_T3DataView_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_T3DataView_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((T3DataView*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssInt((int)((T3DataView*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_T3DataView_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_T3DataView_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_ChildUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    bool refarg_1=(bool)*arg[2];
    ((T3DataView*)ths)->ChildUpdateAfterEdit((taBase*)(void*)*arg[1], refarg_1);
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_T3DataView_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_T3DataView_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_T3DataView_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_addr_data_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->addr_data_link(), 2, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_T3DataView_This_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->This(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_T3DataView_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->link(), 1, &TA_taiDataLink);
    return rval;}
  static cssEl* cssElCFun_T3DataView_DataLinkDestroying_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->DataLinkDestroying((taDataLink*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_DataDataChanged_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->DataDataChanged((taDataLink*)(void*)*arg[1], (int)*arg[2], (void*)(void*)*arg[3], (void*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetDataTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->GetDataTypeDef(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_T3DataView_IsDataView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->IsDataView());
    return rval;}
  static cssEl* cssElCFun_T3DataView_data_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((T3DataView*)ths)->data(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_T3DataView_SetData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->SetData((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_dbu_cnt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->dbu_cnt());
    return rval;}
  static cssEl* cssElCFun_T3DataView_md_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->md(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_T3DataView_par_dbu_cnt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->par_dbu_cnt());
    return rval;}
  static cssEl* cssElCFun_T3DataView_parent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((T3DataView*)ths)->parent(), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetDataMemberDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->GetDataMemberDef(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetLabel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((T3DataView*)ths)->GetLabel());
    return rval;}
  static cssEl* cssElCFun_T3DataView_DataDestroying_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->DataDestroying();
    return rval;}
  static cssEl* cssElCFun_T3DataView_ChildClearing_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->ChildClearing((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_ChildRendered_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->ChildRendered((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_Clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((T3DataView*)ths)->Clear();}
    if(na == 1) {
      ((T3DataView*)ths)->Clear((taDataView*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_T3DataView_CloseChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->CloseChild((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_Render_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->Render();
    return rval;}
  static cssEl* cssElCFun_T3DataView_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_T3DataView_ItemRemoving_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->ItemRemoving((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_par_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->par_link(), 1, &TA_taiDataLink);
    return rval;}
  static cssEl* cssElCFun_T3DataView_par_md_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->par_md(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_T3DataView_host_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->host(), 1, &TA_IDataViewHost);
    return rval;}
  static cssEl* cssElCFun_T3DataView_view_name_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((T3DataView*)ths)->view_name());
    return rval;}
  static cssEl* cssElCFun_T3DataView_widget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->widget(), 1, &TA_QWidget);
    return rval;}
  static cssEl* cssElCFun_T3DataView_EditAction__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ISelectable_PtrList& refarg_0=*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList);
    rval=new cssInt((int)((T3DataView*)ths)->EditAction_(refarg_0, (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_FillContextMenu_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ISelectable_PtrList& refarg_0=*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList);
    ((T3DataView*)ths)->FillContextMenu(refarg_0, (taiMenu*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetClipData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->GetClipData(*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList), (int)*arg[2], (bool)*arg[3]), 1, &TA_taiClipData);
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetEditActions__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->GetEditActions_(*(ISelectable_PtrList*)arg[1]->GetVoidPtrOfType(&TA_ISelectable_PtrList)));
    return rval;}
  static cssEl* cssElCFun_T3DataView_GetMimeItem_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->GetMimeItem(), 1, &TA_taiMimeItem);
    return rval;}
  static cssEl* cssElCFun_T3DataView_RefUnref_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->RefUnref((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_T3DataView_hasChildren_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->hasChildren());
    return rval;}
  static cssEl* cssElCFun_T3DataView_expandable_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3DataView*)ths)->expandable());
    return rval;}
  static cssEl* cssElCFun_T3DataView_setExpandable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->setExpandable((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_transform_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((T3DataView*)ths)->transform(), 1, &TA_FloatTransform);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((T3DataView*)ths)->transform((bool)*arg[1]), 1, &TA_FloatTransform);}
    return rval;}
  static cssEl* cssElCFun_T3DataView_node_so_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataView*)ths)->node_so(), 1, &TA_T3Node);
    return rval;}
  static cssEl* cssElCFun_T3DataView_root_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((T3DataView*)ths)->root(), 1, &TA_T3DataViewRoot);
    return rval;}
  static cssEl* cssElCFun_T3DataView_AddRemoveChildNode_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->AddRemoveChildNode((SoNode*)(void*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_BuildAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->BuildAll();
    return rval;}
  static cssEl* cssElCFun_T3DataView_OnWindowBind_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->OnWindowBind((iT3DataViewer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3DataView_ReInit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->ReInit();
    return rval;}
  static cssEl* cssElCFun_T3DataView_fileNew_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->fileNew();
    return rval;}
  static cssEl* cssElCFun_T3DataView_fileOpen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->fileOpen();
    return rval;}
  static cssEl* cssElCFun_T3DataView_fileSave_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->fileSave();
    return rval;}
  static cssEl* cssElCFun_T3DataView_fileSaveAs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->fileSaveAs();
    return rval;}
  static cssEl* cssElCFun_T3DataView_fileClose_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataView*)ths)->fileClose();
    return rval;}
T3DataViewPar*		 TAI_T3DataViewPar=NULL;
  static cssEl* cssElCFun_T3DataViewPar_CloseChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataViewPar*)ths)->CloseChild((taDataView*)(void*)*arg[1]);
    return rval;}
T3DataViewRoot*		 TAI_T3DataViewRoot=NULL;
iT3ViewspaceWidget*		 TAI_iT3ViewspaceWidget=NULL;
  static cssEl* cssElCFun_iT3ViewspaceWidget_root_so_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iT3ViewspaceWidget*)ths)->root_so(), 1, &TA_SoSeparator);
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_horScrollBar_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((iT3ViewspaceWidget*)ths)->horScrollBar(), 1, &TA_QScrollBar);}
    if(na == 1) {
      rval=new cssTA((void*)((iT3ViewspaceWidget*)ths)->horScrollBar((bool)*arg[1]), 1, &TA_QScrollBar);}
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_setHasHorScrollBar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iT3ViewspaceWidget*)ths)->setHasHorScrollBar((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_verScrollBar_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((iT3ViewspaceWidget*)ths)->verScrollBar(), 1, &TA_QScrollBar);}
    if(na == 1) {
      rval=new cssTA((void*)((iT3ViewspaceWidget*)ths)->verScrollBar((bool)*arg[1]), 1, &TA_QScrollBar);}
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_setHasVerScrollBar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iT3ViewspaceWidget*)ths)->setHasVerScrollBar((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_renderArea_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iT3ViewspaceWidget*)ths)->renderArea(), 1, &TA_SoQtRenderArea);
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_setRenderArea_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iT3ViewspaceWidget*)ths)->setRenderArea((SoQtRenderArea*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_setSceneGraph_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iT3ViewspaceWidget*)ths)->setSceneGraph((SoNode*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iT3ViewspaceWidget_deleteScene_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iT3ViewspaceWidget*)ths)->deleteScene();
    return rval;}
T3DataViewer*		 TAI_T3DataViewer=NULL;
  static cssEl* cssElCFun_T3DataViewer_viewer_win_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3DataViewer*)ths)->viewer_win(), 1, &TA_iT3DataViewer);
    return rval;}
  static cssEl* cssElCFun_T3DataViewer_AddView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3DataViewer*)ths)->AddView((T3DataView*)(void*)*arg[1]);
    return rval;}
taList<T3DataView>*		 TAI_taList_T3DataView_=NULL;
  static cssEl* cssElCFun_taList_T3DataView__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<T3DataView>*)ths)->MoveBefore((T3DataView*)(void*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<T3DataView>*)ths)->MoveAfter((T3DataView*)(void*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->SafeEl((int)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->FastEl((int)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->DefaultEl(), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->Edit_El((T3DataView*)(void*)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->FindName((const char*)*arg[1]), 1, &TA_T3DataView);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_T3DataView);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_T3DataView);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_T3DataView);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->Pop(), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->Peek(), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->AddUniqNameOld((T3DataView*)(void*)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taList_T3DataView__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<T3DataView>*)ths)->LinkUniqNameOld((T3DataView*)(void*)*arg[1]), 1, &TA_T3DataView);
    return rval;}
T3DataView_List*		 TAI_T3DataView_List=NULL;
taPtrList<T3DataView>*		 TAI_taPtrList_T3DataView_=NULL;
  static cssEl* cssElCFun_taPtrList_T3DataView__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->SafeEl((int)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->FastEl((int)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->Edit_El((T3DataView*)(void*)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->FindName((const char*)*arg[1]), 1, &TA_T3DataView);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_T3DataView);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->Pop(), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->Peek(), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->AddUniqNameOld((T3DataView*)(void*)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<T3DataView>*)ths)->LinkUniqNameOld((T3DataView*)(void*)*arg[1]), 1, &TA_T3DataView);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->FindEl((const T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<T3DataView>*)ths)->AddEl((T3DataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<T3DataView>*)ths)->Add((T3DataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->AddUnique((T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->AddUniqNameNew((T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->Insert((T3DataView*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->Replace((int)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->ReplaceEl((T3DataView*)(void*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->ReplaceName((const char*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->RemoveEl((T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->DuplicateEl((T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<T3DataView>*)ths)->Link((T3DataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->LinkUnique((T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->LinkUniqNameNew((T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->InsertLink((T3DataView*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->InsertLink((T3DataView*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->ReplaceLink((int)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->ReplaceLinkEl((T3DataView*)(void*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->ReplaceLinkName((const char*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<T3DataView>*)ths)->Push((T3DataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->MoveEl((T3DataView*)(void*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->Transfer((T3DataView*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->MoveBefore((T3DataView*)(void*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_T3DataView__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<T3DataView>*)ths)->MoveAfter((T3DataView*)(void*)*arg[1], (T3DataView*)(void*)*arg[2]));
    return rval;}
T3DataView_PtrList*		 TAI_T3DataView_PtrList=NULL;
  static cssEl* cssElCFun_T3CBar_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3CBar*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3CBar_blocks_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3CBar*)ths)->blocks());
    return rval;}
  static cssEl* cssElCFun_T3CBar_SetColorScale_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3CBar*)ths)->SetColorScale((ColorScale*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3CBar_SetDimensions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3CBar*)ths)->SetDimensions((float)*arg[1], (float)*arg[2]);
    return rval;}
tabDataTableViewType*		 TAI_tabDataTableViewType=NULL;
  static cssEl* cssElCFun_T3Axis_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3Axis*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3Axis_axis_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3Axis*)ths)->axis();
    return rval;}
  static cssEl* cssElCFun_T3Axis_labelFont_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3Axis*)ths)->labelFont(), 1, &TA_SoFont);
    return rval;}
  static cssEl* cssElCFun_T3Axis_addLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Axis*)ths)->addLabel((const char*)*arg[1], *(iVec3f*)arg[2]->GetVoidPtrOfType(&TA_iVec3f), (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_T3Axis_addLine_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3Axis*)ths)->addLine(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), (const iVec3f)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLine*)ths)->initClass();
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_labelFont_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((T3GraphLine*)ths)->labelFont(), 1, &TA_SoFont);
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_setLineStyle_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((T3GraphLine*)ths)->setLineStyle((T3GraphLine::LineStyle)(int)*arg[1]);}
    if(na == 2) {
      ((T3GraphLine*)ths)->setLineStyle((T3GraphLine::LineStyle)(int)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_valueColorMode_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((T3GraphLine*)ths)->valueColorMode());
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_setValueColorMode_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLine*)ths)->setValueColorMode((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_textAt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLine*)ths)->textAt(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_setDefaultColor_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLine*)ths)->setDefaultColor(*(T3Color*)arg[1]->GetVoidPtrOfType(&TA_T3Color));
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_moveTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLine*)ths)->moveTo(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), *(T3Color*)arg[2]->GetVoidPtrOfType(&TA_T3Color));
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_lineTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLine*)ths)->lineTo(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), *(T3Color*)arg[2]->GetVoidPtrOfType(&TA_T3Color));
    return rval;}
  static cssEl* cssElCFun_T3GraphLine_markerAt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((T3GraphLine*)ths)->markerAt(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), (T3GraphLine::MarkerStyle)(int)*arg[2], *(T3Color*)arg[3]->GetVoidPtrOfType(&TA_T3Color));
    return rval;}
  static cssEl* cssElCFun_T3Graph_initClass_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((T3Graph*)ths)->initClass();
    return rval;}
AxisView*		 TAI_AxisView=NULL;
  static cssEl* cssElCFun_AxisView_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((AxisView*)ths)->New((AxisSpec*)(void*)*arg[1]), 1, &TA_AxisView);
    return rval;}
  static cssEl* cssElCFun_AxisView_axis_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((AxisView*)ths)->axis();
    return rval;}
  static cssEl* cssElCFun_AxisView_axis_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((AxisView*)ths)->axis_spec(), 1, &TA_AxisSpec);
    return rval;}
  static cssEl* cssElCFun_AxisView_ComputeTickIncr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((AxisView*)ths)->ComputeTickIncr();
    return rval;}
  static cssEl* cssElCFun_AxisView_DataToPoint_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_1=(float)*arg[2];
    ((AxisView*)ths)->DataToPoint((float)*arg[1], refarg_1);
    *arg[2]=(Real)refarg_1;
    return rval;}
  static cssEl* cssElCFun_AxisView_InitUpdateAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((AxisView*)ths)->InitUpdateAxis((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_AxisView_GetMin_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((AxisView*)ths)->GetMin());
    return rval;}
  static cssEl* cssElCFun_AxisView_GetMax_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((AxisView*)ths)->GetMax());
    return rval;}
  static cssEl* cssElCFun_AxisView_GetRange_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((AxisView*)ths)->GetRange());
    return rval;}
  static cssEl* cssElCFun_AxisView_UpdateAxis_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((AxisView*)ths)->UpdateAxis();
    return rval;}
GraphLine*		 TAI_GraphLine=NULL;
  static cssEl* cssElCFun_GraphLine_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphLine*)ths)->New((GraphColSpec*)(void*)*arg[1]), 1, &TA_GraphLine);
    return rval;}
  static cssEl* cssElCFun_GraphLine_x_axis_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphLine*)ths)->x_axis_spec(), 1, &TA_XAxisSpec);
    return rval;}
  static cssEl* cssElCFun_GraphLine_y_axis_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphLine*)ths)->y_axis_spec(), 1, &TA_YAxisSpec);
    return rval;}
  static cssEl* cssElCFun_GraphLine_z_axis_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphLine*)ths)->z_axis_spec(), 1, &TA_ZAxisSpec);
    return rval;}
  static cssEl* cssElCFun_GraphLine_col_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphLine*)ths)->col_spec(), 1, &TA_GraphColSpec);
    return rval;}
  static cssEl* cssElCFun_GraphLine_graph_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphLine*)ths)->graph_spec(), 1, &TA_GraphSpec);
    return rval;}
  static cssEl* cssElCFun_GraphLine_DataToPoint_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    iVec3f& refarg_1=*(iVec3f*)arg[2]->GetVoidPtrOfType(&TA_iVec3f);
    ((GraphLine*)ths)->DataToPoint(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), refarg_1);
    return rval;}
  static cssEl* cssElCFun_GraphLine_Redraw_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphLine*)ths)->Redraw();
    return rval;}
  static cssEl* cssElCFun_GraphLine_DrawLastPoint_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphLine*)ths)->DrawLastPoint());
    return rval;}
  static cssEl* cssElCFun_GraphLine_GetValueColor_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((GraphLine*)ths)->GetValueColor((float)*arg[1]), 1, &TA_const_iColor);
    return rval;}
  static cssEl* cssElCFun_GraphLine_GetTraceColor_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((GraphLine*)ths)->GetTraceColor((int)*arg[1]), 1, &TA_const_iColor);
    return rval;}
GraphView*		 TAI_GraphView=NULL;
  static cssEl* cssElCFun_GraphView_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphView*)ths)->New((GraphletSpec*)(void*)*arg[1]), 1, &TA_GraphView);
    return rval;}
  static cssEl* cssElCFun_GraphView_graphlet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphView*)ths)->graphlet(), 1, &TA_GraphletSpec);
    return rval;}
  static cssEl* cssElCFun_GraphView_graph_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphView*)ths)->graph_spec(), 1, &TA_GraphSpec);
    return rval;}
  static cssEl* cssElCFun_GraphView_Redraw_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphView*)ths)->Redraw();
    return rval;}
GraphViews*		 TAI_GraphViews=NULL;
  static cssEl* cssElCFun_GraphViews_New_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphViews*)ths)->New((GraphSpec*)(void*)*arg[1]), 1, &TA_GraphViews);
    return rval;}
  static cssEl* cssElCFun_GraphViews_graph_spec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((GraphViews*)ths)->graph_spec(), 1, &TA_GraphSpec);
    return rval;}
  static cssEl* cssElCFun_GraphViews_bar_so_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((GraphViews*)ths)->bar_so(), 1, &TA_T3CBar);
    return rval;}
  static cssEl* cssElCFun_GraphViews_AddLastPoint_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((GraphViews*)ths)->AddLastPoint());
    return rval;}
  static cssEl* cssElCFun_GraphViews_Redraw_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((GraphViews*)ths)->Redraw();
    return rval;}

// Type Data

static int FontSpec::* TA_FontSpec_MbrOff;
static MemberDef_data TA_FontSpec_MemberDef[]={
  {&TA_taString,NULL,"pattern"," DEPRECATED the name of the font","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_FontSpec_MbrOff=(int FontSpec::*)(&FontSpec::pattern))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FontSpec_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_FontSpec_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_FontSpec_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_FontSpec_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_FontSpec_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_FontSpec_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_FontSpec_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_FontSpec_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_FontSpec_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_FontSpec_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_FontSpec_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_FontSpec_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_FontSpec_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_FontSpec_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_FontSpec_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_FontSpec_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_FontSpec_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_FontSpec_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_FontSpec_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_FontSpec_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_FontSpec_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_FontSpec_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_FontSpec_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_FontSpec_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_FontSpec_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_FontSpec_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_FontSpec_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_FontSpec_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_FontSpec_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_FontSpec_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_FontSpec_setBold_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_FontSpec_setItalic_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_FontSpec_setPointSize_MethArgs[]={
  {&TA_int,NULL,"value",""},
  NULL};
static MethodArgs_data TA_FontSpec_setStretch_MethArgs[]={
  {&TA_int,NULL,"value",""},
  NULL};
static MethodArgs_data TA_FontSpec_setUnderline_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_FontSpec_copy_MethArgs[]={
  {&TA_const_iFont_ref,NULL,"src",""},
  NULL};
static MethodArgs_data TA_FontSpec_setRawName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"raw_name",""},
  NULL};
static MethodArgs_data TA_FontSpec_SetFont_MethArgs[]={
  {&TA_char_ptr,NULL,"fn",""},
  NULL};
static MethodArgs_data TA_FontSpec_SetFontSize_MethArgs[]={
  {&TA_int,NULL,"point_size"," 10"},
  NULL};
static MethodArgs_data TA_FontSpec_SetTextG_MethArgs[]={
  {&TA_NoScale_Text_G_ptr,NULL,"txg",""},
  NULL};
static MethodDef_data TA_FontSpec_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_FontSpec_GetColText_stub,TA_FontSpec_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_FontSpec_ChildQueryEditActions_stub,TA_FontSpec_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_FontSpec_ChildEditAction_stub,TA_FontSpec_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_FontSpec_QueryEditActions_stub,TA_FontSpec_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_FontSpec_EditAction_stub,TA_FontSpec_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_UnSafeCopy_stub,TA_FontSpec_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_CastCopyTo_stub,TA_FontSpec_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_FontSpec_GetOwner_stub,TA_FontSpec_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_FontSpec_GetPath_stub,TA_FontSpec_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_FontSpec_FindFromPath_stub,TA_FontSpec_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_FontSpec_New_stub,TA_FontSpec_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_StructUpdate_stub,TA_FontSpec_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_DataUpdate_stub,TA_FontSpec_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_AddDataView_stub,TA_FontSpec_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_RemoveDataView_stub,TA_FontSpec_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_FontSpec_InheritsFrom_stub,TA_FontSpec_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_FontSpec_GetEnumString_stub,TA_FontSpec_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_FontSpec_GetEnumVal_stub,TA_FontSpec_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_FontSpec_Load_stub,TA_FontSpec_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_FontSpec_Save_stub,TA_FontSpec_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_FontSpec_SaveAs_stub,TA_FontSpec_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_FontSpec_ReShowEdit_stub,TA_FontSpec_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_CopyFrom_stub,TA_FontSpec_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_CopyTo_stub,TA_FontSpec_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_FontSpec_ChildUpdateAfterEdit_stub,TA_FontSpec_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_ChangeMyType_stub,TA_FontSpec_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_FontSpec_SelectForEdit_stub,TA_FontSpec_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_FontSpec_SelectFunForEdit_stub,TA_FontSpec_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_CallFun_stub,TA_FontSpec_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_SetAdapter_stub,TA_FontSpec_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_addr_data_link_stub,NULL},
  {&TA_bool,NULL,"bold","","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_bold_stub,NULL},
  {&TA_void,NULL,"setBold","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_setBold_stub,TA_FontSpec_setBold_MethArgs},
  {&TA_bool,NULL,"italic","","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_italic_stub,NULL},
  {&TA_void,NULL,"setItalic","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_setItalic_stub,TA_FontSpec_setItalic_MethArgs},
  {&TA_void,NULL,"setPointSize","","","",
    1,1,-1,0,NULL,cssElCFun_FontSpec_setPointSize_stub,TA_FontSpec_setPointSize_MethArgs},
  {&TA_void,NULL,"setStretch","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_setStretch_stub,TA_FontSpec_setStretch_MethArgs},
  {&TA_bool,NULL,"underline","","","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_underline_stub,NULL},
  {&TA_void,NULL,"setUnderline","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_setUnderline_stub,TA_FontSpec_setUnderline_MethArgs},
  {&TA_void,NULL,"copy","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_copy_stub,TA_FontSpec_copy_MethArgs},
  {&TA_void,NULL,"setRawName","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_setRawName_stub,TA_FontSpec_setRawName_MethArgs},
  {&TA_void,NULL,"SelectFont"," opens font selection dialog","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_SelectFont_stub,NULL},
  {&TA_void,NULL,"SetFont","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_SetFont_stub,TA_FontSpec_SetFont_MethArgs},
  {&TA_void,NULL,"SetFontSize"," set font to given point size","BUTTON ","",
    0,1,0,0,NULL,cssElCFun_FontSpec_SetFontSize_stub,TA_FontSpec_SetFontSize_MethArgs},
  {&TA_void,NULL,"SetTextG"," set the text_g to a new one","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_SetTextG_stub,TA_FontSpec_SetTextG_MethArgs},
  NULL};
static int ViewLabel::* TA_ViewLabel_MbrOff;
static MemberDef_data TA_ViewLabel_MemberDef[]={
  {&TA_FontSpec,NULL,"spec"," specification for the font","EDIT_INLINE ","",
    *((ta_memb_ptr*)&(TA_ViewLabel_MbrOff=(int ViewLabel::*)(&ViewLabel::spec))),0,NULL,0},
  {&TA_Xform_ptr,NULL,"label_xform"," xform for name label","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ViewLabel_MbrOff=(int ViewLabel::*)(&ViewLabel::label_xform))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ViewLabel_SetLabelXform_MethArgs[]={
  {&TA_Xform_ptr,NULL,"xf",""},
  NULL};
static MethodDef_data TA_ViewLabel_MethodDef[]={
  {&TA_void,NULL,"GetMasterViewer"," have to create an overloaded one of these for each type of view label..","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_GetMasterViewer_stub,NULL},
  {&TA_void,NULL,"SetLabelXform"," ","HIDDEN ","",
    0,1,-1,0,NULL,cssElCFun_ViewLabel_SetLabelXform_stub,TA_ViewLabel_SetLabelXform_MethArgs},
  {&TA_void,NULL,"XFontSel"," launch xfontsel program to find desired font pattern","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_XFontSel_stub,NULL},
  {&TA_void,NULL,"MakeText"," make text object and insert into view","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_MakeText_stub,NULL},
  {&TA_void,NULL,"AddToView"," add text object to view","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_AddToView_stub,NULL},
  {&TA_bool,NULL,"UpdateView"," update the view with any changes","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_UpdateView_stub,NULL},
  {&TA_void,NULL,"RemoveFromView"," remove from view","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_RemoveFromView_stub,NULL},
  NULL};
static EnumDef_data TA_taList_ViewLabel__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__MoveBefore_MethArgs[]={
  {NULL,"::ViewLabel_ptr","trg",""},
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__MoveAfter_MethArgs[]={
  {NULL,"::ViewLabel_ptr","trg",""},
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__Edit_El_MethArgs[]={
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__AddUniqNameOld_MethArgs[]={
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__LinkUniqNameOld_MethArgs[]={
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_ViewLabel__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_ViewLabel__MoveBefore_stub,TA_taList_ViewLabel__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_ViewLabel__MoveAfter_stub,TA_taList_ViewLabel__MoveAfter_MethArgs},
  {NULL,"::ViewLabel_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__SafeEl_stub,TA_taList_ViewLabel__SafeEl_MethArgs},
  {NULL,"::ViewLabel_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__FastEl_stub,TA_taList_ViewLabel__FastEl_MethArgs},
  {NULL,"::ViewLabel_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_ViewLabel__DefaultEl_stub,NULL},
  {NULL,"::ViewLabel_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__Edit_El_stub,TA_taList_ViewLabel__Edit_El_MethArgs},
  {NULL,"::ViewLabel_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_ViewLabel__FindName_stub,TA_taList_ViewLabel__FindName_MethArgs},
  {NULL,"::ViewLabel_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_ViewLabel__FindType_stub,TA_taList_ViewLabel__FindType_MethArgs},
  {NULL,"::ViewLabel_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_ViewLabel__Pop_stub,NULL},
  {NULL,"::ViewLabel_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_ViewLabel__Peek_stub,NULL},
  {NULL,"::ViewLabel_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__AddUniqNameOld_stub,TA_taList_ViewLabel__AddUniqNameOld_MethArgs},
  {NULL,"::ViewLabel_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__LinkUniqNameOld_stub,TA_taList_ViewLabel__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_taList_Xform__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_Xform__MoveBefore_MethArgs[]={
  {NULL,"::Xform_ptr","trg",""},
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__MoveAfter_MethArgs[]={
  {NULL,"::Xform_ptr","trg",""},
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_Xform__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_Xform__Edit_El_MethArgs[]={
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Xform__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Xform__AddUniqNameOld_MethArgs[]={
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_Xform__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_Xform__MoveBefore_stub,TA_taList_Xform__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_Xform__MoveAfter_stub,TA_taList_Xform__MoveAfter_MethArgs},
  {NULL,"::Xform_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_Xform__SafeEl_stub,TA_taList_Xform__SafeEl_MethArgs},
  {NULL,"::Xform_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_Xform__FastEl_stub,TA_taList_Xform__FastEl_MethArgs},
  {NULL,"::Xform_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_Xform__DefaultEl_stub,NULL},
  {NULL,"::Xform_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_Xform__Edit_El_stub,TA_taList_Xform__Edit_El_MethArgs},
  {NULL,"::Xform_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_Xform__FindName_stub,TA_taList_Xform__FindName_MethArgs},
  {NULL,"::Xform_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_Xform__FindType_stub,TA_taList_Xform__FindType_MethArgs},
  {NULL,"::Xform_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_Xform__Pop_stub,NULL},
  {NULL,"::Xform_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_Xform__Peek_stub,NULL},
  {NULL,"::Xform_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_Xform__AddUniqNameOld_stub,TA_taList_Xform__AddUniqNameOld_MethArgs},
  {NULL,"::Xform_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_Xform__LinkUniqNameOld_stub,TA_taList_Xform__LinkUniqNameOld_MethArgs},
  NULL};
static int RndSeed::* TA_RndSeed_MbrOff;
static MemberDef_data TA_RndSeed_MemberDef[]={
  {&TA_long_Array,NULL,"seed"," the seed, 624 elements long","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RndSeed_MbrOff=(int RndSeed::*)(&RndSeed::seed))),0,NULL,0},
  {&TA_int,NULL,"mti"," the index into the seed, also needs to be saved","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RndSeed_MbrOff=(int RndSeed::*)(&RndSeed::mti))),0,NULL,0},
  NULL};
static MethodArgs_data TA_RndSeed_Init_MethArgs[]={
  {&TA_ulong,NULL,"i",""},
  NULL};
static MethodDef_data TA_RndSeed_MethodDef[]={
  {&TA_void,NULL,"NewSeed"," set the seed to a new random value (based on time and process id)","","",
    0,0,-1,0,NULL,cssElCFun_RndSeed_NewSeed_stub,NULL},
  {&TA_void,NULL,"OldSeed"," restore current seed to random num generator","","",
    0,0,-1,0,NULL,cssElCFun_RndSeed_OldSeed_stub,NULL},
  {&TA_void,NULL,"GetCurrent"," get the current seed in use by the generator","","",
    0,0,-1,0,NULL,cssElCFun_RndSeed_GetCurrent_stub,NULL},
  {&TA_void,NULL,"Init"," initialize the seed based on given initializer","","",
    0,1,-1,0,NULL,cssElCFun_RndSeed_Init_stub,TA_RndSeed_Init_MethArgs},
  NULL};
static EnumDef_data TA_Random_Type[]={
  {"UNIFORM"," uniform with var = half-range","",0},
  {"BINOMIAL"," binomial with var = p, par = n","",1},
  {"POISSON"," poisson with lambda = var","",2},
  {"GAMMA"," gamma with var and par = stages","",3},
  {"GAUSSIAN"," normal with var","",4},
  {"NONE"," just the mean","",5},
  NULL};
static int Random::* TA_Random_MbrOff;
static MemberDef_data TA_Random_MemberDef[]={
  {NULL,"::Type","type"," type of random variable to generate","","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::type))),0,NULL,0},
  {&TA_float,NULL,"mean"," mean of random distribution","","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::mean))),0,NULL,0},
  {&TA_float,NULL,"var"," 'varibility' parameter for the random numbers (gauss = SD, not variance; uniform = half-range)","CONDEDIT_OFF_type:NONE ","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::var))),0,NULL,0},
  {&TA_float,NULL,"par"," extra parameter for distribution (depends on each one)","CONDEDIT_ON_type:GAMMA,BINOMIAL ","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::par))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Random_IntZeroN_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_Random_Range_MethArgs[]={
  {&TA_float,NULL,"rng",""},
  NULL};
static MethodArgs_data TA_Random_Uniform_MethArgs[]={
  {&TA_float,NULL,"half_rng",""},
  NULL};
static MethodArgs_data TA_Random_Binom_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_float,NULL,"p",""},
  NULL};
static MethodArgs_data TA_Random_Poisson_MethArgs[]={
  {&TA_float,NULL,"l",""},
  NULL};
static MethodArgs_data TA_Random_Gamma_MethArgs[]={
  {&TA_float,NULL,"var",""},
  {&TA_int,NULL,"j",""},
  NULL};
static MethodArgs_data TA_Random_Gauss_MethArgs[]={
  {&TA_float,NULL,"var",""},
  NULL};
static MethodArgs_data TA_Random_UniformDen_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"half_rng",""},
  NULL};
static MethodArgs_data TA_Random_BinomDen_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"j",""},
  {&TA_float,NULL,"p",""},
  NULL};
static MethodArgs_data TA_Random_PoissonDen_MethArgs[]={
  {&TA_int,NULL,"j",""},
  {&TA_float,NULL,"l",""},
  NULL};
static MethodArgs_data TA_Random_GammaDen_MethArgs[]={
  {&TA_int,NULL,"j",""},
  {&TA_float,NULL,"l",""},
  {&TA_float,NULL,"t",""},
  NULL};
static MethodArgs_data TA_Random_GaussDen_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"var",""},
  NULL};
static MethodArgs_data TA_Random_Density_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodDef_data TA_Random_MethodDef[]={
  {&TA_int,NULL,"IntZeroN"," uniform random integer in the range between 0 and n, exclusive of n: [0,n)","","",
    0,1,-1,1,(ta_void_fun)(Random::IntZeroN),cssElCFun_Random_IntZeroN_stub,TA_Random_IntZeroN_MethArgs},
  {&TA_float,NULL,"ZeroOne"," uniform random number between zero and one (inclusive of 1 due to rounding!)","","",
    0,0,-1,1,(ta_void_fun)(Random::ZeroOne),cssElCFun_Random_ZeroOne_stub,NULL},
  {&TA_float,NULL,"Range"," uniform random number with given range centered at 0","","",
    0,1,-1,1,(ta_void_fun)(Random::Range),cssElCFun_Random_Range_stub,TA_Random_Range_MethArgs},
  {&TA_float,NULL,"Uniform"," uniform random number with given half_range (var) centered at 0","","",
    0,1,-1,1,(ta_void_fun)(Random::Uniform),cssElCFun_Random_Uniform_stub,TA_Random_Uniform_MethArgs},
  {&TA_float,NULL,"Binom"," binomial with n trials (par) each of probability p (var)","","",
    0,2,-1,1,(ta_void_fun)(Random::Binom),cssElCFun_Random_Binom_stub,TA_Random_Binom_MethArgs},
  {&TA_float,NULL,"Poisson"," poisson with parameter l (var)","","",
    0,1,-1,1,(ta_void_fun)(Random::Poisson),cssElCFun_Random_Poisson_stub,TA_Random_Poisson_MethArgs},
  {&TA_float,NULL,"Gamma"," gamma with given variance, number of exponential stages (par)","","",
    0,2,-1,1,(ta_void_fun)(Random::Gamma),cssElCFun_Random_Gamma_stub,TA_Random_Gamma_MethArgs},
  {&TA_float,NULL,"Gauss"," gaussian (normal) random number with given variance","","",
    0,1,-1,1,(ta_void_fun)(Random::Gauss),cssElCFun_Random_Gauss_stub,TA_Random_Gauss_MethArgs},
  {&TA_float,NULL,"UniformDen"," uniform density at x with given half_range (var) centered at 0 (subtr mean)","","",
    0,2,-1,1,(ta_void_fun)(Random::UniformDen),cssElCFun_Random_UniformDen_stub,TA_Random_UniformDen_MethArgs},
  {&TA_float,NULL,"BinomDen"," binomial density at j with n trials (par) each of probability p (var)","","",
    0,3,-1,1,(ta_void_fun)(Random::BinomDen),cssElCFun_Random_BinomDen_stub,TA_Random_BinomDen_MethArgs},
  {&TA_float,NULL,"PoissonDen"," poisson density with parameter l (var)","","",
    0,2,-1,1,(ta_void_fun)(Random::PoissonDen),cssElCFun_Random_PoissonDen_stub,TA_Random_PoissonDen_MethArgs},
  {&TA_float,NULL,"GammaDen"," gamma density at time t with given number of stages (par), lambda (var)","","",
    0,3,-1,1,(ta_void_fun)(Random::GammaDen),cssElCFun_Random_GammaDen_stub,TA_Random_GammaDen_MethArgs},
  {&TA_float,NULL,"GaussDen"," gaussian (normal) density for given variance (0 mean)","","",
    0,2,-1,1,(ta_void_fun)(Random::GaussDen),cssElCFun_Random_GaussDen_stub,TA_Random_GaussDen_MethArgs},
  {&TA_float,NULL,"Gen"," generate a random variable according to current parameters","","",
    0,0,-1,0,NULL,cssElCFun_Random_Gen_stub,NULL},
  {&TA_float,NULL,"Density"," get density of random variable according to current params","","",
    0,1,-1,0,NULL,cssElCFun_Random_Density_stub,TA_Random_Density_MethArgs},
  NULL};
static int TimeUsed::* TA_TimeUsed_MbrOff;
static MemberDef_data TA_TimeUsed_MemberDef[]={
  {&TA_bool,NULL,"rec"," flag that determines whether to record timing information: OFF by default","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::rec))),0,NULL,0},
  {&TA_long,NULL,"usr"," user clock ticks used","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::usr))),0,NULL,0},
  {&TA_long,NULL,"sys"," system clock ticks used","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::sys))),0,NULL,0},
  {&TA_long,NULL,"tot"," total time ticks used (all clock ticks on the CPU)","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::tot))),0,NULL,0},
  {&TA_long,NULL,"n"," number of times time used collected using GetUsed","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::n))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TimeUsed_GetUsed_MethArgs[]={
  {&TA_const_TimeUsed_ref,NULL,"start",""},
  NULL};
static MethodDef_data TA_TimeUsed_MethodDef[]={
  {&TA_void,NULL,"InitTimes"," initialize the times","","",
    0,0,-1,0,NULL,cssElCFun_TimeUsed_InitTimes_stub,NULL},
  {&TA_void,NULL,"GetTimes"," get the clock ticks used to this point","","",
    0,0,-1,0,NULL,cssElCFun_TimeUsed_GetTimes_stub,NULL},
  {&TA_void,NULL,"GetUsed"," get amount of time used by subtracting start from current time and adding to me, and incrementing n","","",
    0,1,-1,0,NULL,cssElCFun_TimeUsed_GetUsed_stub,TA_TimeUsed_GetUsed_MethArgs},
  {&TA_taString,NULL,"GetString"," get string output as seconds and fractions of seconds","","",
    0,0,-1,0,NULL,cssElCFun_TimeUsed_GetString_stub,NULL},
  NULL};
static int TwoDCoord::* TA_TwoDCoord_MbrOff;
static MemberDef_data TA_TwoDCoord_MemberDef[]={
  {&TA_int,NULL,"x"," horizontal","","",
    *((ta_memb_ptr*)&(TA_TwoDCoord_MbrOff=(int TwoDCoord::*)(&TwoDCoord::x))),0,NULL,0},
  {&TA_int,NULL,"y"," vertical","","",
    *((ta_memb_ptr*)&(TA_TwoDCoord_MbrOff=(int TwoDCoord::*)(&TwoDCoord::y))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TwoDCoord_SetXY_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_GetXY_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_OrEq_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_SqDist_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Dist_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Sgn_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Absv_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Min_MethArgs[]={
  {&TA_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Max_MethArgs[]={
  {&TA_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_FitN_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_SetGtEq_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_SetLtEq_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_WrapClipOne_MethArgs[]={
  {&TA_bool,NULL,"wrap",""},
  {&TA_int_ref,NULL,"c",""},
  {&TA_int,NULL,"max",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_WrapClip_MethArgs[]={
  {&TA_bool,NULL,"wrap",""},
  {&TA_const_TwoDCoord_ref,NULL,"max",""},
  NULL};
static MethodDef_data TA_TwoDCoord_MethodDef[]={
  {&TA_bool,NULL,"isZero","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_isZero_stub,NULL},
  {&TA_void,NULL,"SetXY","","","",
    1,2,-1,0,NULL,cssElCFun_TwoDCoord_SetXY_stub,TA_TwoDCoord_SetXY_MethArgs},
  {&TA_void,NULL,"GetXY","","","",
    0,2,-1,0,NULL,cssElCFun_TwoDCoord_GetXY_stub,TA_TwoDCoord_GetXY_MethArgs},
  {&TA_bool,NULL,"OrEq","","","",
    1,1,-1,0,NULL,cssElCFun_TwoDCoord_OrEq_stub,TA_TwoDCoord_OrEq_MethArgs},
  {&TA_int,NULL,"SqMag"," squared magnitude of vector","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_SqMag_stub,NULL},
  {&TA_float,NULL,"Mag","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Mag_stub,NULL},
  {&TA_float,NULL,"SqDist","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_SqDist_stub,TA_TwoDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_Dist_stub,TA_TwoDCoord_Dist_MethArgs},
  {&TA_int,NULL,"Sum","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Sum_stub,NULL},
  {&TA_int,NULL,"Sgn","","","",
    0,1,-1,1,(ta_void_fun)(TwoDCoord::Sgn),cssElCFun_TwoDCoord_Sgn_stub,TA_TwoDCoord_Sgn_MethArgs},
  {&TA_int,NULL,"Absv","","","",
    0,1,-1,1,(ta_void_fun)(TwoDCoord::Absv),cssElCFun_TwoDCoord_Absv_stub,TA_TwoDCoord_Absv_MethArgs},
  {&TA_void,NULL,"Invert","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Invert_stub,NULL},
  {&TA_void,NULL,"SumNorm","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_SumNorm_stub,NULL},
  {&TA_void,NULL,"Abs","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Abs_stub,NULL},
  {&TA_void,NULL,"Min","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_Min_stub,TA_TwoDCoord_Min_MethArgs},
  {&TA_void,NULL,"Max","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_Max_stub,TA_TwoDCoord_Max_MethArgs},
  {&TA_int,NULL,"Product","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Product_stub,NULL},
  {&TA_int,NULL,"MaxVal","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_MaxVal_stub,NULL},
  {&TA_int,NULL,"MinVal","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_MinVal_stub,NULL},
  {&TA_taString,NULL,"GetStr","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_GetStr_stub,NULL},
  {&TA_bool,NULL,"FitN"," adjust x and y to fit x total elements","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_FitN_stub,TA_TwoDCoord_FitN_MethArgs},
  {&TA_void,NULL,"SetGtEq"," set each to be greater than or equal to n","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_SetGtEq_stub,TA_TwoDCoord_SetGtEq_MethArgs},
  {&TA_void,NULL,"SetLtEq"," set each to be less than or equal to n","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_SetLtEq_stub,TA_TwoDCoord_SetLtEq_MethArgs},
  {&TA_bool,NULL,"WrapClipOne"," wrap-around or clip one dimension, true if clipped (coord set to -1)","","",
    0,3,-1,1,(ta_void_fun)(TwoDCoord::WrapClipOne),cssElCFun_TwoDCoord_WrapClipOne_stub,TA_TwoDCoord_WrapClipOne_MethArgs},
  {&TA_bool,NULL,"WrapClip"," wrap-around or clip coordinates within 0,0 - max range, true if clipped","","",
    0,2,-1,0,NULL,cssElCFun_TwoDCoord_WrapClip_stub,TA_TwoDCoord_WrapClip_MethArgs},
  NULL};
static int TDCoord::* TA_TDCoord_MbrOff;
static MemberDef_data TA_TDCoord_MemberDef[]={
  {&TA_int,NULL,"z"," depth","","",
    *((ta_memb_ptr*)&(TA_TDCoord_MbrOff=(int TDCoord::*)(&TDCoord::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TDCoord_OrEq_MethArgs[]={
  {&TA_const_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_SqDist_MethArgs[]={
  {&TA_const_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_Dist_MethArgs[]={
  {&TA_const_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_Sgn_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TDCoord_Absv_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TDCoord_Min_MethArgs[]={
  {&TA_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_Max_MethArgs[]={
  {&TA_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_WrapClip_MethArgs[]={
  {&TA_bool,NULL,"wrap",""},
  {&TA_const_TDCoord_ref,NULL,"max",""},
  NULL};
static MethodArgs_data TA_TDCoord_SetXYZ_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  {&TA_float,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_TDCoord_GetXYZ_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  {&TA_float_ref,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_TDCoord_FitNinXY_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodDef_data TA_TDCoord_MethodDef[]={
  {&TA_bool,NULL,"OrEq","","","",
    3,1,-1,0,NULL,cssElCFun_TDCoord_OrEq_stub,TA_TDCoord_OrEq_MethArgs},
  {&TA_float,NULL,"SqDist","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_SqDist_stub,TA_TDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_Dist_stub,TA_TDCoord_Dist_MethArgs},
  {&TA_int,NULL,"Sgn","","","",
    0,1,-1,1,(ta_void_fun)(TDCoord::Sgn),cssElCFun_TDCoord_Sgn_stub,TA_TDCoord_Sgn_MethArgs},
  {&TA_int,NULL,"Absv","","","",
    0,1,-1,1,(ta_void_fun)(TDCoord::Absv),cssElCFun_TDCoord_Absv_stub,TA_TDCoord_Absv_MethArgs},
  {&TA_void,NULL,"Min","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_Min_stub,TA_TDCoord_Min_MethArgs},
  {&TA_void,NULL,"Max","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_Max_stub,TA_TDCoord_Max_MethArgs},
  {&TA_bool,NULL,"WrapClip"," wrap-around or clip coordinates within 0,0 - max range, true if clipped wrap-around or clip coordinates within 0,0 - max range, -1 if clipped","","",
    1,2,-1,0,NULL,cssElCFun_TDCoord_WrapClip_stub,TA_TDCoord_WrapClip_MethArgs},
  {&TA_void,NULL,"SetXYZ","","","",
    1,3,-1,0,NULL,cssElCFun_TDCoord_SetXYZ_stub,TA_TDCoord_SetXYZ_MethArgs},
  {&TA_void,NULL,"GetXYZ","","","",
    0,3,-1,0,NULL,cssElCFun_TDCoord_GetXYZ_stub,TA_TDCoord_GetXYZ_MethArgs},
  {&TA_bool,NULL,"FitNinXY"," adjust x and y to fit x total elements","","",
    0,1,-1,0,NULL,cssElCFun_TDCoord_FitNinXY_stub,TA_TDCoord_FitNinXY_MethArgs},
  NULL};
static int FloatTwoDCoord::* TA_FloatTwoDCoord_MbrOff;
static MemberDef_data TA_FloatTwoDCoord_MemberDef[]={
  {&TA_float,NULL,"x"," horizontal","","",
    *((ta_memb_ptr*)&(TA_FloatTwoDCoord_MbrOff=(int FloatTwoDCoord::*)(&FloatTwoDCoord::x))),0,NULL,0},
  {&TA_float,NULL,"y"," vertical","","",
    *((ta_memb_ptr*)&(TA_FloatTwoDCoord_MbrOff=(int FloatTwoDCoord::*)(&FloatTwoDCoord::y))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_SetXY_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_GetXY_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_SqDist_MethArgs[]={
  {&TA_const_FloatTwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_Dist_MethArgs[]={
  {&TA_const_FloatTwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodDef_data TA_FloatTwoDCoord_MethodDef[]={
  {&TA_void,NULL,"SetXY","","","",
    0,2,-1,0,NULL,cssElCFun_FloatTwoDCoord_SetXY_stub,TA_FloatTwoDCoord_SetXY_MethArgs},
  {&TA_void,NULL,"GetXY","","","",
    0,2,-1,0,NULL,cssElCFun_FloatTwoDCoord_GetXY_stub,TA_FloatTwoDCoord_GetXY_MethArgs},
  {&TA_float,NULL,"SqMag"," squared magnitude of vector","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_SqMag_stub,NULL},
  {&TA_float,NULL,"Mag","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Mag_stub,NULL},
  {&TA_float,NULL,"SqDist","","","",
    0,1,-1,0,NULL,cssElCFun_FloatTwoDCoord_SqDist_stub,TA_FloatTwoDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    0,1,-1,0,NULL,cssElCFun_FloatTwoDCoord_Dist_stub,TA_FloatTwoDCoord_Dist_MethArgs},
  {&TA_float,NULL,"Sum","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Sum_stub,NULL},
  {&TA_void,NULL,"Invert","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Invert_stub,NULL},
  {&TA_void,NULL,"MagNorm","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_MagNorm_stub,NULL},
  {&TA_void,NULL,"SumNorm","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_SumNorm_stub,NULL},
  {&TA_void,NULL,"Abs","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Abs_stub,NULL},
  {&TA_float,NULL,"MaxVal","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_MaxVal_stub,NULL},
  {&TA_float,NULL,"MinVal","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_MinVal_stub,NULL},
  {&TA_taString,NULL,"GetStr","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_GetStr_stub,NULL},
  NULL};
static int FloatTDCoord::* TA_FloatTDCoord_MbrOff;
static MemberDef_data TA_FloatTDCoord_MemberDef[]={
  {&TA_float,NULL,"z"," depth","","",
    *((ta_memb_ptr*)&(TA_FloatTDCoord_MbrOff=(int FloatTDCoord::*)(&FloatTDCoord::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FloatTDCoord_SqDist_MethArgs[]={
  {&TA_const_FloatTDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_Dist_MethArgs[]={
  {&TA_const_FloatTDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_SetXYZ_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  {&TA_float,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_GetXYZ_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  {&TA_float_ref,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_Equals_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  {&TA_float,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_Sgn_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodDef_data TA_FloatTDCoord_MethodDef[]={
  {&TA_float,NULL,"SqDist","","","",
    1,1,-1,0,NULL,cssElCFun_FloatTDCoord_SqDist_stub,TA_FloatTDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    1,1,-1,0,NULL,cssElCFun_FloatTDCoord_Dist_stub,TA_FloatTDCoord_Dist_MethArgs},
  {&TA_void,NULL,"SetXYZ","","","",
    0,3,-1,0,NULL,cssElCFun_FloatTDCoord_SetXYZ_stub,TA_FloatTDCoord_SetXYZ_MethArgs},
  {&TA_void,NULL,"GetXYZ","","","",
    0,3,-1,0,NULL,cssElCFun_FloatTDCoord_GetXYZ_stub,TA_FloatTDCoord_GetXYZ_MethArgs},
  {&TA_bool,NULL,"Equals","","","",
    1,3,-1,0,NULL,cssElCFun_FloatTDCoord_Equals_stub,TA_FloatTDCoord_Equals_MethArgs},
  {&TA_float,NULL,"Sgn","","","",
    0,1,-1,1,(ta_void_fun)(FloatTDCoord::Sgn),cssElCFun_FloatTDCoord_Sgn_stub,TA_FloatTDCoord_Sgn_MethArgs},
  NULL};
static int FloatRotation::* TA_FloatRotation_MbrOff;
static MemberDef_data TA_FloatRotation_MemberDef[]={
  {&TA_float,NULL,"rot"," rotation angle, in radians","","",
    *((ta_memb_ptr*)&(TA_FloatRotation_MbrOff=(int FloatRotation::*)(&FloatRotation::rot))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FloatRotation_SetXYZR_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  {&TA_float,NULL,"zz",""},
  {&TA_float,NULL,"rr",""},
  NULL};
static MethodArgs_data TA_FloatRotation_GetXYZR_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  {&TA_float_ref,NULL,"zz",""},
  {&TA_float_ref,NULL,"rr",""},
  NULL};
static MethodDef_data TA_FloatRotation_MethodDef[]={
  {&TA_void,NULL,"SetXYZR","","","",
    0,4,-1,0,NULL,cssElCFun_FloatRotation_SetXYZR_stub,TA_FloatRotation_SetXYZR_MethArgs},
  {&TA_void,NULL,"GetXYZR","","","",
    0,4,-1,0,NULL,cssElCFun_FloatRotation_GetXYZR_stub,TA_FloatRotation_GetXYZR_MethArgs},
  NULL};
static int FloatTransform::* TA_FloatTransform_MbrOff;
static MemberDef_data TA_FloatTransform_MemberDef[]={
  {&TA_FloatTDCoord,NULL,"scale"," scale factors, in x, y, and z","","",
    *((ta_memb_ptr*)&(TA_FloatTransform_MbrOff=(int FloatTransform::*)(&FloatTransform::scale))),0,NULL,0},
  {&TA_FloatRotation,NULL,"rotate"," rotation","","",
    *((ta_memb_ptr*)&(TA_FloatTransform_MbrOff=(int FloatTransform::*)(&FloatTransform::rotate))),0,NULL,0},
  {&TA_FloatTDCoord,NULL,"translate"," translate, in x, y, and z","","",
    *((ta_memb_ptr*)&(TA_FloatTransform_MbrOff=(int FloatTransform::*)(&FloatTransform::translate))),0,NULL,0},
  NULL};
static int ValIdx::* TA_ValIdx_MbrOff;
static MemberDef_data TA_ValIdx_MemberDef[]={
  {&TA_float,NULL,"val"," value","","",
    *((ta_memb_ptr*)&(TA_ValIdx_MbrOff=(int ValIdx::*)(&ValIdx::val))),0,NULL,0},
  {&TA_int,NULL,"idx"," index","","",
    *((ta_memb_ptr*)&(TA_ValIdx_MbrOff=(int ValIdx::*)(&ValIdx::idx))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ValIdx_SetValIdx_MethArgs[]={
  {&TA_float,NULL,"v",""},
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ValIdx_GetValIdx_MethArgs[]={
  {&TA_float_ref,NULL,"v",""},
  {&TA_int_ref,NULL,"i",""},
  NULL};
static MethodDef_data TA_ValIdx_MethodDef[]={
  {&TA_void,NULL,"SetValIdx","","","",
    0,2,-1,0,NULL,cssElCFun_ValIdx_SetValIdx_stub,TA_ValIdx_SetValIdx_MethArgs},
  {&TA_void,NULL,"GetValIdx","","","",
    0,2,-1,0,NULL,cssElCFun_ValIdx_GetValIdx_stub,TA_ValIdx_GetValIdx_MethArgs},
  {&TA_taString,NULL,"GetStr","","","",
    0,0,-1,0,NULL,cssElCFun_ValIdx_GetStr_stub,NULL},
  NULL};
static EnumDef_data TA_taArray_ValIdx__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static int taArray<ValIdx>::* TA_taArray_ValIdx__MbrOff;
static MemberDef_data TA_taArray_ValIdx__MemberDef[]={
  {NULL,"::ValIdx_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_ValIdx__MbrOff=(int taArray<ValIdx>::*)(&taArray<ValIdx>::el))),0,NULL,0},
  {&TA_ValIdx,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_ValIdx__MbrOff=(int taArray<ValIdx>::*)(&taArray<ValIdx>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Add_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__AddUnique_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Push_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Insert_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Find_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__RemoveEl_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__InitVals_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_ValIdx__MethodDef[]={
  {NULL,"::const_ValIdx_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__SafeEl_stub,TA_taArray_ValIdx__SafeEl_MethArgs},
  {NULL,"::ValIdx_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__FastEl_stub,TA_taArray_ValIdx__FastEl_MethArgs},
  {NULL,"::const_ValIdx_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__RevEl_stub,TA_taArray_ValIdx__RevEl_MethArgs},
  {NULL,"::const_ValIdx","Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_ValIdx__Pop_stub,NULL},
  {NULL,"::const_ValIdx_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_ValIdx__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_ValIdx__Set_stub,TA_taArray_ValIdx__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__Add_stub,TA_taArray_ValIdx__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__AddUnique_stub,TA_taArray_ValIdx__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__Push_stub,TA_taArray_ValIdx__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_ValIdx__Insert_stub,TA_taArray_ValIdx__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_ValIdx__Find_stub,TA_taArray_ValIdx__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__RemoveEl_stub,TA_taArray_ValIdx__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_ValIdx__InitVals_stub,TA_taArray_ValIdx__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_ValIdx_Array_MemberDef[]={
  {&TA_ValIdx,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&ValIdx_Array::blank),0},
  NULL};
static EnumDef_data TA_CountParam_Relation[]={
  {"EQUAL"," ","LABEL_= ",0},
  {"NOTEQUAL"," ","LABEL_!= ",1},
  {"LESSTHAN"," ","LABEL_< ",2},
  {"GREATERTHAN"," ","LABEL_> ",3},
  {"LESSTHANOREQUAL"," ","LABEL_<= ",4},
  {"GREATERTHANOREQUAL"," ","LABEL_>= ",5},
  NULL};
static int CountParam::* TA_CountParam_MbrOff;
static MemberDef_data TA_CountParam_MemberDef[]={
  {NULL,"::Relation","rel"," relation of statistic to target value","LABEL_ ","",
    *((ta_memb_ptr*)&(TA_CountParam_MbrOff=(int CountParam::*)(&CountParam::rel))),0,NULL,0},
  {&TA_float,NULL,"val"," target or comparison value","LABEL_ ","",
    *((ta_memb_ptr*)&(TA_CountParam_MbrOff=(int CountParam::*)(&CountParam::val))),0,NULL,0},
  NULL};
static MethodArgs_data TA_CountParam_Evaluate_MethArgs[]={
  {&TA_float,NULL,"cmp",""},
  NULL};
static MethodDef_data TA_CountParam_MethodDef[]={
  {&TA_bool,NULL,"Evaluate","","","",
    0,1,-1,0,NULL,cssElCFun_CountParam_Evaluate_stub,TA_CountParam_Evaluate_MethArgs},
  NULL};
static EnumDef_data TA_Aggregate_Operator[]={
  {"DEFAULT"," select the default specified for the object","",-1},
  {"LAST"," The most recent value","",0},
  {"SUM"," Summation","",1},
  {"PROD"," Product","",2},
  {"MIN"," Minimum","",3},
  {"MAX"," Maximum","",4},
  {"AVG"," Average (mean)","",5},
  {"COPY"," Copy (keep each individual value)","",6},
  {"COUNT"," Count of the number times count relation was true","",7},
  NULL};
static int Aggregate::* TA_Aggregate_MbrOff;
static MemberDef_data TA_Aggregate_MemberDef[]={
  {NULL,"::Operator","op"," how to aggregate over the network","","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::op))),0,NULL,0},
  {&TA_bool,NULL,"no0"," don't aggregate when the value is zero","DEF_false ","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::no0))),0,NULL,0},
  {&TA_CountParam,NULL,"count"," parameters for the COUNT aggregation","CONDEDIT_ON_op:COUNT ","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::count))),0,NULL,0},
  {&TA_int,NULL,"n_updt"," number of times agg updated (for AVG)","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::n_updt))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Aggregate_AggLAST_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggSUM_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggPROD_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggMIN_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggMAX_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggAVG_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggCOPY_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggCOUNT_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_ComputeAgg_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_ComputeAggNoUpdt_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AppendAggName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_Aggregate_PrependAggName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodDef_data TA_Aggregate_MethodDef[]={
  {&TA_void,NULL,"AggLAST"," at this level..","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggLAST_stub,TA_Aggregate_AggLAST_MethArgs},
  {&TA_void,NULL,"AggSUM","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggSUM_stub,TA_Aggregate_AggSUM_MethArgs},
  {&TA_void,NULL,"AggPROD","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggPROD_stub,TA_Aggregate_AggPROD_MethArgs},
  {&TA_void,NULL,"AggMIN","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggMIN_stub,TA_Aggregate_AggMIN_MethArgs},
  {&TA_void,NULL,"AggMAX","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggMAX_stub,TA_Aggregate_AggMAX_MethArgs},
  {&TA_void,NULL,"AggAVG","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggAVG_stub,TA_Aggregate_AggAVG_MethArgs},
  {&TA_void,NULL,"AggCOPY"," not defined at this level..","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggCOPY_stub,TA_Aggregate_AggCOPY_MethArgs},
  {&TA_void,NULL,"AggCOUNT","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggCOUNT_stub,TA_Aggregate_AggCOUNT_MethArgs},
  {&TA_void,NULL,"ComputeAgg"," compute aggregation into `to' based on current op from `fm'","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_ComputeAgg_stub,TA_Aggregate_ComputeAgg_MethArgs},
  {&TA_bool,NULL,"ComputeAggNoUpdt"," compute aggregation but don't update the n_updt counter (for lists) (return false if fm = 0, else true)","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_ComputeAggNoUpdt_stub,TA_Aggregate_ComputeAggNoUpdt_MethArgs},
  {&TA_void,NULL,"IncUpdt"," increment the update counter","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_IncUpdt_stub,NULL},
  {&TA_const_char_ptr,NULL,"GetAggName"," get string representation of aggregation opr","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_GetAggName_stub,NULL},
  {&TA_taString,NULL,"AppendAggName"," append aggregation name to given name","","",
    0,1,-1,0,NULL,cssElCFun_Aggregate_AppendAggName_stub,TA_Aggregate_AppendAggName_MethArgs},
  {&TA_taString,NULL,"PrependAggName"," prepend aggregation name to given name","","",
    0,1,-1,0,NULL,cssElCFun_Aggregate_PrependAggName_stub,TA_Aggregate_PrependAggName_MethArgs},
  {&TA_void,NULL,"Init"," initialize agg variables","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_Init_stub,NULL},
  {&TA_float,NULL,"InitAggVal"," returns the initial aggregation value based on op (0,1,or FLT_MAX)","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_InitAggVal_stub,NULL},
  NULL};
static EnumDef_data TA_SimpleMathSpec_MathOpr[]={
  {"NONE"," no function","",0},
  {"THRESH"," threshold: if val >= arg then hi, else lo","",1},
  {"ABS"," take absolute-value","",2},
  {"SQUARE"," square (raise to 2nd power)","",3},
  {"SQRT"," square root","",4},
  {"LOG"," natural log","",5},
  {"LOG10"," log base 10","",6},
  {"EXP"," exponential (e^val)","",7},
  {"ADD"," add arg value","",8},
  {"SUB"," subtract arg value","",9},
  {"MUL"," multiply by arg value","",10},
  {"POWER"," raise to the power of arg","",11},
  {"DIV"," divide by arg value","",12},
  {"GTEQ"," make all values greater than or equal to arg","",13},
  {"LTEQ"," make all values less than or equal to arg","",14},
  {"GTLTEQ"," make all values greater than lw and less than hi","",15},
  NULL};
static int SimpleMathSpec::* TA_SimpleMathSpec_MbrOff;
static MemberDef_data TA_SimpleMathSpec_MemberDef[]={
  {NULL,"::MathOpr","opr"," what math operator to use","","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::opr))),0,NULL,0},
  {&TA_float,NULL,"arg"," argument for ops (threshold add/sub/mul/div arg)","CONDEDIT_ON_opr:THRESH,ADD,SUB,MUL,POWER,DIV,GTEQ,LTEQ ","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::arg))),0,NULL,0},
  {&TA_float,NULL,"lw"," the value to assign values below threshold","CONDEDIT_ON_opr:THRESH,GTLTEQ ","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::lw))),0,NULL,0},
  {&TA_float,NULL,"hi"," the value to assign values above threshold","CONDEDIT_ON_opr:THRESH,GTLTEQ ","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::hi))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SimpleMathSpec_Evaluate_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodDef_data TA_SimpleMathSpec_MethodDef[]={
  {&TA_float,NULL,"Evaluate"," evaluate math operator on given value","","",
    0,1,-1,0,NULL,cssElCFun_SimpleMathSpec_Evaluate_stub,TA_SimpleMathSpec_Evaluate_MethArgs},
  NULL};
static int MinMax::* TA_MinMax_MbrOff;
static MemberDef_data TA_MinMax_MemberDef[]={
  {&TA_float,NULL,"min"," minimum value","","",
    *((ta_memb_ptr*)&(TA_MinMax_MbrOff=(int MinMax::*)(&MinMax::min))),0,NULL,0},
  {&TA_float,NULL,"max"," maximum value","","",
    *((ta_memb_ptr*)&(TA_MinMax_MbrOff=(int MinMax::*)(&MinMax::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MinMax_RangeTest_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_RangeTestEq_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_Init_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_Set_MethArgs[]={
  {&TA_float,NULL,"mn",""},
  {&TA_float,NULL,"mx",""},
  NULL};
static MethodArgs_data TA_MinMax_UpdateRange_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_MaxLT_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_MinGT_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_WithinRange_MethArgs[]={
  {&TA_MinMax_ref,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_Normalize_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_Project_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_Clip_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodDef_data TA_MinMax_MethodDef[]={
  {&TA_bool,NULL,"RangeTest"," test whether value is within the range (but not equal to max or min)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_RangeTest_stub,TA_MinMax_RangeTest_MethArgs},
  {&TA_bool,NULL,"RangeTestEq"," test whether value is within the range (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_RangeTestEq_stub,TA_MinMax_RangeTestEq_MethArgs},
  {&TA_void,NULL,"Init"," initializes the max and min to this value","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Init_stub,TA_MinMax_Init_MethArgs},
  {&TA_void,NULL,"Set"," set values","","",
    0,2,-1,0,NULL,cssElCFun_MinMax_Set_stub,TA_MinMax_Set_MethArgs},
  {&TA_float,NULL,"Range","","","",
    0,0,-1,0,NULL,cssElCFun_MinMax_Range_stub,NULL},
  {&TA_float,NULL,"Scale"," scale is the inverse of range","","",
    0,0,-1,0,NULL,cssElCFun_MinMax_Scale_stub,NULL},
  {&TA_float,NULL,"MidPoint"," returns the range between the min and the max","","",
    0,0,-1,0,NULL,cssElCFun_MinMax_MidPoint_stub,NULL},
  {&TA_void,NULL,"UpdateRange"," updates the range","","",
    1,1,-1,0,NULL,cssElCFun_MinMax_UpdateRange_stub,TA_MinMax_UpdateRange_MethArgs},
  {&TA_void,NULL,"MaxLT"," max less than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_MaxLT_stub,TA_MinMax_MaxLT_MethArgs},
  {&TA_void,NULL,"MinGT"," min greater than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_MinGT_stub,TA_MinMax_MinGT_MethArgs},
  {&TA_void,NULL,"WithinRange"," put my range within given one","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_WithinRange_stub,TA_MinMax_WithinRange_MethArgs},
  {&TA_float,NULL,"Normalize"," normalize given value to 0-1 range given current in max","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Normalize_stub,TA_MinMax_Normalize_MethArgs},
  {&TA_float,NULL,"Project"," project a normalized value into the current min-max range","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Project_stub,TA_MinMax_Project_MethArgs},
  {&TA_float,NULL,"Clip"," clip given value within current range","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Clip_stub,TA_MinMax_Clip_MethArgs},
  NULL};
static int MinMaxRange::* TA_MinMaxRange_MbrOff;
static MemberDef_data TA_MinMaxRange_MemberDef[]={
  {&TA_float,NULL,"range"," distance between min and max","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_MinMaxRange_MbrOff=(int MinMaxRange::*)(&MinMaxRange::range))),0,NULL,0},
  {&TA_float,NULL,"scale"," scale (1.0 / range)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_MinMaxRange_MbrOff=(int MinMaxRange::*)(&MinMaxRange::scale))),0,NULL,0},
  NULL};
static int FixedMinMax::* TA_FixedMinMax_MbrOff;
static MemberDef_data TA_FixedMinMax_MemberDef[]={
  {&TA_bool,NULL,"fix_min"," use fixed minimum value?","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::fix_min))),0,NULL,0},
  {&TA_float,NULL,"min"," minimum value","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::min))),0,NULL,0},
  {&TA_bool,NULL,"fix_max"," use fixed maximum value?","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::fix_max))),0,NULL,0},
  {&TA_float,NULL,"max"," maximum value","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FixedMinMax_Init_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_InitFix_MethArgs[]={
  {&TA_bool,NULL,"fx"," false"},
  NULL};
static MethodArgs_data TA_FixedMinMax_Set_MethArgs[]={
  {&TA_float,NULL,"mn",""},
  {&TA_float,NULL,"mx",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_SetMin_MethArgs[]={
  {&TA_float,NULL,"mn",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_SetMax_MethArgs[]={
  {&TA_float,NULL,"mx",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_FixRange_MethArgs[]={
  {&TA_MinMax_ref,NULL,"mm",""},
  NULL};
static MethodDef_data TA_FixedMinMax_MethodDef[]={
  {&TA_void,NULL,"Init"," initializes the max and min to this value","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_Init_stub,TA_FixedMinMax_Init_MethArgs},
  {&TA_void,NULL,"InitFix","","","",
    0,1,0,0,NULL,cssElCFun_FixedMinMax_InitFix_stub,TA_FixedMinMax_InitFix_MethArgs},
  {&TA_void,NULL,"Set","","","",
    0,2,-1,0,NULL,cssElCFun_FixedMinMax_Set_stub,TA_FixedMinMax_Set_MethArgs},
  {&TA_void,NULL,"SetMin","","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_SetMin_stub,TA_FixedMinMax_SetMin_MethArgs},
  {&TA_void,NULL,"SetMax","","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_SetMax_stub,TA_FixedMinMax_SetMax_MethArgs},
  {&TA_void,NULL,"FixRange","","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_FixRange_stub,TA_FixedMinMax_FixRange_MethArgs},
  NULL};
static int Modulo::* TA_Modulo_MbrOff;
static MemberDef_data TA_Modulo_MemberDef[]={
  {&TA_bool,NULL,"flag"," Modulo is active?","","",
    *((ta_memb_ptr*)&(TA_Modulo_MbrOff=(int Modulo::*)(&Modulo::flag))),0,NULL,0},
  {&TA_int,NULL,"m"," Modulo N mod m, where N is counter","","",
    *((ta_memb_ptr*)&(TA_Modulo_MbrOff=(int Modulo::*)(&Modulo::m))),0,NULL,0},
  {&TA_int,NULL,"off"," Modulo Offset (actually (N - off) mod m","","",
    *((ta_memb_ptr*)&(TA_Modulo_MbrOff=(int Modulo::*)(&Modulo::off))),0,NULL,0},
  NULL};
static int MinMaxInt::* TA_MinMaxInt_MbrOff;
static MemberDef_data TA_MinMaxInt_MemberDef[]={
  {&TA_int,NULL,"min"," minimum value","","",
    *((ta_memb_ptr*)&(TA_MinMaxInt_MbrOff=(int MinMaxInt::*)(&MinMaxInt::min))),0,NULL,0},
  {&TA_int,NULL,"max"," maximum value","","",
    *((ta_memb_ptr*)&(TA_MinMaxInt_MbrOff=(int MinMaxInt::*)(&MinMaxInt::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MinMaxInt_RangeTest_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_RangeTestEq_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Init_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_UpdateRange_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_MaxLT_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_MinGT_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_WithinRange_MethArgs[]={
  {&TA_MinMaxInt_ref,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Normalize_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Project_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Clip_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodDef_data TA_MinMaxInt_MethodDef[]={
  {&TA_bool,NULL,"RangeTest"," test whether value is within the range (but not equal to max or min) test whether value is within the range (but not equal to max or min)","","",
    1,1,-1,0,NULL,cssElCFun_MinMaxInt_RangeTest_stub,TA_MinMaxInt_RangeTest_MethArgs},
  {&TA_bool,NULL,"RangeTestEq"," test whether value is within the range (or equal) test whether value is within the range (or equal)","","",
    1,1,-1,0,NULL,cssElCFun_MinMaxInt_RangeTestEq_stub,TA_MinMaxInt_RangeTestEq_MethArgs},
  {&TA_void,NULL,"Init"," initializes the max and min to this value","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Init_stub,TA_MinMaxInt_Init_MethArgs},
  {&TA_int,NULL,"Count","","","",
    0,0,-1,0,NULL,cssElCFun_MinMaxInt_Count_stub,NULL},
  {&TA_int,NULL,"Range","","","",
    0,0,-1,0,NULL,cssElCFun_MinMaxInt_Range_stub,NULL},
  {&TA_float,NULL,"Scale"," scale is the inverse of range","","",
    0,0,-1,0,NULL,cssElCFun_MinMaxInt_Scale_stub,NULL},
  {&TA_int,NULL,"MidPoint"," returns the range between the min and the max","","",
    0,0,-1,0,NULL,cssElCFun_MinMaxInt_MidPoint_stub,NULL},
  {&TA_void,NULL,"UpdateRange"," updates the range","","",
    1,1,-1,0,NULL,cssElCFun_MinMaxInt_UpdateRange_stub,TA_MinMaxInt_UpdateRange_MethArgs},
  {&TA_void,NULL,"MaxLT"," max less than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_MaxLT_stub,TA_MinMaxInt_MaxLT_MethArgs},
  {&TA_void,NULL,"MinGT"," min greater than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_MinGT_stub,TA_MinMaxInt_MinGT_MethArgs},
  {&TA_void,NULL,"WithinRange"," put my range within given one","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_WithinRange_stub,TA_MinMaxInt_WithinRange_MethArgs},
  {&TA_float,NULL,"Normalize"," normalize given value to 0-1 range given current in max","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Normalize_stub,TA_MinMaxInt_Normalize_MethArgs},
  {&TA_int,NULL,"Project"," project a normalized value into the current min-max range","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Project_stub,TA_MinMaxInt_Project_MethArgs},
  {&TA_int,NULL,"Clip"," clip given value within current range","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Clip_stub,TA_MinMaxInt_Clip_MethArgs},
  NULL};
static MethodArgs_data TA_IDataSource_GetData_MethArgs[]={
  {&TA_SourceChannel_ptr,NULL,"ch",""},
  NULL};
static MethodDef_data TA_IDataSource_MethodDef[]={
  {&TA_bool,NULL,"can_sequence_"," true if has a ISequencable interface","","",
    0,0,-1,0,NULL,cssElCFun_IDataSource_can_sequence__stub,NULL},
  {&TA_ISequencable_ptr,NULL,"sequencer_"," sequencing interface, if sequencable","","",
    0,0,-1,0,NULL,cssElCFun_IDataSource_sequencer__stub,NULL},
  {&TA_SourceChannel_List_ref,NULL,"source_channels_","","","",
    0,0,-1,0,NULL,cssElCFun_IDataSource_source_channels__stub,NULL},
  {&TA_taMatrix_impl_ptr,NULL,"GetData","","","",
    0,1,-1,0,NULL,cssElCFun_IDataSource_GetData_stub,TA_IDataSource_GetData_MethArgs},
  NULL};
static MethodArgs_data TA_ISequencable_GoTo_MethArgs[]={
  {&TA_uint,NULL,"index",""},
  NULL};
static MethodDef_data TA_ISequencable_MethodDef[]={
  {&TA_int,NULL,"num_items"," N<0 if items unknown, or cannot be accessed randomly","","",
    0,0,-1,0,NULL,cssElCFun_ISequencable_num_items_stub,NULL},
  {&TA_bool,NULL,"is_permutable"," 'true' if can be accessed randomly","","",
    0,0,-1,0,NULL,cssElCFun_ISequencable_is_permutable_stub,NULL},
  {&TA_bool,NULL,"has_next"," for sequential access, 'true' if can call Next()","","",
    0,0,-1,0,NULL,cssElCFun_ISequencable_has_next_stub,NULL},
  {&TA_void,NULL,"Reset"," restores state, but is not a sequence command per se","","",
    0,0,-1,0,NULL,cssElCFun_ISequencable_Reset_stub,NULL},
  {&TA_void,NULL,"Next"," for sequential access, goes to the next item","","",
    0,0,-1,0,NULL,cssElCFun_ISequencable_Next_stub,NULL},
  {&TA_void,NULL,"GoTo"," for random access, goes to the item ","","",
    0,1,-1,0,NULL,cssElCFun_ISequencable_GoTo_stub,TA_ISequencable_GoTo_MethArgs},
  NULL};
static MethodDef_data TA_IDataSink_MethodDef[]={
  {&TA_SinkChannel_List_ref,NULL,"sink_channels","","","",
    0,0,-1,0,NULL,cssElCFun_IDataSink_sink_channels_stub,NULL},
  NULL};
static EnumDef_data TA_DataTransferMode_EnumDef[]={
  {"DTM_NONE"," initialization value only","",0},
  {"DTM_PUSH","","",1},
  {"DTM_PULL","","",2},
  NULL};
static int DataChannel::* TA_DataChannel_MbrOff;
static MemberDef_data TA_DataChannel_MemberDef[]={
  {&TA_int_FixedArray,NULL,"m_geom"," ","SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataChannel_MbrOff=(int DataChannel::*)(&DataChannel::m_geom))),0,NULL,0},
  {&TA_int,NULL,"m_index"," ","NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataChannel_MbrOff=(int DataChannel::*)(&DataChannel::m_index))),0,NULL,0},
  {&TA_int,NULL,"m_txfer_modes_allowed"," ","SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_DataChannel_MbrOff=(int DataChannel::*)(&DataChannel::m_txfer_modes_allowed))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataChannel_geom_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_DataChannel_setGeom_MethArgs[]={
  {&TA_const_int_FixedArray_ref,NULL,"value",""},
  NULL};
static MethodArgs_data TA_DataChannel_setTxfer_mode_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodDef_data TA_DataChannel_MethodDef[]={
  {&TA_int,NULL,"index"," this channel's index, typically invariant","","",
    0,0,-1,0,NULL,cssElCFun_DataChannel_index_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"data_type"," type of data, ex TA_int, TA_float, etc.","","",
    0,0,-1,0,NULL,cssElCFun_DataChannel_data_type_stub,NULL},
  {&TA_int,NULL,"dims"," number of dimensions of data; N=0 for sink is 'any'","","",
    0,0,-1,0,NULL,cssElCFun_DataChannel_dims_stub,NULL},
  {&TA_int,NULL,"geom"," geom for dimension; N=0 is 'don't care'","","",
    0,1,-1,0,NULL,cssElCFun_DataChannel_geom_stub,TA_DataChannel_geom_MethArgs},
  {&TA_void,NULL,"setGeom"," convenience api that calls virt version","","",
    1,1,-1,0,NULL,cssElCFun_DataChannel_setGeom_stub,TA_DataChannel_setGeom_MethArgs},
  {&TA_int,NULL,"txfer_modes_allowed"," specialized impls can provide pull","","",
    0,0,-1,0,NULL,cssElCFun_DataChannel_txfer_modes_allowed_stub,NULL},
  {&TA_int,NULL,"txfer_mode"," current txfer mode","","",
    0,0,-1,0,NULL,cssElCFun_DataChannel_txfer_mode_stub,NULL},
  {&TA_void,NULL,"setTxfer_mode"," set new txfer mode (validates before calling _)","","",
    0,1,-1,0,NULL,cssElCFun_DataChannel_setTxfer_mode_stub,TA_DataChannel_setTxfer_mode_MethArgs},
  NULL};
static int DataConnector::* TA_DataConnector_MbrOff;
static MemberDef_data TA_DataConnector_MemberDef[]={
  {&TA_SinkChannel_ptr,NULL,"m_sink_channel","","","",
    *((ta_memb_ptr*)&(TA_DataConnector_MbrOff=(int DataConnector::*)(&DataConnector::m_sink_channel))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataConnector_CanConnect_MethArgs[]={
  {&TA_SourceChannel_ptr,NULL,"src_ch",""},
  {&TA_SinkChannel_ptr,NULL,"snk_ch",""},
  NULL};
static MethodArgs_data TA_DataConnector_StatConnect_MethArgs[]={
  {&TA_SourceChannel_ptr,NULL,"src_ch",""},
  {&TA_SinkChannel_ptr,NULL,"snk_ch",""},
  NULL};
static MethodDef_data TA_DataConnector_MethodDef[]={
  {&TA_bool,NULL,"CanConnect","","","",
    0,2,-1,1,(ta_void_fun)(DataConnector::CanConnect),cssElCFun_DataConnector_CanConnect_stub,TA_DataConnector_CanConnect_MethArgs},
  {&TA_DataConnector_ptr,NULL,"StatConnect","","","",
    0,2,-1,1,(ta_void_fun)(DataConnector::StatConnect),cssElCFun_DataConnector_StatConnect_stub,TA_DataConnector_StatConnect_MethArgs},
  {&TA_SourceChannel_ptr,NULL,"source_channel","","","",
    0,0,-1,0,NULL,cssElCFun_DataConnector_source_channel_stub,NULL},
  {&TA_SinkChannel_ptr,NULL,"sink_channel","","","",
    0,0,-1,0,NULL,cssElCFun_DataConnector_sink_channel_stub,NULL},
  NULL};
static int SinkChannel::* TA_SinkChannel_MbrOff;
static MemberDef_data TA_SinkChannel_MemberDef[]={
  {&TA_IDataSink_ptr,NULL,"m_data_sink"," the DataSink that owns this channel","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SinkChannel_MbrOff=(int SinkChannel::*)(&SinkChannel::m_data_sink))),0,NULL,0},
  {&TA_DataConnector_ptr,NULL,"m_connector"," the connector, if attached","HIDDEN SAVE ","",
    *((ta_memb_ptr*)&(TA_SinkChannel_MbrOff=(int SinkChannel::*)(&SinkChannel::m_connector))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SinkChannel_New_MethArgs[]={
  {&TA_IDataSink_ptr,NULL,"data_sink",""},
  {&TA_const_taString_ref,NULL,"name",""},
  {&TA_const_int_FixedArray_ref,NULL,"geom",""},
  {&TA_int,NULL,"txfer_modes_allowed",""},
  {&TA_int,NULL,"txfer_mode",""},
  NULL};
static MethodArgs_data TA_SinkChannel_AcceptData_MethArgs[]={
  {&TA_taMatrix_impl_ptr,NULL,"item",""},
  NULL};
static MethodDef_data TA_SinkChannel_MethodDef[]={
  {&TA_SinkChannel_ptr,NULL,"New"," Create n_objs objects of given type (type is optional) this is the normal way to create a Channel","","",
    1,5,-1,1,(ta_void_fun)(SinkChannel::New),cssElCFun_SinkChannel_New_stub,TA_SinkChannel_New_MethArgs},
  {&TA_IDataSink_ptr,NULL,"data_sink"," the DataSink that owns this channel","","",
    0,0,-1,0,NULL,cssElCFun_SinkChannel_data_sink_stub,NULL},
  {&TA_DataConnector_ptr,NULL,"connector"," the connector, if attached","","",
    0,0,-1,0,NULL,cssElCFun_SinkChannel_connector_stub,NULL},
  {&TA_bool,NULL,"ConsumeData"," consumes the current data item INTERNAL; 'true' if data actually consumed","","",
    0,0,-1,0,NULL,cssElCFun_SinkChannel_ConsumeData_stub,NULL},
  {&TA_void,NULL,"AcceptData"," sets current item; only used in Push mode","","",
    0,1,-1,0,NULL,cssElCFun_SinkChannel_AcceptData_stub,TA_SinkChannel_AcceptData_MethArgs},
  NULL};
static int SourceChannel::* TA_SourceChannel_MbrOff;
static MemberDef_data TA_SourceChannel_MemberDef[]={
  {&TA_DataConnector_List,NULL,"connectors","","","",
    *((ta_memb_ptr*)&(TA_SourceChannel_MbrOff=(int SourceChannel::*)(&SourceChannel::connectors))),0,NULL,0},
  {&TA_IDataSource_ptr,NULL,"m_data_source"," must be set by owner","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SourceChannel_MbrOff=(int SourceChannel::*)(&SourceChannel::m_data_source))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SourceChannel_New_MethArgs[]={
  {&TA_IDataSource_ptr,NULL,"data_source",""},
  {&TA_const_taString_ref,NULL,"name",""},
  {&TA_const_int_FixedArray_ref,NULL,"geom",""},
  {&TA_int,NULL,"txfer_modes_allowed",""},
  {&TA_int,NULL,"txfer_mode",""},
  NULL};
static MethodDef_data TA_SourceChannel_MethodDef[]={
  {&TA_SourceChannel_ptr,NULL,"New"," Create n_objs objects of given type (type is optional) this is the normal way to create a Channel","","",
    1,5,-1,1,(ta_void_fun)(SourceChannel::New),cssElCFun_SourceChannel_New_stub,TA_SourceChannel_New_MethArgs},
  {&TA_IDataSource_ptr,NULL,"data_source"," must be set by owner","","",
    0,0,-1,0,NULL,cssElCFun_SourceChannel_data_source_stub,NULL},
  {&TA_taMatrix_impl_ptr,NULL,"GetData"," gets current item","","",
    0,0,-1,0,NULL,cssElCFun_SourceChannel_GetData_stub,NULL},
  NULL};
static MethodArgs_data TA_SequenceMaster_UpdateClient_MethArgs[]={
  {&TA_int64_t_ref,NULL,"client_cycle",""},
  {&TA_int64_t_ptr,NULL,"diff"," ((void *)0)"},
  NULL};
static MethodDef_data TA_SequenceMaster_MethodDef[]={
  {&TA_SequenceMaster_ref,NULL,"instance","","","",
    0,0,-1,1,(ta_void_fun)(SequenceMaster::instance),cssElCFun_SequenceMaster_instance_stub,NULL},
  {&TA_int64_t,NULL,"cycle"," global cycle counter; note: init=1 so all data is stale","","",
    0,0,-1,0,NULL,cssElCFun_SequenceMaster_cycle_stub,NULL},
  {&TA_void,NULL,"Next"," advance the cycle counter","","",
    0,0,-1,0,NULL,cssElCFun_SequenceMaster_Next_stub,NULL},
  {&TA_bool,NULL,"UpdateClient"," updates a client's own cycle count, returning 'true' if it was out of date, and optionally the (+ve) number of cycles by which it was stale","","",
    0,2,1,0,NULL,cssElCFun_SequenceMaster_UpdateClient_stub,TA_SequenceMaster_UpdateClient_MethArgs},
  NULL};
static EnumDef_data TA_taList_DataConnector__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_DataConnector__MoveBefore_MethArgs[]={
  {NULL,"::DataConnector_ptr","trg",""},
  {NULL,"::DataConnector_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataConnector__MoveAfter_MethArgs[]={
  {NULL,"::DataConnector_ptr","trg",""},
  {NULL,"::DataConnector_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataConnector__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_DataConnector__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_DataConnector__Edit_El_MethArgs[]={
  {NULL,"::DataConnector_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataConnector__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_DataConnector__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_DataConnector__AddUniqNameOld_MethArgs[]={
  {NULL,"::DataConnector_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataConnector__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DataConnector_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_DataConnector__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_DataConnector__MoveBefore_stub,TA_taList_DataConnector__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_DataConnector__MoveAfter_stub,TA_taList_DataConnector__MoveAfter_MethArgs},
  {NULL,"::DataConnector_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataConnector__SafeEl_stub,TA_taList_DataConnector__SafeEl_MethArgs},
  {NULL,"::DataConnector_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataConnector__FastEl_stub,TA_taList_DataConnector__FastEl_MethArgs},
  {NULL,"::DataConnector_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataConnector__DefaultEl_stub,NULL},
  {NULL,"::DataConnector_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_DataConnector__Edit_El_stub,TA_taList_DataConnector__Edit_El_MethArgs},
  {NULL,"::DataConnector_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_DataConnector__FindName_stub,TA_taList_DataConnector__FindName_MethArgs},
  {NULL,"::DataConnector_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_DataConnector__FindType_stub,TA_taList_DataConnector__FindType_MethArgs},
  {NULL,"::DataConnector_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataConnector__Pop_stub,NULL},
  {NULL,"::DataConnector_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataConnector__Peek_stub,NULL},
  {NULL,"::DataConnector_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataConnector__AddUniqNameOld_stub,TA_taList_DataConnector__AddUniqNameOld_MethArgs},
  {NULL,"::DataConnector_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataConnector__LinkUniqNameOld_stub,TA_taList_DataConnector__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_taList_SourceChannel__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__MoveBefore_MethArgs[]={
  {NULL,"::SourceChannel_ptr","trg",""},
  {NULL,"::SourceChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__MoveAfter_MethArgs[]={
  {NULL,"::SourceChannel_ptr","trg",""},
  {NULL,"::SourceChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__Edit_El_MethArgs[]={
  {NULL,"::SourceChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__AddUniqNameOld_MethArgs[]={
  {NULL,"::SourceChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SourceChannel__LinkUniqNameOld_MethArgs[]={
  {NULL,"::SourceChannel_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_SourceChannel__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_SourceChannel__MoveBefore_stub,TA_taList_SourceChannel__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_SourceChannel__MoveAfter_stub,TA_taList_SourceChannel__MoveAfter_MethArgs},
  {NULL,"::SourceChannel_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_SourceChannel__SafeEl_stub,TA_taList_SourceChannel__SafeEl_MethArgs},
  {NULL,"::SourceChannel_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_SourceChannel__FastEl_stub,TA_taList_SourceChannel__FastEl_MethArgs},
  {NULL,"::SourceChannel_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_SourceChannel__DefaultEl_stub,NULL},
  {NULL,"::SourceChannel_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_SourceChannel__Edit_El_stub,TA_taList_SourceChannel__Edit_El_MethArgs},
  {NULL,"::SourceChannel_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_SourceChannel__FindName_stub,TA_taList_SourceChannel__FindName_MethArgs},
  {NULL,"::SourceChannel_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_SourceChannel__FindType_stub,TA_taList_SourceChannel__FindType_MethArgs},
  {NULL,"::SourceChannel_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_SourceChannel__Pop_stub,NULL},
  {NULL,"::SourceChannel_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_SourceChannel__Peek_stub,NULL},
  {NULL,"::SourceChannel_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_SourceChannel__AddUniqNameOld_stub,TA_taList_SourceChannel__AddUniqNameOld_MethArgs},
  {NULL,"::SourceChannel_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_SourceChannel__LinkUniqNameOld_stub,TA_taList_SourceChannel__LinkUniqNameOld_MethArgs},
  NULL};
static int SourceChannel_List::* TA_SourceChannel_List_MbrOff;
static MemberDef_data TA_SourceChannel_List_MemberDef[]={
  {&TA_IDataSource_ptr,NULL,"data_source"," must be set by owning IDataSource","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SourceChannel_List_MbrOff=(int SourceChannel_List::*)(&SourceChannel_List::data_source))),0,NULL,0},
  NULL};
static EnumDef_data TA_taList_SinkChannel__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__MoveBefore_MethArgs[]={
  {NULL,"::SinkChannel_ptr","trg",""},
  {NULL,"::SinkChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__MoveAfter_MethArgs[]={
  {NULL,"::SinkChannel_ptr","trg",""},
  {NULL,"::SinkChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__Edit_El_MethArgs[]={
  {NULL,"::SinkChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__AddUniqNameOld_MethArgs[]={
  {NULL,"::SinkChannel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_SinkChannel__LinkUniqNameOld_MethArgs[]={
  {NULL,"::SinkChannel_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_SinkChannel__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_SinkChannel__MoveBefore_stub,TA_taList_SinkChannel__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_SinkChannel__MoveAfter_stub,TA_taList_SinkChannel__MoveAfter_MethArgs},
  {NULL,"::SinkChannel_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_SinkChannel__SafeEl_stub,TA_taList_SinkChannel__SafeEl_MethArgs},
  {NULL,"::SinkChannel_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_SinkChannel__FastEl_stub,TA_taList_SinkChannel__FastEl_MethArgs},
  {NULL,"::SinkChannel_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_SinkChannel__DefaultEl_stub,NULL},
  {NULL,"::SinkChannel_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_SinkChannel__Edit_El_stub,TA_taList_SinkChannel__Edit_El_MethArgs},
  {NULL,"::SinkChannel_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_SinkChannel__FindName_stub,TA_taList_SinkChannel__FindName_MethArgs},
  {NULL,"::SinkChannel_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_SinkChannel__FindType_stub,TA_taList_SinkChannel__FindType_MethArgs},
  {NULL,"::SinkChannel_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_SinkChannel__Pop_stub,NULL},
  {NULL,"::SinkChannel_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_SinkChannel__Peek_stub,NULL},
  {NULL,"::SinkChannel_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_SinkChannel__AddUniqNameOld_stub,TA_taList_SinkChannel__AddUniqNameOld_MethArgs},
  {NULL,"::SinkChannel_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_SinkChannel__LinkUniqNameOld_stub,TA_taList_SinkChannel__LinkUniqNameOld_MethArgs},
  NULL};
static int SinkChannel_List::* TA_SinkChannel_List_MbrOff;
static MemberDef_data TA_SinkChannel_List_MemberDef[]={
  {&TA_IDataSink_ptr,NULL,"data_sink"," must be set by owning IDataSource","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SinkChannel_List_MbrOff=(int SinkChannel_List::*)(&SinkChannel_List::data_sink))),0,NULL,0},
  NULL};
static int RGBA::* TA_RGBA_MbrOff;
static MemberDef_data TA_RGBA_MemberDef[]={
  {&TA_float,NULL,"r"," red","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::r))),0,NULL,0},
  {&TA_float,NULL,"g"," green","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::g))),0,NULL,0},
  {&TA_float,NULL,"b"," blue","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::b))),0,NULL,0},
  {&TA_float,NULL,"a"," alpha (intensity, ratio of fg to bg)","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::a))),0,NULL,0},
  {&TA_taString,NULL,"desc"," description of what this color is","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::desc))),0,NULL,0},
  NULL};
static MethodDef_data TA_RGBA_MethodDef[]={
  {&TA_const_iColor_ptr,NULL,"color"," note: always correct -- updated on call","","",
    0,0,-1,0,NULL,cssElCFun_RGBA_color_stub,NULL},
  {&TA_taString,NULL,"ToString_RGBA","","","",
    0,0,-1,0,NULL,cssElCFun_RGBA_ToString_RGBA_stub,NULL},
  NULL};
static MethodArgs_data TA_TAColor_SetColor_MethArgs[]={
  {&TA_const_iColor_ptr,NULL,"c",""},
  {&TA_RGBA_ptr,NULL,"background"," ((void *)0)"},
  NULL};
static MethodDef_data TA_TAColor_MethodDef[]={
  {&TA_void,NULL,"SetColor"," ","USE_RVAL ARGC=4 NEW_FUN ","",
    2,2,1,0,NULL,cssElCFun_TAColor_SetColor_stub,TA_TAColor_SetColor_MethArgs},
  NULL};
static int ColorScaleSpec::* TA_ColorScaleSpec_MbrOff;
static MemberDef_data TA_ColorScaleSpec_MemberDef[]={
  {&TA_RGBA,NULL,"background"," background color","","",
    *((ta_memb_ptr*)&(TA_ColorScaleSpec_MbrOff=(int ColorScaleSpec::*)(&ColorScaleSpec::background))),0,NULL,0},
  {&TA_RGBA_List,NULL,"clr"," group of colors","NO_BROWSE ","",
    *((ta_memb_ptr*)&(TA_ColorScaleSpec_MbrOff=(int ColorScaleSpec::*)(&ColorScaleSpec::clr))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ColorScaleSpec_GenRanges_MethArgs[]={
  {&TA_TAColor_List_ptr,NULL,"cl",""},
  {&TA_int,NULL,"chunks",""},
  NULL};
static MethodDef_data TA_ColorScaleSpec_MethodDef[]={
  {&TA_void,NULL,"GenRanges","","","",
    0,2,-1,0,NULL,cssElCFun_ColorScaleSpec_GenRanges_stub,TA_ColorScaleSpec_GenRanges_MethArgs},
  NULL};
static int ScaleRange::* TA_ScaleRange_MbrOff;
static MemberDef_data TA_ScaleRange_MemberDef[]={
  {&TA_bool,NULL,"auto_scale","","","",
    *((ta_memb_ptr*)&(TA_ScaleRange_MbrOff=(int ScaleRange::*)(&ScaleRange::auto_scale))),0,NULL,0},
  {&TA_float,NULL,"min","","","",
    *((ta_memb_ptr*)&(TA_ScaleRange_MbrOff=(int ScaleRange::*)(&ScaleRange::min))),0,NULL,0},
  {&TA_float,NULL,"max","","","",
    *((ta_memb_ptr*)&(TA_ScaleRange_MbrOff=(int ScaleRange::*)(&ScaleRange::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ScaleRange_SetFromScale_MethArgs[]={
  {&TA_ColorScale_ref,NULL,"cs",""},
  NULL};
static MethodDef_data TA_ScaleRange_MethodDef[]={
  {&TA_void,NULL,"SetFromScale","","","",
    0,1,-1,0,NULL,cssElCFun_ScaleRange_SetFromScale_stub,TA_ScaleRange_SetFromScale_MethArgs},
  NULL};
static int ColorScale::* TA_ColorScale_MbrOff;
static MemberDef_data TA_ColorScale_MemberDef[]={
  {&TA_int,NULL,"chunks"," number of chunks to divide scale into","","",
    *((ta_memb_ptr*)&(TA_ColorScale_MbrOff=(int ColorScale::*)(&ColorScale::chunks))),0,NULL,0},
  {&TA_float,NULL,"min","","","",
    *((ta_memb_ptr*)&(TA_ColorScale_MbrOff=(int ColorScale::*)(&ColorScale::min))),0,NULL,0},
  {&TA_float,NULL,"max","","","",
    *((ta_memb_ptr*)&(TA_ColorScale_MbrOff=(int ColorScale::*)(&ColorScale::max))),0,NULL,0},
  {&TA_float,NULL,"range","","","",
    *((ta_memb_ptr*)&(TA_ColorScale_MbrOff=(int ColorScale::*)(&ColorScale::range))),0,NULL,0},
  {&TA_float,NULL,"zero","","","",
    *((ta_memb_ptr*)&(TA_ColorScale_MbrOff=(int ColorScale::*)(&ColorScale::zero))),0,NULL,0},
  {&TA_ColorScaleSpec_ptr,NULL,"spec"," specifies the color ranges","","",
    *((ta_memb_ptr*)&(TA_ColorScale_MbrOff=(int ColorScale::*)(&ColorScale::spec))),0,NULL,0},
  {&TA_bool,NULL,"auto_scale"," ","DEF_true ","",
    *((ta_memb_ptr*)&(TA_ColorScale_MbrOff=(int ColorScale::*)(&ColorScale::auto_scale))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ColorScale_GetAbsPercent_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ColorScale_GetColor_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_const_iColor_ptr_ptr,NULL,"maincolor","((void *)0)"},
  {&TA_const_iColor_ptr_ptr,NULL,"contrast","((void *)0)"},
  NULL};
static MethodArgs_data TA_ColorScale_GetContrastColor_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_ColorScale_GetIdx_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ColorScale_SetFromScaleRange_MethArgs[]={
  {&TA_ScaleRange_ptr,NULL,"sr",""},
  NULL};
static MethodArgs_data TA_ColorScale_ModRange_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ColorScale_ModRoundRange_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ColorScale_SetMinMax_MethArgs[]={
  {&TA_float,NULL,"mn",""},
  {&TA_float,NULL,"mx",""},
  NULL};
static MethodArgs_data TA_ColorScale_UpdateMinMax_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodDef_data TA_ColorScale_MethodDef[]={
  {&TA_float,NULL,"GetAbsPercent","","","",
    0,1,-1,0,NULL,cssElCFun_ColorScale_GetAbsPercent_stub,TA_ColorScale_GetAbsPercent_MethArgs},
  {&TA_const_iColor_ptr,NULL,"GetColor","","","",
    1,3,1,0,NULL,cssElCFun_ColorScale_GetColor_stub,TA_ColorScale_GetColor_MethArgs},
  {&TA_const_iColor_ptr,NULL,"GetContrastColor","","","",
    0,1,-1,0,NULL,cssElCFun_ColorScale_GetContrastColor_stub,TA_ColorScale_GetContrastColor_MethArgs},
  {&TA_int,NULL,"GetIdx","","","",
    0,1,-1,0,NULL,cssElCFun_ColorScale_GetIdx_stub,TA_ColorScale_GetIdx_MethArgs},
  {&TA_void,NULL,"DefaultChunks","","","",
    0,0,-1,0,NULL,cssElCFun_ColorScale_DefaultChunks_stub,NULL},
  {&TA_void,NULL,"MapColors"," generates the colors from spec","","",
    0,0,-1,0,NULL,cssElCFun_ColorScale_MapColors_stub,NULL},
  {&TA_void,NULL,"NewDefaults"," ","","",
    0,0,-1,0,NULL,cssElCFun_ColorScale_NewDefaults_stub,NULL},
  {&TA_void,NULL,"SetFromScaleRange"," funcs used to be in bar:","","",
    0,1,-1,0,NULL,cssElCFun_ColorScale_SetFromScaleRange_stub,TA_ColorScale_SetFromScaleRange_MethArgs},
  {&TA_void,NULL,"ModRange","","","",
    0,1,-1,0,NULL,cssElCFun_ColorScale_ModRange_stub,TA_ColorScale_ModRange_MethArgs},
  {&TA_void,NULL,"ModRoundRange","","","",
    0,1,-1,0,NULL,cssElCFun_ColorScale_ModRoundRange_stub,TA_ColorScale_ModRoundRange_MethArgs},
  {&TA_void,NULL,"FixRangeZero","","","",
    0,0,-1,0,NULL,cssElCFun_ColorScale_FixRangeZero_stub,NULL},
  {&TA_void,NULL,"SetMinMax","","","",
    0,2,-1,0,NULL,cssElCFun_ColorScale_SetMinMax_stub,TA_ColorScale_SetMinMax_MethArgs},
  {&TA_bool,NULL,"UpdateMinMax"," maybe expand bounds maybe expand bounds, returning true if expanded","","",
    1,1,-1,0,NULL,cssElCFun_ColorScale_UpdateMinMax_stub,TA_ColorScale_UpdateMinMax_MethArgs},
  NULL};
static EnumDef_data TA_taList_RGBA__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_RGBA__MoveBefore_MethArgs[]={
  {NULL,"::RGBA_ptr","trg",""},
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__MoveAfter_MethArgs[]={
  {NULL,"::RGBA_ptr","trg",""},
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__Edit_El_MethArgs[]={
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_RGBA__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_RGBA__AddUniqNameOld_MethArgs[]={
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__LinkUniqNameOld_MethArgs[]={
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_RGBA__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_RGBA__MoveBefore_stub,TA_taList_RGBA__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_RGBA__MoveAfter_stub,TA_taList_RGBA__MoveAfter_MethArgs},
  {NULL,"::RGBA_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__SafeEl_stub,TA_taList_RGBA__SafeEl_MethArgs},
  {NULL,"::RGBA_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__FastEl_stub,TA_taList_RGBA__FastEl_MethArgs},
  {NULL,"::RGBA_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_RGBA__DefaultEl_stub,NULL},
  {NULL,"::RGBA_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__Edit_El_stub,TA_taList_RGBA__Edit_El_MethArgs},
  {NULL,"::RGBA_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_RGBA__FindName_stub,TA_taList_RGBA__FindName_MethArgs},
  {NULL,"::RGBA_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_RGBA__FindType_stub,TA_taList_RGBA__FindType_MethArgs},
  {NULL,"::RGBA_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_RGBA__Pop_stub,NULL},
  {NULL,"::RGBA_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_RGBA__Peek_stub,NULL},
  {NULL,"::RGBA_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__AddUniqNameOld_stub,TA_taList_RGBA__AddUniqNameOld_MethArgs},
  {NULL,"::RGBA_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__LinkUniqNameOld_stub,TA_taList_RGBA__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_taList_TAColor__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_TAColor__MoveBefore_MethArgs[]={
  {NULL,"::TAColor_ptr","trg",""},
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__MoveAfter_MethArgs[]={
  {NULL,"::TAColor_ptr","trg",""},
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__Edit_El_MethArgs[]={
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_TAColor__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_TAColor__AddUniqNameOld_MethArgs[]={
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__LinkUniqNameOld_MethArgs[]={
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_TAColor__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_TAColor__MoveBefore_stub,TA_taList_TAColor__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_TAColor__MoveAfter_stub,TA_taList_TAColor__MoveAfter_MethArgs},
  {NULL,"::TAColor_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__SafeEl_stub,TA_taList_TAColor__SafeEl_MethArgs},
  {NULL,"::TAColor_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__FastEl_stub,TA_taList_TAColor__FastEl_MethArgs},
  {NULL,"::TAColor_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_TAColor__DefaultEl_stub,NULL},
  {NULL,"::TAColor_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__Edit_El_stub,TA_taList_TAColor__Edit_El_MethArgs},
  {NULL,"::TAColor_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_TAColor__FindName_stub,TA_taList_TAColor__FindName_MethArgs},
  {NULL,"::TAColor_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_TAColor__FindType_stub,TA_taList_TAColor__FindType_MethArgs},
  {NULL,"::TAColor_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_TAColor__Pop_stub,NULL},
  {NULL,"::TAColor_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_TAColor__Peek_stub,NULL},
  {NULL,"::TAColor_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__AddUniqNameOld_stub,TA_taList_TAColor__AddUniqNameOld_MethArgs},
  {NULL,"::TAColor_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__LinkUniqNameOld_stub,TA_taList_TAColor__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_taGroup_ColorScaleSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__MoveBefore_MethArgs[]={
  {NULL,"::ColorScaleSpec_ptr","trg",""},
  {NULL,"::ColorScaleSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__MoveAfter_MethArgs[]={
  {NULL,"::ColorScaleSpec_ptr","trg",""},
  {NULL,"::ColorScaleSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__Edit_El_MethArgs[]={
  {NULL,"::ColorScaleSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__AddUniqNameOld_MethArgs[]={
  {NULL,"::ColorScaleSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__LinkUniqNameOld_MethArgs[]={
  {NULL,"::ColorScaleSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_ColorScaleSpec__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_ColorScaleSpec__MethodDef[]={
  {NULL,"::ColorScaleSpec_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FirstEl_stub,TA_taGroup_ColorScaleSpec__FirstEl_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__NextEl_stub,TA_taGroup_ColorScaleSpec__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__MoveBefore_stub,TA_taGroup_ColorScaleSpec__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__MoveAfter_stub,TA_taGroup_ColorScaleSpec__MoveAfter_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__SafeEl_stub,TA_taGroup_ColorScaleSpec__SafeEl_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FastEl_stub,TA_taGroup_ColorScaleSpec__FastEl_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__DefaultEl_stub,NULL},
  {NULL,"::ColorScaleSpec_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__Edit_El_stub,TA_taGroup_ColorScaleSpec__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__SafeGp_stub,TA_taGroup_ColorScaleSpec__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FastGp_stub,TA_taGroup_ColorScaleSpec__FastGp_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__Leaf_stub,TA_taGroup_ColorScaleSpec__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__LeafGp_stub,TA_taGroup_ColorScaleSpec__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FirstGp_stub,TA_taGroup_ColorScaleSpec__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__NextGp_stub,TA_taGroup_ColorScaleSpec__NextGp_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_ColorScaleSpec__NewEl_stub,TA_taGroup_ColorScaleSpec__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_ColorScaleSpec__NewGp_stub,TA_taGroup_ColorScaleSpec__NewGp_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FindName_stub,TA_taGroup_ColorScaleSpec__FindName_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FindType_stub,TA_taGroup_ColorScaleSpec__FindType_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__Pop_stub,NULL},
  {NULL,"::ColorScaleSpec_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__Peek_stub,NULL},
  {NULL,"::ColorScaleSpec_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__AddUniqNameOld_stub,TA_taGroup_ColorScaleSpec__AddUniqNameOld_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__LinkUniqNameOld_stub,TA_taGroup_ColorScaleSpec__LinkUniqNameOld_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FindLeafName_stub,TA_taGroup_ColorScaleSpec__FindLeafName_MethArgs},
  {NULL,"::ColorScaleSpec_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_ColorScaleSpec__FindLeafType_stub,TA_taGroup_ColorScaleSpec__FindLeafType_MethArgs},
  NULL};
static MethodArgs_data TA_ColorScaleSpec_MGroup_ChildGetColText_impl_MethArgs[]={
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodDef_data TA_ColorScaleSpec_MGroup_MethodDef[]={
  {&TA_void,NULL,"NewDefaults"," create a set of default colors","","",
    0,0,-1,0,NULL,cssElCFun_ColorScaleSpec_MGroup_NewDefaults_stub,NULL},
  {&TA_void,NULL,"SetDefaultColor"," set the default color based on gui","","",
    0,0,-1,0,NULL,cssElCFun_ColorScaleSpec_MGroup_SetDefaultColor_stub,NULL},
  {&TA_taString,NULL,"ChildGetColText_impl","","","",
    0,3,2,0,NULL,cssElCFun_ColorScaleSpec_MGroup_ChildGetColText_impl_stub,TA_ColorScaleSpec_MGroup_ChildGetColText_impl_MethArgs},
  NULL};
static EnumDef_data TA_taList_ScaleRange__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__MoveBefore_MethArgs[]={
  {NULL,"::ScaleRange_ptr","trg",""},
  {NULL,"::ScaleRange_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__MoveAfter_MethArgs[]={
  {NULL,"::ScaleRange_ptr","trg",""},
  {NULL,"::ScaleRange_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__Edit_El_MethArgs[]={
  {NULL,"::ScaleRange_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__AddUniqNameOld_MethArgs[]={
  {NULL,"::ScaleRange_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ScaleRange__LinkUniqNameOld_MethArgs[]={
  {NULL,"::ScaleRange_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_ScaleRange__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_ScaleRange__MoveBefore_stub,TA_taList_ScaleRange__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_ScaleRange__MoveAfter_stub,TA_taList_ScaleRange__MoveAfter_MethArgs},
  {NULL,"::ScaleRange_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_ScaleRange__SafeEl_stub,TA_taList_ScaleRange__SafeEl_MethArgs},
  {NULL,"::ScaleRange_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_ScaleRange__FastEl_stub,TA_taList_ScaleRange__FastEl_MethArgs},
  {NULL,"::ScaleRange_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_ScaleRange__DefaultEl_stub,NULL},
  {NULL,"::ScaleRange_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_ScaleRange__Edit_El_stub,TA_taList_ScaleRange__Edit_El_MethArgs},
  {NULL,"::ScaleRange_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_ScaleRange__FindName_stub,TA_taList_ScaleRange__FindName_MethArgs},
  {NULL,"::ScaleRange_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_ScaleRange__FindType_stub,TA_taList_ScaleRange__FindType_MethArgs},
  {NULL,"::ScaleRange_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_ScaleRange__Pop_stub,NULL},
  {NULL,"::ScaleRange_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_ScaleRange__Peek_stub,NULL},
  {NULL,"::ScaleRange_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_ScaleRange__AddUniqNameOld_stub,TA_taList_ScaleRange__AddUniqNameOld_MethArgs},
  {NULL,"::ScaleRange_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_ScaleRange__LinkUniqNameOld_stub,TA_taList_ScaleRange__LinkUniqNameOld_MethArgs},
  NULL};
static int ClustNode::* TA_ClustNode_MbrOff;
static MemberDef_data TA_ClustNode_MemberDef[]={
  {&TA_float_RArray_ptr,NULL,"pat"," pattern I point to (if leaf)","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::pat))),0,NULL,0},
  {&TA_int,NULL,"leaf_idx"," original leaf index, used for pointing into master distance table","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::leaf_idx))),0,NULL,0},
  {&TA_int,NULL,"leaf_max"," original max number of leaves","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::leaf_max))),0,NULL,0},
  {&TA_float_RArray_ptr,NULL,"leaf_dists"," distance matrix for all leaves","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::leaf_dists))),0,NULL,0},
  {&TA_float,NULL,"par_dist"," distance from parent cluster","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::par_dist))),0,NULL,0},
  {&TA_float,NULL,"nn_dist"," nearest neighbor (within cluster) distance","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::nn_dist))),0,NULL,0},
  {&TA_float,NULL,"tmp_dist"," temporary distance value (for computations)","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::tmp_dist))),0,NULL,0},
  {&TA_float,NULL,"y"," y axis value","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::y))),0,NULL,0},
  {&TA_taBase_List,NULL,"children"," my sub-nodes","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::children))),0,NULL,0},
  {&TA_taBase_List,NULL,"nns"," nearest neighbor(s)","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::nns))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ClustNode_GetChild_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ClustNode_GetNN_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ClustNode_GetNNDist_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ClustNode_SetPat_MethArgs[]={
  {&TA_float_RArray_ptr,NULL,"pt",""},
  NULL};
static MethodArgs_data TA_ClustNode_AddChild_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  {&TA_float,NULL,"dst"," 0.0f"},
  NULL};
static MethodArgs_data TA_ClustNode_LinkNN_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  {&TA_float,NULL,"dst"," 0.0f"},
  NULL};
static MethodArgs_data TA_ClustNode_RemoveChild_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  NULL};
static MethodArgs_data TA_ClustNode_FindChild_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  NULL};
static MethodArgs_data TA_ClustNode_Cluster_MethArgs[]={
  {NULL,"float_RArray::DistMetric","metric","float_RArray::EUCLIDIAN"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ClustNode_Graph_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_ClustNode_XGraph_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fnm",""},
  {&TA_const_char_ptr,NULL,"title",""},
  NULL};
static MethodArgs_data TA_ClustNode_GraphData_MethArgs[]={
  {&TA_DataTable_ptr,NULL,"dt",""},
  NULL};
static MethodDef_data TA_ClustNode_MethodDef[]={
  {&TA_ClustNode_ptr,NULL,"GetChild","","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GetChild_stub,TA_ClustNode_GetChild_MethArgs},
  {&TA_ClustNode_ptr,NULL,"GetNN","","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GetNN_stub,TA_ClustNode_GetNN_MethArgs},
  {&TA_float_ref,NULL,"GetNNDist","","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GetNNDist_stub,TA_ClustNode_GetNNDist_MethArgs},
  {&TA_void,NULL,"SetPat"," use setpointer to set pat","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_SetPat_stub,TA_ClustNode_SetPat_MethArgs},
  {&TA_void,NULL,"AddChild"," add new child (via ClustLink)","","",
    0,2,1,0,NULL,cssElCFun_ClustNode_AddChild_stub,TA_ClustNode_AddChild_MethArgs},
  {&TA_void,NULL,"LinkNN"," add new neighbor (via ClustLink)","","",
    0,2,1,0,NULL,cssElCFun_ClustNode_LinkNN_stub,TA_ClustNode_LinkNN_MethArgs},
  {&TA_bool,NULL,"RemoveChild"," remove link with this node","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_RemoveChild_stub,TA_ClustNode_RemoveChild_MethArgs},
  {&TA_int,NULL,"FindChild"," find child with this node link","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_FindChild_stub,TA_ClustNode_FindChild_MethArgs},
  {&TA_void,NULL,"Cluster"," generate the cluster: call on a root node with a flat list of leaf children","","",
    0,3,0,0,NULL,cssElCFun_ClustNode_Cluster_stub,TA_ClustNode_Cluster_MethArgs},
  {&TA_void,NULL,"Graph"," generate commands to drive graph (or xgraph) for plotting cluster","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_Graph_stub,TA_ClustNode_Graph_MethArgs},
  {&TA_void,NULL,"XGraph"," generate graph in given file name with given title, and call xgraph on result","","",
    0,2,-1,0,NULL,cssElCFun_ClustNode_XGraph_stub,TA_ClustNode_XGraph_MethArgs},
  {&TA_void,NULL,"GraphData"," generate graph as X, Y, label points in a datatable, suitable for graphing","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GraphData_stub,TA_ClustNode_GraphData_MethArgs},
  NULL};
static int DataItem::* TA_DataItem_MbrOff;
static MemberDef_data TA_DataItem_MemberDef[]={
  {&TA_taString,NULL,"name"," name of data item","HIDDEN_INLINE ","",
    *((ta_memb_ptr*)&(TA_DataItem_MbrOff=(int DataItem::*)(&DataItem::name))),0,NULL,0},
  {&TA_taString,NULL,"disp_opts"," default display options for item","HIDDEN_INLINE ","",
    *((ta_memb_ptr*)&(TA_DataItem_MbrOff=(int DataItem::*)(&DataItem::disp_opts))),0,NULL,0},
  {&TA_bool,NULL,"is_string"," is a string-valued item","HIDDEN_INLINE ","",
    *((ta_memb_ptr*)&(TA_DataItem_MbrOff=(int DataItem::*)(&DataItem::is_string))),0,NULL,0},
  {&TA_int,NULL,"vec_n"," length of vector (0 if not)","HIDDEN_INLINE ","",
    *((ta_memb_ptr*)&(TA_DataItem_MbrOff=(int DataItem::*)(&DataItem::vec_n))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataItem_SetStringName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_DataItem_SetNarrowName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_DataItem_SetFloatVecNm_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataItem_SetStringVecNm_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataItem_AddDispOption_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodArgs_data TA_DataItem_HasDispOption_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodArgs_data TA_DataItem_DispOptionAfter_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodDef_data TA_DataItem_MethodDef[]={
  {&TA_void,NULL,"SetStringName","","","",
    0,1,-1,0,NULL,cssElCFun_DataItem_SetStringName_stub,TA_DataItem_SetStringName_MethArgs},
  {&TA_void,NULL,"SetNarrowName","","","",
    0,1,-1,0,NULL,cssElCFun_DataItem_SetNarrowName_stub,TA_DataItem_SetNarrowName_MethArgs},
  {&TA_void,NULL,"SetFloatVecNm","","","",
    0,2,-1,0,NULL,cssElCFun_DataItem_SetFloatVecNm_stub,TA_DataItem_SetFloatVecNm_MethArgs},
  {&TA_void,NULL,"SetStringVecNm","","","",
    0,2,-1,0,NULL,cssElCFun_DataItem_SetStringVecNm_stub,TA_DataItem_SetStringVecNm_MethArgs},
  {&TA_void,NULL,"AddDispOption"," adds an option, checking that it is not already there first..","","",
    0,1,-1,0,NULL,cssElCFun_DataItem_AddDispOption_stub,TA_DataItem_AddDispOption_MethArgs},
  {&TA_bool,NULL,"HasDispOption"," check if a given display option is set","","",
    0,1,-1,0,NULL,cssElCFun_DataItem_HasDispOption_stub,TA_DataItem_HasDispOption_MethArgs},
  {&TA_taString,NULL,"DispOptionAfter"," returns portion of option after given opt fragment","","",
    0,1,-1,0,NULL,cssElCFun_DataItem_DispOptionAfter_stub,TA_DataItem_DispOptionAfter_MethArgs},
  NULL};
static EnumDef_data TA_taList_DataItem__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_DataItem__MoveBefore_MethArgs[]={
  {NULL,"::DataItem_ptr","trg",""},
  {NULL,"::DataItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataItem__MoveAfter_MethArgs[]={
  {NULL,"::DataItem_ptr","trg",""},
  {NULL,"::DataItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataItem__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_DataItem__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_DataItem__Edit_El_MethArgs[]={
  {NULL,"::DataItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataItem__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_DataItem__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_DataItem__AddUniqNameOld_MethArgs[]={
  {NULL,"::DataItem_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_DataItem__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DataItem_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_DataItem__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_DataItem__MoveBefore_stub,TA_taList_DataItem__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_DataItem__MoveAfter_stub,TA_taList_DataItem__MoveAfter_MethArgs},
  {NULL,"::DataItem_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataItem__SafeEl_stub,TA_taList_DataItem__SafeEl_MethArgs},
  {NULL,"::DataItem_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataItem__FastEl_stub,TA_taList_DataItem__FastEl_MethArgs},
  {NULL,"::DataItem_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataItem__DefaultEl_stub,NULL},
  {NULL,"::DataItem_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_DataItem__Edit_El_stub,TA_taList_DataItem__Edit_El_MethArgs},
  {NULL,"::DataItem_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_DataItem__FindName_stub,TA_taList_DataItem__FindName_MethArgs},
  {NULL,"::DataItem_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_DataItem__FindType_stub,TA_taList_DataItem__FindType_MethArgs},
  {NULL,"::DataItem_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataItem__Pop_stub,NULL},
  {NULL,"::DataItem_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_DataItem__Peek_stub,NULL},
  {NULL,"::DataItem_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataItem__AddUniqNameOld_stub,TA_taList_DataItem__AddUniqNameOld_MethArgs},
  {NULL,"::DataItem_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_DataItem__LinkUniqNameOld_stub,TA_taList_DataItem__LinkUniqNameOld_MethArgs},
  NULL};
static int LogData::* TA_LogData_MbrOff;
static MemberDef_data TA_LogData_MemberDef[]={
  {&TA_DataItem_List,NULL,"items"," data items for each column of log data","LINK_GROUP ","",
    *((ta_memb_ptr*)&(TA_LogData_MbrOff=(int LogData::*)(&LogData::items))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LogData_AddFloat_MethArgs[]={
  {&TA_DataItem_ptr,NULL,"head",""},
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_LogData_AddString_MethArgs[]={
  {&TA_DataItem_ptr,NULL,"head",""},
  {&TA_char_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_LogData_IsString_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_LogData_IsVec_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_LogData_GetVecN_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_LogData_GetFloat_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_LogData_GetString_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_LogData_CompareItems_MethArgs[]={
  {&TA_const_LogData_ref,NULL,"cmp",""},
  NULL};
static MethodDef_data TA_LogData_MethodDef[]={
  {&TA_int,NULL,"indexSize","","","",
    0,0,-1,0,NULL,cssElCFun_LogData_indexSize_stub,NULL},
  {&TA_void,NULL,"Reset"," reset all data","","",
    0,0,-1,0,NULL,cssElCFun_LogData_Reset_stub,NULL},
  {&TA_void,NULL,"AddFloat"," add a float data item","","",
    0,2,-1,0,NULL,cssElCFun_LogData_AddFloat_stub,TA_LogData_AddFloat_MethArgs},
  {&TA_void,NULL,"AddString"," add a string data item (head code is set by this function)","","",
    0,2,-1,0,NULL,cssElCFun_LogData_AddString_stub,TA_LogData_AddString_MethArgs},
  {&TA_bool,NULL,"IsString"," return true if ith item is a string","","",
    0,1,-1,0,NULL,cssElCFun_LogData_IsString_stub,TA_LogData_IsString_MethArgs},
  {&TA_bool,NULL,"IsVec"," return true if ith item is a vector","","",
    0,1,-1,0,NULL,cssElCFun_LogData_IsVec_stub,TA_LogData_IsVec_MethArgs},
  {&TA_int,NULL,"GetVecN"," return length of vector","","",
    0,1,-1,0,NULL,cssElCFun_LogData_GetVecN_stub,TA_LogData_GetVecN_MethArgs},
  {&TA_float_ref,NULL,"GetFloat"," get the ith data item (which better be a float)","","",
    0,1,-1,0,NULL,cssElCFun_LogData_GetFloat_stub,TA_LogData_GetFloat_MethArgs},
  {&TA_taString_ref,NULL,"GetString"," get the ith data item (which better be a str)","","",
    0,1,-1,0,NULL,cssElCFun_LogData_GetString_stub,TA_LogData_GetString_MethArgs},
  {&TA_void,NULL,"InitBlankData"," reset & add blank data items to match headers","","",
    0,0,-1,0,NULL,cssElCFun_LogData_InitBlankData_stub,NULL},
  {&TA_bool,NULL,"CompareItems"," compare items pointers in log data's, true if same","","",
    0,1,-1,0,NULL,cssElCFun_LogData_CompareItems_stub,TA_LogData_CompareItems_MethArgs},
  NULL};
static EnumDef_data TA_float_RArray_DistMetric[]={
  {"SUM_SQUARES"," sum of squares: sum[(x-y)^2]","",0},
  {"EUCLIDIAN"," Euclidian distance (sqrt of sum of squares)","",1},
  {"HAMMING"," Hamming distance: sum[abs(x-y)]","",2},
  {"COVAR"," covariance: sum[(x-<x>)(y-<y>)]","",3},
  {"CORREL"," correlation: sum[(x-<x>)(y-<y>)] / sqrt(sum[x^2 y^2])","",4},
  {"INNER_PROD"," inner product: sum[x y]","",5},
  {"CROSS_ENTROPY"," cross entropy: sum[x ln(x/y) + (1-x)ln((1-x)/(1-y))]","",6},
  NULL};
static int float_RArray::* TA_float_RArray_MbrOff;
static MemberDef_data TA_float_RArray_MemberDef[]={
  {&TA_MinMax,NULL,"range"," min-max range of the data","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_float_RArray_MbrOff=(int float_RArray::*)(&float_RArray::range))),0,NULL,0},
  NULL};
static MethodArgs_data TA_float_RArray_Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {&TA_const_float_ref,NULL,"item",""},
  NULL};
static MethodArgs_data TA_float_RArray_Add_MethArgs[]={
  {&TA_const_float_ref,NULL,"item",""},
  NULL};
static MethodArgs_data TA_float_RArray_Insert_MethArgs[]={
  {&TA_const_float_ref,NULL,"item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_float_RArray_UpdateRange_MethArgs[]={
  {&TA_float,NULL,"item",""},
  NULL};
static MethodArgs_data TA_float_RArray_MaxVal_MethArgs[]={
  {&TA_int_ref,NULL,"idx",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_AbsMaxVal_MethArgs[]={
  {&TA_int_ref,NULL,"idx",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_MinVal_MethArgs[]={
  {&TA_int_ref,NULL,"idx",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Sum_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Mean_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Var_MethArgs[]={
  {&TA_float,NULL,"mean","0"},
  {&TA_bool,NULL,"use_mean","false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_StdDev_MethArgs[]={
  {&TA_float,NULL,"mean","0"},
  {&TA_bool,NULL,"use_mean","false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SEM_MethArgs[]={
  {&TA_float,NULL,"mean","0"},
  {&TA_bool,NULL,"use_mean","false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SSLength_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SumSquaresDist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_EuclidDist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_HammingDist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Covar_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Correl_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_InnerProd_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_CrossEntropy_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Dist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {NULL,"::DistMetric","metric",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_LargerFurther_MethArgs[]={
  {NULL,"::DistMetric","metric",""},
  NULL};
static MethodArgs_data TA_float_RArray_Histogram_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_float,NULL,"bin_size",""},
  NULL};
static MethodArgs_data TA_float_RArray_AggToArray_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"from",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_AggToVal_MethArgs[]={
  {&TA_Aggregate_ref,NULL,"agg",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormLen_MethArgs[]={
  {&TA_float,NULL,"len","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormSum_MethArgs[]={
  {&TA_float,NULL,"sum","1.0f"},
  {&TA_float,NULL,"min_val","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormMax_MethArgs[]={
  {&TA_float,NULL,"max","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormAbsMax_MethArgs[]={
  {&TA_float,NULL,"max","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SimpleMath_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"math_spec",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SimpleMathArg_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"arg_ary",""},
  {&TA_const_SimpleMathSpec_ref,NULL,"math_spec",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Threshold_MethArgs[]={
  {&TA_float,NULL,"thresh",".5f"},
  {&TA_float,NULL,"low","0.0f"},
  {&TA_float,NULL,"high","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_WritePoint_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  {&TA_float,NULL,"color","1.0"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_RenderLine_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"xs",""},
  {&TA_int,NULL,"ys",""},
  {&TA_int,NULL,"xe",""},
  {&TA_int,NULL,"ye",""},
  {&TA_float,NULL,"color","1.0"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_WriteXPoints_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  {&TA_const_float_RArray_ref,NULL,"color",""},
  {&TA_int,NULL,"wdth","1"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_WriteYPoints_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  {&TA_const_float_RArray_ref,NULL,"color",""},
  {&TA_int,NULL,"wdth","1"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_RenderWideLine_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"xs",""},
  {&TA_int,NULL,"ys",""},
  {&TA_int,NULL,"xe",""},
  {&TA_int,NULL,"ye",""},
  {&TA_const_float_RArray_ref,NULL,"color",""},
  {&TA_int,NULL,"wdth","1"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_SafeMatEl_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastMatEl_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastMatEl1_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastEl1_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_float_RArray_GetMatCol_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_float_RArray_ref,NULL,"col_vec",""},
  {&TA_int,NULL,"col_no",""},
  NULL};
static MethodArgs_data TA_float_RArray_GetMatRow_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_float_RArray_ref,NULL,"row_vec",""},
  {&TA_int,NULL,"row_no",""},
  NULL};
static MethodArgs_data TA_float_RArray_SafeTriMatEl_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastTriMatEl_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  NULL};
static MethodArgs_data TA_float_RArray_AllocSqMatSize_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_float_RArray_AllocTriMatSize_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_float_RArray_CopyFmTriMat_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_const_float_RArray_ref,NULL,"tri_mat",""},
  NULL};
static MethodArgs_data TA_float_RArray_TriDiagMatRed_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"diags",""},
  {&TA_float_RArray_ref,NULL,"off_diags",""},
  NULL};
static MethodArgs_data TA_float_RArray_TriDiagQL_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"diags",""},
  {&TA_float_RArray_ref,NULL,"off_diags",""},
  NULL};
static MethodArgs_data TA_float_RArray_Eigens_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"evals",""},
  NULL};
static MethodArgs_data TA_float_RArray_MDS_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"xcoords",""},
  {&TA_float_RArray_ref,NULL,"ycoords",""},
  {&TA_int,NULL,"x_axis_component"," 0"},
  {&TA_int,NULL,"y_axis_component"," 1"},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodDef_data TA_float_RArray_MethodDef[]={
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    1,2,-1,0,NULL,cssElCFun_float_RArray_Set_stub,TA_float_RArray_Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    1,1,-1,0,NULL,cssElCFun_float_RArray_Add_stub,TA_float_RArray_Add_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    1,3,2,0,NULL,cssElCFun_float_RArray_Insert_stub,TA_float_RArray_Insert_MethArgs},
  {&TA_void,NULL,"UpdateRange","","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_UpdateRange_stub,TA_float_RArray_UpdateRange_MethArgs},
  {&TA_void,NULL,"UpdateAllRange"," update range for all items in array","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_float_RArray_UpdateAllRange_stub,NULL},
  {&TA_float,NULL,"MaxVal"," value and index of the (first) element that has the maximum value","MENU MENU_ON_Actions USE_RVAL ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_MaxVal_stub,TA_float_RArray_MaxVal_MethArgs},
  {&TA_float,NULL,"AbsMaxVal"," value and index of the (first) element that has the maximum absolute value","MENU MENU_ON_Actions USE_RVAL ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_AbsMaxVal_stub,TA_float_RArray_AbsMaxVal_MethArgs},
  {&TA_float,NULL,"MinVal"," value and index of the (first) element that has the minimum value","MENU USE_RVAL ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_MinVal_stub,TA_float_RArray_MinVal_MethArgs},
  {&TA_float,NULL,"Sum"," compute the sum of the values in the array","MENU MENU_ON_Actions USE_RVAL ","",
    0,2,0,0,NULL,cssElCFun_float_RArray_Sum_stub,TA_float_RArray_Sum_MethArgs},
  {&TA_float,NULL,"Mean"," compute the mean of the values in the array","MENU USE_RVAL ","",
    0,2,0,0,NULL,cssElCFun_float_RArray_Mean_stub,TA_float_RArray_Mean_MethArgs},
  {&TA_float,NULL,"Var"," compute the variance of the values, opt with given mean","MENU USE_RVAL ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_Var_stub,TA_float_RArray_Var_MethArgs},
  {&TA_float,NULL,"StdDev"," compute the standard deviation of the values, opt with given mean","MENU USE_RVAL ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_StdDev_stub,TA_float_RArray_StdDev_MethArgs},
  {&TA_float,NULL,"SEM"," compute the standard error of the mean of the values, opt with given mean","MENU USE_RVAL ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_SEM_stub,TA_float_RArray_SEM_MethArgs},
  {&TA_float,NULL,"SSLength"," sum-of-squares length of the array","MENU USE_RVAL ","",
    0,2,0,0,NULL,cssElCFun_float_RArray_SSLength_stub,TA_float_RArray_SSLength_MethArgs},
  {&TA_float,NULL,"SumSquaresDist"," compute sum-squares dist between this and the oth, tolerance is by element","","",
    0,5,1,0,NULL,cssElCFun_float_RArray_SumSquaresDist_stub,TA_float_RArray_SumSquaresDist_MethArgs},
  {&TA_float,NULL,"EuclidDist"," compute Euclidian dist between this and the oth, tolerance is by element","","",
    0,5,1,0,NULL,cssElCFun_float_RArray_EuclidDist_stub,TA_float_RArray_EuclidDist_MethArgs},
  {&TA_float,NULL,"HammingDist"," compute Hamming dist between this and the oth, tolerance is by element","","",
    0,5,1,0,NULL,cssElCFun_float_RArray_HammingDist_stub,TA_float_RArray_HammingDist_MethArgs},
  {&TA_float,NULL,"Covar"," compute the covariance of this array the oth array","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_Covar_stub,TA_float_RArray_Covar_MethArgs},
  {&TA_float,NULL,"Correl"," compute the correlation of this array with the oth array","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_Correl_stub,TA_float_RArray_Correl_MethArgs},
  {&TA_float,NULL,"InnerProd"," compute the inner product of this array and the oth array","","",
    0,4,1,0,NULL,cssElCFun_float_RArray_InnerProd_stub,TA_float_RArray_InnerProd_MethArgs},
  {&TA_float,NULL,"CrossEntropy"," compute cross entropy between this and other array, this is 'p' other is 'q'","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_CrossEntropy_stub,TA_float_RArray_CrossEntropy_MethArgs},
  {&TA_float,NULL,"Dist"," compute generalized distance metric with other array (calls appropriate fun above)","","",
    0,6,2,0,NULL,cssElCFun_float_RArray_Dist_stub,TA_float_RArray_Dist_MethArgs},
  {&TA_bool,NULL,"LargerFurther"," returns true if a larger value of given distance metric means further apart","","",
    0,1,-1,1,(ta_void_fun)(float_RArray::LargerFurther),cssElCFun_float_RArray_LargerFurther_stub,TA_float_RArray_LargerFurther_MethArgs},
  {&TA_void,NULL,"Histogram"," this gets a histogram (counts) of number of values in other array","","",
    0,2,-1,0,NULL,cssElCFun_float_RArray_Histogram_stub,TA_float_RArray_Histogram_MethArgs},
  {&TA_void,NULL,"AggToArray"," aggregate values from other array to this one using aggregation params of agg","","",
    0,4,2,0,NULL,cssElCFun_float_RArray_AggToArray_stub,TA_float_RArray_AggToArray_MethArgs},
  {&TA_float,NULL,"AggToVal"," compute aggregate of values in this array using aggregation params of agg","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_AggToVal_stub,TA_float_RArray_AggToVal_MethArgs},
  {&TA_float,NULL,"NormLen"," normalize array to total given length (1.0), returns scale","MENU ","",
    0,3,0,0,NULL,cssElCFun_float_RArray_NormLen_stub,TA_float_RArray_NormLen_MethArgs},
  {&TA_float,NULL,"NormSum"," normalize array to total given sum (1.0) and min_val (0) (uses range), returns scale","MENU ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_NormSum_stub,TA_float_RArray_NormSum_MethArgs},
  {&TA_float,NULL,"NormMax"," normalize array to given maximum value, returns scale","MENU ","",
    0,3,0,0,NULL,cssElCFun_float_RArray_NormMax_stub,TA_float_RArray_NormMax_MethArgs},
  {&TA_float,NULL,"NormAbsMax"," normalize array to given absolute maximum value, returns scale","MENU ","",
    0,3,0,0,NULL,cssElCFun_float_RArray_NormAbsMax_stub,TA_float_RArray_NormAbsMax_MethArgs},
  {&TA_void,NULL,"SimpleMath"," apply standard kinds of simple math operators to values in the array","MENU ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_SimpleMath_stub,TA_float_RArray_SimpleMath_MethArgs},
  {&TA_void,NULL,"SimpleMathArg"," apply simple math operators to values, other array provides 'arg' value for math_spec","","",
    0,4,2,0,NULL,cssElCFun_float_RArray_SimpleMathArg_stub,TA_float_RArray_SimpleMathArg_MethArgs},
  {&TA_int,NULL,"Threshold"," threshold values in the array, low vals go to low, etc.","MENU ","",
    0,5,0,0,NULL,cssElCFun_float_RArray_Threshold_stub,TA_float_RArray_Threshold_MethArgs},
  {&TA_void,NULL,"WritePoint"," write a single point, assuming geometry geom","","",
    0,5,3,0,NULL,cssElCFun_float_RArray_WritePoint_stub,TA_float_RArray_WritePoint_MethArgs},
  {&TA_void,NULL,"RenderLine"," render a line from given x,y starting, ending coords in 2d space of geometry geom","MENU ","",
    0,7,5,0,NULL,cssElCFun_float_RArray_RenderLine_stub,TA_float_RArray_RenderLine_MethArgs},
  {&TA_void,NULL,"WriteXPoints"," write a series of points of given width in x dimension using colors in order","","",
    0,6,4,0,NULL,cssElCFun_float_RArray_WriteXPoints_stub,TA_float_RArray_WriteXPoints_MethArgs},
  {&TA_void,NULL,"WriteYPoints"," write a series of points of given width in y dimension using colors in order","","",
    0,6,4,0,NULL,cssElCFun_float_RArray_WriteYPoints_stub,TA_float_RArray_WriteYPoints_MethArgs},
  {&TA_void,NULL,"RenderWideLine"," render a wide line from given x,y starting, ending coords in 2d space of geometry geom","MENU ","",
    0,8,6,0,NULL,cssElCFun_float_RArray_RenderWideLine_stub,TA_float_RArray_RenderWideLine_MethArgs},
  {&TA_const_float_ref,NULL,"SafeMatEl"," safe get element assuming a matrix layout of values with column (inner) dimension size = col_dim","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_SafeMatEl_stub,TA_float_RArray_SafeMatEl_MethArgs},
  {&TA_const_float_ref,NULL,"FastMatEl","","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_FastMatEl_stub,TA_float_RArray_FastMatEl_MethArgs},
  {&TA_const_float_ref,NULL,"FastMatEl1"," fast get element assuming a matrix layout of values with column (inner) dimension size = col_dim, indicies use 1-n range instead of 0-n-1!","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_FastMatEl1_stub,TA_float_RArray_FastMatEl1_MethArgs},
  {&TA_const_float_ref,NULL,"FastEl1","","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_FastEl1_stub,TA_float_RArray_FastEl1_MethArgs},
  {&TA_void,NULL,"GetMatCol"," extract given column from this matrix-formatted object","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_GetMatCol_stub,TA_float_RArray_GetMatCol_MethArgs},
  {&TA_void,NULL,"GetMatRow"," extract given row from this matrix-formatted object","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_GetMatRow_stub,TA_float_RArray_GetMatRow_MethArgs},
  {&TA_const_float_ref,NULL,"SafeTriMatEl"," get element assuming an upper-triangular symmetric matrix (e.g., distance matrix) of dimension dim for two items, x, y","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_SafeTriMatEl_stub,TA_float_RArray_SafeTriMatEl_MethArgs},
  {&TA_const_float_ref,NULL,"FastTriMatEl","","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_FastTriMatEl_stub,TA_float_RArray_FastTriMatEl_MethArgs},
  {&TA_void,NULL,"AllocSqMatSize"," allocate space (enforcesize) for a square matrix of size dim","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_AllocSqMatSize_stub,TA_float_RArray_AllocSqMatSize_MethArgs},
  {&TA_void,NULL,"AllocTriMatSize"," allocate space (enforcesize) for an upper-triangular matrix of size dim","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_AllocTriMatSize_stub,TA_float_RArray_AllocTriMatSize_MethArgs},
  {&TA_void,NULL,"CopyFmTriMat"," copy from upper-triangular symmetric matrix of given dimensionality into a full matrix","","",
    0,2,-1,0,NULL,cssElCFun_float_RArray_CopyFmTriMat_stub,TA_float_RArray_CopyFmTriMat_MethArgs},
  {&TA_bool,NULL,"TriDiagMatRed"," reduce current full square matrix to a tri-diagonal form using the Householder transformation (first step in computing eigenvectors/values) -- diags are eigenvalues","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_TriDiagMatRed_stub,TA_float_RArray_TriDiagMatRed_MethArgs},
  {&TA_bool,NULL,"TriDiagQL"," perform QL algorithm to compute eigenvector/values of a tri-diagonal matrix as computed by TriDiagMatRed (this = matrix)","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_TriDiagQL_stub,TA_float_RArray_TriDiagQL_MethArgs},
  {&TA_bool,NULL,"Eigens"," compute eigenvalue/vector decomposition of this square matrix of dimension dim. eigen values are in evals, and this matrix contains the eigenvectors","","",
    0,2,-1,0,NULL,cssElCFun_float_RArray_Eigens_stub,TA_float_RArray_Eigens_MethArgs},
  {&TA_bool,NULL,"MDS"," perform multidiminesional scaling of this distace matrix (must be full square matrix), returning two-dimensional coordinates that best capture the distance relationships among the items in x,y coords using specified components","","",
    0,6,3,0,NULL,cssElCFun_float_RArray_MDS_stub,TA_float_RArray_MDS_MethArgs},
  NULL};
static EnumDef_data TA_DataArray_impl_ValType[]={
  {"VT_UNKNOWN","","",0},
  {"VT_STRING","","",1},
  {"VT_FLOAT","","",2},
  {"VT_INT","","",3},
  NULL};
static int DataArray_impl::* TA_DataArray_impl_MbrOff;
static MemberDef_data TA_DataArray_impl_MemberDef[]={
  {&TA_taString,NULL,"disp_opts"," viewer default display options","","",
    *((ta_memb_ptr*)&(TA_DataArray_impl_MbrOff=(int DataArray_impl::*)(&DataArray_impl::disp_opts))),0,NULL,0},
  {&TA_bool,NULL,"save_to_file"," save this data to a file (e.g., to a log file in PDP++)?","","",
    *((ta_memb_ptr*)&(TA_DataArray_impl_MbrOff=(int DataArray_impl::*)(&DataArray_impl::save_to_file))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataArray_impl_DecodeName_MethArgs[]={
  {&TA_taString,NULL,"nm",""},
  {&TA_taString_ref,NULL,"base_nm",""},
  {NULL,"::ValType_ref","vt",""},
  {&TA_int_ref,NULL,"vec_col",""},
  {&TA_int_ref,NULL,"col_cnt",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_ValTypeToStr_MethArgs[]={
  {NULL,"::ValType","vt",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_GetValAsString_MethArgs[]={
  {&TA_int,NULL,"row",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_GetValAsFloat_MethArgs[]={
  {&TA_int,NULL,"row",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_GetValAsInt_MethArgs[]={
  {&TA_int,NULL,"row",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_HasDispOption_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_DispOptionAfter_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_AddDispOption_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodDef_data TA_DataArray_impl_MethodDef[]={
  {&TA_void,NULL,"DecodeName","","","",
    0,5,-1,1,(ta_void_fun)(DataArray_impl::DecodeName),cssElCFun_DataArray_impl_DecodeName_stub,TA_DataArray_impl_DecodeName_MethArgs},
  {&TA_taString,NULL,"ValTypeToStr","","","",
    0,1,-1,1,(ta_void_fun)(DataArray_impl::ValTypeToStr),cssElCFun_DataArray_impl_ValTypeToStr_stub,TA_DataArray_impl_ValTypeToStr_MethArgs},
  {&TA_bool,NULL,"is_float"," these tests are done all the time","","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_is_float_stub,NULL},
  {&TA_bool,NULL,"is_string"," these tests are done all the time","","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_is_string_stub,NULL},
  {&TA_int,NULL,"displayWidth"," low level display width, in tabs (8 chars/tab), taken from spec","","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_displayWidth_stub,NULL},
  {&TA_int,NULL,"maxColWidth"," aprox max number of columns, in characters","","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_maxColWidth_stub,NULL},
  {NULL,"::ValType","valType"," overridden in numeric subclasses","","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_valType_stub,NULL},
  {&TA_taString,NULL,"GetValAsString"," overridden in subclasses","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_GetValAsString_stub,TA_DataArray_impl_GetValAsString_MethArgs},
  {&TA_float,NULL,"GetValAsFloat"," overridden in subclasses","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_GetValAsFloat_stub,TA_DataArray_impl_GetValAsFloat_MethArgs},
  {&TA_int,NULL,"GetValAsInt"," overridden in subclasses","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_GetValAsInt_stub,TA_DataArray_impl_GetValAsInt_MethArgs},
  {&TA_taArray_base_ptr,NULL,"AR"," the array pointer","","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_AR_stub,NULL},
  {&TA_bool,NULL,"HasDispOption"," check if a given display option is set","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_HasDispOption_stub,TA_DataArray_impl_HasDispOption_MethArgs},
  {&TA_taString,NULL,"DispOptionAfter","","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_DispOptionAfter_stub,TA_DataArray_impl_DispOptionAfter_MethArgs},
  {&TA_void,NULL,"AddDispOption","","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_AddDispOption_stub,TA_DataArray_impl_AddDispOption_MethArgs},
  NULL};
static EnumDef_data TA_taGroup_DataArray_impl__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__MoveBefore_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","trg",""},
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__MoveAfter_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","trg",""},
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__Edit_El_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__AddUniqNameOld_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_DataArray_impl__MethodDef[]={
  {NULL,"::DataArray_impl_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FirstEl_stub,TA_taGroup_DataArray_impl__FirstEl_MethArgs},
  {NULL,"::DataArray_impl_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__NextEl_stub,TA_taGroup_DataArray_impl__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__MoveBefore_stub,TA_taGroup_DataArray_impl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__MoveAfter_stub,TA_taGroup_DataArray_impl__MoveAfter_MethArgs},
  {NULL,"::DataArray_impl_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__SafeEl_stub,TA_taGroup_DataArray_impl__SafeEl_MethArgs},
  {NULL,"::DataArray_impl_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FastEl_stub,TA_taGroup_DataArray_impl__FastEl_MethArgs},
  {NULL,"::DataArray_impl_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__DefaultEl_stub,NULL},
  {NULL,"::DataArray_impl_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Edit_El_stub,TA_taGroup_DataArray_impl__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__SafeGp_stub,TA_taGroup_DataArray_impl__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FastGp_stub,TA_taGroup_DataArray_impl__FastGp_MethArgs},
  {NULL,"::DataArray_impl_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Leaf_stub,TA_taGroup_DataArray_impl__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__LeafGp_stub,TA_taGroup_DataArray_impl__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FirstGp_stub,TA_taGroup_DataArray_impl__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__NextGp_stub,TA_taGroup_DataArray_impl__NextGp_MethArgs},
  {NULL,"::DataArray_impl_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DataArray_impl__NewEl_stub,TA_taGroup_DataArray_impl__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DataArray_impl__NewGp_stub,TA_taGroup_DataArray_impl__NewGp_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindName_stub,TA_taGroup_DataArray_impl__FindName_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindType_stub,TA_taGroup_DataArray_impl__FindType_MethArgs},
  {NULL,"::DataArray_impl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Pop_stub,NULL},
  {NULL,"::DataArray_impl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Peek_stub,NULL},
  {NULL,"::DataArray_impl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__AddUniqNameOld_stub,TA_taGroup_DataArray_impl__AddUniqNameOld_MethArgs},
  {NULL,"::DataArray_impl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__LinkUniqNameOld_stub,TA_taGroup_DataArray_impl__LinkUniqNameOld_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindLeafName_stub,TA_taGroup_DataArray_impl__FindLeafName_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindLeafType_stub,TA_taGroup_DataArray_impl__FindLeafType_MethArgs},
  NULL};
static int DataTable::* TA_DataTable_MbrOff;
static MemberDef_data TA_DataTable_MemberDef[]={
  {&TA_int,NULL,"rows"," NOTE: this is only valid for top-level DataTable, not its subgroups","READ_ONLY NO_SAVE SHOW ","",
    *((ta_memb_ptr*)&(TA_DataTable_MbrOff=(int DataTable::*)(&DataTable::rows))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataTable_SetFieldData_MethArgs[]={
  {&TA_LogData_ref,NULL,"ld",""},
  {&TA_int,NULL,"ldi",""},
  {&TA_DataItem_ptr,NULL,"ditem",""},
  {&TA_DataTable_ptr,NULL,"dat",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_DataTable_SetFieldHead_MethArgs[]={
  {&TA_DataItem_ptr,NULL,"ditem",""},
  {&TA_DataTable_ptr,NULL,"dat",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_DataTable_idx_MethArgs[]={
  {&TA_int,NULL,"row_num",""},
  {&TA_int,NULL,"col_size",""},
  {&TA_int_ref,NULL,"act_idx",""},
  NULL};
static MethodArgs_data TA_DataTable_RemoveRow_MethArgs[]={
  {&TA_int,NULL,"row_num",""},
  NULL};
static MethodArgs_data TA_DataTable_ShiftUp_MethArgs[]={
  {&TA_int,NULL,"num_rows",""},
  NULL};
static MethodArgs_data TA_DataTable_AddRow_MethArgs[]={
  {&TA_LogData_ref,NULL,"ld",""},
  NULL};
static MethodArgs_data TA_DataTable_AllocRows_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataTable_SetSaveToFile_MethArgs[]={
  {&TA_bool,NULL,"save_to_file",""},
  NULL};
static MethodArgs_data TA_DataTable_AddRowToArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  NULL};
static MethodArgs_data TA_DataTable_AggRowToArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_DataTable_AggRowToVal_MethArgs[]={
  {&TA_int,NULL,"row_num",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_DataTable_AddArrayToRow_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ar",""},
  NULL};
static MethodArgs_data TA_DataTable_AggArrayToRow_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_DataTable_PutArrayToRow_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  NULL};
static MethodArgs_data TA_DataTable_NewCol_MethArgs[]={
  {NULL,"DataArray_impl::ValType","val_type",""},
  {&TA_const_char_ptr,NULL,"col_nm",""},
  NULL};
static MethodArgs_data TA_DataTable_NewColFloat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  NULL};
static MethodArgs_data TA_DataTable_NewColInt_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  NULL};
static MethodArgs_data TA_DataTable_NewColString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  NULL};
static MethodArgs_data TA_DataTable_NewGroupFloat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataTable_NewGroupInt_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataTable_NewGroupString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataTable_GetColData_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColFloatData_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColStringData_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColFloatArray_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColStringArray_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_PutArrayToCol_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetCols_MethArgs[]={
  {&TA_LogData_ref,NULL,"ld",""},
  NULL};
static MethodArgs_data TA_DataTable_SetColName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_AddColDispOpt_MethArgs[]={
  {&TA_const_char_ptr,NULL,"dsp_opt",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetFloatVal_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetStringVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetLastFloatVal_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetLastStringVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetFloatVal_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetStringVal_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetValAsString_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodDef_data TA_DataTable_MethodDef[]={
  {&TA_void,NULL,"SetFieldData","","","",
    0,5,-1,1,(ta_void_fun)(DataTable::SetFieldData),cssElCFun_DataTable_SetFieldData_stub,TA_DataTable_SetFieldData_MethArgs},
  {&TA_void,NULL,"SetFieldHead","","","",
    0,3,-1,1,(ta_void_fun)(DataTable::SetFieldHead),cssElCFun_DataTable_SetFieldHead_stub,TA_DataTable_SetFieldHead_MethArgs},
  {&TA_bool,NULL,"idx"," calculates an actual index for a col item, based on the current and size of that col; returns 'true' if act_idx >= 0 (i.e., if there is a data item for that column)","rows ","",
    0,3,-1,0,NULL,cssElCFun_DataTable_idx_stub,TA_DataTable_idx_MethArgs},
  {&TA_void,NULL,"ResetData"," deletes all the data, but keeps the column structure","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_DataTable_ResetData_stub,NULL},
  {&TA_void,NULL,"RemoveRow"," Remove an entire row of data","MENU ","",
    0,1,-1,0,NULL,cssElCFun_DataTable_RemoveRow_stub,TA_DataTable_RemoveRow_MethArgs},
  {&TA_void,NULL,"ShiftUp"," remove indicated number of rows of data at front (typically used by Log to make more room in buffer)","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_ShiftUp_stub,TA_DataTable_ShiftUp_MethArgs},
  {&TA_void,NULL,"AddRow"," add a row from the given log data","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_AddRow_stub,TA_DataTable_AddRow_MethArgs},
  {&TA_void,NULL,"AddBlankRow"," add a new row to the data table, returns new row number","MENU ","",
    0,0,-1,0,NULL,cssElCFun_DataTable_AddBlankRow_stub,NULL},
  {&TA_void,NULL,"AllocRows"," allocate space for at least n rows","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_AllocRows_stub,TA_DataTable_AllocRows_MethArgs},
  {&TA_void,NULL,"SetSaveToFile"," set the save_to_file flag for entire group of data elements","MENU ","",
    0,1,-1,0,NULL,cssElCFun_DataTable_SetSaveToFile_stub,TA_DataTable_SetSaveToFile_MethArgs},
  {&TA_void,NULL,"AddRowToArray"," add a row of the datatable to given array","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_AddRowToArray_stub,TA_DataTable_AddRowToArray_MethArgs},
  {&TA_void,NULL,"AggRowToArray"," aggregate a row of the datatable to given array using parameters in agg","","",
    0,3,-1,0,NULL,cssElCFun_DataTable_AggRowToArray_stub,TA_DataTable_AggRowToArray_MethArgs},
  {&TA_float,NULL,"AggRowToVal"," aggregate a row of the datatable to a value using parameters in agg","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_AggRowToVal_stub,TA_DataTable_AggRowToVal_MethArgs},
  {&TA_void,NULL,"AddArrayToRow"," add contents of array to datatable","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_AddArrayToRow_stub,TA_DataTable_AddArrayToRow_MethArgs},
  {&TA_void,NULL,"AggArrayToRow"," aggregate contents of array to datatable at given row","","",
    0,3,-1,0,NULL,cssElCFun_DataTable_AggArrayToRow_stub,TA_DataTable_AggArrayToRow_MethArgs},
  {&TA_void,NULL,"PutArrayToRow"," just put array values into given row of data","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_PutArrayToRow_stub,TA_DataTable_PutArrayToRow_MethArgs},
  {&TA_void,NULL,"UpdateAllRanges"," update all min-max range data for all float_Data elements in log","","",
    0,0,-1,0,NULL,cssElCFun_DataTable_UpdateAllRanges_stub,NULL},
  {&TA_DataArray_impl_ptr,NULL,"NewCol"," create new column of data of indicated type","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_NewCol_stub,TA_DataTable_NewCol_MethArgs},
  {&TA_float_Data_ptr,NULL,"NewColFloat"," create new column of floating point data","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_NewColFloat_stub,TA_DataTable_NewColFloat_MethArgs},
  {&TA_float_Data_ptr,NULL,"NewColInt"," create new column of integer-level data (= narrow display, actually stored as float)","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_NewColInt_stub,TA_DataTable_NewColInt_MethArgs},
  {&TA_String_Data_ptr,NULL,"NewColString"," create new column of string data","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_NewColString_stub,TA_DataTable_NewColString_MethArgs},
  {&TA_DataTable_ptr,NULL,"NewGroupFloat"," create new sub-group of floats of size n, named as base_nm_index","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_NewGroupFloat_stub,TA_DataTable_NewGroupFloat_MethArgs},
  {&TA_DataTable_ptr,NULL,"NewGroupInt"," create new sub-group of ints of size n, named as base_nm_index","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_NewGroupInt_stub,TA_DataTable_NewGroupInt_MethArgs},
  {&TA_DataTable_ptr,NULL,"NewGroupString"," create new sub-group of strings of size n, named as base_nm_index","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_NewGroupString_stub,TA_DataTable_NewGroupString_MethArgs},
  {&TA_DataArray_impl_ptr,NULL,"GetColData"," get data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColData_stub,TA_DataTable_GetColData_MethArgs},
  {&TA_float_Data_ptr,NULL,"GetColFloatData"," get float_Data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColFloatData_stub,TA_DataTable_GetColFloatData_MethArgs},
  {&TA_String_Data_ptr,NULL,"GetColStringData"," get string data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColStringData_stub,TA_DataTable_GetColStringData_MethArgs},
  {&TA_float_RArray_ptr,NULL,"GetColFloatArray"," get float_RArray for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColFloatArray_stub,TA_DataTable_GetColFloatArray_MethArgs},
  {&TA_String_Array_ptr,NULL,"GetColStringArray"," get string data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColStringArray_stub,TA_DataTable_GetColStringArray_MethArgs},
  {&TA_void,NULL,"PutArrayToCol"," just put array values into given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_PutArrayToCol_stub,TA_DataTable_PutArrayToCol_MethArgs},
  {&TA_void,NULL,"SetCols","","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_SetCols_stub,TA_DataTable_SetCols_MethArgs},
  {&TA_void,NULL,"SetColName"," set column name for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_SetColName_stub,TA_DataTable_SetColName_MethArgs},
  {&TA_void,NULL,"AddColDispOpt"," add display option for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_AddColDispOpt_stub,TA_DataTable_AddColDispOpt_MethArgs},
  {&TA_void,NULL,"SetFloatVal"," set float/int data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,4,3,0,NULL,cssElCFun_DataTable_SetFloatVal_stub,TA_DataTable_SetFloatVal_MethArgs},
  {&TA_void,NULL,"SetStringVal"," set string data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,4,3,0,NULL,cssElCFun_DataTable_SetStringVal_stub,TA_DataTable_SetStringVal_MethArgs},
  {&TA_void,NULL,"SetLastFloatVal"," set last row float/int data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_SetLastFloatVal_stub,TA_DataTable_SetLastFloatVal_MethArgs},
  {&TA_void,NULL,"SetLastStringVal"," set last row string data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_SetLastStringVal_stub,TA_DataTable_SetLastStringVal_MethArgs},
  {&TA_float,NULL,"GetFloatVal"," get float data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_GetFloatVal_stub,TA_DataTable_GetFloatVal_MethArgs},
  {&TA_taString,NULL,"GetStringVal"," get string data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_GetStringVal_stub,TA_DataTable_GetStringVal_MethArgs},
  {&TA_taString,NULL,"GetValAsString"," get data of any type, in String form, for given column, row (if subgp >= 0, column is in given subgroup); if data is NULL, then 'n/a' is returned","","",
    0,3,2,0,NULL,cssElCFun_DataTable_GetValAsString_stub,TA_DataTable_GetValAsString_MethArgs},
  {&TA_void,NULL,"RowAdding"," indicate beginning of column-at-a-time data adding NOT NESTABLE","","",
    0,0,-1,0,NULL,cssElCFun_DataTable_RowAdding_stub,NULL},
  {&TA_void,NULL,"RowAdded"," indicates end of column at-a-time adding (triggers row added notification) -- this routine also gets called by the AddRow and similar functions (w/o calling RowAdding)","","",
    0,0,-1,0,NULL,cssElCFun_DataTable_RowAdded_stub,NULL},
  NULL};
static EnumDef_data TA_DataArray_float_RArray__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static EnumDef_data TA_DataArray_float_RArray__ValType[]={
  {"VT_UNKNOWN","","",0},
  {"VT_STRING","","",1},
  {"VT_FLOAT","","",2},
  {"VT_INT","","",3},
  NULL};
static int DataArray<float_RArray>::* TA_DataArray_float_RArray__MbrOff;
static MemberDef_data TA_DataArray_float_RArray__MemberDef[]={
  {&TA_float_RArray,NULL,"ar"," the array itself","NO_SAVE SHOW BROWSE ","",
    *((ta_memb_ptr*)&(TA_DataArray_float_RArray__MbrOff=(int DataArray<float_RArray>::*)(&DataArray<float_RArray>::ar))),0,NULL,0},
  NULL};
static EnumDef_data TA_DataArray_DString_Array__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static EnumDef_data TA_DataArray_DString_Array__ValType[]={
  {"VT_UNKNOWN","","",0},
  {"VT_STRING","","",1},
  {"VT_FLOAT","","",2},
  {"VT_INT","","",3},
  NULL};
static int DataArray<DString_Array>::* TA_DataArray_DString_Array__MbrOff;
static MemberDef_data TA_DataArray_DString_Array__MemberDef[]={
  {&TA_DString_Array,NULL,"ar"," the array itself","NO_SAVE SHOW BROWSE ","",
    *((ta_memb_ptr*)&(TA_DataArray_DString_Array__MbrOff=(int DataArray<DString_Array>::*)(&DataArray<DString_Array>::ar))),0,NULL,0},
  NULL};
static int ClustLink::* TA_ClustLink_MbrOff;
static MemberDef_data TA_ClustLink_MemberDef[]={
  {&TA_float,NULL,"dist"," distance to this node from parent","","",
    *((ta_memb_ptr*)&(TA_ClustLink_MbrOff=(int ClustLink::*)(&ClustLink::dist))),0,NULL,0},
  {&TA_ClustNode_ptr,NULL,"node"," cluster node","","",
    *((ta_memb_ptr*)&(TA_ClustLink_MbrOff=(int ClustLink::*)(&ClustLink::node))),0,NULL,0},
  NULL};
static int DA_ViewSpec::* TA_DA_ViewSpec_MbrOff;
static MemberDef_data TA_DA_ViewSpec_MemberDef[]={
  {&TA_DataArray_impl_ptr,NULL,"data_array"," the data array","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DA_ViewSpec_MbrOff=(int DA_ViewSpec::*)(&DA_ViewSpec::data_array))),0,NULL,0},
  {&TA_taString,NULL,"display_name"," name used in display","","",
    *((ta_memb_ptr*)&(TA_DA_ViewSpec_MbrOff=(int DA_ViewSpec::*)(&DA_ViewSpec::display_name))),0,NULL,0},
  {&TA_bool,NULL,"visible"," visibility flag","","",
    *((ta_memb_ptr*)&(TA_DA_ViewSpec_MbrOff=(int DA_ViewSpec::*)(&DA_ViewSpec::visible))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_SetGpVisibility_MethArgs[]={
  {&TA_bool,NULL,"visible",""},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_CopyToGp_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_BuildFromDataArray_MethArgs[]={
  {&TA_DataArray_impl_ptr,NULL,"tda","((void *)0)"},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_ValAsString_MethArgs[]={
  {&TA_int,NULL,"row",""},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_CleanName_MethArgs[]={
  {&TA_taString_ref,NULL,"name",""},
  NULL};
static MethodDef_data TA_DA_ViewSpec_MethodDef[]={
  {&TA_void,NULL,"UpdateView"," Update view to reflect current changes","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_DA_ViewSpec_UpdateView_stub,NULL},
  {&TA_void,NULL,"SetGpVisibility"," set the visibility of all members of this group of items","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DA_ViewSpec_SetGpVisibility_stub,TA_DA_ViewSpec_SetGpVisibility_MethArgs},
  {&TA_void,NULL,"CopyToGp"," copy given member value setting to all view specs within this same group","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DA_ViewSpec_CopyToGp_stub,TA_DA_ViewSpec_CopyToGp_MethArgs},
  {&TA_bool,NULL,"BuildFromDataArray","","","",
    0,1,0,0,NULL,cssElCFun_DA_ViewSpec_BuildFromDataArray_stub,TA_DA_ViewSpec_BuildFromDataArray_MethArgs},
  {&TA_taString,NULL,"ValAsString"," note: row should be valid","","",
    0,1,-1,0,NULL,cssElCFun_DA_ViewSpec_ValAsString_stub,TA_DA_ViewSpec_ValAsString_MethArgs},
  {&TA_taString,NULL,"CleanName","","","",
    0,1,-1,1,(ta_void_fun)(DA_ViewSpec::CleanName),cssElCFun_DA_ViewSpec_CleanName_stub,TA_DA_ViewSpec_CleanName_MethArgs},
  NULL};
static EnumDef_data TA_taGroup_DA_ViewSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__MoveBefore_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","trg",""},
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__MoveAfter_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","trg",""},
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__Edit_El_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","((void *)0)"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__AddUniqNameOld_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_DA_ViewSpec__MethodDef[]={
  {NULL,"::DA_ViewSpec_ptr","FirstEl"," for ta_group::FOR_ITR_EL macro returns first leaf element and inits indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FirstEl_stub,TA_taGroup_DA_ViewSpec__FirstEl_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","NextEl"," for ta_group::FOR_ITR_EL macro returns next leaf element and incs indexes","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NextEl_stub,TA_taGroup_DA_ViewSpec__NextEl_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__MoveBefore_stub,TA_taGroup_DA_ViewSpec__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__MoveAfter_stub,TA_taGroup_DA_ViewSpec__MoveAfter_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__SafeEl_stub,TA_taGroup_DA_ViewSpec__SafeEl_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FastEl_stub,TA_taGroup_DA_ViewSpec__FastEl_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__DefaultEl_stub,NULL},
  {NULL,"::DA_ViewSpec_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Edit_El_stub,TA_taGroup_DA_ViewSpec__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__SafeGp_stub,TA_taGroup_DA_ViewSpec__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FastGp_stub,TA_taGroup_DA_ViewSpec__FastGp_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Leaf_stub,TA_taGroup_DA_ViewSpec__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__LeafGp_stub,TA_taGroup_DA_ViewSpec__LeafGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"RootGp"," the root group ('this' for the root group)","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__RootGp_stub,NULL},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FirstGp_stub,TA_taGroup_DA_ViewSpec__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NextGp_stub,TA_taGroup_DA_ViewSpec__NextGp_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NewEl_stub,TA_taGroup_DA_ViewSpec__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NewGp_stub,TA_taGroup_DA_ViewSpec__NewGp_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindName_stub,TA_taGroup_DA_ViewSpec__FindName_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindType_stub,TA_taGroup_DA_ViewSpec__FindType_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Pop_stub,NULL},
  {NULL,"::DA_ViewSpec_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Peek_stub,NULL},
  {NULL,"::DA_ViewSpec_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__AddUniqNameOld_stub,TA_taGroup_DA_ViewSpec__AddUniqNameOld_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__LinkUniqNameOld_stub,TA_taGroup_DA_ViewSpec__LinkUniqNameOld_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindLeafName"," Find element with given name (el_nm)","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindLeafName_stub,TA_taGroup_DA_ViewSpec__FindLeafName_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindLeafType_stub,TA_taGroup_DA_ViewSpec__FindLeafType_MethArgs},
  NULL};
static int DT_ViewSpec::* TA_DT_ViewSpec_MbrOff;
static MemberDef_data TA_DT_ViewSpec_MemberDef[]={
  {&TA_DataTable_ptr,NULL,"data_table"," the data table;","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_DT_ViewSpec_MbrOff=(int DT_ViewSpec::*)(&DT_ViewSpec::data_table))),0,NULL,0},
  {&TA_taString,NULL,"display_name"," name used in display","","",
    *((ta_memb_ptr*)&(TA_DT_ViewSpec_MbrOff=(int DT_ViewSpec::*)(&DT_ViewSpec::display_name))),0,NULL,0},
  {&TA_bool,NULL,"visible"," visibility flag","","",
    *((ta_memb_ptr*)&(TA_DT_ViewSpec_MbrOff=(int DT_ViewSpec::*)(&DT_ViewSpec::visible))),0,NULL,0},
  {&TA_FontSpec,NULL,"def_font"," default font/size for text","","",
    *((ta_memb_ptr*)&(TA_DT_ViewSpec_MbrOff=(int DT_ViewSpec::*)(&DT_ViewSpec::def_font))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DT_ViewSpec_BuildFromDataTable_MethArgs[]={
  {&TA_DataTable_ptr,NULL,"tdt","((void *)0)"},
  NULL};
static MethodArgs_data TA_DT_ViewSpec_SetDispNms_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_name",""},
  NULL};
static MethodArgs_data TA_DT_ViewSpec_SetVisibility_MethArgs[]={
  {&TA_bool,NULL,"visible",""},
  NULL};
static MethodDef_data TA_DT_ViewSpec_MethodDef[]={
  {&TA_bool,NULL,"BuildFromDataTable","","","",
    0,1,0,0,NULL,cssElCFun_DT_ViewSpec_BuildFromDataTable_stub,TA_DT_ViewSpec_BuildFromDataTable_MethArgs},
  {&TA_void,NULL,"ReBuildFromDataTable","","","",
    0,0,-1,0,NULL,cssElCFun_DT_ViewSpec_ReBuildFromDataTable_stub,NULL},
  {&TA_void,NULL,"SetDispNms"," set display_name for all view specs in group to base_name + '_' + no where no is number in group","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DT_ViewSpec_SetDispNms_stub,TA_DT_ViewSpec_SetDispNms_MethArgs},
  {&TA_void,NULL,"RmvNmPrefix"," set display_name for all view specs in group to current name without prefix (i.e., 'prefix_rest' -> 'rest')","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_DT_ViewSpec_RmvNmPrefix_stub,NULL},
  {&TA_void,NULL,"SetVisibility"," set the visibility of all members of this group of items","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DT_ViewSpec_SetVisibility_stub,TA_DT_ViewSpec_SetVisibility_MethArgs},
  NULL};
static int DA_TextViewSpec::* TA_DA_TextViewSpec_MbrOff;
static MemberDef_data TA_DA_TextViewSpec_MemberDef[]={
  {&TA_int,NULL,"width"," width of the column, in tabs (8 chars/tab)","","",
    *((ta_memb_ptr*)&(TA_DA_TextViewSpec_MbrOff=(int DA_TextViewSpec::*)(&DA_TextViewSpec::width))),0,NULL,0},
  NULL};
static int DA_NetViewSpec::* TA_DA_NetViewSpec_MbrOff;
static MemberDef_data TA_DA_NetViewSpec_MemberDef[]={
  {&TA_int,NULL,"label_index"," index into the netview's label list","","",
    *((ta_memb_ptr*)&(TA_DA_NetViewSpec_MbrOff=(int DA_NetViewSpec::*)(&DA_NetViewSpec::label_index))),0,NULL,0},
  NULL};
static EnumDef_data TA_DA_GridViewSpec_DisplayStyle[]={
  {"TEXT"," Draw using text only","",0},
  {"BLOCK"," Draw using color block only","",1},
  {"TEXT_AND_BLOCK"," Draw using both color block with text","",2},
  NULL};
static int DA_GridViewSpec::* TA_DA_GridViewSpec_MbrOff;
static MemberDef_data TA_DA_GridViewSpec_MemberDef[]={
  {&TA_PosTDCoord,NULL,"pos"," position of the data in absolute coordinates","","",
    *((ta_memb_ptr*)&(TA_DA_GridViewSpec_MbrOff=(int DA_GridViewSpec::*)(&DA_GridViewSpec::pos))),0,NULL,0},
  {NULL,"::DisplayStyle","display_style"," can display as text, block, or both","","",
    *((ta_memb_ptr*)&(TA_DA_GridViewSpec_MbrOff=(int DA_GridViewSpec::*)(&DA_GridViewSpec::display_style))),0,NULL,0},
  {&TA_bool,NULL,"scale_on"," adjust overall scale including this data","","",
    *((ta_memb_ptr*)&(TA_DA_GridViewSpec_MbrOff=(int DA_GridViewSpec::*)(&DA_GridViewSpec::scale_on))),0,NULL,0},
  NULL};
static EnumDef_data TA_DT_GridViewSpec_BlockFill[]={
  {"COLOR"," color indicates value","",0},
  {"AREA"," area indicates value","",1},
  {"LINEAR"," linear size of square side indicates value","",2},
  NULL};
static EnumDef_data TA_DT_GridViewSpec_MatrixLayout[]={
  {"DEFAULT"," use current default layout","",0},
  {"LFT_RGT_BOT_TOP"," [3412] Incr col first, then decr row, start at bot left","",1},
  {"LFT_RGT_TOP_BOT"," [1234] Incr col first, then incr row, start at top left","",2},
  {"BOT_TOP_LFT_RGT"," [2413] Decr row first, then incr col, start at bot left","",3},
  {"TOP_BOT_LFT_RGT"," [1324] Incr row first, then incr col, start at top left","",4},
  NULL};
static int DT_GridViewSpec::* TA_DT_GridViewSpec_MbrOff;
static MemberDef_data TA_DT_GridViewSpec_MemberDef[]={
  {&TA_PosTDCoord,NULL,"pos"," position of the datatable in absolute coordinates","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::pos))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"geom"," relative geometry (maximum extent) of the datatable, just for El's, not subgroups","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::geom))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"full_geom"," full absolute geometry (maximum extent) of everything under this one","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::full_geom))),0,NULL,0},
  {NULL,"::MatrixLayout","layout"," current layout of the data table","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::layout))),0,NULL,0},
  {&TA_bool,NULL,"use_gp_name"," use the group name instead of the El names","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::use_gp_name))),0,NULL,0},
  {NULL,"DA_GridViewSpec::DisplayStyle","display_style"," can display as text, block, or both","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::display_style))),0,NULL,0},
  {&TA_bool,NULL,"scale_on"," adjust overall scale including this data (or not)","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::scale_on))),0,NULL,0},
  {&TA_bool,NULL,"customized"," did the use customize the positions of elements in here? if so, don't redo layout with new items","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::customized))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DT_GridViewSpec_UpdateLayout_MethArgs[]={
  {NULL,"::MatrixLayout","ml","DEFAULT"},
  NULL};
static MethodArgs_data TA_DT_GridViewSpec_GetMinMaxScale_MethArgs[]={
  {&TA_MinMax_ref,NULL,"mm",""},
  {&TA_bool,NULL,"first","true"},
  NULL};
static MethodDef_data TA_DT_GridViewSpec_MethodDef[]={
  {&TA_int,NULL,"UpdateLayout"," enforce the geometry to fit with no spaces or overlap, returns maxx","MENU MENU_ON_Actions ","",
    0,1,0,0,NULL,cssElCFun_DT_GridViewSpec_UpdateLayout_stub,TA_DT_GridViewSpec_UpdateLayout_MethArgs},
  {&TA_void,NULL,"UpdateGeom"," Get the Geometry from the positions of visibles","MENU ","",
    0,0,-1,0,NULL,cssElCFun_DT_GridViewSpec_UpdateGeom_stub,NULL},
  {&TA_void,NULL,"GetMinMaxScale"," get min and max data range for scaling","","",
    0,2,1,0,NULL,cssElCFun_DT_GridViewSpec_GetMinMaxScale_stub,TA_DT_GridViewSpec_GetMinMaxScale_MethArgs},
  NULL};
static EnumDef_data TA_GraphColSpec_ColumnType[]={
  {"AUTO"," value on initialization, typically becomes y data","",0},
  {"X_AXIS"," column contains the X data -- only one col may have this","",1},
  {"Y_AXIS"," column contains Y data to be plotted/graphed, and will be a Y axis","",2},
  {"Y_DATA"," column contains Y data to be plotted/graphed, will use another Y axis","",3},
  {"Z_AXIS"," column contains the Z data (3D graphs only) -- only one col may have this","",4},
  {"HIDE"," don't show on graph by default","",5},
  NULL};
static EnumDef_data TA_GraphColSpec_LineType[]={
  {"LINE"," just a line, no pts","",0},
  {"POINTS"," just pts, no line","",1},
  {"LINE_AND_POINTS"," both","",2},
  {"STRINGS"," string (text) values -- no lines","",3},
  {"TRACE_COLORS"," subsequent traces (repeats through same X values) are color coded using colorscale","",4},
  {"VALUE_COLORS"," Y values are represented with colors using colorscale","",5},
  {"THRESH_POINTS"," Y values are thresholded with thresh parameter and displayed as points when above threshold","",6},
  NULL};
static EnumDef_data TA_GraphColSpec_LineStyle[]={
  {"SOLID"," -----","",0},
  {"DOT"," .....","",1},
  {"DASH"," - - -","",2},
  {"DASH_DOT"," _._._","",3},
  NULL};
static EnumDef_data TA_GraphColSpec_PointStyle[]={
  {"CIRCLE"," o","",1},
  {"SQUARE"," []","",2},
  {"DIAMOND"," <>","",3},
  {"TRIANGLE","","",4},
  {"MINUS"," -","",5},
  {"BACKSLASH","","",6},
  {"BAR"," |","",7},
  {"SLASH"," /","",8},
  {"PLUS"," +","",9},
  {"CROSS"," x","",10},
  {"STAR"," *","",11},
  NULL};
static int GraphColSpec::* TA_GraphColSpec_MbrOff;
static MemberDef_data TA_GraphColSpec_MemberDef[]={
  {&TA_GraphSpec_ptr,NULL,"graph_spec"," which (root)graph do I belong in (set in InitLinks)","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::graph_spec))),0,NULL,0},
  {NULL,"::ColumnType","col_type"," column type for graphing; starts as AUTO, set elsewise during config","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::col_type))),0,NULL,0},
  {&TA_RGBA,NULL,"line_color"," color of the line","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::line_color))),0,NULL,0},
  {NULL,"::LineType","line_type"," the way the line is drawn","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::line_type))),0,NULL,0},
  {NULL,"::LineStyle","line_style"," the style in which the line is drawn","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::line_style))),0,NULL,0},
  {&TA_float,NULL,"line_width"," width of the line in pixels; 0.0f means use default","DEF_0 ","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::line_width))),0,NULL,0},
  {NULL,"::PointStyle","point_style"," the style in which the points are drawn","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::point_style))),0,NULL,0},
  {&TA_bool,NULL,"negative_draw"," continue same line when X value resets in negative axis direction?","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::negative_draw))),0,NULL,0},
  {&TA_float,NULL,"thresh"," threshold for THRESH_POINTS line style","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::thresh))),0,NULL,0},
  {&TA_AxisSpec_ptr,NULL,"axis_spec"," associates this col with axis -- ALTER ONLY VIA SetAxis()","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::axis_spec))),0,NULL,0},
  {&TA_GraphColSpec_ptr,NULL,"string_coords"," column that contains vertical coordinate values for positioning String data labels","","",
    *((ta_memb_ptr*)&(TA_GraphColSpec_MbrOff=(int GraphColSpec::*)(&GraphColSpec::string_coords))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GraphColSpec_setVisible_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_GraphColSpec_SetAxis_MethArgs[]={
  {&TA_AxisSpec_ptr,NULL,"as",""},
  NULL};
static MethodArgs_data TA_GraphColSpec_SetStringCoords_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"as",""},
  NULL};
static MethodDef_data TA_GraphColSpec_MethodDef[]={
  {&TA_const_iColor_ptr,NULL,"def_color"," default color of lines","","",
    0,0,-1,0,NULL,cssElCFun_GraphColSpec_def_color_stub,NULL},
  {&TA_bool,NULL,"is_axis"," true if this col is used for an axis","","",
    0,0,-1,0,NULL,cssElCFun_GraphColSpec_is_axis_stub,NULL},
  {&TA_bool,NULL,"is_line"," true if it is a line that will or can be drawn on the graph (ydata etc.)","","",
    0,0,-1,0,NULL,cssElCFun_GraphColSpec_is_line_stub,NULL},
  {&TA_bool,NULL,"is_string"," true if data is string","","",
    0,0,-1,0,NULL,cssElCFun_GraphColSpec_is_string_stub,NULL},
  {&TA_bool,NULL,"setVisible"," for calling from UI -- won't set true if doesn't make sense; returns resultant value","","",
    0,1,-1,0,NULL,cssElCFun_GraphColSpec_setVisible_stub,TA_GraphColSpec_setVisible_MethArgs},
  {&TA_void,NULL,"GpShareAxis"," make every element in this group share the same Y axis, which is the first in the group","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphColSpec_GpShareAxis_stub,NULL},
  {&TA_void,NULL,"GpSepAxes"," make every element in this group have its own Y axis","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphColSpec_GpSepAxes_stub,NULL},
  {&TA_void,NULL,"FindStringCoords"," find previous float_Data for default string coordinates","","",
    0,0,-1,0,NULL,cssElCFun_GraphColSpec_FindStringCoords_stub,NULL},
  {&TA_void,NULL,"SetAxis"," binds this column to the axis -- also clears out reciprocal ptr, if any","","",
    0,1,-1,0,NULL,cssElCFun_GraphColSpec_SetAxis_stub,TA_GraphColSpec_SetAxis_MethArgs},
  {&TA_void,NULL,"SetStringCoords","","","",
    0,1,-1,0,NULL,cssElCFun_GraphColSpec_SetStringCoords_stub,TA_GraphColSpec_SetStringCoords_MethArgs},
  NULL};
static EnumDef_data TA_AxisSpec_Axis[]={
  {"X","","",0},
  {"Y","","",1},
  {"Z","","",2},
  NULL};
static int AxisSpec::* TA_AxisSpec_MbrOff;
static MemberDef_data TA_AxisSpec_MemberDef[]={
  {&TA_GraphSpec_ptr,NULL,"graph_spec"," which graph do I belong in (set in InitLinks)","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::graph_spec))),0,NULL,0},
  {&TA_GraphColSpec_ptr,NULL,"spec"," col spec for this axis (unless DataSource=TRACE type)","","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::spec))),0,NULL,0},
  {&TA_int,NULL,"spec_cnt"," number of specs using this axis (>1 means is shared)","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::spec_cnt))),0,NULL,0},
  {&TA_MinMax,NULL,"range"," display range of the axis data","","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::range))),0,NULL,0},
  {&TA_MinMax,NULL,"true_range"," actual min and max of data (including fixed range)","","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::true_range))),0,NULL,0},
  {&TA_MinMax,NULL,"eff_range"," effective range: can be changed if display contains different info than basic graph (e.g., multi-traces)","","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::eff_range))),0,NULL,0},
  {&TA_FixedMinMax,NULL,"fixed_range"," fixed range: optionally constrained range values","","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::fixed_range))),0,NULL,0},
  {&TA_int,NULL,"n_ticks"," number of ticks desired","DEF_10 ","",
    *((ta_memb_ptr*)&(TA_AxisSpec_MbrOff=(int AxisSpec::*)(&AxisSpec::n_ticks))),0,NULL,0},
  NULL};
static MethodArgs_data TA_AxisSpec_InitUpdateAxis_MethArgs[]={
  {&TA_bool,NULL,"init",""},
  NULL};
static MethodArgs_data TA_AxisSpec_Config_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"spec"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_AxisSpec_InitRange_MethArgs[]={
  {&TA_float,NULL,"first",""},
  {&TA_float,NULL,"last",""},
  NULL};
static MethodArgs_data TA_AxisSpec_UpdateRange_MethArgs[]={
  {&TA_float,NULL,"first",""},
  {&TA_float,NULL,"last",""},
  NULL};
static MethodDef_data TA_AxisSpec_MethodDef[]={
  {NULL,"::Axis","axis","","","",
    0,0,-1,0,NULL,cssElCFun_AxisSpec_axis_stub,NULL},
  {&TA_const_iColor_ptr,NULL,"def_color"," default color of axis -- depends on type of axis","","",
    0,0,-1,0,NULL,cssElCFun_AxisSpec_def_color_stub,NULL},
  {&TA_bool,NULL,"InitUpdateAxis"," do an update range from data, update axis if yest","","",
    0,1,-1,0,NULL,cssElCFun_AxisSpec_InitUpdateAxis_stub,TA_AxisSpec_InitUpdateAxis_MethArgs},
  {&TA_void,NULL,"Config"," called after create or update","","",
    0,1,0,0,NULL,cssElCFun_AxisSpec_Config_stub,TA_AxisSpec_Config_MethArgs},
  {&TA_void,NULL,"InitData"," partial initializer called internally and externally in several places","","",
    0,0,-1,0,NULL,cssElCFun_AxisSpec_InitData_stub,NULL},
  {&TA_void,NULL,"InitRange"," initialize range to known good starting range values (fixed vals will still override)","","",
    0,2,-1,0,NULL,cssElCFun_AxisSpec_InitRange_stub,TA_AxisSpec_InitRange_MethArgs},
  {&TA_bool,NULL,"UpdateRange"," update range with new min/max data -- returns true if range actually changed","","",
    0,2,-1,0,NULL,cssElCFun_AxisSpec_UpdateRange_stub,TA_AxisSpec_UpdateRange_MethArgs},
  NULL};
static EnumDef_data TA_XAxisSpec_XAxisType[]={
  {"COL_VALUE"," the content of the col in the data table (legacy mode)","",0},
  {"ROW_NUM"," the ordinal index of the data value (1, 2, 3... etc.)","",1},
  NULL};
static int XAxisSpec::* TA_XAxisSpec_MbrOff;
static MemberDef_data TA_XAxisSpec_MemberDef[]={
  {NULL,"::XAxisType","axis_type","","","",
    *((ta_memb_ptr*)&(TA_XAxisSpec_MbrOff=(int XAxisSpec::*)(&XAxisSpec::axis_type))),0,NULL,0},
  NULL};
static int YAxisSpec::* TA_YAxisSpec_MbrOff;
static MemberDef_data TA_YAxisSpec_MemberDef[]={
  {&TA_bool,NULL,"no_vertical"," don't draw any vertical dimension at all (for VALUE_COLORS or THRESH_POINTS line_type","","",
    *((ta_memb_ptr*)&(TA_YAxisSpec_MbrOff=(int YAxisSpec::*)(&YAxisSpec::no_vertical))),0,NULL,0},
  NULL};
static int ZAxisSpec::* TA_ZAxisSpec_MbrOff;
static MemberDef_data TA_ZAxisSpec_MemberDef[]={
  {&TA_int,NULL,"n_traces"," for STACK_TRACES and STACK_LINES, of traces","READ_ONLY  ","",
    *((ta_memb_ptr*)&(TA_ZAxisSpec_MbrOff=(int ZAxisSpec::*)(&ZAxisSpec::n_traces))),0,NULL,0},
  NULL};
static EnumDef_data TA_GraphSpec_GraphType[]={
  {"TWOD"," standard 2d graph","LABEL_2D ",0},
  {"THREED"," standard 3d graph","LABEL_3D ",1},
  {"STACK_TRACES"," each new trace gets plotted along z-axis","LABEL_3D_Stack_Traces ",2},
  {"STACK_LINES"," each line in a group gets plotted along z-axis","LABEL_3D_Stack_Lines ",3},
  NULL};
static EnumDef_data TA_GraphSpec_ColorType[]={
  {"C_RAINBOW"," color, rainbow","",0},
  {"C_GREYSCALE"," color, greyscale","",1},
  {"M_MONO"," monochrome","",2},
  {"P_RAINBOW"," printer, rainbow","",3},
  {"P_GREYSCALE"," printer, greyscale","",4},
  {"P_MONO"," printer, monochrome","",5},
  {"CUSTOM"," custom, let user set colors","",6},
  NULL};
static EnumDef_data TA_GraphSpec_SequenceType[]={
  {"COLORS"," use sequential colors","",0},
  {"LINES"," use sequential line styles","",1},
  {"POINTS"," use sequential point styles","",2},
  {"NONE"," no features","",3},
  NULL};
static EnumDef_data TA_GraphSpec_AxisSharing[]={
  {"SHARED_AXES"," all lines/axes on one graph","",0},
  {"SEPARATE_AXES"," all y axes on a separate graph","",1},
  {"CUSTOM_AXES"," user allocs them","",2},
  NULL};
static int GraphSpec::* TA_GraphSpec_MbrOff;
static MemberDef_data TA_GraphSpec_MemberDef[]={
  {NULL,"::GraphType","graph_type","","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::graph_type))),0,NULL,0},
  {&TA_RGBA,NULL,"background"," background color","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::background))),0,NULL,0},
  {NULL,"::ColorType","color_type"," palette of colors to use","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::color_type))),0,NULL,0},
  {&TA_bool,NULL,"use_cbar"," if true, actually display the cbar (if some kind of colors display used)","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::use_cbar))),0,NULL,0},
  {NULL,"::SequenceType","sequence_1"," first (innermost) sequence of features","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::sequence_1))),0,NULL,0},
  {NULL,"::SequenceType","sequence_2"," second sequence of features","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::sequence_2))),0,NULL,0},
  {NULL,"::SequenceType","sequence_3"," third sequence of features","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::sequence_3))),0,NULL,0},
  {&TA_YAxisSpec_List,NULL,"y_axes"," all the y axes (can be shared by many cols)","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::y_axes))),0,NULL,0},
  {&TA_XAxisSpec,NULL,"x_axis_spec"," spec info of the x axis -- is shared by all cols","BROWSE ","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::x_axis_spec))),0,NULL,0},
  {&TA_ZAxisSpec,NULL,"z_axis_spec"," spec info of the z axis (3D only) -- is shared by all cols","BROWSE ","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::z_axis_spec))),0,NULL,0},
  {NULL,"::AxisSharing","axis_sharing"," draw each group of lines sharing a Y axis using separate graphs","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::axis_sharing))),0,NULL,0},
  {&TA_PosTwoDCoord,NULL,"graph_layout"," arrangement of graphs for separate graphs","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::graph_layout))),0,NULL,0},
  {&TA_GraphletSpec_List,NULL,"graphlets"," list of list of linked axes, describing 1 or more simultaneous graphs","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::graphlets))),0,NULL,0},
  {&TA_int,NULL,"last_col_cnt"," no. of columns we had last time we updated","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::last_col_cnt))),0,NULL,0},
  {&TA_int,NULL,"last_row_cnt"," no. of rows we had (in x axis) last time we updated","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::last_row_cnt))),0,NULL,0},
  {&TA_int,NULL,"view_bufsz"," maximum number of lines of data to view","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::view_bufsz))),0,NULL,0},
  {&TA_MinMaxInt,NULL,"view_range"," range of data to view","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::view_range))),0,NULL,0},
  {&TA_int,NULL,"last_pt_offset"," where to get the last point of data from for AddLastPt function (0 = actual last point, higher go further back..)","'s ","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::last_pt_offset))),0,NULL,0},
  {&TA_ColorScale_ptr,NULL,"scale"," internal colorscale","","",
    *((ta_memb_ptr*)&(TA_GraphSpec_MbrOff=(int GraphSpec::*)(&GraphSpec::scale))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GraphSpec_FindYAxis_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"spec",""},
  NULL};
static MethodArgs_data TA_GraphSpec_MakeYAxis_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"spec",""},
  NULL};
static MethodArgs_data TA_GraphSpec_FindMakeYAxis_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"spec",""},
  NULL};
static MethodArgs_data TA_GraphSpec_RemoveAxisBySpec_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"spec",""},
  NULL};
static MethodArgs_data TA_GraphSpec_ColorName_MethArgs[]={
  {&TA_int,NULL,"color_no",""},
  NULL};
static MethodArgs_data TA_GraphSpec_UpdateLineFeatures_MethArgs[]={
  {&TA_bool,NULL,"visible_only","true"},
  NULL};
static MethodArgs_data TA_GraphSpec_SetLineWidths_MethArgs[]={
  {&TA_float,NULL,"line_width",""},
  NULL};
static MethodArgs_data TA_GraphSpec_SetLineType_MethArgs[]={
  {NULL,"GraphColSpec::LineType","line_type",""},
  NULL};
static MethodArgs_data TA_GraphSpec_UpdateAfterEdit_ColSpec_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"cs",""},
  NULL};
static MethodArgs_data TA_GraphSpec_UpdateAfterEdit_AxisSpec_MethArgs[]={
  {&TA_AxisSpec_ptr,NULL,"as",""},
  NULL};
static MethodDef_data TA_GraphSpec_MethodDef[]={
  {&TA_bool,NULL,"is3d","","","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_is3d_stub,NULL},
  {&TA_bool,NULL,"isUpdatingChildren","","","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_isUpdatingChildren_stub,NULL},
  {&TA_void,NULL,"AssertGraphlets","","","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_AssertGraphlets_stub,NULL},
  {&TA_YAxisSpec_ptr,NULL,"FindYAxis"," given a col spec, find an associated axis","","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_FindYAxis_stub,TA_GraphSpec_FindYAxis_MethArgs},
  {&TA_YAxisSpec_ptr,NULL,"MakeYAxis"," given a col spec, make an associated axis -- should not already exist for spec","","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_MakeYAxis_stub,TA_GraphSpec_MakeYAxis_MethArgs},
  {&TA_YAxisSpec_ptr,NULL,"FindMakeYAxis"," given a col spec, find and config associated axis, else make axis","","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_FindMakeYAxis_stub,TA_GraphSpec_FindMakeYAxis_MethArgs},
  {&TA_bool,NULL,"RemoveAxisBySpec"," removes axis, if any, for spec","","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_RemoveAxisBySpec_stub,TA_GraphSpec_RemoveAxisBySpec_MethArgs},
  {&TA_char_ptr,NULL,"ColorName"," gets color name for given line number for color_type","MENU MENU_ON_Actions USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_ColorName_stub,TA_GraphSpec_ColorName_MethArgs},
  {&TA_int,NULL,"ColorCount"," number of colors in palatte","","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_ColorCount_stub,NULL},
  {&TA_void,NULL,"SetBgColor"," sets background color based on color type","","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_SetBgColor_stub,NULL},
  {&TA_void,NULL,"UpdateLineFeatures"," apply specified sequences to update line features","MENU MENU_ON_Actions ","",
    0,1,0,0,NULL,cssElCFun_GraphSpec_UpdateLineFeatures_stub,TA_GraphSpec_UpdateLineFeatures_MethArgs},
  {&TA_void,NULL,"SetLineWidths"," set the line widths of all lines to this value","MENU ","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_SetLineWidths_stub,TA_GraphSpec_SetLineWidths_MethArgs},
  {&TA_void,NULL,"SetLineType"," set all line types to given type","MENU ","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_SetLineType_stub,TA_GraphSpec_SetLineType_MethArgs},
  {&TA_void,NULL,"ShareAxes"," make all columns share the same Y axis (first axis in group)","MENU MENU_SEP_BEFORE CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_ShareAxes_stub,NULL},
  {&TA_void,NULL,"SeparateAxes"," each column of data gets its own Y axis","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_SeparateAxes_stub,NULL},
  {&TA_void,NULL,"CustomAxes"," distribute axes in a user specified pattern","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_CustomAxes_stub,NULL},
  {&TA_void,NULL,"StackTraces"," arrange subsequent traces of data (pass through the same X axis values) in non-overlapping vertically-arranged stacks","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_StackTraces_stub,NULL},
  {&TA_void,NULL,"UnStackTraces"," subsequent traces of data (pass through the same X axis values) are plotted overlapping on top of each other","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_UnStackTraces_stub,NULL},
  {&TA_void,NULL,"StackSharedAxes"," arrange lines that share the same Y axis in non-overlapping vertically-arranged stacks","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_StackSharedAxes_stub,NULL},
  {&TA_void,NULL,"UnStackSharedAxes"," lines that share the same Y axis are plotted overlapping on top of each other","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_UnStackSharedAxes_stub,NULL},
  {&TA_void,NULL,"ReBuildAxes"," builds or rebuilds axes when cols change (called from BFDT and RBFDT)","","",
    0,0,-1,0,NULL,cssElCFun_GraphSpec_ReBuildAxes_stub,NULL},
  {&TA_void,NULL,"UpdateAfterEdit_ColSpec"," delegated from the ColSpec","","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_UpdateAfterEdit_ColSpec_stub,TA_GraphSpec_UpdateAfterEdit_ColSpec_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit_AxisSpec"," delegated from the AxisSpec","","",
    0,1,-1,0,NULL,cssElCFun_GraphSpec_UpdateAfterEdit_AxisSpec_stub,TA_GraphSpec_UpdateAfterEdit_AxisSpec_MethArgs},
  NULL};
static EnumDef_data TA_taList_YAxisSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__MoveBefore_MethArgs[]={
  {NULL,"::YAxisSpec_ptr","trg",""},
  {NULL,"::YAxisSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__MoveAfter_MethArgs[]={
  {NULL,"::YAxisSpec_ptr","trg",""},
  {NULL,"::YAxisSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__Edit_El_MethArgs[]={
  {NULL,"::YAxisSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__AddUniqNameOld_MethArgs[]={
  {NULL,"::YAxisSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_YAxisSpec__LinkUniqNameOld_MethArgs[]={
  {NULL,"::YAxisSpec_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_YAxisSpec__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_YAxisSpec__MoveBefore_stub,TA_taList_YAxisSpec__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_YAxisSpec__MoveAfter_stub,TA_taList_YAxisSpec__MoveAfter_MethArgs},
  {NULL,"::YAxisSpec_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_YAxisSpec__SafeEl_stub,TA_taList_YAxisSpec__SafeEl_MethArgs},
  {NULL,"::YAxisSpec_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_YAxisSpec__FastEl_stub,TA_taList_YAxisSpec__FastEl_MethArgs},
  {NULL,"::YAxisSpec_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_YAxisSpec__DefaultEl_stub,NULL},
  {NULL,"::YAxisSpec_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_YAxisSpec__Edit_El_stub,TA_taList_YAxisSpec__Edit_El_MethArgs},
  {NULL,"::YAxisSpec_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_YAxisSpec__FindName_stub,TA_taList_YAxisSpec__FindName_MethArgs},
  {NULL,"::YAxisSpec_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_YAxisSpec__FindType_stub,TA_taList_YAxisSpec__FindType_MethArgs},
  {NULL,"::YAxisSpec_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_YAxisSpec__Pop_stub,NULL},
  {NULL,"::YAxisSpec_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_YAxisSpec__Peek_stub,NULL},
  {NULL,"::YAxisSpec_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_YAxisSpec__AddUniqNameOld_stub,TA_taList_YAxisSpec__AddUniqNameOld_MethArgs},
  {NULL,"::YAxisSpec_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_YAxisSpec__LinkUniqNameOld_stub,TA_taList_YAxisSpec__LinkUniqNameOld_MethArgs},
  NULL};
static MethodArgs_data TA_YAxisSpec_List_FindBySpec_MethArgs[]={
  {&TA_const_GraphColSpec_ptr,NULL,"spec",""},
  {&TA_int_ptr,NULL,"idx"," ((void *)0)"},
  NULL};
static MethodDef_data TA_YAxisSpec_List_MethodDef[]={
  {&TA_YAxisSpec_ptr,NULL,"FindBySpec"," find an axis with given spec, optionally returning its index as well (NULL/-1 if not found)","","",
    0,2,1,0,NULL,cssElCFun_YAxisSpec_List_FindBySpec_stub,TA_YAxisSpec_List_FindBySpec_MethArgs},
  NULL};
static EnumDef_data TA_taList_GraphletSpec__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__MoveBefore_MethArgs[]={
  {NULL,"::GraphletSpec_ptr","trg",""},
  {NULL,"::GraphletSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__MoveAfter_MethArgs[]={
  {NULL,"::GraphletSpec_ptr","trg",""},
  {NULL,"::GraphletSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__Edit_El_MethArgs[]={
  {NULL,"::GraphletSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__AddUniqNameOld_MethArgs[]={
  {NULL,"::GraphletSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_GraphletSpec__LinkUniqNameOld_MethArgs[]={
  {NULL,"::GraphletSpec_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_GraphletSpec__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_GraphletSpec__MoveBefore_stub,TA_taList_GraphletSpec__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_GraphletSpec__MoveAfter_stub,TA_taList_GraphletSpec__MoveAfter_MethArgs},
  {NULL,"::GraphletSpec_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_GraphletSpec__SafeEl_stub,TA_taList_GraphletSpec__SafeEl_MethArgs},
  {NULL,"::GraphletSpec_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_GraphletSpec__FastEl_stub,TA_taList_GraphletSpec__FastEl_MethArgs},
  {NULL,"::GraphletSpec_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_GraphletSpec__DefaultEl_stub,NULL},
  {NULL,"::GraphletSpec_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_GraphletSpec__Edit_El_stub,TA_taList_GraphletSpec__Edit_El_MethArgs},
  {NULL,"::GraphletSpec_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_GraphletSpec__FindName_stub,TA_taList_GraphletSpec__FindName_MethArgs},
  {NULL,"::GraphletSpec_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_GraphletSpec__FindType_stub,TA_taList_GraphletSpec__FindType_MethArgs},
  {NULL,"::GraphletSpec_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_GraphletSpec__Pop_stub,NULL},
  {NULL,"::GraphletSpec_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_GraphletSpec__Peek_stub,NULL},
  {NULL,"::GraphletSpec_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_GraphletSpec__AddUniqNameOld_stub,TA_taList_GraphletSpec__AddUniqNameOld_MethArgs},
  {NULL,"::GraphletSpec_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_GraphletSpec__LinkUniqNameOld_stub,TA_taList_GraphletSpec__LinkUniqNameOld_MethArgs},
  NULL};
static int FunLookup::* TA_FunLookup_MbrOff;
static MemberDef_data TA_FunLookup_MemberDef[]={
  {&TA_MinMaxRange,NULL,"x_range"," range of the x axis","","",
    *((ta_memb_ptr*)&(TA_FunLookup_MbrOff=(int FunLookup::*)(&FunLookup::x_range))),0,NULL,0},
  {&TA_float,NULL,"res"," resolution of the function","","",
    *((ta_memb_ptr*)&(TA_FunLookup_MbrOff=(int FunLookup::*)(&FunLookup::res))),0,NULL,0},
  {&TA_float,NULL,"res_inv"," 1/res: speeds computation because multiplies are faster than divides","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_FunLookup_MbrOff=(int FunLookup::*)(&FunLookup::res_inv))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FunLookup_Yval_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodArgs_data TA_FunLookup_Xval_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_FunLookup_Eval_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodArgs_data TA_FunLookup_Plot_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_FunLookup_Convolve_MethArgs[]={
  {&TA_const_FunLookup_ref,NULL,"src",""},
  {&TA_const_FunLookup_ref,NULL,"con",""},
  NULL};
static MethodDef_data TA_FunLookup_MethodDef[]={
  {&TA_float,NULL,"Yval"," get y value at given x value (no interpolation)","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Yval_stub,TA_FunLookup_Yval_MethArgs},
  {&TA_float,NULL,"Xval"," get x value for given index position within list","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Xval_stub,TA_FunLookup_Xval_MethArgs},
  {&TA_float,NULL,"Eval","","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Eval_stub,TA_FunLookup_Eval_MethArgs},
  {&TA_void,NULL,"AllocForRange"," allocate values for given range and resolution","","",
    0,0,-1,0,NULL,cssElCFun_FunLookup_AllocForRange_stub,NULL},
  {&TA_void,NULL,"Plot"," generate file for plotting function","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Plot_stub,TA_FunLookup_Plot_MethArgs},
  {&TA_void,NULL,"Convolve"," convolve source array with convolve array and put result here","","",
    0,2,-1,0,NULL,cssElCFun_FunLookup_Convolve_stub,TA_FunLookup_Convolve_MethArgs},
  NULL};
static int FunLookupND::* TA_FunLookupND_MbrOff;
static MemberDef_data TA_FunLookupND_MemberDef[]={
  {&TA_int,NULL,"n_dims"," number of dimensions","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::n_dims))),0,NULL,0},
  {&TA_float_Array,NULL,"mesh_pts"," the n-dimensional mesh of function values at specific points in n_dims space","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::mesh_pts))),0,NULL,0},
  {&TA_int_Array,NULL,"mesh_dim_sz"," [n_dims] number of points along each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::mesh_dim_sz))),0,NULL,0},
  {&TA_float_Array,NULL,"deltas"," [n_dims] size of the mesh increment for each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::deltas))),0,NULL,0},
  {&TA_float_Array,NULL,"range_mins"," [n_dims] minimum dimension values for each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::range_mins))),0,NULL,0},
  {&TA_float_Array,NULL,"range_maxs"," [n_dims] maximum dimension values for each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::range_maxs))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FunLookupND_EvalArray_MethArgs[]={
  {&TA_float_ptr,NULL,"x",""},
  {&TA_int_ptr,NULL,"idx_map"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_FunLookupND_EvalArgs_MethArgs[]={
  {&TA_float,NULL,"d0",""},
  {&TA_float,NULL,"d1","0.0f"},
  {&TA_float,NULL,"d2","0.0f"},
  {&TA_float,NULL,"d3","0.0f"},
  {&TA_float,NULL,"d4","0.0f"},
  {&TA_float,NULL,"d5","0.0f"},
  {&TA_float,NULL,"d6","0.0f"},
  {&TA_float,NULL,"d7","0.0f"},
  {&TA_float,NULL,"d8","0.0f"},
  {&TA_float,NULL,"d9","0.0f"},
  NULL};
static MethodArgs_data TA_FunLookupND_LoadTable_MethArgs[]={
  {&TA_istream_ref,NULL,"is",""},
  NULL};
static MethodArgs_data TA_FunLookupND_ListTable_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_FunLookupND_ShiftNorm_MethArgs[]={
  {&TA_float,NULL,"desired_mean",""},
  NULL};
static MethodArgs_data TA_FunLookupND_MulNorm_MethArgs[]={
  {&TA_float,NULL,"desired_mean",""},
  NULL};
static MethodDef_data TA_FunLookupND_MethodDef[]={
  {&TA_float,NULL,"EvalArray"," evaluate function given an n_dims array of dimension input values (index map for mapping the array onto internally-stored dimensions if non-NULL)","","",
    0,2,1,0,NULL,cssElCFun_FunLookupND_EvalArray_stub,TA_FunLookupND_EvalArray_MethArgs},
  {&TA_float,NULL,"EvalArgs"," evaluate function given n_dims supplied values as args (in direct correspondence with internally-stored dimensions)","BUTTON ","",
    0,10,1,0,NULL,cssElCFun_FunLookupND_EvalArgs_stub,TA_FunLookupND_EvalArgs_MethArgs},
  {&TA_void,NULL,"LoadTable"," load a lookup table of function values at specific points in n_dims space","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_FunLookupND_LoadTable_stub,TA_FunLookupND_LoadTable_MethArgs},
  {&TA_void,NULL,"ListTable"," output the lookup table in text format","BUTTON ARGC_0 CONFIRM ","",
    0,1,0,0,NULL,cssElCFun_FunLookupND_ListTable_stub,TA_FunLookupND_ListTable_MethArgs},
  {&TA_void,NULL,"ShiftNorm"," normalize the function values via an additive shift to achieve overall desired mean","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_FunLookupND_ShiftNorm_stub,TA_FunLookupND_ShiftNorm_MethArgs},
  {&TA_void,NULL,"MulNorm"," normalize the function values by multiplying positive and negative values by separate scaling factors to achieve desired mean","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_FunLookupND_MulNorm_stub,TA_FunLookupND_MulNorm_MethArgs},
  NULL};
static MethodArgs_data TA_T3Node_insertChildBefore_MethArgs[]={
  {&TA_SoGroup_ptr,NULL,"group",""},
  {&TA_SoNode_ptr,NULL,"child",""},
  {&TA_SoNode_ptr,NULL,"before",""},
  NULL};
static MethodArgs_data TA_T3Node_insertChildAfter_MethArgs[]={
  {&TA_SoGroup_ptr,NULL,"group",""},
  {&TA_SoNode_ptr,NULL,"child",""},
  {&TA_SoNode_ptr,NULL,"after",""},
  NULL};
static MethodArgs_data TA_T3Node_getNodeByName_MethArgs[]={
  {&TA_SoGroup_ptr,NULL,"group",""},
  {&TA_const_char_ptr,NULL,"name",""},
  NULL};
static MethodArgs_data TA_T3Node_captionFont_MethArgs[]={
  {&TA_bool,NULL,"auto_create"," false"},
  NULL};
static MethodArgs_data TA_T3Node_captionNode_MethArgs[]={
  {&TA_bool,NULL,"auto_create"," false"},
  NULL};
static MethodArgs_data TA_T3Node_setCaption_MethArgs[]={
  {&TA_const_char_ptr,NULL,"value",""},
  NULL};
static MethodArgs_data TA_T3Node_setExpanded_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_T3Node_addRemoveChildNode_MethArgs[]={
  {&TA_SoNode_ptr,NULL,"node",""},
  {&TA_bool,NULL,"adding",""},
  NULL};
static MethodDef_data TA_T3Node_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3Node::initClass),cssElCFun_T3Node_initClass_stub,NULL},
  {&TA_void,NULL,"insertChildBefore"," insert before node; before=NULL for end;","","",
    0,3,-1,1,(ta_void_fun)(T3Node::insertChildBefore),cssElCFun_T3Node_insertChildBefore_stub,TA_T3Node_insertChildBefore_MethArgs},
  {&TA_void,NULL,"insertChildAfter"," insert before node; after=NULL for start","","",
    0,3,-1,1,(ta_void_fun)(T3Node::insertChildAfter),cssElCFun_T3Node_insertChildAfter_stub,TA_T3Node_insertChildAfter_MethArgs},
  {&TA_SoNode_ptr,NULL,"getNodeByName"," find node by name, if any","","",
    0,2,-1,1,(ta_void_fun)(T3Node::getNodeByName),cssElCFun_T3Node_getNodeByName_stub,TA_T3Node_getNodeByName_MethArgs},
  {&TA_SoFont_ptr,NULL,"captionFont","","","",
    0,1,0,0,NULL,cssElCFun_T3Node_captionFont_stub,TA_T3Node_captionFont_MethArgs},
  {&TA_SoAsciiText_ptr,NULL,"captionNode","","","",
    0,1,0,0,NULL,cssElCFun_T3Node_captionNode_stub,TA_T3Node_captionNode_MethArgs},
  {&TA_SoSeparator_ptr,NULL,"topSeparator","","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_topSeparator_stub,NULL},
  {&TA_SoTransform_ptr,NULL,"transform"," the master transform, for the whole entity","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_transform_stub,NULL},
  {&TA_SoSeparator_ptr,NULL,"shapeSeparator","","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_shapeSeparator_stub,NULL},
  {&TA_SoTransform_ptr,NULL,"txfm_shape"," the transform for the shape","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_txfm_shape_stub,NULL},
  {&TA_SoMaterial_ptr,NULL,"material","","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_material_stub,NULL},
  {&TA_SoSeparator_ptr,NULL,"childNodes"," use this to set/get T3Node children","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_childNodes_stub,NULL},
  {&TA_const_char_ptr,NULL,"caption","","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_caption_stub,NULL},
  {&TA_void,NULL,"setCaption"," NOTE: if you want to transform, you MUST call transformCaption every time after calling setCaption","","",
    0,1,-1,0,NULL,cssElCFun_T3Node_setCaption_stub,TA_T3Node_setCaption_MethArgs},
  {&TA_void,NULL,"clear"," optional method, for clearing out the content; called from ReInit","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_clear_stub,NULL},
  {&TA_bool,NULL,"expanded"," many nodes have an expanded and compact rep","","",
    0,0,-1,0,NULL,cssElCFun_T3Node_expanded_stub,NULL},
  {&TA_void,NULL,"setExpanded","","","",
    0,1,-1,0,NULL,cssElCFun_T3Node_setExpanded_stub,TA_T3Node_setExpanded_MethArgs},
  {&TA_void,NULL,"addRemoveChildNode"," called by pdpDataView (default prints console error)","","",
    0,2,-1,0,NULL,cssElCFun_T3Node_addRemoveChildNode_stub,TA_T3Node_addRemoveChildNode_MethArgs},
  NULL};
static int T3Color::* TA_T3Color_MbrOff;
static MemberDef_data TA_T3Color_MemberDef[]={
  {&TA_float,NULL,"r","","","",
    *((ta_memb_ptr*)&(TA_T3Color_MbrOff=(int T3Color::*)(&T3Color::r))),0,NULL,0},
  {&TA_float,NULL,"g","","","",
    *((ta_memb_ptr*)&(TA_T3Color_MbrOff=(int T3Color::*)(&T3Color::g))),0,NULL,0},
  {&TA_float,NULL,"b","","","",
    *((ta_memb_ptr*)&(TA_T3Color_MbrOff=(int T3Color::*)(&T3Color::b))),0,NULL,0},
  NULL};
static MethodArgs_data TA_T3Color_setValue_MethArgs[]={
  {&TA_float,NULL,"r_",""},
  {&TA_float,NULL,"g_",""},
  {&TA_float,NULL,"b_",""},
  NULL};
static MethodDef_data TA_T3Color_MethodDef[]={
  {&TA_void,NULL,"setValue","","","",
    0,3,-1,0,NULL,cssElCFun_T3Color_setValue_stub,TA_T3Color_setValue_MethArgs},
  NULL};
static MethodDef_data TA_T3NodeLeaf_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3NodeLeaf::initClass),cssElCFun_T3NodeLeaf_initClass_stub,NULL},
  NULL};
static MethodDef_data TA_T3NodeParent_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3NodeParent::initClass),cssElCFun_T3NodeParent_initClass_stub,NULL},
  NULL};
static EnumDef_data TA_SoFrame_Orientation[]={
  {"Hor"," lies flat in x-z plane","",0},
  {"Ver"," lies flat in x-y plan","",1},
  NULL};
static int SoFrame::* TA_SoFrame_MbrOff;
static MemberDef_data TA_SoFrame_MemberDef[]={
  {&TA_float,NULL,"base"," note: these could be fields","","",
    *((ta_memb_ptr*)&(TA_SoFrame_MbrOff=(int SoFrame::*)(&SoFrame::base))),0,NULL,0},
  {&TA_float,NULL,"height","","","",
    *((ta_memb_ptr*)&(TA_SoFrame_MbrOff=(int SoFrame::*)(&SoFrame::height))),0,NULL,0},
  {&TA_float,NULL,"depth","","","",
    *((ta_memb_ptr*)&(TA_SoFrame_MbrOff=(int SoFrame::*)(&SoFrame::depth))),0,NULL,0},
  {&TA_float,NULL,"inset"," ","DEF_0.05 ","",
    *((ta_memb_ptr*)&(TA_SoFrame_MbrOff=(int SoFrame::*)(&SoFrame::inset))),0,NULL,0},
  {NULL,"::Orientation","orientation"," ","DEF_Hor ","",
    *((ta_memb_ptr*)&(TA_SoFrame_MbrOff=(int SoFrame::*)(&SoFrame::orientation))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SoFrame_setDimensions_MethArgs[]={
  {&TA_float,NULL,"bs",""},
  {&TA_float,NULL,"ht",""},
  {&TA_float,NULL,"dp",""},
  {&TA_float,NULL,"in",""},
  NULL};
static MethodArgs_data TA_SoFrame_setOrientation_MethArgs[]={
  {NULL,"::Orientation","ori",""},
  NULL};
static MethodDef_data TA_SoFrame_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(SoFrame::initClass),cssElCFun_SoFrame_initClass_stub,NULL},
  {&TA_void,NULL,"setDimensions","","","",
    0,4,-1,0,NULL,cssElCFun_SoFrame_setDimensions_stub,TA_SoFrame_setDimensions_MethArgs},
  {&TA_void,NULL,"setOrientation","","","",
    0,1,-1,0,NULL,cssElCFun_SoFrame_setOrientation_stub,TA_SoFrame_setOrientation_MethArgs},
  NULL};
static EnumDef_data TA_T3DataView_DataNodeFlags[]={
  {"DNF_IS_FOLDER"," true for list/group folder nodes (note: does *not* indicate whether item can contain other things or not)","",1},
  {"DNF_IS_ALIAS"," true after children have been created (after clicking on node)","",2},
  {"DNF_UPDATE_NAME"," typically for list items, update the visual name (tree, tab, etc.) after item edited","",4},
  {"DNF_CAN_BROWSE"," can be a new browser root","",8},
  {"DNF_CAN_DRAG"," 16 can allow drags","",16},
  {"DNF_NO_CAN_DROP"," 32 cannot accept drops","",32},
  {"DNF_IS_MEMBER"," 64 true for members (and root), not for list/group items -- helps node configure edit ops","",64},
  {"DNF_IS_LIST_NODE"," true for nodes in a list view (in panel, not on tree)","",128},
  NULL};
static int T3DataView::* TA_T3DataView_MbrOff;
static MemberDef_data TA_T3DataView_MemberDef[]={
  {&TA_int,NULL,"flags"," any of T3DataViewFlags TODO: tbd","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_T3DataView_MbrOff=(int T3DataView::*)(&T3DataView::flags))),0,NULL,0},
  {&TA_int,NULL,"idx"," index of ourselves in parent list","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_T3DataView_MbrOff=(int T3DataView::*)(&T3DataView::idx))),0,NULL,0},
  {&TA_FloatTransform_ptr,NULL,"m_transform"," transform, created only if not unity","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_T3DataView_MbrOff=(int T3DataView::*)(&T3DataView::m_transform))),0,NULL,0},
  NULL};
static MethodArgs_data TA_T3DataView_GetColText_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"itm_idx"," -1"},
  NULL};
static MethodArgs_data TA_T3DataView_ChildQueryEditActions_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_const_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_T3DataView_ChildEditAction_MethArgs[]={
  {&TA_const_MemberDef_ptr,NULL,"md",""},
  {&TA_taBase_ptr,NULL,"child",""},
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_T3DataView_QueryEditActions_MethArgs[]={
  {&TA_const_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int_ref,NULL,"allowed",""},
  {&TA_int_ref,NULL,"forbidden",""},
  NULL};
static MethodArgs_data TA_T3DataView_EditAction_MethArgs[]={
  {&TA_taiMimeSource_ptr,NULL,"ms",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_T3DataView_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_T3DataView_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_T3DataView_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_T3DataView_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","((void *)0)"},
  {&TA_TAPtr,NULL,"par_stop","((void *)0)"},
  NULL};
static MethodArgs_data TA_T3DataView_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_T3DataView_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","((void *)0)"},
  NULL};
static MethodArgs_data TA_T3DataView_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_T3DataView_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_T3DataView_AddDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_T3DataView_RemoveDataView_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"dv",""},
  NULL};
static MethodArgs_data TA_T3DataView_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_T3DataView_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_T3DataView_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_T3DataView_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  NULL};
static MethodArgs_data TA_T3DataView_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_T3DataView_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","((void *)0)"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_T3DataView_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_T3DataView_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_T3DataView_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_T3DataView_ChildUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"child",""},
  {&TA_bool_ref,NULL,"handled",""},
  NULL};
static MethodArgs_data TA_T3DataView_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_T3DataView_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_T3DataView_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_T3DataView_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_T3DataView_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodArgs_data TA_T3DataView_DataLinkDestroying_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"dl",""},
  NULL};
static MethodArgs_data TA_T3DataView_DataDataChanged_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"na",""},
  {&TA_int,NULL,"dcr",""},
  {&TA_void_ptr,NULL,"op1",""},
  {&TA_void_ptr,NULL,"op2",""},
  NULL};
static MethodArgs_data TA_T3DataView_SetData_MethArgs[]={
  {&TA_taBase_ptr,NULL,"ta",""},
  NULL};
static MethodArgs_data TA_T3DataView_ChildClearing_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_T3DataView_ChildRendered_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_T3DataView_Clear_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"par"," ((void *)0)"},
  NULL};
static MethodArgs_data TA_T3DataView_CloseChild_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_T3DataView_ItemRemoving_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_T3DataView_EditAction__MethArgs[]={
  {&TA_ISelectable_PtrList_ref,NULL,"sel_items",""},
  {&TA_int,NULL,"ea",""},
  NULL};
static MethodArgs_data TA_T3DataView_FillContextMenu_MethArgs[]={
  {&TA_ISelectable_PtrList_ref,NULL,"sel_items",""},
  {&TA_taiMenu_ptr,NULL,"menu",""},
  NULL};
static MethodArgs_data TA_T3DataView_GetClipData_MethArgs[]={
  {&TA_const_ISelectable_PtrList_ref,NULL,"sel_items",""},
  {&TA_int,NULL,"src_edit_action",""},
  {&TA_bool,NULL,"for_drag",""},
  NULL};
static MethodArgs_data TA_T3DataView_GetEditActions__MethArgs[]={
  {&TA_const_ISelectable_PtrList_ref,NULL,"sel_items",""},
  NULL};
static MethodArgs_data TA_T3DataView_RefUnref_MethArgs[]={
  {&TA_bool,NULL,"ref",""},
  NULL};
static MethodArgs_data TA_T3DataView_setExpandable_MethArgs[]={
  {&TA_bool,NULL,"na",""},
  NULL};
static MethodArgs_data TA_T3DataView_transform_MethArgs[]={
  {&TA_bool,NULL,"auto_create"," false"},
  NULL};
static MethodArgs_data TA_T3DataView_AddRemoveChildNode_MethArgs[]={
  {&TA_SoNode_ptr,NULL,"node",""},
  {&TA_bool,NULL,"adding",""},
  NULL};
static MethodArgs_data TA_T3DataView_OnWindowBind_MethArgs[]={
  {&TA_iT3DataViewer_ptr,NULL,"vw",""},
  NULL};
static MethodDef_data TA_T3DataView_MethodDef[]={
  {&TA_taString,NULL,"GetColText"," text for the indicated column in browse lists (may be ignored and controlled by parent list; by convention, 0=name, 1=type; itm_idx is usually ignored by items","","",
    0,2,1,0,NULL,cssElCFun_T3DataView_GetColText_stub,TA_T3DataView_GetColText_MethArgs},
  {&TA_void,NULL,"ChildQueryEditActions"," gives ops allowed on child, with ms being clipboard or drop contents, md valid if we are a member, o/w NULL","","",
    0,5,-1,0,NULL,cssElCFun_T3DataView_ChildQueryEditActions_stub,TA_T3DataView_ChildQueryEditActions_MethArgs},
  {&TA_int,NULL,"ChildEditAction"," note: multi source ops will have child=NULL","","",
    0,4,-1,0,NULL,cssElCFun_T3DataView_ChildEditAction_stub,TA_T3DataView_ChildEditAction_MethArgs},
  {&TA_void,NULL,"QueryEditActions"," ms is null for Src-op query","","",
    0,3,-1,0,NULL,cssElCFun_T3DataView_QueryEditActions_stub,TA_T3DataView_QueryEditActions_MethArgs},
  {&TA_int,NULL,"EditAction","","","",
    0,2,-1,0,NULL,cssElCFun_T3DataView_EditAction_stub,TA_T3DataView_EditAction_MethArgs},
  {&TA_taDataLink_ptr,NULL,"GetDataLink"," forces creation; can still be NULL if the type doesn't support datalinks","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_GetDataLink_stub,NULL},
  {&TA_void,NULL,"UnRef"," note: overridden by ref-semantic classes to delete","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_UnRef_stub,NULL},
  {&TA_void,NULL,"UnRefNoDelete","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_UnRefNoDelete_stub,NULL},
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_UnSafeCopy_stub,TA_T3DataView_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_CastCopyTo_stub,TA_T3DataView_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_T3DataView_GetOwner_stub,TA_T3DataView_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_T3DataView_GetPath_stub,TA_T3DataView_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_T3DataView_FindFromPath_stub,TA_T3DataView_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_T3DataView_New_stub,TA_T3DataView_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_StructUpdate_stub,TA_T3DataView_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_DataUpdate_stub,TA_T3DataView_DataUpdate_MethArgs},
  {&TA_void,NULL,"AddDataView"," add a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_AddDataView_stub,TA_T3DataView_AddDataView_MethArgs},
  {&TA_bool,NULL,"RemoveDataView"," removes a dataview (not usually overridden)","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_RemoveDataView_stub,TA_T3DataView_RemoveDataView_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_T3DataView_InheritsFrom_stub,TA_T3DataView_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_T3DataView_GetEnumString_stub,TA_T3DataView_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_T3DataView_GetEnumVal_stub,TA_T3DataView_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS MENU_CONTEXT ","",
    0,2,1,0,NULL,cssElCFun_T3DataView_Load_stub,TA_T3DataView_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU MENU_ON_Object ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_T3DataView_Save_stub,TA_T3DataView_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_T3DataView_SaveAs_stub,TA_T3DataView_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object LABEL_Properties MENU_CONTEXT NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_Edit_stub,NULL},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_CloseEdit_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","","",
    0,1,0,0,NULL,cssElCFun_T3DataView_ReShowEdit_stub,TA_T3DataView_ReShowEdit_MethArgs},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT ","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_CopyFrom_stub,TA_T3DataView_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_CopyTo_stub,TA_T3DataView_CopyTo_MethArgs},
  {&TA_void,NULL,"ChildUpdateAfterEdit"," if enabled by UAE_OWNER directive, notifies parent; altered in lists/groups to send to their owner","","",
    0,2,-1,0,NULL,cssElCFun_T3DataView_ChildUpdateAfterEdit_stub,TA_T3DataView_ChildUpdateAfterEdit_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_ChangeMyType_stub,TA_T3DataView_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing --<br>if already on dialog, removes it & returns false (else true)","","",
    0,3,-1,0,NULL,cssElCFun_T3DataView_SelectForEdit_stub,TA_T3DataView_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog --\nif already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_T3DataView_SelectFunForEdit_stub,TA_T3DataView_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_CallFun_stub,TA_T3DataView_CallFun_MethArgs},
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_SetAdapter_stub,TA_T3DataView_SetAdapter_MethArgs},
  {&TA_taDataLink_ptr_ptr,NULL,"addr_data_link","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_addr_data_link_stub,NULL},
  {&TA_void_ptr,NULL,"This"," reference to the 'this' pointer of the client object","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_This_stub,NULL},
  {&TA_taiDataLink_ptr,NULL,"link","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_link_stub,NULL},
  {&TA_void,NULL,"DataLinkDestroying"," called by DataLink when destroying; it will remove datalink ref in dlc upon return","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_DataLinkDestroying_stub,TA_T3DataView_DataLinkDestroying_MethArgs},
  {&TA_void,NULL,"DataDataChanged"," ","","",
    1,4,-1,0,NULL,cssElCFun_T3DataView_DataDataChanged_stub,TA_T3DataView_DataDataChanged_MethArgs},
  {&TA_TypeDef_ptr,NULL,"GetDataTypeDef"," convenience function, gets data from link","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_GetDataTypeDef_stub,NULL},
  {&TA_bool,NULL,"IsDataView"," 'true' for dlc's that are DataViews (see taBase)","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_IsDataView_stub,NULL},
  {&TA_taBase_ptr,NULL,"data"," subclasses usually redefine a strongly typed version","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_data_stub,NULL},
  {&TA_void,NULL,"SetData"," set the data to which this points -- must be subclass of data_base","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_SetData_stub,TA_T3DataView_SetData_MethArgs},
  {&TA_int,NULL,"dbu_cnt"," batch update: -ve:data, 0:none, +ve:struct","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_dbu_cnt_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"md"," ISelectable property member stub","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_md_stub,NULL},
  {&TA_int,NULL,"par_dbu_cnt"," dbu of parent(s); note: only sign is accurate, not necessarily value (optimized)","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_par_dbu_cnt_stub,NULL},
  {&TA_taDataView_ptr,NULL,"parent","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_parent_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"GetDataMemberDef"," returns md if known and/or knowable (ex. NULL for list members)","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_GetDataMemberDef_stub,NULL},
  {&TA_taString,NULL,"GetLabel"," returns a label suitable for tabview tabs, etc.","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_GetLabel_stub,NULL},
  {&TA_void,NULL,"DataDestroying","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_DataDestroying_stub,NULL},
  {&TA_void,NULL,"ChildClearing"," override to implement par's portion of clear NOTE: child is always a T3DataView","","",
    1,1,-1,0,NULL,cssElCFun_T3DataView_ChildClearing_stub,TA_T3DataView_ChildClearing_MethArgs},
  {&TA_void,NULL,"ChildRendered"," override to implement par's portion of render NOTE: child is always a T3DataView","","",
    1,1,-1,0,NULL,cssElCFun_T3DataView_ChildRendered_stub,TA_T3DataView_ChildRendered_MethArgs},
  {&TA_void,NULL,"Clear"," clears the view (but doesn't delete any components) (usually override _impl)","","",
    0,1,0,0,NULL,cssElCFun_T3DataView_Clear_stub,TA_T3DataView_Clear_MethArgs},
  {&TA_void,NULL,"CloseChild","","","",
    1,1,-1,0,NULL,cssElCFun_T3DataView_CloseChild_stub,TA_T3DataView_CloseChild_MethArgs},
  {&TA_void,NULL,"Render"," renders the visible contents (usually override the _impl)","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_Render_stub,NULL},
  {&TA_void,NULL,"Reset"," clears, and deletes any components (note: usually override _impl)","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_Reset_stub,NULL},
  {&TA_void,NULL,"ItemRemoving"," items call this on the root item -- usually used by a viewer to insure item removed from things like sel lists","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_ItemRemoving_stub,TA_T3DataView_ItemRemoving_MethArgs},
  {&TA_taiDataLink_ptr,NULL,"par_link"," parent item's (if any) link","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_par_link_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"par_md"," parent item's (if any) md","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_par_md_stub,NULL},
  {&TA_IDataViewHost_ptr,NULL,"host"," ","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_host_stub,NULL},
  {&TA_taString,NULL,"view_name"," for members, the member name; for list items, the name if any, otherwise a created name using the index","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_view_name_stub,NULL},
  {&TA_QWidget_ptr,NULL,"widget","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_widget_stub,NULL},
  {&TA_int,NULL,"EditAction_"," do the indicated edit action (called from browser or list view); normally implement the _impl","","",
    0,2,-1,0,NULL,cssElCFun_T3DataView_EditAction__stub,TA_T3DataView_EditAction__MethArgs},
  {&TA_void,NULL,"FillContextMenu"," normally implement the _impl","","",
    0,2,-1,0,NULL,cssElCFun_T3DataView_FillContextMenu_stub,TA_T3DataView_FillContextMenu_MethArgs},
  {&TA_taiClipData_ptr,NULL,"GetClipData"," delegates to the link; normally not overridden","","",
    0,3,-1,0,NULL,cssElCFun_T3DataView_GetClipData_stub,TA_T3DataView_GetClipData_MethArgs},
  {&TA_int,NULL,"GetEditActions_"," typically called on single item for acceptDrop called to get edit items available on clipboard for the sel_items","","",
    1,1,-1,0,NULL,cssElCFun_T3DataView_GetEditActions__stub,TA_T3DataView_GetEditActions__MethArgs},
  {&TA_taiMimeItem_ptr,NULL,"GetMimeItem"," delegates to the link","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_GetMimeItem_stub,NULL},
  {&TA_int,NULL,"RefUnref"," ref'ed/unrefed in select lists etc.; optional, and can be used for lifetime mgt; returns count after operation","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_RefUnref_stub,TA_T3DataView_RefUnref_MethArgs},
  {&TA_bool,NULL,"hasChildren","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_hasChildren_stub,NULL},
  {&TA_bool,NULL,"expandable","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_expandable_stub,NULL},
  {&TA_void,NULL,"setExpandable","","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_setExpandable_stub,TA_T3DataView_setExpandable_MethArgs},
  {&TA_FloatTransform_ptr,NULL,"transform"," transform, in Inventor coords","","",
    0,1,0,0,NULL,cssElCFun_T3DataView_transform_stub,TA_T3DataView_transform_MethArgs},
  {&TA_T3Node_ptr,NULL,"node_so"," ","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_node_so_stub,NULL},
  {&TA_T3DataViewRoot_ptr,NULL,"root"," obs T3DataViewer*	viewer() const;","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_root_stub,NULL},
  {&TA_void,NULL,"AddRemoveChildNode"," can be used for manually using non-default T3Node items in a child; add in Pre_impl, remove in Clear_impl","","",
    0,2,-1,0,NULL,cssElCFun_T3DataView_AddRemoveChildNode_stub,TA_T3DataView_AddRemoveChildNode_MethArgs},
  {&TA_void,NULL,"BuildAll"," subclass-dependent operation -- reinvoked after major update","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_BuildAll_stub,NULL},
  {&TA_void,NULL,"OnWindowBind"," called after the viewer creates/fills the main window (for dataviews embedded in main viewer only), or when DataView added to existing viewer","","",
    0,1,-1,0,NULL,cssElCFun_T3DataView_OnWindowBind_stub,TA_T3DataView_OnWindowBind_MethArgs},
  {&TA_void,NULL,"ReInit"," perform a reinitialization, particularly of visual state -- overload _impl","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_ReInit_stub,NULL},
  {&TA_void,NULL,"fileNew"," this section for all the delegated menu commands","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_fileNew_stub,NULL},
  {&TA_void,NULL,"fileOpen"," this section for all the delegated menu commands","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_fileOpen_stub,NULL},
  {&TA_void,NULL,"fileSave"," this section for all the delegated menu commands","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_fileSave_stub,NULL},
  {&TA_void,NULL,"fileSaveAs"," this section for all the delegated menu commands","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_fileSaveAs_stub,NULL},
  {&TA_void,NULL,"fileClose","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataView_fileClose_stub,NULL},
  NULL};
static int T3DataViewPar::* TA_T3DataViewPar_MbrOff;
static MemberDef_data TA_T3DataViewPar_MemberDef[]={
  {&TA_T3DataView_List,NULL,"children"," ","SHOW READ_ONLY BROWSE ","",
    *((ta_memb_ptr*)&(TA_T3DataViewPar_MbrOff=(int T3DataViewPar::*)(&T3DataViewPar::children))),0,NULL,0},
  NULL};
static MethodArgs_data TA_T3DataViewPar_CloseChild_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodDef_data TA_T3DataViewPar_MethodDef[]={
  {&TA_void,NULL,"CloseChild","","","",
    1,1,-1,0,NULL,cssElCFun_T3DataViewPar_CloseChild_stub,TA_T3DataViewPar_CloseChild_MethArgs},
  NULL};
static int T3DataViewRoot::* TA_T3DataViewRoot_MbrOff;
static MemberDef_data TA_T3DataViewRoot_MemberDef[]={
  {&TA_IDataViewHost_ptr,NULL,"host"," ss/b set by owner","","",
    *((ta_memb_ptr*)&(TA_T3DataViewRoot_MbrOff=(int T3DataViewRoot::*)(&T3DataViewRoot::host))),0,NULL,0},
  NULL};
static EnumDef_data TA_iT3ViewspaceWidget_SelectionMode[]={
  {"SM_NONE","","",0},
  {"SM_SINGLE","","",1},
  {"SM_MULTI","","",2},
  NULL};
static MethodArgs_data TA_iT3ViewspaceWidget_horScrollBar_MethArgs[]={
  {&TA_bool,NULL,"auto_create"," false"},
  NULL};
static MethodArgs_data TA_iT3ViewspaceWidget_setHasHorScrollBar_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iT3ViewspaceWidget_verScrollBar_MethArgs[]={
  {&TA_bool,NULL,"auto_create"," false"},
  NULL};
static MethodArgs_data TA_iT3ViewspaceWidget_setHasVerScrollBar_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iT3ViewspaceWidget_setRenderArea_MethArgs[]={
  {&TA_SoQtRenderArea_ptr,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iT3ViewspaceWidget_setSceneGraph_MethArgs[]={
  {&TA_SoNode_ptr,NULL,"sg",""},
  NULL};
static MethodDef_data TA_iT3ViewspaceWidget_MethodDef[]={
  {&TA_SoSeparator_ptr,NULL,"root_so"," always valid -- you can add your own lights, camera, etc.","","",
    0,0,-1,0,NULL,cssElCFun_iT3ViewspaceWidget_root_so_stub,NULL},
  {&TA_QScrollBar_ptr,NULL,"horScrollBar","","","",
    0,1,0,0,NULL,cssElCFun_iT3ViewspaceWidget_horScrollBar_stub,TA_iT3ViewspaceWidget_horScrollBar_MethArgs},
  {&TA_void,NULL,"setHasHorScrollBar","","","",
    0,1,-1,0,NULL,cssElCFun_iT3ViewspaceWidget_setHasHorScrollBar_stub,TA_iT3ViewspaceWidget_setHasHorScrollBar_MethArgs},
  {&TA_QScrollBar_ptr,NULL,"verScrollBar","","","",
    0,1,0,0,NULL,cssElCFun_iT3ViewspaceWidget_verScrollBar_stub,TA_iT3ViewspaceWidget_verScrollBar_MethArgs},
  {&TA_void,NULL,"setHasVerScrollBar","","","",
    0,1,-1,0,NULL,cssElCFun_iT3ViewspaceWidget_setHasVerScrollBar_stub,TA_iT3ViewspaceWidget_setHasVerScrollBar_MethArgs},
  {&TA_SoQtRenderArea_ptr,NULL,"renderArea","","","",
    0,0,-1,0,NULL,cssElCFun_iT3ViewspaceWidget_renderArea_stub,NULL},
  {&TA_void,NULL,"setRenderArea"," must be called once, after creation","","",
    0,1,-1,0,NULL,cssElCFun_iT3ViewspaceWidget_setRenderArea_stub,TA_iT3ViewspaceWidget_setRenderArea_MethArgs},
  {&TA_void,NULL,"setSceneGraph","","","",
    0,1,-1,0,NULL,cssElCFun_iT3ViewspaceWidget_setSceneGraph_stub,TA_iT3ViewspaceWidget_setSceneGraph_MethArgs},
  {&TA_void,NULL,"deleteScene"," deletes the scene -- usually only called internally, not by clients of this component","","",
    0,0,-1,0,NULL,cssElCFun_iT3ViewspaceWidget_deleteScene_stub,NULL},
  NULL};
static int T3DataViewer::* TA_T3DataViewer_MbrOff;
static MemberDef_data TA_T3DataViewer_MemberDef[]={
  {&TA_T3DataViewRoot,NULL,"root_view"," placeholder item -- contains the actual root(s) DataView items as children","BROWSE ","",
    *((ta_memb_ptr*)&(TA_T3DataViewer_MbrOff=(int T3DataViewer::*)(&T3DataViewer::root_view))),0,NULL,0},
  NULL};
static MethodArgs_data TA_T3DataViewer_AddView_MethArgs[]={
  {&TA_T3DataView_ptr,NULL,"view",""},
  NULL};
static MethodDef_data TA_T3DataViewer_MethodDef[]={
  {&TA_iT3DataViewer_ptr,NULL,"viewer_win","","","",
    0,0,-1,0,NULL,cssElCFun_T3DataViewer_viewer_win_stub,NULL},
  {&TA_void,NULL,"AddView"," add a view","","",
    0,1,-1,0,NULL,cssElCFun_T3DataViewer_AddView_stub,TA_T3DataViewer_AddView_MethArgs},
  NULL};
static EnumDef_data TA_taList_T3DataView__Orientation[]={
  {"Horizontal","","",0},
  {"Vertical","","",1},
  NULL};
static MethodArgs_data TA_taList_T3DataView__MoveBefore_MethArgs[]={
  {NULL,"::T3DataView_ptr","trg",""},
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_T3DataView__MoveAfter_MethArgs[]={
  {NULL,"::T3DataView_ptr","trg",""},
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_T3DataView__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_T3DataView__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_T3DataView__Edit_El_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_T3DataView__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_T3DataView__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_T3DataView__AddUniqNameOld_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_T3DataView__LinkUniqNameOld_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_T3DataView__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_T3DataView__MoveBefore_stub,TA_taList_T3DataView__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_T3DataView__MoveAfter_stub,TA_taList_T3DataView__MoveAfter_MethArgs},
  {NULL,"::T3DataView_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_T3DataView__SafeEl_stub,TA_taList_T3DataView__SafeEl_MethArgs},
  {NULL,"::T3DataView_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_T3DataView__FastEl_stub,TA_taList_T3DataView__FastEl_MethArgs},
  {NULL,"::T3DataView_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_T3DataView__DefaultEl_stub,NULL},
  {NULL,"::T3DataView_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_T3DataView__Edit_El_stub,TA_taList_T3DataView__Edit_El_MethArgs},
  {NULL,"::T3DataView_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_T3DataView__FindName_stub,TA_taList_T3DataView__FindName_MethArgs},
  {NULL,"::T3DataView_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_T3DataView__FindType_stub,TA_taList_T3DataView__FindType_MethArgs},
  {NULL,"::T3DataView_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_T3DataView__Pop_stub,NULL},
  {NULL,"::T3DataView_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_T3DataView__Peek_stub,NULL},
  {NULL,"::T3DataView_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_T3DataView__AddUniqNameOld_stub,TA_taList_T3DataView__AddUniqNameOld_MethArgs},
  {NULL,"::T3DataView_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_T3DataView__LinkUniqNameOld_stub,TA_taList_T3DataView__LinkUniqNameOld_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Edit_El_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__AddUniqNameOld_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__LinkUniqNameOld_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__FindEl_MethArgs[]={
  {NULL,"::const_T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__AddEl_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Add_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__AddUnique_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__AddUniqNameNew_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Insert_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::T3DataView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__ReplaceEl_MethArgs[]={
  {NULL,"::T3DataView_ptr","old_it",""},
  {NULL,"::T3DataView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::T3DataView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__RemoveEl_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__DuplicateEl_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Link_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__LinkUnique_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__LinkUniqNameNew_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__InsertLink_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::T3DataView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__ReplaceLinkEl_MethArgs[]={
  {NULL,"::T3DataView_ptr","old_it",""},
  {NULL,"::T3DataView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::T3DataView_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Push_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__MoveEl_MethArgs[]={
  {NULL,"::T3DataView_ptr","from",""},
  {NULL,"::T3DataView_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__Transfer_MethArgs[]={
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__MoveBefore_MethArgs[]={
  {NULL,"::T3DataView_ptr","trg",""},
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_T3DataView__MoveAfter_MethArgs[]={
  {NULL,"::T3DataView_ptr","trg",""},
  {NULL,"::T3DataView_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_T3DataView__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Find_stub,TA_taPtrList_T3DataView__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Remove_stub,TA_taPtrList_T3DataView__Remove_MethArgs},
  {NULL,"::T3DataView_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__SafeEl_stub,TA_taPtrList_T3DataView__SafeEl_MethArgs},
  {NULL,"::T3DataView_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__FastEl_stub,TA_taPtrList_T3DataView__FastEl_MethArgs},
  {NULL,"::T3DataView_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Edit_El_stub,TA_taPtrList_T3DataView__Edit_El_MethArgs},
  {NULL,"::T3DataView_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_T3DataView__FindName_stub,TA_taPtrList_T3DataView__FindName_MethArgs},
  {NULL,"::T3DataView_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Pop_stub,NULL},
  {NULL,"::T3DataView_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Peek_stub,NULL},
  {NULL,"::T3DataView_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__AddUniqNameOld_stub,TA_taPtrList_T3DataView__AddUniqNameOld_MethArgs},
  {NULL,"::T3DataView_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__LinkUniqNameOld_stub,TA_taPtrList_T3DataView__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__FindEl_stub,TA_taPtrList_T3DataView__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__AddEl_stub,TA_taPtrList_T3DataView__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Add_stub,TA_taPtrList_T3DataView__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__AddUnique_stub,TA_taPtrList_T3DataView__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__AddUniqNameNew_stub,TA_taPtrList_T3DataView__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Insert_stub,TA_taPtrList_T3DataView__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Replace_stub,TA_taPtrList_T3DataView__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__ReplaceEl_stub,TA_taPtrList_T3DataView__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__ReplaceName_stub,TA_taPtrList_T3DataView__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__RemoveEl_stub,TA_taPtrList_T3DataView__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__DuplicateEl_stub,TA_taPtrList_T3DataView__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Link_stub,TA_taPtrList_T3DataView__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__LinkUnique_stub,TA_taPtrList_T3DataView__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__LinkUniqNameNew_stub,TA_taPtrList_T3DataView__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_T3DataView__InsertLink_stub,TA_taPtrList_T3DataView__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__ReplaceLink_stub,TA_taPtrList_T3DataView__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__ReplaceLinkEl_stub,TA_taPtrList_T3DataView__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__ReplaceLinkName_stub,TA_taPtrList_T3DataView__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Push_stub,TA_taPtrList_T3DataView__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__MoveEl_stub,TA_taPtrList_T3DataView__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_T3DataView__Transfer_stub,TA_taPtrList_T3DataView__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__MoveBefore_stub,TA_taPtrList_T3DataView__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_T3DataView__MoveAfter_stub,TA_taPtrList_T3DataView__MoveAfter_MethArgs},
  NULL};
static int T3CBar::* TA_T3CBar_MbrOff;
static MemberDef_data TA_T3CBar_MemberDef[]={
  {&TA_float,NULL,"height","","","",
    *((ta_memb_ptr*)&(TA_T3CBar_MbrOff=(int T3CBar::*)(&T3CBar::height))),0,NULL,0},
  {&TA_float,NULL,"width","","","",
    *((ta_memb_ptr*)&(TA_T3CBar_MbrOff=(int T3CBar::*)(&T3CBar::width))),0,NULL,0},
  {&TA_ColorScale_ptr,NULL,"scale","","","",
    *((ta_memb_ptr*)&(TA_T3CBar_MbrOff=(int T3CBar::*)(&T3CBar::scale))),0,NULL,0},
  NULL};
static MethodArgs_data TA_T3CBar_SetColorScale_MethArgs[]={
  {&TA_ColorScale_ptr,NULL,"c",""},
  NULL};
static MethodArgs_data TA_T3CBar_SetDimensions_MethArgs[]={
  {&TA_float,NULL,"wd",""},
  {&TA_float,NULL,"ht",""},
  NULL};
static MethodDef_data TA_T3CBar_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3CBar::initClass),cssElCFun_T3CBar_initClass_stub,NULL},
  {&TA_int,NULL,"blocks","","","",
    0,0,-1,0,NULL,cssElCFun_T3CBar_blocks_stub,NULL},
  {&TA_void,NULL,"SetColorScale","","","",
    0,1,-1,0,NULL,cssElCFun_T3CBar_SetColorScale_stub,TA_T3CBar_SetColorScale_MethArgs},
  {&TA_void,NULL,"SetDimensions","","","",
    0,2,-1,0,NULL,cssElCFun_T3CBar_SetDimensions_stub,TA_T3CBar_SetDimensions_MethArgs},
  NULL};
static MethodArgs_data TA_iDataTable_setDataTable_MethArgs[]={
  {&TA_DataTable_ptr,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iDataTable_cellWidget_MethArgs[]={
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_iDataTable_clearCellWidget_MethArgs[]={
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_iDataTable_clearCell_MethArgs[]={
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_iDataTable_setItem_MethArgs[]={
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  {&TA_QTableItem_ptr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_iDataTable_item_MethArgs[]={
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_iDataTable_paintCell_MethArgs[]={
  {&TA_QPainter_ptr,NULL,"p",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  {&TA_const_QRect_ref,NULL,"cr",""},
  {&TA_bool,NULL,"selected",""},
  {&TA_const_QColorGroup_ref,NULL,"cg",""},
  NULL};
static MethodArgs_data TA_iDataTable_resizeData_MethArgs[]={
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_iDataTable_takeItem_MethArgs[]={
  {&TA_QTableItem_ptr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_iDataTable_swapRows_MethArgs[]={
  {&TA_int,NULL,"row1",""},
  {&TA_int,NULL,"row2",""},
  {&TA_bool,NULL,"swapHeader"," FALSE "},
  NULL};
static MethodArgs_data TA_iDataTable_swapColumns_MethArgs[]={
  {&TA_int,NULL,"col1",""},
  {&TA_int,NULL,"col2",""},
  {&TA_bool,NULL,"swapHeader"," FALSE "},
  NULL};
static MethodArgs_data TA_iDataTable_swapCells_MethArgs[]={
  {&TA_int,NULL,"row1",""},
  {&TA_int,NULL,"col1",""},
  {&TA_int,NULL,"row2",""},
  {&TA_int,NULL,"col2",""},
  NULL};
static MethodDef_data TA_iDataTable_MethodDef[]={
  {&TA_DataTable_ptr,NULL,"dt","","","",
    0,0,-1,0,NULL,NULL,NULL},
  {&TA_void,NULL,"setDataTable","","","",
    0,1,-1,0,NULL,NULL,TA_iDataTable_setDataTable_MethArgs},
  {&TA_void,NULL,"updateConfig"," updates size, and header names","","",
    0,0,-1,0,NULL,NULL,NULL},
  {&TA_QWidget_ptr,NULL,"cellWidget"," override","","",
    0,2,-1,0,NULL,NULL,TA_iDataTable_cellWidget_MethArgs},
  {&TA_void,NULL,"clearCellWidget"," override","","",
    0,2,-1,0,NULL,NULL,TA_iDataTable_clearCellWidget_MethArgs},
  {&TA_void,NULL,"clearCell"," override","","",
    0,2,-1,0,NULL,NULL,TA_iDataTable_clearCell_MethArgs},
  {&TA_void,NULL,"setItem"," override stub out","","",
    0,3,-1,0,NULL,NULL,TA_iDataTable_setItem_MethArgs},
  {&TA_QTableItem_ptr,NULL,"item"," override stub out","","",
    0,2,-1,0,NULL,NULL,TA_iDataTable_item_MethArgs},
  {&TA_void,NULL,"paintCell"," override","","",
    0,6,-1,0,NULL,NULL,TA_iDataTable_paintCell_MethArgs},
  {&TA_void,NULL,"resizeData"," empty override, per using virtual table","","",
    0,1,-1,0,NULL,NULL,TA_iDataTable_resizeData_MethArgs},
  {&TA_void,NULL,"takeItem"," override stub out","","",
    0,1,-1,0,NULL,NULL,TA_iDataTable_takeItem_MethArgs},
  {&TA_void,NULL,"swapRows"," TODO","","",
    0,3,2,0,NULL,NULL,TA_iDataTable_swapRows_MethArgs},
  {&TA_void,NULL,"swapColumns"," TODO","","",
    0,3,2,0,NULL,NULL,TA_iDataTable_swapColumns_MethArgs},
  {&TA_void,NULL,"swapCells"," TODO","","",
    0,4,-1,0,NULL,NULL,TA_iDataTable_swapCells_MethArgs},
  NULL};
static EnumDef_data TA_T3Axis_Axis[]={
  {"X","","",0},
  {"Y","","",1},
  {"Z","","",2},
  NULL};
static MethodArgs_data TA_T3Axis_addLabel_MethArgs[]={
  {&TA_const_char_ptr,NULL,"text",""},
  {&TA_const_iVec3f_ref,NULL,"at",""},
  {&TA_int,NULL,"just",""},
  NULL};
static MethodArgs_data TA_T3Axis_addLine_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"from",""},
  {&TA_const_iVec3f,NULL,"to",""},
  NULL};
static MethodDef_data TA_T3Axis_MethodDef[]={
  {&TA_void,NULL,"initClass"," ","","",
    0,0,-1,1,(ta_void_fun)(T3Axis::initClass),cssElCFun_T3Axis_initClass_stub,NULL},
  {NULL,"::Axis","axis"," note: lifetime invariant","","",
    0,0,-1,0,NULL,cssElCFun_T3Axis_axis_stub,NULL},
  {&TA_SoFont_ptr,NULL,"labelFont"," setup after creating","","",
    0,0,-1,0,NULL,cssElCFun_T3Axis_labelFont_stub,NULL},
  {&TA_void,NULL,"addLabel"," add the label text, justified per axis (used for tick labels) add the label text, with explicit justification (used for axis title, and unit labels)","","",
    1,3,-1,0,NULL,cssElCFun_T3Axis_addLabel_stub,TA_T3Axis_addLabel_MethArgs},
  {&TA_void,NULL,"addLine","","","",
    0,2,-1,0,NULL,cssElCFun_T3Axis_addLine_stub,TA_T3Axis_addLine_MethArgs},
  NULL};
static EnumDef_data TA_T3GraphLine_LineStyle[]={
  {"SOLID"," -----","",0},
  {"DOT"," .....","",1},
  {"DASH"," - - -","",2},
  {"DASH_DOT"," _._._","",3},
  NULL};
static EnumDef_data TA_T3GraphLine_MarkerStyle[]={
  {"CIRCLE"," o","",1},
  {"SQUARE"," []","",2},
  {"DIAMOND"," <>","",3},
  {"TRIANGLE"," ","",4},
  {"MINUS"," -","",5},
  {"BACKSLASH"," ","",6},
  {"BAR"," |","",7},
  {"SLASH"," /","",8},
  {"PLUS"," +","",9},
  {"CROSS"," x","",10},
  {"STAR"," *","",11},
  NULL};
static MethodArgs_data TA_T3GraphLine_setLineStyle_MethArgs[]={
  {NULL,"::LineStyle","value",""},
  {&TA_float,NULL,"line_width"," 0.0f"},
  NULL};
static MethodArgs_data TA_T3GraphLine_setValueColorMode_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_T3GraphLine_textAt_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"pt",""},
  {&TA_const_char_ptr,NULL,"str",""},
  NULL};
static MethodArgs_data TA_T3GraphLine_setDefaultColor_MethArgs[]={
  {&TA_const_T3Color_ref,NULL,"color",""},
  NULL};
static MethodArgs_data TA_T3GraphLine_moveTo_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"pt",""},
  {&TA_const_T3Color_ref,NULL,"color",""},
  NULL};
static MethodArgs_data TA_T3GraphLine_lineTo_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"to",""},
  {&TA_const_T3Color_ref,NULL,"color",""},
  NULL};
static MethodArgs_data TA_T3GraphLine_markerAt_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"pt",""},
  {NULL,"::MarkerStyle","style",""},
  {&TA_const_T3Color_ref,NULL,"color",""},
  NULL};
static MethodDef_data TA_T3GraphLine_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3GraphLine::initClass),cssElCFun_T3GraphLine_initClass_stub,NULL},
  {&TA_SoFont_ptr,NULL,"labelFont"," setup after creating","","",
    0,0,-1,0,NULL,cssElCFun_T3GraphLine_labelFont_stub,NULL},
  {&TA_void,NULL,"setLineStyle","","","",
    0,2,1,0,NULL,cssElCFun_T3GraphLine_setLineStyle_stub,TA_T3GraphLine_setLineStyle_MethArgs},
  {&TA_bool,NULL,"valueColorMode","","","",
    0,0,-1,0,NULL,cssElCFun_T3GraphLine_valueColorMode_stub,NULL},
  {&TA_void,NULL,"setValueColorMode","","","",
    0,1,-1,0,NULL,cssElCFun_T3GraphLine_setValueColorMode_stub,TA_T3GraphLine_setValueColorMode_MethArgs},
  {&TA_void,NULL,"textAt"," render indicated text at the pt","","",
    0,2,-1,0,NULL,cssElCFun_T3GraphLine_textAt_stub,TA_T3GraphLine_textAt_MethArgs},
  {&TA_void,NULL,"setDefaultColor"," call after reset to set default color (black if not called)","","",
    0,1,-1,0,NULL,cssElCFun_T3GraphLine_setDefaultColor_stub,TA_T3GraphLine_setDefaultColor_MethArgs},
  {&TA_void,NULL,"moveTo"," use to start a new line segment use to start a new line segment in valueColor mode","","",
    1,2,-1,0,NULL,cssElCFun_T3GraphLine_moveTo_stub,TA_T3GraphLine_moveTo_MethArgs},
  {&TA_void,NULL,"lineTo"," add arc to current line, in default color add arc to current line, in valueColor mode (optimizes if color same as last arc)","","",
    1,2,-1,0,NULL,cssElCFun_T3GraphLine_lineTo_stub,TA_T3GraphLine_lineTo_MethArgs},
  {&TA_void,NULL,"markerAt"," render a marker at indicated location in default color render a marker at indicated location in valueColor mode","","",
    1,3,-1,0,NULL,cssElCFun_T3GraphLine_markerAt_stub,TA_T3GraphLine_markerAt_MethArgs},
  NULL};
static MethodDef_data TA_T3Graph_MethodDef[]={
  {&TA_void,NULL,"initClass","","","",
    0,0,-1,1,(ta_void_fun)(T3Graph::initClass),cssElCFun_T3Graph_initClass_stub,NULL},
  NULL};
static EnumDef_data TA_AxisView_Axis[]={
  {"X","","",0},
  {"Y","","",1},
  {"Z","","",2},
  NULL};
static int AxisView::* TA_AxisView_MbrOff;
static MemberDef_data TA_AxisView_MemberDef[]={
  {&TA_float,NULL,"axis_length"," in view units","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::axis_length))),0,NULL,0},
  {&TA_float,NULL,"start_tick"," first tick mark here","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::start_tick))),0,NULL,0},
  {&TA_float,NULL,"tick_incr"," increment for tick marks","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::tick_incr))),0,NULL,0},
  {&TA_int,NULL,"act_n_ticks"," actual number of ticks","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::act_n_ticks))),0,NULL,0},
  {&TA_double,NULL,"units"," order of the units displayed (i.e. divide by this)","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::units))),0,NULL,0},
  {&TA_float,NULL,"range_scale"," re-scaling of range over actual based on zooming","","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::range_scale))),0,NULL,0},
  {&TA_float,NULL,"min_percent"," percent of new (zoomed) range above min","","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::min_percent))),0,NULL,0},
  {&TA_float,NULL,"max_percent"," percent of new (zoomed) range below max","","",
    *((ta_memb_ptr*)&(TA_AxisView_MbrOff=(int AxisView::*)(&AxisView::max_percent))),0,NULL,0},
  NULL};
static MethodArgs_data TA_AxisView_New_MethArgs[]={
  {&TA_AxisSpec_ptr,NULL,"axis_spec",""},
  NULL};
static MethodArgs_data TA_AxisView_DataToPoint_MethArgs[]={
  {&TA_float,NULL,"data",""},
  {&TA_float_ref,NULL,"pt",""},
  NULL};
static MethodArgs_data TA_AxisView_InitUpdateAxis_MethArgs[]={
  {&TA_bool,NULL,"init",""},
  NULL};
static MethodDef_data TA_AxisView_MethodDef[]={
  {&TA_AxisView_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    1,1,-1,1,(ta_void_fun)(AxisView::New),cssElCFun_AxisView_New_stub,TA_AxisView_New_MethArgs},
  {NULL,"::Axis","axis"," determined in Render_pre, based on axis_spec.spec","","",
    0,0,-1,0,NULL,cssElCFun_AxisView_axis_stub,NULL},
  {&TA_AxisSpec_ptr,NULL,"axis_spec","","","",
    0,0,-1,0,NULL,cssElCFun_AxisView_axis_spec_stub,NULL},
  {&TA_void,NULL,"ComputeTickIncr","","","",
    0,0,-1,0,NULL,cssElCFun_AxisView_ComputeTickIncr_stub,NULL},
  {&TA_void,NULL,"DataToPoint"," converts a data value to its corresponding graphical coord (relative to origin)","","",
    0,2,-1,0,NULL,cssElCFun_AxisView_DataToPoint_stub,TA_AxisView_DataToPoint_MethArgs},
  {&TA_bool,NULL,"InitUpdateAxis"," checks if needs update, updates and returns true if so -- only called for Y axes","","",
    0,1,-1,0,NULL,cssElCFun_AxisView_InitUpdateAxis_stub,TA_AxisView_InitUpdateAxis_MethArgs},
  {&TA_float,NULL,"GetMin"," get effective min value (includes min_percent)","","",
    0,0,-1,0,NULL,cssElCFun_AxisView_GetMin_stub,NULL},
  {&TA_float,NULL,"GetMax"," get effective max value (includes max_percent)","","",
    0,0,-1,0,NULL,cssElCFun_AxisView_GetMax_stub,NULL},
  {&TA_float,NULL,"GetRange","","","",
    0,0,-1,0,NULL,cssElCFun_AxisView_GetRange_stub,NULL},
  {&TA_void,NULL,"UpdateAxis"," action of Render_impl and ReInit_impl-- can also be called to redraw axis","","",
    0,0,-1,0,NULL,cssElCFun_AxisView_UpdateAxis_stub,NULL},
  NULL};
static int GraphLine::* TA_GraphLine_MbrOff;
static MemberDef_data TA_GraphLine_MemberDef[]={
  {&TA_AxisView_ptr,NULL,"x_axis"," ","READ_ONLY SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphLine_MbrOff=(int GraphLine::*)(&GraphLine::x_axis))),0,NULL,0},
  {&TA_AxisView_ptr,NULL,"y_axis"," ","READ_ONLY SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphLine_MbrOff=(int GraphLine::*)(&GraphLine::y_axis))),0,NULL,0},
  {&TA_AxisView_ptr,NULL,"z_axis"," if 3D","READ_ONLY SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphLine_MbrOff=(int GraphLine::*)(&GraphLine::z_axis))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GraphLine_New_MethArgs[]={
  {&TA_GraphColSpec_ptr,NULL,"data",""},
  NULL};
static MethodArgs_data TA_GraphLine_DataToPoint_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"data",""},
  {&TA_iVec3f_ref,NULL,"pt",""},
  NULL};
static MethodArgs_data TA_GraphLine_GetValueColor_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_GraphLine_GetTraceColor_MethArgs[]={
  {&TA_int,NULL,"trace",""},
  NULL};
static MethodDef_data TA_GraphLine_MethodDef[]={
  {&TA_GraphLine_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    1,1,-1,1,(ta_void_fun)(GraphLine::New),cssElCFun_GraphLine_New_stub,TA_GraphLine_New_MethArgs},
  {&TA_XAxisSpec_ptr,NULL,"x_axis_spec"," our y axis","","",
    0,0,-1,0,NULL,cssElCFun_GraphLine_x_axis_spec_stub,NULL},
  {&TA_YAxisSpec_ptr,NULL,"y_axis_spec"," our y axis","","",
    0,0,-1,0,NULL,cssElCFun_GraphLine_y_axis_spec_stub,NULL},
  {&TA_ZAxisSpec_ptr,NULL,"z_axis_spec"," our z axis (3D only)","","",
    0,0,-1,0,NULL,cssElCFun_GraphLine_z_axis_spec_stub,NULL},
  {&TA_GraphColSpec_ptr,NULL,"col_spec","","","",
    0,0,-1,0,NULL,cssElCFun_GraphLine_col_spec_stub,NULL},
  {&TA_GraphSpec_ptr,NULL,"graph_spec","","","",
    0,0,-1,0,NULL,cssElCFun_GraphLine_graph_spec_stub,NULL},
  {&TA_void,NULL,"DataToPoint"," convert from a data values to graph coords","","",
    0,2,-1,0,NULL,cssElCFun_GraphLine_DataToPoint_stub,TA_GraphLine_DataToPoint_MethArgs},
  {&TA_void,NULL,"Redraw"," called when axes have changed, or at beginning -- redraws everything in viewrange","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_GraphLine_Redraw_stub,NULL},
  {&TA_bool,NULL,"DrawLastPoint"," draw last point added to line: returns true if needs full redraw (ex. new trace detected)","","",
    0,0,-1,0,NULL,cssElCFun_GraphLine_DrawLastPoint_stub,NULL},
  {&TA_const_iColor_ptr,NULL,"GetValueColor"," get color from value","","",
    0,1,-1,0,NULL,cssElCFun_GraphLine_GetValueColor_stub,TA_GraphLine_GetValueColor_MethArgs},
  {&TA_const_iColor_ptr,NULL,"GetTraceColor"," get color from trace count","","",
    0,1,-1,0,NULL,cssElCFun_GraphLine_GetTraceColor_stub,TA_GraphLine_GetTraceColor_MethArgs},
  NULL};
static int GraphView::* TA_GraphView_MbrOff;
static MemberDef_data TA_GraphView_MemberDef[]={
  {&TA_AxisView_ptr,NULL,"x_axis"," the x axis","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphView_MbrOff=(int GraphView::*)(&GraphView::x_axis))),0,NULL,0},
  {&TA_AxisView_ptr,NULL,"z_axis"," the z axis (3D only)","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphView_MbrOff=(int GraphView::*)(&GraphView::z_axis))),0,NULL,0},
  {&TA_bool,NULL,"nodisp_x_axis"," do not display x axis","","",
    *((ta_memb_ptr*)&(TA_GraphView_MbrOff=(int GraphView::*)(&GraphView::nodisp_x_axis))),0,NULL,0},
  {&TA_T3DataView_PtrList,NULL,"y_axes"," the y axis(s) -- note: autoset when added to children","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphView_MbrOff=(int GraphView::*)(&GraphView::y_axes))),0,NULL,0},
  {&TA_T3DataView_PtrList,NULL,"lines"," the lines -- note: autoset when added to children","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphView_MbrOff=(int GraphView::*)(&GraphView::lines))),0,NULL,0},
  {&TA_iVec3f,NULL,"origin"," origin of lines, in our container's units","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphView_MbrOff=(int GraphView::*)(&GraphView::origin))),0,NULL,0},
  {&TA_FloatTDCoord,NULL,"geom"," size, in Graph units","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphView_MbrOff=(int GraphView::*)(&GraphView::geom))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GraphView_New_MethArgs[]={
  {&TA_GraphletSpec_ptr,NULL,"data",""},
  NULL};
static MethodDef_data TA_GraphView_MethodDef[]={
  {&TA_GraphView_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    1,1,-1,1,(ta_void_fun)(GraphView::New),cssElCFun_GraphView_New_stub,TA_GraphView_New_MethArgs},
  {&TA_GraphletSpec_ptr,NULL,"graphlet","","","",
    0,0,-1,0,NULL,cssElCFun_GraphView_graphlet_stub,NULL},
  {&TA_GraphSpec_ptr,NULL,"graph_spec","","","",
    0,0,-1,0,NULL,cssElCFun_GraphView_graph_spec_stub,NULL},
  {&TA_void,NULL,"Redraw"," ","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_GraphView_Redraw_stub,NULL},
  NULL};
static int GraphViews::* TA_GraphViews_MbrOff;
static MemberDef_data TA_GraphViews_MemberDef[]={
  {&TA_PosTwoDCoord,NULL,"eff_layout"," effective arrangement of graphs for separate graphs","","",
    *((ta_memb_ptr*)&(TA_GraphViews_MbrOff=(int GraphViews::*)(&GraphViews::eff_layout))),0,NULL,0},
  {&TA_FloatTDCoord,NULL,"geom"," size, in PDP units","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_GraphViews_MbrOff=(int GraphViews::*)(&GraphViews::geom))),0,NULL,0},
  NULL};
static MethodArgs_data TA_GraphViews_New_MethArgs[]={
  {&TA_GraphSpec_ptr,NULL,"data",""},
  NULL};
static MethodDef_data TA_GraphViews_MethodDef[]={
  {&TA_GraphViews_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    1,1,-1,1,(ta_void_fun)(GraphViews::New),cssElCFun_GraphViews_New_stub,TA_GraphViews_New_MethArgs},
  {&TA_GraphSpec_ptr,NULL,"graph_spec","","","",
    0,0,-1,0,NULL,cssElCFun_GraphViews_graph_spec_stub,NULL},
  {&TA_T3CBar_ptr,NULL,"bar_so"," note: only created if needed","","",
    0,0,-1,0,NULL,cssElCFun_GraphViews_bar_so_stub,NULL},
  {&TA_bool,NULL,"AddLastPoint"," call to just add most recent data point; returns true if redraw is needed instead","","",
    0,0,-1,0,NULL,cssElCFun_GraphViews_AddLastPoint_stub,NULL},
  {&TA_void,NULL,"Redraw"," call to completely redraw all lines/axes in the viewspec.viewrange","","",
    0,0,-1,0,NULL,cssElCFun_GraphViews_Redraw_stub,NULL},
  NULL};

// Init Function


static bool ta_Init_tamisc_done = false;

void ta_Init_tamisc() {
  TypeDef* sbt;

  if(ta_Init_tamisc_done) return;
  ta_Init_tamisc_done = true;

  ta_Init_ta();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_FontSpec);
    TAI_FontSpec = new FontSpec;
    TA_FontSpec.AddParFormal(&TA_class);
    TA_FontSpec.AddParCache(&TA_taBase);
    TA_FontSpec.AddClassPar(&TA_taOBase,(int)((unsigned long)((taOBase*)TAI_FontSpec)-(unsigned long)TAI_FontSpec), &TA_iFont,(int)((unsigned long)((iFont*)TAI_FontSpec)-(unsigned long)TAI_FontSpec));
    tac_AddMembers(TA_FontSpec,TA_FontSpec_MemberDef);
    tac_AddMethods(TA_FontSpec,TA_FontSpec_MethodDef);
  taMisc::types.Add(&TA_const_FontSpec);
    TA_const_FontSpec.AddParents(&TA_const, &TA_FontSpec);
  taMisc::types.Add(&TA_ViewLabel);
    TAI_ViewLabel = new ViewLabel;
    TA_ViewLabel.AddParFormal(&TA_class);
    TA_ViewLabel.AddParCache(&TA_taBase);
    TA_ViewLabel.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ViewLabel,TA_ViewLabel_MemberDef);
    tac_AddMethods(TA_ViewLabel,TA_ViewLabel_MethodDef);
  taMisc::types.Add(&TA_const_FontSpec_ref);
    TA_const_FontSpec_ref.AddParents(&TA_const_FontSpec);
  taMisc::types.Add(&TA_taList_ViewLabel_);
    TAI_taList_ViewLabel_ = new taList<ViewLabel>;
    TA_taList_ViewLabel_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_ViewLabel_.AddParCache(&TA_taBase);
    TA_taList_ViewLabel_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_ViewLabel_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_ViewLabel_.sub_types.FindName("const_taBase"));
    TA_taList_ViewLabel_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_ViewLabel_.sub_types.Add(sbt);
    sbt = new TypeDef("ViewLabel_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ViewLabel);
    TA_taList_ViewLabel_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_ViewLabel_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_ViewLabel__Orientation);
    tac_AddMethods(TA_taList_ViewLabel_,TA_taList_ViewLabel__MethodDef);
  taMisc::types.Add(&TA_const_ViewLabel);
    TA_const_ViewLabel.AddParents(&TA_const, &TA_ViewLabel);
  taMisc::types.Add(&TA_const_ViewLabel_ref);
    TA_const_ViewLabel_ref.AddParents(&TA_const_ViewLabel);
  taMisc::types.Add(&TA_ViewLabel_List);
    TAI_ViewLabel_List = new ViewLabel_List;
    TA_ViewLabel_List.AddParFormal(&TA_class);
    TA_ViewLabel_List.AddParCache(&TA_taBase);
    TA_ViewLabel_List.AddClassPar(&TA_taList_ViewLabel_,0);
  taMisc::types.Add(&TA_const_Xform_ref);
  taMisc::types.Add(&TA_const_ViewLabel_List);
    TA_const_ViewLabel_List.AddParents(&TA_const, &TA_ViewLabel_List);
  taMisc::types.Add(&TA_taList_Xform_);
    TAI_taList_Xform_ = new taList<Xform>;
    TA_taList_Xform_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_Xform_.AddParCache(&TA_taBase);
    TA_taList_Xform_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_Xform_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_Xform_.sub_types.FindName("const_taBase"));
    TA_taList_Xform_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_Xform_.sub_types.Add(sbt);
    sbt = new TypeDef("Xform_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Xform);
    TA_taList_Xform_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_Xform_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_Xform__Orientation);
    tac_AddMethods(TA_taList_Xform_,TA_taList_Xform__MethodDef);
  taMisc::types.Add(&TA_const_ViewLabel_List_ref);
    TA_const_ViewLabel_List_ref.AddParents(&TA_const_ViewLabel_List);
  taMisc::types.Add(&TA_Xform_List);
    TAI_Xform_List = new Xform_List;
    TA_Xform_List.AddParFormal(&TA_class);
    TA_Xform_List.AddParCache(&TA_taBase);
    TA_Xform_List.AddClassPar(&TA_taList_Xform_,0);
  taMisc::types.Add(&TA_const_Xform_List);
    TA_const_Xform_List.AddParents(&TA_const, &TA_Xform_List);
  taMisc::types.Add(&TA_RndSeed);
    TAI_RndSeed = new RndSeed;
    TA_RndSeed.AddParFormal(&TA_class);
    TA_RndSeed.AddParCache(&TA_taBase);
    TA_RndSeed.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_RndSeed,TA_RndSeed_MemberDef);
    tac_AddMethods(TA_RndSeed,TA_RndSeed_MethodDef);
  taMisc::types.Add(&TA_const_Xform_List_ref);
    TA_const_Xform_List_ref.AddParents(&TA_const_Xform_List);
  taMisc::types.Add(&TA_const_RndSeed);
    TA_const_RndSeed.AddParents(&TA_const, &TA_RndSeed);
  taMisc::types.Add(&TA_const_RndSeed_ref);
    TA_const_RndSeed_ref.AddParents(&TA_const_RndSeed);
  taMisc::types.Add(&TA_Random);
    TAI_Random = new Random;
    TA_Random.AddParFormal(&TA_class);
    TA_Random.AddParCache(&TA_taBase);
    TA_Random.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_Random, "Type", "", "", "", "", TA_Random_Type);
    tac_AddMembers(TA_Random,TA_Random_MemberDef);
    tac_AddMethods(TA_Random,TA_Random_MethodDef);
  taMisc::types.Add(&TA_const_Random);
    TA_const_Random.AddParents(&TA_const, &TA_Random);
  taMisc::types.Add(&TA_const_Random_ref);
    TA_const_Random_ref.AddParents(&TA_const_Random);
  taMisc::types.Add(&TA_TimeUsed);
    TAI_TimeUsed = new TimeUsed;
    TA_TimeUsed.AddParFormal(&TA_class);
    TA_TimeUsed.AddParCache(&TA_taBase);
    TA_TimeUsed.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_TimeUsed,TA_TimeUsed_MemberDef);
    tac_AddMethods(TA_TimeUsed,TA_TimeUsed_MethodDef);
  taMisc::types.Add(&TA_TwoDCoord);
    TAI_TwoDCoord = new TwoDCoord;
    TA_TwoDCoord.AddParFormal(&TA_class);
    TA_TwoDCoord.AddParCache(&TA_taBase);
    TA_TwoDCoord.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_TwoDCoord,TA_TwoDCoord_MemberDef);
    tac_AddMethods(TA_TwoDCoord,TA_TwoDCoord_MethodDef);
  taMisc::types.Add(&TA_const_TimeUsed);
    TA_const_TimeUsed.AddParents(&TA_const, &TA_TimeUsed);
  taMisc::types.Add(&TA_PosTwoDCoord);
    TAI_PosTwoDCoord = new PosTwoDCoord;
    TA_PosTwoDCoord.AddParFormal(&TA_class);
    TA_PosTwoDCoord.AddParCache(&TA_taBase);
    TA_PosTwoDCoord.AddClassPar(&TA_TwoDCoord,0);
  taMisc::types.Add(&TA_const_TimeUsed_ref);
    TA_const_TimeUsed_ref.AddParents(&TA_const_TimeUsed);
  taMisc::types.Add(&TA_TDCoord);
    TAI_TDCoord = new TDCoord;
    TA_TDCoord.AddParFormal(&TA_class);
    TA_TDCoord.AddParCache(&TA_taBase);
    TA_TDCoord.AddClassPar(&TA_TwoDCoord,0);
    tac_AddMembers(TA_TDCoord,TA_TDCoord_MemberDef);
    tac_AddMethods(TA_TDCoord,TA_TDCoord_MethodDef);
  taMisc::types.Add(&TA_PosTDCoord);
    TAI_PosTDCoord = new PosTDCoord;
    TA_PosTDCoord.AddParFormal(&TA_class);
    TA_PosTDCoord.AddParCache(&TA_taBase);
    TA_PosTDCoord.AddClassPar(&TA_TDCoord,0);
  taMisc::types.Add(&TA_FloatTwoDCoord);
    TAI_FloatTwoDCoord = new FloatTwoDCoord;
    TA_FloatTwoDCoord.AddParFormal(&TA_class);
    TA_FloatTwoDCoord.AddParCache(&TA_taBase);
    TA_FloatTwoDCoord.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_FloatTwoDCoord,TA_FloatTwoDCoord_MemberDef);
    tac_AddMethods(TA_FloatTwoDCoord,TA_FloatTwoDCoord_MethodDef);
  taMisc::types.Add(&TA_FloatTDCoord);
    TAI_FloatTDCoord = new FloatTDCoord;
    TA_FloatTDCoord.AddParFormal(&TA_class);
    TA_FloatTDCoord.AddParCache(&TA_taBase);
    TA_FloatTDCoord.AddClassPar(&TA_FloatTwoDCoord,0);
    tac_AddMembers(TA_FloatTDCoord,TA_FloatTDCoord_MemberDef);
    tac_AddMethods(TA_FloatTDCoord,TA_FloatTDCoord_MethodDef);
  taMisc::types.Add(&TA_const_TwoDCoord);
    TA_const_TwoDCoord.AddParents(&TA_const, &TA_TwoDCoord);
  taMisc::types.Add(&TA_const_TwoDCoord_ref);
    TA_const_TwoDCoord_ref.AddParents(&TA_const_TwoDCoord);
  taMisc::types.Add(&TA_const_FloatTwoDCoord);
    TA_const_FloatTwoDCoord.AddParents(&TA_const, &TA_FloatTwoDCoord);
  taMisc::types.Add(&TA_const_FloatTwoDCoord_ref);
    TA_const_FloatTwoDCoord_ref.AddParents(&TA_const_FloatTwoDCoord);
  taMisc::types.Add(&TA_TwoDCoord_ref);
    TA_TwoDCoord_ref.AddParents(&TA_TwoDCoord);
  taMisc::types.Add(&TA_const_PosTwoDCoord);
    TA_const_PosTwoDCoord.AddParents(&TA_const, &TA_PosTwoDCoord);
  taMisc::types.Add(&TA_const_PosTwoDCoord_ref);
    TA_const_PosTwoDCoord_ref.AddParents(&TA_const_PosTwoDCoord);
  taMisc::types.Add(&TA_PosTwoDCoord_ref);
    TA_PosTwoDCoord_ref.AddParents(&TA_PosTwoDCoord);
  taMisc::types.Add(&TA_const_TDCoord);
    TA_const_TDCoord.AddParents(&TA_const, &TA_TDCoord);
  taMisc::types.Add(&TA_const_TDCoord_ref);
    TA_const_TDCoord_ref.AddParents(&TA_const_TDCoord);
  taMisc::types.Add(&TA_const_FloatTDCoord);
    TA_const_FloatTDCoord.AddParents(&TA_const, &TA_FloatTDCoord);
  taMisc::types.Add(&TA_const_FloatTDCoord_ref);
    TA_const_FloatTDCoord_ref.AddParents(&TA_const_FloatTDCoord);
  taMisc::types.Add(&TA_TDCoord_ref);
    TA_TDCoord_ref.AddParents(&TA_TDCoord);
  taMisc::types.Add(&TA_const_PosTDCoord);
    TA_const_PosTDCoord.AddParents(&TA_const, &TA_PosTDCoord);
  taMisc::types.Add(&TA_const_PosTDCoord_ref);
    TA_const_PosTDCoord_ref.AddParents(&TA_const_PosTDCoord);
  taMisc::types.Add(&TA_PosTDCoord_ref);
    TA_PosTDCoord_ref.AddParents(&TA_PosTDCoord);
  taMisc::types.Add(&TA_FloatTwoDCoord_ref);
    TA_FloatTwoDCoord_ref.AddParents(&TA_FloatTwoDCoord);
  taMisc::types.Add(&TA_FloatTDCoord_ref);
    TA_FloatTDCoord_ref.AddParents(&TA_FloatTDCoord);
  taMisc::types.Add(&TA_FloatRotation);
    TAI_FloatRotation = new FloatRotation;
    TA_FloatRotation.AddParFormal(&TA_class);
    TA_FloatRotation.AddParCache(&TA_taBase);
    TA_FloatRotation.AddClassPar(&TA_FloatTDCoord,0);
    tac_AddMembers(TA_FloatRotation,TA_FloatRotation_MemberDef);
    tac_AddMethods(TA_FloatRotation,TA_FloatRotation_MethodDef);
  taMisc::types.Add(&TA_const_FloatRotation);
    TA_const_FloatRotation.AddParents(&TA_const, &TA_FloatRotation);
  taMisc::types.Add(&TA_FloatTransform);
    TAI_FloatTransform = new FloatTransform;
    TA_FloatTransform.AddParFormal(&TA_class);
    TA_FloatTransform.AddParCache(&TA_taBase);
    TA_FloatTransform.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_FloatTransform,TA_FloatTransform_MemberDef);
  taMisc::types.Add(&TA_const_FloatRotation_ref);
    TA_const_FloatRotation_ref.AddParents(&TA_const_FloatRotation);
  taMisc::types.Add(&TA_const_FloatTransform);
    TA_const_FloatTransform.AddParents(&TA_const, &TA_FloatTransform);
  taMisc::types.Add(&TA_const_FloatTransform_ref);
    TA_const_FloatTransform_ref.AddParents(&TA_const_FloatTransform);
  taMisc::types.Add(&TA_ValIdx);
    TAI_ValIdx = new ValIdx;
    TA_ValIdx.AddParFormal(&TA_class);
    TA_ValIdx.AddParCache(&TA_taBase);
    TA_ValIdx.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_ValIdx,TA_ValIdx_MemberDef);
    tac_AddMethods(TA_ValIdx,TA_ValIdx_MethodDef);
  taMisc::types.Add(&TA_taArray_ValIdx_);
    TA_taArray_ValIdx_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_ValIdx_.AddParCache(&TA_taBase);
    TA_taArray_ValIdx_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("ValIdx_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ValIdx);
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ValIdx", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_ValIdx);
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ValIdx_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_ValIdx_.sub_types.FindName("const_ValIdx"));
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    sbt = new TypeDef("ValIdx_ref", 1, 0, 1);
    sbt->AddParents(&TA_ValIdx);
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    tac_AddEnum(TA_taArray_ValIdx_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_ValIdx__Orientation);
    tac_AddMembers(TA_taArray_ValIdx_,TA_taArray_ValIdx__MemberDef);
    tac_AddMethods(TA_taArray_ValIdx_,TA_taArray_ValIdx__MethodDef);
  taMisc::types.Add(&TA_const_ValIdx);
    TA_const_ValIdx.AddParents(&TA_const, &TA_ValIdx);
  taMisc::types.Add(&TA_const_ValIdx_ref);
    TA_const_ValIdx_ref.AddParents(&TA_const_ValIdx);
  taMisc::types.Add(&TA_ValIdx_ref);
    TA_ValIdx_ref.AddParents(&TA_ValIdx);
  taMisc::types.Add(&TA_ValIdx_Array);
    TA_ValIdx_Array.AddParFormal(&TA_class);
    TA_ValIdx_Array.AddParCache(&TA_taBase);
    TA_ValIdx_Array.AddClassPar(&TA_taArray_ValIdx_,0);
    tac_AddMembers(TA_ValIdx_Array,TA_ValIdx_Array_MemberDef);
  taMisc::types.Add(&TA_const_ValIdx_Array);
    TA_const_ValIdx_Array.AddParents(&TA_const, &TA_ValIdx_Array);
  taMisc::types.Add(&TA_CountParam);
    TAI_CountParam = new CountParam;
    TA_CountParam.AddParFormal(&TA_class);
    TA_CountParam.AddParCache(&TA_taBase);
    TA_CountParam.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_CountParam, "Relation", "", "", "", "", TA_CountParam_Relation);
    tac_AddMembers(TA_CountParam,TA_CountParam_MemberDef);
    tac_AddMethods(TA_CountParam,TA_CountParam_MethodDef);
  taMisc::types.Add(&TA_const_ValIdx_Array_ref);
    TA_const_ValIdx_Array_ref.AddParents(&TA_const_ValIdx_Array);
  taMisc::types.Add(&TA_const_CountParam);
    TA_const_CountParam.AddParents(&TA_const, &TA_CountParam);
  taMisc::types.Add(&TA_const_CountParam_ref);
    TA_const_CountParam_ref.AddParents(&TA_const_CountParam);
  taMisc::types.Add(&TA_Aggregate);
    TAI_Aggregate = new Aggregate;
    TA_Aggregate.AddParFormal(&TA_class);
    TA_Aggregate.AddParCache(&TA_taBase);
    TA_Aggregate.AddClassPar(&TA_taOBase,0);
    tac_AddEnum(TA_Aggregate, "Operator", " Aggregate Operators", "", "", "", TA_Aggregate_Operator);
    tac_AddMembers(TA_Aggregate,TA_Aggregate_MemberDef);
    tac_AddMethods(TA_Aggregate,TA_Aggregate_MethodDef);
  taMisc::types.Add(&TA_const_Aggregate);
    TA_const_Aggregate.AddParents(&TA_const, &TA_Aggregate);
  taMisc::types.Add(&TA_SimpleMathSpec);
    TAI_SimpleMathSpec = new SimpleMathSpec;
    TA_SimpleMathSpec.AddParFormal(&TA_class);
    TA_SimpleMathSpec.AddParCache(&TA_taBase);
    TA_SimpleMathSpec.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_SimpleMathSpec, "MathOpr", "", "", "", "", TA_SimpleMathSpec_MathOpr);
    tac_AddMembers(TA_SimpleMathSpec,TA_SimpleMathSpec_MemberDef);
    tac_AddMethods(TA_SimpleMathSpec,TA_SimpleMathSpec_MethodDef);
  taMisc::types.Add(&TA_const_Aggregate_ref);
    TA_const_Aggregate_ref.AddParents(&TA_const_Aggregate);
  taMisc::types.Add(&TA_const_SimpleMathSpec);
    TA_const_SimpleMathSpec.AddParents(&TA_const, &TA_SimpleMathSpec);
  taMisc::types.Add(&TA_const_SimpleMathSpec_ref);
    TA_const_SimpleMathSpec_ref.AddParents(&TA_const_SimpleMathSpec);
  taMisc::types.Add(&TA_MinMax);
    TAI_MinMax = new MinMax;
    TA_MinMax.AddParFormal(&TA_class);
    TA_MinMax.AddParCache(&TA_taBase);
    TA_MinMax.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_MinMax,TA_MinMax_MemberDef);
    tac_AddMethods(TA_MinMax,TA_MinMax_MethodDef);
  taMisc::types.Add(&TA_MinMax_ref);
    TA_MinMax_ref.AddParents(&TA_MinMax);
  taMisc::types.Add(&TA_const_MinMax);
    TA_const_MinMax.AddParents(&TA_const, &TA_MinMax);
  taMisc::types.Add(&TA_const_MinMax_ref);
    TA_const_MinMax_ref.AddParents(&TA_const_MinMax);
  taMisc::types.Add(&TA_MinMaxRange);
    TAI_MinMaxRange = new MinMaxRange;
    TA_MinMaxRange.AddParFormal(&TA_class);
    TA_MinMaxRange.AddParCache(&TA_taBase);
    TA_MinMaxRange.AddClassPar(&TA_MinMax,0);
    tac_AddMembers(TA_MinMaxRange,TA_MinMaxRange_MemberDef);
  taMisc::types.Add(&TA_const_MinMaxRange);
    TA_const_MinMaxRange.AddParents(&TA_const, &TA_MinMaxRange);
  taMisc::types.Add(&TA_const_MinMaxRange_ref);
    TA_const_MinMaxRange_ref.AddParents(&TA_const_MinMaxRange);
  taMisc::types.Add(&TA_FixedMinMax);
    TAI_FixedMinMax = new FixedMinMax;
    TA_FixedMinMax.AddParFormal(&TA_class);
    TA_FixedMinMax.AddParCache(&TA_taBase);
    TA_FixedMinMax.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_FixedMinMax,TA_FixedMinMax_MemberDef);
    tac_AddMethods(TA_FixedMinMax,TA_FixedMinMax_MethodDef);
  taMisc::types.Add(&TA_const_FixedMinMax);
    TA_const_FixedMinMax.AddParents(&TA_const, &TA_FixedMinMax);
  taMisc::types.Add(&TA_const_FixedMinMax_ref);
    TA_const_FixedMinMax_ref.AddParents(&TA_const_FixedMinMax);
  taMisc::types.Add(&TA_Modulo);
    TAI_Modulo = new Modulo;
    TA_Modulo.AddParFormal(&TA_class);
    TA_Modulo.AddParCache(&TA_taBase);
    TA_Modulo.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_Modulo,TA_Modulo_MemberDef);
  taMisc::types.Add(&TA_const_Modulo);
    TA_const_Modulo.AddParents(&TA_const, &TA_Modulo);
  taMisc::types.Add(&TA_const_Modulo_ref);
    TA_const_Modulo_ref.AddParents(&TA_const_Modulo);
  taMisc::types.Add(&TA_MinMaxInt);
    TAI_MinMaxInt = new MinMaxInt;
    TA_MinMaxInt.AddParFormal(&TA_class);
    TA_MinMaxInt.AddParCache(&TA_taBase);
    TA_MinMaxInt.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_MinMaxInt,TA_MinMaxInt_MemberDef);
    tac_AddMethods(TA_MinMaxInt,TA_MinMaxInt_MethodDef);
  taMisc::types.Add(&TA_MinMaxInt_ref);
    TA_MinMaxInt_ref.AddParents(&TA_MinMaxInt);
  taMisc::types.Add(&TA_const_MinMaxInt);
    TA_const_MinMaxInt.AddParents(&TA_const, &TA_MinMaxInt);
  taMisc::types.Add(&TA_const_MinMaxInt_ref);
    TA_const_MinMaxInt_ref.AddParents(&TA_const_MinMaxInt);
  taMisc::types.Add(&TA_IDataSource);
    TA_IDataSource.AddParFormal(&TA_class);
    tac_AddMethods(TA_IDataSource,TA_IDataSource_MethodDef);
  taMisc::types.Add(&TA_ISequencable);
    TA_ISequencable.AddParFormal(&TA_class);
    tac_AddMethods(TA_ISequencable,TA_ISequencable_MethodDef);
  taMisc::types.Add(&TA_IDataSink);
    TA_IDataSink.AddParFormal(&TA_class);
    tac_AddMethods(TA_IDataSink,TA_IDataSink_MethodDef);
  taMisc::types.Add(&TA_DataTransferMode);
    TAI_DataTransferMode = new DataTransferMode;
    TA_DataTransferMode.AddParFormal(&TA_enum);
    tac_ThisEnum(TA_DataTransferMode, TA_DataTransferMode_EnumDef);
  taMisc::types.Add(&TA_ptaMatrix_impl);
    TAI_ptaMatrix_impl = new taMatrix_impl*;
    TA_ptaMatrix_impl.AddParents(&TA_taMatrix_impl_ptr);
  taMisc::types.Add(&TA_ISequencable_ptr);
    TA_ISequencable_ptr.AddParents(&TA_ISequencable);
  taMisc::types.Add(&TA_ptaMatrix_impl_ref);
    TA_ptaMatrix_impl_ref.AddParents(&TA_ptaMatrix_impl);
  taMisc::types.Add(&TA_DataChannel);
    TA_DataChannel.AddParFormal(&TA_class);
    TA_DataChannel.AddParCache(&TA_taBase);
    TA_DataChannel.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_DataChannel,TA_DataChannel_MemberDef);
    tac_AddMethods(TA_DataChannel,TA_DataChannel_MethodDef);
  taMisc::types.Add(&TA_DataConnector);
    TAI_DataConnector = new DataConnector;
    TA_DataConnector.AddParFormal(&TA_class);
    TA_DataConnector.AddParCache(&TA_taBase);
    TA_DataConnector.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_DataConnector,TA_DataConnector_MemberDef);
    tac_AddMethods(TA_DataConnector,TA_DataConnector_MethodDef);
  taMisc::types.Add(&TA_SinkChannel);
    TAI_SinkChannel = new SinkChannel;
    TA_SinkChannel.AddParFormal(&TA_class);
    TA_SinkChannel.AddParCache(&TA_taBase);
    TA_SinkChannel.AddClassPar(&TA_DataChannel,0);
    tac_AddMembers(TA_SinkChannel,TA_SinkChannel_MemberDef);
    tac_AddMethods(TA_SinkChannel,TA_SinkChannel_MethodDef);
  taMisc::types.Add(&TA_SourceChannel);
    TAI_SourceChannel = new SourceChannel;
    TA_SourceChannel.AddParFormal(&TA_class);
    TA_SourceChannel.AddParCache(&TA_taBase);
    TA_SourceChannel.AddClassPar(&TA_DataChannel,0);
    tac_AddMembers(TA_SourceChannel,TA_SourceChannel_MemberDef);
    tac_AddMethods(TA_SourceChannel,TA_SourceChannel_MethodDef);
  taMisc::types.Add(&TA_SinkChannel_ptr);
    TA_SinkChannel_ptr.AddParents(&TA_SinkChannel);
  taMisc::types.Add(&TA_SequenceMaster);
    TA_SequenceMaster.AddParFormal(&TA_class);
    tac_AddMethods(TA_SequenceMaster,TA_SequenceMaster_MethodDef);
  taMisc::types.Add(&TA_SourceChannel_ptr);
    TA_SourceChannel_ptr.AddParents(&TA_SourceChannel);
  taMisc::types.Add(&TA_DataConnector_ptr);
    TA_DataConnector_ptr.AddParents(&TA_DataConnector);
  taMisc::types.Add(&TA_const_DataConnector);
    TA_const_DataConnector.AddParents(&TA_const, &TA_DataConnector);
  taMisc::types.Add(&TA_const_DataConnector_ref);
    TA_const_DataConnector_ref.AddParents(&TA_const_DataConnector);
  taMisc::types.Add(&TA_taList_DataConnector_);
    TAI_taList_DataConnector_ = new taList<DataConnector>;
    TA_taList_DataConnector_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_DataConnector_.AddParCache(&TA_taBase);
    TA_taList_DataConnector_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_DataConnector_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_DataConnector_.sub_types.FindName("const_taBase"));
    TA_taList_DataConnector_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_DataConnector_.sub_types.Add(sbt);
    sbt = new TypeDef("DataConnector_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DataConnector);
    TA_taList_DataConnector_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_DataConnector_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_DataConnector__Orientation);
    tac_AddMethods(TA_taList_DataConnector_,TA_taList_DataConnector__MethodDef);
  taMisc::types.Add(&TA_DataConnector_List);
    TAI_DataConnector_List = new DataConnector_List;
    TA_DataConnector_List.AddParFormal(&TA_class);
    TA_DataConnector_List.AddParCache(&TA_taBase);
    TA_DataConnector_List.AddClassPar(&TA_taList_DataConnector_,0);
  taMisc::types.Add(&TA_const_DataConnector_List);
    TA_const_DataConnector_List.AddParents(&TA_const, &TA_DataConnector_List);
  taMisc::types.Add(&TA_const_DataConnector_List_ref);
    TA_const_DataConnector_List_ref.AddParents(&TA_const_DataConnector_List);
  taMisc::types.Add(&TA_const_DataChannel);
    TA_const_DataChannel.AddParents(&TA_const, &TA_DataChannel);
  taMisc::types.Add(&TA_const_DataChannel_ref);
    TA_const_DataChannel_ref.AddParents(&TA_const_DataChannel);
  taMisc::types.Add(&TA_IDataSource_ptr);
    TA_IDataSource_ptr.AddParents(&TA_IDataSource);
  taMisc::types.Add(&TA_const_SourceChannel);
    TA_const_SourceChannel.AddParents(&TA_const, &TA_SourceChannel);
  taMisc::types.Add(&TA_const_SourceChannel_ref);
    TA_const_SourceChannel_ref.AddParents(&TA_const_SourceChannel);
  taMisc::types.Add(&TA_taList_SourceChannel_);
    TAI_taList_SourceChannel_ = new taList<SourceChannel>;
    TA_taList_SourceChannel_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_SourceChannel_.AddParCache(&TA_taBase);
    TA_taList_SourceChannel_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_SourceChannel_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_SourceChannel_.sub_types.FindName("const_taBase"));
    TA_taList_SourceChannel_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_SourceChannel_.sub_types.Add(sbt);
    sbt = new TypeDef("SourceChannel_ptr", 1, 1, 0);
    sbt->AddParents(&TA_SourceChannel);
    TA_taList_SourceChannel_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_SourceChannel_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_SourceChannel__Orientation);
    tac_AddMethods(TA_taList_SourceChannel_,TA_taList_SourceChannel__MethodDef);
  taMisc::types.Add(&TA_SourceChannel_List);
    TAI_SourceChannel_List = new SourceChannel_List;
    TA_SourceChannel_List.AddParFormal(&TA_class);
    TA_SourceChannel_List.AddParCache(&TA_taBase);
    TA_SourceChannel_List.AddClassPar(&TA_taList_SourceChannel_,0);
    tac_AddMembers(TA_SourceChannel_List,TA_SourceChannel_List_MemberDef);
  taMisc::types.Add(&TA_const_SourceChannel_List);
    TA_const_SourceChannel_List.AddParents(&TA_const, &TA_SourceChannel_List);
  taMisc::types.Add(&TA_SourceChannel_List_ref);
    TA_SourceChannel_List_ref.AddParents(&TA_SourceChannel_List);
  taMisc::types.Add(&TA_const_SourceChannel_List_ref);
    TA_const_SourceChannel_List_ref.AddParents(&TA_const_SourceChannel_List);
  taMisc::types.Add(&TA_IDataSink_ptr);
    TA_IDataSink_ptr.AddParents(&TA_IDataSink);
  taMisc::types.Add(&TA_const_SinkChannel);
    TA_const_SinkChannel.AddParents(&TA_const, &TA_SinkChannel);
  taMisc::types.Add(&TA_const_SinkChannel_ref);
    TA_const_SinkChannel_ref.AddParents(&TA_const_SinkChannel);
  taMisc::types.Add(&TA_taList_SinkChannel_);
    TAI_taList_SinkChannel_ = new taList<SinkChannel>;
    TA_taList_SinkChannel_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_SinkChannel_.AddParCache(&TA_taBase);
    TA_taList_SinkChannel_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_SinkChannel_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_SinkChannel_.sub_types.FindName("const_taBase"));
    TA_taList_SinkChannel_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_SinkChannel_.sub_types.Add(sbt);
    sbt = new TypeDef("SinkChannel_ptr", 1, 1, 0);
    sbt->AddParents(&TA_SinkChannel);
    TA_taList_SinkChannel_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_SinkChannel_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_SinkChannel__Orientation);
    tac_AddMethods(TA_taList_SinkChannel_,TA_taList_SinkChannel__MethodDef);
  taMisc::types.Add(&TA_SinkChannel_List);
    TAI_SinkChannel_List = new SinkChannel_List;
    TA_SinkChannel_List.AddParFormal(&TA_class);
    TA_SinkChannel_List.AddParCache(&TA_taBase);
    TA_SinkChannel_List.AddClassPar(&TA_taList_SinkChannel_,0);
    tac_AddMembers(TA_SinkChannel_List,TA_SinkChannel_List_MemberDef);
  taMisc::types.Add(&TA_const_SinkChannel_List);
    TA_const_SinkChannel_List.AddParents(&TA_const, &TA_SinkChannel_List);
  taMisc::types.Add(&TA_SinkChannel_List_ref);
    TA_SinkChannel_List_ref.AddParents(&TA_SinkChannel_List);
  taMisc::types.Add(&TA_const_SinkChannel_List_ref);
    TA_const_SinkChannel_List_ref.AddParents(&TA_const_SinkChannel_List);
  taMisc::types.Add(&TA_SequenceMaster_ref);
    TA_SequenceMaster_ref.AddParents(&TA_SequenceMaster);
  taMisc::types.Add(&TA_int64_t_ref);
  taMisc::types.Add(&TA_int64_t_ptr);
  taMisc::types.Add(&TA_const_SequenceMaster);
    TA_const_SequenceMaster.AddParents(&TA_const, &TA_SequenceMaster);
  taMisc::types.Add(&TA_const_SequenceMaster_ref);
    TA_const_SequenceMaster_ref.AddParents(&TA_const_SequenceMaster);
  taMisc::types.Add(&TA_RGBA);
    TAI_RGBA = new RGBA;
    TA_RGBA.AddParFormal(&TA_class);
    TA_RGBA.AddParCache(&TA_taBase);
    TA_RGBA.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_RGBA,TA_RGBA_MemberDef);
    tac_AddMethods(TA_RGBA,TA_RGBA_MethodDef);
  taMisc::types.Add(&TA_TAColor);
    TAI_TAColor = new TAColor;
    TA_TAColor.AddParFormal(&TA_class);
    TA_TAColor.AddParCache(&TA_taBase);
    TA_TAColor.AddClassPar(&TA_taBase,0);
    tac_AddMethods(TA_TAColor,TA_TAColor_MethodDef);
  taMisc::types.Add(&TA_ColorScaleSpec);
    TAI_ColorScaleSpec = new ColorScaleSpec;
    TA_ColorScaleSpec.AddParFormal(&TA_class);
    TA_ColorScaleSpec.AddParCache(&TA_taBase);
    TA_ColorScaleSpec.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ColorScaleSpec,TA_ColorScaleSpec_MemberDef);
    tac_AddMethods(TA_ColorScaleSpec,TA_ColorScaleSpec_MethodDef);
  taMisc::types.Add(&TA_ScaleRange);
    TAI_ScaleRange = new ScaleRange;
    TA_ScaleRange.AddParFormal(&TA_class);
    TA_ScaleRange.AddParCache(&TA_taBase);
    TA_ScaleRange.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ScaleRange,TA_ScaleRange_MemberDef);
    tac_AddMethods(TA_ScaleRange,TA_ScaleRange_MethodDef);
  taMisc::types.Add(&TA_ColorScale);
    TAI_ColorScale = new ColorScale;
    TA_ColorScale.AddParFormal(&TA_class);
    TA_ColorScale.AddParCache(&TA_taBase);
    TA_ColorScale.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ColorScale,TA_ColorScale_MemberDef);
    tac_AddMethods(TA_ColorScale,TA_ColorScale_MethodDef);
  taMisc::types.Add(&TA_const_RGBA);
    TA_const_RGBA.AddParents(&TA_const, &TA_RGBA);
  taMisc::types.Add(&TA_const_RGBA_ref);
    TA_const_RGBA_ref.AddParents(&TA_const_RGBA);
  taMisc::types.Add(&TA_taList_RGBA_);
    TAI_taList_RGBA_ = new taList<RGBA>;
    TA_taList_RGBA_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_RGBA_.AddParCache(&TA_taBase);
    TA_taList_RGBA_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_RGBA_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_RGBA_.sub_types.FindName("const_taBase"));
    TA_taList_RGBA_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_RGBA_.sub_types.Add(sbt);
    sbt = new TypeDef("RGBA_ptr", 1, 1, 0);
    sbt->AddParents(&TA_RGBA);
    TA_taList_RGBA_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_RGBA_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_RGBA__Orientation);
    tac_AddMethods(TA_taList_RGBA_,TA_taList_RGBA__MethodDef);
  taMisc::types.Add(&TA_RGBA_List);
    TAI_RGBA_List = new RGBA_List;
    TA_RGBA_List.AddParFormal(&TA_class);
    TA_RGBA_List.AddParCache(&TA_taBase);
    TA_RGBA_List.AddClassPar(&TA_taList_RGBA_,0);
  taMisc::types.Add(&TA_const_RGBA_List);
    TA_const_RGBA_List.AddParents(&TA_const, &TA_RGBA_List);
  taMisc::types.Add(&TA_RGBA_ptr);
    TA_RGBA_ptr.AddParents(&TA_RGBA);
  taMisc::types.Add(&TA_const_RGBA_List_ref);
    TA_const_RGBA_List_ref.AddParents(&TA_const_RGBA_List);
  taMisc::types.Add(&TA_const_TAColor);
    TA_const_TAColor.AddParents(&TA_const, &TA_TAColor);
  taMisc::types.Add(&TA_const_TAColor_ref);
    TA_const_TAColor_ref.AddParents(&TA_const_TAColor);
  taMisc::types.Add(&TA_taList_TAColor_);
    TAI_taList_TAColor_ = new taList<TAColor>;
    TA_taList_TAColor_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_TAColor_.AddParCache(&TA_taBase);
    TA_taList_TAColor_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_TAColor_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_TAColor_.sub_types.FindName("const_taBase"));
    TA_taList_TAColor_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_TAColor_.sub_types.Add(sbt);
    sbt = new TypeDef("TAColor_ptr", 1, 1, 0);
    sbt->AddParents(&TA_TAColor);
    TA_taList_TAColor_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_TAColor_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_TAColor__Orientation);
    tac_AddMethods(TA_taList_TAColor_,TA_taList_TAColor__MethodDef);
  taMisc::types.Add(&TA_TAColor_List);
    TAI_TAColor_List = new TAColor_List;
    TA_TAColor_List.AddParFormal(&TA_class);
    TA_TAColor_List.AddParCache(&TA_taBase);
    TA_TAColor_List.AddClassPar(&TA_taList_TAColor_,0);
  taMisc::types.Add(&TA_const_TAColor_List);
    TA_const_TAColor_List.AddParents(&TA_const, &TA_TAColor_List);
  taMisc::types.Add(&TA_TAColor_List_ptr);
    TA_TAColor_List_ptr.AddParents(&TA_TAColor_List);
  taMisc::types.Add(&TA_const_TAColor_List_ref);
    TA_const_TAColor_List_ref.AddParents(&TA_const_TAColor_List);
  taMisc::types.Add(&TA_const_ColorScaleSpec);
    TA_const_ColorScaleSpec.AddParents(&TA_const, &TA_ColorScaleSpec);
  taMisc::types.Add(&TA_const_ColorScaleSpec_ref);
    TA_const_ColorScaleSpec_ref.AddParents(&TA_const_ColorScaleSpec);
  taMisc::types.Add(&TA_taGroup_ColorScaleSpec_);
    TAI_taGroup_ColorScaleSpec_ = new taGroup<ColorScaleSpec>;
    TA_taGroup_ColorScaleSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_ColorScaleSpec_.AddParCache(&TA_taBase);
    TA_taGroup_ColorScaleSpec_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_ColorScaleSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_ColorScaleSpec_.sub_types.FindName("const_taBase"));
    TA_taGroup_ColorScaleSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_ColorScaleSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("ColorScaleSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ColorScaleSpec);
    TA_taGroup_ColorScaleSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_ColorScaleSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_ColorScaleSpec__Orientation);
    tac_AddMethods(TA_taGroup_ColorScaleSpec_,TA_taGroup_ColorScaleSpec__MethodDef);
  taMisc::types.Add(&TA_ColorScaleSpec_MGroup);
    TAI_ColorScaleSpec_MGroup = new ColorScaleSpec_MGroup;
    TA_ColorScaleSpec_MGroup.AddParFormal(&TA_class);
    TA_ColorScaleSpec_MGroup.AddParCache(&TA_taBase);
    TA_ColorScaleSpec_MGroup.AddClassPar(&TA_taGroup_ColorScaleSpec_,0);
    tac_AddMethods(TA_ColorScaleSpec_MGroup,TA_ColorScaleSpec_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_ColorScaleSpec_MGroup);
    TA_const_ColorScaleSpec_MGroup.AddParents(&TA_const, &TA_ColorScaleSpec_MGroup);
  taMisc::types.Add(&TA_const_ColorScaleSpec_MGroup_ref);
    TA_const_ColorScaleSpec_MGroup_ref.AddParents(&TA_const_ColorScaleSpec_MGroup);
  taMisc::types.Add(&TA_ColorScale_ref);
    TA_ColorScale_ref.AddParents(&TA_ColorScale);
  taMisc::types.Add(&TA_const_ScaleRange);
    TA_const_ScaleRange.AddParents(&TA_const, &TA_ScaleRange);
  taMisc::types.Add(&TA_const_ScaleRange_ref);
    TA_const_ScaleRange_ref.AddParents(&TA_const_ScaleRange);
  taMisc::types.Add(&TA_taList_ScaleRange_);
    TAI_taList_ScaleRange_ = new taList<ScaleRange>;
    TA_taList_ScaleRange_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_ScaleRange_.AddParCache(&TA_taBase);
    TA_taList_ScaleRange_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_ScaleRange_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_ScaleRange_.sub_types.FindName("const_taBase"));
    TA_taList_ScaleRange_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_ScaleRange_.sub_types.Add(sbt);
    sbt = new TypeDef("ScaleRange_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ScaleRange);
    TA_taList_ScaleRange_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_ScaleRange_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_ScaleRange__Orientation);
    tac_AddMethods(TA_taList_ScaleRange_,TA_taList_ScaleRange__MethodDef);
  taMisc::types.Add(&TA_ScaleRange_List);
    TAI_ScaleRange_List = new ScaleRange_List;
    TA_ScaleRange_List.AddParFormal(&TA_class);
    TA_ScaleRange_List.AddParCache(&TA_taBase);
    TA_ScaleRange_List.AddClassPar(&TA_taList_ScaleRange_,0);
  taMisc::types.Add(&TA_const_ScaleRange_List);
    TA_const_ScaleRange_List.AddParents(&TA_const, &TA_ScaleRange_List);
  taMisc::types.Add(&TA_ColorScaleSpec_ptr);
    TA_ColorScaleSpec_ptr.AddParents(&TA_ColorScaleSpec);
  taMisc::types.Add(&TA_const_ScaleRange_List_ref);
    TA_const_ScaleRange_List_ref.AddParents(&TA_const_ScaleRange_List);
  taMisc::types.Add(&TA_const_iColor_ptr_ptr);
  taMisc::types.Add(&TA_ScaleRange_ptr);
    TA_ScaleRange_ptr.AddParents(&TA_ScaleRange);
  taMisc::types.Add(&TA_const_ColorScale);
    TA_const_ColorScale.AddParents(&TA_const, &TA_ColorScale);
  taMisc::types.Add(&TA_const_ColorScale_ref);
    TA_const_ColorScale_ref.AddParents(&TA_const_ColorScale);
  taMisc::types.Add(&TA_ClustNode);
    TAI_ClustNode = new ClustNode;
    TA_ClustNode.AddParFormal(&TA_class);
    TA_ClustNode.AddParCache(&TA_taBase);
    TA_ClustNode.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ClustNode,TA_ClustNode_MemberDef);
    tac_AddMethods(TA_ClustNode,TA_ClustNode_MethodDef);
  taMisc::types.Add(&TA_DataItem);
    TAI_DataItem = new DataItem;
    TA_DataItem.AddParFormal(&TA_class);
    TA_DataItem.AddParCache(&TA_taBase);
    TA_DataItem.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_DataItem,TA_DataItem_MemberDef);
    tac_AddMethods(TA_DataItem,TA_DataItem_MethodDef);
  taMisc::types.Add(&TA_taList_DataItem_);
    TAI_taList_DataItem_ = new taList<DataItem>;
    TA_taList_DataItem_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_DataItem_.AddParCache(&TA_taBase);
    TA_taList_DataItem_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_DataItem_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_DataItem_.sub_types.FindName("const_taBase"));
    TA_taList_DataItem_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_DataItem_.sub_types.Add(sbt);
    sbt = new TypeDef("DataItem_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DataItem);
    TA_taList_DataItem_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_DataItem_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_DataItem__Orientation);
    tac_AddMethods(TA_taList_DataItem_,TA_taList_DataItem__MethodDef);
  taMisc::types.Add(&TA_const_DataItem);
    TA_const_DataItem.AddParents(&TA_const, &TA_DataItem);
  taMisc::types.Add(&TA_const_DataItem_ref);
    TA_const_DataItem_ref.AddParents(&TA_const_DataItem);
  taMisc::types.Add(&TA_DataItem_List);
    TAI_DataItem_List = new DataItem_List;
    TA_DataItem_List.AddParFormal(&TA_class);
    TA_DataItem_List.AddParCache(&TA_taBase);
    TA_DataItem_List.AddClassPar(&TA_taList_DataItem_,0);
  taMisc::types.Add(&TA_DataItem_ptr);
    TA_DataItem_ptr.AddParents(&TA_DataItem);
  taMisc::types.Add(&TA_const_DataItem_List);
    TA_const_DataItem_List.AddParents(&TA_const, &TA_DataItem_List);
  taMisc::types.Add(&TA_const_DataItem_List_ref);
    TA_const_DataItem_List_ref.AddParents(&TA_const_DataItem_List);
  taMisc::types.Add(&TA_LogData);
    TAI_LogData = new LogData;
    TA_LogData.AddParFormal(&TA_class);
    TA_LogData.AddParCache(&TA_taBase);
    TA_LogData.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_LogData,TA_LogData_MemberDef);
    tac_AddMethods(TA_LogData,TA_LogData_MethodDef);
  taMisc::types.Add(&TA_const_LogData);
    TA_const_LogData.AddParents(&TA_const, &TA_LogData);
  taMisc::types.Add(&TA_const_LogData_ref);
    TA_const_LogData_ref.AddParents(&TA_const_LogData);
  taMisc::types.Add(&TA_Aggregate_ref);
    TA_Aggregate_ref.AddParents(&TA_Aggregate);
  taMisc::types.Add(&TA_float_RArray);
    TA_float_RArray.AddParFormal(&TA_class);
    TA_float_RArray.AddParCache(&TA_taBase);
    TA_float_RArray.AddClassPar(&TA_float_Array,0);
    tac_AddEnum(TA_float_RArray, "DistMetric", " generalized distance metrics", "", "", "", TA_float_RArray_DistMetric);
    tac_AddMembers(TA_float_RArray,TA_float_RArray_MemberDef);
    tac_AddMethods(TA_float_RArray,TA_float_RArray_MethodDef);
  taMisc::types.Add(&TA_taArray_base_ptr);
    TA_taArray_base_ptr.AddParents(&TA_taArray_base);
  taMisc::types.Add(&TA_float_RArray_ref);
    TA_float_RArray_ref.AddParents(&TA_float_RArray);
  taMisc::types.Add(&TA_const_float_RArray);
    TA_const_float_RArray.AddParents(&TA_const, &TA_float_RArray);
  taMisc::types.Add(&TA_const_float_RArray_ref);
    TA_const_float_RArray_ref.AddParents(&TA_const_float_RArray);
  taMisc::types.Add(&TA_DataArray_impl);
    TAI_DataArray_impl = new DataArray_impl;
    TA_DataArray_impl.AddParFormal(&TA_class);
    TA_DataArray_impl.AddParCache(&TA_taBase);
    TA_DataArray_impl.AddClassPar(&TA_taNBase,0);
    sbt = new TypeDef("ValType_ref", 1, 0, 1);
    sbt->AddParents(TA_DataArray_impl.sub_types.FindName("ValType"));
    TA_DataArray_impl.sub_types.Add(sbt);
    tac_AddEnum(TA_DataArray_impl, "ValType", "", "", "", "", TA_DataArray_impl_ValType);
    tac_AddMembers(TA_DataArray_impl,TA_DataArray_impl_MemberDef);
    tac_AddMethods(TA_DataArray_impl,TA_DataArray_impl_MethodDef);
  taMisc::types.Add(&TA_taGroup_DataArray_impl_);
    TAI_taGroup_DataArray_impl_ = new taGroup<DataArray_impl>;
    TA_taGroup_DataArray_impl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_DataArray_impl_.AddParCache(&TA_taBase);
    TA_taGroup_DataArray_impl_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_DataArray_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_DataArray_impl_.sub_types.FindName("const_taBase"));
    TA_taGroup_DataArray_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_DataArray_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("DataArray_impl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DataArray_impl);
    TA_taGroup_DataArray_impl_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_DataArray_impl_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_DataArray_impl__Orientation);
    tac_AddMethods(TA_taGroup_DataArray_impl_,TA_taGroup_DataArray_impl__MethodDef);
  taMisc::types.Add(&TA_const_DataArray_impl);
    TA_const_DataArray_impl.AddParents(&TA_const, &TA_DataArray_impl);
  taMisc::types.Add(&TA_LogData_ref);
    TA_LogData_ref.AddParents(&TA_LogData);
  taMisc::types.Add(&TA_const_DataArray_impl_ref);
    TA_const_DataArray_impl_ref.AddParents(&TA_const_DataArray_impl);
  taMisc::types.Add(&TA_DataArray_impl_ptr);
    TA_DataArray_impl_ptr.AddParents(&TA_DataArray_impl);
  taMisc::types.Add(&TA_float_RArray_ptr);
    TA_float_RArray_ptr.AddParents(&TA_float_RArray);
  taMisc::types.Add(&TA_String_Array_ptr);
    TA_String_Array_ptr.AddParents(&TA_String_Array);
  taMisc::types.Add(&TA_DataTable);
    TAI_DataTable = new DataTable;
    TA_DataTable.AddParFormal(&TA_class);
    TA_DataTable.AddParCache(&TA_taBase);
    TA_DataTable.AddClassPar(&TA_taGroup_DataArray_impl_,0);
    tac_AddMembers(TA_DataTable,TA_DataTable_MemberDef);
    tac_AddMethods(TA_DataTable,TA_DataTable_MethodDef);
  taMisc::types.Add(&TA_const_DataTable);
    TA_const_DataTable.AddParents(&TA_const, &TA_DataTable);
  taMisc::types.Add(&TA_DataTable_ptr);
    TA_DataTable_ptr.AddParents(&TA_DataTable);
  taMisc::types.Add(&TA_const_DataTable_ref);
    TA_const_DataTable_ref.AddParents(&TA_const_DataTable);
  taMisc::types.Add(&TA_DataArray);
    TA_DataArray.AddParFormal(&TA_class, &TA_template);
    TA_DataArray.AddParCache(&TA_taBase);
    TA_DataArray.AddParents(&TA_DataArray_impl);
  taMisc::types.Add(&TA_DataArray_float_RArray_);
    TAI_DataArray_float_RArray_ = new DataArray<float_RArray>;
    TA_DataArray_float_RArray_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_DataArray_float_RArray_.AddParCache(&TA_taBase);
    TA_DataArray_float_RArray_.AddClassPar(&TA_DataArray,0);
    sbt = new TypeDef("ValType_ref", 1, 0, 1);
    sbt->AddParents(TA_DataArray_float_RArray_.sub_types.FindName("ValType"));
    TA_DataArray_float_RArray_.sub_types.Add(sbt);
    tac_AddEnum(TA_DataArray_float_RArray_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_DataArray_float_RArray__Orientation);
    tac_AddEnum(TA_DataArray_float_RArray_, "ValType", "", "", "", "", TA_DataArray_float_RArray__ValType);
    tac_AddMembers(TA_DataArray_float_RArray_,TA_DataArray_float_RArray__MemberDef);
  taMisc::types.Add(&TA_const_DataArray);
    TA_const_DataArray.AddParents(&TA_const, &TA_DataArray);
  taMisc::types.Add(&TA_const_DataArray_ref);
    TA_const_DataArray_ref.AddParents(&TA_const_DataArray);
  taMisc::types.Add(&TA_float_Data);
    TAI_float_Data = new float_Data;
    TA_float_Data.AddParFormal(&TA_class);
    TA_float_Data.AddParCache(&TA_taBase);
    TA_float_Data.AddClassPar(&TA_DataArray_float_RArray_,0);
  taMisc::types.Add(&TA_const_float_Data);
    TA_const_float_Data.AddParents(&TA_const, &TA_float_Data);
  taMisc::types.Add(&TA_float_Data_ptr);
    TA_float_Data_ptr.AddParents(&TA_float_Data);
  taMisc::types.Add(&TA_const_float_Data_ref);
    TA_const_float_Data_ref.AddParents(&TA_const_float_Data);
  taMisc::types.Add(&TA_DString_Array);
    TA_DString_Array.AddParFormal(&TA_class);
    TA_DString_Array.AddParCache(&TA_taBase);
    TA_DString_Array.AddClassPar(&TA_String_Array,0);
  taMisc::types.Add(&TA_DataArray_DString_Array_);
    TAI_DataArray_DString_Array_ = new DataArray<DString_Array>;
    TA_DataArray_DString_Array_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_DataArray_DString_Array_.AddParCache(&TA_taBase);
    TA_DataArray_DString_Array_.AddClassPar(&TA_DataArray,0);
    sbt = new TypeDef("ValType_ref", 1, 0, 1);
    sbt->AddParents(TA_DataArray_DString_Array_.sub_types.FindName("ValType"));
    TA_DataArray_DString_Array_.sub_types.Add(sbt);
    tac_AddEnum(TA_DataArray_DString_Array_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_DataArray_DString_Array__Orientation);
    tac_AddEnum(TA_DataArray_DString_Array_, "ValType", "", "", "", "", TA_DataArray_DString_Array__ValType);
    tac_AddMembers(TA_DataArray_DString_Array_,TA_DataArray_DString_Array__MemberDef);
  taMisc::types.Add(&TA_const_DString_Array);
    TA_const_DString_Array.AddParents(&TA_const, &TA_DString_Array);
  taMisc::types.Add(&TA_String_Data);
    TAI_String_Data = new String_Data;
    TA_String_Data.AddParFormal(&TA_class);
    TA_String_Data.AddParCache(&TA_taBase);
    TA_String_Data.AddClassPar(&TA_DataArray_DString_Array_,0);
  taMisc::types.Add(&TA_const_DString_Array_ref);
    TA_const_DString_Array_ref.AddParents(&TA_const_DString_Array);
  taMisc::types.Add(&TA_const_String_Data);
    TA_const_String_Data.AddParents(&TA_const, &TA_String_Data);
  taMisc::types.Add(&TA_String_Data_ptr);
    TA_String_Data_ptr.AddParents(&TA_String_Data);
  taMisc::types.Add(&TA_const_String_Data_ref);
    TA_const_String_Data_ref.AddParents(&TA_const_String_Data);
  taMisc::types.Add(&TA_ClustNode_ptr);
    TA_ClustNode_ptr.AddParents(&TA_ClustNode);
  taMisc::types.Add(&TA_ClustLink);
    TAI_ClustLink = new ClustLink;
    TA_ClustLink.AddParFormal(&TA_class);
    TA_ClustLink.AddParCache(&TA_taBase);
    TA_ClustLink.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_ClustLink,TA_ClustLink_MemberDef);
  taMisc::types.Add(&TA_const_ClustLink);
    TA_const_ClustLink.AddParents(&TA_const, &TA_ClustLink);
  taMisc::types.Add(&TA_const_ClustNode);
    TA_const_ClustNode.AddParents(&TA_const, &TA_ClustNode);
  taMisc::types.Add(&TA_const_ClustLink_ref);
    TA_const_ClustLink_ref.AddParents(&TA_const_ClustLink);
  taMisc::types.Add(&TA_const_ClustNode_ref);
    TA_const_ClustNode_ref.AddParents(&TA_const_ClustNode);
  taMisc::types.Add(&TA_DA_ViewSpec);
    TAI_DA_ViewSpec = new DA_ViewSpec;
    TA_DA_ViewSpec.AddParFormal(&TA_class);
    TA_DA_ViewSpec.AddParCache(&TA_taBase);
    TA_DA_ViewSpec.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_DA_ViewSpec,TA_DA_ViewSpec_MemberDef);
    tac_AddMethods(TA_DA_ViewSpec,TA_DA_ViewSpec_MethodDef);
  taMisc::types.Add(&TA_taGroup_DA_ViewSpec_);
    TAI_taGroup_DA_ViewSpec_ = new taGroup<DA_ViewSpec>;
    TA_taGroup_DA_ViewSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_DA_ViewSpec_.AddParCache(&TA_taBase);
    TA_taGroup_DA_ViewSpec_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taGroup_DA_ViewSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taGroup_DA_ViewSpec_.sub_types.FindName("const_taBase"));
    TA_taGroup_DA_ViewSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_DA_ViewSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("DA_ViewSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DA_ViewSpec);
    TA_taGroup_DA_ViewSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_taGroup_DA_ViewSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taGroup_DA_ViewSpec__Orientation);
    tac_AddMethods(TA_taGroup_DA_ViewSpec_,TA_taGroup_DA_ViewSpec__MethodDef);
  taMisc::types.Add(&TA_const_DA_ViewSpec);
    TA_const_DA_ViewSpec.AddParents(&TA_const, &TA_DA_ViewSpec);
  taMisc::types.Add(&TA_const_DA_ViewSpec_ref);
    TA_const_DA_ViewSpec_ref.AddParents(&TA_const_DA_ViewSpec);
  taMisc::types.Add(&TA_DT_ViewSpec);
    TAI_DT_ViewSpec = new DT_ViewSpec;
    TA_DT_ViewSpec.AddParFormal(&TA_class);
    TA_DT_ViewSpec.AddParCache(&TA_taBase);
    TA_DT_ViewSpec.AddClassPar(&TA_taGroup_DA_ViewSpec_,0);
    tac_AddMembers(TA_DT_ViewSpec,TA_DT_ViewSpec_MemberDef);
    tac_AddMethods(TA_DT_ViewSpec,TA_DT_ViewSpec_MethodDef);
  taMisc::types.Add(&TA_const_DT_ViewSpec);
    TA_const_DT_ViewSpec.AddParents(&TA_const, &TA_DT_ViewSpec);
  taMisc::types.Add(&TA_DA_TextViewSpec);
    TAI_DA_TextViewSpec = new DA_TextViewSpec;
    TA_DA_TextViewSpec.AddParFormal(&TA_class);
    TA_DA_TextViewSpec.AddParCache(&TA_taBase);
    TA_DA_TextViewSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddMembers(TA_DA_TextViewSpec,TA_DA_TextViewSpec_MemberDef);
  taMisc::types.Add(&TA_const_DT_ViewSpec_ref);
    TA_const_DT_ViewSpec_ref.AddParents(&TA_const_DT_ViewSpec);
  taMisc::types.Add(&TA_const_DA_TextViewSpec);
    TA_const_DA_TextViewSpec.AddParents(&TA_const, &TA_DA_TextViewSpec);
  taMisc::types.Add(&TA_const_DA_TextViewSpec_ref);
    TA_const_DA_TextViewSpec_ref.AddParents(&TA_const_DA_TextViewSpec);
  taMisc::types.Add(&TA_DA_NetViewSpec);
    TAI_DA_NetViewSpec = new DA_NetViewSpec;
    TA_DA_NetViewSpec.AddParFormal(&TA_class);
    TA_DA_NetViewSpec.AddParCache(&TA_taBase);
    TA_DA_NetViewSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddMembers(TA_DA_NetViewSpec,TA_DA_NetViewSpec_MemberDef);
  taMisc::types.Add(&TA_const_DA_NetViewSpec);
    TA_const_DA_NetViewSpec.AddParents(&TA_const, &TA_DA_NetViewSpec);
  taMisc::types.Add(&TA_const_DA_NetViewSpec_ref);
    TA_const_DA_NetViewSpec_ref.AddParents(&TA_const_DA_NetViewSpec);
  taMisc::types.Add(&TA_DA_GridViewSpec);
    TAI_DA_GridViewSpec = new DA_GridViewSpec;
    TA_DA_GridViewSpec.AddParFormal(&TA_class);
    TA_DA_GridViewSpec.AddParCache(&TA_taBase);
    TA_DA_GridViewSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddEnum(TA_DA_GridViewSpec, "DisplayStyle", "", "", "", "", TA_DA_GridViewSpec_DisplayStyle);
    tac_AddMembers(TA_DA_GridViewSpec,TA_DA_GridViewSpec_MemberDef);
  taMisc::types.Add(&TA_const_DA_GridViewSpec);
    TA_const_DA_GridViewSpec.AddParents(&TA_const, &TA_DA_GridViewSpec);
  taMisc::types.Add(&TA_const_DA_GridViewSpec_ref);
    TA_const_DA_GridViewSpec_ref.AddParents(&TA_const_DA_GridViewSpec);
  taMisc::types.Add(&TA_DT_GridViewSpec);
    TAI_DT_GridViewSpec = new DT_GridViewSpec;
    TA_DT_GridViewSpec.AddParFormal(&TA_class);
    TA_DT_GridViewSpec.AddParCache(&TA_taBase);
    TA_DT_GridViewSpec.AddClassPar(&TA_DT_ViewSpec,0);
    tac_AddEnum(TA_DT_GridViewSpec, "BlockFill", " ways that grid blocks can be filled", "", "", "", TA_DT_GridViewSpec_BlockFill);
    tac_AddEnum(TA_DT_GridViewSpec, "MatrixLayout", " order of display of the grid elements", "", "", "", TA_DT_GridViewSpec_MatrixLayout);
    tac_AddMembers(TA_DT_GridViewSpec,TA_DT_GridViewSpec_MemberDef);
    tac_AddMethods(TA_DT_GridViewSpec,TA_DT_GridViewSpec_MethodDef);
  taMisc::types.Add(&TA_GraphColSpec);
    TAI_GraphColSpec = new GraphColSpec;
    TA_GraphColSpec.AddParFormal(&TA_class);
    TA_GraphColSpec.AddParCache(&TA_taBase);
    TA_GraphColSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddEnum(TA_GraphColSpec, "ColumnType", " column type hints for graphing", "", "", "", TA_GraphColSpec_ColumnType);
    tac_AddEnum(TA_GraphColSpec, "LineType", "", "", "", "", TA_GraphColSpec_LineType);
    tac_AddEnum(TA_GraphColSpec, "LineStyle", "", "", "", "", TA_GraphColSpec_LineStyle);
    tac_AddEnum(TA_GraphColSpec, "PointStyle", "", "", "", "", TA_GraphColSpec_PointStyle);
    tac_AddMembers(TA_GraphColSpec,TA_GraphColSpec_MemberDef);
    tac_AddMethods(TA_GraphColSpec,TA_GraphColSpec_MethodDef);
  taMisc::types.Add(&TA_const_DT_GridViewSpec);
    TA_const_DT_GridViewSpec.AddParents(&TA_const, &TA_DT_GridViewSpec);
  taMisc::types.Add(&TA_AxisSpec);
    TA_AxisSpec.AddParFormal(&TA_class);
    TA_AxisSpec.AddParCache(&TA_taBase);
    TA_AxisSpec.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_AxisSpec, "Axis", "", "", "", "", TA_AxisSpec_Axis);
    tac_AddMembers(TA_AxisSpec,TA_AxisSpec_MemberDef);
    tac_AddMethods(TA_AxisSpec,TA_AxisSpec_MethodDef);
  taMisc::types.Add(&TA_const_DT_GridViewSpec_ref);
    TA_const_DT_GridViewSpec_ref.AddParents(&TA_const_DT_GridViewSpec);
  taMisc::types.Add(&TA_XAxisSpec);
    TAI_XAxisSpec = new XAxisSpec;
    TA_XAxisSpec.AddParFormal(&TA_class);
    TA_XAxisSpec.AddParCache(&TA_taBase);
    TA_XAxisSpec.AddClassPar(&TA_AxisSpec,0);
    tac_AddEnum(TA_XAxisSpec, "XAxisType", " source of data for the X axis; determines ranges, etc.", "", "", "", TA_XAxisSpec_XAxisType);
    tac_AddMembers(TA_XAxisSpec,TA_XAxisSpec_MemberDef);
  taMisc::types.Add(&TA_YAxisSpec);
    TAI_YAxisSpec = new YAxisSpec;
    TA_YAxisSpec.AddParFormal(&TA_class);
    TA_YAxisSpec.AddParCache(&TA_taBase);
    TA_YAxisSpec.AddClassPar(&TA_AxisSpec,0);
    tac_AddMembers(TA_YAxisSpec,TA_YAxisSpec_MemberDef);
  taMisc::types.Add(&TA_ZAxisSpec);
    TAI_ZAxisSpec = new ZAxisSpec;
    TA_ZAxisSpec.AddParFormal(&TA_class);
    TA_ZAxisSpec.AddParCache(&TA_taBase);
    TA_ZAxisSpec.AddClassPar(&TA_AxisSpec,0);
    tac_AddMembers(TA_ZAxisSpec,TA_ZAxisSpec_MemberDef);
  taMisc::types.Add(&TA_GraphSpec);
    TAI_GraphSpec = new GraphSpec;
    TA_GraphSpec.AddParFormal(&TA_class);
    TA_GraphSpec.AddParCache(&TA_taBase);
    TA_GraphSpec.AddClassPar(&TA_DT_ViewSpec,0);
    tac_AddEnum(TA_GraphSpec, "GraphType", " overall type of the graph", "", "", "", TA_GraphSpec_GraphType);
    tac_AddEnum(TA_GraphSpec, "ColorType", " defines standard color sequences", "", "", "", TA_GraphSpec_ColorType);
    tac_AddEnum(TA_GraphSpec, "SequenceType", " defines sequences of line features", "", "", "", TA_GraphSpec_SequenceType);
    tac_AddEnum(TA_GraphSpec, "AxisSharing", " default configuration for graphs", "", "", "", TA_GraphSpec_AxisSharing);
    tac_AddMembers(TA_GraphSpec,TA_GraphSpec_MemberDef);
    tac_AddMethods(TA_GraphSpec,TA_GraphSpec_MethodDef);
  taMisc::types.Add(&TA_GraphSpec_ptr);
    TA_GraphSpec_ptr.AddParents(&TA_GraphSpec);
  taMisc::types.Add(&TA_AxisSpec_ptr);
    TA_AxisSpec_ptr.AddParents(&TA_AxisSpec);
  taMisc::types.Add(&TA_GraphColSpec_ptr);
    TA_GraphColSpec_ptr.AddParents(&TA_GraphColSpec);
  taMisc::types.Add(&TA_const_GraphColSpec);
    TA_const_GraphColSpec.AddParents(&TA_const, &TA_GraphColSpec);
  taMisc::types.Add(&TA_const_GraphColSpec_ref);
    TA_const_GraphColSpec_ref.AddParents(&TA_const_GraphColSpec);
  taMisc::types.Add(&TA_const_AxisSpec);
    TA_const_AxisSpec.AddParents(&TA_const, &TA_AxisSpec);
  taMisc::types.Add(&TA_const_AxisSpec_ref);
    TA_const_AxisSpec_ref.AddParents(&TA_const_AxisSpec);
  taMisc::types.Add(&TA_const_XAxisSpec);
    TA_const_XAxisSpec.AddParents(&TA_const, &TA_XAxisSpec);
  taMisc::types.Add(&TA_const_XAxisSpec_ref);
    TA_const_XAxisSpec_ref.AddParents(&TA_const_XAxisSpec);
  taMisc::types.Add(&TA_const_YAxisSpec);
    TA_const_YAxisSpec.AddParents(&TA_const, &TA_YAxisSpec);
  taMisc::types.Add(&TA_const_YAxisSpec_ref);
    TA_const_YAxisSpec_ref.AddParents(&TA_const_YAxisSpec);
  taMisc::types.Add(&TA_const_ZAxisSpec);
    TA_const_ZAxisSpec.AddParents(&TA_const, &TA_ZAxisSpec);
  taMisc::types.Add(&TA_const_ZAxisSpec_ref);
    TA_const_ZAxisSpec_ref.AddParents(&TA_const_ZAxisSpec);
  taMisc::types.Add(&TA_taList_YAxisSpec_);
    TAI_taList_YAxisSpec_ = new taList<YAxisSpec>;
    TA_taList_YAxisSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_YAxisSpec_.AddParCache(&TA_taBase);
    TA_taList_YAxisSpec_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_YAxisSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_YAxisSpec_.sub_types.FindName("const_taBase"));
    TA_taList_YAxisSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_YAxisSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("YAxisSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_YAxisSpec);
    TA_taList_YAxisSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_YAxisSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_YAxisSpec__Orientation);
    tac_AddMethods(TA_taList_YAxisSpec_,TA_taList_YAxisSpec__MethodDef);
  taMisc::types.Add(&TA_YAxisSpec_ptr);
    TA_YAxisSpec_ptr.AddParents(&TA_YAxisSpec);
  taMisc::types.Add(&TA_YAxisSpec_List);
    TAI_YAxisSpec_List = new YAxisSpec_List;
    TA_YAxisSpec_List.AddParFormal(&TA_class);
    TA_YAxisSpec_List.AddParCache(&TA_taBase);
    TA_YAxisSpec_List.AddClassPar(&TA_taList_YAxisSpec_,0);
    tac_AddMethods(TA_YAxisSpec_List,TA_YAxisSpec_List_MethodDef);
  taMisc::types.Add(&TA_const_GraphColSpec_ptr);
    TA_const_GraphColSpec_ptr.AddParents(&TA_const_GraphColSpec);
  taMisc::types.Add(&TA_GraphletSpec);
    TAI_GraphletSpec = new GraphletSpec;
    TA_GraphletSpec.AddParFormal(&TA_class);
    TA_GraphletSpec.AddParCache(&TA_taBase);
    TA_GraphletSpec.AddClassPar(&TA_YAxisSpec_List,0);
  taMisc::types.Add(&TA_int_ptr);
    TA_int_ptr.AddParents(&TA_int);
  taMisc::types.Add(&TA_const_YAxisSpec_List);
    TA_const_YAxisSpec_List.AddParents(&TA_const, &TA_YAxisSpec_List);
  taMisc::types.Add(&TA_const_YAxisSpec_List_ref);
    TA_const_YAxisSpec_List_ref.AddParents(&TA_const_YAxisSpec_List);
  taMisc::types.Add(&TA_const_GraphletSpec);
    TA_const_GraphletSpec.AddParents(&TA_const, &TA_GraphletSpec);
  taMisc::types.Add(&TA_const_GraphletSpec_ref);
    TA_const_GraphletSpec_ref.AddParents(&TA_const_GraphletSpec);
  taMisc::types.Add(&TA_taList_GraphletSpec_);
    TAI_taList_GraphletSpec_ = new taList<GraphletSpec>;
    TA_taList_GraphletSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_GraphletSpec_.AddParCache(&TA_taBase);
    TA_taList_GraphletSpec_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_GraphletSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_GraphletSpec_.sub_types.FindName("const_taBase"));
    TA_taList_GraphletSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_GraphletSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("GraphletSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_GraphletSpec);
    TA_taList_GraphletSpec_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_GraphletSpec_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_GraphletSpec__Orientation);
    tac_AddMethods(TA_taList_GraphletSpec_,TA_taList_GraphletSpec__MethodDef);
  taMisc::types.Add(&TA_GraphletSpec_List);
    TAI_GraphletSpec_List = new GraphletSpec_List;
    TA_GraphletSpec_List.AddParFormal(&TA_class);
    TA_GraphletSpec_List.AddParCache(&TA_taBase);
    TA_GraphletSpec_List.AddClassPar(&TA_taList_GraphletSpec_,0);
  taMisc::types.Add(&TA_const_GraphletSpec_List);
    TA_const_GraphletSpec_List.AddParents(&TA_const, &TA_GraphletSpec_List);
  taMisc::types.Add(&TA_ColorScale_ptr);
    TA_ColorScale_ptr.AddParents(&TA_ColorScale);
  taMisc::types.Add(&TA_const_GraphletSpec_List_ref);
    TA_const_GraphletSpec_List_ref.AddParents(&TA_const_GraphletSpec_List);
  taMisc::types.Add(&TA_const_GraphSpec);
    TA_const_GraphSpec.AddParents(&TA_const, &TA_GraphSpec);
  taMisc::types.Add(&TA_const_GraphSpec_ref);
    TA_const_GraphSpec_ref.AddParents(&TA_const_GraphSpec);
  taMisc::types.Add(&TA_AxisSpec_ref);
    TA_AxisSpec_ref.AddParents(&TA_AxisSpec);
  taMisc::types.Add(&TA_FunLookup);
    TA_FunLookup.AddParFormal(&TA_class);
    TA_FunLookup.AddParCache(&TA_taBase);
    TA_FunLookup.AddClassPar(&TA_float_RArray,0);
    tac_AddMembers(TA_FunLookup,TA_FunLookup_MemberDef);
    tac_AddMethods(TA_FunLookup,TA_FunLookup_MethodDef);
  taMisc::types.Add(&TA_const_FunLookup);
    TA_const_FunLookup.AddParents(&TA_const, &TA_FunLookup);
  taMisc::types.Add(&TA_const_FunLookup_ref);
    TA_const_FunLookup_ref.AddParents(&TA_const_FunLookup);
  taMisc::types.Add(&TA_float_ptr);
    TA_float_ptr.AddParents(&TA_float);
  taMisc::types.Add(&TA_FunLookupND);
    TAI_FunLookupND = new FunLookupND;
    TA_FunLookupND.AddParFormal(&TA_class);
    TA_FunLookupND.AddParCache(&TA_taBase);
    TA_FunLookupND.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_FunLookupND,TA_FunLookupND_MemberDef);
    tac_AddMethods(TA_FunLookupND,TA_FunLookupND_MethodDef);
  taMisc::types.Add(&TA_SoBase);
    TA_SoBase.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_FunLookupND);
    TA_const_FunLookupND.AddParents(&TA_const, &TA_FunLookupND);
  taMisc::types.Add(&TA_SoNode);
    TA_SoNode.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_FunLookupND_ref);
    TA_const_FunLookupND_ref.AddParents(&TA_const_FunLookupND);
  taMisc::types.Add(&TA_SoGroup);
    TA_SoGroup.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoSeparator);
    TA_SoSeparator.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoBase_ptr);
    TA_SoBase_ptr.AddParents(&TA_SoBase);
  taMisc::types.Add(&TA_SoPtr_impl);
    TA_SoPtr_impl.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoPtr);
    TA_SoPtr.AddParFormal(&TA_class, &TA_template);
    TA_SoPtr.AddParents(&TA_SoPtr_impl);
  taMisc::types.Add(&TA_SoPtr_SoNode_);
    TA_SoPtr_SoNode_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SoPtr_SoNode_.AddClassPar(&TA_SoPtr,0);
  taMisc::types.Add(&TA_SoNode_ptr);
  taMisc::types.Add(&TA_SoNodePtr);
    TA_SoNodePtr.AddParFormal(&TA_class);
    TA_SoNodePtr.AddClassPar(&TA_SoPtr_SoNode_,0);
  taMisc::types.Add(&TA_SoPtr_SoGroup_);
    TA_SoPtr_SoGroup_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SoPtr_SoGroup_.AddClassPar(&TA_SoPtr,0);
  taMisc::types.Add(&TA_SoNodePtr_ref);
    TA_SoNodePtr_ref.AddParents(&TA_SoNodePtr);
  taMisc::types.Add(&TA_SoGroup_ptr);
    TA_SoGroup_ptr.AddParents(&TA_SoGroup);
  taMisc::types.Add(&TA_SoGroupPtr);
    TA_SoGroupPtr.AddParFormal(&TA_class);
    TA_SoGroupPtr.AddClassPar(&TA_SoPtr_SoGroup_,0);
  taMisc::types.Add(&TA_SoPtr_SoSeparator_);
    TA_SoPtr_SoSeparator_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SoPtr_SoSeparator_.AddClassPar(&TA_SoPtr,0);
  taMisc::types.Add(&TA_SoGroupPtr_ref);
    TA_SoGroupPtr_ref.AddParents(&TA_SoGroupPtr);
  taMisc::types.Add(&TA_SoSeparator_ptr);
  taMisc::types.Add(&TA_SoSeparatorPtr);
    TA_SoSeparatorPtr.AddParFormal(&TA_class);
    TA_SoSeparatorPtr.AddClassPar(&TA_SoPtr_SoSeparator_,0);
  taMisc::types.Add(&TA_SoPtr_SoSeparatorKit_);
    TA_SoPtr_SoSeparatorKit_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SoPtr_SoSeparatorKit_.AddClassPar(&TA_SoPtr,0);
  taMisc::types.Add(&TA_SoSeparatorPtr_ref);
    TA_SoSeparatorPtr_ref.AddParents(&TA_SoSeparatorPtr);
  taMisc::types.Add(&TA_SoSeparatorKitPtr);
    TA_SoSeparatorKitPtr.AddParFormal(&TA_class);
    TA_SoSeparatorKitPtr.AddClassPar(&TA_SoPtr_SoSeparatorKit_,0);
  taMisc::types.Add(&TA_SoPtr_SoSelection_);
    TA_SoPtr_SoSelection_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SoPtr_SoSelection_.AddClassPar(&TA_SoPtr,0);
  taMisc::types.Add(&TA_SoSeparatorKitPtr_ref);
    TA_SoSeparatorKitPtr_ref.AddParents(&TA_SoSeparatorKitPtr);
  taMisc::types.Add(&TA_SoSelectionPtr);
    TA_SoSelectionPtr.AddParFormal(&TA_class);
    TA_SoSelectionPtr.AddClassPar(&TA_SoPtr_SoSelection_,0);
  taMisc::types.Add(&TA_SoPtr_SoTransform_);
    TA_SoPtr_SoTransform_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SoPtr_SoTransform_.AddClassPar(&TA_SoPtr,0);
  taMisc::types.Add(&TA_SoSelectionPtr_ref);
    TA_SoSelectionPtr_ref.AddParents(&TA_SoSelectionPtr);
  taMisc::types.Add(&TA_SoTransformPtr);
    TA_SoTransformPtr.AddParFormal(&TA_class);
    TA_SoTransformPtr.AddClassPar(&TA_SoPtr_SoTransform_,0);
  taMisc::types.Add(&TA_SoTriangleStripSet);
    TA_SoTriangleStripSet.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoTransformPtr_ref);
    TA_SoTransformPtr_ref.AddParents(&TA_SoTransformPtr);
  taMisc::types.Add(&TA_T3Node);
    TA_T3Node.AddParFormal(&TA_class);
    tac_AddMethods(TA_T3Node,TA_T3Node_MethodDef);
  taMisc::types.Add(&TA_const_SbColor_ref);
  taMisc::types.Add(&TA_T3Color);
    TA_T3Color.AddParFormal(&TA_class);
    tac_AddMembers(TA_T3Color,TA_T3Color_MemberDef);
    tac_AddMethods(TA_T3Color,TA_T3Color_MethodDef);
  taMisc::types.Add(&TA_T3Color_ref);
    TA_T3Color_ref.AddParents(&TA_T3Color);
  taMisc::types.Add(&TA_const_SbRotation_ref);
  taMisc::types.Add(&TA_const_SbRotation_ptr);
  taMisc::types.Add(&TA_const_iVec3f_ptr);
    TA_const_iVec3f_ptr.AddParents(&TA_const_iVec3f);
  taMisc::types.Add(&TA_T3NodeLeaf);
    TA_T3NodeLeaf.AddParFormal(&TA_class);
    TA_T3NodeLeaf.AddClassPar(&TA_T3Node,0);
    tac_AddMethods(TA_T3NodeLeaf,TA_T3NodeLeaf_MethodDef);
  taMisc::types.Add(&TA_T3NodeParent);
    TA_T3NodeParent.AddParFormal(&TA_class);
    TA_T3NodeParent.AddClassPar(&TA_T3Node,0);
    tac_AddMethods(TA_T3NodeParent,TA_T3NodeParent_MethodDef);
  taMisc::types.Add(&TA_SoFrame);
    TA_SoFrame.AddParFormal(&TA_class);
    tac_AddEnum(TA_SoFrame, "Orientation", "", "", "", "", TA_SoFrame_Orientation);
    tac_AddMembers(TA_SoFrame,TA_SoFrame_MemberDef);
    tac_AddMethods(TA_SoFrame,TA_SoFrame_MethodDef);
  taMisc::types.Add(&TA_T3DataView);
    TAI_T3DataView = new T3DataView;
    TA_T3DataView.AddParFormal(&TA_class);
    TA_T3DataView.AddParCache(&TA_taBase);
    TA_T3DataView.AddClassPar(&TA_taDataView,(int)((unsigned long)((taDataView*)TAI_T3DataView)-(unsigned long)TAI_T3DataView), &TA_ISelectable,(int)((unsigned long)((ISelectable*)TAI_T3DataView)-(unsigned long)TAI_T3DataView));
    tac_AddEnum(TA_T3DataView, "DataNodeFlags", " TODO: following copied from browsing; will need to be modified", "", "", "", TA_T3DataView_DataNodeFlags);
    tac_AddMembers(TA_T3DataView,TA_T3DataView_MemberDef);
    tac_AddMethods(TA_T3DataView,TA_T3DataView_MethodDef);
  taMisc::types.Add(&TA_T3DataViewPar);
    TAI_T3DataViewPar = new T3DataViewPar;
    TA_T3DataViewPar.AddParFormal(&TA_class);
    TA_T3DataViewPar.AddParCache(&TA_taBase);
    TA_T3DataViewPar.AddClassPar(&TA_T3DataView,0);
    tac_AddMembers(TA_T3DataViewPar,TA_T3DataViewPar_MemberDef);
    tac_AddMethods(TA_T3DataViewPar,TA_T3DataViewPar_MethodDef);
  taMisc::types.Add(&TA_T3DataViewRoot);
    TAI_T3DataViewRoot = new T3DataViewRoot;
    TA_T3DataViewRoot.AddParFormal(&TA_class);
    TA_T3DataViewRoot.AddParCache(&TA_taBase);
    TA_T3DataViewRoot.AddClassPar(&TA_T3DataViewPar,0);
    tac_AddMembers(TA_T3DataViewRoot,TA_T3DataViewRoot_MemberDef);
  taMisc::types.Add(&TA_iT3ViewspaceWidget);
    TAI_iT3ViewspaceWidget = new iT3ViewspaceWidget;
    TA_iT3ViewspaceWidget.AddParFormal(&TA_class);
    TA_iT3ViewspaceWidget.AddClassPar(&TA_QWidget,0);
    tac_AddEnum(TA_iT3ViewspaceWidget, "SelectionMode", "", "", "", "", TA_iT3ViewspaceWidget_SelectionMode);
    tac_AddMethods(TA_iT3ViewspaceWidget,TA_iT3ViewspaceWidget_MethodDef);
  taMisc::types.Add(&TA_T3DataViewer);
    TAI_T3DataViewer = new T3DataViewer;
    TA_T3DataViewer.AddParFormal(&TA_class);
    TA_T3DataViewer.AddParCache(&TA_taBase);
    TA_T3DataViewer.AddClassPar(&TA_DataViewer,0);
    tac_AddMembers(TA_T3DataViewer,TA_T3DataViewer_MemberDef);
    tac_AddMethods(TA_T3DataViewer,TA_T3DataViewer_MethodDef);
  taMisc::types.Add(&TA_SoPtr_T3Node_);
    TA_SoPtr_T3Node_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SoPtr_T3Node_.AddClassPar(&TA_SoPtr,0);
  taMisc::types.Add(&TA_T3Node_ptr);
    TA_T3Node_ptr.AddParents(&TA_T3Node);
  taMisc::types.Add(&TA_T3NodePtr);
    TA_T3NodePtr.AddParFormal(&TA_class);
    TA_T3NodePtr.AddClassPar(&TA_SoPtr_T3Node_,0);
  taMisc::types.Add(&TA_taList_T3DataView_);
    TAI_taList_T3DataView_ = new taList<T3DataView>;
    TA_taList_T3DataView_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_T3DataView_.AddParCache(&TA_taBase);
    TA_taList_T3DataView_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_T3DataView_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_T3DataView_.sub_types.FindName("const_taBase"));
    TA_taList_T3DataView_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_T3DataView_.sub_types.Add(sbt);
    sbt = new TypeDef("T3DataView_ptr", 1, 1, 0);
    sbt->AddParents(&TA_T3DataView);
    TA_taList_T3DataView_.sub_types.Add(sbt);
    tac_AddEnum(TA_taList_T3DataView_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_T3DataView__Orientation);
    tac_AddMethods(TA_taList_T3DataView_,TA_taList_T3DataView__MethodDef);
  taMisc::types.Add(&TA_T3NodePtr_ref);
    TA_T3NodePtr_ref.AddParents(&TA_T3NodePtr);
  taMisc::types.Add(&TA_T3DataView_List);
    TAI_T3DataView_List = new T3DataView_List;
    TA_T3DataView_List.AddParFormal(&TA_class);
    TA_T3DataView_List.AddParCache(&TA_taBase);
    TA_T3DataView_List.AddClassPar(&TA_taList_T3DataView_,0);
  taMisc::types.Add(&TA_const_T3DataView_List);
    TA_const_T3DataView_List.AddParents(&TA_const, &TA_T3DataView_List);
  taMisc::types.Add(&TA_T3DataView_ptr);
    TA_T3DataView_ptr.AddParents(&TA_T3DataView);
  taMisc::types.Add(&TA_const_T3DataView_List_ref);
    TA_const_T3DataView_List_ref.AddParents(&TA_const_T3DataView_List);
  taMisc::types.Add(&TA_FloatTransform_ptr);
    TA_FloatTransform_ptr.AddParents(&TA_FloatTransform);
  taMisc::types.Add(&TA_T3DataViewRoot_ptr);
    TA_T3DataViewRoot_ptr.AddParents(&TA_T3DataViewRoot);
  taMisc::types.Add(&TA_const_T3DataView);
    TA_const_T3DataView.AddParents(&TA_const, &TA_T3DataView);
  taMisc::types.Add(&TA_const_T3DataView_ref);
    TA_const_T3DataView_ref.AddParents(&TA_const_T3DataView);
  taMisc::types.Add(&TA_taPtrList_T3DataView_);
    TAI_taPtrList_T3DataView_ = new taPtrList<T3DataView>;
    TA_taPtrList_T3DataView_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_T3DataView_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("T3DataView_ptr", 1, 1, 0);
    sbt->AddParents(&TA_T3DataView);
    TA_taPtrList_T3DataView_.sub_types.Add(sbt);
    sbt = new TypeDef("const_T3DataView", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_T3DataView);
    TA_taPtrList_T3DataView_.sub_types.Add(sbt);
    sbt = new TypeDef("const_T3DataView_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_T3DataView_.sub_types.FindName("const_T3DataView"));
    TA_taPtrList_T3DataView_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_T3DataView_,TA_taPtrList_T3DataView__MethodDef);
  taMisc::types.Add(&TA_T3DataView_PtrList);
    TAI_T3DataView_PtrList = new T3DataView_PtrList;
    TA_T3DataView_PtrList.AddParFormal(&TA_class);
    TA_T3DataView_PtrList.AddClassPar(&TA_taPtrList_T3DataView_,0);
  taMisc::types.Add(&TA_const_T3DataViewPar);
    TA_const_T3DataViewPar.AddParents(&TA_const, &TA_T3DataViewPar);
  taMisc::types.Add(&TA_const_T3DataViewPar_ref);
    TA_const_T3DataViewPar_ref.AddParents(&TA_const_T3DataViewPar);
  taMisc::types.Add(&TA_const_SoPath_ptr);
  taMisc::types.Add(&TA_const_T3DataViewRoot);
    TA_const_T3DataViewRoot.AddParents(&TA_const, &TA_T3DataViewRoot);
  taMisc::types.Add(&TA_const_T3DataViewRoot_ref);
    TA_const_T3DataViewRoot_ref.AddParents(&TA_const_T3DataViewRoot);
  taMisc::types.Add(&TA_iT3ViewspaceWidget_ptr);
    TA_iT3ViewspaceWidget_ptr.AddParents(&TA_iT3ViewspaceWidget);
  taMisc::types.Add(&TA_T3DataViewer_ptr);
    TA_T3DataViewer_ptr.AddParents(&TA_T3DataViewer);
  taMisc::types.Add(&TA_const_T3DataViewer);
    TA_const_T3DataViewer.AddParents(&TA_const, &TA_T3DataViewer);
  taMisc::types.Add(&TA_const_T3DataViewer_ref);
    TA_const_T3DataViewer_ref.AddParents(&TA_const_T3DataViewer);
  taMisc::types.Add(&TA_T3CBar);
    TA_T3CBar.AddParFormal(&TA_class);
    TA_T3CBar.AddClassPar(&TA_T3NodeLeaf,0);
    tac_AddMembers(TA_T3CBar,TA_T3CBar_MemberDef);
    tac_AddMethods(TA_T3CBar,TA_T3CBar_MethodDef);
  taMisc::types.Add(&TA_tabDataTableViewType);
    TAI_tabDataTableViewType = new tabDataTableViewType;
    TA_tabDataTableViewType.AddParFormal(&TA_class);
    TA_tabDataTableViewType.AddClassPar(&TA_tabGroupViewType,0);
  taMisc::types.Add(&TA_iDataTable);
    TA_iDataTable.AddParFormal(&TA_class);
    sbt = new TypeDef("inherited", "", 
	"", "", "", sizeof(int), (void**)0);
    sbt->AddParFormal(&TA_class);
    sbt->AddParents(&TA_QTable);
    TA_iDataTable.sub_types.Add(sbt);
    tac_AddMethods(TA_iDataTable,TA_iDataTable_MethodDef);
  taMisc::types.Add(&TA_iDataTablePanel);
    TA_iDataTablePanel.AddParFormal(&TA_class);
    TA_iDataTablePanel.AddClassPar(&TA_iDataPanelFrame,0);
  taMisc::types.Add(&TA_const_QColorGroup_ref);
  taMisc::types.Add(&TA_iDataTable_ptr);
    TA_iDataTable_ptr.AddParents(&TA_iDataTable);
  taMisc::types.Add(&TA_T3Axis);
    TA_T3Axis.AddParFormal(&TA_class);
    TA_T3Axis.AddClassPar(&TA_T3NodeLeaf,0);
    tac_AddEnum(TA_T3Axis, "Axis", "", "", "", "", TA_T3Axis_Axis);
    tac_AddMethods(TA_T3Axis,TA_T3Axis_MethodDef);
  taMisc::types.Add(&TA_const_T3Color);
    TA_const_T3Color.AddParents(&TA_const, &TA_T3Color);
  taMisc::types.Add(&TA_const_T3Color_ref);
    TA_const_T3Color_ref.AddParents(&TA_const_T3Color);
  taMisc::types.Add(&TA_T3GraphLine);
    TA_T3GraphLine.AddParFormal(&TA_class);
    TA_T3GraphLine.AddClassPar(&TA_T3NodeLeaf,0);
    tac_AddEnum(TA_T3GraphLine, "LineStyle", " corresponds to DA_GraphViewSpec::LineStyle", "", "", "", TA_T3GraphLine_LineStyle);
    tac_AddEnum(TA_T3GraphLine, "MarkerStyle", " MUST correspond to GraphColSpec::PointStyle", "", "", "", TA_T3GraphLine_MarkerStyle);
    tac_AddMethods(TA_T3GraphLine,TA_T3GraphLine_MethodDef);
  taMisc::types.Add(&TA_T3Graph);
    TA_T3Graph.AddParFormal(&TA_class);
    TA_T3Graph.AddClassPar(&TA_T3NodeParent,0);
    tac_AddMethods(TA_T3Graph,TA_T3Graph_MethodDef);
  taMisc::types.Add(&TA_AxisView);
    TAI_AxisView = new AxisView;
    TA_AxisView.AddParFormal(&TA_class);
    TA_AxisView.AddParCache(&TA_taBase);
    TA_AxisView.AddClassPar(&TA_T3DataView,0);
    tac_AddEnum(TA_AxisView, "Axis", " note: s only be X,Y,Z, same as T3Axis::Axis", "", "", "", TA_AxisView_Axis);
    tac_AddMembers(TA_AxisView,TA_AxisView_MemberDef);
    tac_AddMethods(TA_AxisView,TA_AxisView_MethodDef);
  taMisc::types.Add(&TA_GraphLine);
    TAI_GraphLine = new GraphLine;
    TA_GraphLine.AddParFormal(&TA_class);
    TA_GraphLine.AddParCache(&TA_taBase);
    TA_GraphLine.AddClassPar(&TA_T3DataView,0);
    tac_AddMembers(TA_GraphLine,TA_GraphLine_MemberDef);
    tac_AddMethods(TA_GraphLine,TA_GraphLine_MethodDef);
  taMisc::types.Add(&TA_GraphView);
    TAI_GraphView = new GraphView;
    TA_GraphView.AddParFormal(&TA_class);
    TA_GraphView.AddParCache(&TA_taBase);
    TA_GraphView.AddClassPar(&TA_T3DataViewPar,0);
    tac_AddMembers(TA_GraphView,TA_GraphView_MemberDef);
    tac_AddMethods(TA_GraphView,TA_GraphView_MethodDef);
  taMisc::types.Add(&TA_GraphViews);
    TAI_GraphViews = new GraphViews;
    TA_GraphViews.AddParFormal(&TA_class);
    TA_GraphViews.AddParCache(&TA_taBase);
    TA_GraphViews.AddClassPar(&TA_T3DataViewPar,0);
    tac_AddMembers(TA_GraphViews,TA_GraphViews_MemberDef);
    tac_AddMethods(TA_GraphViews,TA_GraphViews_MethodDef);
  taMisc::types.Add(&TA_AxisView_ptr);
    TA_AxisView_ptr.AddParents(&TA_AxisView);
  taMisc::types.Add(&TA_T3Axis_ptr);
    TA_T3Axis_ptr.AddParents(&TA_T3Axis);
  taMisc::types.Add(&TA_const_AxisView);
    TA_const_AxisView.AddParents(&TA_const, &TA_AxisView);
  taMisc::types.Add(&TA_const_AxisView_ref);
    TA_const_AxisView_ref.AddParents(&TA_const_AxisView);
  taMisc::types.Add(&TA_GraphLine_ptr);
    TA_GraphLine_ptr.AddParents(&TA_GraphLine);
  taMisc::types.Add(&TA_XAxisSpec_ptr);
    TA_XAxisSpec_ptr.AddParents(&TA_XAxisSpec);
  taMisc::types.Add(&TA_ZAxisSpec_ptr);
    TA_ZAxisSpec_ptr.AddParents(&TA_ZAxisSpec);
  taMisc::types.Add(&TA_T3GraphLine_ptr);
    TA_T3GraphLine_ptr.AddParents(&TA_T3GraphLine);
  taMisc::types.Add(&TA_const_GraphLine);
    TA_const_GraphLine.AddParents(&TA_const, &TA_GraphLine);
  taMisc::types.Add(&TA_const_GraphLine_ref);
    TA_const_GraphLine_ref.AddParents(&TA_const_GraphLine);
  taMisc::types.Add(&TA_GraphView_ptr);
    TA_GraphView_ptr.AddParents(&TA_GraphView);
  taMisc::types.Add(&TA_GraphletSpec_ptr);
    TA_GraphletSpec_ptr.AddParents(&TA_GraphletSpec);
  taMisc::types.Add(&TA_T3Graph_ptr);
    TA_T3Graph_ptr.AddParents(&TA_T3Graph);
  taMisc::types.Add(&TA_const_GraphView);
    TA_const_GraphView.AddParents(&TA_const, &TA_GraphView);
  taMisc::types.Add(&TA_const_GraphView_ref);
    TA_const_GraphView_ref.AddParents(&TA_const_GraphView);
  taMisc::types.Add(&TA_GraphViews_ptr);
    TA_GraphViews_ptr.AddParents(&TA_GraphViews);
  taMisc::types.Add(&TA_T3NodeParent_ptr);
    TA_T3NodeParent_ptr.AddParents(&TA_T3NodeParent);
  taMisc::types.Add(&TA_T3CBar_ptr);
    TA_T3CBar_ptr.AddParents(&TA_T3CBar);
  taMisc::types.Add(&TA_const_GraphViews);
    TA_const_GraphViews.AddParents(&TA_const, &TA_GraphViews);
  taMisc::types.Add(&TA_const_GraphViews_ref);
    TA_const_GraphViews_ref.AddParents(&TA_const_GraphViews);
  taMisc::types.Add(&TA_SoFieldContainer);
    TA_SoFieldContainer.AddParFormal(&TA_class);
    TA_SoFieldContainer.AddClassPar(&TA_SoBase,0);
  taMisc::types.Add(&TA_NoScale_Text_G_ptr);
    TA_NoScale_Text_G_ptr.AddParents(&TA_NoScale_Text_G);
  taMisc::types.Add(&TA_NoScale_Text_G);
    TA_NoScale_Text_G.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_Xform_ptr);
    TA_Xform_ptr.AddParents(&TA_Xform);
  taMisc::types.Add(&TA_Xform);
    TA_Xform.AddParFormal(&TA_class);
    TA_Xform.AddParCache(&TA_taBase);
    TA_Xform.AddParents(&TA_taNBase);
  taMisc::types.Add(&TA_const_QPixmap);
    TA_const_QPixmap.AddParents(&TA_const, &TA_QPixmap);
  taMisc::types.Add(&TA_QPixmap);
    TA_QPixmap.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ulong);
    TA_ulong.AddParents(&TA_unsigned_long_int);
  taMisc::types.Add(&TA_unsigned_long_int);
    TA_unsigned_long_int.AddParents(&TA_unsigned_long, &TA_int);
  taMisc::types.Add(&TA_int64_t);
    TA_int64_t.AddParents(&TA_long_long);
  taMisc::types.Add(&TA_long_long);
    TA_long_long.AddParents(&TA_long);
  taMisc::types.Add(&TA_SoFont_ptr);
    TA_SoFont_ptr.AddParents(&TA_SoFont);
  taMisc::types.Add(&TA_SoFont);
    TA_SoFont.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoAsciiText_ptr);
    TA_SoAsciiText_ptr.AddParents(&TA_SoAsciiText);
  taMisc::types.Add(&TA_SoAsciiText);
    TA_SoAsciiText.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoTransform_ptr);
    TA_SoTransform_ptr.AddParents(&TA_SoTransform);
  taMisc::types.Add(&TA_SoTransform);
    TA_SoTransform.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoMaterial_ptr);
    TA_SoMaterial_ptr.AddParents(&TA_SoMaterial);
  taMisc::types.Add(&TA_SoMaterial);
    TA_SoMaterial.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_QMimeSource);
    TA_const_QMimeSource.AddParents(&TA_const, &TA_QMimeSource);
  taMisc::types.Add(&TA_iT3DataViewer_ptr);
    TA_iT3DataViewer_ptr.AddParents(&TA_iT3DataViewer);
  taMisc::types.Add(&TA_iT3DataViewer);
    TA_iT3DataViewer.AddParFormal(&TA_class);
    TA_iT3DataViewer.AddParents(&TA_iTabDataViewer);
  taMisc::types.Add(&TA_QScrollBar_ptr);
    TA_QScrollBar_ptr.AddParents(&TA_QScrollBar);
  taMisc::types.Add(&TA_QScrollBar);
    TA_QScrollBar.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_SoQtRenderArea_ptr);
    TA_SoQtRenderArea_ptr.AddParents(&TA_SoQtRenderArea);
  taMisc::types.Add(&TA_SoQtRenderArea);
    TA_SoQtRenderArea.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QTable);
    TA_QTable.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QTableItem_ptr);
    TA_QTableItem_ptr.AddParents(&TA_QTableItem);
  taMisc::types.Add(&TA_QTableItem);
    TA_QTableItem.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QPainter_ptr);
    TA_QPainter_ptr.AddParents(&TA_QPainter);
  taMisc::types.Add(&TA_QPainter);
    TA_QPainter.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_iColor);
    TA_const_iColor.AddParents(&TA_const, &TA_iColor);


  taMisc::in_init = false;
} 

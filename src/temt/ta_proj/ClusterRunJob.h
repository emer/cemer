// Co2018ght 2016-2017, Regents of the University of Colorado,
// Carnegie Mellon University, Princeton University.
//
// This file is part of The Emergent Toolkit
//
//   This library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   This library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.

#ifndef ClusterRunJob_h
#define ClusterRunJob_h 1

// parent includes:
#include <taNBase>

// member includes:
#include <taDateTime>

// declare all other types mentioned but not required to include:

taTypeDef_Of(ClusterRunJob);

class TA_API ClusterRunJob : public taNBase {
  // contains information about a single cluster run job -- data typically maintained in tables in ClusterRun -- available here for currently running job if running on a cluster
INHERITED(taNBase)
public:
  static        ClusterRunJob*  cur_job; // #NO_SAVE #HIDDEN current job data if this emergent process is running on a cluster at the current time, and GetCurJob() method has been run successfully
  
  String        tag;            // unique tag id for this job -- all files etc are named according to this tag
  String        label;          // label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run
  String        notes;          // notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results
  String        filename;       // name of the specific project used for this job -- because multiple versions of a model are often run under the same project name
  String        params;         // emergent parameters based on currently selected items in the ClusterRun
  String        status;         // status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED
  String        status_info;    // more detailed information about status
  taDateTime    submit_time;    // when was the job submitted (tracks time from emergent client submission)
  taDateTime    start_time;     // when did the job actually start running
  taDateTime    end_time;       // when did the job finish running
  String        running_time;   // total running time in days/hours/minutes
  String        job_no;         // job number on cluster -- assigned once the job is submitted to the cluster
  String        job_out;        // job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file
  String        job_out_file;   // job output file -- file name containing full job output information -- file name should be tag.out
  String        dat_files;      // list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat
  String        other_files;    // list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat

  // Search algo populates these fields.
  int           command_id;     // id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)
  String        command;        // emergent command line, up to point of parameters

  // Populated from values the user enters/chooses.
  String        repo_url;       // name of repository to run job on
  String        cluster;        // name of cluster to run job on
  String        user;           // user who ran this job
  String        queue;          // if specified, indicate a particular queue on the computing resource
  String        run_time;       // how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate
  taDateTime    run_time_end;   // computed time at which the job will terminate, based on run_time and start_time
  bool          term_state_saved; // has state been saved just prior to termination (i.e., just before run_time_end -- attempts to save state within the last 5 minutes of running) -- see CurJobCheckSaveTermState method -- this flag is NOT part of the standard ClusterRun state

  int           ram_gb; // how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources
  int           n_threads;      // number of parallel threads to use for running
  int           mpi_nodes;      // number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi
  int           mpi_per_node;   // number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node
  int           pb_batches;     // if > 0, use parallel batch mode with this number of batches
  int           pb_nodes;       // actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job
  
  // these two comprise the tag -- internal stuff user doesn't need to see
  String        submit_svn;     // svn revision for the original job submission
  String        submit_job;     // index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs
  String        done_svn;       // svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this
  String        last_svn;       // last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to

  static void   MakeCurJobObj(); // make a cur_job instance

  static bool   CurJobCheckSaveTermState();
  // check whether the cur_job should save pre-termination state -- will return true only once, approximately 5 minutes prior to the run_time_end
  
  TA_SIMPLE_BASEFUNS(ClusterRunJob);
protected:
  void  UpdateAfterEdit_impl() override;
  
private:
  void Initialize();
  void Destroy()     { };
};

#endif // ClusterRunJob_h

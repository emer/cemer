@c uncomment the following two lines for 'update every node' command
@c @node  gui
@c @chapter Guide to the Graphical User Interface (GUI)

This chapter provides a general guide and reference for using the
graphical user interface to the PDP++ software.  This covers all of the
generic aspects of the interface---details about specific parts of the
interface like the network viewer are found in the the section of the
manual that covers the object in question (e.g., @ref{net-view}).

@menu
* gui-windows::                 Window Concepts and Operation
* gui-object::                  The "Object" Menu
* gui-actions::                 The "Actions" Menu
* gui-subgroup::                The SubGroup Menu(s)
* gui-edit::                    The Edit Dialog
* gui-settings::                Settings Affecting GUI Behavior
* gui-colors::                  Color Scale Specifications
* gui-file-requester::          File Requester
* gui-obj-chooser::             Object Chooser/Browser
@end menu


@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-windows, gui-object, gui, gui
@section Window Concepts and Operation
@cindex Window Hierarchy

In PDP++ the hierarchy of objects provides the basis for most of the gui
(Graphical User Interface) interaction. To access a sub-object of a
class, the best place to start is with the gui window for the parent
class instance and work your way down to the sub-object. The higher
levels of the hierarchy have windows which are mapped to the screen when
the object is created. These windowing objects inherit from the base
class @b{WinBase}. When PDP++ starts up, only one of these classes has
been created and thus there is only one window on the screen. The
initial object is an instance of the class PDPRoot, and is the top of
the PDP hierarchy.

@menu
* gui-win-operation::           How to operate Windows
* gui-menu-operation::          How to operate the Menus
* gui-win-view::                Window Views
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  gui-win-operation, gui-menu-operation, gui-windows, gui-windows
@subsection How to operate Windows 
@cindex Window Operation

PDP++ relies on your window manager for positioning, and iconifying the
graphical windows of the program. Please refer to your window manager's
manual for more information on the mouse movements and button presses
needed to accomplish these tasks. For all the window objects in PDP++
there are CSS commands which ask the window manager to position or
iconify the windows associated with the object. It is up to the window
manager to provide the correct behavior for these "hints". PDP++ WinBase
Window's position and iconification status can be manipulated with the
following commands:

@tindex WinBase
@table @code
@item GetWinPos()
@findex GetWinPos on WinBase
Stores the window's current position and size on the object. When the object
is saved the position and size of its window will be saved as well so that the
window has the correct geometry when the object is loaded at a later time.
@item ScriptWinPos()
@findex ScriptWinPos on WinBase
Generates css script code for positioning the window at its current location
and prints the code  to the output window or to a recording script.
@item  SetWinPos(float left, float bottom, float width, float height)
@findex SetWinPos on WinBase
Asks the window manager to resize and move the window to the specified
parameters. If no parameters are given, this functions uses the parameters
stored on the object.
@item Resize (float width, float height)
@findex Resize on WinBase
Asks the window manager to resize the window to the specified parameters. If
no parameters are given, this functions uses the parameters stored on the
object.
@item Move (float left, float bottom)
@findex Move on WinBase
Asks the window manager to move the window to the specified parameters. If no
parameters are given, this functions uses the parameters stored on the object.
@item Iconify()
@findex  Iconify on WinBase
Asks the window manager to iconify the window.
@item  DeIconify()
@findex  DeIconify on WinBase
Asks the window manager to deiconify the window.
@end table


@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  gui-menu-operation, gui-win-view, gui-win-operation, gui-windows
@subsection How to operate Menus
@cindex Menu Operation

In all WinBase windows, there is a horizontal menubar along the top. In
this menubar is a "Object" menu (@pxref{gui-object}), and also
"Subgroup" menus (@pxref{gui-subgroup}) for access to the sub-objects in
this class.

To access the menus press and hold button-1 (left button) on the mouse
while the mouse pointer is over the menu name. A smaller vertical menu
window will pop up under the mouse pointer. Moving the mouse vertically
while the button is still pressed will highlight the different choices
in a the menu. Some of the items in the menu may have three dots
@samp{...} after them. When highlighting these menu items a cascaded
menu will popup to the right of the selected menu item. The cascaded
submenu may be traversed by moving the mouse pointer horizontally into
the submenu, and then moving the mouse vertically as before. Again,
button-1 must be pressed and held down during this operation. To select
an item, release the mouse button while the mouse pointer is over the
highlighted selection. To cancel the menu (to select nothing) move the
mouse out of the menu and release the mouse button. Menu items which
spawn submenus may not be selected. A menu may be pinned (it will stay
on the screen after the mouse is released) by releasing the mouse while
the pointer is on the menu name or on a submenu's name. A selection can
be made from a pinned window by clicking (pressing and then releasing a
button) on the desired selection. This will also cause the pinned menu
to become unpinned and it will disappear.

@b{Note:} This applies specifically to the motif mode in
InterViews. Open-look or other modes may be slightly different.

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  gui-win-view,  , gui-menu-operation, gui-windows
@subsection Window Views
@tindex WinView
@cindex Views

Some objects may have multiple windows. These multiple windows are
called views, and provide alternative methods of interacting with the
same object and its data. @b{In a view window then menubar at the top of
the window is split into a left menubar and a right menubar.} The left
menubar contains menus whose actions pertain the the base object of the
view. The right menubar contains menus whose actions pertain to this
particular view only. For instance, a network object may have multiple
netviews. In each netview there will be the left and right menubars
along the top of the window. In the left menubar one would find menus
with function that are particular to the network, such as menus for
adding new layers, or removing all connections. In the right menubar on
would find menus with functions that are particular to the view, such as
setting the colors or shape of the units in the view.

Each view has an associated list of Schedule processes
(@pxref{proc-sched}) which update the view in the course of their
processing. By adding or removing these "updaters", one can control the
grain at which changing data is displayed. For instance, in the netview
the colors of the units change to reflect their current values whenever
the view is updated. If the updater was a trial level process then the
view would display new values for all the units after every trial.

@heading WinView Functions

@table @code
@item AddUpdater(SchedProcess*  updater)
@findex AddUpdater on WinView
Add the schedproc to the list of updaters for this view. (and
vice-versa).
@item RemoveUpdater(SchedProcess*  updater)
@findex RemoveUpdater on WinView
Removes the schedproc to the list of updaters for this view. (and
vice-versa).
@item InitDisplay()
@findex InitDisplay on WinView
Initializes and graphically rebuilds the view's display.
@item UpdateDisplay()
@findex UpdateDiplay on WinView
Refreshes the winview's display to reflect changes in the base object's
values. This is the function that is called by the updater processes.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-object, gui-actions, gui-windows, gui
@section The "Object" Menu
@cindex Object Menu
@cindex Menu, Object

The "Object" menu always appears as the left most menu in a WinBase's
menubar.  The "Object" menu for each object is used to perform file
based actions on the object itself. Many of these actions involve the
use of a file requester dialog. @xref{gui-file-requester}.  These
actions on the object can also be called through css (e.g., the Print
action can be called from css as @samp{object.Print()}).  The "Object"
menu has the following menu actions:

@table @code
@item Load
@findex Load on taBase
Load a text object dump of an object of the same class as this object on
top of this object, replacing the values of fields of this object with
the values of the saved object's fields. The saved object file is
selected with the file requester.
@item Save
@findex Save on taBase
Save a text object dump of this object in a file created with the file
requester, or with the object's most recently used filename for saving.
@item SaveAs
@findex SaveAs on taBase
Save a text object dump of this object in a -new- file
created with the file requester.
@item Edit
@findex Edit on taBase
The Edit menu action brings up an Edit Dialog on the object.
@xref{gui-edit}.
@item Close
@findex Close on taBase
The Close menu action will attempt to close/delete the object.
If the object is referenced or pointed to by other objects, then
it will not actually be deleted, only the windows which display
it will be removed. The user must confirm the deletion if it
is possible to safely delete the object. @b{NOTE THAT CLOSE IS NOT
ICONIFY!, it really does delete the object, not just close the menu.}
@item Copy From
@findex CopyFrom on taBase
Copies from another object of the same or related type --- replace all
of the current data in the object with those in another.  In the menu,
only the same or subtypes of this object will be shown, but in the
script, any type of related object can be passed to this function.
@item Copy To
@findex CopyTo on taBase
Copies the data in this object to another object.  This can be useful
if you want to copy from a more basic type of object (e.g., Environment)
to a derived type (e.g., FreqEnv) -- CopyFrom won't show the more basic
type of object to copy from, but CopyTo will show the derived type.
@item DuplicateMe
@findex DuplicateMe on taBase
Makes another copy of this object -- creates a new object and then
copies from this current object to that new object.  Note this is
DuplicateMe in the script code.
@item ChangeMyType
@findex ChangeMyType on taBase
Changes the type of this object to be another related type (e.g., change
to a FreqEnv from an Environment).  Will usually do a good job of
updating the various links to this object if changed.  Not good for
objects within a network, or generally for Stat objects that are
aggregated.  This is ChangeMyType in the script code.
@item SelectForEdit
@findex SelectForEdit on taBase
Allows you to select a field (member) of this object to be edited in a
@b{SelectEdit} object, which consolidates parameters and functions
across multiple objects into a single edit dialog
(@pxref{proj-seledit}).
@item SelectFunForEdit
@findex SelectFunForEdit on taBase
Allows you to select a function (method) of this object to be
accessible from a @b{SelectEdit} object, which consolidates parameters
and functions across multiple objects into a single edit dialog
(@pxref{proj-seledit}).
@item Help
@findex Help on taBase
Will automatically pull up a help browser for information relevant to
this object.  Depends on the browser actually running on your system, as
specified in the Settings on the root object.
@item Print
@findex Print on taBase
The Print menu action will save a snapshot of the entire object's window
to a file in Postscript format using a file requester.  Note that this
printout file uses structured graphics so it will scale well if resized,
etc.
@item Print Data
@findex PrintData on taBase
The Print data menu action will save a snapshot of the window's data,
not including the menubars and window decoration, to a file in
Postscript format using a file requester.
@item Update Menus
@findex UpdateMenus on taBase
If objects are created or deleted, sometimes the menus of their parent
objects can become out of date. If this appears to be the case then
use the "update menus" menu action on the parent object to fix the menus.
The "update menus" menu action recursively traverses the menus of the
object and its subobjects, adding and deleting menu items appropriately.
@item Iconify
@findex Iconify on taBase
This will iconify the window (shrink down to an iconic representation,
to get it out of your way).
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-actions, gui-subgroup, gui-object, gui
@section The "Actions" Menu
@cindex Actions Menu
@cindex Menu, Actions

Some objects will have an "Actions" menu following their "Object" menu.
In the Action menu are functions which are apply specifically to the
object and are not the common file based functions found on the Object
menu. If you wish to perform a function directly on the object you
are viewing in the window, the "Actions" menu is a good place to look.
For more specific information concerning an object's "Action" menu
please refer to the section of this manual which pertains to the
object itself.


@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-subgroup, gui-edit, gui-actions, gui
@section The SubGroup Menu(s)
@cindex Subgroup Menu
@cindex Menu, Subgroup

A subgroup menu appears in the menubar of a WinBase object for each of
the group members of the object. The name of the menu corresponds to the
name of the group member (e.g., The Layer object has a group of units
and a group of projections. It would have two subgroup menus, one
labeled @code{.units} and a second labeled @code{.projections}. The "."
before the name of the subgroup is used to indicate that the subgroups
are sub-objects of the WinBase object. In the CSS script language one
would access objects in these subgroups using the "." operator. (e.g.,
To access the first network in the project one would type
@samp{.projects.networks[0]}). In addition the subgroup menus appear in
a non-italicized font to distinguish them from the "Object" and "Action"
menus of the WinBase. The subgroup menu's have the following menu
choices.  Occasionally subgroup menus may add additional menu choices as
well (e.g., The Processes submenu of the Project has the menu choice
@i{Control Panel} which opens a control panel dialog for one of the
processes in the subgroup). Some of the group operations require the use
of a file requester. @xref{gui-file-requester}.

@table @code
@item Edit
@findex Edit on taGroup
The Edit action brings up a Group Edit Dialog for the group or an Edit
Dialog for an individual object (@ref{gui-edit}).
@item New
@findex New on taGroup
The New action allows the use to create new objects in the group or in a
subgroup of the group. The user can chose to create objects of the
base object type, objects of a subclass of the base object type, or a
subgroup object. A popup dialog appears which enables the user to select
the number of objects to create, the type of objects, and where to place
them. Sometimes the popup dialog may have additional fields and toggles
which are particular to the item being created. If the auto_edit flag in the
global settings (@pxref{gui-settings}) is turned on, an edit
dialog will be created for the newly created objects when button-1 (left
button) is pressed on the OK button of the popup dialog. If button-2 (middle
button) is pressed the edit dialog will be created only if the auto_edit
variable is off. When button-3 (right button) is pressed an edit dialog will
always be created.
@item Open In
@findex OpenIn on taGroup
The "Open in" action allows the user to open a previously-saved object
file and add the data into the group. @xref{obj-basics-files}.
@item Load Over
@findex LoadOver on taGroup
The "Load Over" action allows the user to open a previously-saved object
file and overwrite the objects in the group with the data in the file. @xref{obj-basics-files}.
@item Save
@findex Save on taGroup
The Save action allows the user to save the group or a group element as
a PDP++ object file using the file requester or the object's most
recently used name for saving. @xref{obj-basics-files}.
@item Save As
@findex SaveAs on taGroup
The Save As action allows the user to save the group or a group element in
a new PDP++ object file using the file requester. @xref{obj-basics-files}.
@item Remove
@findex Remove on taGroup
The Remove action allows the user to remove the group or a group
element. The user is prompted with a confirmation dialog to confirm the
choice. However, If the chosen object is referenced by other objects
then it will not be deleted.
@item Duplicate
@findex Duplicate on taGroup
The Duplicate action allows the user to add a duplicate of one of the
objects in the group to the group or its subgroups.
@item Move Within
@findex Move on taGroup
This allows the user to move objects to new positions within the group
(e.g., for rearranging the order of layers in the network, which is
important for the feedforward Bp algorithm).
@item View Window
@findex ViewWindow on taGroup
View Window brings the window associated with selected object to the
front, deiconifies it, or creates it if a window does not exist.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  gui-edit, gui-settings, gui-subgroup, gui
@section The Edit Dialog
@cindex Dialog, Edit
@cindex Editing Objects
@cindex Objects, Editing

The Edit Dialog allows the user to both visually inspect and modify the
values of an object's fields. As an inspection tool, the user can use
and edit dialog to check the values of an object's fields, and as an
editing tool the user can use the edit dialog to change the values
of some or all of those fields. For some objects, the edit dialog is the
only representation available for inspecting, or accessing it members.
Other objects may have extended edit dialogs or even multiple views
which may also allow modification of the object's fields. An edit dialog
also presents the user with easy access to the substructures of an
object including editing of its subgroups and arrays. In addition the
edit dialog may allow access to certain member functions on an object.
Edit Dialogs are created by choosing "Edit" from an object's menu or by
the @code{EditObj} command in css (@pxref{css-commands}).

The basic layout of the edit dialog includes a list of object member
names which are listed in a vertical column along the left hand side of
the display.  Clicking on a member name will popup a short description
of the member.  Certain members may not appear in the edit dialog. This
is determined by the @code{show_iv} field of the global settings
(@pxref{gui-settings}).  Typically the unshown members will not be of
interest to the average user, or will contain values which are
potentially dangerous to change.

The @i{Show} menu on the right-hand side of the menu bar at the top of
the edit dialog will allow you to control how much stuff to view on a
case-by-case basis.  Typically, you'll only want to switch to viewing
@i{Detail}, which is not viewed by default, but all levels can be
controlled in this menu.  If you suspect that something is not there
which should be, try selecting @i{Show/Detail}.

@cindex Defaults, Edit dialogs
Fields that are highlighted in bright yellow indicate that the field
value is at variance with the default value for that field.

The values associated with the member names appear to the right.  There
are a number of different graphical representations of the content of
these fields, which are described in the following section.  

In addition, there can be special buttons and menu actions available on
the dialog.  These are described in subsequent sections.

@menu
* gui-edit-fields::             Member Fields
* gui-edit-buttons::            Dialog Buttons
* gui-edit-menus::              Dialog Menus
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-edit-fields, gui-edit-buttons, gui-edit, gui-edit
@subsection Member Fields

The member fields in an edit dialog can be found to the right of the
member name. These member fields can appear in many different forms.
Sometimes there may even be more than one on a line.

@heading Field Editor

The Field Editor is used for editing strings (e.g., an object's name), and
number values. It appears as a box with text in it. If you click on the
box an Ibeam cursor appears at the click location. When the mouse is in
the box, the characters you type will be entered at the Ibeam location
point as you would expect. 

@b{You must place mouse pointer in field to start editing!}  However,
once you have started typing, the mouse pointer need only remain in the
overall window. 

Some Emacs style editing keys are also recognized, in addition to the
standard keypad arrow and related keys:

@itemize @asis
@item Ctrl-f moves Ibeam forward (also right arrow key)
@item Ctrl-b moves Ibeam backward (also left arrow key)
@item Ctrl-a moves Ibeam to beginning of line (also Home)
@item Ctrl-e moves Ibeam to end of line (also End)
@item Ctrl-d deletes character to right of Ibeam (also Del)
@item Ctrl-u selects the entire line -- subsequent typing replaces contents
@item Ctrl-n, TAB, or RETURN moves the Ibeam to the next field editor
@item Ctrl-p or Shift-TAB moves the Ibeam to the previous field editor
@item Alt-n moves to next object in list editor (also PageDn)
@item Alt-p moves to previous object in list editor (also PageUp)
@end itemize

You can also hit shift-mousebutton2 (middle button) to scroll the text
with the hand cursor.

If the item to be edited is an integer then increment/decrement arrow
buttons will appear to the right of the field editor. Pressing on these
buttons will increase or decrease the value in the field editor.
Pressing button-1 (left button) changes the value by 1, button-2 (middle
button) changes the value by 10, and button-3 (right button) changes the
value by 100. If the mouse button is pressed and held, the action will
auto repeat.

@heading Read Only Member Field

The read only member field is like the FieldEditor except the user
cannot edit the field. It is used for display purposes only.

@heading  Boolean CheckBox

The checkbox is used for boolean values that are either on or off.
Clicking on the checkbox changes its values. A checkmark or solid block
indicates an ON, TRUE or 1 value, while no checkmark or an empty box
indicates an OFF, FALSE or 0 value.

@heading Enum Menus

The Enum menu is used for enumerated types. These types may have one of
a number of symbolic values. The menu is shown with the member's
current value. by clicking on the menu the other value choices appear in
a popup menu. Selecting an alternate value from the menu sets the menu's
value to the new value.

@heading SubObject Menus

A SubObject menu is used when an instance of a class is part of the
edited object and that instance is not edited inline
(@pxref{gui-edit-fields}). The menu has the name "Type: Actions" where
Type is the class name of the subobject. The menu contains the following
functions as well as object specific functions that are unique to the
subobject class.

@itemize @asis
@item Load:             Load an instance of the subobject class
@item Save:             Save the subobject using a file requester
@item SaveAs:           Save the subobject with its last saved name
@item Edit:             Edit the subobject
@end itemize

@heading Object Pointer Menus

Object pointer menus are used when the member is a pointer to another
object. The current value of the pointer is shown in the menubar as the
pathname of the object that is pointed to. If the pointer is not set, the name
on the menubar will be set to NULL. Clicking on the menubar brings up a popup
menu of other objects of similar type. Selecting an alternate object sets the
menubar to the name of that object. The popup menu also allows the user to set
the pointer to NULL and to Edit the object currently pointed to.

@heading Object Type Menus

The object type menus are used when a member specifies a type class of
object. This menu allows the user to select from classes which inherit
from it base class. The current selection is displayed in the menubar.

@heading SubGroup Menus

The subgroup menu allows the user to interact with a group member of the
object. The name on the menubar is one of the two forms depending upon whether
or not the group has subgroups. (@pxref{obj-group}).

Clicking on the menubar gives the user the following choices: 

@table @i
@item New
Create new object in the group
@item Load
Load a group from a file using a file requester. @xref{obj-basics-files}.
@item Save
Save the group using a file requester. @xref{obj-basics-files}.
@item SaveAs
Save the group with its last saved name. @xref{obj-basics-files}.
@item Edit
Bring up a Group Edit Dialog of the subgroup
@item RemoveAll
Remove all the elements of the group
@item Remove
Remove an individual element of the group
@item Link
Link an object from another group into this group
@item Move
Rearrange the order of the elements in this group
@item Transfer
Transfer objects from another group into this one
@item EditEl
Edit and individual element of the group
@item Find
Find and edit an object with a given name
@end table

Each of these selections will bring up a dialog for the
user to specify the parameters to the operation.

@heading SubArray Menus

The subarray menu allows the user to interact with a array member of the
object. It appears as an  "Edit" menubar. Clicking on the menubar
gives the user the following choices:

@table @i
@item Load
Load an array from a file using a file requester. @xref{obj-basics-files}.
@item Save
Save the array using a file requester. @xref{obj-basics-files}.
@item SaveAs
Save the array with its last saved name. @xref{obj-basics-files}.
@item Edit
Bring up an Array Edit Dialog for the array
@item Remove
Remove a number of elements from the array at a given index
@item Permute
Permute the order of the elements in the array
@item Sort
Sort the order of the elements in the array
@item El
Show the value of a member of the array at given index
@item Add
Add elements onto the end  the array
@item Insert
Add a number of given values at a certain Array index
@item Find
Find and Show the index of a member of the given value
@item ColorEdit
Bring up a Color Array Editor for number arrays
@end table

@heading Inline Fields

Inline Fields are used for small substructures within an object (e.g., an
object's position, which is only three values: x,y,z). Instead of the
expected SubObject menubar, the object is laid out horizontally across on
line in the Edit Dialog. The names of each of the fields are often
truncated so that the line will not take up too much space. This allows
quicker access and visualization without having to traverse through
multiple dialogs. The fields within an inline field behave as do the
rest of the fields in the dialog.

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-edit-buttons, gui-edit-menus, gui-edit-fields, gui-edit
@subsection Edit Dialog Buttons

At the bottom of the Edit Dialog is a row of buttons which have actions
pertaining to the Edit Dialog's fields. Some of the buttons may be
appropriately inactive due the state of the edit dialog. They will
become active when their action is applicable. The following buttons
will be available:

@table @code
@item Ok
The Ok button stores the information in the dialog's fields in the
object's fields and closes the dialog window.
@item Apply
The Apply button stores the information in the dialogs fields but does
not close the window. If the apply button is highlighted the edit dialog
may contain changes which have not been applied yet. The apply action
can also be generated by pressing the Return key in the body of the
editor, unless the editor has multiple field editors within it
(@pxref{gui-edit-fields}).
@item Revert
The Revert button reloads the information from the object into the
dialog's fields, clearing any changes the user might have made. If the
revert button is highlighted the object's fields might have been changed
"behind the scenes" by another part of the program in which case the information
displayed in the edit dialog may be outdated. The revert action can also
be generated by pressing the Escape key in the body of the editor.
@item Cancel
The Cancel button dismisses the dialog without applying the user's changes.
@item Other Member Buttons
Some objects will add an additional row of member buttons to the Edit
Dialog.(e.g., The Process object adds a row of Run,Step,Init buttons).
These buttons perform additional actions on the object.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-edit-menus,  , gui-edit-buttons, gui-edit
@subsection Edit Dialog Menus

At the top of the edit dialog is a menubar with at least two menus.  The
first menu entitled Object is similar to the Object menu on a WinBase
window. If the edited object is not a WinBase, the "Object" menu my
only provide the "Load", "Save, "Save As", and "Close" menu
choices. (@pxref{gui-object}). The second menu called "Actions" may
contain member functions particular to the edited object's type which
will be called on the edited object.


@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-settings, gui-colors, gui-edit, gui
@section Settings Affecting GUI Behavior
@cindex Settings
@cindex Default Settings
@cindex Customizing, GUI
@cindex GUI, Customizing
@tindex taMisc

There are two primary ways of setting parameters which affect the look
of the GUI.  There is an object called @b{taMisc} which contains
miscellaneous parameters and settings that affect various aspects of the
PDP++ system, but mostly the graphical interface.  This object can be
edited by using the @i{Settings} menu option on the @b{PDPRoot} object.

In addition to the taMisc settings, there are a number of XWindow
resources or Xdefaults that can be set. Also, since PDP++ uses the
InterViews graphics toolkit a number of command line arguments
and InterViews Xresources can also be customized (@pxref{proj-startup}).

@menu
* gui-settings-tamisc::         Settings in taMisc
* gui-settings-xdef::           XWindow Resources (Xdefaults)
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  gui-settings-tamisc, gui-settings-xdef, gui-settings, gui-settings
@subsection Settings in taMisc

The following parameters can be set:

@table @code
@item int display_width
@vindex display_width of taMisc 
Width of the shell display in characters.
@item int sep_tabs
@vindex sep_tabs of taMisc
Number of tabs to separate items by in listings.
@item int max_menu
@vindex max_menu of taMisc
The maximum number of elements in a menu --- if there are more than this
number of instances (tokens) of a given type of object, then the menu
for that type of object will say "<Over max, Select>", meaning that each
item could not be listed separately in the menu, so you select this
option to pull up a object chooser (see @ref{gui-obj-chooser}), which
allows you to choose the object from a longer list.
@item int search_depth
@vindex search_depth of taMisc
The recursive depth at which css stops searching for an object's path.
@item int color_scale_size
@vindex color_scale_size of taMisc
This determines how many colors are in a color scale for a color monitor
(@pxref{gui-colors}).
@item int mono_scale_size
@vindex mono_scale_size of taMisc
This determines how many colors are in a color scale for a monochrome monitor
(@pxref{gui-colors}).
@item ShowMembs show
@vindex show of taMisc
Type of members to show in css.
@item ShowMembs show_iv
@vindex show_iv of taMisc
Type of members to show in edit dialogs
The previous two variables can have one of four "ShowMembs" values:
@table @code
@item ALL_MEMBS
Shows all members. 
@item NO_READ_ONLY
Shows all but read_only members -- stuff that can't be changed.
@item NO_HIDDEN
Shows all but hidden members -- stuff that is hidden because it is not
typically relevant.
@item NO_HID_RO
Shows all but hidden and r/o members. 
@item NO_DETAIL
Shows all but "detail" members -- stuff that might be relevant, but is
not often accessed.
@item NO_HID_DET, etc.
Further combinations of RO, HID, and DET options.
@end table
The default is @code{NO_HID_RO_DET}.
@item TypeInfo type_info
@vindex type_info of taMisc
The amount of information about a class type that is reported when
the "type" command is used in CSS.
Type_info has one of the following values:
@table @code
@item MEMB_OFFSETS
Shows the byte offset of members.
@item All_INFO
Shows all type info except memb_offsets
@item NO_OPTIONS
Shows all info except type options
@item NO_LISTS
Shows all info but lists
@item NO_OPTIONS_LISTS
Shows all info but options and lists
@end table
The default is @code{NO_OPTIONS_LISTS}
@item KeepTokens keep_tok
@vindex keep_tok of taMisc
This sets the Default for keeping tokens (lists of members) for object types.
This can have one of three "KeepTokens" values:
@table @code
@item Tokens
Keep tokens as specified in the type.
@item NoTokens
Do not keep any tokens lists.
@item ForceTokens
Force the keeping of all tokens lists.
@end table
The default is @code{Tokens}.
@item verbose_load
@vindex verbose_load of taMisc
Indicates the amount of information reported in the shell window
when objects are loaded
@item iv_verbose_load
@vindex iv_verbose_load of taMisc
Indicate the amount of information reported in the Loading window
when objects are loaded
The previous two members may have one of the following values:
@table @code
@item QUIET
No information is given
@item MESSAGES
General messages are reported for each object
@item TRACE
Each line of the file is printed as it is loaded
@item SOURCE
Intricate debugging details are reported
@end table
@item bool auto_edit
@vindex auto_edit of taMisc
If this value is on, an edit dialog will appear each time an object is created
with the New dialog. (@pxref{gui-subgroup, , The Subgroup Menu(New)}).
@item AutoRevert auto_revert
@vindex auto_revert of taMisc
In some cases a dialog may be reverted to its old values by a PDP++ process.
This variable controls the behavior of the edit dialog when this situation
occurs. The behavior is determined by one of three values:
@table @code
@item Auto_Apply
Automatically apply changes before auto-reverting
@item Auto_Revert
Automatically revert the edit dialog loosing changes
@item Confirm_Revert
Popup a confirmation dialog to okay reverting
@end table
@item String include_paths
@vindex include_paths of taMisc
Directory Paths used for finding files.  This is an array of string
values that represent paths to find CSS, defaults files, and Help files
in (@pxref{css-settings}, @pxref{proj-settings}, @pxref{proj-objdef}).
@item String tmp_dir
@vindex tmp_dir of taMisc
The directory to use for temporary files
@item String compress_cmd
@vindex compress_cmd of taMisc
Command to use for compressing files
@item String uncompress_cmd
@vindex uncompress_cmd of taMisc
Command to use for uncompressing files
@item String compress_sfx
@vindex compress_sfx of taMisc
Suffix to append to filenames when compressed
@item String help_file_tmplt
@vindex help_file_tmplt of taMisc
Template for converting the type name of an object into a help file --
%t is replaced with the type name.  Include any leading paths to help
files relative to the basic root paths listed on include_paths.
@item String help_cmd
@vindex help_cmd of taMisc
Comand for bringing up a help browser to read help file (typically html,
netscape by default).  %s is subsituted with the help file produced from
@code{help_file_tmplt}.
@end table


@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  gui-settings-xdef,  , gui-settings-tamisc, gui-settings
@subsection XWindow Resources (Xdefaults)
@cindex Xdefaults
@cindex XWindow Resources

The following XWindow resources can be set.  These are typically placed
in the user's @file{.Xdefaults} file in their home directory.

@table @code
@item PDP++*flat
The color of the buttons.  It is typically some kind of greyish
color.  The default has a blueish tint: @code{#c0c4d3}
@item PDP++*background
The color of various non-view background regions.  The default
is an aquamarine color: @code{#70c0d8}.
@item PDP++*name*flat
If you change the valueof background, you should change this one to
match.  It makes the member names in the edit dialogs
(@pxref{gui-edit}) the same color as the background.
@item PDP++*apply_button*flat
The color of the apply button (and other buttons) when they are
the "suggested" choice.  It is a dusty-red by default: @code{#c090b0}.
@item PDP++*FieldEditor*background
The color of the edit fields, default is white.
@item PDP++*font
The generic font to use for buttons, etc:
@code{*-helvetica-medium-r-*-*-10*}.
@item PDP++*name*font
The font to use for member names: @code{*-helvetica-medium-r-*-*-10*}.
@item PDP++*title*font
The font to use for titles of edit dialogs:
@code{*-helvetica-bold-r-*-*-10*}.
@item PDP++*small_menu*font
The font to use for small menus (e.g., those in edit dialogs):
@code{*-helvetica-medium-r-*-10*}.
@item PDP++*small_submenu*font
This font is used for menu items that contain sub-menus (these are also
indicated by three dots after the name)
@code{*-helvetica-medium-r-*-*-10*}.
@item PDP++*big_menu*font
This font is used for big menus like those on the permanent object
windows, default is @code{*-helvetica-medium-r-*-12*}.
@item PDP++*big_submenu*font
For sub menus on big menus: @code{*-helvetica-medium-r-*-*-12*}.
@item PDP++*big_menubar*font
For big menus, the name of the menu itself:
@code{*-helvetica-bold-r-*-*-14*}.
@item PDP++*big_italic_menubar*font
For big menus, name of italicized menu items (i.e. those that apply to
the object and not to its sub-objects):
@code{*-helvetica-bold-o-*-*-14*}.
@item PDP++*double_buffered:
Double buffering makes the display smoother, but can use lots of display
memory.  Default is "on".
@item PDP++*FileChooser.width
The width of the file-chooser in pixels. Default is 100.
@item PDP++*FileChooser.rows
The number of items to list in the file chooser, default is 20.
@item PDP++*clickDelay
This is the number of milliseconds to count two clicks as a
double-click.  The default is 250.
@end table

@subheading For MS Windows Users:

To set XResources under MS Windows, you need to create an "application
defaults" file that is formatted much like the XResources.  There are
two steps for creating this application defaults file:

1. Edit @file{C:\WINDOWS\WIN.INI}, and add the following two lines:

@example
[InterViews]
location = C:\PDP++
@end example

Where the location should be the actual location where you installed
the software.

2. Create a sub-directory under @file{C:\PDP++} (again, use the actual
location) called @file{app-defaults}, and then create a file called
@file{InterViews} in that directory.  This file should contain resource
values you want to set.  For example, to change the amount of time to
detect a double-click, you would enter:

@example
*clickDelay: 400
@end example

To change the overall size of the PDP++ windows (scaling):

@example
*mswin_scale: 1.25
@end example

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-colors, gui-file-requester, gui-settings, gui
@section Color Scale Specifications
@cindex Color
@cindex Color Scales
@cindex Color Scale Specifications
@tindex ColorScaleSpec

Color scales are used in PDP++ to display the values of variables
graphically in various types of displays.  The choice of color scale
depends on personal preferences as well as what type of display the user
has available.  There are a number of different types of color scales
that come with the software, and the user can create their own custom
colorscales.

A color scale is specified by creating a set of different color points.
The actual scale is just the linear interpolation between each of these
points, where the points are distributed evenly through the range of
values covered by the scale.  Thus, if there were three such points in a
color specification that goes from -1 to 1, the first point would
represent the value -1, the middle one would represent 0, and the last
one would represent 1.  Values in between would be represented by
intermediate colors between these points.  The actual number of colors
created in a given color scale is determined by the
@code{color_scale_size} setting parameter for color displays, and
@code{mono_scale_size} for monochrome displays (@pxref{gui-settings}).

The @b{PDPRoot} object contains a group of color specifications called
@code{.colorspecs}, which is where the default color scales and any new
ones the user creates are located.  The default element
(@pxref{obj-group}) of this group represents the default color scale to
use when creating a new display that uses color scales. The defaults are
as follows:

@table @code
@item C_ColdHot
interpolates from violet->blue->grey>->red->yellow
@item C_BlueBlackRed
interpolates from blue->black-red
@item C_BlueGreyRed
interpolates from blue->grey->red
@item C_BlueWhiteRed
interpolates from blue->white->red
@item C_BlueGreenRed
interpolates from blue->green->red
@item C_Rainbow
interpolates from violet->blue->green->yellow->red
@item C_ROYGBIV
interpolates from violet->indigo->blue->green->yellow->red
@item C_DarkLight
interpolates from black->white
@item C_LightDark
interpolates from white->black
@item M_DarkLight
dithers from black->white
@item M_LightDark
dithers from white->black
@item M_LightDarkLight
dithers from white->black->white
@item P_DarkLight
dithers from black->white with a white background for printing
@item P_DarkLight_bright
dithers from black->white with a white background for printing, having a
brighter overall tone than the basic one (a lighter zero value).
@item P_LightDark
dithers from white->black with a white background for printing
@item P_DarkLightDark
same as M_DarkLightDark with a white background for printing
@item P_LightDarkLight
same as M_LightDarkLight with a white background for printing
@end table

The @b{ColorScaleSpec} is the object that specifies the color scale.  It
contains a group of RGBA objects, each of which is used to specify a
point on the colorscale range based on the Red, Green, and Blue values,
plus a "transparency" parameter Alpha. The ColorScaleSpec object has one
primary function.

@table @code
@item GenRanges (ColorGroup* cl, int nper)
@findex GenRanges on ColorScaleSpec
This function creates a range of colors in the ColorGroup by linearly
interpolating nper colors for each RGBA set point value in the
ColorScaleSpec.
@end table

@tindex RGBA
The @b{RGBA} object has the following fields:

@table @code
@item String name
@vindex name of RGBA
The name of the color
@item float r
@vindex red (r) of RGBA
Amount of red in the color (0.0 - 1.0)
@item float g
@vindex green (g) of RGBA
Amount of green in the color (0.0 - 1.0)
@item float b
@vindex blue (b) of RGBA
Amount of blue in the color (0.0 - 1.0)
@item float a
@vindex alpha (a) of RGBA
Alpha intensity value (ratio of foreground to background)
This is used primarily for monochrome displays.
@end table

If the name field of an RGBA object is set, then it will try to lookup
the name to find the r,g, and b values for that color.

Thus, to create your own color scale specification, just create a new
ColorScaleSpec object, and then create some number of RGBA objects in
it.  Then, edit your views (e.g., the network view, @ref{net-view}), and
set their @code{colorspec} to point to your new specification.  In order
to see changes you make to your color spec, you need to switch the
@code{colorspec} pointer to a different one and then back to yours after
making the changes.


@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-file-requester, gui-obj-chooser , gui-colors, gui
@section File Requester

The File Requester Dialog is used for choosing filename for reading and
writing to files. The directions for the file manipulation are listed at
the top of the dialog. Typically the directions will ask the user to
"Select a File for xxx" where xxx is one of "Opening", "Appending",
"Writing", etc. Under the directions is the prompt "Enter Filename", and
a FieldEditor where the user can type in the name of the file.

Below the FieldEditor is a vertical scrollbox of filenames in the
current directory. If there are more names than will fit in the window,
the scrollbar on the right edge of the scrollbox can be used to scroll
through the full listing. A filename can be chosen by clicking on the
name in the scrollbox. Subdirectories are listed with a slash ('/')
following the name, and can be read in by double-clicking on their name.
The "../" directory can be used to navigate up a directory level.

Below the filename scrollbox is a Field Editor for the filename filter.
The String listed here is a unix csh filename completion string.
Wildcards can be specified using the '*' character. See the csh man page
for more details. Typically this field will be set by PDP++ to limit the
range of filenames available to those which correspond to the type of
file the dialog is to act upon. (e.g., If projects are being loaded, then
the filter will be set to "*.proj.*" to limit the selection to files
with ".proj" in the filename.) In most cases, compressed files can be
loaded and saved as well.

Below the filter Field Editor are the action buttons. The leftmost
button will perform the action specified in the directions at the top of
the dialog. The rightmost button is the "Cancel" button and will exit
the dialog without performing the action. Double-clicking on a filename,
or pressing the "return" key, also causes the dialog's action to be
taken.

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node gui-obj-chooser,  , gui-file-requester, gui
@section Object Chooser

The Object Chooser Dialog is much like the file requester described
previously, and is used primarily for choosing objects when there are
too many such objects to fit within a menu.  It can also be used to
browse the entire hierarchy of objects.  In the simple choosing
function, just scroll and pick the object -- double clicking to select,
or using the Select button at the bottom.  A name can also be typed into
the field at the top of the browser.

By selecting @i{PDP++Root/Browse}, the object chooser acts more like a
file browser.  When you select an object, the default is to descend into
the sub-objects on that object.  Pressing .. will go back up a level (as
in the file system).  When you select an object, an edit dialog will
show up for that object.  This can be used for editing things that may
not show up in a useful way in standard edit dialogs (e.g., the
StatVal's in Stats, see @ref{proc-stat}).


Beta TODO list
-------------

To Be Prioritized:

* delete edits that are no longer being displayed
  NOTE: this could irritate users!!! esp if the panel has modality, etc.


NEW BUGS

* taMisc not showing its enums in classbrowse
* taMisc property sheet showing all show enum vals in bits,
  instead of just the BITS ones

TO BE CLARIFIED

--------------------------
Brad:

----------------------
Browser/Edit/Tab space

browser tree stuff:

* better overall system for show/expand/collapse of views:
  goals: 
    1 need general show/hide across all views for members, just like in edits
      (currently #SHOW_TREE, #HIDDEN_TREE)
    2 and different contexts require different default show/hides
      (currently #TREEFILT_xxx)
    4 need to be able to dynamically control what is expanded or collapsed,
      primarily for programs but possibly other contexts.  The ideal interface
      would be a list of check-box toggles across bottom with list 
      of show categories: e.g., Code, Vars, Objs, Args, Members
    5 context-specificity (3) is achieved by setting default vals of these
      show categories.
  proposal:

  * consistent naming scheme: all cd's start with #TREE_
  * #SHOW_TREE -> TREE_SHOW, TREE_HIDDEN etc. (these are absolute)
  * context ones are #TREE_HIDDEN_xxx  xxx = context name = Program_Group (*note
      use typedef name!) etc)
  * expand is: #TREE_EXPAND_xxx (xxx = Code, Vars as above)
  * put the list of Expand opts and defaults in the typedef for the
    root of the browser.  E.g., in Program, Program_Group, BaseSpec_Group.
    #TREE_EXPAND_OPTS_xxx_xxx where xxx's are the full list of options.
    #TREE_EXPAND_DEFS_xxx the default ones to have on/off  
    these are used to make the Show list and set its defaults

* highlighting:

 * "disabled" generic state for viewing; "disabled" gui state for treeviews
   (program "off" button is this, also layer "lesioned")

  #196: In addition to generically supporting the "disabled" state flag, the
 program editor and probably browsers more generally should have some generic
 way of activating highlighting. This would require some config init code that
 makes a list consisting of a set of paired text flag names and associated
 color name or values. Presumably the user might want to edit this to change
 the color mappings (i.e., UserData). Then each item (e.g., progel) has a
 function that emits the text string associated with its highlight value
 (default = empty string). The string is then used to lookup the color value
 to highlight.  In the program editor, the highlight cases (a version of
 syntax highlighting) include: Special -- this code is not part of the
 standard version of this program (e.g., when you add something special to the
 LeabraTrain? process, you want to flag that). We'll add a flag bit field to
 progel so the user can tick this on.  Comment -- generated by the Comment
 ProgEl?  Loop -- good to flag loops w/ special color If.. Method etc.. we can
 play with this, but in general syntax highlighting in an editor makes things
 *much* more readable. I almost can't read code anymore without it..

edit dialogs:

* #200: #EXPERT and #DETAIL (maybe others?) should be collected at bottom of
  edit dialog with a windowshade kind of control that when you click on it
 reveals them. This provides a visual cue to the user that these variables
 exist, and allows one to quickly take a peek -- the shade button is not
 present if they don't exist. Otherwise, you just have to do the view toggle
 thing on everything to find out what you might be missing.  The show control
 then just controls whether this windowshade defaults to up or down.
* force expert: if there is a default val for a guy and it is not set to that
  then it is auto show.
* #43: #AUTO_APPLY for specific members (e.g., progvar var_type): these guys
  are applied immediately after a control is used.  they set the context for
  other choices (CONDEDIT etc) and you need too many applies otherwise.
  

* spec gui enhancements:
  * enhance BaseSpec edit/drop to accept compatible subspec objects
  * Spec Editor lives in netview as currently!

-----------------------

* multiple selection across views/trees, etc & actions (toolbars) that become
  activated in response to multiple selections: build out list of possible
  actions by walking typedefs & looking at comment directives; traverse
  list each time selection is updated and activate actions that match.  
  order matters.

---------------------------
Misc bugs small things:

* get rid of ta/datatable.* (very confusing
  with ta_datatable.*) 


trac bugs of High priority or higher
* program dirty not getting set -- init not recompiling: brad
NOTE: may be fixed

* netview bugs:
  * UnitView objs seem to get made, even if no gui interaction w/user
    they were supposed to only get made on demand!

* Viewers
  * save/restore state of viewers

* misc usability enhancements:
  * key shortcuts, particularly to invoke a string editor for string fields (all of them)
  * hover notes to add methoddef desc info in MethodCall, etc..?
NOTE: where??? what does this mean??? fyi, there are already hover notes
   in the MethodDef selector dialog

* Program Groups: execution control (popup always-on-top window with ctrl buttons only)

------------------

* upgrade and test plugin system:
  * tags in type info to check dependencies
  * prefix or similar in proj files to indicate required plugins
  * naming/registry spec for class and plugin naming
  * separate enumeration from loading
  * startup enumeration of plugins;
  * dynamic (user controlled) loading of plugins

* T3 graphs  
  * nuke float_RArray from datagraph
   -- move float_RArray to pdp/v3compat
  (+ changes in advance of T3 graphs)

* new net visualization, plus related fixes/changes:
  * simpler unit views (no separators, light shows activation etc.) 
  * add transparent layer
  * network layer shortcut view: "sheet view" & iconify

* parallelism:
  * multi-cpu pthread without mutex
  * alternative dmem approach(es), 
    esp. layer/unitgroup-oriented assignment to nodes, without full connectivity
    for every node

* Datatable bugs and usability
  * annoying up/down control: either fix, or (preferably) replace with field
  * consider the row-oriented editor (one field per column)
  * hide the .data cols list, and add a main panel button view that lists the cols

* complete port to Windows, including plugins

--------------------------
Brad: (done)

* updated all PCs to Qt4
* fix netview crashing on remove units
* UserData
  * persistence
  * schema
* Show changes:
  * RO should be rmv from show menu.  srch & replace
    RO -> RO & HIDDEN unless RO SHOW 
* misc usability enhancements:
  * automatically bracket gui-invoked methods with Busy/Notbusy
* spec gui enhancements:
  * make a link and tree node for making subspecs be direct children
  * enhance BaseSpec edit/drop to accept compatible subspec objects
* Spec Editor (similar to prog editor -- shows children) -- should be quick & easy
* selectEdit not working right
* in DataCalcLoop (sctually, was all lists)
  src_cols folder, ProgramEditor hass an AddAllColumns button over a dropdown
* for sub-panels (e.g., properties, list view, etc), don't render the other panels
  until they are clicked on.  This would save a lot of time.  it is *very* slow
  when clicking on a long list of guys.  should be super quick.
tabs fixed:
* when a new guy put in a tab, existing guy is auto-applied
* fix bugs where tabs don't show what they should (multiple tabs),
* add "pin/unpin" capability to panels, and extend panel tab context menu 
* separate view and edit tabs (keep sep lists)
* if you do a ... on a token to edit guy, it often doesn't show up. related to 
  edit stuff hanging around forever and it looks like its already being edited?
browsing:
* autoexpand new items (#140): when a new item is added to tree (copy, new) it should
  be fully expanded by default.
NOTE: cannot necessarily fully expand, so please don't ask for it if it is not
  expanded to the fifty-gadzillionth level automatically!!!!
SHIPPING IS A FEATURE
* autoscroll to show new guy (#207, #140): when a new item is added (and expanded)
  automatically scroll so it is entirely visible.  often it goes off end of bottom.



Brad: (won't do)

* force the user to specifically select the "all items in the list" property display
  for lists: make it a separate box with a button or other control to activate
[for now, handled by user only clicking on list properties when they want them]
tabs won't do:
* double-click to get edit panel (regular click is only for selecting)
  [double clicking in tree is evil]
* context menu has:
[no: current scheme is self-consistent]
  * "edit in current tab"
  * "edit in new tab" - makes a new tab
  * "edit in dialog"


--------------------------
Brad (for Qt 4.2)

Qt4.2 bugs:
  * DND not working right anymore
  * can't select anything anymore in T3 viewer



Brad (for Omega/Release)

* JIT rendering of list elements in properties dialog (massively slow!)
* dnd for T3



--------------------------
Randy: (active list in src/leabra/TODO)

* BUTTON_MENUs for changing specs & obj types etc in Netstru objs -- select obj
  do in its panel

* more wizard stuff for env + procs

* relnet stat & adaptation of lay act_pct and wtscale.

* more dataproc, math etc

* console cursor only at end
* set display_width from console (overload qconsole resize event and update)
* css_console.cpp: complete obj.mbr expressions..

---------------
Questions:

* WriteClose() is this, right?  done!?
  * clean up and/or extend data notify so that DataTable finish adding of row is clearly 
   done, so various display or calculation clients can then update themselves

---------------
Omega:

* import data tables and matrixes

* record scripts for gui operations: requied for dmem operation in gui mode.

* revamp the 3D display of net objects: smart projection pointers,
  etc....

* 4-panel view of network, to enable rational moving/sizing of objects
  - the moving/sizing
  - dnd icon bar for netview/designer

* Printing Analysis, Design, and Implementation -- MAJOR


This file explains the console and gui handling in v4.0 -- it differs substantially from v3.x.

WINDOWS VS. UNIX

In Unix, every program is automatically connected to the shell.
TODO: what if pgm is launched from the Gui Shell?

In Windows, console programs behave like Unix programs (stdin/out/err are connected to the current console session.) But Gui programs do not have a console, and the stdin/out/err are not connected to anything. In Windows, if there is to be a console, the program will have to either create one, or create a gui analog.


GUI VS. NOGUI

In Gui mode, there is a GUI system session and event loop. The event loop must be periodically called, and the quit condition is indirectly indicated by posting something to the event loop, which will ultimately exit when the other events have been processed.

In Nogui mode, there may or may not be a session/event loop. The code base as of 07/29/2005 did not link Qt at all. In Qt4, if the QtCore library is linked for nongui, then there is an application console, and a console event loop.


READLINE

Readline is a GNU library that adds a lot of functionality to a console program, by way of history, cmd completion, cmd editing, and so on. It is an optional piece of functionality.


CSS vs. TA

Theoretically, ta should be able to exist w/o css (although this is questionable, given all the mutual dependencies in the code base.) However, ta gui programs would always need an event loop etc., and a ta non-gui program would presumably need a console interface. So it would seem logical that the console and event loop stuff should live in ta. Any necessary hooks can be added in css.


IDLE HOOKS
CLIENT LIB/BIN PROCESS EVENTS

Libs/bins layered on top of ta/css may need to "hook" the event processing loop. Here are the ways to do this:
* the library can declare its own routine, which all code in that library calls
  - problems: not encapsulated; doesn't include calls made in lower levels
* insert a hook
  - problems: startup chaining sequence dependencies;

STARTUP
in css_builtin.cc:
  // use our completion function
  rl_attempted_completion_function = (rl_function*)css_attempted_completion;
 // set the hook to our nogui "waitproc" -- can be overridden later
  rl_event_hook = readline_nogui_waitproc;

in css_qt:
  connection cssiSession::Run as the rl_event_hook 
  (i.e., this overrides the default startup, which is for console)
  
OPERATION

in css_machine:
  * ReadLn calls readline, and addhistory

in css_builtin:
    
Gui:
in css_qt:
  * rl_event_hook calls cssiSession::Run, which processes events until/unless
    readline flag "rl_done" is true
  
GOALS

* abstract out console handling so it can be modalized as necessary in Windows vs. Unix
* abstract out Readline support, so it can be omitted in Windows builds 
  (NOTE: this will be elegantly handled by folding the Readline support into the
  platform-modalized console handling)
* abstract out initialization, event processing, and shutdown APIs so they are the same
  to the program regardless whether the code is compiled for gui or nongui.
  

IMPLEMENTATION

There will be one generic interface, exposed in Xxxx.h -- it will have a set of variables (or properties), callable functions, and hook variables.

There will be two sets of implementation:

Console, Unix and Windows
  * hook in readline or not
  * for Windows, create console, if needed (i.e., in Gui mode)

Gui vs. Console
  * implement an event loop or not
  * initialize the Qt and Coin libraries or not
  
  
Required Functions

ProcessEvents()
  * call to process any pending events (can be a noop in some builds)
  


Readline apis used:
builtin.cc:
  typedef int rl_function(void);
  typedef char* rl_generator_fun(char*, int);

  extern char *rl_line_buffer;
  extern int (*rl_attempted_completion_function)(void);
  
  extern char** completion_matches (char* text, rl_generator_fun* gen);

  extern char** css_attempted_completion(char* text, int start, int end);
  extern char* css_path_generator(char* text, int state); // 
  extern char* css_scoped_generator(char* text, int state);
  extern char* css_keyword_generator(char* text, int state);

machine.cc:  
  extern int rl_done;		// readline done reading
  extern int rl_pending_input;
  extern int (*rl_event_hook)(void);	// this points to the Qt event loop pump if running GUI

  extern char* rl_readline(char*);
  extern void add_history(char*);
  extern int rl_stuff_char(int);

Current Version (3/1/06)

* event loop:
  custom iSession aka QEventLoop
  contains code in exit:
    if cssMisc::cur_top
    cur_top->ExitShell
    QApplication::sendPostedEvents( 0, QEvent::DeferredDelete );

* startup:
cssMisc::PreInitialize
  SoQt::init
  creates new QQpplication
  creates new iSession, aka QEventLoop
cssMisc::Top->StartupShell(cin, cout)
  Run()
  
* shutdown from console:
  user types 'exit'
  
* gui shutdown:
  root window calls taMisc::app->Quit();
  (taMisc::app is usually a PDPRoot)
  PDPRoot::Quit()
    cssiSession::quitting = true;
    taiMisc::main_window->close()
  
  
TODO:

* nuke the IApp thing in ta_type

* make sure we have a ta/pdp global event type place (prob in taglobal.h)

* replace the call:
    cssMisc::Top->StartupShell(cin, cout)
  with:
    (send an event to get the startup shell going)
    qApp->exec()
    
* shutdown handling(1) -- final mechanism:
  have shutdown be effected by a call to qApp->exit
  can be done by a direct call, or connecting a signal to it
  
* shutdown handling(2) -- invoking
  1) confirmed or final main window close
  2) exiting from the top shell (can confirm 'exit' from top shell)
  3) quitting from any shell

  
  
  

 

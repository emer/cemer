Properties

Properties are an abstract extension of members. Whereas members are always equal to storage, properties may be (are???) are accessed via accessor methods.

The two main areas that will be affected are:
* streaming system
* data editing system

Currently, these systems work by reading/writing directly to memory, using an address supplied by the type system, and the type system's knowledge of the size of the values in memory.

In order for C++ types to be safe, they must be consistently accessed using an accessor, typically like this:

int myIntProp();
void setMyIntProp(int);

Here are the basic types, and the read/write semantics

built-in primitive types: int types, real types, bool, pointer
string
arrays of any type
class or struct, by value
union


xxx myIntProp();
void setMyIntProp(xxx);

strings:
String myStringProp
void setMyString(const String& val); // const reference


GOALS

* the new system needs to be compatible with the old files
* provide hooks to deal with unexpected stream data

IMPLEMENTATION

Property accessors are methods, so the accessors qua methods will have MethodDef entries in the class type. But as properties, they will need to have MemberDef-like entries.

MemberDef advantages:
* existing data and streaming systems will handle automatically

disadvantages:
* current code assumes they are variables with storage


HOW THINGS WORK NOW

taiTypes

Each TypeDef gets a taiType that is a bridge between the data and its gui representation. A taiType  has intimate knowledge of the implementation of the data, and the implementation of the gui rep. Gui reps call taiTypes to do the actual data updating. taiTypes have a lot of code like:

xx_t val = get Typedef to lookup up pointer to member based on object pointer and member

 




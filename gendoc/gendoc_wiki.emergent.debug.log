Checked for running processes. 3 processes currently running, including the current process.
Scanning: emergent
########################################################################
TypeDef len: 15
TypeDef name:  taBase
TypeDef type: class
TypeDef desc: Base type for all type-aware classes Base type for all type-aware classes
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER']
TypeDef children: [u'taOBase', u'MinMax', u'FixedMinMax', u'MinMaxInt', u'taColor', u'TAColor', u'MatrixGeom', u'TwoDCoord', u'FloatTwoDCoord', u'FloatTransform', u'ValIdx', u'ClustLink', u'GaborRFSpec', u'BlobRFSpec', u'ODEIntParams', u'VESurface', u'VELightParams', u'VECameraDists', u'VEJointStops', u'VEJointMotor', u'SelectEditConfig', u'taTime', u'Counter', u'StepParams', u'CritParam', u'WtScaleSpec', u'WtScaleSpecInit', u'LearnMixSpec', u'SAvgCorSpec', u'LeabraDwtNorm', u'AdaptRelNetinSpec', u'SpikeFunSpec', u'DepressSpec', u'SynDelaySpec', u'OptThreshSpec', u'DtSpec', u'LeabraChannels', u'VChanSpec', u'ActRegSpec', u'MaxDaSpec', u'DaModSpec', u'VChanBasis', u'LeabraUnitChans', u'CtSineInhibMod', u'CtFinalInhibMod']
EnumDef name: Horizontal
EnumDef val: Horizontal
EnumDef name: Vertical
EnumDef val: Vertical
EnumDef name: VT_STRING
EnumDef val: VT_STRING
EnumDef: an ANSI string of any length
EnumDef name: VT_DOUBLE
EnumDef val: VT_DOUBLE
EnumDef: a 8-byte floating point value (aprox 15 sig decimal digits)
EnumDef name: VT_FLOAT
EnumDef val: VT_FLOAT
EnumDef: a 4-byte floating point value (aprox 7 sig decimal digits)
EnumDef name: VT_INT
EnumDef val: VT_INT
EnumDef: a 32-bit signed integer
EnumDef name: VT_BYTE
EnumDef val: VT_BYTE
EnumDef: an unsigned 8-bit integer; used mostly for image components (rgb)
EnumDef name: VT_VARIANT
EnumDef val: VT_VARIANT
EnumDef: a Variant, which can hold scalars, strings, matrices, and objects
EnumDef name: THIS_INVALID
EnumDef val: THIS_INVALID
EnumDef: CheckThisConfig_impl has detected a problem
EnumDef name: CHILD_INVALID
EnumDef val: CHILD_INVALID
EnumDef: CheckChildConfig_impl returns issue with a child
EnumDef name: COPYING
EnumDef val: COPYING
EnumDef: this object is currently within a Copy function
EnumDef name: USE_STALE
EnumDef val: USE_STALE
EnumDef: calls setStale on appropriate changes; usually set in Initialize
EnumDef name: BF_READ_ONLY
EnumDef val: BF_READ_ONLY
EnumDef: this object should be considered readonly by most code (except controlling objs) and by CSS -- note that ro is a property -- use that to query the ro status
EnumDef name: BF_GUI_READ_ONLY
EnumDef val: BF_GUI_READ_ONLY
EnumDef: a less restrictive form of ro intended to prevent users from modifying an object, but still permit programmatic access; RO ==&gt; GRO
EnumDef name: DESTROYING
EnumDef val: DESTROYING
EnumDef: Set in Destroying at the very beginning of destroy
EnumDef name: DESTROYED
EnumDef val: DESTROYED
EnumDef: set in base destroy (DEBUG only); lets us detect multi destroys
EnumDef name: DQR_NO_SAVE
EnumDef val: DQR_NO_SAVE
EnumDef: definitely do not save
EnumDef name: DQR_SAVE
EnumDef val: DQR_SAVE
EnumDef: definitely save
EnumDef name: DQR_DEFAULT
EnumDef val: DQR_DEFAULT
EnumDef: do default for this member (this is the base result)
EnumDef names: [u'BaseFlags', u'DumpQueryResult', u'Orientation', u'ValType']
MethodDef name: New
MethodDef desc: Create n_objs objects of given type (type is optional)
MethodDef proto taBase_ptr New(int n_objs = 1, TypeDef* type = NULL)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: HasBaseFlag
MethodDef desc: true if flag set, or if multiple, any set
MethodDef proto bool HasBaseFlag(int flag)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SetBaseFlag
MethodDef desc: sets the flag(s)
MethodDef proto void SetBaseFlag(int flag)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: ClearBaseFlag
MethodDef desc: clears the flag(s)
MethodDef proto void ClearBaseFlag(int flag)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: ChangeBaseFlag
MethodDef desc: sets or clears the flag(s)
MethodDef proto void ChangeBaseFlag(int flag, bool set)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: GetIndex
MethodDef desc: object&apos;s index within an owner list. cached by some objs.
MethodDef proto int GetIndex()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SetName
MethodDef desc: Set the object&apos;s name
MethodDef proto bool SetName(const taString&amp; nm)
MethodDef opts [u'CAT_ObjectMgmt', u'SET_name']
MethodDef name: GetName
MethodDef desc: Get the name of the object
MethodDef proto taString GetName()
MethodDef opts [u'CAT_ObjectMgmt', u'GET_name']
MethodDef name: GetOwner
MethodDef proto TAPtr GetOwner(TypeDef* td)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: GetThisOrOwner
MethodDef desc: get this obj or first owner that is of type td
MethodDef proto TAPtr GetThisOrOwner(TypeDef* td)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: IsParentOf
MethodDef desc: true if this object is a direct or indirect parent of the obj (or is the obj)
MethodDef proto bool IsParentOf(const taBase* obj)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: IsChildOf
MethodDef desc: true if this object is a direct or indirect child of the obj (or is the obj)
MethodDef proto bool IsChildOf(const taBase* obj)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: GetPath
MethodDef desc: get path without name informtation, stop at par_stop if non-null
MethodDef proto taString GetPath(taBase* ta = NULL, taBase* par_stop = NULL)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: FindFromPath
MethodDef desc: find object from path (starting from this, and position start of the path)
MethodDef proto TAPtr FindFromPath(const taString&amp; path, MemberDef*&amp; ret_md = no_mdef, int start = 0)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: GetValFromPath
MethodDef desc: get a member value from given path -- only follows direct members (of members) of this object -- does not look into items in lists or groups
MethodDef proto Variant GetValFromPath(const taString&amp; path, MemberDef*&amp; ret_md = no_mdef, bool warn_not_found = false)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SetFileName
MethodDef desc: set file name for object
MethodDef proto bool SetFileName(const taString&amp; val)
MethodDef opts [u'CAT_File']
MethodDef name: GetFileName
MethodDef desc: get file name object was last saved with
MethodDef proto taString GetFileName()
MethodDef opts [u'CAT_File']
MethodDef name: GetFileNameFmProject
MethodDef desc: get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj-&gt;base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found
MethodDef proto taString GetFileNameFmProject(const taString&amp; ext, const taString&amp; tag, const taString&amp; subdir, bool dmem_proc_no = false)
MethodDef opts [u'CAT_File']
MethodDef name: Load_strm
MethodDef desc: Load object data from a file -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)
MethodDef proto int Load_strm(istream&amp; strm, taBase* par = NULL, taBase** loaded_obj_ptr = NULL)
MethodDef opts [u'CAT_XpertFile']
MethodDef name: Load
MethodDef desc: Load object data from given file name (if empty, prompt user for a name) -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)
MethodDef proto int Load(const taString&amp; fname, taBase** loaded_obj_ptr = NULL)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'ARGC_0', u'CAT_File']
MethodDef name: Save_strm
MethodDef desc: Save object data to a file stream
MethodDef proto int Save_strm(ostream&amp; strm, taBase* par = NULL, int indent = 0)
MethodDef opts [u'CAT_XpertFile']
MethodDef name: Save
MethodDef desc: saves the object to a file using current file name (from GetFileName() function); if context=&apos;&apos; then default is used
MethodDef proto int Save()
MethodDef opts [u'MENU', u'MENU_ON_Object', u'ARGC_0', u'CAT_File']
MethodDef name: SaveAs
MethodDef desc: Saves object data to a new file -- if fname is empty, it prompts the user; if context=&apos;&apos; then default is used
MethodDef proto int SaveAs(const taString&amp; fname)
MethodDef opts [u'MENU', u'ARGC_0', u'CAT_File']
MethodDef name: UpdateAfterEdit
MethodDef desc: called after editing, or any user change to members (eg. in the interface, script)
MethodDef proto void UpdateAfterEdit()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: UpdateAllViews
MethodDef desc: called after data changes, to update views
MethodDef proto void UpdateAllViews()
MethodDef opts [u'CAT_Display']
MethodDef name: RebuildAllViews
MethodDef desc: call after data changes, to rebuild views, typically when a child is added
MethodDef proto void RebuildAllViews()
MethodDef opts [u'CAT_Display']
MethodDef name: StructUpdate
MethodDef desc: bracket structural changes with (nestable) true/false calls;
MethodDef proto void StructUpdate(bool begin)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: DataUpdate
MethodDef desc: bracket data value changes with (nestable) true/false calls;
MethodDef proto void DataUpdate(bool begin)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: setDirty
MethodDef desc: set the dirty flag indicating a change in object values; &apos;true&apos; gets forwarded up; &apos;false&apos; does nothing
MethodDef proto void setDirty(bool value)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: setStale
MethodDef desc: set the stale flag indicating a change in object values; gets forwarded up (&apos;true&apos; is implied, only the impl obj defines when it is cleared)
MethodDef proto void setStale()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: TestError
MethodDef desc: if test, then report error, including object name, type, and path information; returns test -- use e.g. if(TestError((condition), &apos;fun&apos;, &apos;msg&apos;)) return false;
MethodDef proto bool TestError(bool test, const char* fun_name, const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: TestWarning
MethodDef desc: if test, then report warning, including object name, type, and path information; returns test -- use e.g. if(TestWarning((condition), &apos;fun&apos;, &apos;msg&apos;)) return false;
MethodDef proto bool TestWarning(bool test, const char* fun_name, const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: CheckConfig
MethodDef desc: check the configuration of this object and all its children (defaults to no confirm of success)
MethodDef proto bool CheckConfig(bool quiet = false)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: CheckConfig_Gui
MethodDef desc: check the configuration of this object and all its children -- failed items highlighted in red, items with failed children in yellow
MethodDef proto bool CheckConfig_Gui(bool confirm_success = true, bool quiet = false)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'CAT_ObjectMgmt', u'ARGC_0', u'LABEL_CheckConfig']
MethodDef name: CheckError
MethodDef desc: for CheckConfig routines: if test, then report config error, including object name, type, and path information; returns test &amp; sets rval to false if test is true -- use e.g. CheckError((condition), rval, &apos;msg&apos;));
MethodDef proto bool CheckError(bool test, bool quiet, bool&amp; rval, const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: CopyFrom
MethodDef desc: Copy from given object into this object (this is a safe interface to UnSafeCopy)
MethodDef proto bool CopyFrom(taBase* cpy_from)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'TYPE_ON_this', u'NO_SCOPE', u'CAT_ObjectMgmt']
MethodDef name: CopyTo
MethodDef desc: Copy to given object from this object
MethodDef proto bool CopyTo(taBase* cpy_to)
MethodDef opts [u'MENU', u'TYPE_ON_this', u'NO_SCOPE', u'CAT_ObjectMgmt']
MethodDef name: DuplicateMe
MethodDef desc: Make another copy of myself (done through owner)
MethodDef proto bool DuplicateMe()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_ObjectMgmt']
MethodDef name: ChangeMyType
MethodDef desc: Change me into a different type of object, copying current info (done through owner)
MethodDef proto bool ChangeMyType(TypeDef* new_type)
MethodDef opts [u'MENU', u'TYPE_this', u'CAT_ObjectMgmt', u'ARG_VAL_FM_FUN']
MethodDef name: InheritsFrom
MethodDef desc: does this inherit from given type
MethodDef proto bool InheritsFrom(TypeDef* it)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: InheritsFromName
MethodDef desc: does this inherit from given type name?
MethodDef proto bool InheritsFromName(const char* nm)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: Search
MethodDef desc: search for objects using srch string, from this point down the structural hierarchy (my members, and their members and objects in lists, etc). items are linked into items list, and all owners of items found are linked into owners list (if present -- can be used as a lookup table for expanding owners to browse found items). contains = use &apos;contains&apos; for all matches instead of exact match, rest are values to search in (obj_desc includes DisplayName as well as any explicit description), obj_val is only for value members and inline members
MethodDef proto void Search(const taString&amp; srch, taBase_PtrList&amp; items, taBase_PtrList* owners = NULL, bool contains = true, bool case_sensitive = false, bool obj_name = true, bool obj_type = true, bool obj_desc = true, bool obj_val = true, bool mbr_name = true, bool type_desc = false)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: GetEnumString
MethodDef desc: get the name corresponding to given enum value in enum type enum_tp_nm
MethodDef proto taString GetEnumString(const taString&amp; enum_tp_nm, int enum_val)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: GetEnumVal
MethodDef desc: get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)
MethodDef proto int GetEnumVal(const taString&amp; enum_nm, taString&amp; enum_tp_nm = no_name)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: GetUserDataList
MethodDef desc: gets the userdatalist for this class
MethodDef proto UserDataItem_List_ptr GetUserDataList(bool force_create = false)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: HasUserDataList
MethodDef desc: returns true if UserData exists at all
MethodDef proto bool HasUserDataList()
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: HasUserData
MethodDef desc: returns true if UserData exists for this key (case sens)
MethodDef proto bool HasUserData(const taString&amp; key)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserData
MethodDef desc: get specified user data; returns class default value if not present, or nilVariant if no default user data or class doesn&apos;t support UserData
MethodDef proto const_Variant GetUserData(const taString&amp; key)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserDataDef
MethodDef desc: return value if exists, or default if doesn&apos;t
MethodDef proto const_Variant GetUserDataDef(const taString&amp; key, const Variant&amp; def)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserDataOfType
MethodDef desc: gets specified user data of given type, making one if doesn&apos;t exist and fc=true
MethodDef proto UserDataItemBase_ptr GetUserDataOfType(TypeDef* typ, const taString&amp; key, bool force_create)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserDataAsBool
MethodDef desc: get specified user data as bool (see GetUserData)
MethodDef proto bool GetUserDataAsBool(const taString&amp; key)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserDataAsInt
MethodDef desc: get specified user data as int (see GetUserData)
MethodDef proto int GetUserDataAsInt(const taString&amp; key)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserDataAsFloat
MethodDef desc: get specified user data as float (see GetUserData)
MethodDef proto float GetUserDataAsFloat(const taString&amp; key)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserDataAsDouble
MethodDef desc: get specified user data as double (see GetUserData)
MethodDef proto double GetUserDataAsDouble(const taString&amp; key)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetUserDataAsString
MethodDef desc: get specified user data as String (see GetUserData)
MethodDef proto const_taString GetUserDataAsString(const taString&amp; key)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: SetUserData
MethodDef desc: set user data; ignored if class does not support user data
MethodDef proto void SetUserData(const taString&amp; key, const Variant&amp; value)
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: GetDocLink
MethodDef desc: gets a linked Doc, if any; you can use this to test for existence
MethodDef proto taDoc_ptr GetDocLink()
MethodDef opts [u'CAT_UserData', u'EXPERT']
MethodDef name: SetDocLink
MethodDef desc: set a link to a doc from the .docs collection -- the doc will then show up automatically in a panel for this obj
MethodDef proto void SetDocLink(taDoc* doc)
MethodDef opts [u'CAT_UserData', u'MENU', u'MENU_CONTEXT', u'DROP1']
MethodDef name: Edit
MethodDef desc: Edit this object using the gui -- this will be an edit dialog or an edit panel depending on ...???
MethodDef proto bool Edit()
MethodDef opts [u'CAT_Display']
MethodDef name: EditDialog
MethodDef desc: Edit this object in a popup dialog using the gui (if modal == true, the edit dialog blocks all other gui operations until the user closes it)
MethodDef proto bool EditDialog(bool modal = false)
MethodDef opts [u'MENU', u'ARGC_0', u'MENU_ON_Object', u'MENU_CONTEXT', u'NO_SCRIPT', u'CAT_Display']
MethodDef name: EditPanel
MethodDef desc: Edit this object in a panel in the gui browser (if new_tab == true, then a new edit panel tab is opened for it, if pin_tab == true then the new tab is pinned in place (option ignored for new_tab == false))
MethodDef proto bool EditPanel(bool new_tab = false, bool pin_tab = false)
MethodDef opts [u'MENU', u'ARGC_0', u'MENU_ON_Object', u'MENU_CONTEXT', u'NO_SCRIPT', u'CAT_Display']
MethodDef name: BrowserSelectMe
MethodDef desc: select this item in the main project browser (only works if gui is active, etc) -- returns success
MethodDef proto bool BrowserSelectMe()
MethodDef opts [u'CAT_Display']
MethodDef name: BrowserExpandAll
MethodDef desc: expand all sub-leaves under this item in the browser
MethodDef proto bool BrowserExpandAll()
MethodDef opts [u'CAT_Display']
MethodDef name: BrowserCollapseAll
MethodDef desc: collapse all sub-leaves under this item in the browser
MethodDef proto bool BrowserCollapseAll()
MethodDef opts [u'CAT_Display']
MethodDef name: BrowseMe
MethodDef desc: show this object in its own browser
MethodDef proto void BrowseMe()
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_SEP_AFTER', u'MENU_CONTEXT', u'CAT_Display']
MethodDef name: GuiFindFromMe
MethodDef desc: activate the gui find dialog starting from this object, with given find string
MethodDef proto bool GuiFindFromMe(const taString&amp; find_str)
MethodDef opts [u'CAT_Display']
MethodDef name: CallFun
MethodDef desc: call function (method) of given name on this object, prompting for args using gui interface
MethodDef proto void CallFun(const taString&amp; fun_name)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SelectForEdit
MethodDef desc: select a given member for editing in an edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected
MethodDef proto bool SelectForEdit(MemberDef* member, SelectEdit* editor, const taString&amp; extra_label)
MethodDef opts [u'MENU', u'MENU_ON_SelectEdit', u'CAT_Display', u'NULL_OK_1', u'NULL_TEXT_1_NewEditor']
MethodDef name: SelectForEditNm
MethodDef desc: select a given member (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected
MethodDef proto bool SelectForEditNm(const taString&amp; memb_nm, SelectEdit* editor, const taString&amp; extra_label)
MethodDef opts [u'CAT_Display']
MethodDef name: SelectForEditSearch
MethodDef desc: search among this object and any sub-objects for members containing given string, and add to given select editor (if NULL, a new one is created in .edits). returns number found
MethodDef proto int SelectForEditSearch(const taString&amp; memb_contains, SelectEdit*&amp; editor)
MethodDef opts [u'MENU', u'NULL_OK_1', u'NULL_TEXT_1_NewEditor', u'CAT_Display']
MethodDef name: SelectForEditCompare
MethodDef desc: compare this object with selected comparison object, adding any differences to given select editor (if NULL, a new one is created in .edits). returns number of differences. no_ptrs = ignore differences in pointer fields
MethodDef proto int SelectForEditCompare(taBase* cmp_obj, SelectEdit*&amp; editor, bool no_ptrs = true)
MethodDef opts [u'MENU', u'NULL_OK_1', u'NULL_TEXT_1_NewEditor', u'CAT_Display', u'TYPE_ON_0_this', u'NO_SCOPE']
MethodDef name: SelectFunForEdit
MethodDef desc: select a given function (method) for calling in a select edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected
MethodDef proto bool SelectFunForEdit(MethodDef* function, SelectEdit* editor, const taString&amp; extra_label)
MethodDef opts [u'MENU', u'NULL_OK_1', u'NULL_TEXT_1_NewEditor', u'CAT_Display']
MethodDef name: SelectFunForEditNm
MethodDef desc: select a given method (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits) returns false if method was already selected
MethodDef proto bool SelectFunForEditNm(const taString&amp; function_nm, SelectEdit* editor, const taString&amp; extra_label)
MethodDef opts [u'CAT_Display']
MethodDef name: CloseLater
MethodDef desc: PERMANENTLY Destroy this object! This is not Iconify or close window..
MethodDef proto void CloseLater()
MethodDef opts [u'MENU', u'MENU_ON_Object', u'CONFIRM', u'NO_REVERT_AFTER', u'LABEL_Close_(Destroy)', u'NO_MENU_CONTEXT', u'CAT_ObjectMgmt']
MethodDef name: Help
MethodDef desc: get help on using this object
MethodDef proto void Help()
MethodDef opts [u'MENU', u'CAT_Display']
MethodDef names [u'BrowseMe', u'BrowserCollapseAll', u'BrowserExpandAll', u'BrowserSelectMe', u'CallFun', u'ChangeBaseFlag', u'ChangeMyType', u'CheckConfig', u'CheckConfig_Gui', u'CheckError', u'ClearBaseFlag', u'CloseLater', u'CopyFrom', u'CopyTo', u'DataUpdate', u'DuplicateMe', u'Edit', u'EditDialog', u'EditPanel', u'FindFromPath', u'GetDocLink', u'GetEnumString', u'GetEnumVal', u'GetFileName', u'GetFileNameFmProject', u'GetIndex', u'GetName', u'GetOwner', u'GetPath', u'GetThisOrOwner', u'GetUserData', u'GetUserDataAsBool', u'GetUserDataAsDouble', u'GetUserDataAsFloat', u'GetUserDataAsInt', u'GetUserDataAsString', u'GetUserDataDef', u'GetUserDataList', u'GetUserDataOfType', u'GetValFromPath', u'GuiFindFromMe', u'HasBaseFlag', u'HasUserData', u'HasUserDataList', u'Help', u'InheritsFrom', u'InheritsFromName', u'IsChildOf', u'IsParentOf', u'Load', u'Load_strm', u'New', u'RebuildAllViews', u'Save', u'SaveAs', u'Save_strm', u'Search', u'SelectForEdit', u'SelectForEditCompare', u'SelectForEditNm', u'SelectForEditSearch', u'SelectFunForEdit', u'SelectFunForEditNm', u'SetBaseFlag', u'SetDocLink', u'SetFileName', u'SetName', u'SetUserData', u'StructUpdate', u'TestError', u'TestWarning', u'UpdateAfterEdit', u'UpdateAllViews', u'setDirty', u'setStale']
########################################################################
TypeDef len: 9
TypeDef name:  taString
TypeDef type: class
TypeDef desc: StrRep - internal String representation Note: this structure is allocated via malloc(), so there must be no constructor/destructor.  string of characters with many useful methods for string manipulation
TypeDef cats:, [u'Access']
TypeDef opts:, []
MethodDef name: length
MethodDef desc: how many characters in the string
MethodDef proto int length()
MethodDef opts [u'CAT_Access']
MethodDef name: empty
MethodDef desc: true if the string is empty
MethodDef proto bool empty()
MethodDef opts [u'CAT_Access']
MethodDef name: nonempty
MethodDef desc: true if the string is nonempty
MethodDef proto bool nonempty()
MethodDef opts [u'CAT_Access']
MethodDef name: isInt
MethodDef desc: true if the string contains a value that can be interpreted as an integer [+-]dd*
MethodDef proto bool isInt()
MethodDef opts [u'CAT_Convert']
MethodDef name: toBool
MethodDef desc: accepts true as starting with t/T, or else 1
MethodDef proto bool toBool()
MethodDef opts [u'CAT_Convert']
MethodDef name: toChar
MethodDef desc: if size 1, then that&apos;s it, else try heuristics
MethodDef proto char toChar()
MethodDef opts [u'CAT_Convert']
MethodDef name: toInt
MethodDef desc: to integer value -- base determines base representation (hex=16, oct=8)
MethodDef proto int toInt(bool* ok = 0, int base = 10)
MethodDef opts [u'CAT_Convert']
MethodDef name: toFloat
MethodDef desc: to floating point (single precision) value
MethodDef proto float toFloat(bool* ok = 0)
MethodDef opts [u'CAT_Convert']
MethodDef name: toDouble
MethodDef desc: to floating point (double precision) value
MethodDef proto double toDouble(bool* ok = 0)
MethodDef opts [u'CAT_Convert']
MethodDef name: HexToInt
MethodDef desc: hexidecimal string to integer value
MethodDef proto int HexToInt()
MethodDef opts [u'CAT_Convert']
MethodDef name: cat
MethodDef desc: concatenate (add) string to end of this one
MethodDef proto taString_ref cat(const taString&amp; y)
MethodDef opts [u'CAT_Modify']
MethodDef name: prepend
MethodDef desc: insert string at beginning of this one
MethodDef proto taString_ref prepend(const taString&amp; y)
MethodDef opts [u'CAT_Modify']
MethodDef name: index
MethodDef desc: return position of target in string or -1 for failure. startpos = starting position (- = search from end forward)
MethodDef proto int index(const taString&amp; y, int startpos = 0)
MethodDef opts [u'CAT_Find']
MethodDef name: index_ci
MethodDef desc: ci = case independent: return position of target in string or -1 for failure. startpos = starting position (- = search from end forward)
MethodDef proto int index_ci(const taString&amp; y, int startpos = 0)
MethodDef opts [u'CAT_Find']
MethodDef name: contains
MethodDef desc: return &apos;true&apos; if target appears anywhere in String. startpos = starting position (- = search from end forward)
MethodDef proto bool contains(const taString&amp; y, int startpos = 0)
MethodDef opts [u'CAT_Find']
MethodDef name: contains_ci
MethodDef desc: ci = case independent: return &apos;true&apos; if target appears anywhere in String. startpos = starting position (- = search from end forward)
MethodDef proto bool contains_ci(const taString&amp; y, int startpos = 0)
MethodDef opts [u'CAT_Find']
MethodDef name: matches
MethodDef desc: return &apos;true&apos; if target appears at position pos in String
MethodDef proto bool matches(const taString&amp; y, int pos = 0)
MethodDef opts [u'CAT_Find']
MethodDef name: endsWith
MethodDef desc: return &apos;true&apos; if target is at end of String
MethodDef proto bool endsWith(const taString&amp; y)
MethodDef opts [u'CAT_Find']
MethodDef name: startsWith
MethodDef desc: return &apos;true&apos; if target is at start of String
MethodDef proto bool startsWith(const taString&amp; y)
MethodDef opts [u'CAT_Find']
MethodDef name: freq
MethodDef desc: return number of occurences of target in String
MethodDef proto int freq(const taString&amp; y)
MethodDef opts [u'CAT_Find']
MethodDef name: elem
MethodDef desc: get the character at index i
MethodDef proto char elem(int i)
MethodDef opts [u'CAT_Access']
MethodDef name: firstchar
MethodDef desc: get the first character, &apos;
MethodDef proto char firstchar()
MethodDef opts [u'CAT_Access']
MethodDef name: lastchar
MethodDef desc: get the last character; &apos;
MethodDef proto char lastchar()
MethodDef opts [u'CAT_Access']
MethodDef name: at
MethodDef desc: get substring at position for length
MethodDef proto taString at(int pos, int len)
MethodDef opts [u'CAT_Access']
MethodDef name: before
MethodDef desc: get substring before (not including) target string. startpos = starting position (- = search from end forward)
MethodDef proto taString before(const taString&amp; x, int startpos = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: through
MethodDef desc: get substring through (including) target string. startpos = starting position (- = search from end forward)
MethodDef proto taString through(const taString&amp; x, int startpos = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: from
MethodDef desc: get substring from (including) target string. startpos = starting position (- = search from end forward)
MethodDef proto taString from(const taString&amp; x, int startpos = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: after
MethodDef desc: get substring after (not including) target string. startpos = starting position (- = search from end forward)
MethodDef proto taString after(const taString&amp; x, int startpos = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: between
MethodDef desc: get substring between (not including) target strings. startpos = starting position (- = search from end forward)
MethodDef proto taString between(const taString&amp; st_str, const taString&amp; ed_str, int startpos = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: left
MethodDef desc: get leftmost len chars
MethodDef proto taString left(int len)
MethodDef opts [u'CAT_Access']
MethodDef name: right
MethodDef desc: get rightmost len chars
MethodDef proto taString right(int len)
MethodDef opts [u'CAT_Access']
MethodDef name: elidedTo
MethodDef desc: return a string no more than len long, no line breaks, eliding chars if needed and adding ... marks; -1 is no eliding
MethodDef proto taString elidedTo(int len = -1)
MethodDef opts [u'CAT_Modify']
MethodDef name: elidedToFirstLine
MethodDef desc: if has newlines, elide to first line
MethodDef proto taString elidedToFirstLine()
MethodDef opts [u'CAT_Modify']
MethodDef name: del
MethodDef desc: delete len chars starting at pos
MethodDef proto void del(int pos, int len)
MethodDef opts [u'CAT_Modify']
MethodDef name: remove
MethodDef desc: remove target string from string. startpos = starting position (- = search from end forward)
MethodDef proto void remove(const taString&amp; y, int startpos = 0)
MethodDef opts [u'CAT_Modify']
MethodDef name: gsub
MethodDef desc: global substitution: substitute all occurrences of pat with repl
MethodDef proto int gsub(const taString&amp; pat, const taString&amp; repl)
MethodDef opts [u'CAT_Modify']
MethodDef name: repl
MethodDef desc: global substitution: substitute all occurrences of pat with repl and return the modified string
MethodDef proto taString_ref repl(const taString&amp; pat, const taString&amp; repl)
MethodDef opts [u'CAT_Modify']
MethodDef name: reverse
MethodDef desc: reverse order of this string (NOTE: modifies this string, and also returns the resulting string value)
MethodDef proto taString_ref reverse()
MethodDef opts [u'CAT_Modify']
MethodDef name: upcase
MethodDef desc: convert all letters to upper case of this string (NOTE: modifies this string, and also returns the resulting string value)
MethodDef proto taString_ref upcase()
MethodDef opts [u'CAT_Modify']
MethodDef name: downcase
MethodDef desc: convert all letters to lower case of this string (NOTE: modifies this string, and also returns the resulting string value)
MethodDef proto taString_ref downcase()
MethodDef opts [u'CAT_Modify']
MethodDef name: capitalize
MethodDef desc: capitalize the first letter of each word of this string (NOTE: modifies this string, and also returns the resulting string value)
MethodDef proto taString_ref capitalize()
MethodDef opts [u'CAT_Modify']
MethodDef name: xml_esc
MethodDef desc: xml escape, ex &amp; to &amp;amp; of this string (NOTE: modifies this string, and also returns the resulting string value)
MethodDef proto taString_ref xml_esc()
MethodDef opts [u'CAT_Modify']
MethodDef name: truncate
MethodDef desc: shortens the string to new_len (if less than curr)
MethodDef proto void truncate(uint new_len)
MethodDef opts [u'CAT_Modify']
MethodDef names [u'HexToInt', u'after', u'at', u'before', u'between', u'capitalize', u'cat', u'contains', u'contains_ci', u'del', u'downcase', u'elem', u'elidedTo', u'elidedToFirstLine', u'empty', u'endsWith', u'firstchar', u'freq', u'from', u'gsub', u'index', u'index_ci', u'isInt', u'lastchar', u'left', u'length', u'matches', u'nonempty', u'prepend', u'remove', u'repl', u'reverse', u'right', u'startsWith', u'through', u'toBool', u'toChar', u'toDouble', u'toFloat', u'toInt', u'truncate', u'upcase', u'xml_esc']
########################################################################
TypeDef len: 11
TypeDef name:  Variant
TypeDef type: class
TypeDef desc: flexible value m_type that can hold many different types of content
TypeDef cats:, []
TypeDef opts:, []
EnumDef name: T_Invalid
EnumDef val: T_Invalid
EnumDef name: T_Bool
EnumDef val: T_Bool
EnumDef name: T_Int
EnumDef val: T_Int
EnumDef name: T_UInt
EnumDef val: T_UInt
EnumDef name: T_Int64
EnumDef val: T_Int64
EnumDef name: T_UInt64
EnumDef val: T_UInt64
EnumDef name: T_Double
EnumDef val: T_Double
EnumDef name: T_Char
EnumDef val: T_Char
EnumDef name: T_String
EnumDef val: T_String
EnumDef name: T_Ptr
EnumDef val: T_Ptr
EnumDef: void*
EnumDef name: T_Base
EnumDef val: T_Base
EnumDef: taBase ref counted
EnumDef name: T_Matrix
EnumDef val: T_Matrix
EnumDef: taMatrix ref counted
EnumDef names: [u'VarType']
MethodDef name: formatNumber
MethodDef desc: format a number (hex for integral types only)
MethodDef proto const_taString formatNumber(const Variant&amp; val, short prec, bool hex = false)
MethodDef name: addrData
MethodDef desc: this is for low-level routines
MethodDef proto const_void_ptr addrData()
MethodDef name: isAtomic
MethodDef desc: &apos;true&apos; for non-ptr types (includes Invalid)
MethodDef proto bool isAtomic()
MethodDef name: isDefault
MethodDef desc: returns &apos;true&apos; if contains the default value for the type (null is ignored)
MethodDef proto bool isDefault()
MethodDef name: isInvalid
MethodDef proto bool isInvalid()
MethodDef name: isNull
MethodDef desc: &apos;true&apos; if the value is null
MethodDef proto bool isNull()
MethodDef name: isNumeric
MethodDef desc: &apos;true&apos; if NumericStrict, or valid numeric string
MethodDef proto bool isNumeric()
MethodDef name: isNumericStrict
MethodDef desc: &apos;true&apos; if an int-ish, float, or char type
MethodDef proto bool isNumericStrict()
MethodDef name: isStringType
MethodDef desc: &apos;true&apos; if a char or String
MethodDef proto bool isStringType()
MethodDef name: isPtrType
MethodDef desc: &apos;true&apos; if the value is a void*, taBase*, or taMatrix*
MethodDef proto bool isPtrType()
MethodDef name: isBaseType
MethodDef desc: &apos;true&apos; if the value is a taBase* or taMatrix*
MethodDef proto bool isBaseType()
MethodDef name: isMatrixType
MethodDef desc: &apos;true&apos; if the value is a taMatrix*, BUT could be NULL
MethodDef proto bool isMatrixType()
MethodDef name: type
MethodDef proto VarType type()
MethodDef name: setType
MethodDef desc: force it to be given type, if changed, set to default value
MethodDef proto void setType(Variant::VarType value)
MethodDef name: getTypeAsString
MethodDef desc: for debugging, get variant type as a string
MethodDef proto taString getTypeAsString()
MethodDef name: save
MethodDef desc: streams out using &lt;&lt; for the type
MethodDef proto void save(ostream&amp; s)
MethodDef name: load
MethodDef desc: streams in as a string, use toXxx if it is of another type
MethodDef proto void load(istream&amp; s)
MethodDef name: setInvalid
MethodDef desc: invalid/null
MethodDef proto void setInvalid()
MethodDef name: setVariant
MethodDef desc: basically a copy
MethodDef proto void setVariant(const Variant&amp; cp)
MethodDef name: setVariantData
MethodDef desc: preserve target type, only copy data
MethodDef proto void setVariantData(const Variant&amp; cp)
MethodDef name: setBool
MethodDef proto void setBool(bool val, bool null = false)
MethodDef name: setByte
MethodDef proto void setByte(byte val, bool null = false)
MethodDef name: setInt
MethodDef proto void setInt(int val, bool null = false)
MethodDef name: setUInt
MethodDef proto void setUInt(uint val, bool null = false)
MethodDef name: setInt64
MethodDef proto void setInt64(ta_int64_t val, bool null = false)
MethodDef name: setUInt64
MethodDef proto void setUInt64(ta_uint64_t val, bool null = false)
MethodDef name: setIntPtr
MethodDef proto void setIntPtr(intptr_t val, bool null = false)
MethodDef name: setFloat
MethodDef proto void setFloat(float val, bool null = false)
MethodDef name: setDouble
MethodDef proto void setDouble(double val, bool null = false)
MethodDef name: setChar
MethodDef proto void setChar(char val, bool null = false)
MethodDef name: setPtr
MethodDef proto void setPtr(void* val)
MethodDef name: setString
MethodDef desc: handles setting of a string
MethodDef proto void setString(const taString&amp; cp, bool null = false)
MethodDef name: setCString
MethodDef proto void setCString(const char* val, bool null = false)
MethodDef name: setBase
MethodDef desc: handles setting of a taBase
MethodDef proto void setBase(taBase* cp)
MethodDef name: setMatrix
MethodDef desc: handles setting of a matrix
MethodDef proto void setMatrix(taMatrix* cp)
MethodDef name: updateFromString
MethodDef desc: set value from string, but keep current type
MethodDef proto void updateFromString(const taString&amp; val)
MethodDef name: toBool
MethodDef proto bool toBool()
MethodDef name: toByte
MethodDef proto byte toByte()
MethodDef name: toInt
MethodDef proto int toInt()
MethodDef name: toUInt
MethodDef proto uint toUInt()
MethodDef name: toInt64
MethodDef proto ta_int64_t toInt64()
MethodDef name: toUInt64
MethodDef proto ta_uint64_t toUInt64()
MethodDef name: toFloat
MethodDef proto float toFloat()
MethodDef name: toDouble
MethodDef proto double toDouble()
MethodDef name: toChar
MethodDef proto char toChar()
MethodDef name: toPtr
MethodDef desc: must be a void*, Base, or Matrix, otherwise returns NULL
MethodDef proto void_ptr toPtr()
MethodDef name: toString
MethodDef proto taString toString()
MethodDef name: toBase
MethodDef desc: must be a Base or Matrix, otherwise returns NULL
MethodDef proto taBase_ptr toBase()
MethodDef name: toMatrix
MethodDef desc: must be a Matrix, otherwise returns NULL
MethodDef proto taMatrix_ptr toMatrix()
MethodDef name: toCssLiteral
MethodDef desc: to a form suitable for initializing a Css variable, ex. quoted strings, U suffix for unsigned, path for taBase variable, etc.
MethodDef proto const_taString toCssLiteral()
MethodDef name: eqVariant
MethodDef desc: value equality, using fairly relaxed type rules; Invalid never == anything
MethodDef proto bool eqVariant(const Variant&amp; val)
MethodDef name: eqBool
MethodDef proto bool eqBool(bool val)
MethodDef name: eqByte
MethodDef proto bool eqByte(byte val)
MethodDef name: eqInt
MethodDef proto bool eqInt(int val)
MethodDef name: eqUInt
MethodDef proto bool eqUInt(uint val)
MethodDef name: eqInt64
MethodDef proto bool eqInt64(ta_int64_t val)
MethodDef name: eqUInt64
MethodDef proto bool eqUInt64(ta_uint64_t val)
MethodDef name: eqIntPtr
MethodDef proto bool eqIntPtr(intptr_t val)
MethodDef name: eqFloat
MethodDef proto bool eqFloat(float val)
MethodDef name: eqDouble
MethodDef proto bool eqDouble(double val)
MethodDef name: eqChar
MethodDef proto bool eqChar(char val)
MethodDef name: eqString
MethodDef desc: handles eqting of a string
MethodDef proto bool eqString(const taString&amp; val)
MethodDef name: eqCString
MethodDef proto bool eqCString(const char* val)
MethodDef name: eqPtr
MethodDef proto bool eqPtr(const void* val)
MethodDef name: eqBase
MethodDef proto bool eqBase(const taBase* val)
MethodDef name: eqMatrix
MethodDef desc: comparison operations, &lt; -ve, == 0, &gt; +ve
MethodDef proto bool eqMatrix(const taMatrix* val)
MethodDef name: cmpVariant
MethodDef desc: value compare, using fairly relaxed type rules; Invalid never == anything
MethodDef proto int cmpVariant(const Variant&amp; val)
MethodDef name: cmpBool
MethodDef proto int cmpBool(bool val)
MethodDef name: cmpByte
MethodDef proto int cmpByte(byte val)
MethodDef name: cmpInt
MethodDef proto int cmpInt(int val)
MethodDef name: cmpUInt
MethodDef proto int cmpUInt(uint val)
MethodDef name: cmpInt64
MethodDef proto int cmpInt64(ta_int64_t val)
MethodDef name: cmpUInt64
MethodDef proto int cmpUInt64(ta_uint64_t val)
MethodDef name: cmpIntPtr
MethodDef proto int cmpIntPtr(intptr_t val)
MethodDef name: cmpFloat
MethodDef proto int cmpFloat(float val)
MethodDef name: cmpDouble
MethodDef proto int cmpDouble(double val)
MethodDef name: cmpChar
MethodDef proto int cmpChar(char val)
MethodDef name: cmpString
MethodDef desc: handles cmpting of a string
MethodDef proto int cmpString(const taString&amp; val)
MethodDef name: cmpCString
MethodDef proto int cmpCString(const char* val)
MethodDef name: cmpPtr
MethodDef proto int cmpPtr(const void* val)
MethodDef name: cmpBase
MethodDef proto int cmpBase(const taBase* val)
MethodDef name: cmpMatrix
MethodDef desc: TODO bool	canCast(VarType new_type);
MethodDef proto int cmpMatrix(const taMatrix* val)
MethodDef name: GetRepInfo
MethodDef desc: current typedef, and pointer to the data
MethodDef proto void GetRepInfo(TypeDef*&amp; typ, void*&amp; data)
MethodDef name: UpdateAfterLoad
MethodDef desc: called after internal modifications, to reassert correctness of null etc.
MethodDef proto void UpdateAfterLoad()
MethodDef name: ForceType
MethodDef desc: called by streaming system to force the type to be indicated kind
MethodDef proto void ForceType(Variant::VarType vt, bool null)
MethodDef name: Dump_Save_Type
MethodDef desc: dumps type and null
MethodDef proto void Dump_Save_Type(ostream&amp; strm)
MethodDef name: Dump_Load_Type
MethodDef desc: loads type and null, using taMisc:: strm routines; calls ForceType; returns &apos;true&apos; if type loaded
MethodDef proto bool Dump_Load_Type(istream&amp; strm, int&amp; last_char)
MethodDef names [u'Dump_Load_Type', u'Dump_Save_Type', u'ForceType', u'GetRepInfo', u'UpdateAfterLoad', u'addrData', u'cmpBase', u'cmpBool', u'cmpByte', u'cmpCString', u'cmpChar', u'cmpDouble', u'cmpFloat', u'cmpInt', u'cmpInt64', u'cmpIntPtr', u'cmpMatrix', u'cmpPtr', u'cmpString', u'cmpUInt', u'cmpUInt64', u'cmpVariant', u'eqBase', u'eqBool', u'eqByte', u'eqCString', u'eqChar', u'eqDouble', u'eqFloat', u'eqInt', u'eqInt64', u'eqIntPtr', u'eqMatrix', u'eqPtr', u'eqString', u'eqUInt', u'eqUInt64', u'eqVariant', u'formatNumber', u'getTypeAsString', u'isAtomic', u'isBaseType', u'isDefault', u'isInvalid', u'isMatrixType', u'isNull', u'isNumeric', u'isNumericStrict', u'isPtrType', u'isStringType', u'load', u'save', u'setBase', u'setBool', u'setByte', u'setCString', u'setChar', u'setDouble', u'setFloat', u'setInt', u'setInt64', u'setIntPtr', u'setInvalid', u'setMatrix', u'setPtr', u'setString', u'setType', u'setUInt', u'setUInt64', u'setVariant', u'setVariantData', u'toBase', u'toBool', u'toByte', u'toChar', u'toCssLiteral', u'toDouble', u'toFloat', u'toInt', u'toInt64', u'toMatrix', u'toPtr', u'toString', u'toUInt', u'toUInt64', u'type', u'updateFromString']
########################################################################
TypeDef len: 13
TypeDef name:  iPoint
TypeDef type: class
TypeDef desc: assumes x and y are array sizes -- gets the row-major array index, or -1 if out of bounds
TypeDef cats:, []
TypeDef opts:, [u'EDIT_INLINE']
TypeDef children: [u'iVec2i']
MemberDef name: x
MemberDef type: int
MemberDef name: y
MemberDef type: int
MethodDef name: getArrayIndex
MethodDef desc: assumes x and y are array sizes -- gets the row-major array index, or -1 if out of bounds
MethodDef proto int getArrayIndex(int x_, int y_)
MethodDef name: isEqual
MethodDef proto bool isEqual(int x_, int y_)
MethodDef name: getValue
MethodDef proto void getValue(int&amp; x_, int&amp; y_)
MethodDef name: setValue
MethodDef proto void setValue(int x_, int y_)
MethodDef names [u'getArrayIndex', u'getValue', u'isEqual', u'setValue']
########################################################################
TypeDef len: 11
TypeDef name:  iVec2i
TypeDef type: class
TypeDef desc: synonym
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'iPoint']
TypeDef children: [u'iVec3i']
########################################################################
TypeDef len: 11
TypeDef name:  iVec3i
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'EDIT_INLINE']
TypeDef parents: [u'iPoint', u'iVec2i']
MemberDef name: z
MemberDef type: int
########################################################################
TypeDef len: 13
TypeDef name:  iVec3f
TypeDef type: class
TypeDef desc: 3d vector, for things like points and sizes
TypeDef cats:, []
TypeDef opts:, [u'EDIT_INLINE']
MemberDef name: x
MemberDef type: float
MemberDef name: y
MemberDef type: float
MemberDef name: z
MemberDef type: float
MethodDef name: isEqual
MethodDef proto bool isEqual(float x_, float y_, float z_)
MethodDef name: isUnity
MethodDef proto bool isUnity()
MethodDef name: isZero
MethodDef proto bool isZero()
MethodDef name: setValue
MethodDef proto void setValue(float x_, float y_, float z_)
MethodDef names [u'isEqual', u'isUnity', u'isZero', u'setValue']
########################################################################
TypeDef len: 13
TypeDef name:  iBox3f
TypeDef type: class
TypeDef desc: 3d box, typically used for a bounding box in a normalized coordinate system
TypeDef cats:, []
TypeDef opts:, [u'EDIT_INLINE']
MemberDef name: min
MemberDef type: iVec3f
MemberDef desc: minimum point
MemberDef name: max
MemberDef type: iVec3f
MemberDef desc: maximum point
MethodDef name: center
MethodDef desc: center point of the box
MethodDef proto iVec3f center()
MethodDef name: height
MethodDef proto float height()
MethodDef name: width
MethodDef proto float width()
MethodDef name: depth
MethodDef proto float depth()
MethodDef name: bottom
MethodDef proto float bottom()
MethodDef name: top
MethodDef proto float top()
MethodDef name: left
MethodDef proto float left()
MethodDef name: right
MethodDef proto float right()
MethodDef name: far
MethodDef proto float far()
MethodDef name: near
MethodDef proto float near()
MethodDef name: size
MethodDef desc: size of the box in each dimension
MethodDef proto iVec3f size()
MethodDef name: isZero
MethodDef proto bool isZero()
MethodDef name: setValue
MethodDef proto void setValue(const iVec3f&amp; min_, const iVec3f&amp; max_)
MethodDef name: setValueCS
MethodDef desc: set the value by specifying the center and the size -- can only specify boxes with planes parallel to the coord axes
MethodDef proto void setValueCS(const iVec3f&amp; center_, const iVec3f&amp; size_)
MethodDef names [u'bottom', u'center', u'depth', u'far', u'height', u'isZero', u'left', u'near', u'right', u'setValue', u'setValueCS', u'size', u'top', u'width']
########################################################################
TypeDef len: 7
TypeDef name:  streambuf
TypeDef type: class
TypeDef desc: In case some header files defines these as macros.
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 11
TypeDef name:  ios
TypeDef type: class
TypeDef desc: 1
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: [u'ostream', u'istream']
EnumDef name: boolalpha
EnumDef val: boolalpha
EnumDef name: dec
EnumDef val: dec
EnumDef name: fixed
EnumDef val: fixed
EnumDef name: hex
EnumDef val: hex
EnumDef name: internal
EnumDef val: internal
EnumDef name: left
EnumDef val: left
EnumDef name: oct
EnumDef val: oct
EnumDef name: right
EnumDef val: right
EnumDef name: scientific
EnumDef val: scientific
EnumDef name: showbase
EnumDef val: showbase
EnumDef name: showpoint
EnumDef val: showpoint
EnumDef name: showpos
EnumDef val: showpos
EnumDef name: skipws
EnumDef val: skipws
EnumDef name: unitbuf
EnumDef val: unitbuf
EnumDef name: uppercase
EnumDef val: uppercase
EnumDef name: adjustfield
EnumDef val: adjustfield
EnumDef name: basefield
EnumDef val: basefield
EnumDef name: floatfield
EnumDef val: floatfield
EnumDef name: badbit
EnumDef val: badbit
EnumDef name: eofbit
EnumDef val: eofbit
EnumDef name: failbit
EnumDef val: failbit
EnumDef name: goodbit
EnumDef val: goodbit
EnumDef name: app
EnumDef val: app
EnumDef name: ate
EnumDef val: ate
EnumDef name: binary
EnumDef val: binary
EnumDef name: in
EnumDef val: in
EnumDef name: out
EnumDef val: out
EnumDef name: trunc
EnumDef val: trunc
EnumDef name: beg
EnumDef val: beg
EnumDef name: cur
EnumDef val: cur
EnumDef: 1
EnumDef name: end
EnumDef val: end
EnumDef: 2
EnumDef names: [u'fmtflags', u'iostate', u'openmode', u'seekdir']
MethodDef name: flags
MethodDef proto _Ios_Fmtflags flags()
MethodDef name: setf
MethodDef proto _Ios_Fmtflags setf(ios::fmtflags val)
MethodDef name: unsetf
MethodDef proto void unsetf(ios::fmtflags mask)
MethodDef name: tie
MethodDef proto ostream_ptr tie(ostream* val)
MethodDef name: precision
MethodDef proto int precision(int newp)
MethodDef name: width
MethodDef proto int width(int val)
MethodDef name: clear
MethodDef proto void clear(ios::iostate state = 0)
MethodDef name: setstate
MethodDef proto void setstate(ios::iostate flag)
MethodDef name: good
MethodDef proto int good()
MethodDef name: eof
MethodDef proto int eof()
MethodDef name: fail
MethodDef proto int fail()
MethodDef name: bad
MethodDef proto int bad()
MethodDef name: pword
MethodDef proto void_ptr pword(int na)
MethodDef name: iword
MethodDef proto long iword(int na)
MethodDef names [u'bad', u'clear', u'eof', u'fail', u'flags', u'good', u'iword', u'precision', u'pword', u'setf', u'setstate', u'tie', u'unsetf', u'width']
########################################################################
TypeDef len: 11
TypeDef name:  ostream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios']
TypeDef children: [u'iostream', u'ofstream', u'ostringstream']
MethodDef name: flush
MethodDef proto ostream_ref flush()
MethodDef name: put
MethodDef proto ostream_ref put(char c)
MethodDef name: write
MethodDef proto ostream_ref write(const char* s, streamsize n)
MethodDef name: seekp
MethodDef proto ostream_ref seekp(streamoff off, ios::seekdir dir)
MethodDef name: tellp
MethodDef proto streampos tellp()
MethodDef names [u'flush', u'put', u'seekp', u'tellp', u'write']
########################################################################
TypeDef len: 11
TypeDef name:  istream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios']
TypeDef children: [u'iostream', u'ifstream', u'istringstream']
MethodDef name: getline
MethodDef proto istream_ref getline(char* ptr, int len, char delim = &apos;
&apos;)
MethodDef name: read
MethodDef proto istream_ref read(char* ptr, streamsize n)
MethodDef name: get
MethodDef proto int get()
MethodDef name: peek
MethodDef proto int peek()
MethodDef name: ignore
MethodDef proto istream_ref ignore(int n = 1, int delim = (-1))
MethodDef name: sync
MethodDef proto int sync()
MethodDef name: seekg
MethodDef proto istream_ref seekg(streamoff off, ios::seekdir dir)
MethodDef name: tellg
MethodDef proto streampos tellg()
MethodDef name: putback
MethodDef proto istream_ref putback(char ch)
MethodDef name: unget
MethodDef proto istream_ref unget()
MethodDef names [u'get', u'getline', u'ignore', u'peek', u'putback', u'read', u'seekg', u'sync', u'tellg', u'unget']
########################################################################
TypeDef len: 13
TypeDef name:  iostream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'MULT_INHERIT']
TypeDef parents: [u'ios', u'ostream', u'ios', u'istream']
TypeDef children: [u'fstream', u'stringstream']
MethodDef name: flush
MethodDef proto ostream_ref flush()
MethodDef name: put
MethodDef proto ostream_ref put(char c)
MethodDef name: write
MethodDef proto ostream_ref write(const char* s, streamsize n)
MethodDef name: seekp
MethodDef proto ostream_ref seekp(streamoff off, ios::seekdir dir)
MethodDef name: tellp
MethodDef proto streampos tellp()
MethodDef names [u'flush', u'put', u'seekp', u'tellp', u'write']
########################################################################
TypeDef len: 9
TypeDef name:  ifstream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios', u'istream']
MethodDef name: close
MethodDef proto void close()
MethodDef name: is_open
MethodDef proto int is_open()
MethodDef name: open
MethodDef proto void open(const char* name, ios::openmode mode = 0x08)
MethodDef names [u'close', u'is_open', u'open']
########################################################################
TypeDef len: 9
TypeDef name:  ofstream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios', u'ostream']
MethodDef name: close
MethodDef proto void close()
MethodDef name: is_open
MethodDef proto int is_open()
MethodDef name: open
MethodDef proto void open(const char* name, ios::openmode mode = 0x10)
MethodDef names [u'close', u'is_open', u'open']
########################################################################
TypeDef len: 9
TypeDef name:  fstream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios', u'ostream', u'ios', u'istream', u'iostream']
MethodDef name: close
MethodDef proto void close()
MethodDef name: is_open
MethodDef proto int is_open()
MethodDef name: open
MethodDef proto void open(const char* name, ios::openmode mode)
MethodDef names [u'close', u'is_open', u'open']
########################################################################
TypeDef len: 7
TypeDef name:  istringstream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios', u'istream']
########################################################################
TypeDef len: 7
TypeDef name:  ostringstream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios', u'ostream']
########################################################################
TypeDef len: 7
TypeDef name:  stringstream
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ios', u'ostream', u'ios', u'istream', u'iostream']
########################################################################
TypeDef len: 9
TypeDef name:  taPlatform
TypeDef type: class
TypeDef desc: class to hold static members for platform specific functions
TypeDef cats:, []
TypeDef opts:, [u'[line]']
MethodDef name: cpuCount
MethodDef desc: number of physical cpus
MethodDef proto int cpuCount()
MethodDef name: hostName
MethodDef desc: name of the computer
MethodDef proto taString hostName()
MethodDef name: processId
MethodDef desc: returns a process-specific Id
MethodDef proto int processId()
MethodDef name: tickCount
MethodDef desc: ticks since system started -- def of a &apos;tick&apos; is system dependent
MethodDef proto int tickCount()
MethodDef name: finalSep
MethodDef desc: return string that has a valid final separator
MethodDef proto taString finalSep(const taString&amp; in)
MethodDef name: fileExists
MethodDef desc: returns true if the file exists (can be absolute or partial pathed)
MethodDef proto bool fileExists(const taString&amp; fname)
MethodDef name: isQualifiedPath
MethodDef desc: true if the fname is already an absolute or qualified relative path
MethodDef proto bool isQualifiedPath(const taString&amp; fname)
MethodDef name: getTempPath
MethodDef desc: get a valid temporary path (that user can write to)
MethodDef proto taString getTempPath()
MethodDef name: getHomePath
MethodDef desc: the user&apos;s home folder
MethodDef proto taString getHomePath()
MethodDef name: getAppDataPath
MethodDef desc: root for preference data
MethodDef proto taString getAppDataPath(const taString&amp; appname)
MethodDef name: getFileName
MethodDef desc: retrieves only the filename&amp;ext, w/o leading path info
MethodDef proto taString getFileName(const taString&amp; in)
MethodDef name: getFilePath
MethodDef desc: retrieves only the file path, if any (no final separator)
MethodDef proto taString getFilePath(const taString&amp; in)
MethodDef name: posFinalSep
MethodDef desc: position of final path separator, -1 if not found
MethodDef proto int posFinalSep(const taString&amp; in)
MethodDef name: mkdir
MethodDef desc: make or assert the directory, true if ok
MethodDef proto bool mkdir(const taString&amp; dir)
MethodDef name: unescapeBackslash
MethodDef desc: insures that C escaped backslashes are decoded -- typically used by maketa when reading from preprocesser {Xxx &lt;fname&gt;} values
MethodDef proto taString unescapeBackslash(const taString&amp; in)
MethodDef opts [u'[line]']
MethodDef name: lexCanonical
MethodDef desc: a canonical lexical form, for comparing exactly paths/files (note: does not dereference .. etc.); also insures the C escaped backslashes are decoded
MethodDef proto taString lexCanonical(const taString&amp; in)
MethodDef name: userName
MethodDef desc: username of logged in user
MethodDef proto taString userName()
MethodDef name: exec
MethodDef proto int exec(const taString&amp; cmd)
MethodDef name: sleep
MethodDef desc: sleep the specified number of seconds
MethodDef proto void sleep(int sec)
MethodDef name: msleep
MethodDef desc: sleep the specified number of milliseconds
MethodDef proto void msleep(int msec)
MethodDef names [u'cpuCount', u'exec', u'fileExists', u'finalSep', u'getAppDataPath', u'getFileName', u'getFilePath', u'getHomePath', u'getTempPath', u'hostName', u'isQualifiedPath', u'lexCanonical', u'mkdir', u'msleep', u'posFinalSep', u'processId', u'sleep', u'tickCount', u'unescapeBackslash', u'userName']
########################################################################
TypeDef len: 7
TypeDef name:  taStrRep
TypeDef type: class
TypeDef desc: string length (not including null terminator)
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: len
MemberDef type: uint
MemberDef desc: string length (not including null terminator)
MemberDef name: sz
MemberDef type: uint
MemberDef desc: allocated space ((not including null terminator)
MemberDef name: cnt
MemberDef type: uint
MemberDef desc: reference count (when goes to 0, instance is deleted)
MemberDef name: s
MemberDef type: char*
MemberDef desc: the string starts here, null terminator always maintained
########################################################################
TypeDef len: 11
TypeDef name:  NameVar
TypeDef type: class
TypeDef desc: a name-value representation, using a String and a Variant
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: name
MemberDef type: taString
MemberDef desc: the name
MemberDef name: value
MemberDef type: Variant
MemberDef desc: the value
MethodDef name: Parse
MethodDef desc: pulls the nm and val out of name=value (ignores ws around the =); true if = found
MethodDef proto bool Parse(const taString&amp; raw, taString&amp; name, taString&amp; value)
MethodDef name: GetStr
MethodDef proto taString GetStr()
MethodDef name: SetFmStr
MethodDef proto void SetFmStr(const taString&amp; val)
MethodDef names [u'GetStr', u'Parse', u'SetFmStr']
########################################################################
TypeDef len: 7
TypeDef name:  VarCvt
TypeDef type: class
TypeDef desc: variant converter -- esp used in stub routines for autoconverting
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 13
TypeDef name:  iFont
TypeDef type: class
TypeDef desc: family name of the font, such as &apos;Helvetica&apos; or &apos;Arial&apos;
TypeDef cats:, []
TypeDef opts:, [u'BITS']
TypeDef children: [u'FontSpec']
EnumDef name: Bold
EnumDef val: Bold
EnumDef name: Italic
EnumDef val: Italic
EnumDef name: Underline
EnumDef val: Underline
EnumDef names: [u'Attributes']
MemberDef name: fontName
MemberDef type: taString
MemberDef desc: family name of the font, such as &apos;Helvetica&apos; or &apos;Arial&apos;
MemberDef name: attribs
MemberDef type: iFont::Attributes
MemberDef opts [u'BITS']
MemberDef cats []
MemberDef desc: font modifiers
MemberDef name: pointSize
MemberDef type: float
MemberDef desc: point size of the font -- will be aproximated in 3D
MemberDef name: stretch
MemberDef type: int
MemberDef opts [u'EXPERT', u'DEF_100']
MemberDef cats []
MemberDef desc: the degree of stretch, less is narrower
MethodDef name: bold
MethodDef proto bool bold()
MethodDef name: setBold
MethodDef proto void setBold(bool value)
MethodDef name: italic
MethodDef proto bool italic()
MethodDef name: setItalic
MethodDef proto void setItalic(bool value)
MethodDef name: setPointSize
MethodDef proto void setPointSize(int value)
MethodDef name: setStretch
MethodDef proto void setStretch(int value)
MethodDef name: underline
MethodDef proto bool underline()
MethodDef name: setUnderline
MethodDef proto void setUnderline(bool value)
MethodDef name: copy
MethodDef proto void copy(const iFont&amp; src)
MethodDef name: equals
MethodDef proto bool equals(const iFont&amp; b)
MethodDef name: setRawName
MethodDef proto void setRawName(const char* raw_name)
MethodDef names [u'bold', u'copy', u'equals', u'italic', u'setBold', u'setItalic', u'setPointSize', u'setRawName', u'setStretch', u'setUnderline', u'underline']
########################################################################
TypeDef len: 11
TypeDef name:  taDataLink
TypeDef type: class
TypeDef desc: interface for taiDataLink and descendants
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'NO_CSS', u'NO_MEMBERS', u'VIRT_BASE']
TypeDef children: []
########################################################################
TypeDef len: 15
TypeDef name:  taPtrList_impl
TypeDef type: class
TypeDef desc: implementation of the pointer list class
TypeDef cats:, []
TypeDef opts:, [u'READ_ONLY', u'NO_SAVE']
TypeDef children: [u'taPtrList', u'taPtrList_base']
EnumDef name: EK_NULL
EnumDef val: EK_NULL
EnumDef: duh!
EnumDef name: EK_OWN
EnumDef val: EK_OWN
EnumDef: owned by list, is an instance
EnumDef name: EK_LINK
EnumDef val: EK_LINK
EnumDef: is a linked item
EnumDef names: [u'ElKind']
MemberDef name: alloc_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: allocation size
MemberDef name: size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: number of elements in the list
MethodDef name: Index
MethodDef desc: get actual index from index value that can also be negative, meaning access from end of list
MethodDef proto int Index(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: InRange
MethodDef desc: is the specified index within range of 0 &gt;= idx &lt; size
MethodDef proto bool InRange(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: Alloc
MethodDef desc: allocate a list big enough for given number of elements (or current size) -- uses optimized memory allocation policies and generally allocates more than currently needed
MethodDef proto bool Alloc(int sz)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: AllocExact
MethodDef desc: allocate exact number specified
MethodDef proto bool AllocExact(int sz)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: Reset
MethodDef desc: reset the list (remove all elements)
MethodDef proto void Reset()
MethodDef opts [u'CAT_Modify']
MethodDef name: IsEmpty
MethodDef desc: is the list empty of elements (i.e., size == 0)
MethodDef proto bool IsEmpty()
MethodDef opts [u'CAT_Access']
MethodDef name: BuildHashTable
MethodDef desc: build a hash table with given number of buckets (not dynamic, so make it big)
MethodDef proto void BuildHashTable(int n_buckets)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveName
MethodDef desc: remove (and delete) named element from list
MethodDef proto bool RemoveName(const taString&amp; item_nm)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveIdx
MethodDef desc: remove (and delete) element from list at index
MethodDef proto bool RemoveIdx(int idx)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveLast
MethodDef desc: remove the last element on the list
MethodDef proto bool RemoveLast()
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveAll
MethodDef desc: Remove all elements on the list
MethodDef proto void RemoveAll()
MethodDef opts [u'MENU', u'MENU_ON_Edit', u'CONFIRM', u'CAT_Modify']
MethodDef name: MoveIdx
MethodDef desc: Move element from index (from) to position (to) in list
MethodDef proto bool MoveIdx(int from, int to)
MethodDef opts [u'CAT_Modify']
MethodDef name: MoveBeforeIdx
MethodDef desc: Move element from index (from) to just before position (to) in list; for end, use to=-1 or size
MethodDef proto bool MoveBeforeIdx(int from, int to)
MethodDef opts [u'CAT_Modify']
MethodDef name: SwapIdx
MethodDef desc: Swap the elements in the two given positions on the list
MethodDef proto bool SwapIdx(int pos1, int pos2)
MethodDef opts [u'CAT_Modify']
MethodDef name: PopAll
MethodDef desc: pop all elements off the stack
MethodDef proto void PopAll()
MethodDef opts [u'CAT_Modify']
MethodDef name: Permute
MethodDef desc: permute the items in the list into a random order
MethodDef proto void Permute()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Order']
MethodDef name: Sort
MethodDef desc: sort the items in the list in alpha order according to name (or El_Compare_)
MethodDef proto void Sort(bool descending = false)
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Order']
MethodDef name: FirstEl
MethodDef desc: get the first item on the list, initialize iterator
MethodDef proto void_ptr FirstEl(taListItr&amp; itr)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: NextEl
MethodDef desc: get the next item on the list according to iterator
MethodDef proto void_ptr NextEl(taListItr&amp; itr)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: Duplicate
MethodDef desc: duplicate (clone &amp; add) elements of given list into this one
MethodDef proto void Duplicate(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: DupeUniqNameNew
MethodDef desc: duplicate so result is unique names, replacing with new ones where dupl
MethodDef proto void DupeUniqNameNew(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: DupeUniqNameOld
MethodDef desc: duplicate so result is unique names, using old ones where dupl
MethodDef proto void DupeUniqNameOld(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Stealth_Borrow
MethodDef desc: borrow without referencing the borrowed elements (i.e. use AddEl_())
MethodDef proto void Stealth_Borrow(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Borrow
MethodDef desc: borrow (link) elements of given list into this one
MethodDef proto void Borrow(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: BorrowUnique
MethodDef desc: borrow so result is unique list
MethodDef proto void BorrowUnique(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: BorrowUniqNameNew
MethodDef desc: borrow so result is unique names, replacing with new ones where dupl
MethodDef proto void BorrowUniqNameNew(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: BorrowUniqNameOld
MethodDef desc: borrow so result is unique names, using old ones where dupl
MethodDef proto void BorrowUniqNameOld(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Common
MethodDef desc: apply copy operator to only those items in common between the two lists
MethodDef proto void Copy_Common(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Duplicate
MethodDef desc: apply copy operator to items, use duplicate to add new ones from cp (if necc)
MethodDef proto void Copy_Duplicate(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Borrow
MethodDef desc: apply copy operator to items, use borrow to add new ones from cp (if necc)
MethodDef proto void Copy_Borrow(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Exact
MethodDef desc: makes us basically identical to cp, in number, and type
MethodDef proto void Copy_Exact(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: List
MethodDef desc: List the group items
MethodDef proto void List(ostream&amp; strm = cout)
MethodDef opts [u'CAT_Display']
MethodDef names [u'Alloc', u'AllocExact', u'Borrow', u'BorrowUniqNameNew', u'BorrowUniqNameOld', u'BorrowUnique', u'BuildHashTable', u'Copy_Borrow', u'Copy_Common', u'Copy_Duplicate', u'Copy_Exact', u'DupeUniqNameNew', u'DupeUniqNameOld', u'Duplicate', u'FirstEl', u'InRange', u'Index', u'IsEmpty', u'List', u'MoveBeforeIdx', u'MoveIdx', u'NextEl', u'Permute', u'PopAll', u'RemoveAll', u'RemoveIdx', u'RemoveLast', u'RemoveName', u'Reset', u'Sort', u'Stealth_Borrow', u'SwapIdx']
########################################################################
TypeDef len: 9
TypeDef name:  taPtrList
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'taPtrList_impl']
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  taPtrList_base
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'taPtrList_impl']
TypeDef children: []
########################################################################
TypeDef len: 11
TypeDef name:  taHashEl
TypeDef type: class
TypeDef desc: holds information for one entry of the hash table
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: hash_code
MemberDef type: taHashVal
MemberDef desc: hash-coded value of name
MemberDef name: list_idx
MemberDef type: int
MemberDef desc: index of item in list
MethodDef name: Initialize
MethodDef proto void Initialize()
MethodDef names [u'Initialize']
########################################################################
TypeDef len: 9
TypeDef name:  taHashBucket
TypeDef type: class
TypeDef desc: holds a set of hash table entries that all have the same hash_code modulo value
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: FindHashEl
MethodDef desc: find index of item (in the bucket) with given hash code value
MethodDef proto int FindHashEl(taHashVal hash)
MethodDef name: FindListEl
MethodDef desc: find index of item (list_idx) with given hash code value
MethodDef proto int FindListEl(taHashVal hash)
MethodDef names [u'FindHashEl', u'FindListEl']
########################################################################
TypeDef len: 13
TypeDef name:  taHashTable
TypeDef type: class
TypeDef desc: table has a number of buckets, each with some hash values
TypeDef cats:, []
TypeDef opts:, []
EnumDef name: KT_NAME
EnumDef val: KT_NAME
EnumDef: use item name; the legacy default
EnumDef name: KT_PTR
EnumDef val: KT_PTR
EnumDef: use the item pointer
EnumDef names: [u'KeyType']
MemberDef name: n_bucket_primes
MemberDef type: int*
MemberDef desc: prime numbers for number of buckets
MemberDef name: n_primes
MemberDef type: int
MemberDef desc: number of prime numbers (86)
MemberDef name: bucket_max
MemberDef type: int
MemberDef desc: maximum size of any bucket
MemberDef name: key_type
MemberDef type: taHashTable::KeyType
MethodDef name: FindListEl
MethodDef desc: find index on list from given hash value of element (-1 if not found)
MethodDef proto int FindListEl(taHashVal hash)
MethodDef name: UpdateIndex
MethodDef desc: update index associated with item
MethodDef proto bool UpdateIndex(const taString&amp; string, int index)
MethodDef name: RemoveHash
MethodDef desc: remove given hash code from table
MethodDef proto bool RemoveHash(taHashVal hash)
MethodDef name: RemoveString
MethodDef desc: remove given string from table
MethodDef proto bool RemoveString(const taString&amp; string)
MethodDef name: InitList_
MethodDef proto void InitList_()
MethodDef names [u'FindListEl', u'InitList_', u'RemoveHash', u'RemoveString', u'UpdateIndex']
########################################################################
TypeDef len: 13
TypeDef name:  taArray_impl
TypeDef type: class
TypeDef desc: Base Type for Arrays: physically contiguous allocation of an array of objects
TypeDef cats:, []
TypeDef opts:, [u'NO_SAVE', u'READ_ONLY']
TypeDef children: [u'taPlainArray', u'taArray_base']
MemberDef name: size
MemberDef type: int
MemberDef opts [u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: number of elements in the array
MemberDef name: alloc_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'EXPERT']
MemberDef cats []
MemberDef desc: allocated (physical) size
MethodDef name: Index
MethodDef desc: get actual index from index value that can also be negative, meaning access from end of array
MethodDef proto int Index(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: InRange
MethodDef desc: is the specified index within range of 0 &gt;= idx &lt; size
MethodDef proto bool InRange(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: Alloc
MethodDef desc: allocate storage for at least the given size
MethodDef proto bool Alloc(int n)
MethodDef opts [u'CAT_Modify']
MethodDef name: Reset
MethodDef desc: reset the list to zero size (does not free memory)
MethodDef proto void Reset()
MethodDef opts [u'CAT_Modify']
MethodDef name: Equal_
MethodDef desc: value equality, implements == and != operators, ar must be same type
MethodDef proto bool Equal_(const taArray_impl&amp; ar)
MethodDef name: BlankEl_
MethodDef desc: address of a blank element, for initializing empty items
MethodDef proto void_ptr BlankEl_()
MethodDef name: SetSize
MethodDef desc: force array to be of given size by inserting blanks or removing
MethodDef proto void SetSize(int sz)
MethodDef opts [u'CAT_Modify', u'MENU', u'MENU_ON_Edit', u'INIT_ARGVAL_ON_size']
MethodDef name: AddBlank
MethodDef desc: Add n_els empty elements to the end of the array
MethodDef proto void AddBlank(int n_els = 1)
MethodDef opts [u'CAT_Modify', u'MENU', u'MENU_ON_Edit']
MethodDef name: RemoveIdx
MethodDef desc: Remove (n_els) item(s) at idx, returns success
MethodDef proto bool RemoveIdx(uint idx, int n_els = 1)
MethodDef opts [u'CAT_Modify', u'MENU', u'MENU_ON_Edit']
MethodDef name: MoveIdx
MethodDef desc: move item from index to index
MethodDef proto bool MoveIdx(int from, int to)
MethodDef opts [u'CAT_Modify', u'MENU']
MethodDef name: SwapIdx
MethodDef desc: Swap the elements in the two given positions on the list
MethodDef proto bool SwapIdx(int pos1, int pos2)
MethodDef opts [u'CAT_Modify']
MethodDef name: Permute
MethodDef desc: permute the items in the list into a random order
MethodDef proto void Permute()
MethodDef opts [u'CAT_Modify', u'MENU']
MethodDef name: Sort
MethodDef desc: sort the list in ascending order (or descending if switched)
MethodDef proto void Sort(bool descending = false)
MethodDef opts [u'CAT_Modify', u'MENU']
MethodDef name: ShiftLeft
MethodDef desc: shift all the elements in the array to the left by given number of items
MethodDef proto void ShiftLeft(int nshift)
MethodDef opts [u'CAT_Modify']
MethodDef name: ShiftLeftPct
MethodDef desc: shift the array to the left by given percentage of current size
MethodDef proto void ShiftLeftPct(float pct)
MethodDef opts [u'CAT_Modify']
MethodDef name: V_Flip
MethodDef desc: vertically flip the array as if it was arrange in a matrix of width
MethodDef proto int V_Flip(int width)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: Duplicate
MethodDef desc: duplicate the items in the list
MethodDef proto void Duplicate(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: DupeUnique
MethodDef desc: duplicate so result is unique list
MethodDef proto void DupeUnique(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Common
MethodDef desc: copy elements in common
MethodDef proto void Copy_Common(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Duplicate
MethodDef desc: copy elements in common, duplicating (if necc) any extra on cp
MethodDef proto void Copy_Duplicate(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyVals
MethodDef desc: copy values from other array at given start and end points, and putting at given point in this
MethodDef proto void CopyVals(const taArray_impl&amp; from, int start = 0, int end = -1, int at = 0)
MethodDef opts [u'CAT_Copy']
MethodDef name: List
MethodDef desc: print out all of the elements in the array
MethodDef proto void List(ostream&amp; strm = cout)
MethodDef opts [u'CAT_Display']
MethodDef name: GetValStr
MethodDef desc: get a string representation of the value of the array (list of items)
MethodDef proto taString GetValStr()
MethodDef opts [u'CAT_Display']
MethodDef name: InitFromString
MethodDef desc: initialize an array from given string (does reset first)
MethodDef proto void InitFromString(const taString&amp; val)
MethodDef opts [u'CAT_Modify']
MethodDef names [u'AddBlank', u'Alloc', u'BlankEl_', u'CopyVals', u'Copy_Common', u'Copy_Duplicate', u'DupeUnique', u'Duplicate', u'Equal_', u'GetValStr', u'InRange', u'Index', u'InitFromString', u'List', u'MoveIdx', u'Permute', u'RemoveIdx', u'Reset', u'SetSize', u'ShiftLeft', u'ShiftLeftPct', u'Sort', u'SwapIdx', u'V_Flip']
########################################################################
TypeDef len: 9
TypeDef name:  taPlainArray
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'taArray_impl']
TypeDef children: []
########################################################################
TypeDef len: 15
TypeDef name:  taFixedArray_impl
TypeDef type: class
TypeDef desc: basic subtype for FixedArray, no tokens of which are ever kept
TypeDef cats:, []
TypeDef opts:, [u'VIRT_BASE', u'NO_INSTANCE']
TypeDef children: []
MemberDef name: size
MemberDef type: int
MemberDef opts [u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: number of elements in the array
MethodDef name: Index
MethodDef desc: get actual index from index value that can also be negative, meaning access from end of list
MethodDef proto int Index(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: InRange
MethodDef desc: is the specified index within range of 0 &gt;= idx &lt; size
MethodDef proto bool InRange(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: Reset
MethodDef proto void Reset()
MethodDef opts [u'CAT_Modify']
MethodDef name: SetSize
MethodDef desc: force array to be of given size by inserting blanks or removing
MethodDef proto void SetSize(int sz)
MethodDef opts [u'CAT_Modify', u'MENU', u'MENU_ON_Edit', u'INIT_ARGVAL_ON_size']
MethodDef names [u'InRange', u'Index', u'Reset', u'SetSize']
########################################################################
TypeDef len: 15
TypeDef name:  taFiler
TypeDef type: class
TypeDef desc: associate this with each file that is managed
TypeDef cats:, []
TypeDef opts:, [u'EDIT_INLINE']
EnumDef name: foOpen
EnumDef val: foOpen
EnumDef name: foSave
EnumDef val: foSave
EnumDef name: foSaveAs
EnumDef val: foSaveAs
EnumDef name: foAppend
EnumDef val: foAppend
EnumDef name: NO_FLAGS
EnumDef val: NO_FLAGS
EnumDef name: CONFIRM_OVERWRITE
EnumDef val: CONFIRM_OVERWRITE
EnumDef: for Save/Append, warn if file already exists
EnumDef name: FILE_MUST_EXIST
EnumDef val: FILE_MUST_EXIST
EnumDef: for Open, file must exist
EnumDef name: COMPRESS_ENABLE
EnumDef val: COMPRESS_ENABLE
EnumDef: enables use of compression/compressed files
EnumDef name: COMPRESS_REQ
EnumDef val: COMPRESS_REQ
EnumDef: if compr enabled, requests it by default
EnumDef name: COMPRESS_REQ_DEF
EnumDef val: COMPRESS_REQ_DEF
EnumDef: use taiMisc default for compression
EnumDef name: DEF_FLAGS
EnumDef val: DEF_FLAGS
EnumDef: default flags for no compression (compression is always enabled by default, just not requested)
EnumDef name: DEF_FLAGS_COMPRESS
EnumDef val: DEF_FLAGS_COMPRESS
EnumDef: default flags for compression w/ autocompress
EnumDef names: [u'FileOperation', u'FilerFlags']
MemberDef name: filter
MemberDef type: taString
MemberDef desc: the QFileDialog-compatible filter expression
MemberDef name: filetype
MemberDef type: taString
MemberDef desc: the filetype, ex Project
MemberDef name: ext
MemberDef type: taString
MemberDef desc: the default extension (if any), including &apos;.&apos;
MemberDef name: select_only
MemberDef type: bool
MemberDef desc: file is to be selected only (not opened)
MemberDef name: istrm
MemberDef type: istream*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef name: ostrm
MemberDef type: ostream*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef name: open_file
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: true if there is an open file somewhere
MemberDef name: file_selected
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: true if a file was selected last time..
MethodDef name: compressEnabled
MethodDef desc: true if client enabled use of compression
MethodDef proto bool compressEnabled()
MethodDef name: compressReq
MethodDef desc: true if client requested compression AND it is enabled
MethodDef proto bool compressReq()
MethodDef name: isOpen
MethodDef desc: true if file is open
MethodDef proto bool isOpen()
MethodDef name: isCompressed
MethodDef desc: if open, indicates actual compr status, else indicates .gz suffix on fname
MethodDef proto bool isCompressed()
MethodDef name: fileName
MethodDef desc: concats dir and fname
MethodDef proto taString fileName()
MethodDef name: setFileName
MethodDef desc: parses out into dir and name, setting in us
MethodDef proto void setFileName(const taString&amp; value)
MethodDef name: dir
MethodDef desc: the directory path to the file
MethodDef proto taString dir()
MethodDef name: fname
MethodDef desc: the name (no path) of the file
MethodDef proto taString fname()
MethodDef name: setFname
MethodDef desc: the low-level api functions work directly on the fname
MethodDef proto void setFname(const taString&amp; val)
MethodDef name: open_write_exist_check
MethodDef desc: returns true if file already exists for writing
MethodDef proto bool open_write_exist_check()
MethodDef name: Open
MethodDef desc: to open an existing file for reading; starts with curr filename if any
MethodDef proto istream_ptr Open()
MethodDef opts [u'MENU']
MethodDef name: Append
MethodDef desc: to open an existing file for appending
MethodDef proto ostream_ptr Append()
MethodDef opts [u'MENU']
MethodDef name: Close
MethodDef desc: close the stream
MethodDef proto void Close()
MethodDef opts [u'MENU']
MethodDef name: FixFileName
MethodDef desc: make sure suffix is right
MethodDef proto void FixFileName()
MethodDef names [u'Append', u'Close', u'FixFileName', u'Open', u'compressEnabled', u'compressReq', u'dir', u'fileName', u'fname', u'isCompressed', u'isOpen', u'open_write_exist_check', u'setFileName', u'setFname']
########################################################################
TypeDef len: 11
TypeDef name:  rgb_t
TypeDef type: class
TypeDef desc: very low-level class, esp provided for rgb_Matrix and raw image ops;
we use default copy constructor and assignment operator;
DO NOT CHANGE BYTE ORDER -- these are compatible (on all endians) with the jpeg decode library, and enable superfast copying to our matrixes
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: r
MemberDef type: uint8_t
MemberDef name: g
MemberDef type: uint8_t
MemberDef name: b
MemberDef type: uint8_t
MethodDef name: toInt
MethodDef desc: returns in RRGGBB web format
MethodDef proto int toInt()
MethodDef name: setInt
MethodDef desc: set from RRGGBB web format
MethodDef proto void setInt(int i)
MethodDef name: toString
MethodDef desc: returns in hex RRGGBB web format
MethodDef proto const_taString toString()
MethodDef name: setString
MethodDef desc: set from hex RRGGBB web format
MethodDef proto void setString(const taString&amp; s)
MethodDef names [u'setInt', u'setString', u'toInt', u'toString']
########################################################################
TypeDef len: 5
TypeDef name:  ta_memb_ptr_class
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 9
TypeDef name:  String_PArray
TypeDef type: class
TypeDef desc: a plain-array of strings
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: FindContains
MethodDef desc: find item that contains string -- start &lt; 0 = start from end of array (not strings!)
MethodDef proto int FindContains(const taString&amp; op, int start = 0)
MethodDef name: FindStartsWith
MethodDef desc: find item that starts with string -- start &lt; 0 = start from end of array (not strings!)
MethodDef proto int FindStartsWith(const taString&amp; op, int start = 0)
MethodDef name: AsString
MethodDef proto const_taString AsString(const taString&amp; sep = def_sep)
MethodDef name: SetFromString
MethodDef proto void SetFromString(taString str, const taString&amp; sep = def_sep)
MethodDef names [u'AsString', u'FindContains', u'FindStartsWith', u'SetFromString']
########################################################################
TypeDef len: 7
TypeDef name:  int_PArray
TypeDef type: class
TypeDef desc: a plain-array of ints
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 9
TypeDef name:  NameVar_PArray
TypeDef type: class
TypeDef desc: a plain-array of name value (variant) items
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: FindName
MethodDef desc: find by name (start &lt; 0 = from end)
MethodDef proto int FindName(const taString&amp; nm, int start = 0)
MethodDef name: FindNameContains
MethodDef desc: find by name containing nm (start &lt; 0 = from end)
MethodDef proto int FindNameContains(const taString&amp; nm, int start = 0)
MethodDef name: FindValue
MethodDef desc: find by value (start &lt; 0 = from end)
MethodDef proto int FindValue(const Variant&amp; var, int start = 0)
MethodDef name: FindValueContains
MethodDef desc: find by value.toString() containing vl (start &lt; 0 = from end)
MethodDef proto int FindValueContains(const taString&amp; vl, int start = 0)
MethodDef name: GetVal
MethodDef desc: get value from name; isNull if not found
MethodDef proto Variant GetVal(const taString&amp; nm)
MethodDef name: GetValDef
MethodDef desc: get value from name; def if not found
MethodDef proto Variant GetValDef(const taString&amp; nm, const Variant&amp; def)
MethodDef name: GetAllVals
MethodDef desc: get all values having given name (converts to strings)
MethodDef proto bool GetAllVals(const taString&amp; nm, String_PArray&amp; vals)
MethodDef name: SetVal
MethodDef desc: set value by name; if name already on list, it is updated (rval = true); else new item added
MethodDef proto bool SetVal(const taString&amp; nm, const Variant&amp; val)
MethodDef name: AsString
MethodDef proto const_taString AsString(const taString&amp; sep = def_sep)
MethodDef names [u'AsString', u'FindName', u'FindNameContains', u'FindValue', u'FindValueContains', u'GetAllVals', u'GetVal', u'GetValDef', u'SetVal']
########################################################################
TypeDef len: 11
TypeDef name:  DumpFileCvt
TypeDef type: class
TypeDef desc: parameters to convert a dump file
TypeDef cats:, [u'File']
TypeDef opts:, []
MemberDef name: proj_type_base
MemberDef type: taString
MemberDef desc: base name of project (e.g., &apos;Leabra&apos; for &apos;LeabraProject&apos;)
MemberDef name: key_srch_str
MemberDef type: taString
MemberDef desc: search string to identify this project type
MemberDef name: repl_strs
MemberDef type: NameVar_PArray
MemberDef desc: search/replace strings (name -&gt; value)
########################################################################
TypeDef len: 9
TypeDef name:  DumpFileCvtList
TypeDef type: class
TypeDef desc: list of available dump file converters
TypeDef cats:, [u'File']
TypeDef opts:, []
########################################################################
TypeDef len: 13
TypeDef name:  taVersion
TypeDef type: class
TypeDef desc: simple value class for version info
TypeDef cats:, []
TypeDef opts:, [u'EDIT_INLINE']
MemberDef name: major
MemberDef type: ushort
MemberDef name: minor
MemberDef type: ushort
MemberDef name: step
MemberDef type: ushort
MemberDef name: build
MemberDef type: ushort
MethodDef name: set
MethodDef proto void set(ushort mj, ushort mn, ushort st = 0, ushort bld = 0)
MethodDef name: setFromString
MethodDef desc: parse, mj.mn.st-build
MethodDef proto void setFromString(taString ver)
MethodDef name: toString
MethodDef proto const_taString toString()
MethodDef name: Clear
MethodDef proto void Clear()
MethodDef names [u'Clear', u'set', u'setFromString', u'toString']
########################################################################
TypeDef len: 13
TypeDef name:  taMisc
TypeDef type: class
TypeDef desc: global parameters and functions for the application
TypeDef cats:, []
TypeDef opts:, [u'READ_ONLY', u'NO_SAVE', u'SHOW']
EnumDef name: NO_HIDDEN
EnumDef val: NO_HIDDEN
EnumDef: don&apos;t show items marked READ_ONLY w/o SHOW or HIDDEN
EnumDef name: NO_NORMAL
EnumDef val: NO_NORMAL
EnumDef: don&apos;t show items normally shown (helps indicate, ex. EXPERT items)
EnumDef name: NO_EXPERT
EnumDef val: NO_EXPERT
EnumDef: don&apos;t show items marked EXPERT (often only for advanced sims)
EnumDef name: ALL_MEMBS
EnumDef val: ALL_MEMBS
EnumDef name: NORM_MEMBS
EnumDef val: NORM_MEMBS
EnumDef name: EXPT_MEMBS
EnumDef val: EXPT_MEMBS
EnumDef name: HIDD_MEMBS
EnumDef val: HIDD_MEMBS
EnumDef name: USE_SHOW_GUI_DEF
EnumDef val: USE_SHOW_GUI_DEF
EnumDef: use default from taMisc::show_gui, only applies to forbidden
EnumDef name: MEMB_OFFSETS
EnumDef val: MEMB_OFFSETS
EnumDef: display all including member offsets
EnumDef name: ALL_INFO
EnumDef val: ALL_INFO
EnumDef: display all type information
EnumDef name: NO_OPTIONS
EnumDef val: NO_OPTIONS
EnumDef: don&apos;t display options
EnumDef name: NO_LISTS
EnumDef val: NO_LISTS
EnumDef: don&apos;t display lists
EnumDef name: NO_OPTIONS_LISTS
EnumDef val: NO_OPTIONS_LISTS
EnumDef: don&apos;t display options or lists
EnumDef name: Tokens
EnumDef val: Tokens
EnumDef: keep tokens as specified by the type
EnumDef name: NoTokens
EnumDef val: NoTokens
EnumDef: don&apos;t keep any tokens
EnumDef name: ForceTokens
EnumDef val: ForceTokens
EnumDef: force to keep all tokens
EnumDef name: PLAIN
EnumDef val: PLAIN
EnumDef: dump files are not formatted for easy reading
EnumDef name: PRETTY
EnumDef val: PRETTY
EnumDef: dump files should be more readable by humans
EnumDef name: QUIET
EnumDef val: QUIET
EnumDef: don&apos;t say anything except errors
EnumDef name: MESSAGES
EnumDef val: MESSAGES
EnumDef: display informative messages during load
EnumDef name: TRACE
EnumDef val: TRACE
EnumDef: and show a trace of objects loaded
EnumDef name: SOURCE
EnumDef val: SOURCE
EnumDef: and show the source of the load as its loaded
EnumDef name: AUTO_APPLY
EnumDef val: AUTO_APPLY
EnumDef: automatically apply changes before auto-reverting
EnumDef name: AUTO_REVERT
EnumDef val: AUTO_REVERT
EnumDef: automatically revert, losing changes
EnumDef name: CONFIRM_REVERT
EnumDef val: CONFIRM_REVERT
EnumDef: put up a confirmatory message before reverting
EnumDef name: TIK_ENUM
EnumDef val: TIK_ENUM
EnumDef name: TIK_MEMBER
EnumDef val: TIK_MEMBER
EnumDef name: TIK_METHOD
EnumDef val: TIK_METHOD
EnumDef name: TIK_PROPERTY
EnumDef val: TIK_PROPERTY
EnumDef name: TIK_TYPE
EnumDef val: TIK_TYPE
EnumDef name: TIK_ENUMSPACE
EnumDef val: TIK_ENUMSPACE
EnumDef name: TIK_TOKENSPACE
EnumDef val: TIK_TOKENSPACE
EnumDef name: TIK_MEMBERSPACE
EnumDef val: TIK_MEMBERSPACE
EnumDef name: TIK_METHODSPACE
EnumDef val: TIK_METHODSPACE
EnumDef name: TIK_PROPERTYSPACE
EnumDef val: TIK_PROPERTYSPACE
EnumDef: note: holds mix of PropertyDef and MemberDef
EnumDef name: TIK_TYPESPACE
EnumDef val: TIK_TYPESPACE
EnumDef name: TIK_UNKNOWN
EnumDef val: TIK_UNKNOWN
EnumDef name: QF_RUNNING
EnumDef val: QF_RUNNING
EnumDef name: QF_USER_QUIT
EnumDef val: QF_USER_QUIT
EnumDef: we can still cancel while in this state of quitting
EnumDef name: QF_FORCE_QUIT
EnumDef val: QF_FORCE_QUIT
EnumDef: too late to turn back now...
EnumDef name: CT_OS_SHELL
EnumDef val: CT_OS_SHELL
EnumDef: use the operating system&apos;s shell or console (with readline library on unix)
EnumDef name: CT_GUI
EnumDef val: CT_GUI
EnumDef: uses a gui-based console, either docked in the main app window, or floating (see console_options)
EnumDef name: CT_NONE
EnumDef val: CT_NONE
EnumDef: no console, usually only used internally, such as for batch or dmem operation
EnumDef name: CO_USE_PAGING_GUI
EnumDef val: CO_USE_PAGING_GUI
EnumDef: use paging in the gui console, like the &apos;more&apos; command
EnumDef name: CO_USE_PAGING_NOGUI
EnumDef val: CO_USE_PAGING_NOGUI
EnumDef: use paging in the nogui console/shell, like the &apos;more&apos; command
EnumDef name: CO_GUI_TRACKING
EnumDef val: CO_GUI_TRACKING
EnumDef: in GUI mode, the console floats below the active project
EnumDef name: CH_EDITS
EnumDef val: CH_EDITS
EnumDef: color the background of property editors according to the type of the item
EnumDef name: CH_BROWSER
EnumDef val: CH_BROWSER
EnumDef: color browser tree text according to the type of the item
EnumDef name: BT_0
EnumDef val: BT_0
EnumDef: constant for when no other flags set
EnumDef name: BT_DEBUG
EnumDef val: BT_DEBUG
EnumDef: a debug build
EnumDef name: BT_DMEM
EnumDef val: BT_DMEM
EnumDef: compiled for MPI (clustered use)
EnumDef name: BT_NO_GUI
EnumDef val: BT_NO_GUI
EnumDef: compiled without gui support
EnumDef name: CS_SINGLE
EnumDef val: CS_SINGLE
EnumDef: single click opens properties
EnumDef name: CS_CONTEXT
EnumDef val: CS_CONTEXT
EnumDef: choose from context menu
EnumDef name: BOT_ZERO
EnumDef val: BOT_ZERO
EnumDef: row zero is displayed at bottom of view (default)
EnumDef name: TOP_ZERO
EnumDef val: TOP_ZERO
EnumDef: row zero is displayed at top of view (ex. for images)
EnumDef name: PVP_2x2
EnumDef val: PVP_2x2
EnumDef: one window has a browser and edit pane, the second has an edit pane and a 3-d viewer
EnumDef name: PVP_3PANE
EnumDef val: PVP_3PANE
EnumDef: one window with a browser, edit pane, and a 3d-viewer
EnumDef name: VO_DOUBLE_CLICK_EXP_ALL
EnumDef val: VO_DOUBLE_CLICK_EXP_ALL
EnumDef: double click expands or contracts all tree items -- use at your own risk on big projects...
EnumDef name: VO_AUTO_SELECT_NEW
EnumDef val: VO_AUTO_SELECT_NEW
EnumDef: automatically select (the first) of a new tree item that is made with New or similar menu commands
EnumDef name: VO_AUTO_EXPAND_NEW
EnumDef val: VO_AUTO_EXPAND_NEW
EnumDef: automatically expand new tree items that are made with New or similar menu commands
EnumDef name: GS_DEFAULT
EnumDef val: GS_DEFAULT
EnumDef: use the default style for whatever platform you&apos;re running on
EnumDef name: GS_PLASTIQUE
EnumDef val: GS_PLASTIQUE
EnumDef: default style on linux -- a good choice to try
EnumDef name: GS_CLEANLOOKS
EnumDef val: GS_CLEANLOOKS
EnumDef: similar overall to plastique, with a bit more of a windows look
EnumDef name: GS_MOTIF
EnumDef val: GS_MOTIF
EnumDef: a classic look from the 90&apos;s -- one of the first 3d-looks
EnumDef name: GS_CDE
EnumDef val: GS_CDE
EnumDef: Common Desktop Environment -- a bit lighter and cleaner than MOTIF, but overall very similar to it
EnumDef name: GS_MACINTOSH
EnumDef val: GS_MACINTOSH
EnumDef name: GS_WINDOWS
EnumDef val: GS_WINDOWS
EnumDef: standard old-school Microsoft Windows (pre XP)
EnumDef name: GS_WINDOWSXP
EnumDef val: GS_WINDOWSXP
EnumDef name: ES_WIDGETS
EnumDef val: ES_WIDGETS
EnumDef: use the legacy style, that uses nested live widgets (slower)
EnumDef name: ES_TABLE
EnumDef val: ES_TABLE
EnumDef: use the new tabular view style, that makes edit widgets on demand (much faster)
EnumDef name: TAG_GOT
EnumDef val: TAG_GOT
EnumDef: got a starting tag &lt;xxx...&gt;
EnumDef name: TAG_END
EnumDef val: TAG_END
EnumDef: got an ending tag &lt;/xx&gt;
EnumDef name: TAG_NONE
EnumDef val: TAG_NONE
EnumDef: no start of &lt; tag there
EnumDef name: TAG_EOF
EnumDef val: TAG_EOF
EnumDef: got an EOF
EnumDef names: [u'AutoRevert', u'BuildType', u'ClickStyle', u'ColorHints', u'ConsoleOptions', u'ConsoleType', u'EditStyle', u'GuiStyle', u'KeepTokens', u'LoadVerbosity', u'MatrixView', u'ProjViewPref', u'QuitFlag', u'ReadTagStatus', u'SaveFormat', u'ShowMembs', u'TypeInfo', u'TypeInfoKind', u'ViewerOptions']
MemberDef name: app_name
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: the root name of the app, ex. &apos;pdp++&apos;
MemberDef name: app_lib_name
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'EXPERT']
MemberDef cats []
MemberDef desc: the root name of the app&apos;s library, if any, ex. &apos;pdp&apos; (none for css)
MemberDef name: org_name
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: the name of the organization, ex. ccnlab (used mostly in Windows paths)
MemberDef name: version
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: version number of ta/css
MemberDef name: version_bin
MemberDef type: taVersion
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'EXPERT']
MemberDef cats []
MemberDef desc: version number of ta/css
MemberDef name: svn_rev
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: svn revision number (only valid when configure has been rerun)
MemberDef name: gui_style
MemberDef type: taMisc::GuiStyle
MemberDef opts [u'SAVE', u'DEF_GS_DEFAULT']
MemberDef cats [u'GUI']
MemberDef desc: style options provided by the gui system, affecting how the widgets are drawn, etc (not all are available on all platforms) -- change only takes effect on restarting the program
MemberDef name: font_name
MemberDef type: taString
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: default font name to use
MemberDef name: font_size
MemberDef type: int
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: default font size to use
MemberDef name: console_type
MemberDef type: taMisc::ConsoleType
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: style of the console to display -- **REQUIRES APP RESTART
MemberDef name: console_options
MemberDef type: taMisc::ConsoleOptions
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: options for the console **REQUIRES APP RESTART
MemberDef name: console_font_name
MemberDef type: taString
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: font name for the css console
MemberDef name: console_font_size
MemberDef type: int
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: font size for the css console
MemberDef name: tree_indent
MemberDef type: int
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: number of pixels to indent in the tree browser gui interface
MemberDef name: max_menu
MemberDef type: int
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: maximum number of items in a menu
MemberDef name: search_depth
MemberDef type: int
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: depth recursive find will search for a path object
MemberDef name: color_scale_size
MemberDef type: int
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: number of colors to put in a color scale
MemberDef name: jpeg_quality
MemberDef type: int
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: jpeg quality for dumping jpeg files (1-100; 95 default)
MemberDef name: color_hints
MemberDef type: taMisc::ColorHints
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: what types of color hinting to use in the application
MemberDef name: click_style
MemberDef type: taMisc::ClickStyle
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: how to select editable items in the gui, particularly in the 3d gui
MemberDef name: proj_view_pref
MemberDef type: taMisc::ProjViewPref
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: the default way to view projects
MemberDef name: viewer_options
MemberDef type: taMisc::ViewerOptions
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: misc options for the viewer
MemberDef name: antialiasing_level
MemberDef type: int
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: level of smoothing to perform in the 3d display -- values depend on hardware acceleration, but 2 or 4 are typical values. 1 or lower disables entirely. modern hardware can do typically do level 4 with little slowdown in speed.
MemberDef name: text_complexity
MemberDef type: float
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: complexity value (between 0 and 1 for rendering text -- a lower number (e.g., .1) should make things faster, without much cost in the display quality
MemberDef name: show_gui
MemberDef type: taMisc::ShowMembs
MemberDef opts [u'SAVE']
MemberDef cats [u'GUI']
MemberDef desc: what to show in the gui
MemberDef name: type_info_
MemberDef type: taMisc::TypeInfo
MemberDef opts [u'SAVE', u'EXPERT', u'LABEL_type_info']
MemberDef cats [u'GUI']
MemberDef desc: what to show when displaying type information
MemberDef name: keep_tokens
MemberDef type: taMisc::KeepTokens
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: default for keeping tokens
MemberDef name: save_format
MemberDef type: taMisc::SaveFormat
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: format to use when saving things (dump files)
MemberDef name: auto_edit
MemberDef type: bool
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: automatic edit dialog after creation?
MemberDef name: auto_revert
MemberDef type: taMisc::AutoRevert
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'GUI']
MemberDef desc: when dialogs are automatically updated (reverted), what to do about changes?
MemberDef name: matrix_view
MemberDef type: taMisc::MatrixView
MemberDef opts [u'SAVE', u'EXPERT', u'DEF_BOT_ZERO']
MemberDef cats [u'GUI']
MemberDef desc: whether to show matrices with 0 row at top or bottom of view
MemberDef name: edit_style
MemberDef type: taMisc::EditStyle
MemberDef opts [u'SAVE', u'EXPERT', u'DEF_ES_WIDGETS']
MemberDef cats [u'GUI']
MemberDef desc: style to use for edit dialogs
MemberDef name: beep_on_error
MemberDef type: bool
MemberDef opts [u'SAVE', u'DEF_false']
MemberDef cats [u'GUI']
MemberDef desc: beep when an error message is printed on the console
MemberDef name: num_recent_files
MemberDef type: short
MemberDef opts [u'SAVE', u'DEF_10', u'MIN_0', u'MAX_50']
MemberDef cats []
MemberDef desc: number of recent files to save
MemberDef name: num_recent_paths
MemberDef type: short
MemberDef opts [u'SAVE', u'DEF_10', u'MIN_0', u'MAX_50']
MemberDef cats []
MemberDef desc: number of recent paths to save
MemberDef name: num_browse_history
MemberDef type: short
MemberDef opts [u'SAVE', u'DEF_20', u'MIN_10', u'MAX_50']
MemberDef cats []
MemberDef desc: number of browse history items to keep
MemberDef name: strm_ver
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: during dump or load, version (app v4.x=v2 stream)
MemberDef name: save_compress
MemberDef type: bool
MemberDef opts [u'SAVE', u'DEF_false']
MemberDef cats [u'File']
MemberDef desc: compress by default for files that support it (ex .proj, .net)
NOTE: starting with v4.0, compression is no longer recommended except for large weight files or large nets with saved units
MemberDef name: default_proj_type
MemberDef type: TypeDef*
MemberDef opts [u'SAVE', u'TYPE_taProject']
MemberDef cats [u'File']
MemberDef desc: default type of project to create
MemberDef name: verbose_load
MemberDef type: taMisc::LoadVerbosity
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'File']
MemberDef desc: report the names of things during loading
MemberDef name: app_dir
MemberDef type: taString
MemberDef opts [u'SHOW', u'READ_ONLY']
MemberDef cats [u'File']
MemberDef desc: base of installed app directory -- override with &apos;-a &lt;path&gt;&apos; command line switch
MemberDef name: user_dir
MemberDef type: taString
MemberDef opts [u'SHOW', u'READ_ONLY']
MemberDef cats [u'File']
MemberDef desc: location of user&apos;s home directory -- override with &apos;-u &lt;path&gt;&apos; command line switch
MemberDef name: web_home
MemberDef type: taString
MemberDef opts [u'SAVE']
MemberDef cats [u'File']
MemberDef desc: url for location of web repository of package information
MemberDef name: web_help_url
MemberDef type: taString
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'File']
MemberDef desc: url for base of web application help
MemberDef name: prefs_dir
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'File']
MemberDef desc: location of preference files (e.g., ~/.appname)
MemberDef name: user_app_dir
MemberDef type: taString
MemberDef opts [u'SAVE', u'SHOW']
MemberDef cats [u'File']
MemberDef desc: user&apos;s location of application, for user plugins, etc.
MemberDef name: compress_sfx
MemberDef type: taString
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'File']
MemberDef desc: suffix to use for compressing files
MemberDef name: help_file_tmplt
MemberDef type: taString
MemberDef opts [u'SAVE']
MemberDef cats [u'File']
MemberDef desc: template for converting type name into a help file (%t = type name)
MemberDef name: help_cmd
MemberDef type: taString
MemberDef opts [u'SAVE']
MemberDef cats [u'File']
MemberDef desc: how to run html browser to get help, %s is entire path to help file
MemberDef name: edit_cmd
MemberDef type: taString
MemberDef opts [u'SAVE']
MemberDef cats [u'File']
MemberDef desc: how to run editor
MemberDef name: dmem_proc
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT', u'NO_SAVE', u'SHOW']
MemberDef cats [u'DMem']
MemberDef desc: distributed memory process number (rank in MPI, always 0 for no dmem)
MemberDef name: dmem_nprocs
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT', u'NO_SAVE', u'SHOW']
MemberDef cats [u'DMem']
MemberDef desc: distributed memory number of processes (comm_size in MPI, 1 for no dmem)
MemberDef name: cpus
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT', u'NO_SAVE', u'SHOW']
MemberDef cats [u'MultiProc']
MemberDef desc: number of cpus to use (&lt;= physical cpus)
MemberDef name: dmem_debug
MemberDef type: bool
MemberDef opts [u'SAVE', u'EXPERT']
MemberDef cats [u'DMem']
MemberDef desc: turn on debug messages for distributed memory processing
MemberDef name: types
MemberDef type: TypeSpace
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: list of all the active types
MemberDef name: default_scope
MemberDef type: TypeDef*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: type of object to use to determine if two objects are in the same scope
MemberDef name: last_check_msg
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: last error, or last batch of errors (if checking) by CheckConfig
MemberDef name: err_cnt
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: cumulative error count; can be used/reset by Server to detect for errors after it calls a routine
MethodDef name: CheckClearErrCnt
MethodDef desc: gets current value, and clears
MethodDef proto int CheckClearErrCnt()
MethodDef name: SaveConfig
MethodDef desc: save configuration defaults to &lt;appdata&gt;/taconfig file that is loaded automatically at startup
MethodDef proto void SaveConfig()
MethodDef opts [u'CAT_Config']
MethodDef name: LoadConfig
MethodDef desc: load configuration defaults from &lt;appdata&gt;/.taconfig file (which is loaded automatically at startup)
MethodDef proto void LoadConfig()
MethodDef opts [u'CAT_Config']
MethodDef name: SuperCat
MethodDef desc: concatenate strings with spaces between
MethodDef proto taString SuperCat(const char* a, const char* b, const char* c, const char* d, const char* e, const char* f, const char* g, const char* h, const char* i)
MethodDef opts [u'CAT_Dialog']
MethodDef name: Error
MethodDef desc: displays error either in a window+stderr if gui_active or to stderr only
MethodDef proto void Error(const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0, const char* i = 0)
MethodDef opts [u'CAT_Dialog']
MethodDef name: Error_nogui
MethodDef desc: explicit no-gui version of error: displays error to stderr only
MethodDef proto void Error_nogui(const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0, const char* i = 0)
MethodDef opts [u'CAT_Dialog']
MethodDef name: Warning
MethodDef desc: displays warning to stderr and/or other logging mechanism
MethodDef proto void Warning(const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0, const char* i = 0)
MethodDef opts [u'CAT_Dialog']
MethodDef name: Info
MethodDef desc: displays informative msg to stdout and/or other logging mechanism
MethodDef proto void Info(const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0, const char* i = 0)
MethodDef opts [u'CAT_Dialog']
MethodDef name: Choice
MethodDef desc: allows user to choose among different options in a popup dialog window if gui_active (else stdin/out) -- option a returns 0, b = 1, etc.
MethodDef proto int Choice(const char* text = Choice, const char* a = Ok, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0, const char* i = 0)
MethodDef opts [u'CAT_Dialog']
MethodDef name: Confirm
MethodDef desc: displays informative msg in a dialog -- use this instead of Choice for such confirmations
MethodDef proto void Confirm(const char* a, const char* b = 0, const char* c = 0, const char* d = 0, const char* e = 0, const char* f = 0, const char* g = 0, const char* h = 0, const char* i = 0)
MethodDef opts [u'CAT_Dialog']
MethodDef name: EditFile
MethodDef desc: CATT_Dialog edit the file in the external editor
MethodDef proto void EditFile(const taString&amp; filename)
MethodDef name: FlushConsole
MethodDef desc: flush any pending console output (cout, cerr) -- call this in situations that generate a lot of console output..
MethodDef proto void FlushConsole()
MethodDef opts [u'CAT_GlobalState']
MethodDef name: ProcessEvents
MethodDef desc: run any pending qt events that might need processed
MethodDef proto int ProcessEvents()
MethodDef opts [u'CAT_GlobalState']
MethodDef name: RunPending
MethodDef desc: check to see if any events are pending, and run if true -- MUCH faster than processevents, but also likely to miss some events along the way.
MethodDef proto int RunPending()
MethodDef opts [u'CAT_GlobalState']
MethodDef name: Busy
MethodDef desc: puts system in a &apos;busy&apos; state
MethodDef proto void Busy(bool busy = true)
MethodDef opts [u'CAT_GlobalState']
MethodDef name: DoneBusy
MethodDef desc: when no longer busy, call this function
MethodDef proto void DoneBusy()
MethodDef opts [u'CAT_GlobalState']
MethodDef name: CheckConfigStart
MethodDef desc: we are starting checkconfig, nestable, 1st guy controls params
MethodDef proto void CheckConfigStart(bool confirm_success = true, bool quiet = false)
MethodDef opts [u'CAT_GlobalState']
MethodDef name: CheckConfigEnd
MethodDef desc: ending checkconfig, last exit handles display etc.
MethodDef proto void CheckConfigEnd(bool ok = true)
MethodDef opts [u'CAT_GlobalState']
MethodDef name: MallocInfo
MethodDef desc: generate malloc memory statistic information to given stream
MethodDef proto void MallocInfo(ostream&amp; strm)
MethodDef opts [u'CAT_GlobalState']
MethodDef name: ListAllTokens
MethodDef desc: generate a list and count of all types that keep tokens, with a count of tokens
MethodDef proto void ListAllTokens(ostream&amp; strm)
MethodDef opts [u'CAT_GlobalState']
MethodDef name: TypeToTypeInfoKind
MethodDef proto TypeInfoKind TypeToTypeInfoKind(TypeDef* typ)
MethodDef opts [u'CAT_GlobalState']
MethodDef name: HelpMsg
MethodDef desc: generate a help message about program args, usage, etc
MethodDef proto void HelpMsg(ostream&amp; strm = cerr)
MethodDef opts [u'CAT_Args']
MethodDef name: AddArgName
MethodDef desc: add an argument flag name to be processed from startup args (e.g., flag = -f, name = CssScript; see arg_names)
MethodDef proto void AddArgName(const taString&amp; flag, const taString&amp; name)
MethodDef opts [u'CAT_Args']
MethodDef name: AddEqualsArgName
MethodDef desc: add an argument that uses equals to set value, as in &lt;arg_name&gt;=&lt;value&gt; -- uses arg_name also for the logical name of the argument for later reference (without the =&apos;s sign)
MethodDef proto void AddEqualsArgName(const taString&amp; arg_name)
MethodDef opts [u'CAT_Args']
MethodDef name: AddArgNameDesc
MethodDef desc: add a description of an argument flag name (see arg_name_descs)
MethodDef proto void AddArgNameDesc(const taString&amp; name, const taString&amp; desc)
MethodDef opts [u'CAT_Args']
MethodDef name: UpdateArgs
MethodDef desc: update arg information after adding new arg names
MethodDef proto void UpdateArgs()
MethodDef opts [u'CAT_Args']
MethodDef name: CheckArgByName
MethodDef desc: was the given arg name set?
MethodDef proto bool CheckArgByName(const taString&amp; nm)
MethodDef opts [u'CAT_Args']
MethodDef name: FindArgByName
MethodDef desc: get the value for given named argument (argv[x] for unnamed args)
MethodDef proto taString FindArgByName(const taString&amp; nm)
MethodDef opts [u'CAT_Args']
MethodDef name: GetAllArgsNamed
MethodDef desc: get the values for all args with given name tag
MethodDef proto bool GetAllArgsNamed(const taString&amp; nm, String_PArray&amp; vals)
MethodDef opts [u'CAT_Args']
MethodDef name: CheckArgValContains
MethodDef desc: check if there is an arg that contains string fragment in its value
MethodDef proto bool CheckArgValContains(const taString&amp; vl)
MethodDef opts [u'CAT_Args']
MethodDef name: FindArgValContains
MethodDef desc: get full arg value that contains string fragment
MethodDef proto taString FindArgValContains(const taString&amp; vl)
MethodDef opts [u'CAT_Args']
MethodDef name: AddUserDataSchema
MethodDef desc: adds the item as schema, putting on deferred list if type not avail yet
MethodDef proto void AddUserDataSchema(const taString&amp; type_name, UserDataItemBase* item)
MethodDef opts [u'CAT_UserData']
MethodDef name: CharToStrArray
MethodDef desc: convert space-delimeted character string to a string array
MethodDef proto void CharToStrArray(String_PArray&amp; sa, const char* ch)
MethodDef opts [u'CAT_Utility']
MethodDef name: StrArrayToChar
MethodDef desc: convert a string array to a space-delimeted character string
MethodDef proto taString StrArrayToChar(const String_PArray&amp; sa)
MethodDef opts [u'CAT_Utility']
MethodDef name: SpaceLabel
MethodDef desc: add spaces to a label in place of _&apos;s and upper-lower transitions
MethodDef proto void SpaceLabel(taString&amp; lbl)
MethodDef opts [u'CAT_Utility']
MethodDef name: LeadingZeros
MethodDef desc: returns num converted to a string with leading zeros up to len
MethodDef proto taString LeadingZeros(int num, int len)
MethodDef opts [u'CAT_Utility']
MethodDef name: FormatValue
MethodDef desc: format output of value according to width and precision
MethodDef proto taString FormatValue(float val, int width, int precision)
MethodDef opts [u'CAT_Utility']
MethodDef name: StringMaxLen
MethodDef desc: returns string up to maximum length given (enforces string to be len or less in length)
MethodDef proto taString StringMaxLen(const taString&amp; str, int len)
MethodDef opts [u'CAT_Utility']
MethodDef name: StringEnforceLen
MethodDef desc: returns string enforced to given length (spaces added to make length)
MethodDef proto taString StringEnforceLen(const taString&amp; str, int len)
MethodDef opts [u'CAT_Utility']
MethodDef name: StringCVar
MethodDef desc: make return string in a form that would be valid as a variable name in C (i.e., alpha + numeric (not at start) + _
MethodDef proto taString StringCVar(const taString&amp; str)
MethodDef opts [u'CAT_Utility']
MethodDef name: GetFileFmPath
MethodDef desc: get file name component from full path
MethodDef proto taString GetFileFmPath(const taString&amp; path)
MethodDef opts [u'CAT_File']
MethodDef name: GetDirFmPath
MethodDef desc: get directory component from full path, n_up is number of directories to go up from the final directory
MethodDef proto taString GetDirFmPath(const taString&amp; path, int n_up = 0)
MethodDef opts [u'CAT_File']
MethodDef name: GetHomePath
MethodDef desc: get user&apos;s home directory path
MethodDef proto taString GetHomePath()
MethodDef opts [u'CAT_File']
MethodDef name: GetCurrentPath
MethodDef desc: get current working directory path
MethodDef proto taString GetCurrentPath()
MethodDef opts [u'CAT_File']
MethodDef name: SetCurrentPath
MethodDef desc: set current working directory to given path; returns success
MethodDef proto bool SetCurrentPath(const taString&amp; path)
MethodDef opts [u'CAT_File']
MethodDef name: FindFileOnPath
MethodDef desc: helper function: try to find file fnm in one of the load_include paths -- returns complete path to file (or empty str if not found)
MethodDef proto taString FindFileOnPath(String_PArray&amp; paths, const char* fname)
MethodDef opts [u'CAT_File']
MethodDef name: FindFileOnLoadPath
MethodDef desc: try to find file fnm in one of the load_include paths -- returns complete path to file (or empty str if not found)
MethodDef proto taString FindFileOnLoadPath(const char* fname)
MethodDef opts [u'CAT_File']
MethodDef name: GetUniqueFileNumber
MethodDef desc: get a unique file number by adding numbers in between prefix and suffix until such a file does not exist
MethodDef proto int GetUniqueFileNumber(int st_no, const taString&amp; prefix, const taString&amp; suffix)
MethodDef name: StartRecording
MethodDef desc: sets record_strm and record_cursor
MethodDef proto void StartRecording(ostream* strm)
MethodDef opts [u'CAT_Script']
MethodDef name: StopRecording
MethodDef desc: unsets record_strm and record_cursor
MethodDef proto void StopRecording()
MethodDef opts [u'CAT_Script']
MethodDef name: RecordScript
MethodDef desc: record the given script command, if the script is open (just sends cmd to stream)
MethodDef proto bool RecordScript(const char* cmd)
MethodDef opts [u'CAT_Script']
MethodDef name: ScriptRecordAssignment
MethodDef desc: record last script assignment of tab&apos;s md value;
MethodDef proto void ScriptRecordAssignment(taBase* tab, MemberDef* md)
MethodDef opts [u'CAT_Script']
MethodDef name: SRIAssignment
MethodDef desc: record inline md assignment
MethodDef proto void SRIAssignment(taBase* tab, MemberDef* md)
MethodDef opts [u'CAT_Script']
MethodDef name: SREAssignment
MethodDef desc: record enum md assignment
MethodDef proto void SREAssignment(taBase* tab, MemberDef* md)
MethodDef opts [u'CAT_Script']
MethodDef name: skip_white
MethodDef desc: skip over all whitespace
MethodDef proto int skip_white(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: skip_white_noeol
MethodDef desc: don&apos;t skip end-of-line
MethodDef proto int skip_white_noeol(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: skip_till_start_quote_or_semi
MethodDef desc: used to seek up to an opening &apos; for a string; will terminate on a ;
MethodDef proto int skip_till_start_quote_or_semi(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_word
MethodDef desc: reads only contiguous &apos;isalnum&apos; and _ -- does skip_white first
MethodDef proto int read_word(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_nonwhite
MethodDef desc: read any contiguous non-whitespace string -- does skip_white first
MethodDef proto int read_nonwhite(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_nonwhite_noeol
MethodDef desc: read any contiguous non-whitespace string, does skip_white_noeol first (string must be on this line)
MethodDef proto int read_nonwhite_noeol(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_eol
MethodDef desc: eol = end of line
MethodDef proto int read_till_eol(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_semi
MethodDef desc: semi = ;
MethodDef proto int read_till_semi(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_lbracket
MethodDef desc: lbracket = {
MethodDef proto int read_till_lbracket(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_lb_or_semi
MethodDef desc: lb = { or ;
MethodDef proto int read_till_lb_or_semi(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_rbracket
MethodDef desc: rbracket = } -- does depth counting to skip over intervening paired { }
MethodDef proto int read_till_rbracket(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_rb_or_semi
MethodDef desc: rbracket } or ; -- does depth counting to skip over intervening paired { }
MethodDef proto int read_till_rb_or_semi(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_end_quote
MethodDef proto int read_till_end_quote(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_end_quote_semi
MethodDef desc: read-counterpart to write_quoted_string; read-escaping, until &apos;; (can be ws btwn &apos; and ;)
MethodDef proto int read_till_end_quote_semi(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: skip_past_err
MethodDef desc: skips to next rb or semi (robust)
MethodDef proto int skip_past_err(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: skip_past_err_rb
MethodDef desc: skips to next rbracket (robust)
MethodDef proto int skip_past_err_rb(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: replace_strings
MethodDef desc: replace a list of strings (no regexp) in input file istrm to output file ostrm (name -&gt; value) -- reads one line at a time; returns number replaced
MethodDef proto int replace_strings(istream&amp; istrm, ostream&amp; ostrm, NameVar_PArray&amp; repl_list)
MethodDef opts [u'CAT_File']
MethodDef name: find_strings
MethodDef desc: find first occurrence of any of the given strings in file (reading one line at a time); returns index of string or -1 if none found
MethodDef proto int find_strings(istream&amp; istrm, String_PArray&amp; strs)
MethodDef opts [u'CAT_File']
MethodDef name: read_tag
MethodDef desc: read an html-style tag from the file: &lt;XXX ...&gt; tag = XXX, val = ... (optional)
MethodDef proto ReadTagStatus read_tag(istream&amp; strm, taString&amp; tag, taString&amp; val)
MethodDef opts [u'CAT_Parse']
MethodDef name: read_till_rangle
MethodDef desc: rangle = &gt;
MethodDef proto int read_till_rangle(istream&amp; strm, bool peek = false)
MethodDef opts [u'CAT_Parse']
MethodDef name: indent
MethodDef proto ostream_ref indent(ostream&amp; strm, int indent, int tsp = 2)
MethodDef opts [u'CAT_File']
MethodDef name: write_quoted_string
MethodDef desc: writes the string, including enclosing quotes, escaping so we can read back using read_till_end_quote funcs
MethodDef proto ostream_ref write_quoted_string(ostream&amp; strm, const taString&amp; str, bool write_if_empty = false)
MethodDef opts [u'CAT_File']
MethodDef name: fmt_sep
MethodDef proto ostream_ref fmt_sep(ostream&amp; strm, const taString&amp; itm, int no, int indent, int tsp = 2)
MethodDef opts [u'CAT_File']
MethodDef name: fancy_list
MethodDef proto ostream_ref fancy_list(ostream&amp; strm, const taString&amp; itm, int no, int prln, int tabs)
MethodDef opts [u'CAT_File']
MethodDef names [u'AddArgName', u'AddArgNameDesc', u'AddEqualsArgName', u'AddUserDataSchema', u'Busy', u'CharToStrArray', u'CheckArgByName', u'CheckArgValContains', u'CheckClearErrCnt', u'CheckConfigEnd', u'CheckConfigStart', u'Choice', u'Confirm', u'DoneBusy', u'EditFile', u'Error', u'Error_nogui', u'FindArgByName', u'FindArgValContains', u'FindFileOnLoadPath', u'FindFileOnPath', u'FlushConsole', u'FormatValue', u'GetAllArgsNamed', u'GetCurrentPath', u'GetDirFmPath', u'GetFileFmPath', u'GetHomePath', u'GetUniqueFileNumber', u'HelpMsg', u'Info', u'LeadingZeros', u'ListAllTokens', u'LoadConfig', u'MallocInfo', u'ProcessEvents', u'RecordScript', u'RunPending', u'SREAssignment', u'SRIAssignment', u'SaveConfig', u'ScriptRecordAssignment', u'SetCurrentPath', u'SpaceLabel', u'StartRecording', u'StopRecording', u'StrArrayToChar', u'StringCVar', u'StringEnforceLen', u'StringMaxLen', u'SuperCat', u'TypeToTypeInfoKind', u'UpdateArgs', u'Warning', u'fancy_list', u'find_strings', u'fmt_sep', u'indent', u'read_nonwhite', u'read_nonwhite_noeol', u'read_tag', u'read_till_end_quote', u'read_till_end_quote_semi', u'read_till_eol', u'read_till_lb_or_semi', u'read_till_lbracket', u'read_till_rangle', u'read_till_rb_or_semi', u'read_till_rbracket', u'read_till_semi', u'read_word', u'replace_strings', u'skip_past_err', u'skip_past_err_rb', u'skip_till_start_quote_or_semi', u'skip_white', u'skip_white_noeol', u'write_quoted_string']
########################################################################
TypeDef len: 9
TypeDef name:  ITypedObject
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'NO_CSS', u'NO_MEMBERS', u'VIRT_BASE']
TypeDef children: [u'IDataLinkProxy', u'IPlugin', u'IDataHost']
########################################################################
TypeDef len: 11
TypeDef name:  IDataLinkProxy
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'NO_CSS', u'NO_MEMBERS', u'VIRT_BASE']
TypeDef parents: [u'ITypedObject']
TypeDef children: [u'IDataLinkClient', u'ISelectable']
########################################################################
TypeDef len: 11
TypeDef name:  IDataLinkClient
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'NO_CSS', u'NO_MEMBERS', u'VIRT_BASE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy']
TypeDef children: [u'IMultiDataLinkClient', u'taSmartRef', u'taDataView', u'iSearchDialog']
########################################################################
TypeDef len: 11
TypeDef name:  IMultiDataLinkClient
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'NO_CSS', u'NO_MEMBERS', u'VIRT_BASE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient']
TypeDef children: [u'taBase_FunCallList']
########################################################################
TypeDef len: 11
TypeDef name:  MemberDefBase
TypeDef type: class
TypeDef desc: common subclass of MemberDef and PropertyDef
TypeDef cats:, []
TypeDef opts:, [u'NO_MEMBERS', u'NO_CSS', u'MEMB_NO_SHOW_TREE', u'VIRT_BASE', u'NO_INSTANCE']
TypeDef children: []
########################################################################
TypeDef len: 15
TypeDef name:  taSmartRef
TypeDef type: class
TypeDef desc: safe reference for taBase objects -- does not ref count, but is a data link client so it tracks changes and automatically sets ptr to NULL when object dies
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'SMART_POINTER']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient']
TypeDef children: [u'taSmartRefT']
MethodDef name: This
MethodDef desc: reference to the &apos;this&apos; pointer of the client object
MethodDef proto void_ptr This()
MethodDef name: GetTypeDef
MethodDef desc: typedef of the dlc note: only one typedef for all
MethodDef proto TypeDef_ptr GetTypeDef()
MethodDef name: GetDataTypeDef
MethodDef desc: convenience function, default gets data type from link TypeDef of the data
MethodDef proto TypeDef_ptr GetDataTypeDef()
MethodDef name: DataLinkDestroying
MethodDef desc: called by DataLink when destroying; it will remove datalink ref in dlc upon return
MethodDef proto void DataLinkDestroying(taDataLink* dl)
MethodDef name: DataDataChanged
MethodDef proto void DataDataChanged(taDataLink* na, int dcr, void* op1, void* op2)
MethodDef name: ptr
MethodDef proto taBase_ptr ptr()
MethodDef name: set
MethodDef proto void set(taBase* src)
MethodDef name: GetBaseType
MethodDef proto TypeDef_ptr GetBaseType()
MethodDef name: Init
MethodDef desc: call in owner&apos;s Initialize or InitLinks
MethodDef proto void Init(taBase* own_)
MethodDef name: CutLinks
MethodDef proto void CutLinks()
MethodDef names [u'CutLinks', u'DataDataChanged', u'DataLinkDestroying', u'GetBaseType', u'GetDataTypeDef', u'GetTypeDef', u'Init', u'This', u'ptr', u'set']
########################################################################
TypeDef len: 13
TypeDef name:  taSmartPtr
TypeDef type: class
TypeDef desc: &apos;safe&apos; ptr for taBase objects -- automatically does ref counts; designed to be binary compatible with taBase*
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'SMART_POINTER']
TypeDef children: [u'taSmartPtrT']
MethodDef name: GetBaseType
MethodDef desc: returns a best-guess min type -- hacks by looking at the name
MethodDef proto TypeDef_ptr GetBaseType(TypeDef* this_typ)
MethodDef name: ptr
MethodDef proto taBase_ptr ptr()
MethodDef name: set
MethodDef proto void set(taBase* src)
MethodDef names [u'GetBaseType', u'ptr', u'set']
########################################################################
TypeDef len: 13
TypeDef name:  taOBase
TypeDef type: class
TypeDef desc: owned base class of taBase
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
TypeDef children: [u'taOABase', u'taDataView', u'taNBase', u'taList_impl', u'taArray_base', u'FontSpec', u'DynEnum', u'ProgVar', u'ProgExprBase', u'ProgArg', u'ProgEl', u'ColCalcExpr', u'DataTableEditorOptions', u'DataOpEl', u'taPluginBase', u'taTask', u'taEngineInst', u'SelectEditItem', u'SpecPtr_impl', u'ConArray', u'RecvCons', u'SendCons', u'Unit', u'SigmoidSpec', u'SchedItem', u'WeightLimits', u'LayerDistances', u'NetViewFontSizes', u'NetViewParams', u'TessEl', u'GpTessEl', u'LayerDataEl', u'CtrlPanelData', u'DataItem', u'Pattern', u'V3ScriptFile', u'NeighborEl', u'WtSigSpec', u'ActFunSpec', u'LeabraInhibSpec', u'KWTASpec', u'KwtaTieBreak', u'AdaptISpec', u'ClampSpec', u'DecaySpec', u'CtLayerInhibMod', u'LayNetRescaleSpec', u'LayAbsNetAdaptSpec', u'AvgMaxVals', u'KWTAVals', u'AdaptIVals', u'InhibVals', u'LeabraNetMisc', u'CtTrialTiming', u'CtSRAvgSpec', u'CtxtUpdateSpec', u'TrialSynDepSpec', u'CycleSynDepSpec', u'CaiSynDepSpec', u'FastWtSpec', u'ActAvgHebbMixSpec', u'ScalarValSpec', u'ScalarValBias', u'MotorForceSpec', u'TwoDValSpec', u'TwoDValBias', u'V1FeatInhibSpec', u'AvgExtRewSpec', u'OutErrSpec', u'ExtRewSpec', u'TDRewIntegSpec', u'PVDetectSpec', u'LVSpec', u'NVSpec', u'PVLVDaSpec', u'MatrixMiscSpec', u'ContrastSpec', u'MatrixRndGoSpec', u'MatrixErrRndGoSpec', u'MatrixAvgDaRndGoSpec', u'SNrThalMiscSpec', u'PFCGateSpec', u'PFCOutGateSpec']
########################################################################
TypeDef len: 15
TypeDef name:  taOABase
TypeDef type: class
TypeDef desc: owned base class with QObject adapter for signals/slots
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'TemtClient', u'TemtServer']
MethodDef name: SetAdapter
MethodDef proto void SetAdapter(taBaseAdapter* adapter_)
MethodDef names [u'SetAdapter']
########################################################################
TypeDef len: 19
TypeDef name:  taDataView
TypeDef type: class
TypeDef desc: base class for views of an object
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MULT_INHERIT', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase']
TypeDef children: [u'ViewSpec', u'DataViewer', u'T3DataView']
EnumDef name: CONSTR_POST
EnumDef val: CONSTR_POST
EnumDef: (only used by DataViewer)
EnumDef name: CLEAR_IMPL
EnumDef val: CLEAR_IMPL
EnumDef: (only used by T3DataView)
EnumDef name: RENDER_PRE
EnumDef val: RENDER_PRE
EnumDef name: RENDER_IMPL
EnumDef val: RENDER_IMPL
EnumDef name: RENDER_POST
EnumDef val: RENDER_POST
EnumDef name: CLOSE_WIN_IMPL
EnumDef val: CLOSE_WIN_IMPL
EnumDef: (only used by DataViewer)
EnumDef name: RESET_IMPL
EnumDef val: RESET_IMPL
EnumDef name: UNBIND_IMPL
EnumDef val: UNBIND_IMPL
EnumDef: disconnect everyone from a data source
EnumDef name: SHOWING_IMPL
EnumDef val: SHOWING_IMPL
EnumDef name: HIDING_IMPL
EnumDef val: HIDING_IMPL
EnumDef names: [u'DataViewAction']
MemberDef name: m_data
MemberDef type: taBase*
MemberDef opts [u'READ_ONLY', u'NO_SET_POINTER']
MemberDef cats []
MemberDef desc: data -- referent of the item (not ref&apos;ed)
MemberDef name: data_base
MemberDef type: TypeDef*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: Minimum type for data object
MethodDef name: This
MethodDef desc: reference to the &apos;this&apos; pointer of the client object in taBase virtual TypeDef*	GetTypeDef() const;
MethodDef proto void_ptr This()
MethodDef name: link
MethodDef proto taiDataLink_ptr link()
MethodDef name: GetDataTypeDef
MethodDef desc: convenience function, default gets data type from link TypeDef of the data
MethodDef proto TypeDef_ptr GetDataTypeDef()
MethodDef name: link_
MethodDef proto taDataLink_ptr link_()
MethodDef name: ignoreDataChanged
MethodDef desc: hidden guys can ignore changes (but they always get Destroyed)
MethodDef proto bool ignoreDataChanged()
MethodDef name: isDataView
MethodDef desc: true for dataviews
MethodDef proto bool isDataView()
MethodDef name: DataLinkDestroying
MethodDef desc: called by DataLink when destroying; it will remove datalink ref in dlc upon return called by DataLink when destroying; it will remove
MethodDef proto void DataLinkDestroying(taDataLink* dl)
MethodDef name: DataDataChanged
MethodDef proto void DataDataChanged(taDataLink* dl, int dcr, void* op1, void* op2)
MethodDef name: IgnoredDataChanged
MethodDef desc: called instead if ignoreDataChanged was true
MethodDef proto void IgnoredDataChanged(taDataLink* dl, int dcr, void* op1, void* op2)
MethodDef name: data
MethodDef desc: subclasses usually redefine a strongly typed version
MethodDef proto taBase_ptr data()
MethodDef name: SetData
MethodDef desc: set the data to which this points -- must be subclass of data_base
MethodDef proto void SetData(taBase* ta)
MethodDef opts [u'MENU']
MethodDef name: dbuCnt
MethodDef desc: batch update: -ve:data, 0:none, +ve:struct
MethodDef proto int dbuCnt()
MethodDef name: index
MethodDef desc: convenience accessor
MethodDef proto int index()
MethodDef name: isMapped
MethodDef desc: for DataView classes, or anything w/ separate gui classes that get created distinct from view hierarchy
MethodDef proto bool isMapped()
MethodDef name: md
MethodDef desc: ISelectable property member stub
MethodDef proto MemberDef_ptr md()
MethodDef name: parDbuCnt
MethodDef desc: dbu of parent(s); note: only sign is accurate, not necessarily value (optimized)
MethodDef proto int parDbuCnt()
MethodDef name: hasParent
MethodDef desc: encapsulated way to check for a par
MethodDef proto bool hasParent()
MethodDef name: parent
MethodDef desc: typically lex override with strong type
MethodDef proto taDataView_ptr parent()
MethodDef name: parentType
MethodDef desc: the controlling parent -- note that when in a list, this is the list owner, not the list; overrride for strong check in SetOwner
MethodDef proto TypeDef_ptr parentType()
MethodDef name: GetDataMemberDef
MethodDef desc: returns md if known and/or knowable (ex. NULL for list members)
MethodDef proto MemberDef_ptr GetDataMemberDef()
MethodDef name: GetLabel
MethodDef desc: returns a label suitable for tabview tabs, etc.
MethodDef proto taString GetLabel()
MethodDef name: DataUpdateAfterEdit
MethodDef desc: note: normally overrride the _impl
MethodDef proto void DataUpdateAfterEdit()
MethodDef name: DataUpdateAfterEdit_Child
MethodDef desc: optionally called by child in its DUAE routine; must be added manually
MethodDef proto void DataUpdateAfterEdit_Child(taDataView* chld)
MethodDef name: ChildClearing
MethodDef desc: override to implement par&apos;s portion of clear
MethodDef proto void ChildClearing(taDataView* child)
MethodDef name: ChildRendered
MethodDef desc: override to implement par&apos;s portion of render
MethodDef proto void ChildRendered(taDataView* child)
MethodDef name: CloseChild
MethodDef proto void CloseChild(taDataView* child)
MethodDef name: SetVisible
MethodDef desc: called recursively when a view ctrl shows or hides
MethodDef proto void SetVisible(bool showing)
MethodDef name: Render
MethodDef desc: renders the visible contents (usually override the _impls) -- MUST BE DEFINED IN SUB
MethodDef proto void Render()
MethodDef name: Clear
MethodDef desc: clears the view (but doesn&apos;t delete any components) (usually override _impl)
MethodDef proto void Clear(taDataView* par = NULL)
MethodDef name: Reset
MethodDef desc: clears, and deletes any components (usually override _impls)
MethodDef proto void Reset()
MethodDef name: Refresh
MethodDef desc: for manual refreshes -- just the impl stuff, not structural stuff
MethodDef proto void Refresh()
MethodDef name: Unbind
MethodDef desc: clears, and deletes any components (usually override _impls)
MethodDef proto void Unbind()
MethodDef name: DoActions
MethodDef desc: do the indicated action(s) if safe in this context (ex loading, whether gui exists, etc.)
MethodDef proto void DoActions(taDataView::DataViewAction acts)
MethodDef name: ItemRemoving
MethodDef desc: items call this on the root item -- usually used by a viewer to insure item removed from things like sel lists
MethodDef proto void ItemRemoving(taDataView* item)
MethodDef name: DataDestroying
MethodDef desc: called when data is destroying (m_data will already be NULL)
MethodDef proto void DataDestroying()
MethodDef names [u'ChildClearing', u'ChildRendered', u'Clear', u'CloseChild', u'DataDataChanged', u'DataDestroying', u'DataLinkDestroying', u'DataUpdateAfterEdit', u'DataUpdateAfterEdit_Child', u'DoActions', u'GetDataMemberDef', u'GetDataTypeDef', u'GetLabel', u'IgnoredDataChanged', u'ItemRemoving', u'Refresh', u'Render', u'Reset', u'SetData', u'SetVisible', u'This', u'Unbind', u'data', u'dbuCnt', u'hasParent', u'ignoreDataChanged', u'index', u'isDataView', u'isMapped', u'link', u'link_', u'md', u'parDbuCnt', u'parent', u'parentType']
########################################################################
TypeDef len: 15
TypeDef name:  taNBase
TypeDef type: class
TypeDef desc: Named, owned base class of taBase
TypeDef cats:, []
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'taMatrix', u'taDoc', u'UserDataItemBase', u'taFBase', u'SelectEdit', u'Modulo', u'RGBA', u'ColorScaleSpec', u'ScaleRange', u'ColorScale', u'ViewColor', u'TreeDecorationSpec', u'Program', u'ProgLibEl', u'ProgType', u'DynEnumItem', u'Relation', u'Aggregate', u'SimpleMathSpec', u'taMath', u'RndSeed', u'RndSeed_List', u'Random', u'ChannelSpec', u'DataCol', u'DataOpBaseSpec', u'DataJoinSpec', u'taDataProc', u'ClustNode', u'taDataAnal', u'taDataGen', u'taImage', u'DoGFilterSpec', u'GaborFilterSpec', u'RetinalSpacingSpec', u'DoGRetinaSpec', u'GaborV1Spec', u'taImageProc', u'RetinaSpec', u'V1GaborSpec', u'VEBody', u'VEJoint', u'VEObject', u'VEStatic', u'VESpace', u'VEWorld', u'VETexture', u'NameValue', u'TypeDefault', u'taEngine', u'taWizard', u'TimeUsed', u'TimeUsedHR', u'taDateTime', u'FunLookupND', u'BaseSpec', u'BaseSubSpec', u'Projection', u'Layer', u'NetMonitor', u'NetViewObj', u'LayerWriter', u'NetMonItem', u'ActBasedRF', u'LayerWizEl', u'Process', u'Event', u'Environment', u'PDPLog', u'Script']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of the object
########################################################################
TypeDef len: 17
TypeDef name:  taMatrix
TypeDef type: class
TypeDef desc: note: taVariant is based in part on QVariant implementation in Qt ref counted multi-dimensional data array
TypeDef cats:, [u'Data']
TypeDef opts:, [u'VIRT_BASE', u'STEM_BASE', u'NO_INSTANCE', u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'taMatrixT']
MemberDef name: size
MemberDef type: int
MemberDef opts [u'SHOW', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: number of elements in the matrix (= frames*frameSize)
MemberDef name: geom
MemberDef type: MatrixGeom
MemberDef opts [u'SHOW', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: dimensions array -- you cannot change this directly, you have to use API functions to change size
MethodDef name: This
MethodDef proto void_ptr This()
MethodDef name: colCount
MethodDef desc: flat col count, for 2-d grid operations, never 0; by2 puts d0/d1 in same row when dims&gt;=4
MethodDef proto int colCount(bool pat_4d = false)
MethodDef opts [u'CAT_Access']
MethodDef name: count
MethodDef desc: the number of items
MethodDef proto int count()
MethodDef opts [u'CAT_Access']
MethodDef name: dims
MethodDef desc: the number of dimensions
MethodDef proto int dims()
MethodDef opts [u'CAT_Access']
MethodDef name: dim
MethodDef desc: the value of dimenion d -- MUST BE IN_RANGE
MethodDef proto int dim(int d)
MethodDef opts [u'CAT_Access']
MethodDef name: frames
MethodDef desc: number of frames currently in use (value of highest dimension)
MethodDef proto int frames()
MethodDef opts [u'CAT_Access']
MethodDef name: frameSize
MethodDef desc: number of elements in each frame (product of inner dimensions)
MethodDef proto int frameSize()
MethodDef opts [u'CAT_Access']
MethodDef name: rowCount
MethodDef desc: flat row count, for 2-d grid operations, never 0; by2 puts d0/d1 in same row when dims&gt;=4
MethodDef proto int rowCount(bool pat_4d = false)
MethodDef opts [u'CAT_Access']
MethodDef name: FrameToRow
MethodDef desc: convert frame number to row number
MethodDef proto int FrameToRow(int f)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElIndex
MethodDef proto int FastElIndex(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef name: FastElIndex2D
MethodDef desc: NO bounds check and return index as if the mat was only 2d -- YOU MUST ABSOLUTELY BE USING DIM-SAFE CODE
MethodDef proto int FastElIndex2D(int d0, int d1 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElIndexN
MethodDef desc: NO bounds check and return flat index -- YOU MUST ABSOLUTELY BE USING DIM-SAFE CODE
MethodDef proto int FastElIndexN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElIndex
MethodDef desc: check bounds and return flat index, -1 if any dim out of bounds
MethodDef proto int SafeElIndex(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElIndexN
MethodDef desc: check bounds and return flat index, -1 if any dim out of bounds
MethodDef proto int SafeElIndexN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: FrameStartIdx
MethodDef desc: returns the flat base index of the specified frame
MethodDef proto int FrameStartIdx(int fm)
MethodDef opts [u'CAT_Access']
MethodDef name: GetDataTypeDef
MethodDef desc: type of data, ex TA_int, TA_float, etc.
MethodDef proto TypeDef_ptr GetDataTypeDef()
MethodDef opts [u'CAT_Access']
MethodDef name: GetDataValType
MethodDef desc: val_type of data
MethodDef proto ValType GetDataValType()
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsStr
MethodDef desc: (safely) returns the element as a string
MethodDef proto const_taString SafeElAsStr(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsStrN
MethodDef desc: (safely) returns the element as a string
MethodDef proto const_taString SafeElAsStrN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsStr_Flat
MethodDef desc: treats the matrix like a flat array, returns the element as a string
MethodDef proto const_taString SafeElAsStr_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsStr_Flat
MethodDef desc: treats the matrix like a flat array, returns the element as a string
MethodDef proto const_taString FastElAsStr_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: SetFmStr_Flat
MethodDef desc: treats the matrix like a flat array, sets the element as a string
MethodDef proto void SetFmStr_Flat(const taString&amp; str, int idx)
MethodDef opts [u'CAT_Modify']
MethodDef name: SafeElAsVar
MethodDef desc: (safely) returns the element as a variant
MethodDef proto const_Variant SafeElAsVar(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsVarN
MethodDef desc: (safely) returns the element as a variant
MethodDef proto const_Variant SafeElAsVarN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsVar_Flat
MethodDef desc: treats the matrix like a flat array, returns the element as a variant
MethodDef proto const_Variant SafeElAsVar_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsVar_Flat
MethodDef desc: treats the matrix like a flat array, returns the element as a variant
MethodDef proto const_Variant FastElAsVar_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: SetFmVar
MethodDef desc: (safely) sets the element as a variant
MethodDef proto void SetFmVar(const Variant&amp; var, int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Modify']
MethodDef name: SetFmVarN
MethodDef desc: (safely) sets the element as a variant
MethodDef proto void SetFmVarN(const Variant&amp; var, const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Modify']
MethodDef name: SetFmVar_Flat
MethodDef desc: treats the matrix like a flat array, (safely) sets the element as a variant
MethodDef proto void SetFmVar_Flat(const Variant&amp; var, int idx)
MethodDef opts [u'CAT_Modify']
MethodDef name: InitValsFmVar
MethodDef desc: initialize values to given fixed value
MethodDef proto void InitValsFmVar(const Variant&amp; var)
MethodDef opts [u'CAT_Modify']
MethodDef name: canResize
MethodDef desc: true only if not fixed NOTE: may also include additional constraints, tbd
MethodDef proto bool canResize()
MethodDef opts [u'CAT_Modify']
MethodDef name: isFixedData
MethodDef desc: true if using fixed (externally managed) data storage
MethodDef proto bool isFixedData()
MethodDef opts [u'CAT_Modify']
MethodDef name: slicePar
MethodDef desc: if exists; rarely used
MethodDef proto taMatrix_ptr slicePar()
MethodDef name: defAlignment
MethodDef desc: default Qt alignment, left for text, right for nums
MethodDef proto int defAlignment()
MethodDef opts [u'CAT_Display']
MethodDef name: InRange
MethodDef desc: true if indices in range; ignores irrelevant dims
MethodDef proto bool InRange(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: InRangeN
MethodDef desc: true if indices in range; MAY ignore under-supplied dims
MethodDef proto bool InRangeN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: InRange_Flat
MethodDef desc: checks if in actual range
MethodDef proto bool InRange_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsFloat
MethodDef desc: (safely) returns the element as a float
MethodDef proto float SafeElAsFloat(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsFloatN
MethodDef desc: (safely) returns the element as a float
MethodDef proto float SafeElAsFloatN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsFloat_Flat
MethodDef desc: (safely) returns the element as a float, flat array model
MethodDef proto float SafeElAsFloat_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsFloat
MethodDef desc: get element as float without range checking
MethodDef proto float FastElAsFloat(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsFloatN
MethodDef desc: get element as float without range checking
MethodDef proto float FastElAsFloatN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsFloat_Flat
MethodDef desc: get element as float without range checking, flat array model
MethodDef proto float FastElAsFloat_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsDouble
MethodDef desc: (safely) returns the element as a double
MethodDef proto double SafeElAsDouble(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsDoubleN
MethodDef desc: (safely) returns the element as a double
MethodDef proto double SafeElAsDoubleN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeElAsDouble_Flat
MethodDef desc: (safely) returns the element as a double, float array model
MethodDef proto double SafeElAsDouble_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsDouble
MethodDef desc: get element as double without range checking
MethodDef proto double FastElAsDouble(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsDoubleN
MethodDef desc: get element as double without range checking
MethodDef proto double FastElAsDoubleN(const MatrixGeom&amp; indices)
MethodDef opts [u'CAT_Access']
MethodDef name: FastElAsDouble_Flat
MethodDef desc: get element as double without range checking, flat array model
MethodDef proto double FastElAsDouble_Flat(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: AddFrame
MethodDef desc: add 1 new blank frame
MethodDef proto bool AddFrame()
MethodDef opts [u'MENU', u'MENU_ON_Matrix', u'MENU_CONTEXT', u'CAT_Modify']
MethodDef name: AddFrames
MethodDef desc: add n new blank frames -- note that this assumes incremental growth and thus calls AllocFrames in advance
MethodDef proto bool AddFrames(int n)
MethodDef opts [u'MENU', u'MENU_ON_Matrix', u'MENU_CONTEXT', u'CAT_Modify']
MethodDef name: AllocFrames
MethodDef desc: make sure space exists for n frames: calling this is optional, and is typically done if you know ahead of time how much space you need
MethodDef proto bool AllocFrames(int n)
MethodDef opts [u'CAT_Modify']
MethodDef name: EnforceFrames
MethodDef desc: set size to n frames, blanking new elements if added; resizes by 1.5x as needed
MethodDef proto bool EnforceFrames(int n, bool notify = true)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'ARGC_1', u'CAT_Modify']
MethodDef name: RemoveFrames
MethodDef desc: remove the given number of frames at starting index, copying data backwards if needed. st_fr = -1 means last frame, and n_frames = -1 means all frames from start to end
MethodDef proto bool RemoveFrames(int st_fr, int n_frames = 1)
MethodDef opts [u'MENU', u'MENU_ON_Matrix', u'CAT_Modify']
MethodDef name: InsertFrames
MethodDef desc: insert n new frames at given frame index, shifting existing data down to make room. st_fr = -1 means append to end
MethodDef proto bool InsertFrames(int st_fr, int n_frames = 1)
MethodDef opts [u'MENU', u'CAT_Modify']
MethodDef name: CopyFrame
MethodDef desc: copy the source matrix to the indicated frame; src geom must be our frame geom; optimized for like-type mats
MethodDef proto bool CopyFrame(const taMatrix&amp; src, int frame)
MethodDef opts [u'CAT_Copy']
MethodDef name: Reset
MethodDef desc: remove all items
MethodDef proto void Reset()
MethodDef opts [u'MENU', u'MENU_ON_Matrix', u'MENU_SEP_BEFORE', u'CAT_Modify']
MethodDef name: Clear
MethodDef desc: optimized clear, defaults to clearing all items
MethodDef proto void Clear(int fm = 0, int to = -1)
MethodDef opts [u'MENU', u'MENU_ON_Matrix', u'CAT_Modify']
MethodDef name: SetGeom
MethodDef desc: set geom for matrix -- if matches current size, it is non-destructive
MethodDef proto void SetGeom(int size, int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Modify']
MethodDef name: SetGeomN
MethodDef desc: set geom for any sized matrix -- if matches current size, it is non-destructive
MethodDef proto void SetGeomN(const MatrixGeom&amp; geom_)
MethodDef opts [u'MENU', u'MENU_ON_Matrix', u'MENU_SEP_BEFORE', u'CAT_Modify', u'INIT_ARGVAL_ON_geom']
MethodDef name: GetSlice_
MethodDef desc: return a slice, sfd=-1 indicates a frame size slice; base should be a subframe boundary
MethodDef proto taMatrix_ptr GetSlice_(const MatrixGeom&amp; base, int slice_frame_dims = -1, int num_slice_frames = 1)
MethodDef opts [u'CAT_Access']
MethodDef name: GetFrameSlice_
MethodDef desc: return a slice, of exactly one frame; will have dim-1 of us
MethodDef proto taMatrix_ptr GetFrameSlice_(int frame)
MethodDef opts [u'CAT_Access']
MethodDef name: GetFrameRangeSlice_
MethodDef desc: return a slice, of n_frames frames starting at st_frame
MethodDef proto taMatrix_ptr GetFrameRangeSlice_(int st_frame, int n_frames)
MethodDef opts [u'CAT_Access']
MethodDef name: List
MethodDef desc: List the items
MethodDef proto void List(ostream&amp; strm = cout)
MethodDef name: BinaryFile_Supported
MethodDef desc: indicates if binary file format is supported (default no)
MethodDef proto bool BinaryFile_Supported()
MethodDef name: BinarySave_strm
MethodDef desc: load binary data from a stream -- simple binary format with same initial ascii header and then items just straight binary write out -- not compatible across different endian processors etc
MethodDef proto int BinarySave_strm(ostream&amp; strm)
MethodDef opts [u'CAT_File']
MethodDef name: BinarySave
MethodDef desc: saves data -- leave fname empty to pick from file chooser -- simple binary format with same initial ascii header and then items just straight binary write out -- not compatible across different endian processors etc
MethodDef proto void BinarySave(const taString&amp; fname)
MethodDef opts [u'CAT_File', u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'EXT_mat', u'FILE_DIALOG_SAVE']
MethodDef name: BinaryLoad_strm
MethodDef desc: load binary data from a stream -- simple binary format with same initial ascii header and then items just straight binary write out -- not compatible across different endian processors etc
MethodDef proto int BinaryLoad_strm(istream&amp; strm)
MethodDef opts [u'CAT_File']
MethodDef name: BinaryLoad
MethodDef desc: loads data -- leave fname empty to pick from file chooser -- simple binary format with same initial ascii header and then items just straight binary write out -- not compatible across different endian processors etc
MethodDef proto void BinaryLoad(const taString&amp; fname)
MethodDef opts [u'CAT_File', u'MENU', u'MENU_ON_Object', u'EXT_mat', u'FILE_DIALOG_LOAD']
MethodDef names [u'AddFrame', u'AddFrames', u'AllocFrames', u'BinaryFile_Supported', u'BinaryLoad', u'BinaryLoad_strm', u'BinarySave', u'BinarySave_strm', u'Clear', u'CopyFrame', u'EnforceFrames', u'FastElAsDouble', u'FastElAsDoubleN', u'FastElAsDouble_Flat', u'FastElAsFloat', u'FastElAsFloatN', u'FastElAsFloat_Flat', u'FastElAsStr_Flat', u'FastElAsVar_Flat', u'FastElIndex', u'FastElIndex2D', u'FastElIndexN', u'FrameStartIdx', u'FrameToRow', u'GetDataTypeDef', u'GetDataValType', u'GetFrameRangeSlice_', u'GetFrameSlice_', u'GetSlice_', u'InRange', u'InRangeN', u'InRange_Flat', u'InitValsFmVar', u'InsertFrames', u'List', u'RemoveFrames', u'Reset', u'SafeElAsDouble', u'SafeElAsDoubleN', u'SafeElAsDouble_Flat', u'SafeElAsFloat', u'SafeElAsFloatN', u'SafeElAsFloat_Flat', u'SafeElAsStr', u'SafeElAsStrN', u'SafeElAsStr_Flat', u'SafeElAsVar', u'SafeElAsVarN', u'SafeElAsVar_Flat', u'SafeElIndex', u'SafeElIndexN', u'SetFmStr_Flat', u'SetFmVar', u'SetFmVarN', u'SetFmVar_Flat', u'SetGeom', u'SetGeomN', u'This', u'canResize', u'colCount', u'count', u'defAlignment', u'dim', u'dims', u'frameSize', u'frames', u'isFixedData', u'rowCount', u'slicePar']
########################################################################
TypeDef len: 15
TypeDef name:  taDoc
TypeDef type: class
TypeDef desc: document for providing information on projects and other objects
TypeDef cats:, [u'Docs']
TypeDef opts:, [u'BUTROWS_2', u'EDIT_WIDTH_60', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: auto_open
MemberDef type: bool
MemberDef desc: open this document upon startup
MethodDef name: WikiParse
MethodDef desc: convert very basic wiki syntax to html format -- == headers ==, * bulleted lists, [[ ]] links, etc
MethodDef proto taString WikiParse(const taString&amp; in_str)
MethodDef name: UpdateText
MethodDef desc: update the html_text from the user-entered text with wiki syntax by calling WikiParse
MethodDef proto void UpdateText()
MethodDef names [u'UpdateText', u'WikiParse']
########################################################################
TypeDef len: 15
TypeDef name:  UserDataItemBase
TypeDef type: class
TypeDef desc: base class for all simple user data -- name is key
TypeDef cats:, []
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'UserDataItem', u'UserData_DocLink']
MethodDef name: isSimple
MethodDef desc: only true for UserDataItem class
MethodDef proto bool isSimple()
MethodDef name: valueAsVariant
MethodDef proto const_Variant valueAsVariant()
MethodDef name: setValueAsVariant
MethodDef proto bool setValueAsVariant(const Variant&amp; value)
MethodDef names [u'isSimple', u'setValueAsVariant', u'valueAsVariant']
########################################################################
TypeDef len: 7
TypeDef name:  taBase_PtrList
TypeDef type: class
TypeDef desc: a primitive taBase list type, used for global lists that manage taBase objects
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 5
TypeDef name:  taBase_RefList
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 13
TypeDef name:  UserDataItem
TypeDef type: class
TypeDef desc: an item of simple user data
TypeDef cats:, []
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'UserDataItemBase']
MemberDef name: value
MemberDef type: Variant
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'NO_SAVE_EMPTY']
MemberDef cats []
MemberDef desc: optional description (typ. used for schema, not items)
########################################################################
TypeDef len: 11
TypeDef name:  tabMisc
TypeDef type: class
TypeDef desc: miscellaneous useful stuff for taBase
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: root
MemberDef type: taRootBase*
MemberDef desc: root of the structural object hierarchy
MemberDef name: delayed_updateafteredit
MemberDef type: taBase_RefList
MemberDef desc: list of objs to be update-after-edit&apos;d in the wait process
MemberDef name: delayed_funcalls
MemberDef type: taBase_FunCallList
MemberDef desc: functions to call during the waiting process -- variant value is the object, and name is the function
MemberDef name: in_wait_proc
MemberDef type: unsigned_char
MemberDef desc: context -- don&apos;t do WaitProc
MethodDef name: WaitProc
MethodDef desc: wait process function: process all the delayed stuff
MethodDef proto void WaitProc()
MethodDef name: DelayedUpdateAfterEdit
MethodDef desc: call update-after-edit on object in wait process (in case this does other kinds of damage..)
MethodDef proto void DelayedUpdateAfterEdit(taBase* obj)
MethodDef name: DelayedFunCall_gui
MethodDef desc: perform a delayed function call on this object of given function name (using CallFun) -- if args required they will be prompted for, but that is probably not a great idea from the user&apos;s perspective.. best for void functions -- gui version for gui feedback events -- checks for gui_active
MethodDef proto void DelayedFunCall_gui(taBase* obj, const taString&amp; fun_name)
MethodDef name: DelayedFunCall_nogui
MethodDef desc: perform a delayed function call on this object of given function name (using CallFun) -- if args required they will be prompted for, but that is probably not a great idea from the user&apos;s perspective.. best for void functions -- nogui version -- doesn&apos;t check for gui
MethodDef proto void DelayedFunCall_nogui(taBase* obj, const taString&amp; fun_name)
MethodDef name: DeleteRoot
MethodDef desc: get rid of root, if not nuked already
MethodDef proto void DeleteRoot()
MethodDef names [u'DelayedFunCall_gui', u'DelayedFunCall_nogui', u'DelayedUpdateAfterEdit', u'DeleteRoot', u'WaitProc']
########################################################################
TypeDef len: 15
TypeDef name:  taFBase
TypeDef type: class
TypeDef desc: named/owned base class of taBase, with filename
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'taRootBase', u'taProject', u'DataBlock', u'Network']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: file_name
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW', u'FILE_DIALOG_LOAD']
MemberDef cats []
MemberDef desc: the current filename for this object
########################################################################
TypeDef len: 19
TypeDef name:  taRootBase
TypeDef type: class
TypeDef desc: base class for the root of the structural hierarchy (root. or . in css / paths)
TypeDef cats:, [u'Project']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase']
TypeDef children: [u'EmergentRoot']
EnumDef name: SM_MPI_INIT
EnumDef val: SM_MPI_INIT
EnumDef name: SM_QAPP_OBJ
EnumDef val: SM_QAPP_OBJ
EnumDef name: SM_SOQT_INIT
EnumDef val: SM_SOQT_INIT
EnumDef name: SM_TYPES_INIT
EnumDef val: SM_TYPES_INIT
EnumDef name: SM_ROOT_CREATE
EnumDef val: SM_ROOT_CREATE
EnumDef name: SM_APP_OBJ
EnumDef val: SM_APP_OBJ
EnumDef name: SM_REG_SIG
EnumDef val: SM_REG_SIG
EnumDef names: [u'StartupMilestones']
MemberDef name: root_type
MemberDef type: TypeDef*
MemberDef desc: set in Startup_Main
MemberDef name: version
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: current version number
MemberDef name: templates
MemberDef type: taBase_List
MemberDef opts [u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: objects used as templates -- do not use or mess with these!
MemberDef name: projects
MemberDef type: Project_Group
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: The projects
MemberDef name: viewers
MemberDef type: DataViewer_List
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: global viewers (not saved)
MemberDef name: plugins
MemberDef type: taPlugin_List
MemberDef desc: available plugins
MemberDef name: plugin_deps
MemberDef type: taPluginBase_List
MemberDef opts [u'SHOW_TREE', u'EXPERT_TREE', u'NO_SAVE']
MemberDef cats []
MemberDef desc: dynamic list, populated in presave
MemberDef name: colorspecs
MemberDef type: ColorScaleSpec_Group
MemberDef desc: Color Specs
MemberDef name: engines
MemberDef type: taEngine_Group
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: calculation engines (highly machine-specific; some are added by plugins)
MemberDef name: objs
MemberDef type: taBase_List
MemberDef opts [u'SHOW_TREE', u'EXPERT_TREE', u'NO_SAVE']
MemberDef cats []
MemberDef desc: misc place for app-global objs, usually for system use, ex. tcp server
MemberDef name: test_group
MemberDef type: taBase_Group
MemberDef opts [u'EXPERT', u'NO_SAVE', u'LINK_GROUP']
MemberDef cats []
MemberDef desc: group for testing clip ops etc.
MethodDef name: instance
MethodDef proto taRootBase_ptr instance()
MethodDef name: OpenRemoteServer
MethodDef desc: Open a Server for remote TCP-based control of this application
MethodDef proto void OpenRemoteServer(ushort port = 5360)
MethodDef opts [u'MENU', u'MENU_ON_Server']
MethodDef name: CloseRemoteServer
MethodDef desc: Close an open Server, if any
MethodDef proto void CloseRemoteServer()
MethodDef opts [u'MENU', u'MENU_ON_Server']
MethodDef name: Options
MethodDef desc: edit global settings/parameters (taMisc)
MethodDef proto void Options()
MethodDef name: About
MethodDef desc: get information/copyright notice
MethodDef proto void About()
MethodDef opts [u'MENU', u'MENU_ON_Object']
MethodDef name: SaveAll
MethodDef desc: saves all the projects
MethodDef proto void SaveAll()
MethodDef name: FindGlobalObject
MethodDef desc: find an object deriving from base_type, with given name, or any name if blank
MethodDef proto taBase_ptr FindGlobalObject(TypeDef* base_type = &amp;TA_taBase, const taString&amp; name = taString())
MethodDef name: GetTemplateInstance
MethodDef desc: get an instance of the indicated tab type, or NULL if not found
MethodDef proto taBase_ptr GetTemplateInstance(TypeDef* typ)
MethodDef name: CheckAddPluginDep
MethodDef desc: add a plugin dependency, if this type is a type defined in a plugin; true if it was
MethodDef proto bool CheckAddPluginDep(TypeDef* td)
MethodDef name: VerifyHasPlugins
MethodDef desc: check the current plugin_deps w/ loaded plugins, return true if all needed plugins loaded OR user says to continue loading anyway
MethodDef proto bool VerifyHasPlugins()
MethodDef name: SaveRecoverFileHandler
MethodDef desc: error handling function that saves a recover file when system crashes
MethodDef proto void SaveRecoverFileHandler(int err = 1)
MethodDef names [u'About', u'CheckAddPluginDep', u'CloseRemoteServer', u'FindGlobalObject', u'GetTemplateInstance', u'OpenRemoteServer', u'Options', u'SaveAll', u'SaveRecoverFileHandler', u'VerifyHasPlugins', u'instance']
########################################################################
TypeDef len: 17
TypeDef name:  taList_impl
TypeDef type: class
TypeDef desc: implementation for a taBase list class
TypeDef cats:, []
TypeDef opts:, [u'MULT_INHERIT', u'STEM_BASE', u'NO_UPDATE_AFTER', u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'taList', u'taGroup_impl']
MemberDef name: alloc_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: allocation size
MemberDef name: size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: number of elements in the list
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of the object
MemberDef name: el_base
MemberDef type: TypeDef*
MemberDef opts [u'EXPERT', u'NO_SHOW_TREE', u'READ_ONLY_GUI', u'NO_SAVE']
MemberDef cats []
MemberDef desc: Base type for objects in group
MemberDef name: el_typ
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_ON_el_base', u'NO_SHOW_TREE']
MemberDef cats []
MemberDef desc: Default type for objects in group
MemberDef name: el_def
MemberDef type: int
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: Index of default element in group
MethodDef name: Index
MethodDef desc: get actual index from index value that can also be negative, meaning access from end of list
MethodDef proto int Index(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: InRange
MethodDef desc: is the specified index within range of 0 &gt;= idx &lt; size
MethodDef proto bool InRange(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: Alloc
MethodDef desc: allocate a list big enough for given number of elements (or current size) -- uses optimized memory allocation policies and generally allocates more than currently needed
MethodDef proto bool Alloc(int sz)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: AllocExact
MethodDef desc: allocate exact number specified
MethodDef proto bool AllocExact(int sz)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: Reset
MethodDef desc: reset the list (remove all elements)
MethodDef proto void Reset()
MethodDef opts [u'CAT_Modify']
MethodDef name: IsEmpty
MethodDef desc: is the list empty of elements (i.e., size == 0)
MethodDef proto bool IsEmpty()
MethodDef opts [u'CAT_Access']
MethodDef name: BuildHashTable
MethodDef desc: build a hash table with given number of buckets (not dynamic, so make it big)
MethodDef proto void BuildHashTable(int n_buckets)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveName
MethodDef desc: remove (and delete) named element from list
MethodDef proto bool RemoveName(const taString&amp; item_nm)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveIdx
MethodDef desc: remove (and delete) element from list at index
MethodDef proto bool RemoveIdx(int idx)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveLast
MethodDef desc: remove the last element on the list
MethodDef proto bool RemoveLast()
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveAll
MethodDef desc: Remove all elements on the list
MethodDef proto void RemoveAll()
MethodDef opts [u'MENU', u'MENU_ON_Edit', u'CONFIRM', u'CAT_Modify']
MethodDef name: MoveIdx
MethodDef desc: Move element from index (from) to position (to) in list
MethodDef proto bool MoveIdx(int from, int to)
MethodDef opts [u'CAT_Modify']
MethodDef name: MoveBeforeIdx
MethodDef desc: Move element from index (from) to just before position (to) in list; for end, use to=-1 or size
MethodDef proto bool MoveBeforeIdx(int from, int to)
MethodDef opts [u'CAT_Modify']
MethodDef name: SwapIdx
MethodDef desc: Swap the elements in the two given positions on the list
MethodDef proto bool SwapIdx(int pos1, int pos2)
MethodDef opts [u'CAT_Modify']
MethodDef name: PopAll
MethodDef desc: pop all elements off the stack
MethodDef proto void PopAll()
MethodDef opts [u'CAT_Modify']
MethodDef name: Permute
MethodDef desc: permute the items in the list into a random order
MethodDef proto void Permute()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Order']
MethodDef name: Sort
MethodDef desc: sort the items in the list in alpha order according to name (or El_Compare_)
MethodDef proto void Sort(bool descending = false)
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Order']
MethodDef name: FirstEl
MethodDef desc: get the first item on the list, initialize iterator
MethodDef proto void_ptr FirstEl(taListItr&amp; itr)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: NextEl
MethodDef desc: get the next item on the list according to iterator
MethodDef proto void_ptr NextEl(taListItr&amp; itr)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: Duplicate
MethodDef desc: duplicate (clone &amp; add) elements of given list into this one
MethodDef proto void Duplicate(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: DupeUniqNameNew
MethodDef desc: duplicate so result is unique names, replacing with new ones where dupl
MethodDef proto void DupeUniqNameNew(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: DupeUniqNameOld
MethodDef desc: duplicate so result is unique names, using old ones where dupl
MethodDef proto void DupeUniqNameOld(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Stealth_Borrow
MethodDef desc: borrow without referencing the borrowed elements (i.e. use AddEl_())
MethodDef proto void Stealth_Borrow(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Borrow
MethodDef desc: borrow (link) elements of given list into this one
MethodDef proto void Borrow(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: BorrowUnique
MethodDef desc: borrow so result is unique list
MethodDef proto void BorrowUnique(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: BorrowUniqNameNew
MethodDef desc: borrow so result is unique names, replacing with new ones where dupl
MethodDef proto void BorrowUniqNameNew(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: BorrowUniqNameOld
MethodDef desc: borrow so result is unique names, using old ones where dupl
MethodDef proto void BorrowUniqNameOld(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Common
MethodDef desc: apply copy operator to only those items in common between the two lists
MethodDef proto void Copy_Common(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Duplicate
MethodDef desc: apply copy operator to items, use duplicate to add new ones from cp (if necc)
MethodDef proto void Copy_Duplicate(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Borrow
MethodDef desc: apply copy operator to items, use borrow to add new ones from cp (if necc)
MethodDef proto void Copy_Borrow(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Exact
MethodDef desc: makes us basically identical to cp, in number, and type
MethodDef proto void Copy_Exact(const taPtrList_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: List
MethodDef desc: List the group items
MethodDef proto void List(ostream&amp; strm = cout)
MethodDef opts [u'CAT_Display']
MethodDef name: FindEl
MethodDef desc: find element in list (-1 if not there)
MethodDef proto int FindEl(const taBase* item)
MethodDef opts [u'CAT_Access']
MethodDef name: AddOnly
MethodDef desc: append a new pointer to end of list -- does not own
MethodDef proto void AddOnly(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: Add
MethodDef desc: add element to the list and &apos;own&apos; item
MethodDef proto void Add(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: AddUnique
MethodDef desc: add so that object is unique, true if unique
MethodDef proto bool AddUnique(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: AddUniqNameNew
MethodDef desc: add so that name is unique, true if unique, new replaces existing
MethodDef proto bool AddUniqNameNew(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: Insert
MethodDef desc: insert element at index (-1 for end)
MethodDef proto bool Insert(taBase* item, int where)
MethodDef opts [u'CAT_Modify']
MethodDef name: ReplaceEl
MethodDef desc: replace given element with the new one
MethodDef proto bool ReplaceEl(taBase* old_it, taBase* new_it)
MethodDef opts [u'CAT_Modify']
MethodDef name: ReplaceName
MethodDef desc: replace named element with the new one
MethodDef proto bool ReplaceName(const taString&amp; old_nm, taBase* new_it)
MethodDef opts [u'CAT_Modify']
MethodDef name: ReplaceIdx
MethodDef desc: replace element at index with the new one
MethodDef proto bool ReplaceIdx(int old_idx, taBase* new_it)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveEl
MethodDef desc: Remove given item from list
MethodDef proto bool RemoveEl(taBase* item)
MethodDef opts [u'MENU', u'ARG_ON_OBJ', u'CAT_Modify']
MethodDef name: DuplicateEl
MethodDef desc: Duplicate given list item and Add to list
MethodDef proto taBase_ptr DuplicateEl(const taBase* item)
MethodDef opts [u'MENU', u'ARG_ON_OBJ', u'CAT_Modify']
MethodDef name: Link
MethodDef desc: Link an item to list without owning it
MethodDef proto void Link(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: LinkUnique
MethodDef desc: link so that object is unique, true if unique
MethodDef proto bool LinkUnique(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: LinkUniqNameNew
MethodDef desc: link so that name is unique, true if unique, new replaces existing
MethodDef proto bool LinkUniqNameNew(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: InsertLink
MethodDef desc: Insert a link at index (-1 for end)
MethodDef proto bool InsertLink(taBase* item, int idx = -1)
MethodDef opts [u'MENU', u'CAT_Modify']
MethodDef name: ReplaceLinkEl
MethodDef desc: replace given element (if on list) with the new one
MethodDef proto bool ReplaceLinkEl(taBase* old_it, taBase* new_it)
MethodDef opts [u'CAT_Modify']
MethodDef name: ReplaceLinkName
MethodDef desc: replace given named element (if on list) with the new one
MethodDef proto bool ReplaceLinkName(const taString&amp; old_nm, taBase* new_it)
MethodDef opts [u'CAT_Modify']
MethodDef name: ReplaceLinkIdx
MethodDef desc: replace element with a link to the new one
MethodDef proto bool ReplaceLinkIdx(int old_idx, taBase* new_it)
MethodDef opts [u'CAT_Modify']
MethodDef name: Push
MethodDef desc: push item on stack (for temporary use, not &apos;owned&apos;)
MethodDef proto void Push(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: MoveEl
MethodDef desc: Move item (from) to position of (to)
MethodDef proto bool MoveEl(taBase* from, taBase* to)
MethodDef opts [u'MENU', u'ARG_ON_OBJ', u'CAT_Modify']
MethodDef name: Transfer
MethodDef proto bool Transfer(taBase* item)
MethodDef name: MoveBefore
MethodDef desc: move item so that it appears just before the target item trg in the list
MethodDef proto bool MoveBefore(taBase* trg, taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: MoveAfter
MethodDef desc: move item so that it appears just after the target item trg in the list
MethodDef proto bool MoveAfter(taBase* trg, taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: SetDefaultElType
MethodDef desc: set the default element to be item with given type
MethodDef proto int SetDefaultElType(TypeDef* it)
MethodDef opts [u'CAT_Access']
MethodDef name: SetDefaultElName
MethodDef desc: set the default element to be item with given name
MethodDef proto int SetDefaultElName(const taString&amp; nm)
MethodDef opts [u'CAT_Access']
MethodDef name: SetDefaultEl
MethodDef desc: set the default element to be given item
MethodDef proto int SetDefaultEl(taBase* it)
MethodDef opts [u'CAT_Access']
MethodDef name: New_gui
MethodDef desc: create n_objs new objects of given type in list (NULL = default type, el_typ)
MethodDef proto taBase_ptr New_gui(int n_objs = 1, TypeDef* typ = NULL)
MethodDef opts [u'BUTTON', u'MENU_CONTEXT', u'TYPE_ON_el_base', u'CAT_Modify', u'LABEL_New', u'NO_SAVE_ARG_VAL']
MethodDef name: SetSize
MethodDef desc: add or remove elements to force list to be of given size
MethodDef proto void SetSize(int sz)
MethodDef opts [u'MENU', u'MENU_ON_Edit', u'CAT_Modify']
MethodDef name: EnforceType
MethodDef desc: enforce current type (all elements have to be of this type)
MethodDef proto void EnforceType()
MethodDef opts [u'CAT_Modify']
MethodDef name: EnforceSameStru
MethodDef desc: make the two lists identical in terms of size and types of objects
MethodDef proto void EnforceSameStru(const taList_impl&amp; cp)
MethodDef opts [u'CAT_Modify']
MethodDef name: ChangeType
MethodDef desc: change type of item to new type, copying current info
MethodDef proto bool ChangeType(taBase* itm, TypeDef* new_type)
MethodDef opts [u'MENU', u'ARG_ON_OBJ', u'CAT_Modify', u'TYPE_ON_el_base']
MethodDef name: ReplaceType
MethodDef desc: replace all items of old type with new type (returns number changed)
MethodDef proto int ReplaceType(TypeDef* old_type, TypeDef* new_type)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Modify', u'TYPE_ON_el_base']
MethodDef name: SetBaseType
MethodDef desc: set base (and default) type to given td
MethodDef proto void SetBaseType(TypeDef* it)
MethodDef opts [u'CAT_Modify']
MethodDef names [u'Add', u'AddOnly', u'AddUniqNameNew', u'AddUnique', u'Alloc', u'AllocExact', u'Borrow', u'BorrowUniqNameNew', u'BorrowUniqNameOld', u'BorrowUnique', u'BuildHashTable', u'ChangeType', u'Copy_Borrow', u'Copy_Common', u'Copy_Duplicate', u'Copy_Exact', u'DupeUniqNameNew', u'DupeUniqNameOld', u'Duplicate', u'DuplicateEl', u'EnforceSameStru', u'EnforceType', u'FindEl', u'FirstEl', u'InRange', u'Index', u'Insert', u'InsertLink', u'IsEmpty', u'Link', u'LinkUniqNameNew', u'LinkUnique', u'List', u'MoveAfter', u'MoveBefore', u'MoveBeforeIdx', u'MoveEl', u'MoveIdx', u'New_gui', u'NextEl', u'Permute', u'PopAll', u'Push', u'RemoveAll', u'RemoveEl', u'RemoveIdx', u'RemoveLast', u'RemoveName', u'ReplaceEl', u'ReplaceIdx', u'ReplaceLinkEl', u'ReplaceLinkIdx', u'ReplaceLinkName', u'ReplaceName', u'ReplaceType', u'Reset', u'SetBaseType', u'SetDefaultEl', u'SetDefaultElName', u'SetDefaultElType', u'SetSize', u'Sort', u'Stealth_Borrow', u'SwapIdx', u'Transfer']
########################################################################
TypeDef len: 15
TypeDef name:  SelectEdit
TypeDef type: class
TypeDef desc: Selectively edit members from different objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MULT_INHERIT', u'STEM_BASE', u'EXT_edit', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: auto_edit
MemberDef type: bool
MemberDef desc: automatically bring up edit dialog upon loading
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of what this edit contains
MemberDef name: mbrs
MemberDef type: EditMbrItem_Group
MemberDef opts [u'TREE_EXPERT']
MemberDef cats []
MemberDef desc: the members of the edit
MemberDef name: mths
MemberDef type: EditMthItem_Group
MemberDef opts [u'TREE_EXPERT']
MemberDef cats []
MemberDef desc: the mthods of the edit
MethodDef name: DataDestroying_Ref
MethodDef desc: note: item will already have been removed from list
MethodDef proto void DataDestroying_Ref(taBase_RefList_ptr src, taBase* ta)
MethodDef name: DataChanged_Ref
MethodDef proto void DataChanged_Ref(taBase_RefList_ptr src, taBase* ta, int dcr, void* op1, void* op2)
MethodDef name: This
MethodDef desc: reference to the &apos;this&apos; pointer of the client object
MethodDef proto void_ptr This()
MethodDef name: mbr
MethodDef desc: convenience accessor for flat access
MethodDef proto EditMbrItem_ptr mbr(int i)
MethodDef name: mbrSize
MethodDef desc: flat size
MethodDef proto int mbrSize(int i)
MethodDef name: mth
MethodDef desc: convenience accessor for flat access
MethodDef proto EditMthItem_ptr mth(int i)
MethodDef name: mthSize
MethodDef desc: flat size
MethodDef proto int mthSize(int i)
MethodDef name: autoEdit
MethodDef proto bool autoEdit()
MethodDef name: RemoveField
MethodDef desc: remove edit data item at given index and update dialog
MethodDef proto void RemoveField(int idx)
MethodDef name: RemoveFun
MethodDef desc: remove function at given index
MethodDef proto void RemoveFun(int idx)
MethodDef name: SearchMembers
MethodDef desc: search given object for member names that contain given string, and add them to this editor
MethodDef proto int SearchMembers(taNBase* obj, const taString&amp; memb_contains)
MethodDef opts [u'MENU', u'MENU_ON_SelectEdit']
MethodDef name: CompareObjs
MethodDef desc: compare two objects (must be of same type) and add the differences in this select edit; no_ptrs = ignore pointer fields
MethodDef proto int CompareObjs(taBase* obj_a, taBase* obj_b, bool no_ptrs = true)
MethodDef opts [u'MENU', u'TYPE_taNBase']
MethodDef name: SelectMember
MethodDef desc: add new member to edit if it isn&apos;t already here (returns true)
MethodDef proto bool SelectMember(taBase* base, MemberDef* md, const taString&amp; xtra_lbl = taString(), const taString&amp; desc = taString())
MethodDef name: SelectMemberNm
MethodDef desc: add new member to edit if it isn&apos;t already here (returns true)
MethodDef proto bool SelectMemberNm(taBase* base, const taString&amp; md_nm, const taString&amp; xtra_lbl, const taString&amp; desc = taString())
MethodDef name: SelectMethod
MethodDef desc: add new method to edit if it isn&apos;t already here (returns true)
MethodDef proto bool SelectMethod(taBase* base, MethodDef* md, const taString&amp; xtra_lbl, const taString&amp; desc = taString())
MethodDef name: SelectMethodNm
MethodDef desc: add new method to edit if it isn&apos;t already here (returns true)
MethodDef proto bool SelectMethodNm(taBase* base, const taString&amp; md, const taString&amp; xtra_lbl, const taString&amp; desc = taString())
MethodDef name: FindMbrBase
MethodDef desc: find a given base and member, returns index
MethodDef proto int FindMbrBase(taBase* base, MemberDef* md)
MethodDef name: FindMethBase
MethodDef desc: find a given base and method, returns index
MethodDef proto int FindMethBase(taBase* base, MethodDef* md)
MethodDef name: Reset
MethodDef desc: reset (remove all) current members and methods
MethodDef proto void Reset()
MethodDef opts [u'MENU', u'CONFIRM', u'MENU_SEP_BEFORE']
MethodDef name: ConvertLegacy
MethodDef proto void ConvertLegacy()
MethodDef names [u'CompareObjs', u'ConvertLegacy', u'DataChanged_Ref', u'DataDestroying_Ref', u'FindMbrBase', u'FindMethBase', u'RemoveField', u'RemoveFun', u'Reset', u'SearchMembers', u'SelectMember', u'SelectMemberNm', u'SelectMethod', u'SelectMethodNm', u'This', u'autoEdit', u'mbr', u'mbrSize', u'mth', u'mthSize']
########################################################################
TypeDef len: 11
TypeDef name:  taList
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taList_impl']
TypeDef children: []
########################################################################
TypeDef len: 11
TypeDef name:  taBase_List
TypeDef type: class
TypeDef desc: list of objects
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef children: [u'ProgObjList', u'StatVal_List']
########################################################################
TypeDef len: 11
TypeDef name:  DataView_List
TypeDef type: class
TypeDef desc: do a single action on all items; we also do self-&gt;Reset on Reset_impl
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef children: [u'DataViewer_List', u'T3DataView_List']
MethodDef name: DoAction
MethodDef desc: do a single action on all items; we also do self-&gt;Reset on Reset_impl
MethodDef proto void DoAction(taDataView::DataViewAction act)
MethodDef names [u'DoAction']
########################################################################
TypeDef len: 17
TypeDef name:  taArray_base
TypeDef type: class
TypeDef desc: base for arrays (from taBase)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'MULT_INHERIT', u'VIRT_BASE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taArray_impl', u'taBase', u'taOBase']
TypeDef children: [u'taArray']
MemberDef name: size
MemberDef type: int
MemberDef opts [u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: number of elements in the array
MemberDef name: alloc_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'EXPERT']
MemberDef cats []
MemberDef desc: allocated (physical) size
MethodDef name: Index
MethodDef desc: get actual index from index value that can also be negative, meaning access from end of array
MethodDef proto int Index(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: InRange
MethodDef desc: is the specified index within range of 0 &gt;= idx &lt; size
MethodDef proto bool InRange(int idx)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: Alloc
MethodDef desc: allocate storage for at least the given size
MethodDef proto bool Alloc(int n)
MethodDef opts [u'CAT_Modify']
MethodDef name: Reset
MethodDef desc: reset the list to zero size (does not free memory)
MethodDef proto void Reset()
MethodDef opts [u'CAT_Modify']
MethodDef name: Equal_
MethodDef desc: value equality, implements == and != operators, ar must be same type
MethodDef proto bool Equal_(const taArray_impl&amp; ar)
MethodDef name: BlankEl_
MethodDef desc: address of a blank element, for initializing empty items
MethodDef proto void_ptr BlankEl_()
MethodDef name: SetSize
MethodDef desc: force array to be of given size by inserting blanks or removing
MethodDef proto void SetSize(int sz)
MethodDef opts [u'CAT_Modify', u'MENU', u'MENU_ON_Edit', u'INIT_ARGVAL_ON_size']
MethodDef name: AddBlank
MethodDef desc: Add n_els empty elements to the end of the array
MethodDef proto void AddBlank(int n_els = 1)
MethodDef opts [u'CAT_Modify', u'MENU', u'MENU_ON_Edit']
MethodDef name: RemoveIdx
MethodDef desc: Remove (n_els) item(s) at idx, returns success
MethodDef proto bool RemoveIdx(uint idx, int n_els = 1)
MethodDef opts [u'CAT_Modify', u'MENU', u'MENU_ON_Edit']
MethodDef name: MoveIdx
MethodDef desc: move item from index to index
MethodDef proto bool MoveIdx(int from, int to)
MethodDef opts [u'CAT_Modify', u'MENU']
MethodDef name: SwapIdx
MethodDef desc: Swap the elements in the two given positions on the list
MethodDef proto bool SwapIdx(int pos1, int pos2)
MethodDef opts [u'CAT_Modify']
MethodDef name: Permute
MethodDef desc: permute the items in the list into a random order
MethodDef proto void Permute()
MethodDef opts [u'CAT_Modify', u'MENU']
MethodDef name: Sort
MethodDef desc: sort the list in ascending order (or descending if switched)
MethodDef proto void Sort(bool descending = false)
MethodDef opts [u'CAT_Modify', u'MENU']
MethodDef name: ShiftLeft
MethodDef desc: shift all the elements in the array to the left by given number of items
MethodDef proto void ShiftLeft(int nshift)
MethodDef opts [u'CAT_Modify']
MethodDef name: ShiftLeftPct
MethodDef desc: shift the array to the left by given percentage of current size
MethodDef proto void ShiftLeftPct(float pct)
MethodDef opts [u'CAT_Modify']
MethodDef name: V_Flip
MethodDef desc: vertically flip the array as if it was arrange in a matrix of width
MethodDef proto int V_Flip(int width)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: Duplicate
MethodDef desc: duplicate the items in the list
MethodDef proto void Duplicate(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: DupeUnique
MethodDef desc: duplicate so result is unique list
MethodDef proto void DupeUnique(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Common
MethodDef desc: copy elements in common
MethodDef proto void Copy_Common(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: Copy_Duplicate
MethodDef desc: copy elements in common, duplicating (if necc) any extra on cp
MethodDef proto void Copy_Duplicate(const taArray_impl&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyVals
MethodDef desc: copy values from other array at given start and end points, and putting at given point in this
MethodDef proto void CopyVals(const taArray_impl&amp; from, int start = 0, int end = -1, int at = 0)
MethodDef opts [u'CAT_Copy']
MethodDef name: List
MethodDef desc: print out all of the elements in the array
MethodDef proto void List(ostream&amp; strm = cout)
MethodDef opts [u'CAT_Display']
MethodDef name: GetValStr
MethodDef desc: get a string representation of the value of the array (list of items)
MethodDef proto taString GetValStr()
MethodDef opts [u'CAT_Display']
MethodDef name: InitFromString
MethodDef desc: initialize an array from given string (does reset first)
MethodDef proto void InitFromString(const taString&amp; val)
MethodDef opts [u'CAT_Modify']
MethodDef names [u'AddBlank', u'Alloc', u'BlankEl_', u'CopyVals', u'Copy_Common', u'Copy_Duplicate', u'DupeUnique', u'Duplicate', u'Equal_', u'GetValStr', u'InRange', u'Index', u'InitFromString', u'List', u'MoveIdx', u'Permute', u'RemoveIdx', u'Reset', u'SetSize', u'ShiftLeft', u'ShiftLeftPct', u'Sort', u'SwapIdx', u'V_Flip']
########################################################################
TypeDef len: 11
TypeDef name:  taArray
TypeDef type: class
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taArray_impl', u'taBase', u'taOBase', u'taArray_base']
TypeDef children: []
########################################################################
TypeDef len: 11
TypeDef name:  int_Array
TypeDef type: class
TypeDef desc: array of ints
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
MethodDef name: FillSeq
MethodDef desc: fill array with sequential values starting at start, incrementing by inc
MethodDef proto void FillSeq(int start = 0, int inc = 1)
MethodDef names [u'FillSeq']
########################################################################
TypeDef len: 11
TypeDef name:  float_Array
TypeDef type: class
TypeDef desc: array of floats
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef children: [u'FunLookup', u'float_CircBuffer', u'float_RArray']
########################################################################
TypeDef len: 9
TypeDef name:  double_Array
TypeDef type: class
TypeDef desc: array of doubles
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  char_Array
TypeDef type: class
TypeDef desc: array of chars (bytes)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  String_Array
TypeDef type: class
TypeDef desc: array of Strings
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef children: [u'SArg_Array']
########################################################################
TypeDef len: 13
TypeDef name:  SArg_Array
TypeDef type: class
TypeDef desc: string argument array: has labels for each argument to make it easier in the interface
TypeDef cats:, [u'Program']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'String_Array']
MethodDef name: HasValue
MethodDef desc: returns true if there is an entry for the key
MethodDef proto bool HasValue(const taString&amp; key)
MethodDef name: GetValue
MethodDef desc: return the value for the key, or nil if none
MethodDef proto taString GetValue(const taString&amp; key)
MethodDef name: SetValue
MethodDef desc: set or update the value for the key
MethodDef proto void SetValue(const taString&amp; key, const taString&amp; value)
MethodDef names [u'GetValue', u'HasValue', u'SetValue']
########################################################################
TypeDef len: 9
TypeDef name:  Variant_Array
TypeDef type: class
TypeDef desc: array of variants
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  voidptr_Array
TypeDef type: class
TypeDef desc: array of void pointers
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 13
TypeDef name:  NameVar_Array
TypeDef type: class
TypeDef desc: an array of name value (variant) items
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
MemberDef name: def_sep
MemberDef type: taString
MemberDef desc: &apos;, &apos; default separator
MethodDef name: FindName
MethodDef desc: find by name (start &lt; 0 = from end)
MethodDef proto int FindName(const taString&amp; nm, int start = 0)
MethodDef name: FindNameContains
MethodDef desc: find by name containing nm (start &lt; 0 = from end)
MethodDef proto int FindNameContains(const taString&amp; nm, int start = 0)
MethodDef name: FindValue
MethodDef desc: find by value (start &lt; 0 = from end)
MethodDef proto int FindValue(const Variant&amp; var, int start = 0)
MethodDef name: FindValueContains
MethodDef desc: find by value.toString() containing vl (start &lt; 0 = from end)
MethodDef proto int FindValueContains(const taString&amp; vl, int start = 0)
MethodDef name: GetVal
MethodDef desc: get value from name; isNull if not found
MethodDef proto Variant GetVal(const taString&amp; nm)
MethodDef name: GetAllVals
MethodDef desc: get all values having given name (converts to strings)
MethodDef proto bool GetAllVals(const taString&amp; nm, String_Array&amp; vals)
MethodDef name: SetVal
MethodDef desc: set value by name; if name already on list, it is updated (rval = true); else new item added
MethodDef proto bool SetVal(const taString&amp; nm, const Variant&amp; vl)
MethodDef names [u'FindName', u'FindNameContains', u'FindValue', u'FindValueContains', u'GetAllVals', u'GetVal', u'SetVal']
########################################################################
TypeDef len: 13
TypeDef name:  taBase_FunCallList
TypeDef type: class
TypeDef desc: function call list manager
TypeDef cats:, []
TypeDef opts:, [u'MULT_INHERIT']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'IMultiDataLinkClient']
MethodDef name: This
MethodDef desc: reference to the &apos;this&apos; pointer of the client object
MethodDef proto void_ptr This()
MethodDef name: GetTypeDef
MethodDef desc: typedef of the dlc
MethodDef proto TypeDef_ptr GetTypeDef()
MethodDef name: link
MethodDef proto taiDataLink_ptr link()
MethodDef name: GetDataTypeDef
MethodDef desc: convenience function, default gets data type from link
MethodDef proto TypeDef_ptr GetDataTypeDef()
MethodDef name: link_
MethodDef proto taDataLink_ptr link_()
MethodDef name: ignoreDataChanged
MethodDef desc: hidden guys can ignore changes (but they always get Destroyed)
MethodDef proto bool ignoreDataChanged()
MethodDef name: isDataView
MethodDef desc: true for dataviews
MethodDef proto bool isDataView()
MethodDef name: DataLinkDestroying
MethodDef desc: called by DataLink when destroying; it will remove datalink ref in dlc upon return
MethodDef proto void DataLinkDestroying(taDataLink* dl)
MethodDef name: DataDataChanged
MethodDef proto void DataDataChanged(taDataLink* dl, int dcr, void* op1, void* op2)
MethodDef name: IgnoredDataChanged
MethodDef desc: called instead if ignoreDataChanged was true
MethodDef proto void IgnoredDataChanged(taDataLink* dl, int dcr, void* op1, void* op2)
MethodDef name: AddBaseFun
MethodDef desc: add base + function -- no check for unique on base_funs
MethodDef proto bool AddBaseFun(taBase* obj, const taString&amp; fun_name)
MethodDef names [u'AddBaseFun', u'DataDataChanged', u'DataLinkDestroying', u'GetDataTypeDef', u'GetTypeDef', u'IgnoredDataChanged', u'This', u'ignoreDataChanged', u'isDataView', u'link', u'link_']
########################################################################
TypeDef len: 7
TypeDef name:  UserDataItem_List
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'CHILDREN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 15
TypeDef name:  FontSpec
TypeDef type: class
TypeDef desc: a specification of a font (for Unix - X logical font description)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MULT_INHERIT', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'iFont', u'taBase', u'taOBase']
MemberDef name: fontName
MemberDef type: taString
MemberDef desc: family name of the font, such as &apos;Helvetica&apos; or &apos;Arial&apos;
MemberDef name: attribs
MemberDef type: iFont::Attributes
MemberDef opts [u'BITS']
MemberDef cats []
MemberDef desc: font modifiers
MemberDef name: pointSize
MemberDef type: float
MemberDef desc: point size of the font -- will be aproximated in 3D
MemberDef name: stretch
MemberDef type: int
MemberDef opts [u'EXPERT', u'DEF_100']
MemberDef cats []
MemberDef desc: the degree of stretch, less is narrower
MemberDef name: pattern
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: DEPRECATED the name of the font
MethodDef name: bold
MethodDef proto bool bold()
MethodDef name: setBold
MethodDef proto void setBold(bool value)
MethodDef name: italic
MethodDef proto bool italic()
MethodDef name: setItalic
MethodDef proto void setItalic(bool value)
MethodDef name: setPointSize
MethodDef proto void setPointSize(int value)
MethodDef name: setStretch
MethodDef proto void setStretch(int value)
MethodDef name: underline
MethodDef proto bool underline()
MethodDef name: setUnderline
MethodDef proto void setUnderline(bool value)
MethodDef name: copy
MethodDef proto void copy(const iFont&amp; src)
MethodDef name: equals
MethodDef proto bool equals(const iFont&amp; b)
MethodDef name: setRawName
MethodDef proto void setRawName(const char* raw_name)
MethodDef name: SelectFont
MethodDef desc: opens font selection dialog
MethodDef proto void SelectFont()
MethodDef opts [u'BUTTON']
MethodDef name: SetFont
MethodDef proto void SetFont(char* fn)
MethodDef name: SetFontSize
MethodDef desc: set font to given point size
MethodDef proto void SetFontSize(int point_size = 10)
MethodDef opts [u'BUTTON']
MethodDef name: Equals
MethodDef proto bool Equals(const FontSpec&amp; b)
MethodDef names [u'Equals', u'SelectFont', u'SetFont', u'SetFontSize', u'bold', u'copy', u'equals', u'italic', u'setBold', u'setItalic', u'setPointSize', u'setRawName', u'setStretch', u'setUnderline', u'underline']
########################################################################
TypeDef len: 17
TypeDef name:  MinMax
TypeDef type: class
TypeDef desc: minimum-maximum values
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
TypeDef children: [u'MinMaxRange']
MemberDef name: min
MemberDef type: float
MemberDef desc: minimum value
MemberDef name: max
MemberDef type: float
MemberDef desc: maximum value
MethodDef name: RangeTest
MethodDef desc: test whether value is within the range (but not equal to max or min)
MethodDef proto bool RangeTest(float val)
MethodDef name: RangeTestEq
MethodDef desc: test whether value is within the range (or equal)
MethodDef proto bool RangeTestEq(float val)
MethodDef name: Init
MethodDef desc: initializes the max and min to this value
MethodDef proto void Init(float it)
MethodDef name: Set
MethodDef desc: set values
MethodDef proto void Set(float mn, float mx)
MethodDef name: Range
MethodDef proto float Range()
MethodDef name: Scale
MethodDef desc: scale is the inverse of range
MethodDef proto float Scale()
MethodDef name: MidPoint
MethodDef desc: returns the range between the min and the max
MethodDef proto float MidPoint()
MethodDef name: UpdateRange
MethodDef desc: updates the range
MethodDef proto void UpdateRange(float it)
MethodDef name: SetRange
MethodDef desc: set the range from a matrix
MethodDef proto void SetRange(float_Matrix&amp; mat)
MethodDef name: MaxLT
MethodDef desc: max less than (or equal)
MethodDef proto void MaxLT(float it)
MethodDef name: MinGT
MethodDef desc: min greater than (or equal)
MethodDef proto void MinGT(float it)
MethodDef name: SymRange
MethodDef desc: symmetrize my range around zero, with max abs value of current min, max
MethodDef proto void SymRange()
MethodDef name: Normalize
MethodDef desc: normalize given value to 0-1 range given current in max
MethodDef proto float Normalize(float val)
MethodDef name: Project
MethodDef desc: project a normalized value into the current min-max range
MethodDef proto float Project(float val)
MethodDef name: Clip
MethodDef desc: clip given value within current range
MethodDef proto float Clip(float val)
MethodDef names [u'Clip', u'Init', u'MaxLT', u'MidPoint', u'MinGT', u'Normalize', u'Project', u'Range', u'RangeTest', u'RangeTestEq', u'Scale', u'Set', u'SetRange', u'SymRange', u'UpdateRange']
########################################################################
TypeDef len: 11
TypeDef name:  MinMaxRange
TypeDef type: class
TypeDef desc: min-max values plus scale and range
TypeDef cats:, [u'Math']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'MinMax']
########################################################################
TypeDef len: 15
TypeDef name:  FixedMinMax
TypeDef type: class
TypeDef desc: minimum-maximum values with toggles for usage
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: fix_min
MemberDef type: bool
MemberDef desc: use fixed minimum value?
MemberDef name: min
MemberDef type: float
MemberDef desc: minimum value
MemberDef name: fix_max
MemberDef type: bool
MemberDef desc: use fixed maximum value?
MemberDef name: max
MemberDef type: float
MemberDef desc: maximum value
MethodDef name: Init
MethodDef desc: initializes the max and min to this value
MethodDef proto void Init(float it)
MethodDef name: InitFix
MethodDef proto void InitFix(bool fx = false)
MethodDef name: Set
MethodDef proto void Set(float mn, float mx)
MethodDef name: SetMin
MethodDef proto void SetMin(float mn)
MethodDef name: SetMax
MethodDef proto void SetMax(float mx)
MethodDef name: FixRange
MethodDef proto void FixRange(MinMax&amp; mm)
MethodDef names [u'FixRange', u'Init', u'InitFix', u'Set', u'SetMax', u'SetMin']
########################################################################
TypeDef len: 13
TypeDef name:  Modulo
TypeDef type: class
TypeDef desc: modulo for things that happen periodically
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: flag
MemberDef type: bool
MemberDef desc: Modulo is active?
MemberDef name: m
MemberDef type: int
MemberDef desc: Modulo N mod m, where N is counter
MemberDef name: off
MemberDef type: int
MemberDef desc: Modulo Offset (actually (N - off) mod m
########################################################################
TypeDef len: 15
TypeDef name:  MinMaxInt
TypeDef type: class
TypeDef desc: minimum-maximum integer values
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: min
MemberDef type: int
MemberDef desc: minimum value
MemberDef name: max
MemberDef type: int
MemberDef desc: maximum value
MethodDef name: RangeTest
MethodDef desc: test whether value is within the range (but not equal to max or min)
MethodDef proto bool RangeTest(float val)
MethodDef name: RangeTestEq
MethodDef desc: test whether value is within the range (or equal)
MethodDef proto bool RangeTestEq(float val)
MethodDef name: Init
MethodDef desc: initializes the max and min to this value
MethodDef proto void Init(int it)
MethodDef name: Count
MethodDef proto int Count()
MethodDef name: Range
MethodDef proto int Range()
MethodDef name: Scale
MethodDef desc: scale is the inverse of range
MethodDef proto float Scale()
MethodDef name: MidPoint
MethodDef desc: returns the range between the min and the max
MethodDef proto int MidPoint()
MethodDef name: UpdateRange
MethodDef desc: updates the range
MethodDef proto void UpdateRange(int it)
MethodDef name: MaxLT
MethodDef desc: max less than (or equal)
MethodDef proto void MaxLT(int it)
MethodDef name: MinGT
MethodDef desc: min greater than (or equal)
MethodDef proto void MinGT(int it)
MethodDef name: Normalize
MethodDef desc: normalize given value to 0-1 range given current in max
MethodDef proto float Normalize(int val)
MethodDef name: Project
MethodDef desc: project a normalized value into the current min-max range
MethodDef proto int Project(int val)
MethodDef name: Clip
MethodDef desc: clip given value within current range
MethodDef proto int Clip(int val)
MethodDef names [u'Clip', u'Count', u'Init', u'MaxLT', u'MidPoint', u'MinGT', u'Normalize', u'Project', u'Range', u'RangeTest', u'RangeTestEq', u'Scale', u'UpdateRange']
########################################################################
TypeDef len: 17
TypeDef name:  taGroup_impl
TypeDef type: class
TypeDef desc: implementation of a group
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taList_impl']
TypeDef children: [u'taGroup']
MemberDef name: leaves
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: total number of leaves
MethodDef name: IsRoot
MethodDef desc: &apos;true&apos; if this is the root
MethodDef proto bool IsRoot()
MethodDef name: PrevEl_
MethodDef desc: in case we did a delete of an item
MethodDef proto taBase_ptr PrevEl_(taLeafItr&amp; lf)
MethodDef name: NewGp_gui
MethodDef desc: Create and add n_gps new sub group(s) of given type (NULL = same type as this group)
MethodDef proto TAGPtr NewGp_gui(int n_gps = 1, TypeDef* typ = NULL)
MethodDef opts [u'CAT_Modify', u'BUTTON', u'MENU_CONTEXT', u'TYPE_this', u'NULL_OK', u'NULL_TEXT_SameType', u'LABEL_NewGroup', u'NO_SAVE_ARG_VAL']
MethodDef name: InitLeafGp
MethodDef desc: Initialize the leaf group iter list, always ok to call
MethodDef proto void InitLeafGp()
MethodDef opts [u'CAT_Access']
MethodDef name: RemoveLeafEl
MethodDef desc: remove given leaf element
MethodDef proto bool RemoveLeafEl(taBase* item)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveLeafName
MethodDef desc: remove given named leaf element
MethodDef proto bool RemoveLeafName(const char* item_nm)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveLeafIdx
MethodDef desc: Remove leaf element at leaf index
MethodDef proto bool RemoveLeafIdx(int idx)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveGpIdx
MethodDef desc: remove group at given index
MethodDef proto bool RemoveGpIdx(int idx)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveGpEl
MethodDef desc: remove given group
MethodDef proto bool RemoveGpEl(taGroup_impl* group)
MethodDef opts [u'MENU', u'FROM_GROUP_gp', u'MENU_ON_Edit', u'CAT_Modify']
MethodDef name: EditSubGps
MethodDef desc: edit the list of sub-groups (e.g., so you can move around subgroups)
MethodDef proto TALOG_ptr EditSubGps()
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Access']
MethodDef name: EnforceLeaves
MethodDef desc: ensure that sz leaves exits by adding new ones to top group and removing old ones from end
MethodDef proto void EnforceLeaves(int sz)
MethodDef opts [u'CAT_Modify']
MethodDef name: FindLeafEl
MethodDef desc: find given leaf element (-1 = not here)
MethodDef proto int FindLeafEl(taBase* item)
MethodDef names [u'EditSubGps', u'EnforceLeaves', u'FindLeafEl', u'InitLeafGp', u'IsRoot', u'NewGp_gui', u'PrevEl_', u'RemoveGpEl', u'RemoveGpIdx', u'RemoveLeafEl', u'RemoveLeafIdx', u'RemoveLeafName']
########################################################################
TypeDef len: 9
TypeDef name:  taSubGroup
TypeDef type: class
TypeDef desc: has the sub-groups for a group
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  taLeafItr
TypeDef type: class
TypeDef desc: contains the indicies for iterating over leafs
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: cgp
MemberDef type: taGroup_impl*
MemberDef desc: pointer to current group
MemberDef name: g
MemberDef type: int
MemberDef desc: index of current group
MemberDef name: i
MemberDef type: int
MemberDef desc: index of current leaf element
########################################################################
TypeDef len: 11
TypeDef name:  taGroup
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taList_impl', u'taGroup_impl']
TypeDef children: []
########################################################################
TypeDef len: 11
TypeDef name:  taBase_Group
TypeDef type: class
TypeDef desc: group of objects
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef children: [u'BaseSpec_Group', u'Stat_Group', u'PatternSpec_Group']
########################################################################
TypeDef len: 9
TypeDef name:  taiMultiMimeItem
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'NO_CSS', u'NO_MEMBERS', u'VIRT_BASE', u'INSTANCE']
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  taiMimeFactory_List
TypeDef type: class
TypeDef desc: we set this during InitLinks for the app-wide global instance
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: instance
MethodDef proto taiMimeFactory_List_ptr instance()
MethodDef name: setInstance
MethodDef desc: we set this during InitLinks for the app-wide global instance
MethodDef proto void setInstance(taiMimeFactory_List* value)
MethodDef name: StatGetInstanceByType
MethodDef desc: get an instance of the exact factory from the global list, making if needed
MethodDef proto taiMimeFactory_ptr StatGetInstanceByType(TypeDef* td)
MethodDef name: GetInstanceByType
MethodDef desc: get an instance of the exact factory, making if needed
MethodDef proto taiMimeFactory_ptr GetInstanceByType(TypeDef* td)
MethodDef names [u'GetInstanceByType', u'StatGetInstanceByType', u'instance', u'setInstance']
########################################################################
TypeDef len: 7
TypeDef name:  taiMimeItem_List
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 15
TypeDef name:  taColor
TypeDef type: class
TypeDef desc: Red Green Blue Alpha color value
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: r
MemberDef type: float
MemberDef desc: red
MemberDef name: g
MemberDef type: float
MemberDef desc: green
MemberDef name: b
MemberDef type: float
MemberDef desc: blue
MemberDef name: a
MemberDef type: float
MemberDef opts [u'CONDSHOW_ON_no_a:false']
MemberDef cats []
MemberDef desc: alpha (intensity, ratio of fg to bg)
MethodDef name: color
MethodDef proto const_iColor color()
MethodDef name: setColor
MethodDef proto void setColor(const_iColor&amp; cp)
MethodDef name: Set
MethodDef proto void Set(float r_, float g_, float b_, float a_ = 1)
MethodDef names [u'Set', u'color', u'setColor']
########################################################################
TypeDef len: 15
TypeDef name:  RGBA
TypeDef type: class
TypeDef desc: Red Green Blue Alpha color specification
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: name
MemberDef type: taString
MemberDef desc: description of what this color is
MemberDef name: r
MemberDef type: float
MemberDef desc: red
MemberDef name: g
MemberDef type: float
MemberDef desc: green
MemberDef name: b
MemberDef type: float
MemberDef desc: blue
MemberDef name: a
MemberDef type: float
MemberDef desc: alpha (intensity, ratio of fg to bg)
MemberDef name: desc
MemberDef type: taString
MemberDef desc: description of what this color is
MethodDef name: color
MethodDef desc: note: always correct -- updated on call
MethodDef proto const_iColor color()
MethodDef name: ToString_RGBA
MethodDef proto taString ToString_RGBA()
MethodDef names [u'ToString_RGBA', u'color']
########################################################################
TypeDef len: 13
TypeDef name:  TAColor
TypeDef type: class
TypeDef desc: Color
TypeDef cats:, []
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase']
MethodDef name: SetColor
MethodDef proto void SetColor(float r, float g, float b, float a = 1.0, RGBA* background = NULL)
MethodDef opts [u'USE_RVAL', u'ARGC=4', u'NEW_FUN']
MethodDef names [u'SetColor']
########################################################################
TypeDef len: 15
TypeDef name:  ColorScaleSpec
TypeDef type: class
TypeDef desc: Color Spectrum Data
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: background
MemberDef type: RGBA
MemberDef desc: background color
MethodDef name: GenRanges
MethodDef proto void GenRanges(TAColor_List* cl, int chunks)
MethodDef names [u'GenRanges']
########################################################################
TypeDef len: 15
TypeDef name:  ScaleRange
TypeDef type: class
TypeDef desc: saves scale ranges for different variables viewed in netview
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: auto_scale
MemberDef type: bool
MemberDef name: min
MemberDef type: float
MemberDef name: max
MemberDef type: float
MethodDef name: SetFromScale
MethodDef proto void SetFromScale(ColorScale&amp; cs)
MethodDef names [u'SetFromScale']
########################################################################
TypeDef len: 15
TypeDef name:  ColorScale
TypeDef type: class
TypeDef desc: defines a range of colors to code data values with
TypeDef cats:, [u'Display']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: chunks
MemberDef type: int
MemberDef desc: number of chunks to divide scale into
MemberDef name: min
MemberDef type: float
MemberDef name: max
MemberDef type: float
MemberDef name: range
MemberDef type: float
MemberDef name: zero
MemberDef type: float
MemberDef name: spec
MemberDef type: ColorScaleSpec*
MemberDef desc: specifies the color ranges
MemberDef name: auto_scale
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MethodDef name: SetColorSpec
MethodDef desc: set the color scale spec to determine the palette of colors representing values
MethodDef proto void SetColorSpec(ColorScaleSpec* color_spec)
MethodDef opts [u'BUTTON', u'INIT_ARGVAL_ON_spec']
MethodDef name: GetAbsPercent
MethodDef proto float GetAbsPercent(float val)
MethodDef name: GetContrastColor
MethodDef proto const_iColor GetContrastColor(int idx, bool* ok = NULL)
MethodDef name: GetIdx
MethodDef proto int GetIdx(float val)
MethodDef name: DefaultChunks
MethodDef proto void DefaultChunks()
MethodDef name: MapColors
MethodDef desc: generates the colors from spec
MethodDef proto void MapColors()
MethodDef name: NewDefaults
MethodDef proto void NewDefaults()
MethodDef name: SetFromScaleRange
MethodDef desc: funcs used to be in bar:
MethodDef proto void SetFromScaleRange(ScaleRange* sr)
MethodDef name: ModRange
MethodDef proto void ModRange(float val)
MethodDef name: ModRoundRange
MethodDef proto void ModRoundRange(float val)
MethodDef name: FixRangeZero
MethodDef proto void FixRangeZero()
MethodDef name: SetMinMax
MethodDef proto void SetMinMax(float mn, float mx)
MethodDef name: UpdateMinMax
MethodDef desc: maybe expand bounds, returning true if expanded
MethodDef proto bool UpdateMinMax(float val)
MethodDef name: SymRange
MethodDef desc: symmetrize min/max values around zero
MethodDef proto void SymRange()
MethodDef names [u'DefaultChunks', u'FixRangeZero', u'GetAbsPercent', u'GetContrastColor', u'GetIdx', u'MapColors', u'ModRange', u'ModRoundRange', u'NewDefaults', u'SetColorSpec', u'SetFromScaleRange', u'SetMinMax', u'SymRange', u'UpdateMinMax']
########################################################################
TypeDef len: 9
TypeDef name:  RGBA_List
TypeDef type: class
TypeDef desc: list of RGBA objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  TAColor_List
TypeDef type: class
TypeDef desc: list of TAColor objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  ColorScaleSpec_Group
TypeDef type: class
TypeDef desc: group of color scale specs
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: NewDefaults
MethodDef desc: create a set of default colors
MethodDef proto void NewDefaults()
MethodDef name: SetDefaultColor
MethodDef desc: set the default color based on gui
MethodDef proto void SetDefaultColor()
MethodDef names [u'NewDefaults', u'SetDefaultColor']
########################################################################
TypeDef len: 9
TypeDef name:  ScaleRange_List
TypeDef type: class
TypeDef desc: list of ScaleRange objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 13
TypeDef name:  ViewColor
TypeDef type: class
TypeDef desc: view color specification -- name lookup of color highlighting for view display
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: use_fg
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: use a special foreground color
MemberDef name: fg_color
MemberDef type: RGBA
MemberDef opts [u'CONDEDIT_ON_use_fg:true']
MemberDef cats []
MemberDef desc: foreground color
MemberDef name: use_bg
MemberDef type: bool
MemberDef desc: use a special background color
MemberDef name: bg_color
MemberDef type: RGBA
MemberDef opts [u'CONDEDIT_ON_use_fg:true']
MemberDef cats []
MemberDef desc: background color
MemberDef name: desc
MemberDef type: taString
MemberDef desc: description of this view color item
########################################################################
TypeDef len: 11
TypeDef name:  ViewColor_List
TypeDef type: class
TypeDef desc: list of ViewColor items
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
MethodDef name: FindMakeViewColor
MethodDef desc: find view color of given name -- if not there, make it, with given params (returns false if didn&apos;t already exist)
MethodDef proto bool FindMakeViewColor(const taString&amp; nm, const taString&amp; dsc, bool fg, const taString&amp; fg_color_name, bool bg = false, const taString&amp; bg_color_name)
MethodDef names [u'FindMakeViewColor']
########################################################################
TypeDef len: 17
TypeDef name:  AbstractScriptBase
TypeDef type: class
TypeDef desc: abstract class for adding a script to other objects
TypeDef cats:, []
TypeDef opts:, [u'VIRT_BASE', u'NO_INSTANCE']
TypeDef children: [u'ScriptBase', u'Program']
EnumDef name: NoScript
EnumDef val: NoScript
EnumDef: there is no script
EnumDef name: ScriptString
EnumDef val: ScriptString
EnumDef: the script is in a string
EnumDef name: ScriptFile
EnumDef val: ScriptFile
EnumDef: the script will be provided by a file
EnumDef names: [u'ScriptSource']
MemberDef name: script_compiled
MemberDef type: bool
MemberDef opts [u'SHOW', u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: true when compiled
MethodDef name: Wait_RecompileScripts
MethodDef desc: wait process for recompiling
MethodDef proto bool Wait_RecompileScripts()
MethodDef name: scriptSource
MethodDef desc: override this
MethodDef proto ScriptSource scriptSource()
MethodDef name: scriptFilename
MethodDef desc: override this
MethodDef proto const_taString scriptFilename()
MethodDef name: scriptString
MethodDef desc: override this
MethodDef proto const_taString scriptString()
MethodDef name: HasScript
MethodDef desc: returns true if we have some kind of script file or string to run
MethodDef proto bool HasScript()
MethodDef name: RunScript
MethodDef desc: run the script (returns false for no scr)
MethodDef proto bool RunScript()
MethodDef name: CompileScript
MethodDef desc: compile script from source into internal runnable format;
 &apos;true&apos; if compiled, &apos;false&apos; if not or if deferred due to being in readline
MethodDef proto bool CompileScript(bool force = false)
MethodDef opts [u'MENU', u'LABEL_Compile', u'MENU_ON_Actions', u'ARGC_0']
MethodDef name: StopScript
MethodDef desc: stops the running script
MethodDef proto void StopScript()
MethodDef name: CmdShellScript
MethodDef desc: set the css command shell to operate on this script, so that you can interact with (run, debug, etc) this script
MethodDef proto void CmdShellScript()
MethodDef opts [u'MENU', u'LABEL_CmdShell', u'MENU_ON_Actions']
MethodDef name: ExitShellScript
MethodDef desc: if this script is currently being operated on by the command shell (via CmdShell function), exit from that shell (shell returns to previous script it was operating on)
MethodDef proto void ExitShellScript()
MethodDef opts [u'MENU', u'LABEL_ExitShell', u'MENU_ON_Actions']
MethodDef names [u'CmdShellScript', u'CompileScript', u'ExitShellScript', u'HasScript', u'RunScript', u'StopScript', u'Wait_RecompileScripts', u'scriptFilename', u'scriptSource', u'scriptString']
########################################################################
TypeDef len: 9
TypeDef name:  ScriptBase_List
TypeDef type: class
TypeDef desc: list of script base objects (doesn&apos;t own anything)
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER']
########################################################################
TypeDef len: 17
TypeDef name:  ScriptBase
TypeDef type: class
TypeDef desc: class for adding a script to other objects
TypeDef cats:, []
TypeDef opts:, [u'VIRT_BASE', u'NO_INSTANCE']
TypeDef parents: [u'AbstractScriptBase']
TypeDef children: [u'ScriptPrjnSpec']
MemberDef name: script_file
MemberDef type: taFiler*
MemberDef desc: file to use for the script
MemberDef name: script_string
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: script text to use for the script
MethodDef name: LoadScript
MethodDef desc: load script from script file and compile it
MethodDef proto void LoadScript(const taString&amp; file_nm)
MethodDef name: LoadScriptString
MethodDef desc: load script from script string and compile it
MethodDef proto void LoadScriptString(const taString&amp; string)
MethodDef name: SetScript
MethodDef desc: set the script file name (also clears script string)
MethodDef proto void SetScript(const taString&amp; file_nm)
MethodDef names [u'LoadScript', u'LoadScriptString', u'SetScript']
########################################################################
TypeDef len: 13
TypeDef name:  ViewSpec
TypeDef type: class
TypeDef desc: generic specification for a view of some item
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView']
MemberDef name: name
MemberDef type: taString
MemberDef name: display_name
MemberDef type: taString
MemberDef desc: name used in display IF DIFFERENT THAN name
MemberDef name: visible
MemberDef type: bool
MemberDef desc: visibility flag
########################################################################
TypeDef len: 9
TypeDef name:  ViewSpec_Group
TypeDef type: class
TypeDef desc: group of view specs
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 17
TypeDef name:  taProject
TypeDef type: class
TypeDef desc: Base class for a project object containing all relevant info for a given instance -- all ta GUI-based systems should have one..
TypeDef cats:, [u'Project']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'VIRT_BASE', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase']
TypeDef children: [u'ProjectBase']
MemberDef name: tags
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: list of comma separated tags that indicate the basic function of this project -- should be listed in hierarchical order, with most important/general tags first -- these are used for searching the online project library if this project is uploaded
MemberDef name: docs
MemberDef type: Doc_Group
MemberDef desc: documents, typically linked to other objects
MemberDef name: wizards
MemberDef type: Wizard_Group
MemberDef desc: Wizards for automatically configuring simulation objects
MemberDef name: edits
MemberDef type: SelectEdit_Group
MemberDef desc: special edit dialogs for selected elements
MemberDef name: data
MemberDef type: DataTable_Group
MemberDef desc: data, such as patterns for network input
MemberDef name: data_proc
MemberDef type: taBase_Group
MemberDef desc: objects that perform data processing operations (functions collected on objects for different kinds of operations)
MemberDef name: programs
MemberDef type: Program_Group
MemberDef desc: Gui-based programs to run simulations and other processing
MemberDef name: viewers
MemberDef type: DataViewer_List
MemberDef desc: a list of the viewers that have been made and saved in the project; choose one, right click, and OpenViewer to view if not open
MemberDef name: use_change_log
MemberDef type: bool
MemberDef opts [u'AKA_use_sim_log']
MemberDef cats []
MemberDef desc: record project changes in a ChangeLog docs item -- you will be prompted whenver the project is saved to a different name, and can always use the UpdateChangeLog button to add a new entry prior to saving
MemberDef name: last_change_desc
MemberDef type: taString
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: description of the last change made to the project -- used for change log
MethodDef name: GetDefaultProjectBrowser
MethodDef desc: gets one if there is, else NULL
MethodDef proto MainWindowViewer_ptr GetDefaultProjectBrowser()
MethodDef name: GetDefaultProjectViewer
MethodDef desc: gets one if there is, else NULL
MethodDef proto MainWindowViewer_ptr GetDefaultProjectViewer()
MethodDef name: AssertDefaultProjectBrowser
MethodDef desc: make sure the default project browser is made, and optionally open it
MethodDef proto MainWindowViewer_ptr AssertDefaultProjectBrowser(bool auto_opn)
MethodDef name: AssertDefaultWiz
MethodDef desc: make sure the default wizard(s) are made, and optionally open them
MethodDef proto void AssertDefaultWiz(bool auto_opn)
MethodDef name: OpenNewProjectBrowser
MethodDef desc: open a new browser, either 3-pane or 2-2-pane (tree + viewer)
MethodDef proto void OpenNewProjectBrowser(taString proj_browser_name = (default name))
MethodDef opts [u'MENU', u'MENU_ON_View', u'MENU_CONTEXT']
MethodDef name: OpenNewProjectViewer
MethodDef desc: open a new 3D viewer (with panels)
MethodDef proto void OpenNewProjectViewer(taString proj_browser_name = (default name))
MethodDef opts [u'MENU', u'MENU_ON_View', u'MENU_CONTEXT']
MethodDef name: GetNewInputDataTable
MethodDef desc: createa a new data table in data.InputData (used for data generation functions). nw_nm = name for new table, msg = issue a warning message about the creation of this table
MethodDef proto DataTable_ptr GetNewInputDataTable(const taString&amp; nw_nm, bool msg = false)
MethodDef name: GetNewOutputDataTable
MethodDef desc: createa a new data table in data.OutputData (used for monitoring and logging functions). nw_nm = name for new table, msg = issue a warning message about the creation of this table
MethodDef proto DataTable_ptr GetNewOutputDataTable(const taString&amp; nw_nm, bool msg = false)
MethodDef name: GetNewAnalysisDataTable
MethodDef desc: createa a new data table in data.AnalysisData (used for various data processing and graphing functions). nw_nm = name for new table, msg = issue a warning message about the creation of this table
MethodDef proto DataTable_ptr GetNewAnalysisDataTable(const taString&amp; nw_nm, bool msg = false)
MethodDef name: FindMakeNewDataProc
MethodDef desc: find existing data processing object of given type, or else make one and give it nm
MethodDef proto taBase_ptr FindMakeNewDataProc(TypeDef* typ, const taString&amp; nm)
MethodDef name: FindMakeSelectEdit
MethodDef desc: get select edit object of given name, or make one if not found
MethodDef proto SelectEdit_ptr FindMakeSelectEdit(const taString&amp; seledit_name)
MethodDef name: NewProjectBrowser
MethodDef desc: create a new, empty viewer -- note: window not opened yet
MethodDef proto MainWindowViewer_ptr NewProjectBrowser()
MethodDef name: UpdateChangeLog
MethodDef desc: update change log for this project, stored as a ChangeLog item in docs on the project -- you will be prompted to enter a description of recent changes, and the date, user, and file names will be recorded
MethodDef proto void UpdateChangeLog()
MethodDef opts [u'BUTTON']
MethodDef name: SaveRecoverFile
MethodDef desc: Save a recover file of this project, usually called when a signal is received indicating a crash condition
MethodDef proto void SaveRecoverFile()
MethodDef name: PostLoadAutos
MethodDef desc: perform post-loading automatic functions
MethodDef proto void PostLoadAutos()
MethodDef name: OpenViewers
MethodDef desc: open any yet unopen viewers
MethodDef proto void OpenViewers()
MethodDef names [u'AssertDefaultProjectBrowser', u'AssertDefaultWiz', u'FindMakeNewDataProc', u'FindMakeSelectEdit', u'GetDefaultProjectBrowser', u'GetDefaultProjectViewer', u'GetNewAnalysisDataTable', u'GetNewInputDataTable', u'GetNewOutputDataTable', u'NewProjectBrowser', u'OpenNewProjectBrowser', u'OpenNewProjectViewer', u'OpenViewers', u'PostLoadAutos', u'SaveRecoverFile', u'UpdateChangeLog']
########################################################################
TypeDef len: 7
TypeDef name:  taiMenuBar
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData', u'taiActions']
########################################################################
TypeDef len: 9
TypeDef name:  taiActions
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData']
TypeDef children: [u'taiMenuBar', u'taiMenu']
########################################################################
TypeDef len: 13
TypeDef name:  ISelectable
TypeDef type: class
TypeDef desc: this code only used when requesting the default link
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy']
TypeDef children: [u'IObjectSelectable']
EnumDef name: GC_DEFAULT
EnumDef val: GC_DEFAULT
EnumDef: this code only used when requesting the default link
EnumDef name: GC_SINGLE_DATA
EnumDef val: GC_SINGLE_DATA
EnumDef: for trees, etc., only one identity, and link() is data
EnumDef name: GC_DUAL_DEF_DATA
EnumDef val: GC_DUAL_DEF_DATA
EnumDef: for T3, guys like Layer, where def identity is the data
EnumDef name: GC_DUAL_DEF_VIEW
EnumDef val: GC_DUAL_DEF_VIEW
EnumDef: for T3, guys like GraphView, where def ident is the graphview obj itself
EnumDef names: [u'GuiContext']
MethodDef name: md
MethodDef desc: memberdef in data parent, if any, of the selected item
MethodDef proto MemberDef_ptr md()
MethodDef name: own_link
MethodDef desc: owner item&apos;s link -- this is the *eff_data* parent (not the gui parent)
MethodDef proto taiDataLink_ptr own_link(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: par
MethodDef desc: gui parent, if any
MethodDef proto ISelectable_ptr par()
MethodDef name: par_link
MethodDef desc: parent item&apos;s link -- this is the *gui* parent (not the data parent/owner)
MethodDef proto taiDataLink_ptr par_link()
MethodDef name: viewLink
MethodDef desc: only defined for T3 guys
MethodDef proto taiDataLink_ptr viewLink()
MethodDef name: effLink
MethodDef desc: for trees and things like layers, we just just use the data, for things like graphs (where view==data) we use the view itself (override shType)
MethodDef proto taiDataLink_ptr effLink(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: clipParLink
MethodDef desc: for tree stuff, we use the gui parent for clip ops; for t3 we use the eff_data owner
MethodDef proto taiDataLink_ptr clipParLink(ISelectable::GuiContext sh_typ)
MethodDef name: par_md
MethodDef desc: eff_data parent item&apos;s (if any) md
MethodDef proto MemberDef_ptr par_md()
MethodDef name: host
MethodDef proto ISelectableHost_ptr host()
MethodDef name: shType
MethodDef desc: mediates menu handling, and default source for clip ops
MethodDef proto GuiContext shType()
MethodDef name: taData
MethodDef desc: if the eff_data is taBase, this returns it
MethodDef proto taBase_ptr taData(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: widget
MethodDef desc: gets from host
MethodDef proto QWidget_ptr widget()
MethodDef name: clipHandlerObj
MethodDef desc: shortcut for host()-&gt;clipHanderObj();
MethodDef proto QObject_ptr clipHandlerObj()
MethodDef name: GetEffDataTypeDef
MethodDef desc: gets it from effLink
MethodDef proto TypeDef_ptr GetEffDataTypeDef(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: EditAction_
MethodDef desc: do the indicated edit action (called from browser or list view); normally implement the _impl
MethodDef proto int EditAction_(ISelectable_PtrList&amp; sel_items, int ea, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: FillContextMenu
MethodDef desc: for multi or single (normally implement the _impl)
MethodDef proto void FillContextMenu(ISelectable_PtrList&amp; sel_items, taiActions_ptr menu, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: GetClipData
MethodDef desc: works for single or multi; normally not overridden
MethodDef proto taiClipData_ptr GetClipData(const ISelectable_PtrList&amp; sel_items, int src_edit_action, bool for_drag, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: GetClipDataSingle
MethodDef proto taiClipData_ptr GetClipDataSingle(int src_edit_action, bool for_drag, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: GetClipDataMulti
MethodDef desc: only needed if multi is handled
MethodDef proto taiClipData_ptr GetClipDataMulti(const ISelectable_PtrList&amp; sel_items, int src_edit_action, bool for_drag, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: QueryEditActions_
MethodDef desc: called to get edit items available on clipboard for the sel_items
MethodDef proto int QueryEditActions_(const ISelectable_PtrList&amp; sel_items, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: RefUnref
MethodDef desc: ref&apos;ed/unrefed in select lists etc.; optional, and can be used for lifetime mgt; returns count after operation
MethodDef proto int RefUnref(bool ref)
MethodDef names [u'EditAction_', u'FillContextMenu', u'GetClipData', u'GetClipDataMulti', u'GetClipDataSingle', u'GetEffDataTypeDef', u'QueryEditActions_', u'RefUnref', u'clipHandlerObj', u'clipParLink', u'effLink', u'host', u'md', u'own_link', u'par', u'par_link', u'par_md', u'shType', u'taData', u'viewLink', u'widget']
########################################################################
TypeDef len: 11
TypeDef name:  IDataViewWidget
TypeDef type: class
TypeDef desc: interface that all DataViewer::widget() class must implement
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
MethodDef name: isDirty
MethodDef proto bool isDirty()
MethodDef name: widget
MethodDef desc: return the widget
MethodDef proto QWidget_ptr widget()
MethodDef name: viewer
MethodDef desc: often lexically overridden to strongly type
MethodDef proto DataViewer_ptr viewer()
MethodDef name: viewerWindow
MethodDef desc: the main window in which this widget lives
MethodDef proto iMainWindowViewer_ptr viewerWindow()
MethodDef name: Constr
MethodDef desc: called virtually, after new, override impl
MethodDef proto void Constr()
MethodDef name: Close
MethodDef desc: deletes us, and disconects us from viewer -- YOU MUST NOT MAKE ANY CALLS TO OBJ AFTER THIS
MethodDef proto void Close()
MethodDef name: Refresh
MethodDef desc: manual refresh (brackets with Busy)
MethodDef proto void Refresh()
MethodDef name: ResolveChanges
MethodDef desc: called from viewer prior to close; should normally autosave unsaved changes
MethodDef proto void ResolveChanges(CancelOp&amp; cancel_op)
MethodDef name: SaveData
MethodDef proto void SaveData()
MethodDef names [u'Close', u'Constr', u'Refresh', u'ResolveChanges', u'SaveData', u'isDirty', u'viewer', u'viewerWindow', u'widget']
########################################################################
TypeDef len: 13
TypeDef name:  iTabBar
TypeDef type: class
TypeDef desc: encapsulates the TabBar for iTabView
TypeDef cats:, []
TypeDef opts:, []
EnumDef name: TI_NONE
EnumDef val: TI_NONE
EnumDef name: TI_UNPINNED
EnumDef val: TI_UNPINNED
EnumDef name: TI_PINNED
EnumDef val: TI_PINNED
EnumDef name: TI_LOCKED
EnumDef val: TI_LOCKED
EnumDef names: [u'TabIcon']
MemberDef name: tab_icon
MemberDef type: QIcon_ptr_ary
MemberDef desc: 0=unpinned, 1=pinned
MethodDef name: InitClass
MethodDef desc: auto executed
MethodDef proto void InitClass()
MethodDef name: setTabIcon
MethodDef proto void setTabIcon(int idx, iTabBar::TabIcon ti)
MethodDef names [u'InitClass', u'setTabIcon']
########################################################################
TypeDef len: 19
TypeDef name:  DataViewer
TypeDef type: class
TypeDef desc: the base type for objects with a gui window rep of some kind
TypeDef cats:, [u'Display']
TypeDef opts:, [u'VIRT_BASE', u'DEF_NAME_STYLE_1', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView']
TypeDef children: [u'ToolBar', u'TopLevelViewer', u'FrameViewer', u'T3DataViewFrame']
EnumDef name: EPS
EnumDef val: EPS
EnumDef: encapsulated postscript file (only for 3D view objects)
EnumDef name: JPEG
EnumDef val: JPEG
EnumDef: JPEG -- best lossy compression (small file sizes) and ubiquitous
EnumDef name: PNG
EnumDef val: PNG
EnumDef: Portable Network Graphics -- best lossless compression (larger files, but better than raw) and ubiquitous
EnumDef name: PPM
EnumDef val: PPM
EnumDef: Portable Pixmap -- good for converting to other formats -- no compression
EnumDef name: IV
EnumDef val: IV
EnumDef: Open Inventor format (only for 3D view objects)
EnumDef names: [u'ImageFormat']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of the object
MethodDef name: deleteOnWinClose
MethodDef proto bool deleteOnWinClose()
MethodDef name: dvwidget
MethodDef proto IDataViewWidget_ptr dvwidget()
MethodDef name: widget
MethodDef proto QWidget_ptr widget()
MethodDef name: isVisible
MethodDef desc: whether we are supposed to be showing or not (view state)
MethodDef proto bool isVisible()
MethodDef name: setVisible
MethodDef desc: whether we are supposed to be showing or not (view state)
MethodDef proto void setVisible(bool value, bool update_view = true)
MethodDef name: Show
MethodDef desc: make the item visible, if this is applicable
MethodDef proto void Show()
MethodDef name: Hide
MethodDef desc: hide (but don&apos;t delete) the item, if applicable
MethodDef proto void Hide()
MethodDef name: GetWinState
MethodDef desc: copy gui state to us (override impl); true if done (ie mapped)
MethodDef proto bool GetWinState()
MethodDef name: SetWinState
MethodDef desc: set gui state from us (override impl)
MethodDef proto bool SetWinState()
MethodDef name: ResolveChanges
MethodDef desc: resolve all changes (if mapped)
MethodDef proto void ResolveChanges(CancelOp&amp; cancel_op)
MethodDef name: WindowClosing
MethodDef desc: cb from m_widget, subordinate wins may not be cancellable
MethodDef proto void WindowClosing(CancelOp&amp; cancel_op)
MethodDef name: WidgetDeleting
MethodDef desc: lets us do any cleanup -- override the impl
MethodDef proto void WidgetDeleting()
MethodDef name: SaveImageAs
MethodDef desc: save the image of this view to a file -- if fname is empty, it prompts the user for a name
MethodDef proto bool SaveImageAs(const taString&amp; fname, DataViewer::ImageFormat img_fmt = JPEG)
MethodDef opts [u'BUTTON', u'FILE_DIALOG_SAVE', u'FILETYPE_Image']
MethodDef name: PrintImage
MethodDef desc: print the image of this view to printer
MethodDef proto bool PrintImage()
MethodDef opts [u'BUTTON']
MethodDef name: InitImageExts
MethodDef desc: initialize the image extensions, if not already done
MethodDef proto bool InitImageExts()
MethodDef names [u'GetWinState', u'Hide', u'InitImageExts', u'PrintImage', u'ResolveChanges', u'SaveImageAs', u'SetWinState', u'Show', u'WidgetDeleting', u'WindowClosing', u'deleteOnWinClose', u'dvwidget', u'isVisible', u'setVisible', u'widget']
########################################################################
TypeDef len: 15
TypeDef name:  ToolBar
TypeDef type: class
TypeDef desc: proxy for Toolbars
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer']
TypeDef children: [u'ProgramToolBar']
MemberDef name: o
MemberDef type: taBase::Orientation
MemberDef desc: whether hor or vert
########################################################################
TypeDef len: 15
TypeDef name:  TopLevelViewer
TypeDef type: class
TypeDef desc: stuff that is common to anything that can be a top-level window
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer']
TypeDef children: [u'DockViewer', u'MainWindowViewer']
MethodDef name: openOnLoad
MethodDef desc: &apos;true&apos; if the viewer should be opened after loading (note: still must check if topLevel)
MethodDef proto bool openOnLoad()
MethodDef name: isRoot
MethodDef desc: only true for main proj window
MethodDef proto bool isRoot()
MethodDef name: isTopLevel
MethodDef desc: to differentiate, when it could be either
MethodDef proto bool isTopLevel()
MethodDef name: ViewWindow
MethodDef desc: either de-iconfiy if exists or create a new window if doesn&apos;t
MethodDef proto void ViewWindow()
MethodDef opts [u'MENU', u'MENU_CONTEXT', u'MENU_ON_Object']
MethodDef name: Iconify
MethodDef desc: iconify the window (saves iconified state)
MethodDef proto void Iconify()
MethodDef opts [u'MENU']
MethodDef name: DeIconify
MethodDef desc: deiconify the window (saves deiconified state)
MethodDef proto void DeIconify()
MethodDef names [u'DeIconify', u'Iconify', u'ViewWindow', u'isRoot', u'isTopLevel', u'openOnLoad']
########################################################################
TypeDef len: 17
TypeDef name:  DockViewer
TypeDef type: class
TypeDef desc: the controller for dock windows, which can float, or be in a MainWindow
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'TopLevelViewer']
TypeDef children: [u'ConsoleDockViewer', u'ToolBoxDockViewer']
EnumDef name: DV_NONE
EnumDef val: DV_NONE
EnumDef name: DV_CLOSABLE
EnumDef val: DV_CLOSABLE
EnumDef: true if we are allowed to close it
EnumDef name: DV_MOVABLE
EnumDef val: DV_MOVABLE
EnumDef: true if we are allowed to move it around
EnumDef name: DV_FLOATABLE
EnumDef val: DV_FLOATABLE
EnumDef: true if we are allowed to undock it
EnumDef names: [u'DockViewerFlags']
MemberDef name: dock_flags
MemberDef type: DockViewer::DockViewerFlags
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: how this dock window is allowed to behave
MemberDef name: dock_area
MemberDef type: int
MemberDef desc: one of the Qt::DockWidgetArea flags, def is bottom
########################################################################
TypeDef len: 15
TypeDef name:  MainWindowViewer
TypeDef type: class
TypeDef desc: the uber controller for main windows
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_Browser', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'TopLevelViewer']
MemberDef name: def_browser_type
MemberDef type: TypeDef*
MemberDef desc: type of the default browser, us unless replaced
MemberDef name: def_viewer_type
MemberDef type: TypeDef*
MemberDef desc: type of the default viewer, us unless replaced
MemberDef name: toolbars
MemberDef type: ToolBar_List
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef name: frames
MemberDef type: FrameViewer_List
MemberDef desc: the frames shown in the center splitter area
MemberDef name: docks
MemberDef type: DockViewer_List
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: currently docked windows -- removed if they undock
MethodDef name: NewBrowser
MethodDef desc: makes a standard 2-pane taBase browser
MethodDef proto MainWindowViewer_ptr NewBrowser(taBase* root, MemberDef* root_md = NULL, bool is_root = false)
MethodDef name: NewClassBrowser
MethodDef desc: convenience class: makes a 2-pane class browser (browse+panels)
MethodDef proto MainWindowViewer_ptr NewClassBrowser(void* root, TypeDef* root_typ, MemberDef* root_md = NULL)
MethodDef name: NewProjectBrowser
MethodDef desc: makes a standard 3-pane project viewer (3-view) or 2 (2x2) -- returns the guy with tree
MethodDef proto MainWindowViewer_ptr NewProjectBrowser(taProject* proj)
MethodDef name: NewProjectViewer
MethodDef desc: makes a standard 3d viewer, with panel (useful for more graphs, etc.)
MethodDef proto MainWindowViewer_ptr NewProjectViewer(taProject* proj)
MethodDef name: NewEditDialog
MethodDef desc: makes a 1-pane taBase window only showing the edit panels
MethodDef proto MainWindowViewer_ptr NewEditDialog(taBase* root)
MethodDef name: GetDefaultProjectBrowser
MethodDef desc: get the default pb for given project, or whatever one is current if NULL
MethodDef proto MainWindowViewer_ptr GetDefaultProjectBrowser(taProject* proj = NULL)
MethodDef name: GetDefaultProjectViewer
MethodDef desc: get the default pv for given project, or whatever one is current if NULL -- for 3-pane B==V for 2x2 B is the tree guy V is the T3 guy
MethodDef proto MainWindowViewer_ptr GetDefaultProjectViewer(taProject* proj = NULL)
MethodDef name: isDialog
MethodDef proto bool isDialog()
MethodDef name: isProjBrowser
MethodDef desc: main proj window with tree browser (always t for 3-pane guy)
MethodDef proto bool isProjBrowser()
MethodDef name: isProjViewer
MethodDef desc: main proj window with t3 guy (always t for 3-pane guy)
MethodDef proto bool isProjViewer()
MethodDef name: isProjShower
MethodDef desc: if a proj viewer or browser
MethodDef proto bool isProjShower()
MethodDef name: setBrowserViewer
MethodDef desc: use this to set the weird bits
MethodDef proto void setBrowserViewer(bool is_browser, bool is_viewer)
MethodDef name: AddDock
MethodDef desc: add the supplied dock
MethodDef proto void AddDock(DockViewer* dv)
MethodDef name: FindFrameByType
MethodDef desc: find the first frame and index of given type from the given starting index;
MethodDef proto FrameViewer_ptr FindFrameByType(TypeDef* typ, int&amp; at_index = no_idx, int from_index = 0)
MethodDef name: AddFrame
MethodDef desc: add the supplied frame
MethodDef proto void AddFrame(FrameViewer* fv, int at_index)
MethodDef name: AddFrameByType
MethodDef desc: add a new frame of given type at index (-1 at end); no window made yet
MethodDef proto FrameViewer_ptr AddFrameByType(TypeDef* typ, int at_index = -1)
MethodDef name: FindToolBarByType
MethodDef desc: finds existing toolbar by name and type; NULL if not found
MethodDef proto ToolBar_ptr FindToolBarByType(TypeDef* typ, const taString&amp; tb_name)
MethodDef name: AddToolBar
MethodDef desc: add a new toolbar; true if added (won&apos;t add a duplicate)
MethodDef proto bool AddToolBar(ToolBar* tb)
MethodDef name: AddToolBarByType
MethodDef desc: add a new toolbar by type; return inst if added (won&apos;t add a duplicate)
MethodDef proto ToolBar_ptr AddToolBarByType(TypeDef* typ, const taString&amp; tb_name)
MethodDef name: SelectPanelTabNo
MethodDef desc: select PanelViewer (middle edit panel) tab by number
MethodDef proto bool SelectPanelTabNo(int tab_no)
MethodDef name: SelectPanelTabName
MethodDef desc: select PanelViewer (middle edit panel) tab by name
MethodDef proto bool SelectPanelTabName(const taString&amp; tab_name)
MethodDef name: SelectT3ViewTabNo
MethodDef desc: select T3DataViewer (3d view) (right view panel) tab by number
MethodDef proto bool SelectT3ViewTabNo(int tab_no)
MethodDef name: SelectT3ViewTabName
MethodDef desc: select T3DataViewer (3d view) (right view panel) tab by name
MethodDef proto bool SelectT3ViewTabName(const taString&amp; tab_name)
MethodDef name: FileOptionsAction
MethodDef proto void FileOptionsAction()
MethodDef name: FilePrintAction
MethodDef proto void FilePrintAction()
MethodDef name: FileCloseAction
MethodDef desc: Quit Action(root) or Close Window Action(non-root)
MethodDef proto void FileCloseAction()
MethodDef opts [u'ACT', u'MM_&amp;File|&amp;Close', u'MENUGP_LAST', u'MENU_GP_FileClose']
MethodDef name: EditUndoAction
MethodDef proto void EditUndoAction()
MethodDef opts [u'ACT']
MethodDef name: EditRedoAction
MethodDef proto void EditRedoAction()
MethodDef opts [u'ACT']
MethodDef name: EditCutAction
MethodDef proto void EditCutAction()
MethodDef opts [u'ACT']
MethodDef name: EditCopyAction
MethodDef proto void EditCopyAction()
MethodDef opts [u'ACT']
MethodDef name: EditPasteAction
MethodDef proto void EditPasteAction()
MethodDef opts [u'ACT']
MethodDef name: EditFindAction
MethodDef proto void EditFindAction()
MethodDef opts [u'ACT']
MethodDef name: ViewRefreshAction
MethodDef desc: rebuild/refresh the current view
MethodDef proto void ViewRefreshAction()
MethodDef opts [u'ACT']
MethodDef name: HelpIndexAction
MethodDef proto void HelpIndexAction()
MethodDef opts [u'ACT']
MethodDef name: HelpContentsAction
MethodDef proto void HelpContentsAction()
MethodDef opts [u'ACT']
MethodDef name: HelpAboutAction
MethodDef proto void HelpAboutAction()
MethodDef opts [u'ACT']
MethodDef names [u'AddDock', u'AddFrame', u'AddFrameByType', u'AddToolBar', u'AddToolBarByType', u'EditCopyAction', u'EditCutAction', u'EditFindAction', u'EditPasteAction', u'EditRedoAction', u'EditUndoAction', u'FileCloseAction', u'FileOptionsAction', u'FilePrintAction', u'FindFrameByType', u'FindToolBarByType', u'GetDefaultProjectBrowser', u'GetDefaultProjectViewer', u'HelpAboutAction', u'HelpContentsAction', u'HelpIndexAction', u'NewBrowser', u'NewClassBrowser', u'NewEditDialog', u'NewProjectBrowser', u'NewProjectViewer', u'SelectPanelTabName', u'SelectPanelTabNo', u'SelectT3ViewTabName', u'SelectT3ViewTabNo', u'ViewRefreshAction', u'isDialog', u'isProjBrowser', u'isProjShower', u'isProjViewer', u'setBrowserViewer']
########################################################################
TypeDef len: 15
TypeDef name:  FrameViewer
TypeDef type: class
TypeDef desc: for views that can be in the splitter of a MainWindowViewer
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer']
TypeDef children: [u'BrowseViewer', u'PanelViewer', u'T3DataViewer']
MethodDef name: mainWindowViewer
MethodDef desc: void	InitLinks();
MethodDef proto MainWindowViewer_ptr mainWindowViewer()
MethodDef names [u'mainWindowViewer']
########################################################################
TypeDef len: 17
TypeDef name:  BrowseViewer
TypeDef type: class
TypeDef desc: the base type for browser frames (tree of objects or classes)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_Tree', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'FrameViewer']
TypeDef children: [u'tabBrowseViewer', u'ClassBrowseViewer']
MemberDef name: root_typ
MemberDef type: TypeDef*
MemberDef desc: type of the root item
MemberDef name: root_md
MemberDef type: MemberDef*
MemberDef desc: if the root item is a member, NULL otherwise
MethodDef name: root
MethodDef desc: subtype must supply
MethodDef proto void_ptr root()
MethodDef name: rootType
MethodDef proto TypeDef_ptr rootType()
MethodDef name: rootMemb
MethodDef proto MemberDef_ptr rootMemb()
MethodDef name: rootLink
MethodDef proto taiDataLink_ptr rootLink()
MethodDef names [u'root', u'rootLink', u'rootMemb', u'rootType']
########################################################################
TypeDef len: 13
TypeDef name:  tabBrowseViewer
TypeDef type: class
TypeDef desc: for browsing when root is a taBase
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_Tree', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'FrameViewer', u'BrowseViewer']
MemberDef name: m_root
MemberDef type: taSmartRef
########################################################################
TypeDef len: 13
TypeDef name:  ClassBrowseViewer
TypeDef type: class
TypeDef desc: represents a class browser instance
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_Tree', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'FrameViewer', u'BrowseViewer']
MethodDef name: setRoot
MethodDef desc: use this to set the root
MethodDef proto void setRoot(void* root, TypeDef* root_typ, MemberDef* root_md = NULL)
MethodDef names [u'setRoot']
########################################################################
TypeDef len: 11
TypeDef name:  PanelViewer
TypeDef type: class
TypeDef desc: the base type for browser frames (tree of objects or classes)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_Panels', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'FrameViewer']
########################################################################
TypeDef len: 9
TypeDef name:  ToolBoxRegistrar
TypeDef type: class
TypeDef desc: static class used to manage toolbar procs; instances used as static globals to register
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: instances
MethodDef proto ToolBoxRegistrar_PtrList_ptr instances()
MethodDef names [u'instances']
########################################################################
TypeDef len: 13
TypeDef name:  DataViewer_List
TypeDef type: class
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'NO_EXPAND_ALL', u'INSTANCE']
TypeDef parents: [u'DataView_List']
TypeDef children: [u'ToolBar_List', u'FrameViewer_List', u'DockViewer_List', u'T3DataViewFrame_List']
MethodDef name: GetWinState
MethodDef proto void GetWinState()
MethodDef name: SetWinState
MethodDef proto void SetWinState()
MethodDef names [u'GetWinState', u'SetWinState']
########################################################################
TypeDef len: 9
TypeDef name:  ToolBar_List
TypeDef type: class
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'NO_EXPAND_ALL', u'INSTANCE']
TypeDef parents: [u'DataView_List', u'DataViewer_List']
########################################################################
TypeDef len: 9
TypeDef name:  FrameViewer_List
TypeDef type: class
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'NO_EXPAND_ALL', u'INSTANCE']
TypeDef parents: [u'DataView_List', u'DataViewer_List']
########################################################################
TypeDef len: 9
TypeDef name:  DockViewer_List
TypeDef type: class
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'NO_EXPAND_ALL', u'INSTANCE']
TypeDef parents: [u'DataView_List', u'DataViewer_List']
########################################################################
TypeDef len: 11
TypeDef name:  ConsoleDockViewer
TypeDef type: class
TypeDef desc: encapsulates the console into a dock viewer window
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_Console', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'TopLevelViewer', u'DockViewer']
########################################################################
TypeDef len: 11
TypeDef name:  ToolBoxDockViewer
TypeDef type: class
TypeDef desc: floatable dockable toolbox window
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_ToolBox', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'TopLevelViewer', u'DockViewer']
########################################################################
TypeDef len: 5
TypeDef name:  ToolBoxRegistrar_PtrList
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 13
TypeDef name:  TreeDecorationSpec
TypeDef type: class
TypeDef desc: provides the color and other details for the named type of entry, ex &apos;comment&apos;
TypeDef cats:, []
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: text_color
MemberDef type: RGBA
MemberDef desc: void	UpdateAfterEdit();
########################################################################
TypeDef len: 7
TypeDef name:  TreeDecorationSpec_List
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 17
TypeDef name:  Program
TypeDef type: class
TypeDef desc: a structured gui-buildable program that generates css script code to actually run
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MULT_INHERIT', u'STEM_BASE', u'TOKENS', u'EXT_prog', u'FILETYPE_Program', u'INSTANCE']
TypeDef parents: [u'AbstractScriptBase', u'taBase', u'taOBase', u'taNBase']
EnumDef name: PF_NONE
EnumDef val: PF_NONE
EnumDef name: NO_STOP
EnumDef val: NO_STOP
EnumDef: this program cannot be stopped by Stop or Step buttons
EnumDef name: SHOW_STEP
EnumDef val: SHOW_STEP
EnumDef: show the step_prog in the ctrl panel (turn this off for programs that are not part of the overall main control hierarchy)
EnumDef name: STARTUP_RUN
EnumDef val: STARTUP_RUN
EnumDef: run this prgram at startup (after project is fully loaded and everything else has been initialized) -- if multiple programs are so marked, they will be run in the order they appear in the browser (depth first)
EnumDef name: RV_OK
EnumDef val: RV_OK
EnumDef: program finished successfully
EnumDef name: RV_COMPILE_ERR
EnumDef val: RV_COMPILE_ERR
EnumDef: script couldn&apos;t be compiled
EnumDef name: RV_CHECK_ERR
EnumDef val: RV_CHECK_ERR
EnumDef: program or its dependencies failed CheckConfig
EnumDef name: RV_INIT_ERR
EnumDef val: RV_INIT_ERR
EnumDef: initialization failed (note: user prog may use its own value)
EnumDef name: RV_RUNTIME_ERR
EnumDef val: RV_RUNTIME_ERR
EnumDef: misc runtime error (ex, null pointer ref, etc.)
EnumDef name: RV_PROG_CALL_FAILED
EnumDef val: RV_PROG_CALL_FAILED
EnumDef: a program call failed (probably an error in that program)
EnumDef name: RV_ALREADY_RUNNING
EnumDef val: RV_ALREADY_RUNNING
EnumDef: attempt to run a new program chain when a program chain is already running
EnumDef name: RV_NO_PROGRAM
EnumDef val: RV_NO_PROGRAM
EnumDef: no program was available to run
EnumDef name: DONE
EnumDef val: DONE
EnumDef: there is no program running or stopped; any previous run completed
EnumDef name: INIT
EnumDef val: INIT
EnumDef: program is running its init_code
EnumDef name: RUN
EnumDef val: RUN
EnumDef: program is running its prog_code
EnumDef name: STOP
EnumDef val: STOP
EnumDef: the program is stopped (note: NOT the same as &apos;DONE&apos;)
EnumDef name: NOT_INIT
EnumDef val: NOT_INIT
EnumDef: init has not yet been run
EnumDef name: USER_LIB
EnumDef val: USER_LIB
EnumDef: user&apos;s personal library
EnumDef name: SYSTEM_LIB
EnumDef val: SYSTEM_LIB
EnumDef: local system library
EnumDef name: WEB_LIB
EnumDef val: WEB_LIB
EnumDef: web-based library
EnumDef name: SEARCH_LIBS
EnumDef val: SEARCH_LIBS
EnumDef: search through the libraries (for loading)
EnumDef names: [u'ProgFlags', u'ProgLibs', u'ReturnVal', u'RunState']
MemberDef name: script_compiled
MemberDef type: bool
MemberDef opts [u'SHOW', u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: true when compiled
MemberDef name: prog_lib
MemberDef type: ProgLib*
MemberDef opts [u'NO_SHOW_TREE', u'NO_SAVE']
MemberDef cats []
MemberDef desc: library of available programs
MemberDef name: run_state
MemberDef type: Program::RunState
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: this program&apos;s run state
MemberDef name: stop_req
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: a stop was requested by someone -- stop at next chance
MemberDef name: step_mode
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: the program was run in step mode -- check for stepping
MemberDef name: tags
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: list of comma separated tags that indicate the basic function of this program -- should be listed in hierarchical order, with most important/general tags first, as this is how they will be sorted in the program library
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG', u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: description of what this program does and when it should be used (used for searching in prog_lib -- be thorough!)
MemberDef name: flags
MemberDef type: Program::ProgFlags
MemberDef desc: control flags, for display and execution control
MemberDef name: objs
MemberDef type: ProgObjList
MemberDef opts [u'TREEFILT_ProgGp']
MemberDef cats []
MemberDef desc: create persistent objects of any type here that are needed for the program -- each object will automatically create an associated variable
MemberDef name: types
MemberDef type: ProgType_List
MemberDef desc: user-defined types for this program (new enumerated types and class objects)
MemberDef name: args
MemberDef type: ProgVar_List
MemberDef desc: global variables that are parameters (arguments) for callers
MemberDef name: vars
MemberDef type: ProgVar_List
MemberDef desc: global variables accessible outside and inside script
MemberDef name: functions
MemberDef type: Function_List
MemberDef desc: function code (for defining subroutines): goes at top of script and can be called from init or prog code
MemberDef name: load_code
MemberDef type: ProgEl_List
MemberDef opts [u'EXPERT_TREE']
MemberDef cats []
MemberDef desc: load initialization code: run when the program is loaded from the program library or other external sources (does not appear in standard program -- is compiled and run in a separate css program space). Note: ProgramCall&apos;s are automatically initialized according to targ_ld_init_name
MemberDef name: init_code
MemberDef type: ProgEl_List
MemberDef desc: initialization code: run when the Init button is pressed
MemberDef name: prog_code
MemberDef type: ProgEl_List
MemberDef desc: program code: run when the Run/Step button is pressed: this is the main code
MemberDef name: m_stale
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: dirty bit -- needs to be public for activating the Compile button
MemberDef name: view_script
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: current view of script
MemberDef name: view_listing
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: current view of listing
MethodDef name: scriptSource
MethodDef desc: override this
MethodDef proto ScriptSource scriptSource()
MethodDef name: scriptFilename
MethodDef desc: override this
MethodDef proto const_taString scriptFilename()
MethodDef name: scriptString
MethodDef desc: override this
MethodDef proto const_taString scriptString()
MethodDef name: HasScript
MethodDef desc: returns true if we have some kind of script file or string to run
MethodDef proto bool HasScript()
MethodDef name: RunScript
MethodDef desc: run the script (returns false for no scr)
MethodDef proto bool RunScript()
MethodDef name: CompileScript
MethodDef desc: compile script from source into internal runnable format;
 &apos;true&apos; if compiled, &apos;false&apos; if not or if deferred due to being in readline
MethodDef proto bool CompileScript(bool force = false)
MethodDef opts [u'MENU', u'LABEL_Compile', u'MENU_ON_Actions', u'ARGC_0']
MethodDef name: StopScript
MethodDef desc: stops the running script
MethodDef proto void StopScript()
MethodDef name: CmdShellScript
MethodDef desc: set the css command shell to operate on this script, so that you can interact with (run, debug, etc) this script
MethodDef proto void CmdShellScript()
MethodDef opts [u'MENU', u'LABEL_CmdShell', u'MENU_ON_Actions']
MethodDef name: ExitShellScript
MethodDef desc: if this script is currently being operated on by the command shell (via CmdShell function), exit from that shell (shell returns to previous script it was operating on)
MethodDef proto void ExitShellScript()
MethodDef opts [u'MENU', u'LABEL_ExitShell', u'MENU_ON_Actions']
MethodDef name: SetProgFlag
MethodDef desc: set flag state on
MethodDef proto void SetProgFlag(Program::ProgFlags flg)
MethodDef opts [u'CAT_Flags']
MethodDef name: ClearProgFlag
MethodDef desc: clear flag state (set off)
MethodDef proto void ClearProgFlag(Program::ProgFlags flg)
MethodDef opts [u'CAT_Flags']
MethodDef name: HasProgFlag
MethodDef desc: check if flag is set
MethodDef proto bool HasProgFlag(Program::ProgFlags flg)
MethodDef opts [u'CAT_Flags']
MethodDef name: SetProgFlagState
MethodDef desc: set flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetProgFlagState(Program::ProgFlags flg, bool on)
MethodDef opts [u'CAT_Flags']
MethodDef name: setRunState
MethodDef desc: sets and updates gui
MethodDef proto void setRunState(Program::RunState value)
MethodDef name: ProgramListing
MethodDef desc: generate the listing of the program (NOT the underlying CSS code -- just the program)
MethodDef proto const_taString ProgramListing()
MethodDef opts [u'CAT_Code']
MethodDef name: Init
MethodDef desc: set the program state back to the beginning
MethodDef proto void Init()
MethodDef opts [u'BUTTON', u'GHOST_OFF_run_state:DONE,STOP,NOT_INIT', u'CAT_Run']
MethodDef name: Run
MethodDef desc: run the program
MethodDef proto void Run()
MethodDef opts [u'BUTTON', u'GHOST_OFF_run_state:DONE,STOP,NOT_INIT', u'CAT_Run']
MethodDef name: Step
MethodDef desc: step the program, at the previously selected step level (see SetAsStep or the program group control panel)
MethodDef proto void Step()
MethodDef opts [u'BUTTON', u'GHOST_OFF_run_state:DONE,STOP,NOT_INIT', u'CAT_Run']
MethodDef name: Stop
MethodDef desc: stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)
MethodDef proto void Stop()
MethodDef opts [u'BUTTON', u'GHOST_OFF_run_state:RUN', u'CAT_Run']
MethodDef name: Abort
MethodDef desc: stop the current program immediately, regardless of where it is
MethodDef proto void Abort()
MethodDef opts [u'BUTTON', u'GHOST_OFF_run_state:RUN', u'CAT_Run']
MethodDef name: StopCheck
MethodDef desc: calls event loop, then checks for STOP state, true if so
MethodDef proto bool StopCheck()
MethodDef opts [u'CAT_Run']
MethodDef name: SetAsStep
MethodDef desc: set this program as the step level for this set of programs -- this is the grain size of stepping when the Step button is pressed (for a higher-level program)
MethodDef proto void SetAsStep()
MethodDef opts [u'BUTTON', u'CAT_Run']
MethodDef name: Compile
MethodDef desc: generate and compile the script code that actually runs (if this button is available, you have changed something that needs to be recompiled)
MethodDef proto void Compile()
MethodDef opts [u'BUTTON', u'GHOST_ON_script_compiled:true', u'CAT_Code']
MethodDef name: CmdShell
MethodDef desc: set css command shell to operate on this program, so you can run, debug, etc this script from the command line
MethodDef proto void CmdShell()
MethodDef opts [u'BUTTON', u'GHOST_OFF_run_state:DONE,STOP', u'CAT_Code']
MethodDef name: ExitShell
MethodDef desc: exit the command shell for this program (shell returns to previous script)
MethodDef proto void ExitShell()
MethodDef opts [u'BUTTON', u'GHOST_OFF_run_state:DONE,STOP', u'CAT_Code']
MethodDef name: UpdateCallerArgs
MethodDef desc: run UpdateArgs on all the other programs that call me, and also display all these calls in the Find dialog (searching on this program&apos;s name) so you can make sure the args are correct for each such program
MethodDef proto void UpdateCallerArgs()
MethodDef opts [u'BUTTON', u'CAT_Code']
MethodDef name: Call
MethodDef desc: runs the program as a subprogram called from another running program, 0=success
MethodDef proto int Call(Program* caller)
MethodDef opts [u'CAT_Run']
MethodDef name: CallInit
MethodDef desc: runs the program&apos;s Init from a superProg Init, 0=success
MethodDef proto int CallInit(Program* caller)
MethodDef opts [u'CAT_Run']
MethodDef name: SetVar
MethodDef desc: set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program
MethodDef proto bool SetVar(const taString&amp; var_nm, const Variant&amp; value)
MethodDef opts [u'CAT_Variables']
MethodDef name: SetVarFmArg
MethodDef desc: set the value of a program variable (using SetVar) based on the value of startup argument arg_nm -- typically called from startup scripts -- displays information about variable set if !quiet
MethodDef proto bool SetVarFmArg(const taString&amp; arg_nm, const taString&amp; var_nm, bool quiet = false)
MethodDef opts [u'CAT_Variables']
MethodDef name: GetVar
MethodDef desc: get the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program
MethodDef proto Variant GetVar(const taString&amp; var_nm)
MethodDef opts [u'CAT_Variables']
MethodDef name: HasVar
MethodDef desc: EXPERT true if has a var/arg called var_nm (only top-level variables in vars or args) -- can be called from within a running program
MethodDef proto bool HasVar(const taString&amp; var_nm)
MethodDef opts [u'CAT_Variables']
MethodDef name: Reset
MethodDef desc: reset (remove) all program elements -- typically in preparation for loading a new program over this one
MethodDef proto void Reset()
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT', u'MENU_SEP_BEFORE', u'CONFIRM', u'CAT_Code']
MethodDef name: SaveToProgLib
MethodDef desc: save the program to given program library -- file name = object name -- be sure to add good desc comments!!
MethodDef proto void SaveToProgLib(Program::ProgLibs library = USER_LIB)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT', u'CAT_ProgLib']
MethodDef name: LoadFromProgLib
MethodDef desc: (re)load the program from the program library element of given type
MethodDef proto void LoadFromProgLib(ProgLibEl* prog_type)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT', u'FROM_GROUP_prog_lib', u'ARG_VAL_FM_FUN', u'CAT_ProgLib']
MethodDef name: RunLoadInitCode
MethodDef desc: Run the initialization code for object pointer variables and program calls -- to resolve pointers after loading
MethodDef proto void RunLoadInitCode()
MethodDef opts [u'CAT_Run']
MethodDef name: FindVarName
MethodDef desc: find given variable within this program -- NULL if not found
MethodDef proto ProgVar_ptr FindVarName(const taString&amp; var_nm)
MethodDef opts [u'CAT_Find']
MethodDef name: FindTypeName
MethodDef desc: find given type name (e.g., dynamic enum type or value) on list
MethodDef proto taBase_ptr FindTypeName(const taString&amp; nm)
MethodDef opts [u'CAT_Find']
MethodDef name: FindProgramName
MethodDef desc: find program of given name, first looking within the group that this program belongs in, and then looking for all programs within the project. if warn_not_found, then issue a warning if not found
MethodDef proto Program_ptr FindProgramName(const taString&amp; prog_nm, bool warn_not_found = false)
MethodDef opts [u'CAT_Find']
MethodDef name: FindProgramNameContains
MethodDef desc: find program whose name contains given name, first looking within the group that this program belongs in, and then looking for all programs within the project. if warn_not_found, then issue a warning if not found
MethodDef proto Program_ptr FindProgramNameContains(const taString&amp; prog_nm, bool warn_not_found = false)
MethodDef opts [u'CAT_Find']
MethodDef name: SaveScript
MethodDef desc: save the css script generated by the program to a file
MethodDef proto void SaveScript(ostream&amp; strm)
MethodDef opts [u'MENU', u'MENU_ON_Script', u'MENU_CONTEXT', u'BUTTON', u'CAT_File']
MethodDef name: ViewScript
MethodDef desc: view the css script generated by the program
MethodDef proto void ViewScript()
MethodDef opts [u'MENU', u'MENU_CONTEXT', u'BUTTON', u'NO_BUSY', u'CAT_Code']
MethodDef name: ViewScript_Editor
MethodDef desc: open css script in editor defined by taMisc::edit_cmd -- saves to a file based on name of object first
MethodDef proto void ViewScript_Editor()
MethodDef opts [u'MENU', u'MENU_CONTEXT', u'BUTTON', u'CAT_Code']
MethodDef name: SaveListing
MethodDef desc: save the program listing to a file
MethodDef proto void SaveListing(ostream&amp; strm)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'MENU_CONTEXT', u'BUTTON', u'CAT_Code']
MethodDef name: ViewListing
MethodDef desc: view the listing of the program
MethodDef proto void ViewListing()
MethodDef opts [u'MENU', u'MENU_CONTEXT', u'BUTTON', u'NO_BUSY', u'CAT_Code']
MethodDef name: ViewListing_Editor
MethodDef desc: open listing of the program in editor defined by taMisc::edit_cmd -- saves to a file based on name of object first
MethodDef proto void ViewListing_Editor()
MethodDef opts [u'MENU', u'MENU_CONTEXT', u'BUTTON', u'CAT_Code']
MethodDef name: SelectCtrlFunsForEdit
MethodDef desc: add the program control functions (Init, Run, Step, Stop) to a select edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected
MethodDef proto bool SelectCtrlFunsForEdit(SelectEdit* editor, const taString&amp; extra_label)
MethodDef opts [u'MENU', u'MENU_ON_SelectEdit', u'NULL_OK_0', u'NULL_TEXT_0_NewEditor', u'CAT_Display']
MethodDef names [u'Abort', u'Call', u'CallInit', u'ClearProgFlag', u'CmdShell', u'CmdShellScript', u'Compile', u'CompileScript', u'ExitShell', u'ExitShellScript', u'FindProgramName', u'FindProgramNameContains', u'FindTypeName', u'FindVarName', u'GetVar', u'HasProgFlag', u'HasScript', u'HasVar', u'Init', u'LoadFromProgLib', u'ProgramListing', u'Reset', u'Run', u'RunLoadInitCode', u'RunScript', u'SaveListing', u'SaveScript', u'SaveToProgLib', u'SelectCtrlFunsForEdit', u'SetAsStep', u'SetProgFlag', u'SetProgFlagState', u'SetVar', u'SetVarFmArg', u'Step', u'Stop', u'StopCheck', u'StopScript', u'UpdateCallerArgs', u'ViewListing', u'ViewListing_Editor', u'ViewScript', u'ViewScript_Editor', u'scriptFilename', u'scriptSource', u'scriptString', u'setRunState']
########################################################################
TypeDef len: 15
TypeDef name:  ProgLibEl
TypeDef type: class
TypeDef desc: an element in the program library
TypeDef cats:, [u'Program']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: is_group
MemberDef type: bool
MemberDef desc: this is a group of related programs
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of what this program does and when it should be used
MemberDef name: tags
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: list of comma-separated tags describing function of program
MemberDef name: lib_name
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: name of library that contains this program
MemberDef name: URL
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: full URL to find this program
MemberDef name: filename
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: file name given to this program
MemberDef name: date
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: last modify date for this program
MethodDef name: NewProgram
MethodDef desc: create a new program of this type (return value could be a Program or a Program_Group)
MethodDef proto taBase_ptr NewProgram(Program_Group* new_owner)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT']
MethodDef name: LoadProgram
MethodDef desc: load into given program; true if loaded, false if not
MethodDef proto bool LoadProgram(Program* prog)
MethodDef name: LoadProgramGroup
MethodDef desc: load into given program; true if loaded, false if not
MethodDef proto bool LoadProgramGroup(Program_Group* prog_gp)
MethodDef name: ParseProgFile
MethodDef desc: get program information from program or program group file. is_group is set based on extension of file name (.prog or .progp)
MethodDef proto bool ParseProgFile(const taString&amp; fnm, const taString&amp; path)
MethodDef name: ParseTags
MethodDef desc: parse list of tags into tags_array
MethodDef proto void ParseTags()
MethodDef names [u'LoadProgram', u'LoadProgramGroup', u'NewProgram', u'ParseProgFile', u'ParseTags']
########################################################################
TypeDef len: 17
TypeDef name:  ProgType
TypeDef type: class
TypeDef desc: a program type -- base class for defining new types within a program
TypeDef cats:, [u'Program']
TypeDef opts:, [u'STEM_BASE', u'NO_INSTANCE', u'VIRT_BASE', u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'DynEnumType']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: Description of this type
MethodDef name: GenCssType
MethodDef desc: type name
MethodDef proto const_taString GenCssType()
MethodDef name: GenCss
MethodDef desc: generate css code
MethodDef proto const_taString GenCss(int indent_level)
MethodDef name: GenListing
MethodDef desc: generate listing of program
MethodDef proto const_taString GenListing(int indent_level)
MethodDef name: FindTypeName
MethodDef desc: find given type name (e.g., dynamic enum type or value) on variable
MethodDef proto taBase_ptr FindTypeName(const taString&amp; nm)
MethodDef names [u'FindTypeName', u'GenCss', u'GenCssType', u'GenListing']
########################################################################
TypeDef len: 15
TypeDef name:  DynEnumType
TypeDef type: class
TypeDef desc: dynamic enumerated type -- user-definable list of labeled values that make code easier to read and write
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'NO_UPDATE_AFTER', u'DEF_CHILD_enums', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'ProgType']
MemberDef name: enums
MemberDef type: DynEnumItem_List
MemberDef desc: enumerated values for this type
MemberDef name: bits
MemberDef type: bool
MemberDef desc: each item represents a separate bit value, which can be orthogonally set from each other, instead of mutually exclusive alternatives
MethodDef name: NewEnum
MethodDef desc: create a new enum item
MethodDef proto DynEnumItem_ptr NewEnum()
MethodDef opts [u'BUTTON']
MethodDef name: AddEnum
MethodDef desc: add a new enum item with given name/label and value
MethodDef proto DynEnumItem_ptr AddEnum(const taString&amp; nm, int val)
MethodDef name: SeqNumberItems
MethodDef desc: assign values to items sequentially, starting with given first value
MethodDef proto void SeqNumberItems(int first_val = 0)
MethodDef opts [u'BUTTON']
MethodDef name: CopyToAllProgs
MethodDef desc: copy this type information to all programs that have an enum with this same name in their types section -- provides a convenient way to update when multiple programs use the same dynamic enum types
MethodDef proto bool CopyToAllProgs()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: FindNumIdx
MethodDef desc: find index of given numerical value
MethodDef proto int FindNumIdx(int val)
MethodDef name: FindNameIdx
MethodDef desc: find index of given name value
MethodDef proto int FindNameIdx(const taString&amp; nm)
MethodDef names [u'AddEnum', u'CopyToAllProgs', u'FindNameIdx', u'FindNumIdx', u'NewEnum', u'SeqNumberItems']
########################################################################
TypeDef len: 11
TypeDef name:  ProgType_List
TypeDef type: class
TypeDef desc: list of script variables
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'CHILDREN_INLINE', u'INSTANCE']
MethodDef name: GenCss
MethodDef desc: generate css script code for the context
MethodDef proto const_taString GenCss(int indent_level)
MethodDef name: GenListing
MethodDef desc: generate the listing of program
MethodDef proto const_taString GenListing(int indent_level)
MethodDef name: NewDynEnum
MethodDef desc: create a new DynEnumType (shortcut)
MethodDef proto DynEnumType_ptr NewDynEnum()
MethodDef opts [u'BUTTON', u'MENU_CONTEXT']
MethodDef name: FindTypeName
MethodDef desc: find given type name (e.g., dynamic enum type or value) on list
MethodDef proto taBase_ptr FindTypeName(const taString&amp; nm)
MethodDef names [u'FindTypeName', u'GenCss', u'GenListing', u'NewDynEnum']
########################################################################
TypeDef len: 13
TypeDef name:  DynEnumItem
TypeDef type: class
TypeDef desc: dynamic enumerated type value (name and numerical int value)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: value
MemberDef type: int
MemberDef desc: numerical (integer) value of this enum
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of item
########################################################################
TypeDef len: 11
TypeDef name:  DynEnumItem_List
TypeDef type: class
TypeDef desc: list of dynamic enumerated type items
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'CHILDREN_INLINE', u'SCOPE_Program', u'INSTANCE']
MethodDef name: FindNumIdx
MethodDef desc: find index of given numerical value
MethodDef proto int FindNumIdx(int val)
MethodDef name: FindNameIdx
MethodDef desc: find index of given name value
MethodDef proto int FindNameIdx(const taString&amp; nm)
MethodDef name: OrderItems
MethodDef desc: ensure that the item values are sequentially increasing
MethodDef proto void OrderItems()
MethodDef name: El_Compare_
MethodDef proto int El_Compare_(const void* a, const void* b)
MethodDef names [u'El_Compare_', u'FindNameIdx', u'FindNumIdx', u'OrderItems']
########################################################################
TypeDef len: 15
TypeDef name:  DynEnum
TypeDef type: class
TypeDef desc: dynamic enumerated value -- represents one item from a list of enumerated alternative labeled values
TypeDef cats:, [u'Program']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: enum_type
MemberDef type: DynEnumTypeRef
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: enum type information (list of enum labels)
MemberDef name: value
MemberDef type: int
MemberDef opts [u'APPLY_IMMED', u'DYNENUM_ON_enum_type']
MemberDef cats []
MemberDef desc: current value, which for normal mutually-exclusive options is index into list of enums (-1 = not set), and for bits is the bit values
MethodDef name: IsSet
MethodDef desc: check whether there is a value set (enum_type is set and value &gt;= 0)
MethodDef proto bool IsSet()
MethodDef name: NumVal
MethodDef desc: current numerical (integer) value of enum (-1 = no value set)
MethodDef proto int NumVal()
MethodDef name: NameVal
MethodDef desc: current name (string) value of enum (&apos;&apos; = no value set)
MethodDef proto const_taString NameVal()
MethodDef name: SetNumVal
MethodDef desc: set current enum value by numerical value (for bits mode, literally set value); false (and error msg) if not found
MethodDef proto bool SetNumVal(int val)
MethodDef name: SetNameVal
MethodDef desc: set current enum value by name (for bits mode, set bit for name); false (and error msg) if not found
MethodDef proto bool SetNameVal(const taString&amp; nm)
MethodDef name: ClearBitName
MethodDef desc: only for bits type, clear bit with given name
MethodDef proto bool ClearBitName(const taString&amp; val)
MethodDef names [u'ClearBitName', u'IsSet', u'NameVal', u'NumVal', u'SetNameVal', u'SetNumVal']
########################################################################
TypeDef len: 17
TypeDef name:  ProgVar
TypeDef type: class
TypeDef desc: a program variable, accessible from the outer system, and inside the script in .vars and args
TypeDef cats:, [u'Program']
TypeDef opts:, [u'INLINE', u'STEM_BASE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: T_Int
EnumDef val: T_Int
EnumDef: integer
EnumDef name: T_Real
EnumDef val: T_Real
EnumDef: real-valued number (double precision)
EnumDef name: T_String
EnumDef val: T_String
EnumDef: string of characters
EnumDef name: T_Bool
EnumDef val: T_Bool
EnumDef: boolean true/false
EnumDef name: T_Object
EnumDef val: T_Object
EnumDef: pointer to a C++ (hard coded) object -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program&apos;s .objs, then the name will be automatically set
EnumDef name: T_HardEnum
EnumDef val: T_HardEnum
EnumDef: enumerated list of options (existing C++ hard-coded one)
EnumDef name: T_DynEnum
EnumDef val: T_DynEnum
EnumDef: enumerated list of labeled options (from a dynamically created list)
EnumDef name: PV_NONE
EnumDef val: PV_NONE
EnumDef name: CTRL_PANEL
EnumDef val: CTRL_PANEL
EnumDef: show this variable in the control panel
EnumDef name: CTRL_READ_ONLY
EnumDef val: CTRL_READ_ONLY
EnumDef: variable is read only (display but not edit) in the control panel
EnumDef name: NULL_CHECK
EnumDef val: NULL_CHECK
EnumDef: complain if object variable is null during checkconfig (e.g., will get assigned during run)
EnumDef name: LOCAL_VAR
EnumDef val: LOCAL_VAR
EnumDef: this is a local variable which does not set or update values!
EnumDef name: FUN_ARG
EnumDef val: FUN_ARG
EnumDef: this is a function argument variable
EnumDef name: USED
EnumDef val: USED
EnumDef: whether this variable is currently being used in the program (set automatically)
EnumDef names: [u'VarFlags', u'VarType']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of the variable
MemberDef name: var_type
MemberDef type: ProgVar::VarType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: type of variable -- determines which xxx_val(s) is/are used
MemberDef name: int_val
MemberDef type: int
MemberDef opts [u'CONDSHOW_ON_var_type:T_Int,T_HardEnum', u'CONDEDIT_OFF_flags:LOCAL_VAR']
MemberDef cats []
MemberDef desc: integer value (also for enum types)
MemberDef name: real_val
MemberDef type: double
MemberDef opts [u'CONDSHOW_ON_var_type:T_Real', u'CONDEDIT_OFF_flags:LOCAL_VAR']
MemberDef cats []
MemberDef desc: real value
MemberDef name: string_val
MemberDef type: taString
MemberDef opts [u'CONDSHOW_ON_var_type:T_String', u'CONDEDIT_OFF_flags:LOCAL_VAR', u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: string value
MemberDef name: bool_val
MemberDef type: bool
MemberDef opts [u'CONDSHOW_ON_var_type:T_Bool', u'CONDEDIT_OFF_flags:LOCAL_VAR']
MemberDef cats []
MemberDef desc: boolean value
MemberDef name: object_type
MemberDef type: TypeDef*
MemberDef opts [u'APPLY_IMMED', u'CONDSHOW_ON_var_type:T_Object', u'NO_NULL', u'TYPE_taBase', u'LABEL_min_type']
MemberDef cats []
MemberDef desc: the minimum acceptable type of the object
MemberDef name: object_val
MemberDef type: taBaseRef
MemberDef opts [u'CONDSHOW_ON_var_type:T_Object', u'CONDEDIT_OFF_flags:LOCAL_VAR', u'TYPE_ON_object_type', u'SCOPE_taProject']
MemberDef cats []
MemberDef desc: object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program&apos;s .objs, then the name will be automatically set
MemberDef name: hard_enum_type
MemberDef type: TypeDef*
MemberDef opts [u'APPLY_IMMED', u'CONDSHOW_ON_var_type:T_HardEnum', u'ENUM_TYPE', u'TYPE_taBase', u'LABEL_enum_type']
MemberDef cats []
MemberDef desc: type information for hard enum (value goes in int_val)
MemberDef name: dyn_enum_val
MemberDef type: DynEnum
MemberDef opts [u'CONDSHOW_ON_var_type:T_DynEnum', u'LABEL_']
MemberDef cats []
MemberDef desc: dynamic enum value
MemberDef name: flags
MemberDef type: ProgVar::VarFlags
MemberDef desc: flags controlling various things about how the variable appears and is used
MemberDef name: reference
MemberDef type: bool
MemberDef opts [u'CONDSHOW_ON_flags:FUN_ARG']
MemberDef cats []
MemberDef desc: make this a reference variable (only for function arguments) which allows the function to modify the argument value, making it in effect a return value from the function when you need multiple return values
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: Description of what this variable is for
MethodDef name: schemaChanged
MethodDef desc: true if schema for most recent change differed from prev change
MethodDef proto bool schemaChanged()
MethodDef name: GenCssType
MethodDef desc: type name
MethodDef proto const_taString GenCssType()
MethodDef name: GenCssInitVal
MethodDef desc: intial value
MethodDef proto const_taString GenCssInitVal()
MethodDef name: GenCss
MethodDef desc: css code (terminated if Var);
MethodDef proto const_taString GenCss(bool is_arg = false)
MethodDef name: GenListing
MethodDef desc: generate listing of program
MethodDef proto const_taString GenListing(bool is_arg = false, int indent_level = 0)
MethodDef name: SetInt
MethodDef desc: set variable type to INT and set value
MethodDef proto void SetInt(int val)
MethodDef name: SetReal
MethodDef desc: set variable type to REAL and set value
MethodDef proto void SetReal(double val)
MethodDef name: SetString
MethodDef desc: set variable type to STRING and set value
MethodDef proto void SetString(const taString&amp; val)
MethodDef name: SetBool
MethodDef desc: set variable type to BOOL and set value
MethodDef proto void SetBool(bool val)
MethodDef name: SetObject
MethodDef desc: set variable type to OBJECT and set value
MethodDef proto void SetObject(taBase* val)
MethodDef opts [u'DROP1']
MethodDef name: SetHardEnum
MethodDef desc: set variable type to HARD_ENUM and set value
MethodDef proto void SetHardEnum(TypeDef* enum_type, int val)
MethodDef name: SetDynEnum
MethodDef desc: set variable type to DYN_ENUM and set value
MethodDef proto void SetDynEnum(int val)
MethodDef name: SetDynEnumName
MethodDef desc: // set variable type to DYN_ENUM and set value
MethodDef proto void SetDynEnumName(const taString&amp; val)
MethodDef name: SetVar
MethodDef desc: set from variant value (general purpose variable setting) -- does not change type of variable, just sets from variant value
MethodDef proto void SetVar(const Variant&amp; value)
MethodDef name: GetVar
MethodDef desc: get value as a variant value -- for hard-code use of the variable value
MethodDef proto Variant GetVar()
MethodDef name: SetVarFlag
MethodDef desc: set flag state on
MethodDef proto void SetVarFlag(ProgVar::VarFlags flg)
MethodDef name: ClearVarFlag
MethodDef desc: clear flag state (set off)
MethodDef proto void ClearVarFlag(ProgVar::VarFlags flg)
MethodDef name: HasVarFlag
MethodDef desc: check if flag is set
MethodDef proto bool HasVarFlag(ProgVar::VarFlags flg)
MethodDef name: SetVarFlagState
MethodDef desc: set flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetVarFlagState(ProgVar::VarFlags flg, bool on)
MethodDef names [u'ClearVarFlag', u'GenCss', u'GenCssInitVal', u'GenCssType', u'GenListing', u'GetVar', u'HasVarFlag', u'SetBool', u'SetDynEnum', u'SetDynEnumName', u'SetHardEnum', u'SetInt', u'SetObject', u'SetReal', u'SetString', u'SetVar', u'SetVarFlag', u'SetVarFlagState', u'schemaChanged']
########################################################################
TypeDef len: 13
TypeDef name:  ProgVar_List
TypeDef type: class
TypeDef desc: list of script variables
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'CHILDREN_INLINE', u'INSTANCE']
EnumDef name: VC_ProgVars
EnumDef val: VC_ProgVars
EnumDef: program variables
EnumDef name: VC_FuncArgs
EnumDef val: VC_FuncArgs
EnumDef: function arguments
EnumDef names: [u'VarContext']
MethodDef name: GenCss
MethodDef desc: generate css script code for the context
MethodDef proto const_taString GenCss(int indent_level)
MethodDef name: GenListing
MethodDef desc: generate listing of program
MethodDef proto const_taString GenListing(int indent_level)
MethodDef name: AddVarTo
MethodDef desc: add a var to the given object
MethodDef proto void AddVarTo(taNBase* src)
MethodDef opts [u'DROPN']
MethodDef name: CreateDataColVars
MethodDef desc: create column variables for given database object (only for scalar vals -- not matrix ones)
MethodDef proto void CreateDataColVars(DataTable* src)
MethodDef opts [u'DROP1', u'BUTTON']
MethodDef name: FindVarType
MethodDef desc: find first variable of given type (if hard enum or object type, td specifies type of object to find if not null)
MethodDef proto ProgVar_ptr FindVarType(ProgVar::VarType vart, TypeDef* td = NULL)
MethodDef names [u'AddVarTo', u'CreateDataColVars', u'FindVarType', u'GenCss', u'GenListing']
########################################################################
TypeDef len: 11
TypeDef name:  ProgVarRef_List
TypeDef type: class
TypeDef desc: list of program variable references
TypeDef cats:, [u'Program']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'CHILDREN_INLINE']
MethodDef name: FindVar
MethodDef desc: return ref pointing to given var pointer (NULL if not found)
MethodDef proto ProgVarRef_ptr FindVar(ProgVar* var, int&amp; idx = no_index)
MethodDef name: FindVarName
MethodDef desc: return ref pointing to given var name (NULL if not found)
MethodDef proto ProgVarRef_ptr FindVarName(const taString&amp; var_nm, int&amp; idx = no_index)
MethodDef name: UpdatePointers_NewPar
MethodDef desc: lst_own is the owner of this list
MethodDef proto int UpdatePointers_NewPar(taBase* lst_own, taBase* old_par, taBase* new_par)
MethodDef name: UpdatePointers_NewParType
MethodDef desc: lst_own is the owner of this list
MethodDef proto int UpdatePointers_NewParType(taBase* lst_own, TypeDef* par_typ, taBase* new_par)
MethodDef name: UpdatePointers_NewObj
MethodDef desc: lst_own is the owner of this list
MethodDef proto int UpdatePointers_NewObj(taBase* lst_own, taBase* ptr_owner, taBase* old_ptr, taBase* new_ptr)
MethodDef names [u'FindVar', u'FindVarName', u'UpdatePointers_NewObj', u'UpdatePointers_NewPar', u'UpdatePointers_NewParType']
########################################################################
TypeDef len: 19
TypeDef name:  ProgExprBase
TypeDef type: class
TypeDef desc: an expression in a program -- manages variable references so they are always updated when program variables change -- base doesn&apos;t have any lookup functionality
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'ProgExpr']
EnumDef name: PE_NONE
EnumDef val: PE_NONE
EnumDef name: NO_VAR_ERRS
EnumDef val: NO_VAR_ERRS
EnumDef: do not generate error messages for variables that cannot be found (e.g., for more complex expressions that might create local variables)
EnumDef name: FULL_STMT
EnumDef val: FULL_STMT
EnumDef: expression is full css statement(s), not just isolated expressions -- this affects how the parsing works
EnumDef name: FOR_LOOP_EXPR
EnumDef val: FOR_LOOP_EXPR
EnumDef: expression is an initializer or increment for a for loop -- requires different parsing due to possibility of commas..
EnumDef names: [u'ExprFlags']
MemberDef name: expr
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG', u'EDIT_WIDTH_40', u'LABEL_']
MemberDef cats []
MemberDef desc: enter the expression here -- use Ctrl-L to pull up a lookup dialog for members, methods, types, etc -- or you can just type in names of program variables or literal values. enclose strings in double quotes. variable names will be checked and automatically updated
MethodDef name: SetExpr
MethodDef desc: set to use given expression -- calls ParseExpr followed by UpdateAfterEdit_impl
MethodDef proto bool SetExpr(const taString&amp; ex)
MethodDef name: cssExtParseFun_pre
MethodDef desc: external parsing function for css: pre for initial parsing
MethodDef proto int cssExtParseFun_pre(void* udata, const char* nm, cssElPtr&amp; el_ptr)
MethodDef name: cssExtParseFun_post
MethodDef desc: external parsing function for css: post if nothing else gets it (bad var)
MethodDef proto int cssExtParseFun_post(void* udata, const char* nm, cssElPtr&amp; el_ptr)
MethodDef name: ParseExpr
MethodDef desc: parse the current expr for variables and update vars and var_expr accordingly (returns false if there are some bad_vars)
MethodDef proto bool ParseExpr()
MethodDef name: GetFullExpr
MethodDef desc: get full expression with variable names substituted appropriately
MethodDef proto taString GetFullExpr()
MethodDef name: SetExprFlag
MethodDef desc: set flag state on
MethodDef proto void SetExprFlag(ProgExprBase::ExprFlags flg)
MethodDef name: ClearExprFlag
MethodDef desc: clear flag state (set off)
MethodDef proto void ClearExprFlag(ProgExprBase::ExprFlags flg)
MethodDef name: HasExprFlag
MethodDef desc: check if flag is set
MethodDef proto bool HasExprFlag(ProgExprBase::ExprFlags flg)
MethodDef name: SetExprFlagState
MethodDef desc: set flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetExprFlagState(ProgExprBase::ExprFlags flg, bool on)
MethodDef name: UpdateProgExpr_NewOwner
MethodDef desc: update program expression after it has been moved/copied to a new owner -- this will identify any variables that are not present in the new program and copy them from the old owner -- must be called before messing with any of the vars progvarref&apos;s pointers (should be a copy/same as prior ones)
MethodDef proto void UpdateProgExpr_NewOwner()
MethodDef names [u'ClearExprFlag', u'GetFullExpr', u'HasExprFlag', u'ParseExpr', u'SetExpr', u'SetExprFlag', u'SetExprFlagState', u'UpdateProgExpr_NewOwner', u'cssExtParseFun_post', u'cssExtParseFun_pre']
########################################################################
TypeDef len: 15
TypeDef name:  ProgExpr
TypeDef type: class
TypeDef desc: an expression in a program -- manages variable references so they are always updated when program variables change -- includes variable lookup functions
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgExprBase']
MemberDef name: var_lookup
MemberDef type: ProgVar*
MemberDef opts [u'APPLY_IMMED', u'NULL_OK', u'NO_SAVE', u'NO_EDIT', u'NO_UPDATE_POINTER', u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: lookup a program variable and add it to the current expression (this field then returns to empty/NULL)
MemberDef name: enum_lookup
MemberDef type: DynEnumItem*
MemberDef opts [u'APPLY_IMMED', u'NULL_OK', u'NO_SAVE', u'NO_EDIT', u'NO_UPDATE_POINTER']
MemberDef cats []
MemberDef desc: lookup a dynamic enum variable and add it to the current expression (this field then returns to empty/NULL)
MethodDef name: StdProgVarFilter
MethodDef desc: generic progvar filter -- excludes variables from functions if not itself in same function -- use this for most progvars in ITEM_FILTER comment directive
MethodDef proto bool StdProgVarFilter(void* base, void* var)
MethodDef names [u'StdProgVarFilter']
########################################################################
TypeDef len: 11
TypeDef name:  ProgExpr_List
TypeDef type: class
TypeDef desc: list of program expressions
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'CHILDREN_INLINE', u'INSTANCE']
MethodDef name: UpdateProgExpr_NewOwner
MethodDef desc: calls UpdateProgExpr_NewOwner() on all the prog expr&apos;s in the list
MethodDef proto void UpdateProgExpr_NewOwner()
MethodDef names [u'UpdateProgExpr_NewOwner']
########################################################################
TypeDef len: 15
TypeDef name:  ProgArg
TypeDef type: class
TypeDef desc: a program or method argument
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: arg_type
MemberDef type: TypeDef*
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: typedef of the target arg, where available
MemberDef name: type
MemberDef type: taString
MemberDef opts [u'SHOW', u'READ_ONLY']
MemberDef cats []
MemberDef desc: the type of the argument (automatically set from the target function)
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'SHOW', u'READ_ONLY']
MemberDef cats []
MemberDef desc: the name of the argument (automatically set from the target function)
MemberDef name: required
MemberDef type: bool
MemberDef opts [u'SHOW', u'READ_ONLY']
MemberDef cats []
MemberDef desc: if a value is required (i.e., it is not a default argument)
MemberDef name: def_val
MemberDef type: taString
MemberDef opts [u'SHOW', u'READ_ONLY']
MemberDef cats []
MemberDef desc: for default arguments, what will get passed by default -- this is for reference only (leave expr blank for default)
MemberDef name: expr
MemberDef type: ProgExpr
MemberDef desc: the expression to compute and pass as the argument
MethodDef name: UpdateFromVar
MethodDef desc: updates our type information given variable that we apply to -- returns true if any changes
MethodDef proto bool UpdateFromVar(const ProgVar&amp; cp)
MethodDef name: UpdateFromType
MethodDef desc: updates our type information from method typedef that we apply to -- returns true if any changes
MethodDef proto bool UpdateFromType(TypeDef* td)
MethodDef names [u'UpdateFromType', u'UpdateFromVar']
########################################################################
TypeDef len: 11
TypeDef name:  ProgArg_List
TypeDef type: class
TypeDef desc: list of arguments
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'CHILDREN_INLINE', u'INSTANCE']
MethodDef name: UpdateFromVarList
MethodDef desc: update our list of args based on target variable list -- returns true if updated
MethodDef proto bool UpdateFromVarList(ProgVar_List&amp; targ)
MethodDef name: UpdateFromMethod
MethodDef desc: update our list of args based on method def arguments -- returns true if updated
MethodDef proto bool UpdateFromMethod(MethodDef* md)
MethodDef name: GenCssBody_impl
MethodDef proto const_taString GenCssBody_impl(int indent_level)
MethodDef name: UpdateProgExpr_NewOwner
MethodDef desc: calls UpdateProgExpr_NewOwner() on all the prog expr&apos;s in the list
MethodDef proto void UpdateProgExpr_NewOwner()
MethodDef names [u'GenCssBody_impl', u'UpdateFromMethod', u'UpdateFromVarList', u'UpdateProgExpr_NewOwner']
########################################################################
TypeDef len: 19
TypeDef name:  ProgEl
TypeDef type: class
TypeDef desc: base class for a program element
TypeDef cats:, [u'Program']
TypeDef opts:, [u'NO_INSTANCE', u'VIRT_BASE', u'STEM_BASE', u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'ProgramCall', u'Loop', u'StaticMethodCall', u'Function', u'FunctionCall', u'CodeBlock', u'ProgVars', u'UserScript', u'IfContinue', u'IfBreak', u'IfReturn', u'If', u'IfGuiPrompt', u'Switch', u'AssignExpr', u'VarIncr', u'MethodCall', u'MemberProgEl', u'PrintVar', u'PrintExpr', u'Comment', u'StopStepPoint', u'ReturnExpr', u'OtherProgramVar', u'ProgVarFmArg', u'DataColsFmArgs', u'RegisterArgs', u'DataOneProg', u'DataSrcDestProg', u'NetBaseProgEl', u'SetUnitsLit', u'SetUnitsVar']
EnumDef name: PEF_NONE
EnumDef val: PEF_NONE
EnumDef name: OFF
EnumDef val: OFF
EnumDef: inactivated: does not generate code
EnumDef name: NON_STD
EnumDef val: NON_STD
EnumDef: non-standard: not part of the standard code for this program -- a special purpose modification (just for user information/highlighting)
EnumDef name: NEW_EL
EnumDef val: NEW_EL
EnumDef: new element: this element was recently added to the program (just for user information/highlighting)
EnumDef name: QUIET
EnumDef val: QUIET
EnumDef: suppress warnings for this el -- useful when the normally helpful standard warnings are annoying in a specific case
EnumDef names: [u'ProgFlags']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG', u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: optional brief description of element&apos;s function; included as comment in script
MemberDef name: flags
MemberDef type: ProgEl::ProgFlags
MemberDef desc: flags for modifying program element function or providing information about the status of this program element
MethodDef name: StdProgVarFilter
MethodDef desc: generic progvar filter -- excludes variables from functions if not itself in same function -- use this for most progvars in ITEM_FILTER comment directive
MethodDef proto bool StdProgVarFilter(void* base, void* var)
MethodDef name: ObjProgVarFilter
MethodDef desc: Object* progvar filter -- only shows Object* items -- use in ITEM_FILTER comment directive
MethodDef proto bool ObjProgVarFilter(void* base, void* var)
MethodDef name: DataProgVarFilter
MethodDef desc: data table* progvar filter -- only shows DataTable* items -- use in ITEM_FILTER comment directive
MethodDef proto bool DataProgVarFilter(void* base, void* var)
MethodDef name: DynEnumProgVarFilter
MethodDef desc: DynEnum progvar filter -- only shows DynEnum items -- use in ITEM_FILTER comment directive
MethodDef proto bool DynEnumProgVarFilter(void* base, void* var)
MethodDef name: parent
MethodDef proto ProgEl_ptr parent()
MethodDef name: program
MethodDef proto Program_ptr program()
MethodDef name: PreGen
MethodDef desc: recursive walk of items before code gen; each item bumps its id and calls subitems; esp. used to discover subprogs in order
MethodDef proto void PreGen(int&amp; item_id)
MethodDef name: GenCss
MethodDef desc: generate the Css code for this object (usually override _impl&apos;s)
MethodDef proto const_taString GenCss(int indent_level = 0)
MethodDef name: GenListing
MethodDef desc: generate a listing of the program
MethodDef proto const_taString GenListing(int indent_level = 0)
MethodDef name: SetProgFlag
MethodDef desc: set flag state on
MethodDef proto void SetProgFlag(ProgEl::ProgFlags flg)
MethodDef name: ClearProgFlag
MethodDef desc: clear flag state (set off)
MethodDef proto void ClearProgFlag(ProgEl::ProgFlags flg)
MethodDef name: HasProgFlag
MethodDef desc: check if flag is set
MethodDef proto bool HasProgFlag(ProgEl::ProgFlags flg)
MethodDef name: SetProgFlagState
MethodDef desc: set flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetProgFlagState(ProgEl::ProgFlags flg, bool on)
MethodDef name: SetNonStdFlag
MethodDef desc: set non standard flag to given state: indicates that this is not part of the standard code for this program -- a special purpose modification (just for user information/highlighting)
MethodDef proto void SetNonStdFlag(bool non_std)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT']
MethodDef name: SetNewElFlag
MethodDef desc: set new element flag to given state: this element was recently added to the program (just for user information/highlighting)
MethodDef proto void SetNewElFlag(bool new_el)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT']
MethodDef name: FindVarName
MethodDef desc: find given variable within this program element -- NULL if not found
MethodDef proto ProgVar_ptr FindVarName(const taString&amp; var_nm)
MethodDef name: SetProgExprFlags
MethodDef desc: special temporary function to set flags for any ProgExpr objects -- needed for new css parsing and loading of old projects which saved these flags causes errors, so this fixes that.. todo: remove me after a few releases (introduced in 4.0.10)
MethodDef proto void SetProgExprFlags()
MethodDef names [u'ClearProgFlag', u'DataProgVarFilter', u'DynEnumProgVarFilter', u'FindVarName', u'GenCss', u'GenListing', u'HasProgFlag', u'ObjProgVarFilter', u'PreGen', u'SetNewElFlag', u'SetNonStdFlag', u'SetProgExprFlags', u'SetProgFlag', u'SetProgFlagState', u'StdProgVarFilter', u'parent', u'program']
########################################################################
TypeDef len: 15
TypeDef name:  ProgramCall
TypeDef type: class
TypeDef desc: call (run) another program, setting any arguments before hand
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_prog_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: target
MemberDef type: ProgramRef
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: the program to be called
MemberDef name: targ_ld_init
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: name(s) of target programs to search for to set this target pointer when program is loaded from program library or other external sources -- if not found, a warning message is emitted. if empty, it defaults to name of current target. use commas to separate multiple options (tried in order) and an * indicates use the &apos;contains&apos; searching function (not full regexp support yet)
MemberDef name: prog_args
MemberDef type: ProgArg_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: arguments to the program--copied to prog before call
MethodDef name: UpdateArgs
MethodDef desc: updates the arguments based on the target args (also automatically called in updateafteredit)
MethodDef proto void UpdateArgs()
MethodDef opts [u'BUTTON']
MethodDef name: GetTarget
MethodDef desc: safe call to get target: emits error if target is null (used by program)
MethodDef proto Program_ptr GetTarget()
MethodDef name: SetTarget
MethodDef proto void SetTarget(Program* target)
MethodDef opts [u'DROP1']
MethodDef name: LoadInitTarget
MethodDef desc: initialize target based on targ_ld_init information
MethodDef proto bool LoadInitTarget()
MethodDef name: LoadInitTarget_impl
MethodDef desc: initialize target based on targ_ld_init information
MethodDef proto bool LoadInitTarget_impl(const taString&amp; nm)
MethodDef names [u'GetTarget', u'LoadInitTarget', u'LoadInitTarget_impl', u'SetTarget', u'UpdateArgs']
########################################################################
TypeDef len: 11
TypeDef name:  ProgEl_List
TypeDef type: class
TypeDef desc: list of program elements: a block of code
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'TREEFILT_ProgGp', u'INSTANCE']
MethodDef name: PreGen
MethodDef desc: iterates over all items
MethodDef proto void PreGen(int&amp; item_id)
MethodDef name: GenCss
MethodDef desc: generate the Css code for this object
MethodDef proto const_taString GenCss(int indent_level = 0)
MethodDef name: GenListing
MethodDef desc: generate the listing of this program
MethodDef proto const_taString GenListing(int indent_level = 0)
MethodDef name: FindVarName
MethodDef desc: find given variable within this progel list -- NULL if not found
MethodDef proto ProgVar_ptr FindVarName(const taString&amp; var_nm)
MethodDef names [u'FindVarName', u'GenCss', u'GenListing', u'PreGen']
########################################################################
TypeDef len: 17
TypeDef name:  Loop
TypeDef type: class
TypeDef desc: base class for loops
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'WhileLoop', u'DoLoop', u'ForLoop', u'DataLoop', u'NetGroupedDataLoop']
MemberDef name: loop_code
MemberDef type: ProgEl_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: the items to execute in the loop
MethodDef name: AddLoopCode
MethodDef desc: add a new loop code element
MethodDef proto ProgEl_ptr AddLoopCode(TypeDef* el_type)
MethodDef opts [u'BUTTON', u'TYPE_ProgEl']
MethodDef names [u'AddLoopCode']
########################################################################
TypeDef len: 15
TypeDef name:  StaticMethodCall
TypeDef type: class
TypeDef desc: call a static method (member function) on a type
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'MathCall', u'RandomCall', u'MiscCall', u'DataProcCall', u'DataAnalCall', u'DataGenCall', u'ImageProcCall']
MemberDef name: result_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: result variable (optional -- can be NULL)
MemberDef name: object_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_ON_min_type', u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: The object type to look for methods on
MemberDef name: method
MemberDef type: MethodDef*
MemberDef opts [u'TYPE_ON_object_type', u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: the method to call
MemberDef name: meth_args
MemberDef type: ProgArg_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: arguments to be passed to the method
########################################################################
TypeDef len: 15
TypeDef name:  Function
TypeDef type: class
TypeDef desc: a user-defined function that can be called within the program where it is defined -- must live in the functions of a Program, not in init_code or prog_code
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: return_val
MemberDef type: ProgVar
MemberDef desc: The return value of the function -- used only for determining the type
MemberDef name: name
MemberDef type: taString
MemberDef desc: The function name
MemberDef name: args
MemberDef type: ProgVar_List
MemberDef desc: The arguments to the function
MemberDef name: fun_code
MemberDef type: ProgEl_List
MemberDef desc: the function code (list of program elements)
MethodDef name: UpdateCallerArgs
MethodDef desc: run UpdateArgs on all the function calls to me, and also display all these calls in the Find dialog (searching on this function&apos;s name) so you can make sure the args are correct for each call
MethodDef proto void UpdateCallerArgs()
MethodDef opts [u'BUTTON', u'CAT_Code']
MethodDef names [u'UpdateCallerArgs']
########################################################################
TypeDef len: 11
TypeDef name:  Function_List
TypeDef type: class
TypeDef desc: list of functions defined within a program
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'TREEFILT_ProgGp', u'INSTANCE']
MethodDef name: PreGen
MethodDef desc: iterates over all items
MethodDef proto void PreGen(int&amp; item_id)
MethodDef name: GenCss
MethodDef desc: generate the Css code for this object
MethodDef proto const_taString GenCss(int indent_level = 0)
MethodDef name: GenListing
MethodDef desc: generate the listing of this program
MethodDef proto const_taString GenListing(int indent_level = 0)
MethodDef name: FindVarName
MethodDef desc: find given variable within this progel list -- NULL if not found
MethodDef proto ProgVar_ptr FindVarName(const taString&amp; var_nm)
MethodDef names [u'FindVarName', u'GenCss', u'GenListing', u'PreGen']
########################################################################
TypeDef len: 15
TypeDef name:  FunctionCall
TypeDef type: class
TypeDef desc: call a function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_fun_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: result_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: where to store the result (return value) of the function (optional -- can be NULL)
MemberDef name: fun
MemberDef type: FunctionRef
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: the function to be called
MemberDef name: fun_args
MemberDef type: ProgArg_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: arguments to the function: passed when called
MethodDef name: UpdateArgs
MethodDef desc: updates the argument list based on the function being called
MethodDef proto void UpdateArgs()
MethodDef opts [u'BUTTON']
MethodDef names [u'UpdateArgs']
########################################################################
TypeDef len: 13
TypeDef name:  ProgObjList
TypeDef type: class
TypeDef desc: A list of program objects (just a taBase list with proper update actions to update variables associated with objects)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase_List']
MethodDef name: NewDataTable
MethodDef desc: make new DataTable object(s) for local use in Program
MethodDef proto DataTable_ptr NewDataTable(int n_tables = 1)
MethodDef opts [u'BUTTON']
MethodDef name: GetVarsForObjs
MethodDef desc: automatically create variables for objects in parent program
MethodDef proto void GetVarsForObjs()
MethodDef names [u'GetVarsForObjs', u'NewDataTable']
########################################################################
TypeDef len: 9
TypeDef name:  Program_List
TypeDef type: class
TypeDef desc: a list of programs
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  ProgLibEl_List
TypeDef type: class
TypeDef desc: list of program library elements
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'CHILDREN_INLINE', u'INSTANCE']
TypeDef children: [u'ProgLib']
########################################################################
TypeDef len: 15
TypeDef name:  ProgLib
TypeDef type: class
TypeDef desc: the program library
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'CHILDREN_INLINE', u'INLINE', u'INSTANCE']
TypeDef parents: [u'ProgLibEl_List']
MemberDef name: not_init
MemberDef type: bool
MemberDef desc: list has not been initialized yet
MethodDef name: FindPrograms
MethodDef desc: search paths to find all available programs
MethodDef proto void FindPrograms()
MethodDef name: NewProgram
MethodDef desc: create a new program in new_owner of given type (return value could be a Program or a Program_Group); new_owner is group where program will be created
MethodDef proto taBase_ptr NewProgram(ProgLibEl* prog_type, Program_Group* new_owner)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT', u'NO_SAVE_ARG_VAL']
MethodDef name: NewProgramFmName
MethodDef desc: create a new program (lookup by name) (return value could be a Program or a Program_Group, or NULL if not found); new_owner is group where program will be created
MethodDef proto taBase_ptr NewProgramFmName(const taString&amp; prog_nm, Program_Group* new_owner)
MethodDef names [u'FindPrograms', u'NewProgram', u'NewProgramFmName']
########################################################################
TypeDef len: 13
TypeDef name:  Program_Group
TypeDef type: class
TypeDef desc: a collection of programs sharing common global variables and a control panel interface
TypeDef cats:, [u'Program']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'EXT_progp', u'FILETYPE_ProgramGroup', u'INSTANCE']
MemberDef name: step_prog
MemberDef type: ProgramRef
MemberDef desc: the program that will be stepped when the Step button is pressed
MemberDef name: tags
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: list of comma separated tags that indicate the basic function of this program -- should be listed in hierarchical order, with most important/general tags first, as this is how they will be sorted in the program library
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of what this program group does and when it should be used (used for searching in prog_lib -- be thorough!)
MethodDef name: NewFromLib
MethodDef desc: create a new program from a library of existing program types
MethodDef proto taBase_ptr NewFromLib(ProgLibEl* prog_type)
MethodDef opts [u'BUTTON', u'MENU_CONTEXT', u'FROM_GROUP_prog_lib', u'NO_SAVE_ARG_VAL', u'CAT_Program']
MethodDef name: NewFromLibByName
MethodDef desc: create a new program from a library of existing program types, looking up by name (NULL if name not found)
MethodDef proto taBase_ptr NewFromLibByName(const taString&amp; prog_nm)
MethodDef opts [u'CAT_Program']
MethodDef name: SaveToProgLib
MethodDef desc: save the program group to given program library -- file name = object name -- be sure to add good desc comments!!
MethodDef proto void SaveToProgLib(Program::ProgLibs library = Program::USER_LIB)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT', u'CAT_Program']
MethodDef name: LoadFromProgLib
MethodDef desc: (re)load the program from the program library element of given type
MethodDef proto void LoadFromProgLib(ProgLibEl* prog_type)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT', u'FROM_GROUP_prog_lib', u'ARG_VAL_FM_FUN', u'CAT_Program']
MethodDef name: RunStartupProgs
MethodDef desc: run programs marked as STARTUP_RUN -- typically only done by system at startup -- returns true if any run
MethodDef proto bool RunStartupProgs()
MethodDef name: SetProgsStale
MethodDef desc: set all progs in this group/subgroup to be dirty
MethodDef proto void SetProgsStale()
MethodDef names [u'LoadFromProgLib', u'NewFromLib', u'NewFromLibByName', u'RunStartupProgs', u'SaveToProgLib', u'SetProgsStale']
########################################################################
TypeDef len: 11
TypeDef name:  ProgramToolBar
TypeDef type: class
TypeDef desc: thin subclass to define custom tb for Programs
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'ToolBar']
########################################################################
TypeDef len: 17
TypeDef name:  CodeBlock
TypeDef type: class
TypeDef desc: a block of code (list of program elements), each executed in sequence
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'CaseBlock']
MemberDef name: prog_code
MemberDef type: ProgEl_List
MemberDef desc: list of Program elements: the block of code
MethodDef name: AddProgCode
MethodDef desc: add a new program code element
MethodDef proto ProgEl_ptr AddProgCode(TypeDef* el_type)
MethodDef opts [u'BUTTON', u'TYPE_ProgEl']
MethodDef names [u'AddProgCode']
########################################################################
TypeDef len: 15
TypeDef name:  ProgVars
TypeDef type: class
TypeDef desc: local program variables -- these variables do NOT use or update the values that are shown -- they exist only as script variables (unlike global args and vars)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_local_vars', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: local_vars
MemberDef type: ProgVar_List
MemberDef desc: the list of variables -- these variables do NOT update their values as shown here -- they exist only as script variables (unlike global args and vars)
MethodDef name: AddVar
MethodDef desc: add a new variable
MethodDef proto ProgVar_ptr AddVar()
MethodDef opts [u'BUTTON']
MethodDef names [u'AddVar']
########################################################################
TypeDef len: 15
TypeDef name:  UserScript
TypeDef type: class
TypeDef desc: a user-defined css script (can access all program variables, etc)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: script
MemberDef type: ProgExpr
MemberDef desc: the css (C++ syntax) code to be executed
MethodDef name: ImportFromFile
MethodDef desc: import script from file
MethodDef proto void ImportFromFile(istream&amp; strm)
MethodDef opts [u'MENU_ON_Object', u'MENU_CONTEXT', u'BUTTON', u'EXT_css']
MethodDef name: ImportFromFileName
MethodDef desc: import script from file
MethodDef proto void ImportFromFileName(const taString&amp; fnm)
MethodDef name: ExportToFile
MethodDef desc: export script to file
MethodDef proto void ExportToFile(ostream&amp; strm)
MethodDef opts [u'MENU_ON_Object', u'MENU_CONTEXT', u'BUTTON', u'EXT_css']
MethodDef name: ExportToFileName
MethodDef desc: export script to file
MethodDef proto void ExportToFileName(const taString&amp; fnm)
MethodDef names [u'ExportToFile', u'ExportToFileName', u'ImportFromFile', u'ImportFromFileName']
########################################################################
TypeDef len: 13
TypeDef name:  WhileLoop
TypeDef type: class
TypeDef desc: Repeat loop_code while loop_test expression is true (test first): while(loop_test) do loop_code
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop']
MemberDef name: test
MemberDef type: ProgExpr
MemberDef desc: a test expression for whether to continue looping (e.g., &apos;i &lt; max&apos;)
########################################################################
TypeDef len: 13
TypeDef name:  DoLoop
TypeDef type: class
TypeDef desc: Do loop_code repatedly while loop_test expression is true (test-after): do loop_code while(loop_test);
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop']
MemberDef name: test
MemberDef type: ProgExpr
MemberDef desc: a test expression for whether to continue looping (e.g., &apos;i &lt; max&apos;)
########################################################################
TypeDef len: 13
TypeDef name:  ForLoop
TypeDef type: class
TypeDef desc: Standard C &apos;for loop&apos; over loop_code: for(init_expr; loop_test; loop_iter) loop_code
 -- runs the init_expr, then does loop_code and the loop_iter expression, and continues if loop_test is true
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop']
MemberDef name: init
MemberDef type: ProgExprBase
MemberDef desc: initialization expression (e.g., &apos;i=0&apos; -- can also declare a new variable, but you won&apos;t be able to access it in other program code)
MemberDef name: test
MemberDef type: ProgExprBase
MemberDef desc: a test expression for whether to continue looping (e.g., &apos;i &lt; max&apos;)
MemberDef name: iter
MemberDef type: ProgExprBase
MemberDef desc: the iteration operation run after each loop (e.g., increment the loop variable; &apos;i++&apos;)
########################################################################
TypeDef len: 13
TypeDef name:  IfContinue
TypeDef type: class
TypeDef desc: if condition is true, continue looping (skip any following code and loop back to top of loop)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: cond
MemberDef type: ProgExpr
MemberDef desc: conditionalizing expression for continuing loop
########################################################################
TypeDef len: 13
TypeDef name:  IfBreak
TypeDef type: class
TypeDef desc: if condition is true, break out of current loop
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: cond
MemberDef type: ProgExpr
MemberDef desc: conditionalizing expression for breaking loop
########################################################################
TypeDef len: 13
TypeDef name:  IfReturn
TypeDef type: class
TypeDef desc: if condition is true, return (from void function or stop further execution of code or init segments of Program)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: cond
MemberDef type: ProgExpr
MemberDef desc: conditionalizing expression for returning
########################################################################
TypeDef len: 15
TypeDef name:  If
TypeDef type: class
TypeDef desc: a conditional test element: if(condition) then true_code
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'IfElse']
MemberDef name: cond
MemberDef type: ProgExpr
MemberDef desc: condition expression to test for true or false
MemberDef name: true_code
MemberDef type: ProgEl_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: items to execute if condition true
########################################################################
TypeDef len: 13
TypeDef name:  IfElse
TypeDef type: class
TypeDef desc: a conditional test element: if(condition) then true_code; else false_code
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'If']
MemberDef name: false_code
MemberDef type: ProgEl_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: items to execute if condition false
########################################################################
TypeDef len: 15
TypeDef name:  IfGuiPrompt
TypeDef type: class
TypeDef desc: if in gui mode, prompt user prior to performing a given operation -- if user says OK then run the code, otherwise do nothing -- if not in gui mode (e.g., running in batch mode) then always run the code -- allows interactive control over otherwise default operations
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'WtInitPrompt']
MemberDef name: prompt
MemberDef type: taString
MemberDef desc: prompt to display to user in gui mode
MemberDef name: yes_label
MemberDef type: taString
MemberDef desc: label to display for the Yes/Ok answer
MemberDef name: no_label
MemberDef type: taString
MemberDef desc: label to display for the No/Cancel answer
MemberDef name: yes_code
MemberDef type: ProgEl_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: items to execute if user says Yes/Ok to prompt in gui mode, or to always execute in nogui mode
########################################################################
TypeDef len: 13
TypeDef name:  CaseBlock
TypeDef type: class
TypeDef desc: one case element of a switch: if switch variable is equal to case_val, then this chunk of code is run
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'CodeBlock']
MemberDef name: case_val
MemberDef type: ProgExpr
MemberDef desc: value of the switch variable -- if switch_var is equal to this, then this code is run (must use literal expression here) -- if case_val is empty, then this represents the default case (run when no other case matches)
########################################################################
TypeDef len: 15
TypeDef name:  Switch
TypeDef type: class
TypeDef desc: switches execution based on the value of given variable -- each case expression is matched to a corresponding case_code item one-to-one
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: switch_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: variable to switch on
MemberDef name: cases
MemberDef type: ProgEl_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: variable value and code to execute for each case (list of CaseBlock objects)
MethodDef name: NewCase
MethodDef desc: make a new case item
MethodDef proto void NewCase()
MethodDef opts [u'BUTTON']
MethodDef name: CasesFmEnum
MethodDef desc: add all the cases for an enumerated type (switch_var must be either HARD_ENUM or DYN_ENUM)
MethodDef proto void CasesFmEnum()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef names [u'CasesFmEnum', u'NewCase']
########################################################################
TypeDef len: 13
TypeDef name:  AssignExpr
TypeDef type: class
TypeDef desc: assign an expression to a variable (use method call for simple assignment to function call)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: result_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: where to store the result of the expression (the variable)
MemberDef name: expr
MemberDef type: ProgExpr
MemberDef desc: expression to assign to variable
########################################################################
TypeDef len: 13
TypeDef name:  VarIncr
TypeDef type: class
TypeDef desc: increment a variable&apos;s value by given amount
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: variable to increment
MemberDef name: expr
MemberDef type: ProgExpr
MemberDef desc: expression for how much to add to variable (use a negative sign to decrement)
########################################################################
TypeDef len: 13
TypeDef name:  MethodCall
TypeDef type: class
TypeDef desc: call a method (member function) on an object
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: result_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: where to store the result of the method call (optional -- can be NULL)
MemberDef name: obj
MemberDef type: ProgVarRef
MemberDef opts [u'APPLY_IMMED', u'ITEM_FILTER_ObjProgVarFilter']
MemberDef cats []
MemberDef desc: program variable that points to the object with the method to call
MemberDef name: method
MemberDef type: MethodDef*
MemberDef opts [u'TYPE_ON_obj_type', u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: the method to call on object obj
MemberDef name: meth_args
MemberDef type: ProgArg_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: arguments to be passed to the method
MemberDef name: meth_sig
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: signature of the method, for reference
MemberDef name: meth_desc
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: description of the method, for reference
########################################################################
TypeDef len: 17
TypeDef name:  MemberProgEl
TypeDef type: class
TypeDef desc: base class for dealing with members of objects
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'MemberAssign', u'MemberFmArg', u'MemberMethodCall']
MemberDef name: obj
MemberDef type: ProgVarRef
MemberDef opts [u'APPLY_IMMED', u'ITEM_FILTER_ObjProgVarFilter']
MemberDef cats []
MemberDef desc: program variable that points to the object with the method to call
MemberDef name: path
MemberDef type: taString
MemberDef desc: path to the member -- can just be member name (use Ctrl+L or member_lookup to lookup and enter here) -- you can also enter in multiple sub-path elements for object members that themselves have members
MemberDef name: member_lookup
MemberDef type: MemberDef*
MemberDef opts [u'TYPE_ON_obj_type', u'APPLY_IMMED', u'NULL_OK', u'NO_SAVE', u'NO_EDIT', u'NO_UPDATE_POINTER']
MemberDef cats []
MemberDef desc: lookup a member name -- after you choose, it will copy the name into the path and reset this lookup to NULL
MethodDef name: GetTypeFromPath
MethodDef desc: get obj_type from current path (also gives warnings about bad paths unless quiet = true)
MethodDef proto bool GetTypeFromPath(bool quiet = false)
MethodDef names [u'GetTypeFromPath']
########################################################################
TypeDef len: 13
TypeDef name:  MemberAssign
TypeDef type: class
TypeDef desc: set a member (attribute) on an object to a value given by an expression
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'MemberProgEl']
MemberDef name: expr
MemberDef type: ProgExpr
MemberDef desc: the expression to compute and assign to the member
MemberDef name: update_after
MemberDef type: bool
MemberDef desc: call UpdateAfterEdit after setting the member: useful for updating displays and triggering other computations based on changed value, but this comes at a performance cost
########################################################################
TypeDef len: 13
TypeDef name:  MemberFmArg
TypeDef type: class
TypeDef desc: set a member (attribute) on an object to a value given by a startup argument passed to overall program when it was run -- if argument was not set by user, nothing happens. IMPORTANT: must also include a RegisterArgs program element BEFORE this item in the program code to register this argument and process the command list
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'MemberProgEl']
MemberDef name: arg_name
MemberDef type: taString
MemberDef desc: argument name -- this will be passed on the command line as &lt;arg_name&gt;=&lt;value&gt; (no spaces) (e.g., if arg_name is &apos;rate&apos; then command line would be rate=0.01 and internal arg name is just &apos;rate&apos; -- can be accessed using taMisc arg functions using that name)
MemberDef name: update_after
MemberDef type: bool
MemberDef desc: call UpdateAfterEdit after setting the member: useful for updating displays and triggering other computations based on changed value, but this comes at a performance cost
MemberDef name: quiet
MemberDef type: bool
MemberDef desc: do not emit a message when arg is set and member value is assigned (otherwise, informational msg is printed -- useful for startup code output)
########################################################################
TypeDef len: 13
TypeDef name:  MemberMethodCall
TypeDef type: class
TypeDef desc: call a method on a member of an object
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'MemberProgEl']
MemberDef name: result_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: where to store the result of the method call (optional -- can be NULL)
MemberDef name: method
MemberDef type: MethodDef*
MemberDef opts [u'TYPE_ON_obj_type', u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: the method to call on object obj-&gt;path
MemberDef name: meth_args
MemberDef type: ProgArg_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: arguments to be passed to the method
########################################################################
TypeDef len: 11
TypeDef name:  MathCall
TypeDef type: class
TypeDef desc: call a taMath function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'StaticMethodCall']
########################################################################
TypeDef len: 11
TypeDef name:  RandomCall
TypeDef type: class
TypeDef desc: call a Random number generation function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'StaticMethodCall']
########################################################################
TypeDef len: 11
TypeDef name:  MiscCall
TypeDef type: class
TypeDef desc: call a taMisc function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'StaticMethodCall']
########################################################################
TypeDef len: 13
TypeDef name:  PrintVar
TypeDef type: class
TypeDef desc: print out (to the console) the value of variable(s) -- useful for debugging
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: message
MemberDef type: taString
MemberDef desc: initial message to print (do NOT include quotes!)
MemberDef name: print_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: print out (to console) the value of this variable
MemberDef name: print_var2
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: print out (to console) the value of this variable
MemberDef name: print_var3
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: print out (to console) the value of this variable
MemberDef name: print_var4
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: print out (to console) the value of this variable
MemberDef name: print_var5
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: print out (to console) the value of this variable
MemberDef name: print_var6
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: print out (to console) the value of this variable
########################################################################
TypeDef len: 13
TypeDef name:  PrintExpr
TypeDef type: class
TypeDef desc: print out (to the console) an expression -- e.g., an informational message for the user
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: expr
MemberDef type: ProgExpr
MemberDef desc: print out (to console) this expression -- it just does &apos;cerr &lt;&lt; expr &lt;&lt; endl;&apos; so you can put multiple &lt;&lt; segments in the expression to print out multiple things -- you DO need to include quotes around strings!
########################################################################
TypeDef len: 11
TypeDef name:  Comment
TypeDef type: class
TypeDef desc: insert a highlighted (possibly) multi-line comment -- useful for describing an upcoming chunk of code
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
########################################################################
TypeDef len: 11
TypeDef name:  StopStepPoint
TypeDef type: class
TypeDef desc: this is a point in the program where the Stop button will stop execution, and the Step button will act for single stepping (e.g., place inside of a loop) -- otherwise this only happens at the end of programs
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
########################################################################
TypeDef len: 13
TypeDef name:  ReturnExpr
TypeDef type: class
TypeDef desc: return from a function with a given expression (can be empty to return from a void function) -- you can return from the code or init segments of a program to end execution at that point
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: expr
MemberDef type: ProgExpr
MemberDef desc: expression to return from function with (can be empty to return from a void function)
########################################################################
TypeDef len: 15
TypeDef name:  OtherProgramVar
TypeDef type: class
TypeDef desc: A program element for exchanging variable information between programs -- variables must have the same names in both programs
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: other_prog
MemberDef type: ProgramRef
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: the other program with variables that you want to get or set
MemberDef name: set_other
MemberDef type: bool
MemberDef desc: if true, values in other program are set from our variable values, otherwise our variables get values from those in other program
MemberDef name: var_1
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of variable in other program!
MemberDef name: var_2
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of variable in other program!
MemberDef name: var_3
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of variable in other program!
MemberDef name: var_4
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of variable in other program!
MethodDef name: GetOtherProg
MethodDef desc: safe call to get other program: emits error if other_prog is null (used by program)
MethodDef proto Program_ptr GetOtherProg()
MethodDef names [u'GetOtherProg']
########################################################################
TypeDef len: 15
TypeDef name:  ProgVarFmArg
TypeDef type: class
TypeDef desc: sets a variable (vars or args) in a program from a startup command-line argument (if arg was not set by user, nothing happens). IMPORTANT: must also include a RegisterArgs program element BEFORE this item in the program code to register this argument and process the command list
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: prog
MemberDef type: ProgramRef
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: program that you want to set variable from argument in
MemberDef name: var_name
MemberDef type: taString
MemberDef desc: name of variable in program to set
MemberDef name: arg_name
MemberDef type: taString
MemberDef desc: argument name -- this will be passed on the command line as &lt;arg_name&gt;=&lt;value&gt; (no spaces) (e.g., if arg_name is &apos;rate&apos; then command line would be rate=0.01 and internal arg name is just &apos;rate&apos; -- can be accessed using taMisc arg functions using that name)
MethodDef name: GetOtherProg
MethodDef desc: safe call to get other program: emits error if other_prog is null (used by program)
MethodDef proto Program_ptr GetOtherProg()
MethodDef names [u'GetOtherProg']
########################################################################
TypeDef len: 17
TypeDef name:  DataColsFmArgs
TypeDef type: class
TypeDef desc: sets column value(s) in a data table based on startup arguments of the same name as the column -- row in data table to set values in is specified by a program variable (which can itself be previously set by an argument)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
EnumDef name: CUR_ROW
EnumDef val: CUR_ROW
EnumDef: use the current row (i.e., the last one added or specifically set by Read or Write operation)
EnumDef name: ROW_NUM
EnumDef val: ROW_NUM
EnumDef: row_var variable contains the row number to operate on
EnumDef name: ROW_VAL
EnumDef val: ROW_VAL
EnumDef: row_var variable contains a value that is used to find the row number by searching within data table column with the same name as the row_var variable
EnumDef names: [u'RowType']
MemberDef name: data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to data table with columns that are to be set from startup args
MemberDef name: row_spec
MemberDef type: DataColsFmArgs::RowType
MemberDef desc: how the row number within data table is specified
MemberDef name: row_var
MemberDef type: ProgVarRef
MemberDef opts [u'CONDEDIT_OFF_row_spec:CUR_ROW', u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable containing information about which row to operate on (depends on row_spec for what this information is)
MethodDef name: GetData
MethodDef desc: get actual data table pointer from variable
MethodDef proto DataTable_ptr GetData()
MethodDef names [u'GetData']
########################################################################
TypeDef len: 11
TypeDef name:  RegisterArgs
TypeDef type: class
TypeDef desc: register command-line arguments for any MemberFmArg, ProgVarFmArg DataColsFmArgs program elements contained in the prog_code of the program that this item appears in. calls taMisc::UpdateArgs(), so any any other taMisc::AddArgName MiscCall&apos;s placed before this will also be processed
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
########################################################################
TypeDef len: 11
TypeDef name:  CellRange
TypeDef type: class
TypeDef desc: specifies a range of cells
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: row_fr
MemberDef type: int
MemberDef name: col_fr
MemberDef type: int
MemberDef name: row_to
MemberDef type: int
MemberDef name: col_to
MemberDef type: int
MethodDef name: empty
MethodDef proto bool empty()
MethodDef name: nonempty
MethodDef proto bool nonempty()
MethodDef name: height
MethodDef proto int height()
MethodDef name: width
MethodDef proto int width()
MethodDef name: single
MethodDef proto bool single()
MethodDef name: SetExtent
MethodDef desc: set w/h based on current fr values
MethodDef proto void SetExtent(int wd, int ht)
MethodDef name: LimitExtent
MethodDef desc: limit width and height to these values
MethodDef proto void LimitExtent(int wd, int ht)
MethodDef name: LimitRange
MethodDef desc: limit range to within these values
MethodDef proto void LimitRange(int row_to_, int col_to_)
MethodDef name: Set
MethodDef proto void Set(int row_fr_, int col_fr_, int row_to_, int col_to_)
MethodDef names [u'LimitExtent', u'LimitRange', u'Set', u'SetExtent', u'empty', u'height', u'nonempty', u'single', u'width']
########################################################################
TypeDef len: 15
TypeDef name:  MatrixGeom
TypeDef type: class
TypeDef desc: matrix geometry, similar to an array of int forwards
TypeDef cats:, []
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: size
MemberDef type: int
MemberDef desc: DO NOT SET DIRECTLY, use SetSize
MethodDef name: dims
MethodDef desc: convenience
MethodDef proto int dims()
MethodDef name: Equal
MethodDef proto bool Equal(const MatrixGeom&amp; other)
MethodDef name: InRange
MethodDef proto bool InRange(int idx)
MethodDef name: IsFrameOf
MethodDef desc: &apos;true&apos; if this is a proper frame of other
MethodDef proto bool IsFrameOf(const MatrixGeom&amp; other)
MethodDef name: Product
MethodDef desc: returns product of all elements
MethodDef proto int Product()
MethodDef name: SetSize
MethodDef desc: sets to size, zeroing orphaned or new dims (true if changed size; false if not)
MethodDef proto bool SetSize(int sz)
MethodDef name: SafeEl
MethodDef desc: the element at the given index
MethodDef proto int SafeEl(int i)
MethodDef name: Add
MethodDef desc: safely add a new element
MethodDef proto void Add(int value)
MethodDef name: Set
MethodDef desc: safely set an element
MethodDef proto void Set(int i, int value)
MethodDef name: SetGeom
MethodDef proto void SetGeom(int dims, int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef name: Reset
MethodDef desc: set size to 0, and clear all dims
MethodDef proto void Reset()
MethodDef name: IndexFmDims
MethodDef desc: get index from dimension values, based on geometry
MethodDef proto int IndexFmDims(int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef name: DimsFmIndex
MethodDef desc: get dimension values from index, based on geometry
MethodDef proto void DimsFmIndex(int idx, MatrixGeom&amp; dims)
MethodDef name: Get2DGeom
MethodDef desc: for flat2d views
MethodDef proto void Get2DGeom(int&amp; x, int&amp; y)
MethodDef name: Get2DGeomGui
MethodDef desc: for rendering routines, provides standardized 2d geom regardless of dimensionality (includes space for extra dimensions), odd_y = for odd dimension sizes, put extra dimension in y (else x): 3d = x, (y+1) * z (vertical time series of 2d patterns, +1=space), 4d = (x+1)*xx, (y+1)*yy (e.g., 2d groups of 2d patterns), 5d = vertical time series of 4d.
MethodDef proto void Get2DGeomGui(int&amp; x, int&amp; y, bool odd_y, int spc)
MethodDef name: GeomToString
MethodDef desc: returns human-friendly text in form: &apos;[dims:{dim}{,dim}]&apos;
MethodDef proto taString GeomToString(const char* ldelim = [, const char* rdelim = ])
MethodDef name: GeomFromString
MethodDef desc: reads geometry from string (consuming text) in form: &apos;[dims:{dim}{,dim}]&apos;
MethodDef proto void GeomFromString(const taString&amp; str, const char* ldelim = [, const char* rdelim = ])
MethodDef names [u'Add', u'DimsFmIndex', u'Equal', u'GeomFromString', u'GeomToString', u'Get2DGeom', u'Get2DGeomGui', u'InRange', u'IndexFmDims', u'IsFrameOf', u'Product', u'Reset', u'SafeEl', u'Set', u'SetGeom', u'SetSize', u'dims']
########################################################################
TypeDef len: 7
TypeDef name:  taMatrix_PList
TypeDef type: class
TypeDef desc: simple list for keeping track of slices
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 9
TypeDef name:  taMatrix_Group
TypeDef type: class
TypeDef desc: group that can hold matrix items -- typically used for dataset elements
TypeDef cats:, [u'Data']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  taMatrixT
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taMatrix']
TypeDef children: []
########################################################################
TypeDef len: 11
TypeDef name:  String_Matrix
TypeDef type: class
TypeDef desc: a matrix of strings
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
MethodDef name: GetSlice
MethodDef proto String_Matrix_ptr GetSlice(const MatrixGeom&amp; base, int sfd = -1, int nsf = 1)
MethodDef name: GetFrameSlice
MethodDef proto String_Matrix_ptr GetFrameSlice(int frame)
MethodDef name: GetFrameRangeSlice
MethodDef proto String_Matrix_ptr GetFrameRangeSlice(int frame, int n_frames)
MethodDef names [u'GetFrameRangeSlice', u'GetFrameSlice', u'GetSlice']
########################################################################
TypeDef len: 11
TypeDef name:  float_Matrix
TypeDef type: class
TypeDef desc: a matrix of floats
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
MethodDef name: InitVals
MethodDef desc: initialize values to given fixed value
MethodDef proto void InitVals(float val = 0.0)
MethodDef name: GetSlice
MethodDef proto float_Matrix_ptr GetSlice(const MatrixGeom&amp; base, int sfd = -1, int nsf = 1)
MethodDef name: GetFrameSlice
MethodDef proto float_Matrix_ptr GetFrameSlice(int frame)
MethodDef name: GetFrameRangeSlice
MethodDef proto float_Matrix_ptr GetFrameRangeSlice(int frame, int n_frames)
MethodDef names [u'GetFrameRangeSlice', u'GetFrameSlice', u'GetSlice', u'InitVals']
########################################################################
TypeDef len: 11
TypeDef name:  double_Matrix
TypeDef type: class
TypeDef desc: a matrix of doubles
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
MethodDef name: InitVals
MethodDef desc: initialize values to given fixed value
MethodDef proto void InitVals(double val = 0.0)
MethodDef name: GetSlice
MethodDef proto double_Matrix_ptr GetSlice(const MatrixGeom&amp; base, int sfd = -1, int nsf = 1)
MethodDef name: GetFrameSlice
MethodDef proto double_Matrix_ptr GetFrameSlice(int frame)
MethodDef name: GetFrameRangeSlice
MethodDef proto double_Matrix_ptr GetFrameRangeSlice(int frame, int n_frames)
MethodDef names [u'GetFrameRangeSlice', u'GetFrameSlice', u'GetSlice', u'InitVals']
########################################################################
TypeDef len: 11
TypeDef name:  int_Matrix
TypeDef type: class
TypeDef desc: a matrix of ints
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
MethodDef name: InitVals
MethodDef desc: initialize values to given fixed value
MethodDef proto void InitVals(int val = 0)
MethodDef name: GetSlice
MethodDef proto int_Matrix_ptr GetSlice(const MatrixGeom&amp; base, int sfd = -1, int nsf = 1)
MethodDef name: GetFrameSlice
MethodDef proto int_Matrix_ptr GetFrameSlice(int frame)
MethodDef name: GetFrameRangeSlice
MethodDef proto int_Matrix_ptr GetFrameRangeSlice(int frame, int n_frames)
MethodDef names [u'GetFrameRangeSlice', u'GetFrameSlice', u'GetSlice', u'InitVals']
########################################################################
TypeDef len: 11
TypeDef name:  byte_Matrix
TypeDef type: class
TypeDef desc: a matrix of bytes
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
MethodDef name: GetSlice
MethodDef proto byte_Matrix_ptr GetSlice(const MatrixGeom&amp; base, int sfd = -1, int nsf = 1)
MethodDef name: GetFrameSlice
MethodDef proto byte_Matrix_ptr GetFrameSlice(int frame)
MethodDef name: GetFrameRangeSlice
MethodDef proto byte_Matrix_ptr GetFrameRangeSlice(int frame, int n_frames)
MethodDef names [u'GetFrameRangeSlice', u'GetFrameSlice', u'GetSlice']
########################################################################
TypeDef len: 11
TypeDef name:  Variant_Matrix
TypeDef type: class
TypeDef desc: a matrix of variants
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
MethodDef name: GetSlice
MethodDef proto Variant_Matrix_ptr GetSlice(const MatrixGeom&amp; base, int sfd = -1, int nsf = 1)
MethodDef name: GetFrameSlice
MethodDef proto Variant_Matrix_ptr GetFrameSlice(int frame)
MethodDef name: GetFrameRangeSlice
MethodDef proto Variant_Matrix_ptr GetFrameRangeSlice(int frame, int n_frames)
MethodDef names [u'GetFrameRangeSlice', u'GetFrameSlice', u'GetSlice']
########################################################################
TypeDef len: 11
TypeDef name:  rgb_Matrix
TypeDef type: class
TypeDef desc: a matrix of rgb values
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
MethodDef name: GetSlice
MethodDef proto rgb_Matrix_ptr GetSlice(const MatrixGeom&amp; base, int sfd = -1, int nsf = 1)
MethodDef name: GetFrameSlice
MethodDef proto rgb_Matrix_ptr GetFrameSlice(int frame)
MethodDef name: GetFrameRangeSlice
MethodDef proto rgb_Matrix_ptr GetFrameRangeSlice(int frame, int n_frames)
MethodDef names [u'GetFrameRangeSlice', u'GetFrameSlice', u'GetSlice']
########################################################################
TypeDef len: 17
TypeDef name:  Relation
TypeDef type: class
TypeDef desc: counting criteria params
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: EQUAL
EnumDef val: EQUAL
EnumDef name: NOTEQUAL
EnumDef val: NOTEQUAL
EnumDef name: LESSTHAN
EnumDef val: LESSTHAN
EnumDef name: GREATERTHAN
EnumDef val: GREATERTHAN
EnumDef name: LESSTHANOREQUAL
EnumDef val: LESSTHANOREQUAL
EnumDef name: GREATERTHANOREQUAL
EnumDef val: GREATERTHANOREQUAL
EnumDef names: [u'Relations']
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: name of the object
MemberDef name: rel
MemberDef type: Relation::Relations
MemberDef opts [u'LABEL_']
MemberDef cats []
MemberDef desc: relationship to evaluate
MemberDef name: val
MemberDef type: double
MemberDef opts [u'LABEL_']
MemberDef cats []
MemberDef desc: comparison value
MemberDef name: use_var
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: if true, use a program variable to specify the relation value
MemberDef name: var
MemberDef type: ProgVarRef
MemberDef opts [u'CONDSHOW_ON_use_var:true']
MemberDef cats []
MemberDef desc: variable that contains the comparison value (only used if this is embedded in a DataSelectRowsProg program element) -- variable must be a top-level (.args or .vars) variable and not a local one
MethodDef name: CacheVar
MethodDef desc: copy rel and cache the variable value in new Relation object (tmp_rel), or copy val -- optimizes repeated actions using same relation object so they don&apos;t have to keep getting the variable
MethodDef proto bool CacheVar(Relation&amp; tmp_rel)
MethodDef name: Evaluate
MethodDef proto bool Evaluate(double cmp)
MethodDef names [u'CacheVar', u'Evaluate']
########################################################################
TypeDef len: 19
TypeDef name:  Aggregate
TypeDef type: class
TypeDef desc: Basic aggregation operations
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'StatValAgg']
EnumDef name: GROUP
EnumDef val: GROUP
EnumDef: group by this field
EnumDef name: FIRST
EnumDef val: FIRST
EnumDef: first item
EnumDef name: LAST
EnumDef val: LAST
EnumDef: last item
EnumDef name: FIND_FIRST
EnumDef val: FIND_FIRST
EnumDef: find the first item that fits rel relationship
EnumDef name: FIND_LAST
EnumDef val: FIND_LAST
EnumDef: find the last item that fits rel relationship
EnumDef name: MIN
EnumDef val: MIN
EnumDef: Minimum
EnumDef name: MAX
EnumDef val: MAX
EnumDef: Maximum
EnumDef name: ABS_MIN
EnumDef val: ABS_MIN
EnumDef: Minimum of absolute values
EnumDef name: ABS_MAX
EnumDef val: ABS_MAX
EnumDef: Maximum of absolute values
EnumDef name: SUM
EnumDef val: SUM
EnumDef: Summation
EnumDef name: PROD
EnumDef val: PROD
EnumDef: Product
EnumDef name: MEAN
EnumDef val: MEAN
EnumDef: Mean of values
EnumDef name: VAR
EnumDef val: VAR
EnumDef: Variance
EnumDef name: SS
EnumDef val: SS
EnumDef: Sum of squares around the mean
EnumDef name: STDEV
EnumDef val: STDEV
EnumDef: Standard deviation
EnumDef name: SEM
EnumDef val: SEM
EnumDef: Standard error of the mean (always uses the unbiased estimate of the variance)
EnumDef name: N
EnumDef val: N
EnumDef: the number of data items in the vector
EnumDef name: COUNT
EnumDef val: COUNT
EnumDef: Count of the number times count relation was true
EnumDef name: MEDIAN
EnumDef val: MEDIAN
EnumDef: middle item in sorted list of values
EnumDef name: MODE
EnumDef val: MODE
EnumDef: most frequent item (note: requires sorting)
EnumDef name: QUANTILE
EnumDef val: QUANTILE
EnumDef: value at ordinal position within a sorted list given by rel.val parameter (normalized 0-1 position within sorted list, e.g., .5 = median, .25 = first quartile, etc) -- rel relation is not used
EnumDef name: NONE
EnumDef val: NONE
EnumDef: no aggregation operation
EnumDef names: [u'Operator']
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: name of the object
MemberDef name: op
MemberDef type: Aggregate::Operator
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: how to aggregate over the network
MemberDef name: rel
MemberDef type: Relation
MemberDef opts [u'CONDSHOW_ON_op:COUNT,FIND_FIRST,FIND_LAST,QUANTILE,VAR,STDEV']
MemberDef cats []
MemberDef desc: parameters for the COUNT, FIND_xxx, and QUANTILE operators
MethodDef name: GetAggName
MethodDef desc: get string representation of aggregation opr
MethodDef proto taString GetAggName()
MethodDef name: MinValType
MethodDef desc: minimum value type that aggregation operator can operate on (VT_INT = any kind of numeric data, VT_STRING = even non-numeric is ok (GROUP, FIRST, LAST)
MethodDef proto ValType MinValType()
MethodDef name: MinReturnType
MethodDef desc: minimum return type of the aggregation operator (VT_FLOAT = floating point type (double, float), VT_INT = integer type, VT_STRING = could even be a non-numeric type (GROUP, FIRST, LAST)
MethodDef proto ValType MinReturnType()
MethodDef names [u'GetAggName', u'MinReturnType', u'MinValType']
########################################################################
TypeDef len: 17
TypeDef name:  SimpleMathSpec
TypeDef type: class
TypeDef desc: params for std kinds of simple math operators applied to an input value &apos;val&apos;
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: NONE
EnumDef val: NONE
EnumDef: no function
EnumDef name: THRESH
EnumDef val: THRESH
EnumDef: threshold: if val &gt;= arg then hi, else lo
EnumDef name: ABS
EnumDef val: ABS
EnumDef: take absolute-value of val
EnumDef name: SQUARE
EnumDef val: SQUARE
EnumDef: square val (raise to 2nd power)
EnumDef name: SQRT
EnumDef val: SQRT
EnumDef: square root of val
EnumDef name: LOG
EnumDef val: LOG
EnumDef: natural log of val
EnumDef name: LOG10
EnumDef val: LOG10
EnumDef: log base 10 ov val
EnumDef name: EXP
EnumDef val: EXP
EnumDef: exponential (e^val)
EnumDef name: ADD
EnumDef val: ADD
EnumDef: add val + arg
EnumDef name: SUB
EnumDef val: SUB
EnumDef: subtract val - arg
EnumDef name: MUL
EnumDef val: MUL
EnumDef: multiply val * arg
EnumDef name: DIV
EnumDef val: DIV
EnumDef: divide val / arg
EnumDef name: POWER
EnumDef val: POWER
EnumDef: raise val to the power of arg: val^arg
EnumDef name: MAX
EnumDef val: MAX
EnumDef: maximum of value and arg: MAX(val,arg)
EnumDef name: MIN
EnumDef val: MIN
EnumDef: minimum of value and arg: MIN(val,arg)
EnumDef name: MINMAX
EnumDef val: MINMAX
EnumDef: minimum of value and hi, and maximum of value and lw (enforce val between lw-hi range)
EnumDef names: [u'MathOpr']
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: name of the object
MemberDef name: opr
MemberDef type: SimpleMathSpec::MathOpr
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: what math operator to use
MemberDef name: arg
MemberDef type: double
MemberDef opts [u'CONDSHOW_ON_opr:THRESH,ADD,SUB,MUL,POWER,DIV,MIN,MAX']
MemberDef cats []
MemberDef desc: argument for ops (threshold add/sub/mul/div,power,max,min arg)
MemberDef name: lw
MemberDef type: double
MemberDef opts [u'CONDSHOW_ON_opr:THRESH,MINMAX']
MemberDef cats []
MemberDef desc: the value to assign values below threshold for THRESH, or the low range for MINMAX
MemberDef name: hi
MemberDef type: double
MemberDef opts [u'CONDSHOW_ON_opr:THRESH,MINMAX']
MemberDef cats []
MemberDef desc: the value to assign values above threshold for THRESH, or the high range for MINMAX
MethodDef name: Evaluate
MethodDef desc: evaluate math operator on given value
MethodDef proto double Evaluate(double val)
MethodDef names [u'Evaluate']
########################################################################
TypeDef len: 19
TypeDef name:  taMath
TypeDef type: class
TypeDef desc: collection of commonly-used math functions
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'taMath_double', u'taMath_float']
EnumDef name: SUM_SQUARES
EnumDef val: SUM_SQUARES
EnumDef: sum of squares: sum[(x-y)^2]
EnumDef name: EUCLIDIAN
EnumDef val: EUCLIDIAN
EnumDef: Euclidian distance (sqrt of sum of squares)
EnumDef name: HAMMING
EnumDef val: HAMMING
EnumDef: Hamming distance: sum[abs(x-y)]
EnumDef name: COVAR
EnumDef val: COVAR
EnumDef: covariance: sum[(x-&lt;x&gt;)(y-&lt;y&gt;)]
EnumDef name: CORREL
EnumDef val: CORREL
EnumDef: correlation: sum[(x-&lt;x&gt;)(y-&lt;y&gt;)] / sqrt(sum[x^2 y^2])
EnumDef name: INNER_PROD
EnumDef val: INNER_PROD
EnumDef: inner product: sum[x y]
EnumDef name: CROSS_ENTROPY
EnumDef val: CROSS_ENTROPY
EnumDef: cross entropy: sum[x ln(x/y) + (1-x)ln((1-x)/(1-y))]
EnumDef names: [u'DistMetric']
MemberDef name: max_iterations
MemberDef type: int
MemberDef opts [u'DEF_100']
MemberDef cats [u'Params']
MemberDef desc: maximum number of iterations for iterative functions
MemberDef name: err_tolerance
MemberDef type: double
MemberDef opts [u'DEF_3.0e-7']
MemberDef cats [u'Params']
MemberDef desc: error tolerance for iterative functions to stop
MemberDef name: flt_max
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: maximum value representable by a floating point number (typ 1e37)
MemberDef name: flt_max_10_exp
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: maximum base 10 exponent representable by a floating point number (typ 37)
MemberDef name: flt_max_exp
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: maximum radix (base of float, always 2) exponent
MemberDef name: flt_min
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum value representable by a floating point number (typ 1e-37)
MemberDef name: flt_min_10_exp
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum base 10 exponent representable by a floating point number (typ 37)
MemberDef name: flt_min_exp
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum radix (base of float, always 2) exponent
MemberDef name: flt_epsilon
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum positive floating point number such that 1.0f + flt_epsilon != 1.0f
MemberDef name: dbl_max
MemberDef type: double
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: maximum value representable by a floating point number (typ 1e308)
MemberDef name: dbl_max_10_exp
MemberDef type: double
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: maximum base 10 exponent representable by a floating point number (typ 308)
MemberDef name: dbl_max_exp
MemberDef type: double
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: maximum radix (base of float, always 2) exponent
MemberDef name: dbl_min
MemberDef type: double
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum value representable by a floating point number (typ 1e-308)
MemberDef name: dbl_min_10_exp
MemberDef type: double
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum base 10 exponent representable by a floating point number (typ 308)
MemberDef name: dbl_min_exp
MemberDef type: double
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum radix (base of float, always 2) exponent
MemberDef name: dbl_epsilon
MemberDef type: double
MemberDef opts []
MemberDef cats [u'Arithmetic']
MemberDef desc: minimum positive floating point number such that 1.0 + dbl_epsilon != 1.0
MethodDef name: dist_larger_further
MethodDef desc: returns true if a larger value of given distance metric means further apart
MethodDef proto bool dist_larger_further(taMath::DistMetric metric)
MethodDef name: mat_cvt_double_to_float
MethodDef desc: convert double vector/matrix data to float
MethodDef proto void mat_cvt_double_to_float(float_Matrix* flt_dest, const double_Matrix* dbl_src)
MethodDef opts [u'CAT_Convert']
MethodDef name: mat_cvt_float_to_double
MethodDef desc: convert float vector/matrix data to double
MethodDef proto void mat_cvt_float_to_double(double_Matrix* dbl_dest, const float_Matrix* flt_src)
MethodDef opts [u'CAT_Convert']
MethodDef names [u'dist_larger_further', u'mat_cvt_double_to_float', u'mat_cvt_float_to_double']
########################################################################
TypeDef len: 15
TypeDef name:  taMath_double
TypeDef type: class
TypeDef desc: double precision math computations
TypeDef cats:, [u'Math']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taMath']
MemberDef name: e
MemberDef type: double
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Trigonometry']
MemberDef desc: e: the natural exponential number
MemberDef name: pi
MemberDef type: double
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Trigonometry']
MemberDef desc: pi: the ratio of circumference to diameter
MemberDef name: deg_per_rad
MemberDef type: double
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Trigonometry']
MemberDef desc: degrees per radian (180 / pi)
MethodDef name: add
MethodDef desc: add
MethodDef proto double add(double x, double y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: sub
MethodDef desc: subtract
MethodDef proto double sub(double x, double y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: mult
MethodDef desc: multiply
MethodDef proto double mult(double x, double y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: div
MethodDef desc: divide
MethodDef proto double div(double x, double y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: fabs
MethodDef desc: absolute value
MethodDef proto double fabs(double x)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: min
MethodDef desc: minimum of x and y
MethodDef proto double min(double x, double y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: max
MethodDef desc: maximum of x and y
MethodDef proto double max(double x, double y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: ceil
MethodDef desc: ceiling of x: next largest integer value from x
MethodDef proto double ceil(double x)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: floor
MethodDef desc: floor of x: next smallest integer value from x
MethodDef proto double floor(double x)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: round
MethodDef desc: // round value to an integer irrespective of current rounding direction
MethodDef proto double round(double x)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: fmod
MethodDef desc: floating-point modulus function: remainder of x / y
MethodDef proto double fmod(double x, double y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: exp
MethodDef desc: The natural exponential (e to the power x: e^x)
MethodDef proto double exp(double x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: log
MethodDef desc: The natural logarithm of x: ln(x)
MethodDef proto double log(double x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: log10
MethodDef desc: The logarithm of x, base 10
MethodDef proto double log10(double x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: pow
MethodDef desc: x to the power p (x^p)
MethodDef proto double pow(double x, double p)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: sqrt
MethodDef desc: square root of x (i.e., x^1/2)
MethodDef proto double sqrt(double x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: logistic
MethodDef desc: logistic (sigmoid) function of x: 1/(1 + e^(-gain*(x-off)))
MethodDef proto double logistic(double x, double gain = 1.0, double off = 0.0)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: euc_dist_sq
MethodDef desc: the squared Euclidean distance between two coordinates ((x1-x2)^2 + (y1-y2)^2)
MethodDef proto double euc_dist_sq(double x1, double y1, double x2, double y2)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: euc_dist
MethodDef desc: the Euclidean distance between two coordinates ((x1-x2)^2 + (y1-y2)^2)
MethodDef proto double euc_dist(double x1, double y1, double x2, double y2)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: hypot_sq
MethodDef desc: the squared length of the hypotenuse (i.e., Euclidean distance): (x^2 + y^2)
MethodDef proto double hypot_sq(double x, double y)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: hypot
MethodDef desc: the length of the hypotenuse (i.e., Euclidean distance): sqrt(x^2 + y^2)
MethodDef proto double hypot(double x, double y)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: acos
MethodDef desc: The arc-cosine (inverse cosine) -- takes an X coordinate and returns the angle (in radians) such that cos(angle)=X
MethodDef proto double acos(double X)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: asin
MethodDef desc: The arc-sine (inverse sine) -- takes a Y coordinate and returns the angle (in radians) such that sin(angle)=Y
MethodDef proto double asin(double Y)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: atan
MethodDef desc: The arc-tangent (inverse tangent) -- takes a Y/X slope and returns angle (in radians) such that tan(angle)=Y/X.
MethodDef proto double atan(double Y_over_X)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: atan2
MethodDef desc: The arc-tangent (inverse tangent) -- takes a Y/X slope and returns angle (in radians) such that tan(angle)=Y/X.
MethodDef proto double atan2(double Y, double X)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: cos
MethodDef desc: The cosine (x-axis component) of angle (given in radians)
MethodDef proto double cos(double angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: cos_deg
MethodDef desc: The cosine (x-axis component) of angle (given in degrees)
MethodDef proto double cos_deg(double angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: sin
MethodDef desc: The sine (y-axis component) of angle (given in radians)
MethodDef proto double sin(double angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: sin_deg
MethodDef desc: The sine (y-axis component) of angle (given in degrees)
MethodDef proto double sin_deg(double angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: tan
MethodDef desc: The tangent (slope y over x) of angle (given in radians)
MethodDef proto double tan(double angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: tan_deg
MethodDef desc: The tangent (slope y over x) of angle (given in degrees)
MethodDef proto double tan_deg(double angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: cosh
MethodDef desc: The hyperbolic-cosine = e^z + e^-z / 2
MethodDef proto double cosh(double z)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: sinh
MethodDef desc: The hyperbolic-sine = e^z - e^-z / 2
MethodDef proto double sinh(double z)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: tanh
MethodDef desc: The hyperbolic-tangent = sinh(z) / cosh(z)
MethodDef proto double tanh(double z)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: fact_ln
MethodDef desc: natural log (ln) of n factorial (n!)
MethodDef proto double fact_ln(int n)
MethodDef opts [u'CAT_Probability']
MethodDef name: bico_ln
MethodDef desc: natural log (ln) of n choose j (binomial)
MethodDef proto double bico_ln(int n, int j)
MethodDef opts [u'CAT_Probability']
MethodDef name: hyperg
MethodDef desc: hypergeometric (j t&apos;s of sample s in n)
MethodDef proto double hyperg(int j, int s, int t, int n)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_ln
MethodDef desc: natural log (ln) of gamma function (not gamma distribution): generalization of (n-1)! to real values
MethodDef proto double gamma_ln(double z)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_p
MethodDef desc: incomplete gamma function
MethodDef proto double gamma_p(double a, double x)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_q
MethodDef desc: incomplete gamma function (complement of p)
MethodDef proto double gamma_q(double a, double x)
MethodDef opts [u'CAT_Probability']
MethodDef name: beta
MethodDef desc: beta function
MethodDef proto double beta(double z, double w)
MethodDef opts [u'CAT_Probability']
MethodDef name: beta_i
MethodDef desc: incomplete beta function
MethodDef proto double beta_i(double a, double b, double x)
MethodDef opts [u'CAT_Probability']
MethodDef name: binom_den
MethodDef desc: binomial probability function
MethodDef proto double binom_den(int n, int j, double p)
MethodDef opts [u'CAT_Probability']
MethodDef name: binom_cum
MethodDef desc: cumulative binomial probability
MethodDef proto double binom_cum(int n, int j, double p)
MethodDef opts [u'CAT_Probability']
MethodDef name: binom_dev
MethodDef desc: binomial deviate: p prob with n trials
MethodDef proto double binom_dev(int n, double p)
MethodDef opts [u'CAT_Probability']
MethodDef name: poisson_den
MethodDef desc: poisson distribution
MethodDef proto double poisson_den(int j, double l)
MethodDef opts [u'CAT_Probability']
MethodDef name: poisson_cum
MethodDef desc: cumulative Poisson P_l(&lt;j) (0 thru j-1)
MethodDef proto double poisson_cum(int j, double l)
MethodDef opts [u'CAT_Probability']
MethodDef name: poisson_dev
MethodDef desc: poisson deviate: mean is l
MethodDef proto double poisson_dev(double l)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_den
MethodDef desc: gamma probability distribution: j events, l lambda, t time
MethodDef proto double gamma_den(int j, double l, double t)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_cum
MethodDef desc: gamma cumulative: j events, l lambda, t time
MethodDef proto double gamma_cum(int j, double l, double t)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_dev
MethodDef desc: gamma deviate: how long to wait until j events with unit lambda
MethodDef proto double gamma_dev(int j)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_den
MethodDef desc: gaussian (normal) distribution with uniform standard deviation: 1 / sqrt(2 * PI) * exp(-x^2 / 2)
MethodDef proto double gauss_den(double x)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_den_sig
MethodDef desc: gaussian (normal) distribution with explicit sigma: 1 / (sigma * sqrt(2 * PI)) * exp(-x^2 / (2 * sigma^2))
MethodDef proto double gauss_den_sig(double x, double sigma)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_den_sq_sig
MethodDef desc: gaussian (normal) distribution with x already squared and explicit sigma: 1 / (sigma * sqrt(2 * PI)) * exp(-x_sq / (2 * sigma^2))
MethodDef proto double gauss_den_sq_sig(double x_sq, double sigma)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_cum
MethodDef desc: cumulative gaussian (unit variance) to z
MethodDef proto double gauss_cum(double z)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_inv
MethodDef desc: inverse of the cumulative for p: z value for given p
MethodDef proto double gauss_inv(double p)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_inv_lim
MethodDef desc: inverse of the cumulative for p: z value for given p , returns a non-zero value for p==0 or p==1
MethodDef proto double gauss_inv_lim(double p)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_dev
MethodDef desc: gaussian deviate: normally distributed
MethodDef proto double gauss_dev()
MethodDef opts [u'CAT_Probability']
MethodDef name: erf
MethodDef desc: the error function: used for computing the normal distribution
MethodDef proto double erf(double x)
MethodDef opts [u'CAT_Probability']
MethodDef name: erfc
MethodDef desc: complement of the error function (1.0 - erf(x)) */
MethodDef proto double erfc(double x)
MethodDef opts [u'CAT_Probability']
MethodDef name: chisq_p
MethodDef desc: P(X^2 | v)
MethodDef proto double chisq_p(double X, double v)
MethodDef opts [u'CAT_Probability']
MethodDef name: chisq_q
MethodDef desc: Q(X^2 | v) (complement)
MethodDef proto double chisq_q(double X, double v)
MethodDef opts [u'CAT_Probability']
MethodDef name: students_cum
MethodDef desc: area between -t and t of the student&apos;s distribution df deg of free t test
MethodDef proto double students_cum(double t, double df)
MethodDef opts [u'CAT_Probability']
MethodDef name: students_cum_cum
MethodDef desc: cumulative student&apos;s distribution df deg of free t test
MethodDef proto double students_cum_cum(double t, double df)
MethodDef opts [u'CAT_Probability']
MethodDef name: students_den
MethodDef desc: density fctn of student&apos;s distribution df deg of free t test
MethodDef proto double students_den(double t, double df)
MethodDef opts [u'CAT_Probability']
MethodDef name: Ftest_q
MethodDef desc: F distribution probability F | (v1 &lt; v2)
MethodDef proto double Ftest_q(double F, double v1, double v2)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_check_same_size
MethodDef desc: check that both vectors are the same size, and issue warning if not (unless quiet)
MethodDef proto bool vec_check_same_size(const double_Matrix* a, const double_Matrix* b, bool quiet = false)
MethodDef name: vec_add
MethodDef desc: add elements in two vectors: a(i) += b(i)
MethodDef proto bool vec_add(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_sub
MethodDef desc: subtract elements in two vectors: a(i) -= b(i)
MethodDef proto bool vec_sub(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_mult_els
MethodDef desc: multiply elements in two vectors: a(i) *= b(i)
MethodDef proto bool vec_mult_els(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_div_els
MethodDef desc: divide elements in two vectors: a(i) /= b(i)
MethodDef proto bool vec_div_els(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_add_scalar
MethodDef desc: add scalar value b to elements in vector a: a(i) += b
MethodDef proto bool vec_add_scalar(double_Matrix* a, double b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_sub_scalar
MethodDef desc: subtract scalar value b to elements in vector a: a(i) -= b
MethodDef proto bool vec_sub_scalar(double_Matrix* a, double b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_mult_scalar
MethodDef desc: multiply scalar value b to elements in vector a: a(i) *= b
MethodDef proto bool vec_mult_scalar(double_Matrix* a, double b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_div_scalar
MethodDef desc: divide scalar value b to elements in vector a: a(i) /= b
MethodDef proto bool vec_div_scalar(double_Matrix* a, double b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_simple_math
MethodDef desc: apply standard kinds of simple math operators to values in the vector
MethodDef proto bool vec_simple_math(double_Matrix* vec, const SimpleMathSpec&amp; math_spec)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_simple_math_arg
MethodDef desc: apply simple math operators to values in vector, other vector provides &apos;arg&apos; value for math_spec
MethodDef proto bool vec_simple_math_arg(double_Matrix* vec, const double_Matrix* arg_vec, const SimpleMathSpec&amp; math_spec)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_students_cum
MethodDef desc: element wise area between -t and t of student&apos;s distribution df deg of free t test
MethodDef proto bool vec_students_cum(double_Matrix* t, const double_Matrix* df)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_students_cum_cum
MethodDef desc: element wise cumulative student&apos;s distribution df deg of free t test (area from 0 to t)
MethodDef proto bool vec_students_cum_cum(double_Matrix* t, const double_Matrix* df)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_gauss_inv
MethodDef desc: element-wise inverse of the cumulative for p: z value for given p
MethodDef proto bool vec_gauss_inv(double_Matrix* p)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_gauss_inv_lim
MethodDef desc: element-wise inverse of the cumulative for p: z value for given p . returns non-0 values for p==0 or p ==1
MethodDef proto bool vec_gauss_inv_lim(double_Matrix* p)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_first
MethodDef desc: first item in the vector
MethodDef proto double vec_first(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_last
MethodDef desc: last item in the vector
MethodDef proto double vec_last(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_find_first
MethodDef desc: find first element in the vector that meets relationship rel -- returns index in vector or -1 if not found
MethodDef proto int vec_find_first(const double_Matrix* vec, Relation&amp; rel)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_find_last
MethodDef desc: find first element in the vector that meets relationship rel -- returns index in vector or -1 if not found
MethodDef proto int vec_find_last(const double_Matrix* vec, Relation&amp; rel)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_max
MethodDef desc: value and index of the (first) element that has the maximum value
MethodDef proto double vec_max(const double_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_abs_max
MethodDef desc: value and index of the (first) element that has the maximum absolute value
MethodDef proto double vec_abs_max(const double_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_min
MethodDef desc: value and index of the (first) element that has the minimum value
MethodDef proto double vec_min(const double_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_abs_min
MethodDef desc: value and index of the (first) element that has the minimum value
MethodDef proto double vec_abs_min(const double_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sum
MethodDef desc: compute the sum of the values in the vector
MethodDef proto double vec_sum(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sum_range
MethodDef desc: compute the sum of the values in the vector from el=startpos to el=endpos-1
MethodDef proto double vec_sum_range(const double_Matrix* vec, int start = 0, int end = -1)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_prod
MethodDef desc: compute the product of the values in the vector
MethodDef proto double vec_prod(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_mean
MethodDef desc: compute the mean of the values in the vector
MethodDef proto double vec_mean(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_var
MethodDef desc: compute the variance of the values, opt with given mean, if use_est is true, divides by N-1 rather than N
MethodDef proto double vec_var(const double_Matrix* vec, double mean = 0, bool use_mean = false, bool use_est = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_std_dev
MethodDef desc: compute the standard deviation of the values, opt with given mean, if use_est is true, divides by N-1 rather than N
MethodDef proto double vec_std_dev(const double_Matrix* vec, double mean = 0, bool use_mean = false, bool use_est = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sem
MethodDef desc: compute the standard error of the mean of the values, opt with given mean
MethodDef proto double vec_sem(const double_Matrix* vec, double mean = 0, bool use_mean = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_ss_len
MethodDef desc: sum-of-squares length of the vector
MethodDef proto double vec_ss_len(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_ss_mean
MethodDef desc: sum-of-squares around the mean of the vector
MethodDef proto double vec_ss_mean(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_histogram
MethodDef desc: gets a histogram (counts) of number of values within each bin size in source vector
MethodDef proto void vec_histogram(double_Matrix* hist_vec, const double_Matrix* src_vec, double bin_size)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_count
MethodDef desc: count number of times relationship is true
MethodDef proto double vec_count(const double_Matrix* vec, Relation&amp; rel)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_median
MethodDef desc: compute the median of the values in the vector (middle value) -- requires sorting
MethodDef proto double vec_median(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_mode
MethodDef desc: compute the mode (most frequent) of the values in the vector -- requires sorting
MethodDef proto double vec_mode(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_quantile
MethodDef desc: compute arbitrary quantile according to quant_pos value, which is a proportion 0-1 from start to end of sorted list of values, e.g., .5 = median, .25 = first quartile, etc
MethodDef proto double vec_quantile(const double_Matrix* vec, double quant_pos)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_stats
MethodDef desc: compute standard descriptive statistics on given vector data, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).
MethodDef proto taString vec_stats(const double_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sort
MethodDef desc: sort the given vector values in numerical order (in place)
MethodDef proto void vec_sort(double_Matrix* vec, bool descending = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_ss_dist
MethodDef desc: compute sum-squares dist between this and the oth, tolerance is by element
MethodDef proto double vec_ss_dist(const double_Matrix* vec, const double_Matrix* oth_vec, bool norm = false, double tolerance = 0.0)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_euclid_dist
MethodDef desc: compute Euclidian dist between this and the oth, tolerance is by element
MethodDef proto double vec_euclid_dist(const double_Matrix* vec, const double_Matrix* oth_vec, bool norm = false, double tolerance = 0.0)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_hamming_dist
MethodDef desc: compute Hamming dist between this and the oth, tolerance is by element
MethodDef proto double vec_hamming_dist(const double_Matrix* vec, const double_Matrix* oth_vec, bool norm = false, double tolerance = 0.0)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_covar
MethodDef desc: compute the covariance of this vector the oth vector
MethodDef proto double vec_covar(const double_Matrix* vec, const double_Matrix* oth_vec)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_correl
MethodDef desc: compute the correlation of this vector with the oth vector
MethodDef proto double vec_correl(const double_Matrix* vec, const double_Matrix* oth_vec)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_inner_prod
MethodDef desc: compute the inner product of this vector and the oth vector
MethodDef proto double vec_inner_prod(const double_Matrix* vec, const double_Matrix* oth_vec, bool norm = false)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_cross_entropy
MethodDef desc: compute cross entropy between this and other vector, this is &apos;p&apos; other is &apos;q&apos;
MethodDef proto double vec_cross_entropy(const double_Matrix* vec, const double_Matrix* oth_vec)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_dist
MethodDef desc: compute generalized distance metric with other vector (double_Matrix* vec, calls appropriate fun above)
MethodDef proto double vec_dist(const double_Matrix* vec, const double_Matrix* oth_vec, taMath::DistMetric metric, bool norm = false, double tolerance = 0.0)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_norm_len
MethodDef desc: normalize vector to total given length (1.0), returns scaling factor
MethodDef proto double vec_norm_len(double_Matrix* vec, double len = 1.0)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_norm_sum
MethodDef desc: normalize vector to total given sum (1.0) and min_val (0), returns scaling factor
MethodDef proto double vec_norm_sum(double_Matrix* vec, double sum = 1.0, double min_val = 0.0)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_norm_max
MethodDef desc: normalize vector to given maximum value, returns scaling factor
MethodDef proto double vec_norm_max(double_Matrix* vec, double max = 1.0)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_norm_abs_max
MethodDef desc: normalize vector to given absolute maximum value, returns scaling factor
MethodDef proto double vec_norm_abs_max(double_Matrix* vec, double max = 1.0)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_threshold
MethodDef desc: threshold values in the vector, low vals go to low, etc; returns number of high values
MethodDef proto int vec_threshold(double_Matrix* vec, double thresh = .5, double low = 0.0, double high = 1.0)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_aggregate
MethodDef desc: compute aggregate of values in this vector using aggregation params of agg
MethodDef proto double vec_aggregate(const double_Matrix* vec, Aggregate&amp; agg)
MethodDef opts [u'CAT_Aggregate']
MethodDef name: vec_kern_uniform
MethodDef desc: create a unit-sum-normalized uniform kernel of given half-size (size set to 2* half_sz + 1) in given vector. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_uniform(double_Matrix* kernel, int half_sz, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_kern_gauss
MethodDef desc: create a unit-sum-normalized gaussian kernel of given half-size (size set to 2* half_sz + 1) in given vector, with given sigma (standard deviation) value. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_gauss(double_Matrix* kernel, int half_sz, double sigma, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_kern_exp
MethodDef desc: create a unit-sum-normalized symmetric exponential kernel of given half-size (size set to 2* half_sz + 1) in given vector, with given exponential multiplier. symmetric means abs(i-ctr) is used for value. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_exp(double_Matrix* kernel, int half_sz, double exp_mult, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_kern_pow
MethodDef desc: create a unit-sum-normalized power-function kernel of given half-size (size set to 2* half_sz + 1) in given vector, with given exponential multiplier. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_pow(double_Matrix* kernel, int half_sz, double pow_exp, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_convolve
MethodDef desc: convolve in_vec with kernel to produce out_vec. out_vec_i = sum_j kernel_j * in_vec_[i+j-off] (where off is 1/2 width of kernel). normally, out_vec is indented by the offset and width of the kernel so that the full kernel is used for all out_vec points. however, if keep_edges is true, it keeps these edges by clipping and renormalizing the kernel all the way to both edges
MethodDef proto bool vec_convolve(double_Matrix* out_vec, const double_Matrix* in_vec, const double_Matrix* kernel, bool keep_edges = false)
MethodDef opts [u'CAT_Convolution']
MethodDef name: mat_col
MethodDef desc: get indicated column number from two-d matrix
MethodDef proto bool mat_col(double_Matrix* col, const double_Matrix* mat, int col_no)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_row
MethodDef desc: get indicated row number from two-d matrix
MethodDef proto bool mat_row(double_Matrix* row, const double_Matrix* mat, int row_no)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_add
MethodDef desc: add the elements of matrix b to the elements of matrix a: a(i,j) += b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_add(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_sub
MethodDef desc: subtract the elements of matrix b to the elements of matrix a: a(i,j) -= b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_sub(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_mult_els
MethodDef desc: multiply the elements of matrix b with the elements of matrix a: a(i,j) *= b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_mult_els(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_div_els
MethodDef desc: divide the elements of matrix b by the elements of matrix a: a(i,j) /= b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_div_els(double_Matrix* a, const double_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_eigen_owrite
MethodDef desc: compute the eigenvalues and eigenvectors of matrix A, which must be a square symmetric n x n matrix. the matrix is overwritten by the operation. eigen_vals and eigen_vecs are automatically configured to the appropriate size if they are not already. eigens are sorted from highest to lowest by magnitude (absolute value)
MethodDef proto bool mat_eigen_owrite(double_Matrix* A, double_Matrix* eigen_vals, double_Matrix* eigen_vecs)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_eigen
MethodDef desc: compute the eigenvalues and eigenvectors of matrix A, which must be a square symmetric (n x n) matrix. this matrix is not affected by the operation (it is copied first). eigen_vals and eigen_vecs are automatically configured to the appropriate size if they are not already. eigens are sorted from highest to lowest by magnitude (absolute value)
MethodDef proto bool mat_eigen(const double_Matrix* A, double_Matrix* eigen_vals, double_Matrix* eigen_vecs)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_svd_owrite
MethodDef desc: compute the singular value decomposition (SVD) of MxN matrix A into an orthogonal MxN matrix U times a diagonal NxN matrix S (diagonals returned as n-item vector S) times the transpose of an NxN orthogonal square matrix V. matrix A is replaced by MxN orthogonal matrix U. S and V are automatically configured to the appropriate size if they are not already.
MethodDef proto bool mat_svd_owrite(double_Matrix* A, double_Matrix* S, double_Matrix* V)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_svd
MethodDef desc: compute the singular value decomposition (SVD) of MxN matrix A into an orthogonal MxN matrix U times a diagonal NxN matrix S (diagonals returned as n-item vector S) times the transpose of an NxN orthogonal square matrix V. matrix A is not affeced by the operation (it is copied first). S and V are automatically configured to the appropriate size if they are not already
MethodDef proto bool mat_svd(const double_Matrix* A, double_Matrix* U, double_Matrix* S, double_Matrix* V)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_mds_owrite
MethodDef desc: perform multidimensional scaling of matrix A (must be square symmetric matrix, e.g., a distance matrix), returning two-dimensional coordinates that best capture the distance relationships among the items (rows, columns) in x,y coordinates using specified components -- overwrites the matrix A
MethodDef proto bool mat_mds_owrite(double_Matrix* A, double_Matrix* x_y_coords, int x_component = 0, int y_component = 1)
MethodDef name: mat_mds
MethodDef desc: perform multidimensional scaling of matrix A (must be square symmetric matrix, e.g., a distance matrix), returning two-dimensional coordinates that best capture the distance relationships among the items (rows, columns) in x,y coordinates using specified components -- first copies the matrix A so it is not overwritten
MethodDef proto bool mat_mds(const double_Matrix* A, double_Matrix* x_y_coords, int x_component = 0, int y_component = 1)
MethodDef name: mat_cell_to_vec
MethodDef desc: extract given cell element across frames of matrix, and put in vector vec (usueful for analyzing behavior of a given cell across time or whatever the frames represent)
MethodDef proto bool mat_cell_to_vec(double_Matrix* vec, const double_Matrix* mat, int cell_no)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_dist
MethodDef desc: compute distance matrix of frames within matrix src_mat (must be dim &gt;= 2) -- dist_mat is nframes x nframes
MethodDef proto bool mat_dist(double_Matrix* dist_mat, const double_Matrix* src_mat, taMath::DistMetric metric, bool norm = false, double tolerance = 0.0)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_cross_dist
MethodDef desc: compute cross distance matrix between the frames within src_mat_a and src_mat_b (must be dim &gt;= 2 and have same frame size) -- rows of dist_mat are a, cols are b
MethodDef proto bool mat_cross_dist(double_Matrix* dist_mat, const double_Matrix* src_mat_a, const double_Matrix* src_mat_b, taMath::DistMetric metric, bool norm = false, double tolerance = 0.0)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_correl
MethodDef desc: compute correlation matrix for cells across frames within src_mat (i.e., how does each cell co-vary across time/frames with each other cell). result is nxn matrix where n is number of cells in each frame of src_mat (i.e., size of sub-matrix), with each cell being correlation of that cell with other cell.
MethodDef proto bool mat_correl(double_Matrix* correl_mat, const double_Matrix* src_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_prjn
MethodDef desc: compute projection of each frame of src_mat onto prjn_mat. prjn_vec contains one value for each frame in src_mat, which is the inner/dot product (projection -- or other metric if selected) of that frame and the prjn_mat.
MethodDef proto bool mat_prjn(double_Matrix* prjn_vec, const double_Matrix* src_mat, const double_Matrix* prjn_mat, taMath::DistMetric metric = INNER_PROD, bool norm = false, double tolerance = 0.0)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_time_avg
MethodDef desc: replace matrix values with their running (exponentially-weighted) time-averaged values (new_val = avg_dt * running_avg + (1-avg_dt) * old_val
MethodDef proto bool mat_time_avg(double_Matrix* a, double avg_dt)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_convolve
MethodDef desc: convolve in_mat with kernel to produce out_mat, in a cell-by-cell manner across frames. always keeps the edges by clipping and renormalizing the kernel all the way to both edges
MethodDef proto bool mat_frame_convolve(double_Matrix* out_mat, const double_Matrix* in_mat, const double_Matrix* kernel)
MethodDef opts [u'CAT_Convolution']
MethodDef name: mat_fmt_out_frame
MethodDef desc: format out_mat as one frame (inner dimensions) of in_mat (i.e., out_mat has n-1 dimensions relative to in_mat)
MethodDef proto bool mat_fmt_out_frame(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_set_n
MethodDef desc: set out_mat to the number of frames for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_set_n(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_first
MethodDef desc: compute first item for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_first(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_last
MethodDef desc: compute last item for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_last(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_find_first
MethodDef desc: compute index of first item that meets relationship rel for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_find_first(double_Matrix* out_mat, const double_Matrix* in_mat, Relation&amp; rel)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_find_last
MethodDef desc: compute index of last item that meets relationship rel for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_find_last(double_Matrix* out_mat, const double_Matrix* in_mat, Relation&amp; rel)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_max
MethodDef desc: compute maximum for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_max(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_min
MethodDef desc: compute minimum for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_min(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_abs_max
MethodDef desc: compute maximum of absolute values for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_abs_max(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_abs_min
MethodDef desc: compute minimum of absolute values for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_abs_min(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_sum
MethodDef desc: compute sum for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_sum(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_prod
MethodDef desc: compute product for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_prod(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_mean
MethodDef desc: compute mean for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_mean(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_var
MethodDef desc: compute variance for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_var(double_Matrix* out_mat, const double_Matrix* in_mat, bool use_est = false)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_std_dev
MethodDef desc: compute standard deviation for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_std_dev(double_Matrix* out_mat, const double_Matrix* in_mat, bool use_est = false)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_sem
MethodDef desc: compute standard error of the mean for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_sem(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_ss_len
MethodDef desc: compute sum-of-squares length for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_ss_len(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_ss_mean
MethodDef desc: compute sum of squares around the mean for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_ss_mean(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_count
MethodDef desc: compute count number of times relationship rel is true for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_count(double_Matrix* out_mat, const double_Matrix* in_mat, Relation&amp; rel)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_median
MethodDef desc: compute median (middle value -- requires sorting) for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_median(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_mode
MethodDef desc: compute mode (most frequent) value (requires sorting) for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_mode(double_Matrix* out_mat, const double_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_quantile
MethodDef desc: compute arbitrary quantile according to quant_pos value, which is a proportion 0-1 from start to end of sorted list of values, e.g., .5 = median, .25 = first quartile, etc, for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_quantile(double_Matrix* out_mat, const double_Matrix* in_mat, double quant_pos)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_aggregate
MethodDef desc: compute aggregate across matrix frames (last outer dimension) for each value within inner frame dimensions, using aggregation params of agg
MethodDef proto bool mat_frame_aggregate(double_Matrix* out_mat, const double_Matrix* in_mat, Aggregate&amp; agg)
MethodDef opts [u'CAT_Aggregate']
MethodDef name: fft_real_transform
MethodDef desc: compute the radix-N FFT of the real data in in_mat, writing the complex output to out_mat (d0[0]=real,d0[1]=imag) if real_out=0 or the power sqrt(r^2+i^2) if real_out=1; if there are more than 1 dims in in_mat, the FFT is computed for all frames of d0; real_out=1 computes norm=1 divides results by 1/sqrt(N) which makes the forward and reverse FFTs symmetric
MethodDef proto bool fft_real_transform(double_Matrix* out_mat, const double_Matrix* in_mat, bool real_out = false, bool norm = true)
MethodDef opts [u'CAT_FFT']
MethodDef names [u'Ftest_q', u'acos', u'add', u'asin', u'atan', u'atan2', u'beta', u'beta_i', u'bico_ln', u'binom_cum', u'binom_den', u'binom_dev', u'ceil', u'chisq_p', u'chisq_q', u'cos', u'cos_deg', u'cosh', u'div', u'erf', u'erfc', u'euc_dist', u'euc_dist_sq', u'exp', u'fabs', u'fact_ln', u'fft_real_transform', u'floor', u'fmod', u'gamma_cum', u'gamma_den', u'gamma_dev', u'gamma_ln', u'gamma_p', u'gamma_q', u'gauss_cum', u'gauss_den', u'gauss_den_sig', u'gauss_den_sq_sig', u'gauss_dev', u'gauss_inv', u'gauss_inv_lim', u'hyperg', u'hypot', u'hypot_sq', u'log', u'log10', u'logistic', u'mat_add', u'mat_cell_to_vec', u'mat_col', u'mat_correl', u'mat_cross_dist', u'mat_dist', u'mat_div_els', u'mat_eigen', u'mat_eigen_owrite', u'mat_fmt_out_frame', u'mat_frame_abs_max', u'mat_frame_abs_min', u'mat_frame_aggregate', u'mat_frame_convolve', u'mat_frame_count', u'mat_frame_find_first', u'mat_frame_find_last', u'mat_frame_first', u'mat_frame_last', u'mat_frame_max', u'mat_frame_mean', u'mat_frame_median', u'mat_frame_min', u'mat_frame_mode', u'mat_frame_prod', u'mat_frame_quantile', u'mat_frame_sem', u'mat_frame_set_n', u'mat_frame_ss_len', u'mat_frame_ss_mean', u'mat_frame_std_dev', u'mat_frame_sum', u'mat_frame_var', u'mat_mds', u'mat_mds_owrite', u'mat_mult_els', u'mat_prjn', u'mat_row', u'mat_sub', u'mat_svd', u'mat_svd_owrite', u'mat_time_avg', u'max', u'min', u'mult', u'poisson_cum', u'poisson_den', u'poisson_dev', u'pow', u'round', u'sin', u'sin_deg', u'sinh', u'sqrt', u'students_cum', u'students_cum_cum', u'students_den', u'sub', u'tan', u'tan_deg', u'tanh', u'vec_abs_max', u'vec_abs_min', u'vec_add', u'vec_add_scalar', u'vec_aggregate', u'vec_check_same_size', u'vec_convolve', u'vec_correl', u'vec_count', u'vec_covar', u'vec_cross_entropy', u'vec_dist', u'vec_div_els', u'vec_div_scalar', u'vec_euclid_dist', u'vec_find_first', u'vec_find_last', u'vec_first', u'vec_gauss_inv', u'vec_gauss_inv_lim', u'vec_hamming_dist', u'vec_histogram', u'vec_inner_prod', u'vec_kern_exp', u'vec_kern_gauss', u'vec_kern_pow', u'vec_kern_uniform', u'vec_last', u'vec_max', u'vec_mean', u'vec_median', u'vec_min', u'vec_mode', u'vec_mult_els', u'vec_mult_scalar', u'vec_norm_abs_max', u'vec_norm_len', u'vec_norm_max', u'vec_norm_sum', u'vec_prod', u'vec_quantile', u'vec_sem', u'vec_simple_math', u'vec_simple_math_arg', u'vec_sort', u'vec_ss_dist', u'vec_ss_len', u'vec_ss_mean', u'vec_stats', u'vec_std_dev', u'vec_students_cum', u'vec_students_cum_cum', u'vec_sub', u'vec_sub_scalar', u'vec_sum', u'vec_sum_range', u'vec_threshold', u'vec_var']
########################################################################
TypeDef len: 15
TypeDef name:  taMath_float
TypeDef type: class
TypeDef desc: single-precision (float) math computations
TypeDef cats:, [u'Math']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taMath']
MemberDef name: e
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Trigonometry']
MemberDef desc: e: the natural exponential number
MemberDef name: pi
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Trigonometry']
MemberDef desc: pi: the ratio of circumference to diameter
MemberDef name: deg_per_rad
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Trigonometry']
MemberDef desc: degrees per radian (180 / pi)
MethodDef name: add
MethodDef desc: add
MethodDef proto float add(float x, float y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: sub
MethodDef desc: subtract
MethodDef proto float sub(float x, float y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: mult
MethodDef desc: multiply
MethodDef proto float mult(float x, float y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: div
MethodDef desc: divide
MethodDef proto float div(float x, float y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: fabs
MethodDef desc: absolute value
MethodDef proto float fabs(float x)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: min
MethodDef desc: minimum of x and y
MethodDef proto float min(float x, float y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: max
MethodDef desc: maximum of x and y
MethodDef proto float max(float x, float y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: ceil
MethodDef desc: ceiling of x: next largest integer value from x
MethodDef proto float ceil(float x)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: floor
MethodDef desc: floor of x: next smallest integer value from x
MethodDef proto float floor(float x)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: round
MethodDef desc: static float round(float x) { return roundf(x); }
MethodDef proto float round(float x)
MethodDef name: fmod
MethodDef desc: floating-point modulus function: remainder of x / y
MethodDef proto float fmod(float x, float y)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: exp
MethodDef desc: The natural exponential (e to the power x: e^x)
MethodDef proto float exp(float x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: log
MethodDef desc: The natural logarithm of x: ln(x)
MethodDef proto float log(float x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: log10
MethodDef desc: The logarithm of x, base 10
MethodDef proto float log10(float x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: pow
MethodDef desc: x to the power p (x^p)
MethodDef proto float pow(float x, float p)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: sqrt
MethodDef desc: square root of x (i.e., x^1/2)
MethodDef proto float sqrt(float x)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: logistic
MethodDef desc: logistic (sigmoid) function of x: 1/(1 + e^(-gain*(x-off)))
MethodDef proto float logistic(float x, float gain = 1.0, float off = 0.0)
MethodDef opts [u'CAT_ExpLog']
MethodDef name: euc_dist_sq
MethodDef desc: the squared Euclidean distance between two coordinates ((x1-x2)^2 + (y1-y2)^2)
MethodDef proto float euc_dist_sq(float x1, float y1, float x2, float y2)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: euc_dist
MethodDef desc: the Euclidean distance between two coordinates ((x1-x2)^2 + (y1-y2)^2)
MethodDef proto float euc_dist(float x1, float y1, float x2, float y2)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: hypot_sq
MethodDef desc: the squared length of the hypotenuse (i.e., Euclidean distance): (x^2 + y^2)
MethodDef proto float hypot_sq(float x, float y)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: hypot
MethodDef desc: the length of the hypotenuse (i.e., Euclidean distance): sqrt(x^2 + y^2)
MethodDef proto float hypot(float x, float y)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: acos
MethodDef desc: The arc-cosine (inverse cosine) -- takes an X coordinate and returns the angle (in radians) such that cos(angle)=X
MethodDef proto float acos(float X)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: asin
MethodDef desc: The arc-sine (inverse sine) -- takes a Y coordinate and returns the angle (in radians) such that sin(angle)=Y
MethodDef proto float asin(float Y)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: atan
MethodDef desc: The arc-tangent (inverse tangent) -- takes a Y/X slope and returns angle (in radians) such that tan(angle)=Y/X.
MethodDef proto float atan(float Y_over_X)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: atan2
MethodDef desc: The arc-tangent (inverse tangent) -- takes a Y/X slope and returns angle (in radians) such that tan(angle)=Y/X.
MethodDef proto float atan2(float Y, float X)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: cos
MethodDef desc: The cosine (x-axis component) of angle (given in radians)
MethodDef proto float cos(float angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: cos_deg
MethodDef desc: The cosine (x-axis component) of angle (given in degrees)
MethodDef proto float cos_deg(float angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: sin
MethodDef desc: The sine (y-axis component) of angle (given in radians)
MethodDef proto float sin(float angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: sin_deg
MethodDef desc: The sine (y-axis component) of angle (given in degrees)
MethodDef proto float sin_deg(float angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: tan
MethodDef desc: The tangent (slope y over x) of angle (given in radians)
MethodDef proto float tan(float angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: tan_deg
MethodDef desc: The tangent (slope y over x) of angle (given in degrees)
MethodDef proto float tan_deg(float angle)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: cosh
MethodDef desc: The hyperbolic-cosine = e^z + e^-z / 2
MethodDef proto float cosh(float z)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: sinh
MethodDef desc: The hyperbolic-sine = e^z - e^-z / 2
MethodDef proto float sinh(float z)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: tanh
MethodDef desc: The hyperbolic-tangent = sinh(z) / cosh(z)
MethodDef proto float tanh(float z)
MethodDef opts [u'CAT_Trigonometry']
MethodDef name: fact_ln
MethodDef desc: natural log (ln) of n factorial (n!)
MethodDef proto float fact_ln(int n)
MethodDef opts [u'CAT_Probability']
MethodDef name: bico_ln
MethodDef desc: natural log (ln) of n choose j (binomial)
MethodDef proto float bico_ln(int n, int j)
MethodDef opts [u'CAT_Probability']
MethodDef name: hyperg
MethodDef desc: hypergeometric (j t&apos;s of sample s in n)
MethodDef proto float hyperg(int j, int s, int t, int n)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_ln
MethodDef desc: natural log (ln) of gamma function (not gamma distribution): generalization of (n-1)! to real values
MethodDef proto float gamma_ln(float z)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_p
MethodDef desc: incomplete gamma function
MethodDef proto float gamma_p(float a, float x)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_q
MethodDef desc: incomplete gamma function (complement of p)
MethodDef proto float gamma_q(float a, float x)
MethodDef opts [u'CAT_Probability']
MethodDef name: beta
MethodDef desc: beta function
MethodDef proto float beta(float z, float w)
MethodDef opts [u'CAT_Probability']
MethodDef name: beta_i
MethodDef desc: incomplete beta function
MethodDef proto float beta_i(float a, float b, float x)
MethodDef opts [u'CAT_Probability']
MethodDef name: binom_den
MethodDef desc: binomial probability function
MethodDef proto float binom_den(int n, int j, float p)
MethodDef opts [u'CAT_Probability']
MethodDef name: binom_cum
MethodDef desc: cumulative binomial probability
MethodDef proto float binom_cum(int n, int j, float p)
MethodDef opts [u'CAT_Probability']
MethodDef name: binom_dev
MethodDef desc: binomial deviate: p prob with n trials
MethodDef proto float binom_dev(int n, float p)
MethodDef opts [u'CAT_Probability']
MethodDef name: poisson_den
MethodDef desc: poisson distribution
MethodDef proto float poisson_den(int j, float l)
MethodDef opts [u'CAT_Probability']
MethodDef name: poisson_cum
MethodDef desc: cumulative Poisson P_l(&lt;j) (0 thru j-1)
MethodDef proto float poisson_cum(int j, float l)
MethodDef opts [u'CAT_Probability']
MethodDef name: poisson_dev
MethodDef desc: poisson deviate: mean is l
MethodDef proto float poisson_dev(float l)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_den
MethodDef desc: gamma probability distribution: j events, l lambda, t time
MethodDef proto float gamma_den(int j, float l, float t)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_cum
MethodDef desc: gamma cumulative: j events, l lambda, t time
MethodDef proto float gamma_cum(int j, float l, float t)
MethodDef opts [u'CAT_Probability']
MethodDef name: gamma_dev
MethodDef desc: gamma deviate: how long to wait until j events with unit lambda
MethodDef proto float gamma_dev(int j)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_den
MethodDef desc: gaussian (normal) distribution with uniform standard deviation: 1 / sqrt(2 * PI) * exp(-x^2 / 2)
MethodDef proto float gauss_den(float x)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_den_sig
MethodDef desc: gaussian (normal) distribution with explicit sigma: 1 / (sigma * sqrt(2 * PI)) * exp(-x^2 / (2 * sigma^2))
MethodDef proto float gauss_den_sig(float x, float sigma)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_den_sq_sig
MethodDef desc: gaussian (normal) distribution with x already squared and explicit sigma: 1 / (sigma * sqrt(2 * PI)) * exp(-x_sq / (2 * sigma^2))
MethodDef proto float gauss_den_sq_sig(float x_sq, float sigma)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_cum
MethodDef desc: cumulative gaussian (unit variance) to z
MethodDef proto float gauss_cum(float z)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_inv
MethodDef desc: inverse of the cumulative for p: z value for given p
MethodDef proto float gauss_inv(float p)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_inv_lim
MethodDef desc: inverse of the cumulative for p: z value for given p , returns nonzero value for p==0 or p==1
MethodDef proto float gauss_inv_lim(float p)
MethodDef opts [u'CAT_Probability']
MethodDef name: gauss_dev
MethodDef desc: gaussian deviate: normally distributed
MethodDef proto float gauss_dev()
MethodDef opts [u'CAT_Probability']
MethodDef name: erf
MethodDef desc: the error function: used for computing the normal distribution
MethodDef proto float erf(float x)
MethodDef opts [u'CAT_Probability']
MethodDef name: erfc
MethodDef desc: complement of the error function (1.0 - erf(x)) */
MethodDef proto float erfc(float x)
MethodDef opts [u'CAT_Probability']
MethodDef name: chisq_p
MethodDef desc: P(X^2 | v)
MethodDef proto float chisq_p(float X, float v)
MethodDef opts [u'CAT_Probability']
MethodDef name: chisq_q
MethodDef desc: Q(X^2 | v) (complement)
MethodDef proto float chisq_q(float X, float v)
MethodDef opts [u'CAT_Probability']
MethodDef name: students_cum
MethodDef desc: area between -t and t of cumulative student&apos;s distribution df deg of free t test
MethodDef proto float students_cum(float t, float df)
MethodDef opts [u'CAT_Probability']
MethodDef name: students_cum_cum
MethodDef desc: cumulative student&apos;s distribution df deg of free t test
MethodDef proto float students_cum_cum(float t, float df)
MethodDef opts [u'CAT_Probability']
MethodDef name: students_den
MethodDef desc: density fctn of student&apos;s distribution df deg of free t test
MethodDef proto float students_den(float t, float df)
MethodDef opts [u'CAT_Probability']
MethodDef name: Ftest_q
MethodDef desc: F distribution probability F | (v1 &lt; v2)
MethodDef proto float Ftest_q(float F, float v1, float v2)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_fm_ints
MethodDef desc: initialize given float matrix (which is completely overwritten) from integer matrix data
MethodDef proto void vec_fm_ints(float_Matrix* float_mat, const int_Matrix* int_mat)
MethodDef name: vec_to_ints
MethodDef desc: copy float matrix data back to integer matrix
MethodDef proto void vec_to_ints(int_Matrix* int_mat, const float_Matrix* float_mat)
MethodDef name: vec_check_same_size
MethodDef desc: check that both vectors are the same size, and issue warning if not (unless quiet)
MethodDef proto bool vec_check_same_size(const float_Matrix* a, const float_Matrix* b, bool quiet = false)
MethodDef name: vec_add
MethodDef desc: add elements in two vectors: a(i) += b(i)
MethodDef proto bool vec_add(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_sub
MethodDef desc: subtract elements in two vectors: a(i) -= b(i)
MethodDef proto bool vec_sub(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_mult_els
MethodDef desc: multiply elements in two vectors: a(i) *= b(i)
MethodDef proto bool vec_mult_els(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_div_els
MethodDef desc: divide elements in two vectors: a(i) /= b(i)
MethodDef proto bool vec_div_els(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_add_scalar
MethodDef desc: add scalar value b to elements in vector a: a(i) += b
MethodDef proto bool vec_add_scalar(float_Matrix* a, float b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_sub_scalar
MethodDef desc: subtract scalar value b to elements in vector a: a(i) -= b
MethodDef proto bool vec_sub_scalar(float_Matrix* a, float b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_mult_scalar
MethodDef desc: multiply scalar value b to elements in vector a: a(i) *= b
MethodDef proto bool vec_mult_scalar(float_Matrix* a, float b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_div_scalar
MethodDef desc: divide scalar value b to elements in vector a: a(i) /= b
MethodDef proto bool vec_div_scalar(float_Matrix* a, float b)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_simple_math
MethodDef desc: apply standard kinds of simple math operators to values in the vector
MethodDef proto bool vec_simple_math(float_Matrix* vec, const SimpleMathSpec&amp; math_spec)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_simple_math_arg
MethodDef desc: apply simple math operators to values in vector, other vector provides &apos;arg&apos; value for math_spec
MethodDef proto bool vec_simple_math_arg(float_Matrix* vec, const float_Matrix* arg_vec, const SimpleMathSpec&amp; math_spec)
MethodDef opts [u'CAT_Arithmetic']
MethodDef name: vec_students_cum
MethodDef desc: element wise area between -t and t of student&apos;s distribution df deg of free t test
MethodDef proto bool vec_students_cum(float_Matrix* t, const float_Matrix* df)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_students_cum_cum
MethodDef desc: element wise cumulative student&apos;s distribution (a is tval, b is df)
MethodDef proto bool vec_students_cum_cum(float_Matrix* t, const float_Matrix* df)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_gauss_inv
MethodDef desc: element-wise inverse of the cumulative for p: z value for given p
MethodDef proto bool vec_gauss_inv(float_Matrix* p)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_gauss_inv_lim
MethodDef desc: element-wise inverse of the cumulative for p: z value for given p , returns nonzero values for p==0 or p==1
MethodDef proto bool vec_gauss_inv_lim(float_Matrix* p)
MethodDef opts [u'CAT_Probability']
MethodDef name: vec_first
MethodDef desc: first item in the vector
MethodDef proto float vec_first(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_last
MethodDef desc: last item in the vector
MethodDef proto float vec_last(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_find_first
MethodDef desc: find first element in the vector that meets relationship rel -- returns index in vector or -1 if not found
MethodDef proto int vec_find_first(const float_Matrix* vec, Relation&amp; rel)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_find_last
MethodDef desc: find first element in the vector that meets relationship rel -- returns index in vector or -1 if not found
MethodDef proto int vec_find_last(const float_Matrix* vec, Relation&amp; rel)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_max
MethodDef desc: value and index of the (first) element that has the maximum value
MethodDef proto float vec_max(const float_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_abs_max
MethodDef desc: value and index of the (first) element that has the maximum absolute value
MethodDef proto float vec_abs_max(const float_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_min
MethodDef desc: value and index of the (first) element that has the minimum value
MethodDef proto float vec_min(const float_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_abs_min
MethodDef desc: value and index of the (first) element that has the minimum value
MethodDef proto float vec_abs_min(const float_Matrix* vec, int&amp; idx)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sum
MethodDef desc: compute the sum of the values in the vector
MethodDef proto float vec_sum(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sum_range
MethodDef desc: compute the sum of the values in the vector from el=startpos to el=endpos-1
MethodDef proto float vec_sum_range(const float_Matrix* vec, int start = 0, int end = -1)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_prod
MethodDef desc: compute the product of the values in the vector
MethodDef proto float vec_prod(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_mean
MethodDef desc: compute the mean of the values in the vector
MethodDef proto float vec_mean(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_var
MethodDef desc: compute the variance of the values, opt with given mean; if use_est == true, then divides by N-1 rather than N
MethodDef proto float vec_var(const float_Matrix* vec, float mean = 0, bool use_mean = false, bool use_est = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_std_dev
MethodDef desc: compute the standard deviation of the values, opt with given mean; if use_est == true, then divides by N-1 rather than N
MethodDef proto float vec_std_dev(const float_Matrix* vec, float mean = 0, bool use_mean = false, bool use_est = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sem
MethodDef desc: compute the standard error of the mean of the values, opt with given mean
MethodDef proto float vec_sem(const float_Matrix* vec, float mean = 0, bool use_mean = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_ss_len
MethodDef desc: sum-of-squares length of the vector
MethodDef proto float vec_ss_len(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_ss_mean
MethodDef desc: sum-of-squares around the mean of the vector
MethodDef proto float vec_ss_mean(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_histogram
MethodDef desc: gets a histogram (counts) of number of values within each bin size in source vector
MethodDef proto void vec_histogram(float_Matrix* hist_vec, const float_Matrix* src_vec, float bin_size)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_count
MethodDef desc: count number of times relationship is true
MethodDef proto float vec_count(const float_Matrix* vec, Relation&amp; rel)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_median
MethodDef desc: compute the median of the values in the vector (middle value) -- requires sorting
MethodDef proto float vec_median(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_mode
MethodDef desc: compute the mode (most frequent) of the values in the vector -- requires sorting
MethodDef proto float vec_mode(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_quantile
MethodDef desc: compute arbitrary quantile according to quant_pos value, which is a proportion 0-1 from start to end of sorted list of values, e.g., .5 = median, .25 = first quartile, etc
MethodDef proto float vec_quantile(const float_Matrix* vec, float quant_pos)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_stats
MethodDef desc: compute standard descriptive statistics on given vector data, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).
MethodDef proto taString vec_stats(const float_Matrix* vec)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_sort
MethodDef desc: sort the given vector values in numerical order (in place)
MethodDef proto void vec_sort(float_Matrix* vec, bool descending = false)
MethodDef opts [u'CAT_Statistics']
MethodDef name: vec_ss_dist
MethodDef desc: compute sum-squares dist between this and the oth, tolerance is by element
MethodDef proto float vec_ss_dist(const float_Matrix* vec, const float_Matrix* oth_vec, bool norm = false, float tolerance = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_euclid_dist
MethodDef desc: compute Euclidian dist between this and the oth, tolerance is by element
MethodDef proto float vec_euclid_dist(const float_Matrix* vec, const float_Matrix* oth_vec, bool norm = false, float tolerance = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_hamming_dist
MethodDef desc: compute Hamming dist between this and the oth, tolerance is by element
MethodDef proto float vec_hamming_dist(const float_Matrix* vec, const float_Matrix* oth_vec, bool norm = false, float tolerance = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_covar
MethodDef desc: compute the covariance of this vector the oth vector
MethodDef proto float vec_covar(const float_Matrix* vec, const float_Matrix* oth_vec)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_correl
MethodDef desc: compute the correlation of this vector with the oth vector
MethodDef proto float vec_correl(const float_Matrix* vec, const float_Matrix* oth_vec)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_inner_prod
MethodDef desc: compute the inner product of this vector and the oth vector
MethodDef proto float vec_inner_prod(const float_Matrix* vec, const float_Matrix* oth_vec, bool norm = false)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_cross_entropy
MethodDef desc: compute cross entropy between this and other vector, this is &apos;p&apos; other is &apos;q&apos;
MethodDef proto float vec_cross_entropy(const float_Matrix* vec, const float_Matrix* oth_vec)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_dist
MethodDef desc: compute generalized distance metric with other vector (float_Matrix* vec, calls appropriate fun above)
MethodDef proto float vec_dist(const float_Matrix* vec, const float_Matrix* oth_vec, taMath::DistMetric metric, bool norm = false, float tolerance = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: vec_norm_len
MethodDef desc: normalize vector to total given length (1.0), returns scaling factor
MethodDef proto float vec_norm_len(float_Matrix* vec, float len = 1.0f)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_norm_sum
MethodDef desc: normalize vector to total given sum (1.0) and min_val (0), returns scaling factor
MethodDef proto float vec_norm_sum(float_Matrix* vec, float sum = 1.0f, float min_val = 0.0f)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_norm_max
MethodDef desc: normalize vector to given maximum value, returns scaling factor
MethodDef proto float vec_norm_max(float_Matrix* vec, float max = 1.0f)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_norm_abs_max
MethodDef desc: normalize vector to given absolute maximum value, returns scaling factor
MethodDef proto float vec_norm_abs_max(float_Matrix* vec, float max = 1.0f)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_threshold
MethodDef desc: threshold values in the vector, low vals go to low, etc; returns number of high values
MethodDef proto int vec_threshold(float_Matrix* vec, float thresh = .5f, float low = 0.0f, float high = 1.0f)
MethodDef opts [u'CAT_Norm']
MethodDef name: vec_aggregate
MethodDef desc: compute aggregate of values in this vector using aggregation params of agg
MethodDef proto float vec_aggregate(const float_Matrix* vec, Aggregate&amp; agg)
MethodDef opts [u'CAT_Aggregate']
MethodDef name: vec_kern_uniform
MethodDef desc: create a unit-sum-normalized uniform kernel of given half-size (size set to 2* half_sz + 1) in given vector. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_uniform(float_Matrix* kernel, int half_sz, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_kern_gauss
MethodDef desc: create a unit-sum-normalized gaussian kernel of given half-size (size set to 2* half_sz + 1) in given vector, with given sigma (standard deviation) value. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_gauss(float_Matrix* kernel, int half_sz, float sigma, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_kern_exp
MethodDef desc: create a unit-sum-normalized symmetric exponential kernel of given half-size (size set to 2* half_sz + 1) in given vector, with given exponential multiplier. symmetric means abs(i-ctr) is used for value. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_exp(float_Matrix* kernel, int half_sz, float exp_mult, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_kern_pow
MethodDef desc: create a unit-sum-normalized power-function kernel of given half-size (size set to 2* half_sz + 1) in given vector, with given exponential multiplier. if given tail direction is false, it is replaced with zeros
MethodDef proto bool vec_kern_pow(float_Matrix* kernel, int half_sz, float pow_exp, bool neg_tail = true, bool pos_tail = true)
MethodDef opts [u'CAT_Convolution']
MethodDef name: vec_convolve
MethodDef desc: convolve in_vec with kernel to produce out_vec. out_vec_i = sum_j kernel_j * in_vec_[i+j-off] (where off is 1/2 width of kernel). normally, out_vec is indented by the offset and width of the kernel so that the full kernel is used for all out_vec points. however, if keep_edges is true, it keeps these edges by clipping and renormalizing the kernel all the way to both edges
MethodDef proto bool vec_convolve(float_Matrix* out_vec, const float_Matrix* in_vec, const float_Matrix* kernel, bool keep_edges = false)
MethodDef opts [u'CAT_Convolution']
MethodDef name: mat_col
MethodDef desc: get indicated column number from two-d matrix
MethodDef proto bool mat_col(float_Matrix* col, const float_Matrix* mat, int col_no)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_row
MethodDef desc: get indicated row number from two-d matrix
MethodDef proto bool mat_row(float_Matrix* row, const float_Matrix* mat, int row_no)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_add
MethodDef desc: add the elements of matrix b to the elements of matrix a: a(i,j) += b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_add(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_sub
MethodDef desc: subtract the elements of matrix b to the elements of matrix a: a(i,j) -= b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_sub(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_mult_els
MethodDef desc: multiply the elements of matrix b with the elements of matrix a: a(i,j) *= b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_mult_els(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_div_els
MethodDef desc: divide the elements of matrix b by the elements of matrix a: a(i,j) /= b(i,j); the two matricies must have the same dimensions
MethodDef proto bool mat_div_els(float_Matrix* a, const float_Matrix* b)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_eigen_owrite
MethodDef desc: compute the eigenvalues and eigenvectors of matrix A, which must be a square symmetric n x n matrix. the matrix is overwritten by the operation. eigen_vals and eigen_vecs are automatically configured to the appropriate size if they are not already. eigens are sorted from highest to lowest by magnitude (absolute value)
MethodDef proto bool mat_eigen_owrite(float_Matrix* A, float_Matrix* eigen_vals, float_Matrix* eigen_vecs)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_eigen
MethodDef desc: compute the eigenvalues and eigenvectors of matrix A, which must be a square symmetric (n x n) matrix. this matrix is not affected by the operation (it is copied first). eigen_vals and eigen_vecs are automatically configured to the appropriate size if they are not already. eigens are sorted from highest to lowest by magnitude (absolute value)
MethodDef proto bool mat_eigen(const float_Matrix* A, float_Matrix* eigen_vals, float_Matrix* eigen_vecs)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_svd_owrite
MethodDef desc: compute the singular value decomposition (SVD) of MxN matrix A into an orthogonal MxN matrix U times a diagonal NxN matrix S (diagonals returned as n-item vector S) times the transpose of an NxN orthogonal square matrix V. matrix A is replaced by MxN orthogonal matrix U. S and V are automatically configured to the appropriate size if they are not already.
MethodDef proto bool mat_svd_owrite(float_Matrix* A, float_Matrix* S, float_Matrix* V)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_svd
MethodDef desc: compute the singular value decomposition (SVD) of MxN matrix A into an orthogonal MxN matrix U times a diagonal NxN matrix S (diagonals returned as n-item vector S) times the transpose of an NxN orthogonal square matrix V. matrix A is not affeced by the operation (it is copied first). S and V are automatically configured to the appropriate size if they are not already
MethodDef proto bool mat_svd(const float_Matrix* A, float_Matrix* U, float_Matrix* S, float_Matrix* V)
MethodDef opts [u'CAT_Matrix']
MethodDef name: mat_mds_owrite
MethodDef desc: perform multidimensional scaling of matrix A (must be square symmetric matrix, e.g., a distance matrix), returning two-dimensional coordinates that best capture the distance relationships among the items (rows, columns) in x,y coordinates using specified components -- overwrites the matrix A
MethodDef proto bool mat_mds_owrite(float_Matrix* A, float_Matrix* x_y_coords, int x_component = 0, int y_component = 1)
MethodDef name: mat_mds
MethodDef desc: perform multidimensional scaling of matrix A (must be square symmetric matrix, e.g., a distance matrix), returning two-dimensional coordinates that best capture the distance relationships among the items (rows, columns) in x,y coordinates using specified components -- first copies the matrix A so it is not overwritten
MethodDef proto bool mat_mds(const float_Matrix* A, float_Matrix* x_y_coords, int x_component = 0, int y_component = 1)
MethodDef name: mat_cell_to_vec
MethodDef desc: extract given cell element across frames of matrix, and put in vector vec (usueful for analyzing behavior of a given cell across time or whatever the frames represent)
MethodDef proto bool mat_cell_to_vec(float_Matrix* vec, const float_Matrix* mat, int cell_no)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_dist
MethodDef desc: compute distance matrix of frames within matrix src_mat (must be dim &gt;= 2) -- dist_mat is nframes x nframes
MethodDef proto bool mat_dist(float_Matrix* dist_mat, const float_Matrix* src_mat, taMath::DistMetric metric, bool norm = false, float tolerance = 0.0f)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_cross_dist
MethodDef desc: compute cross distance matrix between the frames within src_mat_a and src_mat_b (must be dim &gt;= 2 and have same frame size) -- rows of dist_mat are a, cols are b
MethodDef proto bool mat_cross_dist(float_Matrix* dist_mat, const float_Matrix* src_mat_a, const float_Matrix* src_mat_b, taMath::DistMetric metric, bool norm = false, float tolerance = 0.0f)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_correl
MethodDef desc: compute correlation matrix for cells across frames within src_mat (i.e., how does each cell co-vary across time/frames with each other cell). result is nxn matrix where n is number of cells in each frame of src_mat (i.e., size of sub-matrix), with each cell being correlation of that cell with other cell.
MethodDef proto bool mat_correl(float_Matrix* correl_mat, const float_Matrix* src_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_prjn
MethodDef desc: compute projection of each frame of src_mat onto prjn_mat. prjn_vec contains one value for each frame in src_mat, which is the inner/dot product (projection -- or other metric if selected) of that frame and the prjn_mat.
MethodDef proto bool mat_prjn(float_Matrix* prjn_vec, const float_Matrix* src_mat, const float_Matrix* prjn_mat, taMath::DistMetric metric = INNER_PROD, bool norm = false, float tolerance = 0.0f)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_time_avg
MethodDef desc: replace matrix values with their running (exponentially-weighted) time-averaged values (new_val = avg_dt * running_avg + (1-avg_dt) * old_val
MethodDef proto bool mat_time_avg(float_Matrix* a, float avg_dt)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_convolve
MethodDef desc: convolve in_mat with kernel to produce out_mat, in a cell-by-cell manner across frames. always keeps the edges by clipping and renormalizing the kernel all the way to both edges
MethodDef proto bool mat_frame_convolve(float_Matrix* out_mat, const float_Matrix* in_mat, const float_Matrix* kernel)
MethodDef opts [u'CAT_Convolution']
MethodDef name: mat_fmt_out_frame
MethodDef desc: format out_mat as one frame (inner dimensions) of in_mat (i.e., out_mat has n-1 dimensions relative to in_mat)
MethodDef proto bool mat_fmt_out_frame(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_set_n
MethodDef desc: set out_mat to the number of frames for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_set_n(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_first
MethodDef desc: compute first item for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_first(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_last
MethodDef desc: compute last item for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_last(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_find_first
MethodDef desc: compute index of first item that meets relationship rel for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_find_first(float_Matrix* out_mat, const float_Matrix* in_mat, Relation&amp; rel)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_find_last
MethodDef desc: compute index of last item that meets relationship rel for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_find_last(float_Matrix* out_mat, const float_Matrix* in_mat, Relation&amp; rel)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_max
MethodDef desc: compute maximum for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_max(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_min
MethodDef desc: compute minimum for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_min(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_abs_max
MethodDef desc: compute maximum of absolute values for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_abs_max(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_abs_min
MethodDef desc: compute minimum of absolute values for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_abs_min(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_sum
MethodDef desc: compute sum for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_sum(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_prod
MethodDef desc: compute product for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_prod(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_mean
MethodDef desc: compute mean for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_mean(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_var
MethodDef desc: compute variance for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_var(float_Matrix* out_mat, const float_Matrix* in_mat, bool use_est = false)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_std_dev
MethodDef desc: compute standard deviation for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_std_dev(float_Matrix* out_mat, const float_Matrix* in_mat, bool use_est = false)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_sem
MethodDef desc: compute standard error of the mean for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_sem(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_ss_len
MethodDef desc: compute sum-of-squares length for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_ss_len(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_ss_mean
MethodDef desc: compute sum of squares around the mean for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_ss_mean(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_count
MethodDef desc: compute count number of times relationship rel is true for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_count(float_Matrix* out_mat, const float_Matrix* in_mat, Relation&amp; rel)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_median
MethodDef desc: compute median (middle value -- requires sorting) for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_median(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_mode
MethodDef desc: compute mode (most frequent) value (requires sorting) for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_mode(float_Matrix* out_mat, const float_Matrix* in_mat)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_quantile
MethodDef desc: compute arbitrary quantile according to quant_pos value, which is a proportion 0-1 from start to end of sorted list of values, e.g., .5 = median, .25 = first quartile, etc, for each value within inner frame dimensions across matrix frames (last outer dimension)
MethodDef proto bool mat_frame_quantile(float_Matrix* out_mat, const float_Matrix* in_mat, float quant_pos)
MethodDef opts [u'CAT_HighDimMatrix']
MethodDef name: mat_frame_aggregate
MethodDef desc: compute aggregate across matrix frames (last outer dimension) for each value within inner frame dimensions, using aggregation params of agg
MethodDef proto bool mat_frame_aggregate(float_Matrix* out_mat, const float_Matrix* in_mat, Aggregate&amp; agg)
MethodDef opts [u'CAT_Aggregate']
MethodDef name: fft_real_transform
MethodDef desc: compute the radix-N FFT of the real data in in_mat, writing the complex output to out_mat (d0[0]=real,d0[1]=imag) if real_out=0 or the power sqrt(r^2+i^2) if real_out=1; if there are more than 1 dims in in_mat, the FFT is computed for all frames of d0; real_out=1 computes norm=1 divides results by 1/sqrt(N) which makes the forward and reverse FFTs symmetric
MethodDef proto bool fft_real_transform(float_Matrix* out_mat, const float_Matrix* in_mat, bool real_out = false, bool norm = true)
MethodDef opts [u'CAT_FFT']
MethodDef names [u'Ftest_q', u'acos', u'add', u'asin', u'atan', u'atan2', u'beta', u'beta_i', u'bico_ln', u'binom_cum', u'binom_den', u'binom_dev', u'ceil', u'chisq_p', u'chisq_q', u'cos', u'cos_deg', u'cosh', u'div', u'erf', u'erfc', u'euc_dist', u'euc_dist_sq', u'exp', u'fabs', u'fact_ln', u'fft_real_transform', u'floor', u'fmod', u'gamma_cum', u'gamma_den', u'gamma_dev', u'gamma_ln', u'gamma_p', u'gamma_q', u'gauss_cum', u'gauss_den', u'gauss_den_sig', u'gauss_den_sq_sig', u'gauss_dev', u'gauss_inv', u'gauss_inv_lim', u'hyperg', u'hypot', u'hypot_sq', u'log', u'log10', u'logistic', u'mat_add', u'mat_cell_to_vec', u'mat_col', u'mat_correl', u'mat_cross_dist', u'mat_dist', u'mat_div_els', u'mat_eigen', u'mat_eigen_owrite', u'mat_fmt_out_frame', u'mat_frame_abs_max', u'mat_frame_abs_min', u'mat_frame_aggregate', u'mat_frame_convolve', u'mat_frame_count', u'mat_frame_find_first', u'mat_frame_find_last', u'mat_frame_first', u'mat_frame_last', u'mat_frame_max', u'mat_frame_mean', u'mat_frame_median', u'mat_frame_min', u'mat_frame_mode', u'mat_frame_prod', u'mat_frame_quantile', u'mat_frame_sem', u'mat_frame_set_n', u'mat_frame_ss_len', u'mat_frame_ss_mean', u'mat_frame_std_dev', u'mat_frame_sum', u'mat_frame_var', u'mat_mds', u'mat_mds_owrite', u'mat_mult_els', u'mat_prjn', u'mat_row', u'mat_sub', u'mat_svd', u'mat_svd_owrite', u'mat_time_avg', u'max', u'min', u'mult', u'poisson_cum', u'poisson_den', u'poisson_dev', u'pow', u'round', u'sin', u'sin_deg', u'sinh', u'sqrt', u'students_cum', u'students_cum_cum', u'students_den', u'sub', u'tan', u'tan_deg', u'tanh', u'vec_abs_max', u'vec_abs_min', u'vec_add', u'vec_add_scalar', u'vec_aggregate', u'vec_check_same_size', u'vec_convolve', u'vec_correl', u'vec_count', u'vec_covar', u'vec_cross_entropy', u'vec_dist', u'vec_div_els', u'vec_div_scalar', u'vec_euclid_dist', u'vec_find_first', u'vec_find_last', u'vec_first', u'vec_fm_ints', u'vec_gauss_inv', u'vec_gauss_inv_lim', u'vec_hamming_dist', u'vec_histogram', u'vec_inner_prod', u'vec_kern_exp', u'vec_kern_gauss', u'vec_kern_pow', u'vec_kern_uniform', u'vec_last', u'vec_max', u'vec_mean', u'vec_median', u'vec_min', u'vec_mode', u'vec_mult_els', u'vec_mult_scalar', u'vec_norm_abs_max', u'vec_norm_len', u'vec_norm_max', u'vec_norm_sum', u'vec_prod', u'vec_quantile', u'vec_sem', u'vec_simple_math', u'vec_simple_math_arg', u'vec_sort', u'vec_ss_dist', u'vec_ss_len', u'vec_ss_mean', u'vec_stats', u'vec_std_dev', u'vec_students_cum', u'vec_students_cum_cum', u'vec_sub', u'vec_sub_scalar', u'vec_sum', u'vec_sum_range', u'vec_threshold', u'vec_to_ints', u'vec_var']
########################################################################
TypeDef len: 15
TypeDef name:  RndSeed
TypeDef type: class
TypeDef desc: random seeds: can control the random number generator to restart with the same pseudo-random sequence or get a new one
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: seed
MemberDef type: int_Array
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: the seed, 624 elements long
MemberDef name: mti
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: the index into the seed, also needs to be saved
MethodDef name: NewSeed
MethodDef desc: set the seed to a new random value (based on time and process id)
MethodDef proto void NewSeed()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: OldSeed
MethodDef desc: restore current seed to random num generator
MethodDef proto void OldSeed()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: GetCurrent
MethodDef desc: get the current seed in use by the generator
MethodDef proto void GetCurrent()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: Init
MethodDef desc: initialize the seed based on given initializer
MethodDef proto void Init(ulong i)
MethodDef names [u'GetCurrent', u'Init', u'NewSeed', u'OldSeed']
########################################################################
TypeDef len: 15
TypeDef name:  RndSeed_List
TypeDef type: class
TypeDef desc: list of random seeds
TypeDef cats:, [u'Math']
TypeDef opts:, [u'DEF_CHILD_seeds', u'DEF_CHILDNAME_Random_Seeds', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: seeds
MemberDef type: taList_RndSeed_
MemberDef desc: the list of random seeds
MethodDef name: MakeSeeds
MethodDef desc: make set of random seed holder objects of given size
MethodDef proto void MakeSeeds(int n_seeds)
MethodDef opts [u'BUTTON']
MethodDef name: NewSeeds
MethodDef desc: get new seeds for all items in the list (overwrites existing seeds!)
MethodDef proto void NewSeeds()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: UseSeed
MethodDef desc: use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is &gt; list size (issues warning)
MethodDef proto void UseSeed(int idx)
MethodDef opts [u'BUTTON']
MethodDef names [u'MakeSeeds', u'NewSeeds', u'UseSeed']
########################################################################
TypeDef len: 17
TypeDef name:  Random
TypeDef type: class
TypeDef desc: Random Number Generation
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: UNIFORM
EnumDef val: UNIFORM
EnumDef: uniform with var = range on either side of the mean
EnumDef name: BINOMIAL
EnumDef val: BINOMIAL
EnumDef: binomial with var = p, par = n
EnumDef name: POISSON
EnumDef val: POISSON
EnumDef: poisson with lambda = var
EnumDef name: GAMMA
EnumDef val: GAMMA
EnumDef: gamma with var and par = stages
EnumDef name: GAUSSIAN
EnumDef val: GAUSSIAN
EnumDef: normal with var
EnumDef name: NONE
EnumDef val: NONE
EnumDef: just the mean
EnumDef names: [u'Type']
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: name of the object
MemberDef name: type
MemberDef type: Random::Type
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: type of random variable to generate
MemberDef name: mean
MemberDef type: double
MemberDef desc: mean of random distribution
MemberDef name: var
MemberDef type: double
MemberDef opts [u'CONDEDIT_OFF_type:NONE']
MemberDef cats []
MemberDef desc: &apos;varibility&apos; parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)
MemberDef name: par
MemberDef type: double
MemberDef opts [u'CONDEDIT_ON_type:GAMMA,BINOMIAL']
MemberDef cats []
MemberDef desc: extra parameter for distribution (depends on each one)
MethodDef name: Gen
MethodDef desc: generate a random variable according to current parameters
MethodDef proto double Gen()
MethodDef name: Density
MethodDef desc: get density of random variable according to current params
MethodDef proto double Density(double x)
MethodDef name: IntZeroN
MethodDef desc: uniform random integer in the range between 0 and n, exclusive of n: [0,n)
MethodDef proto int IntZeroN(int n)
MethodDef opts [u'CAT_Int']
MethodDef name: IntMinMax
MethodDef desc: uniform random integer in range between min and max, exclusive of max: [min,max)
MethodDef proto int IntMinMax(int min, int max)
MethodDef opts [u'CAT_Int']
MethodDef name: IntMeanRange
MethodDef desc: uniform random integer with given range on either side of the mean: [mean - range, mean + range]
MethodDef proto int IntMeanRange(int mean, int range)
MethodDef opts [u'CAT_Int']
MethodDef name: ZeroOne
MethodDef desc: uniform random number between zero and one (inclusive of 1 due to rounding!)
MethodDef proto double ZeroOne()
MethodDef opts [u'CAT_Float']
MethodDef name: UniformMinMax
MethodDef desc: uniform random number between min and max values (inclusive)
MethodDef proto double UniformMinMax(double min, double max)
MethodDef opts [u'CAT_Float']
MethodDef name: UniformMeanRange
MethodDef desc: uniform random number with given range on either size of the mean: [mean - range, mean + range]
MethodDef proto double UniformMeanRange(double mean, double range)
MethodDef opts [u'CAT_Float']
MethodDef name: Binom
MethodDef desc: binomial with n trials (par) each of probability p (var)
MethodDef proto double Binom(int n, double p)
MethodDef opts [u'CAT_Float']
MethodDef name: Poisson
MethodDef desc: poisson with parameter l (var)
MethodDef proto double Poisson(double l)
MethodDef opts [u'CAT_Float']
MethodDef name: Gamma
MethodDef desc: gamma with given variance, number of exponential stages (par)
MethodDef proto double Gamma(double var, int j)
MethodDef opts [u'CAT_Float']
MethodDef name: Gauss
MethodDef desc: gaussian (normal) random number with given standard deviation
MethodDef proto double Gauss(double stdev)
MethodDef opts [u'CAT_Float']
MethodDef name: UniformDen
MethodDef desc: uniform density at x with given range on either size of 0 (subtr mean from x before)
MethodDef proto double UniformDen(double x, double range)
MethodDef opts [u'CAT_Float']
MethodDef name: BinomDen
MethodDef desc: binomial density at j with n trials (par) each of probability p (var)
MethodDef proto double BinomDen(int n, int j, double p)
MethodDef opts [u'CAT_Float']
MethodDef name: PoissonDen
MethodDef desc: poisson density with parameter l (var)
MethodDef proto double PoissonDen(int j, double l)
MethodDef opts [u'CAT_Float']
MethodDef name: GammaDen
MethodDef desc: gamma density at time t with given number of stages (par), lambda (var)
MethodDef proto double GammaDen(int j, double l, double t)
MethodDef opts [u'CAT_Float']
MethodDef name: GaussDen
MethodDef desc: gaussian (normal) density for given standard deviation (0 mean)
MethodDef proto double GaussDen(double x, double stdev)
MethodDef opts [u'CAT_Float']
MethodDef name: BoolProb
MethodDef desc: boolean true/false with given probability
MethodDef proto bool BoolProb(double p)
MethodDef opts [u'CAT_Bool']
MethodDef names [u'Binom', u'BinomDen', u'BoolProb', u'Density', u'Gamma', u'GammaDen', u'Gauss', u'GaussDen', u'Gen', u'IntMeanRange', u'IntMinMax', u'IntZeroN', u'Poisson', u'PoissonDen', u'UniformDen', u'UniformMeanRange', u'UniformMinMax', u'ZeroOne']
########################################################################
TypeDef len: 17
TypeDef name:  TwoDCoord
TypeDef type: class
TypeDef desc: a value in 2D coordinate space
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
TypeDef children: [u'PosTwoDCoord', u'TDCoord']
MemberDef name: x
MemberDef type: int
MemberDef desc: horizontal
MemberDef name: y
MemberDef type: int
MemberDef desc: vertical
MethodDef name: isZero
MethodDef proto bool isZero()
MethodDef name: SetXY
MethodDef proto void SetXY(float xx, float yy)
MethodDef name: GetXY
MethodDef proto void GetXY(float&amp; xx, float&amp; yy)
MethodDef name: CopyToMatrixGeom
MethodDef proto void CopyToMatrixGeom(MatrixGeom&amp; geom)
MethodDef name: OrEq
MethodDef proto bool OrEq(const TwoDCoord&amp; td)
MethodDef name: SqMag
MethodDef desc: squared magnitude of vector
MethodDef proto int SqMag()
MethodDef name: Mag
MethodDef proto float Mag()
MethodDef name: SqDist
MethodDef proto float SqDist(const TwoDCoord&amp; td)
MethodDef name: Dist
MethodDef proto float Dist(const TwoDCoord&amp; td)
MethodDef name: Sum
MethodDef proto int Sum()
MethodDef name: Product
MethodDef proto int Product()
MethodDef name: Sgn
MethodDef proto int Sgn(int val)
MethodDef name: Absv
MethodDef proto int Absv(int val)
MethodDef name: Invert
MethodDef proto void Invert()
MethodDef name: SumNorm
MethodDef proto void SumNorm()
MethodDef name: Abs
MethodDef proto void Abs()
MethodDef name: Min
MethodDef proto void Min(TwoDCoord&amp; td)
MethodDef name: Max
MethodDef proto void Max(TwoDCoord&amp; td)
MethodDef name: MaxVal
MethodDef proto int MaxVal()
MethodDef name: MinVal
MethodDef proto int MinVal()
MethodDef name: GetStr
MethodDef proto taString GetStr()
MethodDef name: FitN
MethodDef desc: adjust x and y to fit x total elements
MethodDef proto bool FitN(int n)
MethodDef name: SetGtEq
MethodDef desc: set each to be greater than or equal to n
MethodDef proto void SetGtEq(int n)
MethodDef name: SetLtEq
MethodDef desc: set each to be less than or equal to n
MethodDef proto void SetLtEq(int n)
MethodDef name: WrapClipOne
MethodDef desc: wrap-around or clip one dimension, true if clipped (coord set to -1)
MethodDef proto bool WrapClipOne(bool wrap, int&amp; c, int max)
MethodDef name: WrapClip
MethodDef desc: wrap-around or clip coordinates within 0,0 - max range, true if clipped
MethodDef proto bool WrapClip(bool wrap, const TwoDCoord&amp; max)
MethodDef names [u'Abs', u'Absv', u'CopyToMatrixGeom', u'Dist', u'FitN', u'GetStr', u'GetXY', u'Invert', u'Mag', u'Max', u'MaxVal', u'Min', u'MinVal', u'OrEq', u'Product', u'SetGtEq', u'SetLtEq', u'SetXY', u'Sgn', u'SqDist', u'SqMag', u'Sum', u'SumNorm', u'WrapClip', u'WrapClipOne', u'isZero']
########################################################################
TypeDef len: 13
TypeDef name:  PosTwoDCoord
TypeDef type: class
TypeDef desc: positive-only value in 2D coordinate space
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'TwoDCoord']
TypeDef children: [u'XYNGeom']
########################################################################
TypeDef len: 17
TypeDef name:  TDCoord
TypeDef type: class
TypeDef desc: a value in 3D coordinate space
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'TwoDCoord']
TypeDef children: [u'PosTDCoord']
MemberDef name: z
MemberDef type: int
MemberDef desc: depth
MethodDef name: SetXYZ
MethodDef proto void SetXYZ(float xx, float yy, float zz)
MethodDef name: GetXYZ
MethodDef proto void GetXYZ(float&amp; xx, float&amp; yy, float&amp; zz)
MethodDef name: FitNinXY
MethodDef desc: adjust x and y to fit x total elements
MethodDef proto bool FitNinXY(int n)
MethodDef names [u'FitNinXY', u'GetXYZ', u'SetXYZ']
########################################################################
TypeDef len: 11
TypeDef name:  PosTDCoord
TypeDef type: class
TypeDef desc: positive-only value in 3D coordinate space
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'TwoDCoord', u'TDCoord']
########################################################################
TypeDef len: 17
TypeDef name:  FloatTwoDCoord
TypeDef type: class
TypeDef desc: a value in 2D coordinate space
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
TypeDef children: [u'FloatTDCoord']
MemberDef name: x
MemberDef type: float
MemberDef desc: horizontal
MemberDef name: y
MemberDef type: float
MemberDef desc: vertical
MethodDef name: SetXY
MethodDef proto void SetXY(float xx, float yy)
MethodDef name: GetXY
MethodDef proto void GetXY(float&amp; xx, float&amp; yy)
MethodDef name: SqMag
MethodDef desc: squared magnitude of vector
MethodDef proto float SqMag()
MethodDef name: Mag
MethodDef proto float Mag()
MethodDef name: SqDist
MethodDef proto float SqDist(const FloatTwoDCoord&amp; td)
MethodDef name: Dist
MethodDef proto float Dist(const FloatTwoDCoord&amp; td)
MethodDef name: Sum
MethodDef proto float Sum()
MethodDef name: Product
MethodDef proto float Product()
MethodDef name: Invert
MethodDef proto void Invert()
MethodDef name: MagNorm
MethodDef proto void MagNorm()
MethodDef name: SumNorm
MethodDef proto void SumNorm()
MethodDef name: Abs
MethodDef proto void Abs()
MethodDef name: MaxVal
MethodDef proto float MaxVal()
MethodDef name: MinVal
MethodDef proto float MinVal()
MethodDef name: GetStr
MethodDef proto taString GetStr()
MethodDef names [u'Abs', u'Dist', u'GetStr', u'GetXY', u'Invert', u'Mag', u'MagNorm', u'MaxVal', u'MinVal', u'Product', u'SetXY', u'SqDist', u'SqMag', u'Sum', u'SumNorm']
########################################################################
TypeDef len: 17
TypeDef name:  FloatTDCoord
TypeDef type: class
TypeDef desc: a real value in 3D coordinate space
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'FloatTwoDCoord']
TypeDef children: [u'FloatRotation']
MemberDef name: z
MemberDef type: float
MemberDef desc: depth
MethodDef name: SetXYZ
MethodDef proto void SetXYZ(float xx, float yy, float zz)
MethodDef name: GetXYZ
MethodDef proto void GetXYZ(float&amp; xx, float&amp; yy, float&amp; zz)
MethodDef name: Equals
MethodDef proto bool Equals(float xx, float yy, float zz)
MethodDef name: Sgn
MethodDef proto float Sgn(float val)
MethodDef names [u'Equals', u'GetXYZ', u'SetXYZ', u'Sgn']
########################################################################
TypeDef len: 13
TypeDef name:  XYNGeom
TypeDef type: class
TypeDef desc: two-dimensional X-Y geometry with possibility of total number n != x*y
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'TwoDCoord', u'PosTwoDCoord']
MemberDef name: n_not_xy
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED', u'DEF_false']
MemberDef cats []
MemberDef desc: total number of units is less than x * y
MemberDef name: n
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_n_not_xy:true']
MemberDef cats []
MemberDef desc: total number of units (=x*y unless n_not_xy is true)
########################################################################
TypeDef len: 15
TypeDef name:  FloatRotation
TypeDef type: class
TypeDef desc: 3-d rotation data, xyz specify the rotation axis
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'FloatTwoDCoord', u'FloatTDCoord']
MemberDef name: rot
MemberDef type: float
MemberDef desc: rotation angle, in radians
MethodDef name: SetXYZR
MethodDef proto void SetXYZR(float xx, float yy, float zz, float rr)
MethodDef name: GetXYZR
MethodDef proto void GetXYZR(float&amp; xx, float&amp; yy, float&amp; zz, float&amp; rr)
MethodDef names [u'GetXYZR', u'SetXYZR']
########################################################################
TypeDef len: 13
TypeDef name:  FloatTransform
TypeDef type: class
TypeDef desc: 3-d transformation data; applied in order: s, r, t
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: scale
MemberDef type: FloatTDCoord
MemberDef desc: scale factors, in x, y, and z
MemberDef name: rotate
MemberDef type: FloatRotation
MemberDef desc: rotation
MemberDef name: translate
MemberDef type: FloatTDCoord
MemberDef desc: translate, in x, y, and z
########################################################################
TypeDef len: 15
TypeDef name:  ValIdx
TypeDef type: class
TypeDef desc: a float value and an index: very useful for sorting!
TypeDef cats:, [u'Math']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: val
MemberDef type: float
MemberDef desc: value
MemberDef name: idx
MemberDef type: int
MemberDef desc: index
MethodDef name: SetValIdx
MethodDef proto void SetValIdx(float v, int i)
MethodDef name: GetValIdx
MethodDef proto void GetValIdx(float&amp; v, int&amp; i)
MethodDef name: GetStr
MethodDef proto taString GetStr()
MethodDef names [u'GetStr', u'GetValIdx', u'SetValIdx']
########################################################################
TypeDef len: 9
TypeDef name:  ValIdx_Array
TypeDef type: class
TypeDef desc: array of value &amp; index items
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 17
TypeDef name:  DataBlock
TypeDef type: class
TypeDef desc: abstract base class interface for objects that provide (source) and/or accept (sink) data
TypeDef cats:, [u'Data']
TypeDef opts:, [u'VIRT_BASE', u'STEM_BASE', u'NO_INSTANCE', u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase']
TypeDef children: [u'DataBlock_Idx', u'ImageReader']
EnumDef name: DB_NONE
EnumDef val: DB_NONE
EnumDef name: DB_INDEXABLE
EnumDef val: DB_INDEXABLE
EnumDef: items can be access randomly, by index
EnumDef name: DB_SEQUENCABLE
EnumDef val: DB_SEQUENCABLE
EnumDef: items can be accessed sequentially (note: usually true)
EnumDef name: DB_SOURCE
EnumDef val: DB_SOURCE
EnumDef: is a data source (provides data, &apos;read&apos;)
EnumDef name: DB_SINK
EnumDef val: DB_SINK
EnumDef: is a data sink (accepts data, &apos;write&apos;)
EnumDef name: DB_SINK_GROWABLE
EnumDef val: DB_SINK_GROWABLE
EnumDef: a sink that can be extended (via AddItem)
EnumDef name: DB_SINK_DYNAMIC
EnumDef val: DB_SINK_DYNAMIC
EnumDef: a sink whose schema can be modified
EnumDef names: [u'DBOptions']
MethodDef name: dbOptions
MethodDef desc: options the instance type support
MethodDef proto DBOptions dbOptions()
MethodDef opts [u'CAT_Access']
MethodDef name: isIndexable
MethodDef desc: true if can be accessed by index
MethodDef proto bool isIndexable()
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: isSequencable
MethodDef desc: true if can be accessed sequentially
MethodDef proto bool isSequencable()
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: isSource
MethodDef desc: true if is a data source
MethodDef proto bool isSource()
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: isSink
MethodDef desc: true if is a data sink
MethodDef proto bool isSink()
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: isSinkGrowable
MethodDef desc: true if sink is growable (via AddItem)
MethodDef proto bool isSinkGrowable()
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: isSinkDynamic
MethodDef desc: true if sink schema can be modified
MethodDef proto bool isSinkDynamic()
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: ItemCount
MethodDef desc: number of items (if indexable)
MethodDef proto int ItemCount()
MethodDef opts [u'CAT_Access']
MethodDef name: ReadIndex
MethodDef desc: index of current item to read (source), if indexible
MethodDef proto int ReadIndex()
MethodDef opts [u'CAT_Access']
MethodDef name: WriteIndex
MethodDef desc: index of current item to write (sink), if indexible
MethodDef proto int WriteIndex()
MethodDef opts [u'CAT_Access']
MethodDef name: ResetData
MethodDef desc: for supported devices, clears all the data (but not the schema)
MethodDef proto void ResetData()
MethodDef opts [u'CAT_Modify']
MethodDef name: ReadOpen
MethodDef desc: opens the block for read operation -- call prior to reading data to perform any initialization required by data source
MethodDef proto bool ReadOpen()
MethodDef opts [u'CAT_Source']
MethodDef name: ReadClose
MethodDef desc: closes the block for read operation -- call when done reading data -- performs any cleanup/freeing of resources after reading
MethodDef proto void ReadClose()
MethodDef opts [u'CAT_Source']
MethodDef name: ReadFirst
MethodDef desc: (re-)initializes sequential read iteration, reads first item so that it is now available for GetData routines (false if no items available)
MethodDef proto bool ReadFirst()
MethodDef opts [u'CAT_Source']
MethodDef name: ReadNext
MethodDef desc: read next item of data (sequential access) so that it is now available for GetData routines -- returns true if item available
MethodDef proto bool ReadNext()
MethodDef opts [u'CAT_Source']
MethodDef name: ReadItem
MethodDef desc: goes directly (random access) to item idx (-1 = last item available, otherwise must be in range 0 &lt;= idx &lt; ItemCount()) so that it is now available for GetData routines, returns true if item exists and was read
MethodDef proto bool ReadItem(int idx)
MethodDef opts [u'CAT_Source']
MethodDef name: ReadAvailable
MethodDef desc: true when a valid item is available for reading by GetData routines
MethodDef proto bool ReadAvailable()
MethodDef opts [u'CAT_Source']
MethodDef name: SourceChannelCount
MethodDef desc: number of source channels available for reading
MethodDef proto int SourceChannelCount()
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: SourceChannelInRange
MethodDef desc: is this channel number available for reading
MethodDef proto bool SourceChannelInRange(int chan)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: SourceChannelName
MethodDef desc: name of source channel from channel index
MethodDef proto const_taString SourceChannelName(int chan)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: GetSourceChannelByName
MethodDef desc: get the source channel number for the name; -1 if none
MethodDef proto int GetSourceChannelByName(const taString&amp; ch_nm, bool err_msg = true)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: GetData
MethodDef desc: get source data from given channel index -- must have done Read first!
MethodDef proto const_Variant GetData(int chan)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: GetDataByName
MethodDef desc: get source data from given channel name -- must have done Read first!
MethodDef proto const_Variant GetDataByName(const taString&amp; ch_nm)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: GetMatrixData
MethodDef desc: get source data from Matrix channel -- must have done Read first; note: you must taBase::Ref/unRefDone the matrix
MethodDef proto taMatrix_ptr GetMatrixData(int chan)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: GetMatrixDataByName
MethodDef desc: get source data from Matrix channel -- must have done Read first; note: you must taBase::Ref/unRefDone the matrix
MethodDef proto taMatrix_ptr GetMatrixDataByName(const taString&amp; ch_nm)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: GetMatrixCellData
MethodDef desc: get source data cell from Matrix channel -- must have done Read first; cell is one element in matrix data, using a flat index regardless of dimensionality
MethodDef proto const_Variant GetMatrixCellData(int chan, int cell)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: GetMatrixCellDataByName
MethodDef desc: get source data cell from Matrix channel of given name -- must have done Read first; cell is one element in matrix data, using a flat index regardless of dimensionality
MethodDef proto const_Variant GetMatrixCellDataByName(const taString&amp; ch_nm, int cell)
MethodDef opts [u'CAT_SourceChannel']
MethodDef name: WriteOpen
MethodDef desc: opens the block for write operation -- call prior to writing any data to perform any initialization required by data sink
MethodDef proto bool WriteOpen()
MethodDef opts [u'CAT_Sink']
MethodDef name: WriteClose
MethodDef desc: closes the block for write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, flushing of buffers, etc
MethodDef proto void WriteClose()
MethodDef opts [u'CAT_Sink']
MethodDef name: WriteFirst
MethodDef desc: (re-)initializes sequential write iteration, makes first item of data available for wirting with SetData routines (false if no items available)
MethodDef proto bool WriteFirst()
MethodDef opts [u'CAT_Sink']
MethodDef name: WriteNext
MethodDef desc: goes to next item of data (sequential acccess) for writing by SetData routines, creating a new one if at end; true if item available
MethodDef proto bool WriteNext()
MethodDef opts [u'CAT_Sink']
MethodDef name: WriteItem
MethodDef desc: goes directly (random access) to item idx (in range 0 &lt;= idx &lt; ItemCount()) for SetData writing routines, if 1+end, adds a new item; true if item available
MethodDef proto bool WriteItem(int idx)
MethodDef opts [u'CAT_Sink']
MethodDef name: WriteAvailable
MethodDef desc: true when a valid item is available for writing by SetData routines
MethodDef proto bool WriteAvailable()
MethodDef opts [u'CAT_Sink']
MethodDef name: SinkChannelCount
MethodDef desc: number of sink channels available for writing
MethodDef proto int SinkChannelCount()
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SinkChannelInRange
MethodDef desc: is this channel number available for writing
MethodDef proto bool SinkChannelInRange(int chan)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SinkChannelName
MethodDef desc: Get name of sink channel from channel index
MethodDef proto const_taString SinkChannelName(int chan)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: GetSinkChannelByName
MethodDef desc: get the channel number for the name; -1 if none
MethodDef proto int GetSinkChannelByName(const taString&amp; ch_nm, bool err_msg = true)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: AddSinkChannel
MethodDef desc: add a sink channel; returns true if ok, and sets the chan_num
MethodDef proto bool AddSinkChannel(ChannelSpec* cs)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: AssertSinkChannel
MethodDef desc: make sure sink channel exists; returns true if ok, and sets the chan_num
MethodDef proto bool AssertSinkChannel(ChannelSpec* cs)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: DeleteSinkChannel
MethodDef desc: delete given sink channel
MethodDef proto void DeleteSinkChannel(int chan)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: DeleteSinkChannelByName
MethodDef desc: delete given sink channel indicated by name
MethodDef proto void DeleteSinkChannelByName(const taString&amp; ch_nm)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SetData
MethodDef desc: set the data for a given channel index -- must have done Write first! returns true if successful
MethodDef proto bool SetData(const Variant&amp; data, int chan)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SetDataByName
MethodDef desc: set the data for given channel name -- must have done Write first! returns true if successful
MethodDef proto bool SetDataByName(const Variant&amp; data, const taString&amp; ch_nm)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SetMatrixData
MethodDef desc: set the data for given Matrix channel -- must have done Write first! returns true if successful
MethodDef proto bool SetMatrixData(const taMatrix* data, int chan)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SetMatrixDataByName
MethodDef desc: set the data for given matrix channel -- must have done Write first! returns true if successful
MethodDef proto bool SetMatrixDataByName(const taMatrix* data, const taString&amp; ch_nm)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SetMatrixCellData
MethodDef desc: set the data for given Matrix channel cell (flat index into matrix values) -- must have done Write first! returns true if successful
MethodDef proto bool SetMatrixCellData(const Variant&amp; data, int chan, int cell)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: SetMatrixCellDataByName
MethodDef desc: set the data for given matrix channel cell (flat index into matrix values) -- must have done Write first! returns true if successful
MethodDef proto bool SetMatrixCellDataByName(const Variant&amp; data, const taString&amp; ch_nm, int cell)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: GetSinkMatrix
MethodDef desc: gets a REF&apos;ed matrix (you MUST UnRefDone when finished) that you can use to write to the channel; this is ONLY guaranteed to be valid until the next write operation
MethodDef proto taMatrix_ptr GetSinkMatrix(int chan)
MethodDef opts [u'CAT_SinkChannel']
MethodDef name: GetSinkMatrixByName
MethodDef desc: gets a REF&apos;ed matrix (you MUST UnRefDone when finished) that you can use to write to the channel; this is ONLY guaranteed to be valid until the next write operation
MethodDef proto taMatrix_ptr GetSinkMatrixByName(const taString&amp; ch_nm)
MethodDef opts [u'CAT_SinkChannel']
MethodDef names [u'AddSinkChannel', u'AssertSinkChannel', u'DeleteSinkChannel', u'DeleteSinkChannelByName', u'GetData', u'GetDataByName', u'GetMatrixCellData', u'GetMatrixCellDataByName', u'GetMatrixData', u'GetMatrixDataByName', u'GetSinkChannelByName', u'GetSinkMatrix', u'GetSinkMatrixByName', u'GetSourceChannelByName', u'ItemCount', u'ReadAvailable', u'ReadClose', u'ReadFirst', u'ReadIndex', u'ReadItem', u'ReadNext', u'ReadOpen', u'ResetData', u'SetData', u'SetDataByName', u'SetMatrixCellData', u'SetMatrixCellDataByName', u'SetMatrixData', u'SetMatrixDataByName', u'SinkChannelCount', u'SinkChannelInRange', u'SinkChannelName', u'SourceChannelCount', u'SourceChannelInRange', u'SourceChannelName', u'WriteAvailable', u'WriteClose', u'WriteFirst', u'WriteIndex', u'WriteItem', u'WriteNext', u'WriteOpen', u'dbOptions', u'isIndexable', u'isSequencable', u'isSink', u'isSinkDynamic', u'isSinkGrowable', u'isSource']
########################################################################
TypeDef len: 17
TypeDef name:  ChannelSpec
TypeDef type: class
TypeDef desc: describes a channel of data in a DataBlock (e.g., a column of a datatable)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'MatrixChannelSpec']
MemberDef name: chan_num
MemberDef type: int
MemberDef opts [u'SHOW', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: the column number (-1=at end)
MemberDef name: val_type
MemberDef type: taBase::ValType
MemberDef desc: the type of data the channel uses
MethodDef name: isMatrix
MethodDef proto bool isMatrix()
MethodDef name: cellGeom
MethodDef proto const_MatrixGeom_ref cellGeom()
MethodDef name: usesCellNames
MethodDef proto bool usesCellNames()
MethodDef name: cellNames
MethodDef proto const_String_Matrix_ref cellNames()
MethodDef names [u'cellGeom', u'cellNames', u'isMatrix', u'usesCellNames']
########################################################################
TypeDef len: 15
TypeDef name:  MatrixChannelSpec
TypeDef type: class
TypeDef desc: describes a matrix channel of data in a DataBlock
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'ChannelSpec']
MemberDef name: cell_geom
MemberDef type: MatrixGeom
MemberDef desc: the geom of each cell
MemberDef name: uses_cell_names
MemberDef type: bool
MemberDef desc: set &apos;true&apos; if there are cell names associated
MemberDef name: cell_names
MemberDef type: String_Matrix
MemberDef opts [u'COND_EDIT_ON_uses_cell_names:true']
MemberDef cats []
MemberDef desc: (optional) the names associated with each cell
MethodDef name: SetCellGeom
MethodDef proto void SetCellGeom(bool uses_names, int dims, int d0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0)
MethodDef name: SetCellGeomN
MethodDef proto void SetCellGeomN(bool uses_names, const MatrixGeom&amp; geom)
MethodDef names [u'SetCellGeom', u'SetCellGeomN']
########################################################################
TypeDef len: 11
TypeDef name:  ChannelSpec_List
TypeDef type: class
TypeDef desc: a list of channel specifications
TypeDef cats:, [u'Data']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: UpdateDataBlockSchema
MethodDef proto void UpdateDataBlockSchema(DataBlock* db)
MethodDef names [u'UpdateDataBlockSchema']
########################################################################
TypeDef len: 13
TypeDef name:  DataBlock_Idx
TypeDef type: class
TypeDef desc: base class for a data source and/or sink that supports random access to data via an index
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'VIRT_BASE', u'NO_INSTANCE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'DataBlock']
TypeDef children: [u'DataTable', u'DirectoryCatalog']
########################################################################
TypeDef len: 15
TypeDef name:  T3DataViewFrame
TypeDef type: class
TypeDef desc: top-level taDataViewer object that contains one 3D data view of multiple objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_Frame', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer']
MemberDef name: root_view
MemberDef type: T3DataViewRoot
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: placeholder item -- contains the actual root(s) DataView items as children
MemberDef name: camera_pos
MemberDef type: FloatTDCoord
MemberDef desc: position of camera in view
MemberDef name: camera_orient
MemberDef type: FloatRotation
MemberDef desc: orientation of camera in view
MemberDef name: camera_focdist
MemberDef type: float
MemberDef desc: focalDistance of camera in view
MemberDef name: bg_color
MemberDef type: taColor
MemberDef opts [u'NO_ALPHA']
MemberDef cats []
MemberDef desc: background color of the frame (note: a not used)
MethodDef name: singleMode
MethodDef desc: true when one and only one child obj -- it can control some of our properties by default
MethodDef proto bool singleMode()
MethodDef name: singleChild
MethodDef desc: return the single child
MethodDef proto T3DataView_ptr singleChild()
MethodDef name: GetBgColor
MethodDef desc: get the effective bg color
MethodDef proto const_iColor GetBgColor()
MethodDef name: AddView
MethodDef desc: add a view
MethodDef proto void AddView(T3DataView* view)
MethodDef name: FindRootViewOfData
MethodDef desc: looks for a root view of the data, returns it if found; useful to check for existing view before adding a new one
MethodDef proto T3DataView_ptr FindRootViewOfData(taBase* data)
MethodDef name: ViewAll
MethodDef desc: reset the camera position to view everything in the display
MethodDef proto void ViewAll()
MethodDef name: GetCameraPosOrient
MethodDef desc: get camera&apos;s current position and orientation from viewer into my fields (for saving)
MethodDef proto void GetCameraPosOrient()
MethodDef name: SetCameraPosOrient
MethodDef desc: set camera&apos;s current position and orientation from viewer from my fields (during loading)
MethodDef proto void SetCameraPosOrient()
MethodDef name: SetImageSize
MethodDef desc: set size of SaveImageAs image to given size parameters
MethodDef proto void SetImageSize(int width, int height)
MethodDef name: SaveImageEPS
MethodDef desc: save image in EPS format
MethodDef proto bool SaveImageEPS(const taString&amp; fname)
MethodDef name: SaveImageIV
MethodDef desc: save image in IV (open inventor) format
MethodDef proto bool SaveImageIV(const taString&amp; fname)
MethodDef names [u'AddView', u'FindRootViewOfData', u'GetBgColor', u'GetCameraPosOrient', u'SaveImageEPS', u'SaveImageIV', u'SetCameraPosOrient', u'SetImageSize', u'ViewAll', u'singleChild', u'singleMode']
########################################################################
TypeDef len: 17
TypeDef name:  DataTable
TypeDef type: class
TypeDef desc: table of data of different types
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'FILETYPE_DataTable', u'EXT_dtbl', u'DEF_CHILD_data', u'DEF_CHILDNAME_Columns', u'DUMP_LOAD_POST', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'DataBlock', u'DataBlock_Idx']
EnumDef name: DF_NONE
EnumDef val: DF_NONE
EnumDef name: SAVE_ROWS
EnumDef val: SAVE_ROWS
EnumDef: save the row data associated with this table when saved with the project (column and other configuration information is always saved)
EnumDef name: HAS_CALCS
EnumDef val: HAS_CALCS
EnumDef: at least one of the columns has CALC flag set
EnumDef name: AUTO_CALC
EnumDef val: AUTO_CALC
EnumDef: automatically calculate columns
EnumDef name: NO_AUTO_LOAD
EnumDef val: NO_AUTO_LOAD
EnumDef: do not automatically load data file
EnumDef name: AUTO_LOAD
EnumDef val: AUTO_LOAD
EnumDef: automatically load a data file after loading
EnumDef name: PROMPT_LOAD
EnumDef val: PROMPT_LOAD
EnumDef: prompt about loading a data file after loading (if run in -nogui mode, it is automatically loaded)
EnumDef name: TAB
EnumDef val: TAB
EnumDef name: SPACE
EnumDef val: SPACE
EnumDef name: COMMA
EnumDef val: COMMA
EnumDef names: [u'AutoLoadMode', u'DataFlags', u'Delimiters']
MemberDef name: rows
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: the number of rows
MemberDef name: data
MemberDef type: DataTableCols
MemberDef desc: all the columns and actual data
MemberDef name: data_flags
MemberDef type: DataTable::DataFlags
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: flags for various features and state of the data table
MemberDef name: auto_load
MemberDef type: DataTable::AutoLoadMode
MemberDef opts [u'APPLY_IMMED', u'CONDEDIT_OFF_data_flags:SAVE_ROWS']
MemberDef cats []
MemberDef desc: whether to automatically load a data file from auto_load_file when data table object is loaded (only applicable when SAVE_ROWS is not active -- makes the project file smaller for large data tables, but the cost is that the project is no longer self contained)
MemberDef name: auto_load_file
MemberDef type: taString
MemberDef opts [u'CONDEDIT_OFF_auto_load:NO_AUTO_LOAD']
MemberDef cats []
MemberDef desc: file to load data table from if AUTO_LOAD option is set (if file name has .dtbl extention, it is loaded using internal Load format, otherwise LoadData is used)
MethodDef name: SetDataFlag
MethodDef desc: set data column flag state on
MethodDef proto void SetDataFlag(DataTable::DataFlags flg)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: ClearDataFlag
MethodDef desc: clear data column flag state (set off)
MethodDef proto void ClearDataFlag(DataTable::DataFlags flg)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: HasDataFlag
MethodDef desc: check if data column flag is set
MethodDef proto bool HasDataFlag(DataTable::DataFlags flg)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SetDataFlagState
MethodDef desc: set data column flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetDataFlagState(DataTable::DataFlags flg, bool on)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: cols
MethodDef desc: number of columns
MethodDef proto int cols()
MethodDef opts [u'CAT_Columns']
MethodDef name: NewCol
MethodDef desc: create new scalar column of data of specified type
MethodDef proto DataCol_ptr NewCol(taBase::ValType val_type, const taString&amp; col_nm)
MethodDef opts [u'CAT_Columns']
MethodDef name: NewCol_gui
MethodDef desc: create new scalar column of data of specified type
MethodDef proto DataCol_ptr NewCol_gui(taBase::ValType val_type, const taString&amp; col_nm)
MethodDef opts [u'MENU', u'MENU_ON_Columns', u'LABEL_NewCol', u'CAT_Columns']
MethodDef name: NewColMatrix
MethodDef desc: create new matrix column of data of specified type, with specified cell geom
MethodDef proto DataCol_ptr NewColMatrix(taBase::ValType val_type, const taString&amp; col_nm, int dims = 1, int d0 = 0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Columns']
MethodDef name: NewColMatrixN
MethodDef desc: create new matrix column of data of specified type, with specified cell geom
MethodDef proto DataCol_ptr NewColMatrixN(taBase::ValType val_type, const taString&amp; col_nm, const MatrixGeom&amp; cell_geom, int&amp; col_idx = idx_def_arg)
MethodDef opts [u'CAT_Columns']
MethodDef name: NewColMatrixN_gui
MethodDef desc: create new matrix column of data of specified type, with specified cell geom
MethodDef proto DataCol_ptr NewColMatrixN_gui(taBase::ValType val_type, const taString&amp; col_nm, const MatrixGeom&amp; cell_geom)
MethodDef opts [u'MENU', u'MENU_ON_Columns', u'LABEL_NewColMatrix', u'CAT_Columns']
MethodDef name: NewColDouble
MethodDef desc: create new column of double data
MethodDef proto double_Data_ptr NewColDouble(const taString&amp; col_nm)
MethodDef opts [u'CAT_Columns']
MethodDef name: NewColFloat
MethodDef desc: create new column of floating point data
MethodDef proto float_Data_ptr NewColFloat(const taString&amp; col_nm)
MethodDef opts [u'CAT_Columns']
MethodDef name: NewColInt
MethodDef desc: create new column of integer-level data (= narrow display, actually stored as float)
MethodDef proto int_Data_ptr NewColInt(const taString&amp; col_nm)
MethodDef opts [u'CAT_Columns']
MethodDef name: NewColString
MethodDef desc: create new column of string data
MethodDef proto String_Data_ptr NewColString(const taString&amp; col_nm)
MethodDef opts [u'CAT_Columns']
MethodDef name: SetColName
MethodDef desc: set column name for given column
MethodDef proto void SetColName(const taString&amp; col_nm, int col)
MethodDef opts [u'CAT_Columns']
MethodDef name: RenameCol
MethodDef desc: rename column with current name cur_nm to new name new_nm (returns false if ccur_nm not found)
MethodDef proto bool RenameCol(const taString&amp; cur_nm, const taString&amp; new_nm)
MethodDef opts [u'CAT_Columns']
MethodDef name: FindColName
MethodDef desc: find a column of the given name; if err_msg then generate an error if not found
MethodDef proto DataCol_ptr FindColName(const taString&amp; col_nm, int&amp; col_idx = idx_def_arg, bool err_msg = false)
MethodDef opts [u'CAT_Columns', u'ARGC_1']
MethodDef name: FindMakeCol
MethodDef desc: insures that a scalar column of the given name and val type exists, and return that col.
MethodDef proto DataCol_ptr FindMakeCol(const taString&amp; col_nm, taBase::ValType val_type = VT_FLOAT)
MethodDef opts [u'CAT_Columns']
MethodDef name: FindMakeColMatrix
MethodDef desc: insures that a matrix column of the given name, val type, and dimensions exists, and returns that col.
MethodDef proto DataCol_ptr FindMakeColMatrix(const taString&amp; col_nm, taBase::ValType val_type = VT_FLOAT, int dims = 1, int d0 = 0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Columns']
MethodDef name: FindMakeColName
MethodDef desc: find a column of the given name, val type, and dimension. if one does not exist, then create it. Note that dims &lt; 1 means make a scalar column, not a matrix
MethodDef proto DataCol_ptr FindMakeColName(const taString&amp; col_nm, int&amp; col_idx = idx_def_arg, taBase::ValType val_type = VT_FLOAT, int dims = 0, int d0 = 0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'EXPERT', u'CAT_Columns']
MethodDef name: ChangeColTypeGeom
MethodDef desc: change type and/or geometry of column with given name
MethodDef proto void ChangeColTypeGeom(const taString&amp; col_nm, taBase::ValType val_type, int dims = 0, int d0 = 0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_Columns']
MethodDef name: GetColMatrix
MethodDef desc: get matrix for given column -- WARNING: this is NOT row-number safe
MethodDef proto taMatrix_ptr GetColMatrix(int col)
MethodDef opts [u'CAT_Columns']
MethodDef name: ColMatchesChannelSpec
MethodDef desc: returns &apos;true&apos; if the col has the same name and a compatible data type
MethodDef proto bool ColMatchesChannelSpec(const DataCol* da, const ChannelSpec* cs)
MethodDef opts [u'CAT_Columns']
MethodDef name: NewColFromChannelSpec
MethodDef desc: create new matrix column of data based on name/type in the data item (default is Variant)
MethodDef proto DataCol_ptr NewColFromChannelSpec(ChannelSpec* cs)
MethodDef opts [u'MENU_1N', u'CAT_Columns']
MethodDef name: GetColForChannelSpec
MethodDef desc: find existing or create new matrix column of data based on name/type in the data item
MethodDef proto DataCol_ptr GetColForChannelSpec(ChannelSpec* cs)
MethodDef opts [u'MENU_1N', u'CAT_Columns']
MethodDef name: RemoveCol
MethodDef desc: removes indicated column; &apos;true&apos; if removed
MethodDef proto void RemoveCol(int col)
MethodDef opts [u'CAT_Columns']
MethodDef name: RemoveAllCols
MethodDef desc: remove all columns (and data) -- this cannot be undone!
MethodDef proto void RemoveAllCols()
MethodDef opts [u'CAT_Columns', u'MENU', u'MENU_ON_Columns', u'CONFIRM']
MethodDef name: Reset
MethodDef desc: remove all columns (and data) -- this cannot be undone!
MethodDef proto void Reset()
MethodDef opts [u'CAT_Columns']
MethodDef name: MarkCols
MethodDef desc: mark all cols before updating, for orphan deleting
MethodDef proto void MarkCols()
MethodDef opts [u'CAT_Columns']
MethodDef name: RemoveOrphanCols
MethodDef desc: removes all non-pinned marked cols
MethodDef proto void RemoveOrphanCols()
MethodDef opts [u'CAT_Columns']
MethodDef name: hasData
MethodDef desc: true if data at that cell
MethodDef proto bool hasData(int col, int row)
MethodDef opts [u'CAT_Rows']
MethodDef name: idx
MethodDef desc: calculates an actual index for a col item, based on the current and size of that col; returns &apos;true&apos; if act_idx &gt;= 0 (i.e., if there is a data item for that column)
MethodDef proto bool idx(int row_num, int col_size, int&amp; act_idx)
MethodDef opts [u'CAT_Rows', u'rows']
MethodDef name: RowInRangeNormalize
MethodDef desc: normalizes row (if -ve) and tests result in range
MethodDef proto bool RowInRangeNormalize(int&amp; row)
MethodDef opts [u'CAT_XpertRows']
MethodDef name: AllocRows
MethodDef desc: allocate space for at least n rows
MethodDef proto void AllocRows(int n)
MethodDef opts [u'CAT_Rows']
MethodDef name: AddBlankRow
MethodDef desc: add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row
MethodDef proto int AddBlankRow()
MethodDef opts [u'MENU', u'MENU_ON_Rows', u'CAT_Rows', u'']
MethodDef name: AddRows
MethodDef desc: add n rows, returns true if successfully added
MethodDef proto bool AddRows(int n = 1)
MethodDef opts [u'MENU', u'CAT_Rows']
MethodDef name: InsertRows
MethodDef desc: insert n rows at starting row number, returns true if succesfully inserted
MethodDef proto bool InsertRows(int st_row, int n_rows = 1)
MethodDef opts [u'MENU', u'CAT_Rows']
MethodDef name: RemoveRows
MethodDef desc: Remove n rows of data, starting at st_row. st_row = -1 means last row, and n_rows = -1 means remove from starting row to end
MethodDef proto bool RemoveRows(int st_row, int n_rows = 1)
MethodDef opts [u'MENU', u'MENU_ON_Rows', u'CAT_Rows']
MethodDef name: RemoveAllRows
MethodDef desc: remove all of the rows of data, but keep the column structure
MethodDef proto void RemoveAllRows()
MethodDef opts [u'MENU', u'CAT_Rows', u'CONFIRM']
MethodDef name: EnforceRows
MethodDef desc: ensure that there are exactly n_rows in the table, removing or adding as needed
MethodDef proto void EnforceRows(int n_rows)
MethodDef opts [u'CAT_Rows']
MethodDef name: DuplicateRow
MethodDef desc: duplicate given row number, making given number of copies of it (adds new rows at the end)
MethodDef proto bool DuplicateRow(int row_no, int n_copies = 1)
MethodDef opts [u'MENU', u'CAT_Rows']
MethodDef name: GetColUserData
MethodDef desc: gets user data from the col
MethodDef proto const_Variant GetColUserData(const taString&amp; name, int col)
MethodDef opts [u'CAT_Config']
MethodDef name: SetColUserData
MethodDef desc: sets user data into the col
MethodDef proto void SetColUserData(const taString&amp; name, const Variant&amp; value, int col)
MethodDef opts [u'CAT_Config']
MethodDef name: GetVal
MethodDef desc: get data of scalar type, in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto const_Variant GetVal(Variant col, int row)
MethodDef opts [u'CAT_Access']
MethodDef name: SetVal
MethodDef desc: set data of scalar type, in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetVal(const Variant&amp; val, Variant col, int row)
MethodDef opts [u'CAT_Modify']
MethodDef name: GetMatrixVal
MethodDef desc: get data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and matrix dimension indicies -- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto const_Variant GetMatrixVal(Variant col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: SetMatrixVal
MethodDef desc: set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and matrix dimension indicies -- column can be specified as either integer index or a string that is then used to find the given column name; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetMatrixVal(const Variant&amp; val, Variant col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_Modify']
MethodDef name: GetMatrixFlatVal
MethodDef desc: get data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and matrix flat cell index (regardless of dimensions) -- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto const_Variant GetMatrixFlatVal(Variant col, int row, int cell)
MethodDef opts [u'CAT_Access']
MethodDef name: SetMatrixFlatVal
MethodDef desc: set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and matrix flat cell index (regardless of dimensions) -- column can be specified as either integer index or a string that is then used to find the given column name; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetMatrixFlatVal(const Variant&amp; val, Variant col, int row, int cell)
MethodDef opts [u'CAT_Modify']
MethodDef name: InitVals
MethodDef desc: initialize all values in given column to given value -- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto bool InitVals(const Variant&amp; init_val, Variant col)
MethodDef opts [u'CAT_Modify']
MethodDef name: InitValsToRowNo
MethodDef desc: initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto bool InitValsToRowNo(Variant col)
MethodDef opts [u'CAT_Modify']
MethodDef name: FindVal
MethodDef desc: find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row &lt; 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto int FindVal(const Variant&amp; val, Variant col, int st_row = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: FindMultiVal
MethodDef desc: find row number for multiple values across different columns of scalar type, starting at given starting row number. if st_row &lt; 0 then the search proceeds backwards from that many rows from end (-1 = end) -- columns can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto int FindMultiVal(int st_row, const Variant&amp; val1, Variant col1, const Variant&amp; val2 = 0, Variant col2, const Variant&amp; val3 = 0, Variant col3, const Variant&amp; val4 = 0, Variant col4, const Variant&amp; vall5 = 0, Variant col5, const Variant&amp; val6 = 0, Variant col6)
MethodDef opts [u'CAT_Access']
MethodDef name: GetValColName
MethodDef desc: get data of scalar type, in Variant form (any data type, use for Programs), for given column name, row
MethodDef proto const_Variant GetValColName(const taString&amp; col_name, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValColName
MethodDef desc: set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetValColName(const Variant&amp; val, const taString&amp; col_name, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetMatrixValColName
MethodDef desc: get data of matrix type, in Variant form (any data type, use for Programs), for given column name, row, and matrix dimension indicies
MethodDef proto const_Variant GetMatrixValColName(const taString&amp; col_name, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetMatrixValColName
MethodDef desc: set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and matrix dimension indicies; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetMatrixValColName(const Variant&amp; val, const taString&amp; col_name, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetMatrixFlatValColName
MethodDef desc: get data of matrix type, in Variant form (any data type, use for Programs), for given column name, row, and flat matrix cell index (flat index into elements of the matrix, regardless of dimensionality)
MethodDef proto const_Variant GetMatrixFlatValColName(const taString&amp; col_name, int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetMatrixFlatValColName
MethodDef desc: set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and flat matrix cell index (flat index into elements of the matrix, regardless of dimensionality); returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetMatrixFlatValColName(const Variant&amp; val, const taString&amp; col_name, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: InitValsColName
MethodDef desc: initialize all values in column of given name to given value
MethodDef proto bool InitValsColName(const Variant&amp; init_val, const taString&amp; col_name)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: InitValsToRowNoColName
MethodDef desc: initialize all values in column of given name to be equal to the row number -- only valid for scalar (not matrix) columns
MethodDef proto bool InitValsToRowNoColName(const taString&amp; col_name)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: FindValColName
MethodDef desc: find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row &lt; 0 then the search proceeds backwards from that many rows from end (-1 = end)
MethodDef proto int FindValColName(const Variant&amp; val, const taString&amp; col_name, int st_row = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: FindMultiValColName
MethodDef desc: find row number for multiple values across different columns of scalar type, starting at given starting row number. if st_row &lt; 0 then the search proceeds backwards from that many rows from end (-1 = end)
MethodDef proto int FindMultiValColName(int st_row, const Variant&amp; val1, const taString&amp; col_name1, const Variant&amp; val2 = 0, const taString&amp; col_name2, const Variant&amp; val3 = 0, const taString&amp; col_name3, const Variant&amp; val4 = 0, const taString&amp; col_name4, const Variant&amp; vall5 = 0, const taString&amp; col_name5, const Variant&amp; val6 = 0, const taString&amp; col_name6)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: GetValColRowName
MethodDef desc: get data of scalar type, in Variant form (any data type, use for Programs), for given column name, and row by looking up row_value in column named row_col_name
MethodDef proto const_Variant GetValColRowName(const taString&amp; col_name, const taString&amp; row_col_name, const Variant&amp; row_value)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValColRowName
MethodDef desc: set data of scalar type, in Variant form (any data type, use for Programs), for given column name, and row by looking up row_value in column named row_col_name; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetValColRowName(const Variant&amp; val, const taString&amp; col_name, const taString&amp; row_col_name, const Variant&amp; row_value)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetMatrixValColRowName
MethodDef desc: get data of matrix type, in Variant form (any data type, use for Programs), for given column name, row, and matrix dimension indicies
MethodDef proto const_Variant GetMatrixValColRowName(const taString&amp; col_name, const taString&amp; row_col_name, const Variant&amp; row_value, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetMatrixValColRowName
MethodDef desc: set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and matrix dimension indicies; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetMatrixValColRowName(const Variant&amp; val, const taString&amp; col_name, const taString&amp; row_col_name, const Variant&amp; row_value, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetMatrixFlatValColRowName
MethodDef desc: get data of matrix type, in Variant form (any data type, use for Programs), for given column name, row, and matrix cell index (flat index into matrix cells)
MethodDef proto const_Variant GetMatrixFlatValColRowName(const taString&amp; col_name, const taString&amp; row_col_name, const Variant&amp; row_value, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetMatrixFlatValColRowName
MethodDef desc: set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and matrix cell index (flat index into matrix cells); returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetMatrixFlatValColRowName(const Variant&amp; val, const taString&amp; col_name, const taString&amp; row_col_name, const Variant&amp; row_value, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: InitValsCol
MethodDef desc: initialize all values in given column to given value
MethodDef proto bool InitValsCol(DataCol* col, const Variant&amp; init_val)
MethodDef opts [u'CAT_XpertColumns', u'MENU', u'MENU_ON_Columns', u'FROM_GROUP_data']
MethodDef name: InitValsToRowNoCol
MethodDef desc: initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns
MethodDef proto bool InitValsToRowNoCol(DataCol* col)
MethodDef opts [u'CAT_XpertModify', u'MENU', u'FROM_GROUP_data']
MethodDef name: FindValCol
MethodDef desc: find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row &lt; 0 then the search proceeds backwards from that many rows from end (-1 = end)
MethodDef proto int FindValCol(DataCol* col, const Variant&amp; val, int st_row = 0)
MethodDef opts [u'CAT_XpertAccess', u'MENU', u'FROM_GROUP_data', u'USE_RVAL']
MethodDef name: FindMultiValCol
MethodDef desc: find row number for multiple values across different columns of scalar type, starting at given starting row number. if st_row &lt; 0 then the search proceeds backwards from that many rows from end (-1 = end)
MethodDef proto int FindMultiValCol(int st_row, const Variant&amp; val1, DataCol* col1, const Variant&amp; val2 = 0, DataCol* col2 = __null, const Variant&amp; val3 = 0, DataCol* col3 = __null, const Variant&amp; val4 = 0, DataCol* col4 = __null, const Variant&amp; vall5 = 0, DataCol* col5 = __null, const Variant&amp; val6 = 0, DataCol* col6 = __null)
MethodDef opts [u'CAT_XpertAccess', u'MENU', u'FROM_GROUP_data', u'USE_RVAL']
MethodDef name: GetValAsVar
MethodDef desc: get data of scalar type, in Variant form, for given column, row
MethodDef proto const_Variant GetValAsVar(int col, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsVar
MethodDef desc: set data of scalar type, in Variant form, for given column, row; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetValAsVar(const Variant&amp; val, int col, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsDouble
MethodDef desc: get data of scalar type, in double form, for given col, row; if data is NULL, then 0 is returned
MethodDef proto double GetValAsDouble(int col, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsDouble
MethodDef desc: set data of scalar type, in double form, for given column, row; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsDouble(double val, int col, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsFloat
MethodDef desc: get data of scalar type, in float form, for given col, row; if data is NULL, then 0 is returned
MethodDef proto float GetValAsFloat(int col, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsFloat
MethodDef desc: set data of scalar type, in float form, for given column, row; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsFloat(float val, int col, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsInt
MethodDef desc: get data of scalar type, in int form, for given col, row; if data is NULL, then 0 is returned
MethodDef proto int GetValAsInt(int col, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsInt
MethodDef desc: set data of scalar type, in int form, for given column, row; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsInt(int val, int col, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsString
MethodDef desc: get data of scalar type, in String form, for given column, row; if data is NULL, then &apos;n/a&apos; is returned
MethodDef proto const_taString GetValAsString(int col, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsString
MethodDef desc: set data of scalar type, in String form, for given column, row; does nothing if no cell; &apos;true if set
MethodDef proto bool SetValAsString(const taString&amp; val, int col, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsVarM
MethodDef desc: get data of matrix type, in Variant form, for given column, row, and cell (flat index) in matrix
MethodDef proto const_Variant GetValAsVarM(int col, int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsVarM
MethodDef desc: set data of matrix type, in Variant form, for given column, row, and cell (flat index) in matrix; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetValAsVarM(const Variant&amp; val, int col, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsDoubleM
MethodDef desc: get data of matrix type, in double form, for given col, row, and cell (flat index) in matrix; if data is NULL, then 0 is returned
MethodDef proto double GetValAsDoubleM(int col, int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsDoubleM
MethodDef desc: set data of matrix type, in double form, for given column, row, and cell (flat index) in matrix; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsDoubleM(double val, int col, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsFloatM
MethodDef desc: get data of matrix type, in float form, for given col, row, and cell (flat index) in matrix; if data is NULL, then 0 is returned
MethodDef proto float GetValAsFloatM(int col, int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsFloatM
MethodDef desc: set data of matrix type, in float form, for given column, row, and cell (flat index) in matrix; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsFloatM(float val, int col, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsIntM
MethodDef desc: get data of matrix type, in int form, for given col, row, and cell (flat index) in matrix; if data is NULL, then 0 is returned
MethodDef proto int GetValAsIntM(int col, int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsIntM
MethodDef desc: set data of matrix type, in int form, for given column, row, and cell (flat index) in matrix; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsIntM(int val, int col, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsStringM
MethodDef desc: get data of matrix type, in String form, for given column, row, and cell (flat index) in matrix; if data is NULL, then na=&apos;n/a&apos; else &apos;&apos; is returned
MethodDef proto const_taString GetValAsStringM(int col, int row, int cell, bool na = true)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsStringM
MethodDef desc: set data of matrix type, in String form, for given column, row, and cell (flat index) in matrix; does nothing if no cell; &apos;true if set
MethodDef proto bool SetValAsStringM(const taString&amp; val, int col, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsVarMDims
MethodDef desc: get data of matrix type, in Variant form, for given column, row, and matrix dimension indicies
MethodDef proto const_Variant GetValAsVarMDims(int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsVarMDims
MethodDef desc: set data of matrix type, in Variant form, for given column, row, and matrix dimension indicies; returns &apos;true&apos; if valid access and set is successful
MethodDef proto bool SetValAsVarMDims(const Variant&amp; val, int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsDoubleMDims
MethodDef desc: get data of matrix type, in double form, for given col, row, and cell (flat index) in matrix; if data is NULL, then 0 is returned
MethodDef proto double GetValAsDoubleMDims(int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsDoubleMDims
MethodDef desc: set data of matrix type, in double form, for given column, row, and cell (flat index) in matrix; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsDoubleMDims(double val, int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsFloatMDims
MethodDef desc: get data of matrix type, in float form, for given col, row, and cell (flat index) in matrix; if data is NULL, then 0 is returned
MethodDef proto float GetValAsFloatMDims(int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsFloatMDims
MethodDef desc: set data of matrix type, in float form, for given column, row, and cell (flat index) in matrix; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsFloatMDims(float val, int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsIntMDims
MethodDef desc: get data of matrix type, in int form, for given col, row, and cell (flat index) in matrix; if data is NULL, then 0 is returned
MethodDef proto int GetValAsIntMDims(int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsIntMDims
MethodDef desc: set data of matrix type, in int form, for given column, row, and cell (flat index) in matrix; does nothing if no cell&apos; &apos;true&apos; if set
MethodDef proto bool SetValAsIntMDims(int val, int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsStringMDims
MethodDef desc: get data of matrix type, in String form, for given column, row, and cell (flat index) in matrix; if data is NULL, then na=&apos;n/a&apos; else &apos;&apos; is returned
MethodDef proto const_taString GetValAsStringMDims(int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0, bool na = true)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsStringMDims
MethodDef desc: set data of matrix type, in String form, for given column, row, and cell (flat index) in matrix; does nothing if no cell; &apos;true if set
MethodDef proto bool SetValAsStringMDims(const taString&amp; val, int col, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsMatrix
MethodDef desc: get data of matrix type, in Matrix form (one frame), for given column, row; Invalid/NULL if no cell; must do taBase::Ref(mat) and taBase::unRefDone(mat) on return value surrounding use of it; note: not const because you can write it
MethodDef proto taMatrix_ptr GetValAsMatrix(int col, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: GetValAsMatrixColName
MethodDef desc: get data of matrix type, in Matrix form (one frame), for given column, row; Invalid/NULL if no cell; must do taBase::Ref(mat) and taBase::unRefDone(mat) on return value surrounding use of it; note: not const because you can write it
MethodDef proto taMatrix_ptr GetValAsMatrixColName(const taString&amp; col_name, int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsMatrix
MethodDef desc: set data of any type, in Variant form, for given column, row; does nothing if no cell; &apos;true&apos; if set
MethodDef proto bool SetValAsMatrix(const taMatrix* val, int col, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: SetValAsMatrixColName
MethodDef desc: set data of any type, in Variant form, for given column, row; does nothing if no cell; &apos;true&apos; if set
MethodDef proto bool SetValAsMatrixColName(const taMatrix* val, const taString&amp; col_name, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetRangeAsMatrix
MethodDef desc: get data as a Matrix for a range of rows, for given column, st_row, and n_rows; row; Invalid/NULL if no cell; must do taBase::Ref(mat) and taBase::unRefDone(mat) on return value surrounding use of it; note: not const because you can write it
MethodDef proto taMatrix_ptr GetRangeAsMatrix(int col, int st_row, int n_rows)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SaveData_strm
MethodDef desc: saves data, one line per rec, with delimiter between columns, and optionally quoting strings -- if save-headers then special _H: formatted column header information is saved and data rows are marked with _D:
MethodDef proto void SaveData_strm(ostream&amp; strm, DataTable::Delimiters delim = TAB, bool quote_str = true, bool save_headers = true)
MethodDef opts [u'CAT_XpertFile', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: SaveHeader_strm
MethodDef desc: saves header information, with delimiter between columns, and optionally quoting strings
MethodDef proto void SaveHeader_strm(ostream&amp; strm, DataTable::Delimiters delim = TAB, bool row_mark = true, int col_fr = 0, int col_to = -1)
MethodDef opts [u'CAT_XpertFile', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: SaveDataRow_strm
MethodDef desc: saves one row of data (-1 = last row), with delimiter between columns, and optionally quoting strings; -ve cols/rows are relative to end -- if row_mark then mark data rows with _D: at start (to differentiate from _H: headers)
MethodDef proto void SaveDataRow_strm(ostream&amp; strm, int row = -1, DataTable::Delimiters delim = TAB, bool quote_str = true, bool row_mark = true, int col_fr = 0, int col_to = -1)
MethodDef opts [u'CAT_XpertFile', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: SaveDataRows_strm
MethodDef desc: saves all rows of data (no header) with delimiter between columns, and optionally quoting strings -- if row_mark then mark data rows with _D: at start (to differentiate from _H: headers)
MethodDef proto void SaveDataRows_strm(ostream&amp; strm, DataTable::Delimiters delim = TAB, bool quote_str = true, bool row_mark = true)
MethodDef opts [u'CAT_XpertFile', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: SaveData
MethodDef desc: saves data, one line per rec, with delimiter between columns, and optionally quoting strings; leave fname empty to pick from file chooser -- if save-headers then special _H: formatted column header information is saved and data rows are marked with _D:
MethodDef proto void SaveData(const taString&amp; fname, DataTable::Delimiters delim = TAB, bool quote_str = true, bool save_headers = true)
MethodDef opts [u'CAT_File', u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'EXT_dat,tsv,csv,txt,log', u'FILE_DIALOG_SAVE']
MethodDef name: AppendData
MethodDef desc: appends all of current datatable data to given file (does not output header; file assumed to be of same data structure -- if data_tag then mark data rows with _D: at start (to differentiate from _H: headers)
MethodDef proto void AppendData(const taString&amp; fname, DataTable::Delimiters delim = TAB, bool quote_str = true, bool row_mark = true)
MethodDef opts [u'CAT_File', u'MENU', u'EXT_dat,tsv,csv,txt,log', u'FILE_DIALOG_APPEND']
MethodDef name: SaveHeader
MethodDef desc: saves header information, with delimiter between columns, and optionally quoting strings; leave fname empty to pick from file chooser
MethodDef proto void SaveHeader(const taString&amp; fname, DataTable::Delimiters delim = TAB)
MethodDef opts [u'CAT_File', u'MENU', u'EXT_dat,tsv,csv,txt,log', u'FILE_DIALOG_SAVE']
MethodDef name: SaveDataRow
MethodDef desc: saves one row of data (-1 = last row), with delimiter between columns, and optionally quoting strings; leave fname empty to pick from file chooser -- if row_mark then mark data rows with _D: at start (to differentiate from _H: headers)
MethodDef proto void SaveDataRow(const taString&amp; fname, int row = -1, DataTable::Delimiters delim = TAB, bool quote_str = true, bool row_mark = true)
MethodDef opts [u'CAT_File', u'MENU', u'EXT_dat,tsv,csv,txt,log', u'FILE_DIALOG_SAVE']
MethodDef name: SaveDataLog
MethodDef desc: incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write
MethodDef proto void SaveDataLog(const taString&amp; fname, bool append = false, bool dmem_proc_0 = true)
MethodDef opts [u'CAT_File', u'MENU', u'MENU_SEP_BEFORE', u'EXT_dat,tsv,csv,txt,log', u'FILE_DIALOG_SAVE']
MethodDef name: CloseDataLog
MethodDef desc: close the data log file if it was previously open
MethodDef proto void CloseDataLog()
MethodDef opts [u'CAT_File', u'MENU']
MethodDef name: WriteDataLogRow
MethodDef desc: write the current row to the data log, if it is open (returns true if successfully wrote) -- this is automatically called by WriteClose
MethodDef proto bool WriteDataLogRow()
MethodDef opts [u'CAT_File']
MethodDef name: LoadData_strm
MethodDef desc: loads data, up to max num of recs (-1 for all), with delimiter between columns and optionaly quoting strings
MethodDef proto void LoadData_strm(istream&amp; strm, DataTable::Delimiters delim = TAB, bool quote_str = true, int max_recs = -1)
MethodDef opts [u'CAT_XpertFile', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: LoadHeader_strm
MethodDef desc: loads header information -- preserves current headers if possible (called from LoadData if header line found) (returns EOF if strm is at end)
MethodDef proto int LoadHeader_strm(istream&amp; strm, DataTable::Delimiters delim = TAB)
MethodDef opts [u'CAT_XpertFile', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: LoadDataRow_strm
MethodDef desc: load one row of data, up to max num of recs (-1 for all), with delimiter between columns and optionaly quoting strings (returns EOF if strm is at end)
MethodDef proto int LoadDataRow_strm(istream&amp; strm, DataTable::Delimiters delim = TAB, bool quote_str = true)
MethodDef opts [u'CAT_XpertFile', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: LoadData
MethodDef desc: loads data, up to max num of recs (-1 for all), with delimiter between columns and optionaly quoting strings, reset_first = remove any existing data prior to loading
MethodDef proto void LoadData(const taString&amp; fname, DataTable::Delimiters delim = TAB, bool quote_str = true, int max_recs = -1, bool reset_first = false)
MethodDef opts [u'CAT_File', u'MENU', u'MENU_SEP_BEFORE', u'EXT_dat,tsv,csv,txt,log', u'FILE_DIALOG_LOAD']
MethodDef name: LoadHeader
MethodDef desc: loads header information -- preserves current headers if possible (called from LoadData if header line found) (returns EOF if strm is at end)
MethodDef proto int LoadHeader(const taString&amp; fname, DataTable::Delimiters delim = TAB)
MethodDef opts [u'CAT_File', u'EXT_dat,tsv,csv,txt,log']
MethodDef name: LoadDataRow
MethodDef desc: load one row of data, up to max num of recs (-1 for all), with delimiter between columns and optionaly quoting strings (returns EOF if strm is at end)
MethodDef proto int LoadDataRow(const taString&amp; fname, DataTable::Delimiters delim = TAB, bool quote_str = true)
MethodDef opts [u'CAT_File', u'MENU', u'EXT_dat,tsv,csv,txt,log', u'FILE_DIALOG_LOAD']
MethodDef name: CalcAllRows
MethodDef desc: perform calculations for all rows of data (updates after)
MethodDef proto bool CalcAllRows()
MethodDef opts [u'CAT_Calc', u'BUTTON', u'GHOST_OFF_data_flags:HAS_CALCS']
MethodDef name: CalcRow
MethodDef desc: perform calculations for given row of data (calls InitCalcScript to make sure)
MethodDef proto bool CalcRow(int row)
MethodDef opts [u'CAT_Calc']
MethodDef name: Sort
MethodDef desc: sort table according to selected columns of data: NOTE that this modifies this table and currently cannot be undone -- make a duplicate table first if you want to save the original data!
MethodDef proto void Sort(Variant col1, bool ascending1 = true, Variant col2 = -1, bool ascending2 = true, Variant col3 = -1, bool ascending3 = true, Variant col4 = -1, bool ascending4 = true, Variant col5 = -1, bool ascending5 = true, Variant col6 = -1, bool ascending6 = true)
MethodDef opts [u'CAT_DataProc']
MethodDef name: SortColName
MethodDef desc: sort table according to selected columns of data: NOTE that this modifies this table and currently cannot be undone -- make a duplicate table first if you want to save the original data!
MethodDef proto void SortColName(const taString&amp; col1, bool ascending1 = true, const taString&amp; col2, bool ascending2 = true, const taString&amp; col3, bool ascending3 = true, const taString&amp; col4, bool ascending4 = true, const taString&amp; col5, bool ascending5 = true, const taString&amp; col6, bool ascending6 = true)
MethodDef opts [u'CAT_XpertDataProc']
MethodDef name: SortCol
MethodDef desc: sort table according to selected columns of data: NOTE that this modifies this table and currently cannot be undone -- make a duplicate table first if you want to save the original data!
MethodDef proto void SortCol(DataCol* col1, bool ascending1 = true, DataCol* col2 = __null, bool ascending2 = true, DataCol* col3 = __null, bool ascending3 = true, DataCol* col4 = __null, bool ascending4 = true, DataCol* col5 = __null, bool ascending5 = true, DataCol* col6 = __null, bool ascending6 = true)
MethodDef opts [u'CAT_XpertDataProc', u'MENU', u'MENU_ON_DataProc', u'LABEL_Sort', u'FROM_GROUP_data', u'NULL_OK']
MethodDef name: Filter
MethodDef desc: filter (select) table rows by applying given expression -- if it evaluates to true, the row is included, and otherwise it is removed. refer to current colum values by name. NOTE that this modifies this table and currently cannot be undone -- make a duplicate table first if you want to save the original data!
MethodDef proto bool Filter(const taString&amp; filter_expr)
MethodDef opts [u'CAT_DataProc', u'MENU', u'FROM_GROUP_data']
MethodDef name: GroupMeanSEM
MethodDef desc: groups data according to given columns in hierarchical fashion (gp_col2 is subgrouped within gp_col1, etc), and compute the Mean and Standard Error of the Mean (SEM) for any other numerical columns of data -- results go in dest_data table (new table created if NULL)
MethodDef proto bool GroupMeanSEM(DataTable* dest_data, DataCol* gp_col1, DataCol* gp_col2 = __null, DataCol* gp_col3 = __null, DataCol* gp_col4 = __null)
MethodDef opts [u'CAT_DataProc', u'MENU', u'NULL_OK', u'NULL_TEXT_0_NewDataTable', u'FROM_GROUP_1_data', u'FROM_GROUP_2_data', u'FROM_GROUP_3_data', u'FROM_GROUP_4_data']
MethodDef name: ColStats
MethodDef desc: compute standard descriptive statistics on given data table column, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).-- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto taString ColStats(Variant col)
MethodDef opts [u'CAT_DataProc']
MethodDef name: ColStatsCol
MethodDef desc: compute standard descriptive statistics on given data table column, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).
MethodDef proto taString ColStatsCol(DataCol* col)
MethodDef opts [u'CAT_XpertDataProc', u'MENU', u'FROM_GROUP_data', u'LABEL_ColStats', u'USE_RVAL']
MethodDef name: ColStatsName
MethodDef desc: compute standard descriptive statistics on given data table column, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).
MethodDef proto taString ColStatsName(const taString&amp; col_name)
MethodDef opts [u'CAT_XpertDataProc']
MethodDef name: NewGridView
MethodDef desc: open a grid view (graphical rows and columns) of this table (NULL=use existing empty frame if any, else make new frame)
MethodDef proto GridTableView_ptr NewGridView(T3DataViewFrame* fr = __null)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewFrame', u'MENU', u'MENU_ON_View', u'MENU_CONTEXT', u'CAT_Display']
MethodDef name: NewGraphView
MethodDef desc: open a graph view of this table (NULL=use existing empty frame if any, else make new frame)
MethodDef proto GraphTableView_ptr NewGraphView(T3DataViewFrame* fr = __null)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewFrame', u'MENU', u'MENU_CONTEXT', u'CAT_Display']
MethodDef name: FindMakeGridView
MethodDef desc: find existing or make a new grid view (graphical rows and columns) of this table (NULL=use existing empty frame if any, else make new frame)
MethodDef proto GridTableView_ptr FindMakeGridView(T3DataViewFrame* fr = __null)
MethodDef opts [u'CAT_Display']
MethodDef name: FindMakeGraphView
MethodDef desc: find existing or make a new graph view of this table (NULL=use existing empty frame if any, else make new frame)
MethodDef proto GraphTableView_ptr FindMakeGraphView(T3DataViewFrame* fr = __null)
MethodDef opts [u'CAT_Display']
MethodDef name: Copy_NoData
MethodDef desc: copy only the column structure, but no data, from other data table
MethodDef proto void Copy_NoData(const DataTable&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyFromRow
MethodDef desc: copy one row from source to given row in this object: source must have exact same column structure as this!!
MethodDef proto void CopyFromRow(int dest_row, const DataTable&amp; cp, int src_row)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyCell
MethodDef desc: copy one cell (indexed by column, row) from source to this data table in given col,row cell -- is robust to differences in type and matrix sizing (returns false if not successful) -- column can be specified as either integer index or a string that is then used to find the given column name
MethodDef proto bool CopyCell(Variant dest_col, int dest_row, const DataTable&amp; src, Variant src_col, int src_row)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyColRow
MethodDef desc: this is an obsolete name for CopyCell -- use CopyCell instead
MethodDef proto bool CopyColRow(int dest_col, int dest_row, const DataTable&amp; src, int src_col, int src_row)
MethodDef opts [u'CAT_XpertObsolete']
MethodDef name: CopyCellName
MethodDef desc: copy one cell (indexed by column, row) from source to this data table in given col,row cell -- is robust to differences in type and matrix sizing (returns false if not successful)
MethodDef proto bool CopyCellName(const taString&amp; dest_col_name, int dest_row, const DataTable&amp; src, const taString&amp; src_col_name, int src_row)
MethodDef opts [u'CAT_XpertCopy']
MethodDef name: UniqueColNames
MethodDef desc: ensure that the column names are all unique (adds _n for repeats)
MethodDef proto void UniqueColNames()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef names [u'AddBlankRow', u'AddRows', u'AllocRows', u'AppendData', u'CalcAllRows', u'CalcRow', u'ChangeColTypeGeom', u'ClearDataFlag', u'CloseDataLog', u'ColMatchesChannelSpec', u'ColStats', u'ColStatsCol', u'ColStatsName', u'CopyCell', u'CopyCellName', u'CopyColRow', u'CopyFromRow', u'Copy_NoData', u'DuplicateRow', u'EnforceRows', u'Filter', u'FindColName', u'FindMakeCol', u'FindMakeColMatrix', u'FindMakeColName', u'FindMakeGraphView', u'FindMakeGridView', u'FindMultiVal', u'FindMultiValCol', u'FindMultiValColName', u'FindVal', u'FindValCol', u'FindValColName', u'GetColForChannelSpec', u'GetColMatrix', u'GetColUserData', u'GetMatrixFlatVal', u'GetMatrixFlatValColName', u'GetMatrixFlatValColRowName', u'GetMatrixVal', u'GetMatrixValColName', u'GetMatrixValColRowName', u'GetRangeAsMatrix', u'GetVal', u'GetValAsDouble', u'GetValAsDoubleM', u'GetValAsDoubleMDims', u'GetValAsFloat', u'GetValAsFloatM', u'GetValAsFloatMDims', u'GetValAsInt', u'GetValAsIntM', u'GetValAsIntMDims', u'GetValAsMatrix', u'GetValAsMatrixColName', u'GetValAsString', u'GetValAsStringM', u'GetValAsStringMDims', u'GetValAsVar', u'GetValAsVarM', u'GetValAsVarMDims', u'GetValColName', u'GetValColRowName', u'GroupMeanSEM', u'HasDataFlag', u'InitVals', u'InitValsCol', u'InitValsColName', u'InitValsToRowNo', u'InitValsToRowNoCol', u'InitValsToRowNoColName', u'InsertRows', u'LoadData', u'LoadDataRow', u'LoadDataRow_strm', u'LoadData_strm', u'LoadHeader', u'LoadHeader_strm', u'MarkCols', u'NewCol', u'NewColDouble', u'NewColFloat', u'NewColFromChannelSpec', u'NewColInt', u'NewColMatrix', u'NewColMatrixN', u'NewColMatrixN_gui', u'NewColString', u'NewCol_gui', u'NewGraphView', u'NewGridView', u'RemoveAllCols', u'RemoveAllRows', u'RemoveCol', u'RemoveOrphanCols', u'RemoveRows', u'RenameCol', u'Reset', u'RowInRangeNormalize', u'SaveData', u'SaveDataLog', u'SaveDataRow', u'SaveDataRow_strm', u'SaveDataRows_strm', u'SaveData_strm', u'SaveHeader', u'SaveHeader_strm', u'SetColName', u'SetColUserData', u'SetDataFlag', u'SetDataFlagState', u'SetMatrixFlatVal', u'SetMatrixFlatValColName', u'SetMatrixFlatValColRowName', u'SetMatrixVal', u'SetMatrixValColName', u'SetMatrixValColRowName', u'SetVal', u'SetValAsDouble', u'SetValAsDoubleM', u'SetValAsDoubleMDims', u'SetValAsFloat', u'SetValAsFloatM', u'SetValAsFloatMDims', u'SetValAsInt', u'SetValAsIntM', u'SetValAsIntMDims', u'SetValAsMatrix', u'SetValAsMatrixColName', u'SetValAsString', u'SetValAsStringM', u'SetValAsStringMDims', u'SetValAsVar', u'SetValAsVarM', u'SetValAsVarMDims', u'SetValColName', u'SetValColRowName', u'Sort', u'SortCol', u'SortColName', u'UniqueColNames', u'WriteDataLogRow', u'cols', u'hasData', u'idx']
########################################################################
TypeDef len: 19
TypeDef name:  DataCol
TypeDef type: class
TypeDef desc: holds a column of data;
 (a scalar cell can generally be treated as a degenerate matrix cell of dim[1])
TypeDef cats:, [u'Data']
TypeDef opts:, [u'STEM_BASE', u'VIRT_BASE', u'NO_INSTANCE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'DataColTp']
EnumDef name: DC_NONE
EnumDef val: DC_NONE
EnumDef name: MARK
EnumDef val: MARK
EnumDef: used internally to mark columns prior to an operation -- columns that remain marked after all operations are unused, and may be removed -- users should not generally mess with this flag
EnumDef name: PIN
EnumDef val: PIN
EnumDef: protect this column from being automatically deleted according to the MARK scheme (see comment). this is often not very easy for uers to find and use (columns to be saved should be listed explicitly in the context in which others are being used), so we are not exposing it to users, but it can be used internally for some reason
EnumDef name: SAVE_ROWS
EnumDef val: SAVE_ROWS
EnumDef: save the row data for this column in the internal format used when the entire object is saved (e.g., along with a project or whatever). the column configuration etc is always saved, just not the rows of data if not on.
EnumDef name: SAVE_DATA
EnumDef val: SAVE_DATA
EnumDef: save this column in the &apos;data&apos; export format used by the SaveData and associated functions (e.g., as recorded in &apos;logs&apos; of data from running programs)
EnumDef name: CALC
EnumDef val: CALC
EnumDef: calculate value of this column based on calc_expr expression
EnumDef name: KEY
EnumDef val: KEY
EnumDef: indicates this is a key column; a table could have a compound key: set all that apply (note: currently not used by pdp, but may in the future)
EnumDef name: AUTO_KEY
EnumDef val: AUTO_KEY
EnumDef: automatically set a key from next keygen value when a row is added (scalar cols only) -- you will usually set KEY as well
EnumDef name: READ_ONLY
EnumDef val: READ_ONLY
EnumDef: this column is read-only in the gui (helps protect keys or programmatically generated data items)
EnumDef name: PAT_4D
EnumDef val: PAT_4D
EnumDef: (4d cells only) displays cells in the same geometry as grouped network layers -- NOTE: data is still copied/pasted in clipboard in a 2d format
EnumDef names: [u'ColFlags']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'NO_SAVE_EMPTY', u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: optional description to help in documenting the use of this column
MemberDef name: col_flags
MemberDef type: DataCol::ColFlags
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: flags for this column to indicate specific properties
MemberDef name: col_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: the index of this column in the table
MemberDef name: is_matrix
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: &apos;true&apos; if the cell is a matrix, not a scalar
MemberDef name: cell_geom
MemberDef type: MatrixGeom
MemberDef opts [u'READ_ONLY', u'SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: for matrix cols, the geom of each cell
MemberDef name: calc_expr
MemberDef type: ColCalcExpr
MemberDef opts [u'CONDEDIT_ON_col_flags:CALC']
MemberDef cats []
MemberDef desc: expression for computing value of this column (only used if CALC flag is set)
MethodDef name: AR
MethodDef desc: the matrix pointer -- NOTE: actual member should be called &apos;ar&apos; const version of the matrix pointer
MethodDef proto const_taMatrix_ptr AR()
MethodDef opts [u'CAT_Access']
MethodDef name: valType
MethodDef desc: the type of data in each element
MethodDef proto ValType valType()
MethodDef opts [u'CAT_Access']
MethodDef name: isMatrix
MethodDef desc: true if data is a matrix
MethodDef proto bool isMatrix()
MethodDef opts [u'CAT_Access']
MethodDef name: isNumeric
MethodDef desc: true if data is float, int, or byte
MethodDef proto bool isNumeric()
MethodDef opts [u'CAT_Access']
MethodDef name: isString
MethodDef desc: true if data is string
MethodDef proto bool isString()
MethodDef opts [u'CAT_Access']
MethodDef name: isImage
MethodDef desc: true if the cell contains an image
MethodDef proto bool isImage()
MethodDef opts [u'CAT_Access']
MethodDef name: imageComponents
MethodDef desc: if an image, then: b&amp;w=1, b&amp;w+a=2, rgb=3, rgba=4
MethodDef proto int imageComponents()
MethodDef opts [u'CAT_Access']
MethodDef name: is_matrix_err
MethodDef proto bool is_matrix_err()
MethodDef name: not_matrix_err
MethodDef proto bool not_matrix_err()
MethodDef name: cell_size
MethodDef desc: for matrix type, number of elements in each cell
MethodDef proto int cell_size()
MethodDef opts [u'CAT_Access']
MethodDef name: cell_dims
MethodDef desc: for matrix type, number of dimensions in each cell
MethodDef proto int cell_dims()
MethodDef opts [u'CAT_Access']
MethodDef name: GetCellGeom
MethodDef desc: for matrix type, size of given dim
MethodDef proto int GetCellGeom(int dim)
MethodDef opts [u'CAT_Access']
MethodDef name: Get2DCellGeom
MethodDef desc: for flat 2D access
MethodDef proto void Get2DCellGeom(int&amp; x, int&amp; y)
MethodDef name: Get2DCellGeomGui
MethodDef desc: provides standardized 2d geom regardless of dimensionality (includes space for extra dimensions), odd_y = for odd dimension sizes, put extra dimension in y (else x): 3d = x, (y+1) * z (vertical time series of 2d patterns, +1=space), 4d = (x+1)*xx, (y+1)*yy (e.g., 2d groups of 2d patterns), 5d = vertical time series of 4d.
MethodDef proto void Get2DCellGeomGui(int&amp; x, int&amp; y, bool odd_y = true, int spc = 1)
MethodDef opts [u'CAT_Access']
MethodDef name: rows
MethodDef desc: total number of rows of data within this column
MethodDef proto int rows()
MethodDef opts [u'CAT_Access']
MethodDef name: SetColFlag
MethodDef desc: set data column flag state on
MethodDef proto void SetColFlag(DataCol::ColFlags flg)
MethodDef name: ClearColFlag
MethodDef desc: clear data column flag state (set off)
MethodDef proto void ClearColFlag(DataCol::ColFlags flg)
MethodDef name: HasColFlag
MethodDef desc: check if data column flag is set
MethodDef proto bool HasColFlag(DataCol::ColFlags flg)
MethodDef name: SetColFlagState
MethodDef desc: set data column flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetColFlagState(DataCol::ColFlags flg, bool on)
MethodDef name: GetVal
MethodDef desc: get data of scalar type, in Variant form (any data type, use for Programs), -ve row is from end (-1=last)
MethodDef proto const_Variant GetVal(int row)
MethodDef opts [u'CAT_Access']
MethodDef name: SetVal
MethodDef desc: get data of scalar type, in Variant form (any data type, use for Programs), -ve row is from end (-1=last)
MethodDef proto bool SetVal(const Variant&amp; val, int row)
MethodDef opts [u'CAT_Modify']
MethodDef name: GetMatrixVal
MethodDef desc: get value of matrix type, in Variant form (any data type, use for Programs), -ve row is from end (-1=last), d&apos;s are matrix dimension indicies
MethodDef proto const_Variant GetMatrixVal(int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: SetMatrixVal
MethodDef desc: set value of matrix type, in Variant form (any data type, use for Programs), -ve row is from end (-1=last), d&apos;s are matrix dimension indicies
MethodDef proto bool SetMatrixVal(const Variant&amp; val, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_Modify']
MethodDef name: InitVals
MethodDef desc: initialize all values in this column to given value
MethodDef proto bool InitVals(const Variant&amp; init_val)
MethodDef opts [u'CAT_Modify']
MethodDef name: InitValsToRowNo
MethodDef desc: initialize all values in this column to be equal to the row number -- only valid for scalar (not matrix) columns
MethodDef proto bool InitValsToRowNo()
MethodDef opts [u'CAT_Modify']
MethodDef name: FindVal
MethodDef desc: find row number for given value within column of scalar type (use for Programs), starting at given starting row number. if st_row &lt; 0 then the search proceeds backwards from that many rows from end (-1 = end)
MethodDef proto int FindVal(const Variant&amp; val, int st_row = 0)
MethodDef opts [u'CAT_Access']
MethodDef name: GetValAsVar
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto const_Variant GetValAsVar(int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsVar
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto bool SetValAsVar(const Variant&amp; val, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsString
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto const_taString GetValAsString(int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsString
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto bool SetValAsString(const taString&amp; val, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsFloat
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last)
MethodDef proto float GetValAsFloat(int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsFloat
MethodDef desc: valid only if type is float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsFloat(float val, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsDouble
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last)
MethodDef proto double GetValAsDouble(int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsDouble
MethodDef desc: valid only if type is double, -ve row is from end (-1=last)
MethodDef proto bool SetValAsDouble(double val, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsInt
MethodDef desc: valid if type is int or byte, -ve row is from end (-1=last)
MethodDef proto int GetValAsInt(int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsInt
MethodDef desc: valid if type is int or float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsInt(int val, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsByte
MethodDef desc: valid only if type is byte, -ve row is from end (-1=last)
MethodDef proto byte GetValAsByte(int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsByte
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last) /////////////////////////////////////////////////////////////
MethodDef proto bool SetValAsByte(byte val, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsVarM
MethodDef desc: get value as a variant (safe for all program usage), matrix version, valid for all types, -ve row is from end (-1=last)
MethodDef proto const_Variant GetValAsVarM(int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsVarM
MethodDef desc: set value as a variant, matrix version, valid for all types, -ve row is from end (-1=last)
MethodDef proto bool SetValAsVarM(const Variant&amp; val, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsStringM
MethodDef desc: get value as a string, matrix version, valid for all types, -ve row is from end (-1=last)
MethodDef proto const_taString GetValAsStringM(int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsStringM
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto bool SetValAsStringM(const taString&amp; val, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsFloatM
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last)
MethodDef proto float GetValAsFloatM(int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsFloatM
MethodDef desc: valid only if type is float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsFloatM(float val, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsDoubleM
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last)
MethodDef proto double GetValAsDoubleM(int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsDoubleM
MethodDef desc: valid only if type is float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsDoubleM(double val, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsIntM
MethodDef desc: valid if type is int or byte, -ve row is from end (-1=last)
MethodDef proto int GetValAsIntM(int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsIntM
MethodDef desc: valid if type is int or float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsIntM(int val, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsByteM
MethodDef desc: valid only if type is byte, -ve row is from end (-1=last)
MethodDef proto byte GetValAsByteM(int row, int cell)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsByteM
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last) /////////////////////////////////////////////////////////////
MethodDef proto bool SetValAsByteM(byte val, int row, int cell)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsVarMDims
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto const_Variant GetValAsVarMDims(int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsVarMDims
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto bool SetValAsVarMDims(const Variant&amp; val, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsStringMDims
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto const_taString GetValAsStringMDims(int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsStringMDims
MethodDef desc: valid for all types, -ve row is from end (-1=last)
MethodDef proto bool SetValAsStringMDims(const taString&amp; val, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsFloatMDims
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last)
MethodDef proto float GetValAsFloatMDims(int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsFloatMDims
MethodDef desc: valid only if type is float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsFloatMDims(float val, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsDoubleMDims
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last)
MethodDef proto double GetValAsDoubleMDims(int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsDoubleMDims
MethodDef desc: valid only if type is float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsDoubleMDims(double val, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsIntMDims
MethodDef desc: valid if type is int or byte, -ve row is from end (-1=last)
MethodDef proto int GetValAsIntMDims(int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsIntMDims
MethodDef desc: valid if type is int or float, -ve row is from end (-1=last)
MethodDef proto bool SetValAsIntMDims(int val, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsByteMDims
MethodDef desc: valid only if type is byte, -ve row is from end (-1=last)
MethodDef proto byte GetValAsByteMDims(int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsByteMDims
MethodDef desc: valid if type is numeric, -ve row is from end (-1=last)
MethodDef proto bool SetValAsByteMDims(byte val, int row, int d0, int d1 = 0, int d2 = 0, int d3 = 0)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetValAsMatrix
MethodDef desc: gets the cell as a slice of the entire column (note: not const -- you can write it) -- must do taBase::Ref(mat) and taBase::unRefDone(mat) on return value surrounding use of it
MethodDef proto taMatrix_ptr GetValAsMatrix(int row)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: SetValAsMatrix
MethodDef desc: set the matrix cell from a same-sized matrix
MethodDef proto bool SetValAsMatrix(const taMatrix* val, int row)
MethodDef opts [u'CAT_XpertModify']
MethodDef name: GetRangeAsMatrix
MethodDef desc: gets a slice of the entire column from starting row for n_rows (note: not const -- you can write it) -- must do taBase::Ref(mat) and taBase::unRefDone(mat) on return value surrounding use of it
MethodDef proto taMatrix_ptr GetRangeAsMatrix(int st_row, int n_rows)
MethodDef opts [u'CAT_XpertAccess']
MethodDef name: GetMinMaxScale
MethodDef desc: get min-max range of values contained within this column
MethodDef proto bool GetMinMaxScale(MinMax&amp; mm)
MethodDef opts [u'CAT_Display']
MethodDef name: EnforceRows
MethodDef desc: force data to have this many rows
MethodDef proto bool EnforceRows(int rows)
MethodDef name: InsertRows
MethodDef desc: insert n_rows starting at st_row
MethodDef proto bool InsertRows(int st_row, int n_rows)
MethodDef name: ColStats
MethodDef desc: compute standard descriptive statistics on given data table column, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).
MethodDef proto taString ColStats()
MethodDef opts [u'CAT_DataProc', u'MENU', u'MENU_ON_Column', u'USE_RVAL']
MethodDef name: displayWidth
MethodDef desc: low level display width, in chars, taken from options
MethodDef proto int displayWidth()
MethodDef opts [u'CAT_Display']
MethodDef name: maxColWidth
MethodDef desc: aprox max number of columns, in characters, -1 if variable or unknown
MethodDef proto int maxColWidth()
MethodDef opts [u'CAT_Display']
MethodDef name: dataTable
MethodDef desc: root data table this col belongs to
MethodDef proto DataTable_ptr dataTable()
MethodDef name: EncodeHeaderName
MethodDef desc: encode header information for saving to text files
MethodDef proto taString EncodeHeaderName(const MatrixGeom&amp; dims)
MethodDef name: DecodeHeaderName
MethodDef desc: decode header information for loading from text files
MethodDef proto void DecodeHeaderName(taString nm, taString&amp; base_nm, int&amp; val_typ, MatrixGeom&amp; mat_idx, MatrixGeom&amp; mat_geom)
MethodDef name: Copy_NoData
MethodDef desc: copy the structure of the datatable without getting all the data
MethodDef proto void Copy_NoData(const DataCol&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyFromCol_Robust
MethodDef desc: copy col, but don&apos;t change schema; robust to differences in type and format of the cells
MethodDef proto void CopyFromCol_Robust(const DataCol&amp; cp)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyFromRow
MethodDef desc: copy one row from source to given row in this object, assumes that the two have the same type and, if matrix, cell_size
MethodDef proto void CopyFromRow(int dest_row, const DataCol&amp; cp, int src_row)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyFromRow_Robust
MethodDef desc: copy one row from source to given row in this object, robust to differences in type and format of the cells
MethodDef proto void CopyFromRow_Robust(int dest_row, const DataCol&amp; cp, int src_row)
MethodDef opts [u'CAT_Copy']
MethodDef name: ChangeColType
MethodDef desc: change the type of the data in this col, without loss of data
MethodDef proto void ChangeColType(taBase::ValType new_type)
MethodDef opts [u'CAT_ObjectMgmt', u'MENU']
MethodDef name: ChangeColCellGeom
MethodDef desc: change the cell geom of a mat col, or change from scalar to mat, without loss of data
MethodDef proto void ChangeColCellGeom(const MatrixGeom&amp; new_geom)
MethodDef opts [u'CAT_ObjectMgmt', u'MENU', u'INIT_ARGVAL_ON_cell_geom']
MethodDef name: ChangeColCellGeomNs
MethodDef desc: change the cell geom of a mat col, or change from scalar to mat, without loss of data -- separate numbers input instead of overall geom object
MethodDef proto void ChangeColCellGeomNs(int dims = 1, int d0 = 0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: ChangeColMatToScalar
MethodDef desc: change from a mat col to a scalar col
MethodDef proto void ChangeColMatToScalar()
MethodDef opts [u'CAT_ObjectMgmt', u'MENU', u'CONFIRM']
MethodDef name: Init
MethodDef desc: call this *after* creation, or in UAE, to assert matrix geometry
MethodDef proto void Init()
MethodDef names [u'AR', u'ChangeColCellGeom', u'ChangeColCellGeomNs', u'ChangeColMatToScalar', u'ChangeColType', u'ClearColFlag', u'ColStats', u'CopyFromCol_Robust', u'CopyFromRow', u'CopyFromRow_Robust', u'Copy_NoData', u'DecodeHeaderName', u'EncodeHeaderName', u'EnforceRows', u'FindVal', u'Get2DCellGeom', u'Get2DCellGeomGui', u'GetCellGeom', u'GetMatrixVal', u'GetMinMaxScale', u'GetRangeAsMatrix', u'GetVal', u'GetValAsByte', u'GetValAsByteM', u'GetValAsByteMDims', u'GetValAsDouble', u'GetValAsDoubleM', u'GetValAsDoubleMDims', u'GetValAsFloat', u'GetValAsFloatM', u'GetValAsFloatMDims', u'GetValAsInt', u'GetValAsIntM', u'GetValAsIntMDims', u'GetValAsMatrix', u'GetValAsString', u'GetValAsStringM', u'GetValAsStringMDims', u'GetValAsVar', u'GetValAsVarM', u'GetValAsVarMDims', u'HasColFlag', u'Init', u'InitVals', u'InitValsToRowNo', u'InsertRows', u'SetColFlag', u'SetColFlagState', u'SetMatrixVal', u'SetVal', u'SetValAsByte', u'SetValAsByteM', u'SetValAsByteMDims', u'SetValAsDouble', u'SetValAsDoubleM', u'SetValAsDoubleMDims', u'SetValAsFloat', u'SetValAsFloatM', u'SetValAsFloatMDims', u'SetValAsInt', u'SetValAsIntM', u'SetValAsIntMDims', u'SetValAsMatrix', u'SetValAsString', u'SetValAsStringM', u'SetValAsStringMDims', u'SetValAsVar', u'SetValAsVarM', u'SetValAsVarMDims', u'cell_dims', u'cell_size', u'dataTable', u'displayWidth', u'imageComponents', u'isImage', u'isMatrix', u'isNumeric', u'isString', u'is_matrix_err', u'maxColWidth', u'not_matrix_err', u'rows', u'valType']
########################################################################
TypeDef len: 15
TypeDef name:  ColCalcExpr
TypeDef type: class
TypeDef desc: a column calculation expression
TypeDef cats:, [u'Data']
TypeDef opts:, [u'EDIT_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: expr
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: enter the expression here -- column value will be set to this.
you can just type in names of other columns (value is corresponding row&apos;s value) or literal values, or math expressions, etc.
enclose strings in double quotes.
column names will be checked and automatically updated
MemberDef name: col_lookup
MemberDef type: DataCol*
MemberDef opts [u'APPLY_IMMED', u'NULL_OK', u'NO_EDIT', u'NO_SAVE', u'FROM_GROUP_data_cols', u'NO_UPDATE_POINTER']
MemberDef cats []
MemberDef desc: lookup a program variable and add it to the current expression (this field then returns to empty/NULL)
MethodDef name: SetExpr
MethodDef desc: set to use given expression -- use this interface for future compatibility
MethodDef proto bool SetExpr(const taString&amp; ex)
MethodDef name: GetFullExpr
MethodDef desc: get full expression with variable names substituted appropriately -- use this interface instead of referring to raw expr, for future compatibility
MethodDef proto taString GetFullExpr()
MethodDef names [u'GetFullExpr', u'SetExpr']
########################################################################
TypeDef len: 9
TypeDef name:  DataTableCols
TypeDef type: class
TypeDef desc: columns of a datatable
TypeDef cats:, [u'Data']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  DataTable_Group
TypeDef type: class
TypeDef desc: group of data objects
TypeDef cats:, [u'Data']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  DataColTp
TypeDef type: class
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'DataCol']
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  String_Data
TypeDef type: class
TypeDef desc: string data
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  Variant_Data
TypeDef type: class
TypeDef desc: Variant data
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  double_Data
TypeDef type: class
TypeDef desc: doubleing point data
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  float_Data
TypeDef type: class
TypeDef desc: floating point data
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  int_Data
TypeDef type: class
TypeDef desc: int data
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  byte_Data
TypeDef type: class
TypeDef desc: byte data
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
########################################################################
TypeDef len: 13
TypeDef name:  DataTableEditorOptions
TypeDef type: class
TypeDef desc: for specifying and saving params for editing options
TypeDef cats:, []
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: VM_CellDetail
EnumDef val: VM_CellDetail
EnumDef: separate panel for cell detail editing
EnumDef name: VM_Flat
EnumDef val: VM_Flat
EnumDef: show all data in the main table, using dummy cells
EnumDef names: [u'ViewMode']
########################################################################
TypeDef len: 17
TypeDef name:  DataOpEl
TypeDef type: class
TypeDef desc: base class for data operations spec element
TypeDef cats:, [u'Data']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'DataSortEl', u'DataGroupEl', u'DataSelectEl']
MemberDef name: col_lookup
MemberDef type: DataCol*
MemberDef opts [u'APPLY_IMMED', u'NULL_OK', u'NO_SAVE', u'FROM_GROUP_data_cols', u'NO_EDIT', u'NO_UPDATE_POINTER']
MemberDef cats []
MemberDef desc: lookup column in data table to sort on -- sets col_name field (which is what is actually used) and returns to NULL after selection is applied
MemberDef name: col_name
MemberDef type: taString
MemberDef desc: name of column in data table to sort on (either enter directly or lookup from col_lookup)
MemberDef name: col_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: column idx (from GetColumns)
MethodDef name: SetDataTable
MethodDef desc: set the data table to enable looking up columns
MethodDef proto void SetDataTable(DataTable* dt)
MethodDef opts [u'CAT_DataOp']
MethodDef name: GetColumns
MethodDef desc: get the column pointers for given data table (looking up by name)
MethodDef proto void GetColumns(DataTable* dt)
MethodDef opts [u'CAT_DataOp']
MethodDef name: ClearColumns
MethodDef desc: clear column pointers (don&apos;t keep these guys hanging around)
MethodDef proto void ClearColumns()
MethodDef opts [u'CAT_DataOp']
MethodDef names [u'ClearColumns', u'GetColumns', u'SetDataTable']
########################################################################
TypeDef len: 11
TypeDef name:  DataOpList
TypeDef type: class
TypeDef desc: a list of data table operations
TypeDef cats:, [u'Data']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: SetDataTable
MethodDef desc: set the data table to enable looking up columns
MethodDef proto void SetDataTable(DataTable* dt)
MethodDef opts [u'CAT_DataOp']
MethodDef name: GetColumns
MethodDef desc: get the column pointers for given data table (looking up by name)
MethodDef proto void GetColumns(DataTable* dt)
MethodDef opts [u'CAT_DataOp']
MethodDef name: ClearColumns
MethodDef desc: clear column pointers (don&apos;t keep these guys hanging around)
MethodDef proto void ClearColumns()
MethodDef opts [u'CAT_DataOp']
MethodDef name: AddColumn
MethodDef desc: add a new column to operate on from given data table
MethodDef proto DataOpEl_ptr AddColumn(const taString&amp; col_name, DataTable* dt)
MethodDef opts [u'CAT_DataOp', u'BUTTON']
MethodDef name: AddAllColumns
MethodDef desc: add all columns from given data table
MethodDef proto void AddAllColumns(DataTable* dt)
MethodDef opts [u'CAT_DataOp']
MethodDef name: AddAllColumns_gui
MethodDef desc: add all columns from given data table
MethodDef proto void AddAllColumns_gui(DataTable* dt)
MethodDef opts [u'CAT_DataOp', u'BUTTON', u'LABEL_AddAllColumns']
MethodDef names [u'AddAllColumns', u'AddAllColumns_gui', u'AddColumn', u'ClearColumns', u'GetColumns', u'SetDataTable']
########################################################################
TypeDef len: 17
TypeDef name:  DataOpBaseSpec
TypeDef type: class
TypeDef desc: a datatable operation specification -- contains a list of operation elements associated with different data columns
TypeDef cats:, [u'Data']
TypeDef opts:, [u'STEM_BASE', u'DEF_CHILD_ops', u'DEF_CHILDNAME_Operators', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'DataSortSpec', u'DataGroupSpec', u'DataSelectSpec']
MemberDef name: ops
MemberDef type: DataOpList
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: the list of operation elements, associated with different data columns
MethodDef name: SetDataTable
MethodDef desc: set the data table to enable looking up columns
MethodDef proto void SetDataTable(DataTable* dt)
MethodDef opts [u'CAT_DataOp']
MethodDef name: GetColumns
MethodDef desc: get the column pointers for given data table (looking up by name)
MethodDef proto void GetColumns(DataTable* dt)
MethodDef opts [u'CAT_DataOp']
MethodDef name: ClearColumns
MethodDef desc: clear column pointers (don&apos;t keep these guys hanging around)
MethodDef proto void ClearColumns()
MethodDef opts [u'CAT_DataOp']
MethodDef name: AddColumn
MethodDef desc: add a new column to operate on from given data table
MethodDef proto DataOpEl_ptr AddColumn(const taString&amp; col_name, DataTable* dt)
MethodDef opts [u'CAT_DataOp', u'BUTTON']
MethodDef name: AddAllColumns
MethodDef desc: add all columns from given data table
MethodDef proto void AddAllColumns(DataTable* dt)
MethodDef opts [u'CAT_DataOp', u'BUTTON']
MethodDef names [u'AddAllColumns', u'AddColumn', u'ClearColumns', u'GetColumns', u'SetDataTable']
########################################################################
TypeDef len: 15
TypeDef name:  DataSortEl
TypeDef type: class
TypeDef desc: one element of a data sorting specification
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'DataOpEl']
EnumDef name: ASCENDING
EnumDef val: ASCENDING
EnumDef name: DESCENDING
EnumDef val: DESCENDING
EnumDef names: [u'SortOrder']
MemberDef name: order
MemberDef type: DataSortEl::SortOrder
MemberDef desc: order to sort this in
########################################################################
TypeDef len: 11
TypeDef name:  DataSortSpec
TypeDef type: class
TypeDef desc: a datatable sort specification (list of sort elements)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'DEF_CHILD_ops', u'DEF_CHILDNAME_Operators', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'DataOpBaseSpec']
########################################################################
TypeDef len: 13
TypeDef name:  DataGroupEl
TypeDef type: class
TypeDef desc: one element of a data grouping specification
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'DataOpEl']
MemberDef name: agg
MemberDef type: Aggregate
MemberDef desc: how to aggregate this information
########################################################################
TypeDef len: 13
TypeDef name:  DataGroupSpec
TypeDef type: class
TypeDef desc: a datatable grouping specification (list of group elements)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'DEF_CHILD_ops', u'DEF_CHILDNAME_Operators', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'DataOpBaseSpec']
MemberDef name: append_agg_name
MemberDef type: bool
MemberDef desc: if true, append aggregation operator name (e.g., group, mean, last, etc) to column names of destination data table (otherwise, just keep same names as source)
########################################################################
TypeDef len: 17
TypeDef name:  DataSelectEl
TypeDef type: class
TypeDef desc: one element of a data selection specification
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'DataOpEl']
EnumDef name: EQUAL
EnumDef val: EQUAL
EnumDef name: NOTEQUAL
EnumDef val: NOTEQUAL
EnumDef name: LESSTHAN
EnumDef val: LESSTHAN
EnumDef name: GREATERTHAN
EnumDef val: GREATERTHAN
EnumDef name: LESSTHANOREQUAL
EnumDef val: LESSTHANOREQUAL
EnumDef name: GREATERTHANOREQUAL
EnumDef val: GREATERTHANOREQUAL
EnumDef name: CONTAINS
EnumDef val: CONTAINS
EnumDef: for strings: contains this value
EnumDef name: NOT_CONTAINS
EnumDef val: NOT_CONTAINS
EnumDef: for strings: doesn&apos;t contain this value
EnumDef names: [u'Relations']
MemberDef name: rel
MemberDef type: DataSelectEl::Relations
MemberDef desc: relation of column to expression for selection
MemberDef name: use_var
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: if true, use a program variable to specify the selection value
MemberDef name: cmp
MemberDef type: Variant
MemberDef opts [u'CONDEDIT_ON_use_var:false']
MemberDef cats []
MemberDef desc: literal compare value of column to this comparison value
MemberDef name: var
MemberDef type: ProgVarRef
MemberDef opts [u'CONDEDIT_ON_use_var:true']
MemberDef cats []
MemberDef desc: variable that contains the comparison value: note -- this MUST be a global var in vars or args, not in local vars!
MethodDef name: Eval
MethodDef desc: evaluate expression
MethodDef proto bool Eval(const Variant&amp; val)
MethodDef names [u'Eval']
########################################################################
TypeDef len: 15
TypeDef name:  DataSelectSpec
TypeDef type: class
TypeDef desc: a datatable select specification (list of select elements)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'DEF_CHILD_ops', u'DEF_CHILDNAME_Operators', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'DataOpBaseSpec']
EnumDef name: AND
EnumDef val: AND
EnumDef: include only if all of the columns are true
EnumDef name: OR
EnumDef val: OR
EnumDef: include if any one (or more) of the columns are true
EnumDef name: NOT_AND
EnumDef val: NOT_AND
EnumDef: include only if all of the columns are false
EnumDef name: NOT_OR
EnumDef val: NOT_OR
EnumDef: include if any of (or more) the columns are false
EnumDef names: [u'CombOp']
MemberDef name: comb_op
MemberDef type: DataSelectSpec::CombOp
MemberDef desc: how to combine individual expressions for each column
########################################################################
TypeDef len: 17
TypeDef name:  DataJoinSpec
TypeDef type: class
TypeDef desc: datatable join specification: combine two tables along matching column values -- tables are both sorted (internally) by join col, so results are in that sort order
TypeDef cats:, [u'Data']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: LEFT
EnumDef val: LEFT
EnumDef: each row of the first table is included, with blanks for nonmatches
EnumDef name: INNER
EnumDef val: INNER
EnumDef: only matching rows from both tables are included
EnumDef names: [u'JoinType']
MemberDef name: col_a
MemberDef type: DataOpEl
MemberDef desc: column from first (a) source datatable to join on (values match those in col_b)
MemberDef name: col_b
MemberDef type: DataOpEl
MemberDef desc: column from second (b) source datatable to join on (values match those in col_a)
MemberDef name: type
MemberDef type: DataJoinSpec::JoinType
MemberDef desc: type of join to perfrom (determines what to do with nonmatches -- matches are always included)
MemberDef name: nomatch_warn
MemberDef type: bool
MemberDef opts [u'CONDEDIT_ON_type:INNER']
MemberDef cats []
MemberDef desc: for INNER join, issue a warning for row values in A that do not have a matching value in B
MethodDef name: SetDataTable
MethodDef desc: set the data table to enable looking up columns
MethodDef proto void SetDataTable(DataTable* dt_a, DataTable* dt_b)
MethodDef name: GetColumns
MethodDef desc: get the column pointers for given data table (looking up by name)
MethodDef proto void GetColumns(DataTable* dt_a, DataTable* dt_b)
MethodDef name: ClearColumns
MethodDef desc: clear column pointers (don&apos;t keep these guys hanging around)
MethodDef proto void ClearColumns()
MethodDef names [u'ClearColumns', u'GetColumns', u'SetDataTable']
########################################################################
TypeDef len: 13
TypeDef name:  taDataProc
TypeDef type: class
TypeDef desc: collection of commonly-used datatable processing operations (database-style)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MethodDef name: GetCommonCols
MethodDef desc: find common columns between dest and src by name, cell_size, and type if matrix
MethodDef proto bool GetCommonCols(DataTable* dest, DataTable* src, DataOpList* dest_cols, DataOpList* src_cols)
MethodDef opts [u'CAT_ColumnLists']
MethodDef name: GetColIntersection
MethodDef desc: get the intersection (common columns) between two lists of columns: trg_cols and ref_cols (based only on name) -- i.e., remove any columns in trg_cols that are not in the ref_cols list
MethodDef proto bool GetColIntersection(DataOpList* trg_cols, DataOpList* ref_cols)
MethodDef opts [u'CAT_ColumnLists']
MethodDef name: CopyData
MethodDef desc: just copy the data from source to destination, completely removing any existing data in the destination, but not changing anything else about the dest (e.g., its name) (if dest is NULL, a new one is created in proj.data.AnalysisData)
MethodDef proto bool CopyData(DataTable* dest, DataTable* src)
MethodDef opts [u'CAT_Copy', u'MENU_BUTTON', u'MENU_ON_Copy', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: CopyCommonColsRow_impl
MethodDef desc: copy one row of data from src to dest for the lists of common columns generated by GetCommonCols
MethodDef proto bool CopyCommonColsRow_impl(DataTable* dest, DataTable* src, DataOpList* dest_cols, DataOpList* src_cols, int dest_row, int src_row)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyCommonColsRow
MethodDef desc: copy one row of data from src to dest for the cols that are in common between the two tables (by name)
MethodDef proto bool CopyCommonColsRow(DataTable* dest, DataTable* src, int dest_row, int src_row)
MethodDef opts [u'CAT_Copy']
MethodDef name: CopyCommonColData
MethodDef desc: copy data from src to dest for all columns that are common between the two (adds to end of dest rows)
MethodDef proto bool CopyCommonColData(DataTable* dest, DataTable* src)
MethodDef opts [u'CAT_Copy', u'MENU_BUTTON']
MethodDef name: AppendRows
MethodDef desc: append rows of src to the end of dest (structure must be the same -- more efficient than CopyCommonColData when this is true)
MethodDef proto bool AppendRows(DataTable* dest, DataTable* src)
MethodDef opts [u'CAT_Copy', u'MENU_BUTTON']
MethodDef name: ReplicateRows
MethodDef desc: replicate each row of src n_repl times in dest -- dest is completely overwritten (if dest is NULL, a new one is created in proj.data.AnalysisData)
MethodDef proto bool ReplicateRows(DataTable* dest, DataTable* src, int n_repl)
MethodDef opts [u'CAT_Copy', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: ConcatRows
MethodDef desc: concatenate rows of data from all the source data tables into the destination, which is completely overwritten with the new data. (if dest is NULL, a new one is created in proj.data.AnalysisData). just a sequence of calls to CopyCommonColData
MethodDef proto bool ConcatRows(DataTable* dest, DataTable* src_a, DataTable* src_b, DataTable* src_c = __null, DataTable* src_d = __null, DataTable* src_e = __null, DataTable* src_f = __null)
MethodDef opts [u'CAT_Copy', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: Sort
MethodDef desc: sort data from src into dest according to sorting specifications in spec; dest is completely overwritten (if dest is NULL, a new one is created in proj.data.AnalysisData)
MethodDef proto bool Sort(DataTable* dest, DataTable* src, DataSortSpec* spec)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Order', u'MENU_BUTTON', u'MENU_ON_Order']
MethodDef name: SortInPlace
MethodDef desc: sort given data table in place (modifies data table) according to sorting specifications in spec
MethodDef proto bool SortInPlace(DataTable* dt, DataSortSpec* spec)
MethodDef opts [u'CAT_Order', u'MENU_BUTTON', u'MENU_ON_Order']
MethodDef name: Permute
MethodDef desc: permute (randomly reorder) the rows of the data table -- note that it is typically much more efficient to just use a permuted index to access the data rather than physically permuting the items
MethodDef proto bool Permute(DataTable* dest, DataTable* src)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Order', u'MENU_BUTTON']
MethodDef name: Group
MethodDef desc: group data from src into dest according to grouping specifications in spec (if dest is NULL, a new one is created in proj.data.AnalysisData)
MethodDef proto bool Group(DataTable* dest, DataTable* src, DataGroupSpec* spec)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Order', u'MENU_BUTTON']
MethodDef name: SelectRows
MethodDef desc: select rows of data from src into dest according to selection specifications in spec (all columns are copied) (if dest is NULL, a new one is created in proj.data.AnalysisData)
MethodDef proto bool SelectRows(DataTable* dest, DataTable* src, DataSelectSpec* spec)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Select', u'MENU_BUTTON', u'MENU_ON_Select']
MethodDef name: SplitRows
MethodDef desc: splits the source datatable rows into two sets, those that match the selection specifications go into dest_a, else dest_b (if dest are NULL, new ones are created in proj.data.AnalysisData)
MethodDef proto bool SplitRows(DataTable* dest_a, DataTable* dest_b, DataTable* src, DataSelectSpec* spec)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Select', u'MENU_BUTTON']
MethodDef name: SplitRowsN
MethodDef desc: splits the source datatable rows into distinct non-overlapping sets, with specific number of elements (sequentially) in each (-1 = the remainder, can appear *only once* anywhere) (new dest datatables are created if NULL)
MethodDef proto bool SplitRowsN(DataTable* src, DataTable* dest_1, int n1, DataTable* dest_2, int n2 = -1, DataTable* dest_3 = __null, int n3 = 0, DataTable* dest_4 = __null, int n4 = 0, DataTable* dest_5 = __null, int n5 = 0, DataTable* dest_6 = __null, int n6 = 0)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Select', u'MENU_BUTTON']
MethodDef name: SplitRowsNPermuted
MethodDef desc: splits the source datatable rows into distinct non-overlapping sets, with specific number of elements (order permuted efficiently via an index list) in each (-1 = the remainder, can appear *only once* anywhere) (new dest datatables are created if NULL). this is good for creating random training/testing subsets
MethodDef proto bool SplitRowsNPermuted(DataTable* src, DataTable* dest_1, int n1, DataTable* dest_2, int n2 = -1, DataTable* dest_3 = __null, int n3 = 0, DataTable* dest_4 = __null, int n4 = 0, DataTable* dest_5 = __null, int n5 = 0, DataTable* dest_6 = __null, int n6 = 0)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Select', u'MENU_BUTTON']
MethodDef name: SelectCols
MethodDef desc: select columns of data from src into dest according to list of columnns in spec (all rows are copied)
MethodDef proto bool SelectCols(DataTable* dest, DataTable* src, DataOpList* spec)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Columns', u'MENU_BUTTON', u'MENU_ON_Columns']
MethodDef name: Join
MethodDef desc: joins two datatables (src_a and src_b) into dest datatable. tables are internally sorted first according to the join column. all matching row values from both tables are included in the result. for the left join, all rows of src_a are included even if src_b does not match, and vice-versa for the right join. inner only includes the matches. all columns are included (without repeating the common column)
MethodDef proto bool Join(DataTable* dest, DataTable* src_a, DataTable* src_b, DataJoinSpec* spec)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Columns', u'MENU_BUTTON']
MethodDef name: ConcatCols
MethodDef desc: concatenate two datatables into one datatable by adding both sets of columns together, merging data on a row-by-row basis (number of rows = MIN(src_a-&gt;rows, src_b_rows)).
MethodDef proto bool ConcatCols(DataTable* dest, DataTable* src_a, DataTable* src_b)
MethodDef opts [u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable', u'CAT_Columns', u'MENU_BUTTON']
MethodDef names [u'AppendRows', u'ConcatCols', u'ConcatRows', u'CopyCommonColData', u'CopyCommonColsRow', u'CopyCommonColsRow_impl', u'CopyData', u'GetColIntersection', u'GetCommonCols', u'Group', u'Join', u'Permute', u'ReplicateRows', u'SelectCols', u'SelectRows', u'Sort', u'SortInPlace', u'SplitRows', u'SplitRowsN', u'SplitRowsNPermuted']
########################################################################
TypeDef len: 11
TypeDef name:  DataProcCall
TypeDef type: class
TypeDef desc: call a taDataProc (data processing/database) function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'StaticMethodCall']
########################################################################
TypeDef len: 17
TypeDef name:  DataOneProg
TypeDef type: class
TypeDef desc: a program element for operations on one data table (virtual base class -- do not use)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'VIRT_BASE', u'NO_INSTANCE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'DataVarProg', u'ResetDataRows', u'AddNewDataRow', u'DoneWritingDataRow']
MemberDef name: data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to data table for operation
MethodDef name: GetData
MethodDef desc: get actual data table pointer from variable
MethodDef proto DataTable_ptr GetData()
MethodDef names [u'GetData']
########################################################################
TypeDef len: 19
TypeDef name:  DataLoop
TypeDef type: class
TypeDef desc: For any kind of data table: loops over items in a DataTable, in different basic orderings, using index to select current data table item using ReadItem(index) call, so that later processes will access this row of data
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop']
TypeDef children: [u'NetDataLoop']
EnumDef name: SEQUENTIAL
EnumDef val: SEQUENTIAL
EnumDef: present events in sequential order
EnumDef name: PERMUTED
EnumDef val: PERMUTED
EnumDef: permute the order of event presentation
EnumDef name: RANDOM
EnumDef val: RANDOM
EnumDef: pick an event at random (with replacement)
EnumDef names: [u'Order']
MemberDef name: data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to the data table to use
MemberDef name: index_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable for the index used in the loop -- goes from 0 to number of rows in data table-1
MemberDef name: order_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: variable that contains the order to process data items (rows) in -- is automatically created if not set
MemberDef name: order
MemberDef type: DataLoop::Order
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: order to process data items (rows) in -- set from order_var
MemberDef name: item_idx_list
MemberDef type: int_Array
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: list of item indicies (permuted if permuted, otherwise in sequential order)
MethodDef name: GetData
MethodDef desc: get actual data table pointer from variable
MethodDef proto DataBlock_ptr GetData()
MethodDef name: GetOrderVal
MethodDef desc: get order value from order_var variable
MethodDef proto void GetOrderVal()
MethodDef names [u'GetData', u'GetOrderVal']
########################################################################
TypeDef len: 17
TypeDef name:  DataVarProg
TypeDef type: class
TypeDef desc: A program element for exchanging information between program variables and data table values in columns with the same names as the variables -- scalar only variables
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataOneProg']
TypeDef children: [u'DataVarProgMatrix']
EnumDef name: CUR_ROW
EnumDef val: CUR_ROW
EnumDef: use the current row (i.e., the last one added or specifically set by Read or Write operation)
EnumDef name: ROW_NUM
EnumDef val: ROW_NUM
EnumDef: row_var variable contains the row number to operate on
EnumDef name: ROW_VAL
EnumDef val: ROW_VAL
EnumDef: row_var variable contains a value that is used to find the row number by searching within data table column with the same name as the row_var variable
EnumDef names: [u'RowType']
MemberDef name: set_data
MemberDef type: bool
MemberDef desc: if true, values in data table are set according to current variable values, otherwise, it gets data from the data table into the variables
MemberDef name: row_spec
MemberDef type: DataVarProg::RowType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: how the row number within data table is specified
MemberDef name: row_var
MemberDef type: ProgVarRef
MemberDef opts [u'CONDEDIT_OFF_row_spec:CUR_ROW', u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable containing information about which row to operate on (depends on row_spec for what this information is)
MemberDef name: var_1
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of column in data table!
MemberDef name: var_2
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of column in data table!
MemberDef name: var_3
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of column in data table!
MemberDef name: var_4
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable to operate on -- name must match name of column in data table!
########################################################################
TypeDef len: 11
TypeDef name:  DataVarProgMatrix
TypeDef type: class
TypeDef desc: A program element for exchanging information between program variables and data table values in columns with the same names as the variables -- for matrix variables up to 4 cells (var_1 is first cell, var_2 is second cell..), name of column is var name before last &apos;_&apos;
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataOneProg', u'DataVarProg']
########################################################################
TypeDef len: 11
TypeDef name:  ResetDataRows
TypeDef type: class
TypeDef desc: clear out all existing rows of data in data table
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataOneProg']
########################################################################
TypeDef len: 11
TypeDef name:  AddNewDataRow
TypeDef type: class
TypeDef desc: add a new row to data table (just calls AddBlankRow() on data table var object)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataOneProg']
########################################################################
TypeDef len: 11
TypeDef name:  DoneWritingDataRow
TypeDef type: class
TypeDef desc: add this after you are done writing everything to the current row of the data table, and it will update displays and write to log files, etc (just calls WriteClose() on data table var object)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataOneProg']
########################################################################
TypeDef len: 17
TypeDef name:  DataSrcDestProg
TypeDef type: class
TypeDef desc: a program element for data operations involving a source and destination (virtual base class -- do not use)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'VIRT_BASE', u'NO_INSTANCE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'DataSortProg', u'DataGroupProg', u'DataSelectRowsProg', u'DataSelectColsProg', u'DataJoinProg', u'DataCalcLoop', u'DataCalcAddDestRow', u'DataCalcSetDestRow', u'DataCalcSetSrcRow', u'DataCalcCopyCommonCols']
MemberDef name: src_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to source data for operation
MemberDef name: dest_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'NULL_OK', u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to destination (result) data for operation (if NULL, a new one will be automatically created)
MethodDef name: GetSrcData
MethodDef desc: get source data table pointer from src_data_var (or NULL)
MethodDef proto DataTable_ptr GetSrcData()
MethodDef name: GetDestData
MethodDef desc: get dsource data table pointer from dest_data_var (or NULL)
MethodDef proto DataTable_ptr GetDestData()
MethodDef name: UpdateSpecDataTable
MethodDef desc: update the data table pointer(s) for the spec in this prog (so the user can choose columns from the appropriate data table)
MethodDef proto void UpdateSpecDataTable()
MethodDef opts [u'CAT_Data']
MethodDef names [u'GetDestData', u'GetSrcData', u'UpdateSpecDataTable']
########################################################################
TypeDef len: 15
TypeDef name:  DataSortProg
TypeDef type: class
TypeDef desc: sorts src_data into dest_data according to sort_spec
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: sort_spec
MemberDef type: DataSortSpec
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: data sorting specification
MethodDef name: AddColumn
MethodDef desc: add a new column to operate on
MethodDef proto DataOpEl_ptr AddColumn(const taString&amp; col_name)
MethodDef opts [u'CAT_Data', u'BUTTON']
MethodDef name: AddAllColumns
MethodDef desc: add all columns from src_data to the sort_spec list of ops columns
MethodDef proto void AddAllColumns()
MethodDef opts [u'BUTTON', u'CAT_Data']
MethodDef names [u'AddAllColumns', u'AddColumn']
########################################################################
TypeDef len: 15
TypeDef name:  DataGroupProg
TypeDef type: class
TypeDef desc: groups src_data into dest_data according to group_spec
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: group_spec
MemberDef type: DataGroupSpec
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: data grouping specification
MethodDef name: AddColumn
MethodDef desc: add a new column to operate on
MethodDef proto DataOpEl_ptr AddColumn(const taString&amp; col_name)
MethodDef opts [u'CAT_Data', u'BUTTON']
MethodDef name: AddAllColumns
MethodDef desc: add all columns from src_data to the group_spec list of ops columns
MethodDef proto void AddAllColumns()
MethodDef opts [u'BUTTON', u'CAT_Data']
MethodDef names [u'AddAllColumns', u'AddColumn']
########################################################################
TypeDef len: 15
TypeDef name:  DataSelectRowsProg
TypeDef type: class
TypeDef desc: selects rows from src_data into dest_data according to select_spec
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: select_spec
MemberDef type: DataSelectSpec
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: data selection specification
MethodDef name: AddColumn
MethodDef desc: add a new column to operate on
MethodDef proto DataOpEl_ptr AddColumn(const taString&amp; col_name)
MethodDef opts [u'CAT_Data', u'BUTTON']
MethodDef name: AddAllColumns
MethodDef desc: add all columns from src_data to the select_spec list of ops columns
MethodDef proto void AddAllColumns()
MethodDef opts [u'BUTTON', u'CAT_Data']
MethodDef names [u'AddAllColumns', u'AddColumn']
########################################################################
TypeDef len: 15
TypeDef name:  DataSelectColsProg
TypeDef type: class
TypeDef desc: selects rows from src_data into dest_data according to select_spec
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_select_spec', u'DEF_CHILDNAME_Select_Spec', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: select_spec
MemberDef type: DataOpList
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: columns to select
MethodDef name: AddColumn
MethodDef desc: add a new column to operate on
MethodDef proto DataOpEl_ptr AddColumn(const taString&amp; col_name)
MethodDef opts [u'CAT_Data', u'BUTTON']
MethodDef name: AddAllColumns
MethodDef desc: add all columns from src_data to the select_spec list of ops columns
MethodDef proto void AddAllColumns()
MethodDef opts [u'BUTTON', u'CAT_Data']
MethodDef names [u'AddAllColumns', u'AddColumn']
########################################################################
TypeDef len: 15
TypeDef name:  DataJoinProg
TypeDef type: class
TypeDef desc: joins two datatables (src and src_b) into dest datatable indexed by a common column
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: src_b_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: variable pointing to second source data for operation
MemberDef name: join_spec
MemberDef type: DataJoinSpec
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: data grouping specification
MethodDef name: GetSrcBData
MethodDef desc: get source data table pointer from src_data_var (or NULL)
MethodDef proto DataTable_ptr GetSrcBData()
MethodDef names [u'GetSrcBData']
########################################################################
TypeDef len: 15
TypeDef name:  DataCalcLoop
TypeDef type: class
TypeDef desc: enables arbitrary calculations and operations on data by looping row-by-row through the src_data table; can either just operate on src_data (using SetSrcRow) or generate new dest_data (using AddDestRow and SetDestRow)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: src_cols
MemberDef type: DataOpList
MemberDef desc: source columns to operate on (variables are labeled as s_xxx where xxx is col_name)
MemberDef name: dest_cols
MemberDef type: DataOpList
MemberDef desc: destination columns to operate on (variables are labeled as d_xxx where xxx is col_name)
MemberDef name: loop_code
MemberDef type: ProgEl_List
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: the items to execute in the loop
MemberDef name: src_col_vars
MemberDef type: ProgVar_List
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: source column variables
MemberDef name: dest_col_vars
MemberDef type: ProgVar_List
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: dest column variables
MethodDef name: AddSrcColumn
MethodDef desc: add a new source column to operate on
MethodDef proto DataOpEl_ptr AddSrcColumn(const taString&amp; col_name)
MethodDef opts [u'CAT_DataOp', u'BUTTON']
MethodDef name: AddDestColumn
MethodDef desc: add a new dest column to operate on
MethodDef proto DataOpEl_ptr AddDestColumn(const taString&amp; col_name)
MethodDef opts [u'CAT_DataOp', u'BUTTON']
MethodDef name: AddAllSrcColumns
MethodDef desc: add all columns from src_data to the src_cols list of columns
MethodDef proto void AddAllSrcColumns()
MethodDef opts [u'BUTTON', u'CAT_Data']
MethodDef name: AddAllDestColumns
MethodDef desc: add all columns from dest_data to the dest_cols list of columns
MethodDef proto void AddAllDestColumns()
MethodDef opts [u'BUTTON', u'CAT_Data']
MethodDef name: AddLoopCode
MethodDef desc: add a new loop code element
MethodDef proto ProgEl_ptr AddLoopCode(TypeDef* el_type)
MethodDef opts [u'BUTTON', u'TYPE_ProgEl']
MethodDef names [u'AddAllDestColumns', u'AddAllSrcColumns', u'AddDestColumn', u'AddLoopCode', u'AddSrcColumn']
########################################################################
TypeDef len: 15
TypeDef name:  DataCalcAddDestRow
TypeDef type: class
TypeDef desc: add a new blank row into the dest data table (used ONLY within a DataCalcLoop to add new data -- automatically gets dest_data from outer DataCalcLoop object)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: dest_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'READ_ONLY', u'SHOW', u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: destination table to add row in -- automatically updated from DataCalcLoop
MethodDef name: GetDataPtrsFmLoop
MethodDef desc: get my data table ptrs from parent calc loop obj
MethodDef proto void GetDataPtrsFmLoop()
MethodDef names [u'GetDataPtrsFmLoop']
########################################################################
TypeDef len: 15
TypeDef name:  DataCalcSetDestRow
TypeDef type: class
TypeDef desc: set all the current values into the dest data table (used ONLY within a DataCalcLoop -- automatically gets dest_data from outer DataCalcLoop object)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: dest_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'READ_ONLY', u'SHOW', u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: destination table to add row in -- automatically updated from DataCalcLoop
MethodDef name: GetDataPtrsFmLoop
MethodDef desc: get my data table ptrs from parent calc loop obj
MethodDef proto void GetDataPtrsFmLoop()
MethodDef names [u'GetDataPtrsFmLoop']
########################################################################
TypeDef len: 15
TypeDef name:  DataCalcSetSrcRow
TypeDef type: class
TypeDef desc: set all the current values into the src data table (used ONLY within a DataCalcLoop -- automatically gets src_data from outer DataCalcLoop object)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: src_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'READ_ONLY', u'SHOW', u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: source table to set values in -- automatically updated from DataCalcLoop
MethodDef name: GetDataPtrsFmLoop
MethodDef desc: get my data table ptrs from parent calc loop obj
MethodDef proto void GetDataPtrsFmLoop()
MethodDef names [u'GetDataPtrsFmLoop']
########################################################################
TypeDef len: 15
TypeDef name:  DataCalcCopyCommonCols
TypeDef type: class
TypeDef desc: copy all of the columns from source to dest that have the same name and type (used ONLY within a DataCalcLoop -- automatically gets src_data from outer DataCalcLoop object)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'DataSrcDestProg']
MemberDef name: src_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'READ_ONLY', u'SHOW', u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: source data for copying -- automatically updated from DataCalcLoop
MemberDef name: dest_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'READ_ONLY', u'SHOW', u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: destination table for copying -- automatically updated from DataCalcLoop
MemberDef name: only_named_cols
MemberDef type: bool
MemberDef desc: only copy columns that are named in src_cols and dest_cols (otherwise just operates on all the datatable columns)
MethodDef name: GetDataPtrsFmLoop
MethodDef desc: get my data table ptrs from parent calc loop obj
MethodDef proto void GetDataPtrsFmLoop()
MethodDef name: CopyInner_
MethodDef proto void CopyInner_(const DataCalcCopyCommonCols&amp; cp)
MethodDef names [u'CopyInner_', u'GetDataPtrsFmLoop']
########################################################################
TypeDef len: 15
TypeDef name:  ClustNode
TypeDef type: class
TypeDef desc: node in clustering algorithm use one with leaves as children as a root node for cluster
TypeDef cats:, [u'Math']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: pat
MemberDef type: taMatrix*
MemberDef desc: pattern I point to (if leaf)
MemberDef name: leaf_idx
MemberDef type: int
MemberDef desc: original leaf index, used for pointing into master distance table
MemberDef name: leaf_dists
MemberDef type: float_Matrix*
MemberDef desc: distance matrix for all leaves
MemberDef name: par_dist
MemberDef type: float
MemberDef desc: distance from parent cluster
MemberDef name: nn_dist
MemberDef type: float
MemberDef desc: nearest neighbor (within cluster) distance
MemberDef name: tmp_dist
MemberDef type: float
MemberDef desc: temporary distance value (for computations)
MemberDef name: y
MemberDef type: float
MemberDef desc: y axis value
MemberDef name: children
MemberDef type: taBase_List
MemberDef desc: my sub-nodes
MemberDef name: nns
MemberDef type: taBase_List
MemberDef desc: nearest neighbor(s)
MethodDef name: GetChild
MethodDef proto ClustNode_ptr GetChild(int i)
MethodDef name: GetNN
MethodDef proto ClustNode_ptr GetNN(int i)
MethodDef name: GetNNDist
MethodDef proto float_ref GetNNDist(int i)
MethodDef name: SetPat
MethodDef desc: use setpointer to set pat
MethodDef proto void SetPat(taMatrix* pt)
MethodDef name: AddChild
MethodDef desc: add new child (via ClustLink)
MethodDef proto void AddChild(ClustNode* nd, float dst = 0.0f)
MethodDef name: LinkNN
MethodDef desc: add new neighbor (via ClustLink)
MethodDef proto void LinkNN(ClustNode* nd, float dst = 0.0f)
MethodDef name: RemoveChild
MethodDef desc: remove link with this node
MethodDef proto bool RemoveChild(ClustNode* nd)
MethodDef name: FindChild
MethodDef desc: find child with this node link
MethodDef proto int FindChild(ClustNode* nd)
MethodDef name: Cluster
MethodDef desc: main call to generate the cluster: call on a root node initialized with a flat list of leaf children pointing to the patterns to be clustered
MethodDef proto bool Cluster(taMath::DistMetric metric = taMath::EUCLIDIAN, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_Cluster']
MethodDef name: GraphData
MethodDef desc: generate graph as X, Y, label points in a datatable, suitable for graphing
MethodDef proto void GraphData(DataTable* dt)
MethodDef names [u'AddChild', u'Cluster', u'FindChild', u'GetChild', u'GetNN', u'GetNNDist', u'GraphData', u'LinkNN', u'RemoveChild', u'SetPat']
########################################################################
TypeDef len: 13
TypeDef name:  ClustLink
TypeDef type: class
TypeDef desc: a link in the cluster tree with distance
TypeDef cats:, [u'Math']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: dist
MemberDef type: float
MemberDef desc: distance to this node from parent
MemberDef name: node
MemberDef type: ClustNode*
MemberDef desc: cluster node
########################################################################
TypeDef len: 13
TypeDef name:  taDataAnal
TypeDef type: class
TypeDef desc: collection of data analysis functions
TypeDef cats:, [u'Data']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MethodDef name: DistMatrix
MethodDef desc: compute distance matrix for given matrix data column in src_data datatable. dist_mat returns a square symmetric matrix with cells as the distance between each row and every other row of matrix data. distance data is converted to float regardless of source type (float or double)
MethodDef proto bool DistMatrix(float_Matrix* dist_mat, DataTable* src_data, const taString&amp; data_col_nm, taMath::DistMetric metric, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: DistMatrixTable
MethodDef desc: compute distance matrix table for given matrix data column in src_data datatable. dist_mat returns a square symmetric matrix with cells as the distance between each row and every other row of matrix data. if name_col_nm is non-empty and valid, nxn scalar float rows and columns are made, with names from name_col_nm values from src_data table; otherwise a single matrix column is made, named by the src_data name + &apos;_DistMatrix&apos;. if view, then a grid view in a new frame is automatically created
MethodDef proto bool DistMatrixTable(DataTable* dist_mat, bool view, DataTable* src_data, const taString&amp; data_col_nm, const taString&amp; name_col_nm, taMath::DistMetric metric, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_Distance', u'MENU_BUTTON', u'MENU_ON_Distance']
MethodDef name: CrossDistMatrix
MethodDef desc: compute cross distance matrix between two different matrix data columns in src_data_a and src_data_b datatables. dist_mat returns a symmetric matrix with cells as the distance between each row in table a versus each row of table b. distance data is converted to float regardless of source type (float or double)
MethodDef proto bool CrossDistMatrix(float_Matrix* dist_mat, DataTable* src_data_a, const taString&amp; data_col_nm_a, DataTable* src_data_b, const taString&amp; data_col_nm_b, taMath::DistMetric metric, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: CrossDistMatrixTable
MethodDef desc: compute cross distance matrix table between two different matrix data columns in src_data_a and srd_data_b datatables. dist_mat returns a symmetric matrix with cells as the distance between each row in table a versus each row of table b. if name_col_nm is non-empty and valid, nxm scalar float rows and columns are made, with names from name_col_nm values from src_data table; otherwise a single matrix column is made, named by the src_data_a + &apos;_&apos; + src_data_b + &apos;_DistMatrix&apos;. if view, then a grid view in a new frame is automatically created
MethodDef proto bool CrossDistMatrixTable(DataTable* dist_mat, bool view, DataTable* src_data_a, const taString&amp; data_col_nm_a, const taString&amp; name_col_nm_a, DataTable* src_data_b, const taString&amp; data_col_nm_b, const taString&amp; name_col_nm_b, taMath::DistMetric metric, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_Distance', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: CorrelMatrix
MethodDef desc: compute correlation matrix for given matrix data column in src_data datatable. correl_mat returns the correlation for how each cell in the matrix data varies across rows (e.g., time) as compared to all the other cells. result is ncells x ncells symmetric square matrix. correlation data is converted to float regardless of source type (float or double)
MethodDef proto bool CorrelMatrix(float_Matrix* correl_mat, DataTable* src_data, const taString&amp; data_col_nm)
MethodDef opts [u'CAT_Correlation']
MethodDef name: CorrelMatrixTable
MethodDef desc: compute correlation matrix for given matrix data column in src_data datatable. correl_mat returns the correlation for how each cell in the matrix data varies across rows (e.g., time) as compared to all the other cells. a single matrix column is made, named by the src_data name + &apos;_CorrelMatrix&apos;. if view, then a grid view in a new frame is automatically created
MethodDef proto bool CorrelMatrixTable(DataTable* correl_mat, bool view, DataTable* src_data, const taString&amp; data_col_nm)
MethodDef opts [u'CAT_Correlation', u'MENU_BUTTON', u'MENU_SEP_BEFORE', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: Cluster
MethodDef desc: produce a hierarchical clustering of the distances between patterns in given data column from source data, with labels from given name_col_nm, using given distance metric. if view, the resulting data table is graphed to produce a cluster plot. NULL DataTable = create new one
MethodDef proto bool Cluster(DataTable* clust_data, bool view, DataTable* src_data, const taString&amp; data_col_nm, const taString&amp; name_col_nm, taMath::DistMetric metric = taMath::EUCLIDIAN, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_HighDim', u'MENU_BUTTON', u'MENU_ON_HighDim', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: PCAEigens
MethodDef desc: get principal components analysis (PCA) eigenvalues and eigenvectors of correlation matrix across rows for given matrix column name in source data
MethodDef proto bool PCAEigens(float_Matrix* eigen_vals, float_Matrix* eigen_vecs, DataTable* src_data, const taString&amp; data_col_nm)
MethodDef opts [u'CAT_HighDim']
MethodDef name: PCAEigenTable
MethodDef desc: get principal components analysis (PCA) eigenvalues and eigenvectors of correlation matrix across rows for given matrix column name in source data. NULL DataTable = create new one
MethodDef proto bool PCAEigenTable(DataTable* pca_data, bool view, DataTable* src_data, const taString&amp; data_col_nm)
MethodDef opts [u'CAT_HighDim', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: PCA2dPrjn
MethodDef desc: perform principal components analysis of the correlations of patterns in given columm across rows, plotting projections of patterns on the given principal components in the data table. if name_col_nm not empty, rows are labeled with these names. NULL DataTable = create new one
MethodDef proto bool PCA2dPrjn(DataTable* prjn_data, bool view, DataTable* src_data, const taString&amp; data_col_nm, const taString&amp; name_col_nm, int x_axis_component = 0, int y_axis_component = 1)
MethodDef opts [u'CAT_HighDim', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: MDS2dPrjn
MethodDef desc: perform multidimensional scaling on the distance matrix (computed according to metric, norm, tol parameters) of patterns in column name across rows, putting the resulting projections into prjn_data. if name_col_nm not empty, rows are labeled with these names. NULL DataTable = create new one
MethodDef proto bool MDS2dPrjn(DataTable* prjn_data, bool view, DataTable* src_data, const taString&amp; data_col_nm, const taString&amp; name_col_nm, int x_axis_component = 0, int y_axis_component = 1, taMath::DistMetric metric = taMath::EUCLIDIAN, bool norm = false, float tol = 0.0)
MethodDef opts [u'CAT_HighDim', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: RowPat2dPrjn
MethodDef desc: project all rows according to their projection onto the two specified rows of patterns using given distance metrics
MethodDef proto bool RowPat2dPrjn(DataTable* prjn_data, bool view, DataTable* src_data, const taString&amp; data_col_nm, const taString&amp; name_col_nm, int x_row = 0, int y_row = 1, taMath::DistMetric metric = taMath::INNER_PROD, bool norm = false, float tol = 0.0)
MethodDef opts [u'CAT_HighDim', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: TimeAvg
MethodDef desc: compute the time average for all the numeric fields of source data, according to the given avg_dt (new_val = avg_dt * avg + (1-avg_dt) * old_val). if(float_only) then int or byte data is not time averaged
MethodDef proto bool TimeAvg(DataTable* time_avg_data, bool view, DataTable* src_data, float avg_dt, bool float_only = true)
MethodDef opts [u'CAT_Clean', u'MENU_BUTTON', u'MENU_ON_Clean', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: SmoothUniform
MethodDef desc: uniform smoothing: compute the uniform average of all the numeric fields of source data, using a uniform kernel of given half-width. neg and pos tail determine if kernel includes the negative (earlier) side and the positive (later) side. if(keep_edges) then smooth data is same size as src_data, otherwise edges of kern_half_wd are lost on either side of the data. if(float_only) then int or byte data is not averaged
MethodDef proto bool SmoothUniform(DataTable* smooth_data, bool view, DataTable* src_data, int kern_half_wd, bool neg_tail = true, bool pos_tail = true, bool keep_edges = true, bool float_only = true)
MethodDef opts [u'CAT_Clean', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: SmoothGauss
MethodDef desc: gaussian smoothing: compute the gaussian-convolved average for all the numeric fields of source data, using a gaussian kernel of given half-width and sigma (std deviation). neg and pos tail determine if kernel includes the negative (earlier) side and the positive (later) side. if(keep_edges) then smooth data is same size as src_data, otherwise edges of kern_half_wd are lost on either side of the data. if(float_only) then int or byte data is not averaged
MethodDef proto bool SmoothGauss(DataTable* smooth_data, bool view, DataTable* src_data, int kern_half_wd, float kern_sigma, bool neg_tail = true, bool pos_tail = true, bool keep_edges = true, bool float_only = true)
MethodDef opts [u'CAT_Clean', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: SmoothExp
MethodDef desc: exponential smoothing: compute the exponentially-convolved average for all the numeric fields of source data, using an exponential kernel of given half-width and exponent. neg and pos tail determine if kernel includes the negative (earlier) side and the positive (later) side. if(keep_edges) then smooth data is same size as src_data, otherwise edges of kern_half_wd are lost on either side of the data. if(float_only) then int or byte data is not averaged
MethodDef proto bool SmoothExp(DataTable* smooth_data, bool view, DataTable* src_data, int kern_half_wd, float kern_exp, bool neg_tail = true, bool pos_tail = false, bool keep_edges = true, bool float_only = true)
MethodDef opts [u'CAT_Clean', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: SmoothPow
MethodDef desc: power-function smoothing: compute the power-function-convolved average for all the numeric fields of source data, using an power-function kernel of given half-width and exponent (typically negative). neg and pos tail determine if kernel includes the negative (earlier) side and the positive (later) side. if(keep_edges) then smooth data is same size as src_data, otherwise edges of kern_half_wd are lost on either side of the data. if(float_only) then int or byte data is not averaged
MethodDef proto bool SmoothPow(DataTable* smooth_data, bool view, DataTable* src_data, int kern_half_wd, float kern_exp, bool neg_tail = true, bool pos_tail = false, bool keep_edges = true, bool float_only = true)
MethodDef opts [u'CAT_Clean', u'MENU_BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef names [u'Cluster', u'CorrelMatrix', u'CorrelMatrixTable', u'CrossDistMatrix', u'CrossDistMatrixTable', u'DistMatrix', u'DistMatrixTable', u'MDS2dPrjn', u'PCA2dPrjn', u'PCAEigenTable', u'PCAEigens', u'RowPat2dPrjn', u'SmoothExp', u'SmoothGauss', u'SmoothPow', u'SmoothUniform', u'TimeAvg']
########################################################################
TypeDef len: 11
TypeDef name:  DataAnalCall
TypeDef type: class
TypeDef desc: call a taDataAnal (data analysis) function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'StaticMethodCall']
########################################################################
TypeDef len: 15
TypeDef name:  taDataGen
TypeDef type: class
TypeDef desc: collection of data generation functions (e.g., drawing, random patterns, combining lists)
TypeDef cats:, [u'Data']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: MULTIPLY
EnumDef val: MULTIPLY
EnumDef: multiply the numbers
EnumDef name: ADD
EnumDef val: ADD
EnumDef: add the numbers
EnumDef names: [u'CombineOp']
MethodDef name: Clear
MethodDef desc: clear existing patterns: set all values to given value in float matrix column col_nm (empty col_nm = all float matrix columns)
MethodDef proto bool Clear(DataTable* data, const taString&amp; col_nm, float val = 0.0)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Basic', u'CONFIRM', u'CAT_Basic']
MethodDef name: SimpleMath
MethodDef desc: Apply simple math operation to all values in float matrix column col_nm (empty col_nm = all float matrix columns)
MethodDef proto bool SimpleMath(DataTable* data, const taString&amp; col_nm, const SimpleMathSpec&amp; math)
MethodDef opts [u'MENU_BUTTON', u'CAT_Basic']
MethodDef name: CrossLists
MethodDef desc: creates a full set of combination of elements from two or more lists (of conditions or other items) -- for each row in the first list, replicate all rows in the second list, and so on..
MethodDef proto bool CrossLists(DataTable* crossed_output, const DataTable* data_list_1, const DataTable* data_list_2, const DataTable* data_list_3 = __null, const DataTable* data_list_4 = __null, const DataTable* data_list_5 = __null)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Lists', u'CAT_Lists', u'NULL_OK_0', u'NULL_OK_3', u'NULL_OK_4', u'NULL_OK_5']
MethodDef name: CombineFrequencies
MethodDef desc: for a data table containing a list of items with multiple frequency_x columns (e.g., as created by the CrossLists function), this will combine the frequencies into one overall frequency in the output table freq_output, using given operation. If renorm_freqs, then overall frequencies are renormalized as probabilities to sum to 1
MethodDef proto bool CombineFrequencies(DataTable* freq_output, const DataTable* data_list_in, const taString&amp; freq_col_nm = frequency, taDataGen::CombineOp opr = MULTIPLY, bool renorm_freqs = true)
MethodDef opts [u'MENU_BUTTON', u'CAT_Lists', u'NULL_OK_0']
MethodDef name: ReplicateByFrequency
MethodDef desc: replicate the items in the input data by the number given in the frequency column times the total_number value (equivalent to PERMUTED form of frequency sampling -- without replacement, always the same number), optionally renormalizing the frequency values to sum to 1 (does not affect data_list_in table)
MethodDef proto bool ReplicateByFrequency(DataTable* repl_output, const DataTable* data_list_in, int total_number, const taString&amp; freq_col_nm = frequency, bool renorm_freqs = true)
MethodDef opts [u'MENU_BUTTON', u'CAT_Lists', u'NULL_OK_0']
MethodDef name: SampleByFrequency
MethodDef desc: sample the items in the input data as a function of the probability value given in the frequency column, with n_samples taken per row (equivalent to RANDOM form of frequency sampling -- with replacement -- total N varies), optionally renormalizing the frequency values to sum to 1 (does not affect data_list_in table)
MethodDef proto bool SampleByFrequency(DataTable* repl_output, const DataTable* data_list_in, int n_samples = 1, const taString&amp; freq_col_nm = frequency, bool renorm_freqs = true)
MethodDef opts [u'MENU_BUTTON', u'CAT_Lists', u'NULL_OK_0']
MethodDef name: NsByFrequency
MethodDef desc: compute the numbers of items in the input data that would be produced by the ReplicateByFrequency fnction (frequency column times the total_number value, optionally renormalizing the frequency values to sum to 1 (does not affect data_list_in table))
MethodDef proto bool NsByFrequency(DataTable* repl_output, const DataTable* data_list_in, int total_number, const taString&amp; freq_col_nm = frequency, bool renorm_freqs = true)
MethodDef opts [u'MENU_BUTTON', u'CAT_Lists', u'NULL_OK_0']
MethodDef name: ProbSelectRow
MethodDef desc: select a row from data table from among subset of rows that have key_val for column key_col using probabilities given in p_col column -- very useful for randomly generating events based on a set of probabilities for given options at each point
MethodDef proto int ProbSelectRow(DataTable* data_table, const taString&amp; key_col, const taString&amp; key_val, const taString&amp; p_col)
MethodDef opts [u'MENU_BUTTON', u'CAT_Lists']
MethodDef name: ProbSelectColNo
MethodDef desc: select a column number from data table based on probabilities associated with different columns -- the colval is the name of the column to return the column number of given the associated probability in colp -- very useful for randomly generating events based on a set of probabilities for given options at each point
MethodDef proto int ProbSelectColNo(DataTable* data_table, int row_no, const taString&amp; colval1, const taString&amp; colp1, const taString&amp; colval2, const taString&amp; colp2, const taString&amp; colval3, const taString&amp; colp3, const taString&amp; colval4, const taString&amp; colp4, const taString&amp; colval5, const taString&amp; colp5, const taString&amp; colval6, const taString&amp; colp6, const taString&amp; colval7, const taString&amp; colp7, const taString&amp; colval8, const taString&amp; colp8)
MethodDef opts [u'MENU_BUTTON', u'CAT_Lists']
MethodDef name: ProbSelectColVal
MethodDef desc: select a column value from data table based on probabilities associated with different columns -- the colval is the name of the column to return the column value of given the associated probability in colp -- very useful for randomly generating events based on a set of probabilities for given options at each point
MethodDef proto Variant ProbSelectColVal(DataTable* data_table, int row_no, const taString&amp; colval1, const taString&amp; colp1, const taString&amp; colval2, const taString&amp; colp2, const taString&amp; colval3, const taString&amp; colp3, const taString&amp; colval4, const taString&amp; colp4, const taString&amp; colval5, const taString&amp; colp5, const taString&amp; colval6, const taString&amp; colp6, const taString&amp; colval7, const taString&amp; colp7, const taString&amp; colval8, const taString&amp; colp8)
MethodDef opts [u'MENU_BUTTON', u'CAT_Lists']
MethodDef name: WritePoint
MethodDef desc: write a single point
MethodDef proto bool WritePoint(float_Matrix* mat, int x, int y, float color = 1.0, bool wrap = true)
MethodDef opts [u'CAT_Draw']
MethodDef name: RenderLine
MethodDef desc: render a line from given x,y starting, ending coords in 2d space
MethodDef proto bool RenderLine(float_Matrix* mat, int xs, int ys, int xe, int ye, float color = 1.0, bool wrap = true)
MethodDef opts [u'CAT_Draw', u'MENU_BUTTON', u'MENU_ON_Draw']
MethodDef name: WriteXPoints
MethodDef desc: write a series of points of given width in x dimension using colors in order
MethodDef proto bool WriteXPoints(float_Matrix* mat, int x, int y, const float_Matrix&amp; color, int wdth = 1, bool wrap = true)
MethodDef opts [u'CAT_Draw']
MethodDef name: WriteYPoints
MethodDef desc: write a series of points of given width in y dimension using colors in order
MethodDef proto bool WriteYPoints(float_Matrix* mat, int x, int y, const float_Matrix&amp; color, int wdth = 1, bool wrap = true)
MethodDef opts [u'CAT_Draw']
MethodDef name: RenderWideLine
MethodDef desc: render a wide line from given x,y starting, ending coords in 2d space
MethodDef proto bool RenderWideLine(float_Matrix* mat, int xs, int ys, int xe, int ye, const float_Matrix&amp; color, int wdth = 1, bool wrap = true)
MethodDef opts [u'CAT_Draw', u'MENU_BUTTON']
MethodDef name: AddNoiseMat
MethodDef desc: add random noise to given pattern
MethodDef proto bool AddNoiseMat(float_Matrix* mat, const Random&amp; rnd_spec)
MethodDef opts [u'CAT_Random']
MethodDef name: AddNoise
MethodDef desc: add random noise of specified type to the patterns (pat_no: -1 = all pats)
MethodDef proto bool AddNoise(DataTable* data, const taString&amp; col_nm, const Random&amp; rnd_spec)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Random', u'CAT_Random']
MethodDef name: PermutedBinaryMat
MethodDef desc: set matrix values to permuted binary pattern of n_on on_vals and rest off_vals
MethodDef proto bool PermutedBinaryMat(float_Matrix* mat, int n_on, float on_val = 1.0f, float off_val = 0.0f)
MethodDef opts [u'CAT_Random']
MethodDef name: PermutedBinary
MethodDef desc: create permuted binary patterns of n_on on_vals (1&apos;s) and rest off_vals (0&apos;s) in given col (must be float matrix) (col_nm = empty = all float matrix columns)
MethodDef proto bool PermutedBinary(DataTable* data, const taString&amp; col_nm, int n_on, float on_val = 1.0f, float off_val = 0.0f)
MethodDef opts [u'MENU_BUTTON', u'CAT_Random']
MethodDef name: PermutedBinary_MinDist
MethodDef desc: create permuted binary patterns with dist minimum hamming distance (or dist max_correl) (col nm = empty = all float matrix columns)
MethodDef proto bool PermutedBinary_MinDist(DataTable* data, const taString&amp; col_nm, int n_on, float dist, taMath::DistMetric metric = taMath::HAMMING, bool norm = false, float tol = 0.0f)
MethodDef opts [u'MENU_BUTTON', u'CAT_Random']
MethodDef name: FlipBitsMat
MethodDef desc: flip n_off of the 1 bits into the 0 state, and n_on of the 0 bits to the 1 state
MethodDef proto bool FlipBitsMat(float_Matrix* mat, int n_off, int n_on)
MethodDef opts [u'CAT_Random']
MethodDef name: FlipBits
MethodDef desc: flip n_off bits from 1&apos;s to 0&apos;s, and n_on bits from 0&apos;s to 1&apos;s in float matrix column col_nm (col_nm empty = all float matrix columns)
MethodDef proto bool FlipBits(DataTable* data, const taString&amp; col_nm, int n_off, int n_on)
MethodDef opts [u'MENU_BUTTON', u'CAT_Random']
MethodDef name: FlipBits_MinMax
MethodDef desc: flip bits, ensuring range within min and max distances (pat_no: -1 = all pats)
MethodDef proto bool FlipBits_MinMax(DataTable* data, const taString&amp; col_nm, int n_off, int n_on, float min_dist, float max_dist, taMath::DistMetric metric = taMath::HAMMING, bool norm = false, float tol = 0.0f)
MethodDef opts [u'MENU_BUTTON']
MethodDef name: LastMinDist
MethodDef desc: returns minimum distance (or max correl) between last (n th) pattern and all previous
MethodDef proto float LastMinDist(DataCol* da, int row, taMath::DistMetric metric = taMath::HAMMING, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: LastMinMaxDist
MethodDef desc: returns min and max distance between last (n th) pattern and all previous
MethodDef proto float LastMinMaxDist(DataCol* da, int row, float&amp; max_dist, taMath::DistMetric metric = taMath::HAMMING, bool norm = false, float tol = 0.0f)
MethodDef opts [u'CAT_Distance']
MethodDef name: GetDirFiles
MethodDef desc: read file names from given directory into rows of the data table (must be passed non-null, is NOT reset prior to adding new rows!), with the file name and full path to file (including directory names) written to given string column names (these are created if they do not exist)
MethodDef proto bool GetDirFiles(DataTable* dest, const taString&amp; dir_path, const taString&amp; filter, bool recursive = false, const taString&amp; fname_col_nm = FileName, const taString&amp; path_col_nm = FilePath)
MethodDef opts [u'CAT_Files', u'MENU_BUTTON', u'MENU_ON_Files', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef names [u'AddNoise', u'AddNoiseMat', u'Clear', u'CombineFrequencies', u'CrossLists', u'FlipBits', u'FlipBitsMat', u'FlipBits_MinMax', u'GetDirFiles', u'LastMinDist', u'LastMinMaxDist', u'NsByFrequency', u'PermutedBinary', u'PermutedBinaryMat', u'PermutedBinary_MinDist', u'ProbSelectColNo', u'ProbSelectColVal', u'ProbSelectRow', u'RenderLine', u'RenderWideLine', u'ReplicateByFrequency', u'SampleByFrequency', u'SimpleMath', u'WritePoint', u'WriteXPoints', u'WriteYPoints']
########################################################################
TypeDef len: 11
TypeDef name:  DataGenCall
TypeDef type: class
TypeDef desc: call a taDataGen (data generation) function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'StaticMethodCall']
########################################################################
TypeDef len: 15
TypeDef name:  taImage
TypeDef type: class
TypeDef desc: represents an image in TA accessible way (wrapper for QT&apos;s QImage)
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'taCanvas']
MethodDef name: GetImage
MethodDef desc: get the underlying qt image
MethodDef proto QImage_ref GetImage()
MethodDef name: SetImage
MethodDef desc: set the underlying qt image
MethodDef proto void SetImage(const_QImage_ref img)
MethodDef opts [u'CAT_Image']
MethodDef name: LoadImage
MethodDef desc: load the image from given file name (leave file name blank to get a chooser)
MethodDef proto bool LoadImage(const taString&amp; fname)
MethodDef opts [u'CAT_File', u'FILE_DIALOG_LOAD']
MethodDef name: SaveImage
MethodDef desc: save the image to given file name (leave file name blank to get a chooser) -- uses extension to determine format
MethodDef proto bool SaveImage(const taString&amp; fname)
MethodDef opts [u'CAT_File', u'FILE_DIALOG_SAVE']
MethodDef name: GetPixelGrey_float
MethodDef desc: get the pixel value as a greyscale for given coordinates
MethodDef proto float GetPixelGrey_float(int x, int y)
MethodDef opts [u'CAT_Image']
MethodDef name: GetPixelRGB_float
MethodDef desc: get the pixel value as floating point RGB values for given coordinates
MethodDef proto bool GetPixelRGB_float(int x, int y, float&amp; r, float&amp; g, float&amp; b)
MethodDef opts [u'CAT_Image']
MethodDef name: ImageToGrey_float
MethodDef desc: convert image to greyscale floating point image data: note that this uses standard matrix convention where 0,0 = bottom left of image, not top left..
MethodDef proto bool ImageToGrey_float(float_Matrix&amp; grey_data)
MethodDef opts [u'CAT_Data']
MethodDef name: ImageToRGB_float
MethodDef desc: convert image to RGB floating point image data -- img_data is 3 dimensional with 3rd dim = r,g,b: note that this uses standard matrix convention where 0,0 = bottom left of image, not top left..
MethodDef proto bool ImageToRGB_float(float_Matrix&amp; rgb_data)
MethodDef opts [u'CAT_Data']
MethodDef name: ImageToDataCell
MethodDef desc: set image to datatable cell indexed by col and row numbers -- uses cell dimensionality and type -- only amount that fits in cell is copied. row = -1 = last row
MethodDef proto bool ImageToDataCell(DataTable* dt, int col, int row)
MethodDef opts [u'CAT_Data']
MethodDef name: ImageToDataCellName
MethodDef desc: set image to datatable cell indexed by col name and row number -- uses cell dimensionality and type -- only amount that fits in cell is copied. row = -1 = last row
MethodDef proto bool ImageToDataCellName(DataTable* dt, const taString&amp; col_nm, int row)
MethodDef opts [u'CAT_Data']
MethodDef name: ConfigDataColName
MethodDef desc: configure data column with given name (if it doesn&apos;t exist, it is created) to represent current image -- if rgb is false, then a greyscale image is configured (2d)
MethodDef proto bool ConfigDataColName(DataTable* dt, const taString&amp; col_nm, taBase::ValType val_type, bool rgb = true)
MethodDef opts [u'CAT_Data']
MethodDef name: ScaleImage
MethodDef desc: scale image by given normalized scaling factors in each dimension
MethodDef proto bool ScaleImage(float sx, float sy, bool smooth = true)
MethodDef opts [u'CAT_Image']
MethodDef name: RotateImage
MethodDef desc: rotate image by given normalized degrees (1 = 360deg)
MethodDef proto bool RotateImage(float norm_deg, bool smooth = true)
MethodDef opts [u'CAT_Image']
MethodDef name: TranslateImage
MethodDef desc: translate image by given normalized factors (-1 = all the way left, +1 = all the way right, etc)
MethodDef proto bool TranslateImage(float move_x, float move_y, bool smooth = true)
MethodDef opts [u'CAT_Image']
MethodDef name: GetImageSize
MethodDef desc: get size of current image
MethodDef proto bool GetImageSize(int&amp; width, int&amp; height)
MethodDef opts [u'CAT_Image']
MethodDef name: SetImageSize
MethodDef desc: set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format
MethodDef proto bool SetImageSize(int width, int height)
MethodDef opts [u'CAT_Image']
MethodDef names [u'ConfigDataColName', u'GetImage', u'GetImageSize', u'GetPixelGrey_float', u'GetPixelRGB_float', u'ImageToDataCell', u'ImageToDataCellName', u'ImageToGrey_float', u'ImageToRGB_float', u'LoadImage', u'RotateImage', u'SaveImage', u'ScaleImage', u'SetImage', u'SetImageSize', u'TranslateImage']
########################################################################
TypeDef len: 17
TypeDef name:  taCanvas
TypeDef type: class
TypeDef desc: provides a mechanism for drawing onto an image buffer
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taImage']
EnumDef name: PIXELS
EnumDef val: PIXELS
EnumDef: raw pixels
EnumDef name: NORMALIZED
EnumDef val: NORMALIZED
EnumDef: normalized 0-1 values
EnumDef names: [u'CoordType']
MemberDef name: coord_type
MemberDef type: taCanvas::CoordType
MemberDef desc: type of coordinates to use in drawing (0,0 is lower left)
MethodDef name: InitCanvas
MethodDef desc: initialize the canvas -- MUST be called prior to drawing!
MethodDef proto void InitCanvas()
MethodDef opts [u'CAT_Canvas']
MethodDef name: CheckInit
MethodDef proto bool CheckInit()
MethodDef name: EraseRGBA
MethodDef desc: erase image to given rgba color
MethodDef proto void EraseRGBA(float r, float g, float b, float a)
MethodDef opts [u'CAT_Canvas']
MethodDef name: EraseName
MethodDef desc: erase image to given color name
MethodDef proto void EraseName(const taString&amp; name)
MethodDef opts [u'CAT_Canvas']
MethodDef name: Point
MethodDef proto void Point(float x, float y)
MethodDef opts [u'CAT_Draw']
MethodDef name: Line
MethodDef proto void Line(float x1, float y1, float x2, float y2)
MethodDef opts [u'CAT_Draw']
MethodDef name: Rect
MethodDef proto void Rect(float l, float b, float r, float t)
MethodDef opts [u'CAT_Draw']
MethodDef name: Circle
MethodDef proto void Circle(float x, float y, float r)
MethodDef opts [u'CAT_Draw']
MethodDef name: Ellipse
MethodDef proto void Ellipse(float x, float y, float rx, float ry)
MethodDef opts [u'CAT_Draw']
MethodDef name: FillRect
MethodDef proto void FillRect(float l, float b, float r, float t)
MethodDef opts [u'CAT_Draw']
MethodDef name: FillCircle
MethodDef proto void FillCircle(float x, float y, float r)
MethodDef opts [u'CAT_Draw']
MethodDef name: FillEllipse
MethodDef proto void FillEllipse(float x, float y, float rx, float ry)
MethodDef opts [u'CAT_Draw']
MethodDef name: NewPath
MethodDef desc: start a new path (must have done DrawPath or FillPath on any prior paths first!)
MethodDef proto void NewPath()
MethodDef opts [u'CAT_Path']
MethodDef name: MoveTo
MethodDef desc: move current path position to given coordinate without drawing -- will create a new path if not yet initialized
MethodDef proto void MoveTo(float x, float y)
MethodDef opts [u'CAT_Path']
MethodDef name: LineTo
MethodDef proto void LineTo(float x, float y)
MethodDef opts [u'CAT_Path']
MethodDef name: CurveTo
MethodDef desc: draw Bezier curve to given x,y point, using x1,y1 and x2,y2 as control points that determine curvature
MethodDef proto void CurveTo(float x, float y, float x1, float y1, float x2, float y2)
MethodDef opts [u'CAT_Path']
MethodDef name: DrawPath
MethodDef desc: draw the current path using current pen brush and close it -- a NewPath or MoveTo is required to start a new path
MethodDef proto void DrawPath()
MethodDef opts [u'CAT_Path']
MethodDef name: FillPath
MethodDef desc: fill the current path using current fill brush and close it -- a NewPath or MoveTo is required to start again
MethodDef proto void FillPath()
MethodDef opts [u'CAT_Path']
MethodDef name: DrawFillPath
MethodDef desc: draw outline and fill the current path using current pen and fill brush and close it -- a NewPath or MoveTo is required to start again
MethodDef proto void DrawFillPath()
MethodDef opts [u'CAT_Path']
MethodDef name: DeletePath
MethodDef desc: delete the current path -- called by DrawPath and FillPath -- use to remove accidental path if needed
MethodDef proto void DeletePath()
MethodDef opts [u'CAT_Path']
MethodDef name: TextLeft
MethodDef desc: draw text left justified
MethodDef proto void TextLeft(const taString&amp; txt, float x, float y)
MethodDef opts [u'CAT_Text']
MethodDef name: TextCenter
MethodDef desc: draw text centered
MethodDef proto void TextCenter(const taString&amp; txt, float x, float y)
MethodDef opts [u'CAT_Text']
MethodDef name: TextRight
MethodDef desc: draw text right justified
MethodDef proto void TextRight(const taString&amp; txt, float x, float y)
MethodDef opts [u'CAT_Text']
MethodDef name: SetFont
MethodDef desc: set font for text drawing operations
MethodDef proto void SetFont(const taString&amp; font_name, int point_size = -1, int weight = -1, bool italic = false)
MethodDef opts [u'CAT_Text']
MethodDef name: ClipRect
MethodDef proto void ClipRect(float l, float b, float r, float t)
MethodDef opts [u'CAT_Clip']
MethodDef name: PenColorRGBA
MethodDef proto void PenColorRGBA(float r, float g, float b, float a)
MethodDef opts [u'CAT_Draw']
MethodDef name: PenColorName
MethodDef proto void PenColorName(const taString&amp; name)
MethodDef opts [u'CAT_Draw']
MethodDef name: PenWidth
MethodDef proto void PenWidth(float width)
MethodDef opts [u'CAT_Draw']
MethodDef name: FillColorRGBA
MethodDef proto void FillColorRGBA(float r, float g, float b, float a)
MethodDef opts [u'CAT_Draw']
MethodDef name: FillColorName
MethodDef proto void FillColorName(const taString&amp; name)
MethodDef opts [u'CAT_Draw']
MethodDef names [u'CheckInit', u'Circle', u'ClipRect', u'CurveTo', u'DeletePath', u'DrawFillPath', u'DrawPath', u'Ellipse', u'EraseName', u'EraseRGBA', u'FillCircle', u'FillColorName', u'FillColorRGBA', u'FillEllipse', u'FillPath', u'FillRect', u'InitCanvas', u'Line', u'LineTo', u'MoveTo', u'NewPath', u'PenColorName', u'PenColorRGBA', u'PenWidth', u'Point', u'Rect', u'SetFont', u'TextCenter', u'TextLeft', u'TextRight']
########################################################################
TypeDef len: 17
TypeDef name:  DoGFilterSpec
TypeDef type: class
TypeDef desc: defines a difference-of-gaussians (center minus surround or &apos;mexican hat&apos;) filter that highlights contrast in an image
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: BLACK_WHITE
EnumDef val: BLACK_WHITE
EnumDef name: RED_GREEN
EnumDef val: RED_GREEN
EnumDef name: BLUE_YELLOW
EnumDef val: BLUE_YELLOW
EnumDef names: [u'ColorChannel']
MemberDef name: color_chan
MemberDef type: DoGFilterSpec::ColorChannel
MemberDef desc: which color channel to operate on
MemberDef name: filter_width
MemberDef type: int
MemberDef desc: half-width of the filter (typically 2 * off_sigma)
MemberDef name: filter_size
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: size of the filter: 2 * width + 1
MemberDef name: on_sigma
MemberDef type: float
MemberDef desc: width of the narrower central &apos;on&apos; gaussian
MemberDef name: off_sigma
MemberDef type: float
MemberDef desc: width of the wider surround &apos;off&apos; gaussian (typically 2 * on_sigma)
MemberDef name: circle_edge
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: cut off the filter (to zero) outside a circle of radius filter_width -- makes the filter more radially symmetric
MemberDef name: on_filter
MemberDef type: float_Matrix
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: on-gaussian
MemberDef name: off_filter
MemberDef type: float_Matrix
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: off-gaussian (values are positive)
MemberDef name: net_filter
MemberDef type: float_Matrix
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: net overall filter (for display purposes)
MethodDef name: FilterPoint
MethodDef desc: apply filter at given x,y point to given color values
MethodDef proto float FilterPoint(int x, int y, float r_val, float g_val, float b_val)
MethodDef opts [u'CAT_DoGFilter']
MethodDef name: RenderFilter
MethodDef desc: render filter into matrix
MethodDef proto void RenderFilter(float_Matrix&amp; on_flt, float_Matrix&amp; off_flt, float_Matrix&amp; net_flt)
MethodDef opts [u'CAT_DoGFilter']
MethodDef name: UpdateFilter
MethodDef desc: make our personal filter (RenderFilter(filter)) according to current params
MethodDef proto void UpdateFilter()
MethodDef opts [u'CAT_DoGFilter']
MethodDef name: GraphFilter
MethodDef desc: plot the filter gaussian into data table and generate a graph
MethodDef proto void GraphFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: GridFilter
MethodDef desc: plot the filter gaussian into data table and generate a grid view (reset any existing data first)
MethodDef proto void GridFilter(DataTable* disp_data, bool reset = true)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef names [u'FilterPoint', u'GraphFilter', u'GridFilter', u'RenderFilter', u'UpdateFilter']
########################################################################
TypeDef len: 19
TypeDef name:  GaborFilterSpec
TypeDef type: class
TypeDef desc: defines a gabor filter (gaussian times a plane sine wave) that highlights lines/edges in an image
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'GaborFitter']
EnumDef name: CTR_X
EnumDef val: CTR_X
EnumDef name: CTR_Y
EnumDef val: CTR_Y
EnumDef name: ANGLE
EnumDef val: ANGLE
EnumDef name: PHASE
EnumDef val: PHASE
EnumDef name: FREQ
EnumDef val: FREQ
EnumDef name: LENGTH
EnumDef val: LENGTH
EnumDef name: WIDTH
EnumDef val: WIDTH
EnumDef name: AMP
EnumDef val: AMP
EnumDef names: [u'GaborParam']
MemberDef name: x_size
MemberDef type: int
MemberDef desc: overall size of the filtered region
MemberDef name: y_size
MemberDef type: int
MemberDef desc: overall size of the filtered region
MemberDef name: ctr_x
MemberDef type: float
MemberDef desc: center in x coord
MemberDef name: ctr_y
MemberDef type: float
MemberDef desc: center in y coord
MemberDef name: angle
MemberDef type: float
MemberDef desc: angle of sine wave in 2-d space (in radians)
MemberDef name: phase
MemberDef type: float
MemberDef desc: phase of sine wave wrt the center of the gaussian (radians)
MemberDef name: freq
MemberDef type: float
MemberDef desc: frequency of the sine wave
MemberDef name: length
MemberDef type: float
MemberDef desc: length of the gaussian perpendicular to the wave direction
MemberDef name: width
MemberDef type: float
MemberDef desc: width of the gaussian in the wave direction
MemberDef name: amp
MemberDef type: float
MemberDef desc: amplitude (maximum value)
MemberDef name: filter
MemberDef type: float_Matrix
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: our filter
MethodDef name: Eval
MethodDef desc: evaluate gabor function for given coordinates
MethodDef proto float Eval(float x, float y)
MethodDef opts [u'CAT_GaborFilter']
MethodDef name: RenderFilter
MethodDef desc: render filter into matrix
MethodDef proto void RenderFilter(float_Matrix&amp; flt)
MethodDef opts [u'CAT_GaborFilter']
MethodDef name: UpdateFilter
MethodDef desc: make our personal filter (RenderFilter(filter)) according to current params
MethodDef proto void UpdateFilter()
MethodDef opts [u'CAT_GaborFilter']
MethodDef name: GetParam
MethodDef desc: get particular parameter value
MethodDef proto float GetParam(GaborFilterSpec::GaborParam param)
MethodDef opts [u'CAT_GaborFilter']
MethodDef name: GraphFilter
MethodDef desc: plot the filter into data table and generate a graph from it
MethodDef proto void GraphFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: GridFilter
MethodDef desc: plot the filter into data table and generate a grid view of it (reset an existing data first)
MethodDef proto void GridFilter(DataTable* disp_data, bool reset = true)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: OutputParams
MethodDef desc: output current parameter values to stream
MethodDef proto void OutputParams(ostream&amp; strm = cerr)
MethodDef opts [u'CAT_GaborFilter']
MethodDef names [u'Eval', u'GetParam', u'GraphFilter', u'GridFilter', u'OutputParams', u'RenderFilter', u'UpdateFilter']
########################################################################
TypeDef len: 15
TypeDef name:  GaborFitter
TypeDef type: class
TypeDef desc: fits a gabor filter from image data
TypeDef cats:, [u'Image']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'GaborFilterSpec']
MemberDef name: fit_dist
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: fit distance
MethodDef name: ParamDist
MethodDef desc: return euclidian distance between parameters for this spec and the other one
MethodDef proto float ParamDist(const GaborFilterSpec&amp; oth)
MethodDef opts [u'CAT_GaborFilter']
MethodDef names [u'ParamDist']
########################################################################
TypeDef len: 17
TypeDef name:  RetinalSpacingSpec
TypeDef type: class
TypeDef desc: defines the spacing of a filter relative to a specified retinal image size
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: FOVEA
EnumDef val: FOVEA
EnumDef name: PARAFOVEA
EnumDef val: PARAFOVEA
EnumDef name: PERIPHERY
EnumDef val: PERIPHERY
EnumDef name: HI_RES
EnumDef val: HI_RES
EnumDef name: MED_RES
EnumDef val: MED_RES
EnumDef name: LOW_RES
EnumDef val: LOW_RES
EnumDef name: VLOW_RES
EnumDef val: VLOW_RES
EnumDef names: [u'Region', u'Resolution']
MemberDef name: region
MemberDef type: RetinalSpacingSpec::Region
MemberDef desc: retinal region represented by this filter
MemberDef name: res
MemberDef type: RetinalSpacingSpec::Resolution
MemberDef desc: level of resolution represented by this filter (can use enum or any other arbitrary rating scale -- just for informational/matcing purposes)
MemberDef name: retina_size
MemberDef type: TwoDCoord
MemberDef desc: overall size of the retina
MemberDef name: border
MemberDef type: TwoDCoord
MemberDef desc: border around retina that we don&apos;t process
MemberDef name: spacing
MemberDef type: TwoDCoord
MemberDef desc: spacing between centers of filters in input
MemberDef name: input_size
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: size of input region in pixels
MemberDef name: output_size
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: size of the filter output
MemberDef name: output_units
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: total number of units to represent filter
MethodDef name: UpdateSizes
MethodDef desc: update the computed sizes
MethodDef proto void UpdateSizes()
MethodDef name: PlotSpacing
MethodDef desc: plot the arrangement of the filters (centers) in the data table using given value, and generate a grid view
MethodDef proto void PlotSpacing(DataTable* disp_data, float val = 1.0f)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef names [u'PlotSpacing', u'UpdateSizes']
########################################################################
TypeDef len: 15
TypeDef name:  DoGRetinaSpec
TypeDef type: class
TypeDef desc: specifies the spacing of Difference-of-Gaussian filters for the retina
TypeDef cats:, [u'Image']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: dog
MemberDef type: DoGFilterSpec
MemberDef desc: Difference of Gaussian retinal filters
MemberDef name: spacing
MemberDef type: RetinalSpacingSpec
MemberDef desc: how to space DoG filters in the retina
MethodDef name: FilterRetina
MethodDef desc: apply DoG filter to input image, result in output (on = + vals, off = - vals). superimpose = add values into the outputs instead of overwriting
MethodDef proto bool FilterRetina(float_Matrix&amp; on_output, float_Matrix&amp; off_output, float_Matrix&amp; retina_img, bool superimpose = false)
MethodDef name: GraphFilter
MethodDef desc: plot the filter gaussian into data table and generate a graph
MethodDef proto void GraphFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: GridFilter
MethodDef desc: plot the filter gaussian into data table and generate a grid view
MethodDef proto void GridFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: PlotSpacing
MethodDef desc: plot the arrangement of the filters (centers) in the data table using given value, and generate a grid view
MethodDef proto void PlotSpacing(DataTable* disp_data, float val = 1.0f)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef names [u'FilterRetina', u'GraphFilter', u'GridFilter', u'PlotSpacing']
########################################################################
TypeDef len: 11
TypeDef name:  DoGRetinaSpecList
TypeDef type: class
TypeDef desc: a list of DoG retinal filters
TypeDef cats:, [u'Image']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: FindRetinalRegion
MethodDef desc: find first spec with given retinal region
MethodDef proto DoGRetinaSpec_ptr FindRetinalRegion(RetinalSpacingSpec::Region reg)
MethodDef name: FindRetinalRes
MethodDef desc: find first spec with given resolution
MethodDef proto DoGRetinaSpec_ptr FindRetinalRes(RetinalSpacingSpec::Resolution res)
MethodDef name: FindRetinalRegionRes
MethodDef desc: find first spec with given retinal region and resolution (falls back to res then reg if no perfect match)
MethodDef proto DoGRetinaSpec_ptr FindRetinalRegionRes(RetinalSpacingSpec::Region reg, RetinalSpacingSpec::Resolution res)
MethodDef names [u'FindRetinalRegion', u'FindRetinalRegionRes', u'FindRetinalRes']
########################################################################
TypeDef len: 13
TypeDef name:  GaborRFSpec
TypeDef type: class
TypeDef desc: Gabor receptive field spec (for V1)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: n_angles
MemberDef type: int
MemberDef desc: number of different angles
MemberDef name: freq
MemberDef type: float
MemberDef desc: frequency of the sine wave
MemberDef name: length
MemberDef type: float
MemberDef desc: length of the gaussian perpendicular to the wave direction
MemberDef name: width
MemberDef type: float
MemberDef desc: width of the gaussian in the wave direction
MemberDef name: amp
MemberDef type: float
MemberDef desc: amplitude (maximum value)
########################################################################
TypeDef len: 13
TypeDef name:  BlobRFSpec
TypeDef type: class
TypeDef desc: Blob receptive field specs (for V1)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: n_sizes
MemberDef type: int
MemberDef desc: number of different sizes
MemberDef name: width_st
MemberDef type: float
MemberDef desc: starting center width
MemberDef name: width_inc
MemberDef type: float
MemberDef desc: increment of width per unit
########################################################################
TypeDef len: 17
TypeDef name:  GaborV1Spec
TypeDef type: class
TypeDef desc: specifies a Gabor-based filtering of an input image, as a model of V1
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: GABOR
EnumDef val: GABOR
EnumDef: filter using gabors (orientation tuned)
EnumDef name: BLOB
EnumDef val: BLOB
EnumDef: filter using blobs (color contrast tuned)
EnumDef names: [u'V1FilterType']
MemberDef name: filter_type
MemberDef type: GaborV1Spec::V1FilterType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: what type of filter to use?
MemberDef name: region
MemberDef type: RetinalSpacingSpec::Region
MemberDef desc: retinal region represented by this filter -- for matching up with associated retinal outputs
MemberDef name: res
MemberDef type: RetinalSpacingSpec::Resolution
MemberDef desc: resolution represented by this filter -- for matching up with associated retinal outputs
MemberDef name: un_geom
MemberDef type: XYNGeom
MemberDef desc: size of one &apos;hypercolumn&apos; unit of orientation detectors
MemberDef name: gp_geom
MemberDef type: XYNGeom
MemberDef desc: size of full set of groups of hypercolumns to process entire set of inputs
MemberDef name: rf_width
MemberDef type: TwoDCoord
MemberDef desc: width of the receptive field into the retinal inputs
MemberDef name: gabor_rf
MemberDef type: GaborRFSpec
MemberDef opts [u'CONDEDIT_ON_filter_type:GABOR']
MemberDef cats []
MemberDef desc: parameters for gabor filter specs
MemberDef name: blob_rf
MemberDef type: BlobRFSpec
MemberDef opts [u'CONDEDIT_ON_filter_type:BLOB']
MemberDef cats []
MemberDef desc: parameters for blob filter specs
MemberDef name: gabor_specs
MemberDef type: taBase_List
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: underlying gabor generators (type GaborFilterSpec)
MemberDef name: blob_specs
MemberDef type: taBase_List
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: underlying DoG generators (type DoGFilterSpec)
MethodDef name: SetRfWidthFmGpGeom
MethodDef desc: set the rf_width based on the current gp_geom and the given input_size (size of input to filter)
MethodDef proto bool SetRfWidthFmGpGeom(TwoDCoord&amp; input_size)
MethodDef name: SetGpGeomFmRfWidth
MethodDef desc: set the gp_geom based on the current rf_width the given input_size (size of input to filter)
MethodDef proto bool SetGpGeomFmRfWidth(TwoDCoord&amp; input_size)
MethodDef name: SetGpGeomFmRetSpec
MethodDef desc: set the gp_geom based on the current rf_width, looking up the input size on the given list of retinal dog filters by region and resolution
MethodDef proto bool SetGpGeomFmRetSpec(DoGRetinaSpecList&amp; dogs)
MethodDef name: InitFilters
MethodDef desc: initialize the filters based on the RF specs
MethodDef proto bool InitFilters()
MethodDef name: FilterInput
MethodDef desc: actually perform the filtering operation on input patterns
MethodDef proto bool FilterInput(float_Matrix&amp; v1_output, DoGFilterSpec::ColorChannel c_chan, float_Matrix&amp; on_input, float_Matrix&amp; off_input, bool superimpose = false)
MethodDef name: FilterInput_Gabor
MethodDef desc: actually perform the filtering operation on input patterns: Gabors
MethodDef proto bool FilterInput_Gabor(float_Matrix&amp; v1_output, float_Matrix&amp; on_input, float_Matrix&amp; off_input, bool superimpose)
MethodDef name: FilterInput_Blob
MethodDef desc: actually perform the filtering operation on input patterns: Blobs
MethodDef proto bool FilterInput_Blob(float_Matrix&amp; v1_output, DoGFilterSpec::ColorChannel c_chan, float_Matrix&amp; on_input, float_Matrix&amp; off_input, bool superimpose)
MethodDef name: GraphFilter
MethodDef desc: plot the filter gaussian into data table and generate a graph of a given unit number&apos;s gabor / blob filter
MethodDef proto void GraphFilter(DataTable* disp_data, int unit_no)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: GridFilter
MethodDef desc: plot the filter gaussian into data table and generate a grid view of all the gabor or blob filters
MethodDef proto void GridFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef names [u'FilterInput', u'FilterInput_Blob', u'FilterInput_Gabor', u'GraphFilter', u'GridFilter', u'InitFilters', u'SetGpGeomFmRetSpec', u'SetGpGeomFmRfWidth', u'SetRfWidthFmGpGeom']
########################################################################
TypeDef len: 11
TypeDef name:  GaborV1SpecList
TypeDef type: class
TypeDef desc: a list of Gabor V1 filters
TypeDef cats:, [u'Image']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: UpdateSizesFmRetina
MethodDef desc: calls SetGpGeomFmRetSpec on all the items in the list
MethodDef proto bool UpdateSizesFmRetina(DoGRetinaSpecList&amp; dogs)
MethodDef names [u'UpdateSizesFmRetina']
########################################################################
TypeDef len: 13
TypeDef name:  taImageProc
TypeDef type: class
TypeDef desc: basic image processing operations; images are either rgb = 3 dimensional matrix with 3rd dim = 3 or greyscale (2 dim matrix)
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MethodDef name: RenderBorder_float
MethodDef desc: make a uniform border 1 pixel wide around image, containing average value for that border region in original image: this value is what gets filled in when image is translated &apos;off screen&apos;
MethodDef proto bool RenderBorder_float(float_Matrix&amp; img_data)
MethodDef opts [u'CAT_Render']
MethodDef name: FadeEdgesToBorder_float
MethodDef desc: fade edges of image uniformly to the border color, over fade_width pixels
MethodDef proto bool FadeEdgesToBorder_float(float_Matrix&amp; img_data, int fade_width = 8)
MethodDef opts [u'CAT_Render']
MethodDef name: RenderOccluderBorderColor_float
MethodDef desc: render an occluder rectangle of given normalized size (ll = lower left corner (0,0 = farthest ll), ur = upper right (1,1 = farthest ur) using the border color
MethodDef proto bool RenderOccluderBorderColor_float(float_Matrix&amp; img_data, float llx, float lly, float urx, float ury)
MethodDef opts [u'CAT_Render']
MethodDef name: TranslateImagePix_float
MethodDef desc: move (translate) image by pixel move_x, move_y factors
MethodDef proto bool TranslateImagePix_float(float_Matrix&amp; xlated_img, float_Matrix&amp; orig_img, int move_x, int move_y)
MethodDef opts [u'CAT_Transform', u'MENU_BUTTON', u'MENU_ON_Transform']
MethodDef name: TranslateImage_float
MethodDef desc: move (translate) image by normalized move_x, move_y factors: 1 = center of image moves to right/top edge, -1 center moves to bottom/left
MethodDef proto bool TranslateImage_float(float_Matrix&amp; xlated_img, float_Matrix&amp; orig_img, float move_x, float move_y)
MethodDef opts [u'CAT_Transform', u'MENU_BUTTON', u'MENU_ON_Transform']
MethodDef name: RotateImage_float
MethodDef desc: rotate the image: rotation = normalized 0-1 = 0-360 degrees
MethodDef proto bool RotateImage_float(float_Matrix&amp; rotated_img, float_Matrix&amp; orig_img, float rotation)
MethodDef opts [u'CAT_Transform', u'MENU_BUTTON', u'MENU_ON_Transform']
MethodDef name: ScaleImage_float
MethodDef desc: change the size of the image by normalized scaling factor (either rgb=3 dim or grey=2 dim)
MethodDef proto bool ScaleImage_float(float_Matrix&amp; scaled_img, float_Matrix&amp; orig_img, float scale)
MethodDef opts [u'CAT_Transform', u'MENU_BUTTON', u'MENU_ON_Transform']
MethodDef name: CropImage_float
MethodDef desc: crop image to given size (-1 = use original image size), centered on the center of the image; border color of original image is used to fill in missing values
MethodDef proto bool CropImage_float(float_Matrix&amp; crop_img, float_Matrix&amp; orig_img, int crop_width, int crop_height)
MethodDef opts [u'CAT_Transform', u'MENU_BUTTON', u'MENU_ON_Transform']
MethodDef name: TransformImage_float
MethodDef desc: Transform an image by translation, rotation, scaling, and cropping, as determined by parameters (calls above functions; only if needed; if crop &lt; 0 then no cropping); does RenderBorder for each step to preserve uniform background color
MethodDef proto bool TransformImage_float(float_Matrix&amp; xformed_img, float_Matrix&amp; orig_img, float move_x = 0.0, float move_y = 0.0, float rotate = 0.0, float scale = 1, int crop_width = -1, int crop_height = -1)
MethodDef opts [u'CAT_Transform', u'MENU_BUTTON', u'MENU_ON_Transform']
MethodDef name: DoGFilterRetina
MethodDef desc: apply DoG filter to input image, result in output (on = + vals, off = - vals). superimpose = add values into the outputs instead of overwriting (just a call to equiv function on spec)
MethodDef proto bool DoGFilterRetina(float_Matrix&amp; on_output, float_Matrix&amp; off_output, float_Matrix&amp; retina_img, DoGRetinaSpec&amp; spec, bool superimpose = false)
MethodDef opts [u'CAT_Filter', u'MENU_BUTTON', u'MENU_ON_Filter']
MethodDef name: AttentionFilter
MethodDef desc: apply an &apos;attentional&apos; filter to the matrix data: outside of radius, values are attenuated in proportion of squared distance outside of radius (r_sq / dist_sq) -- radius_pct is normalized proportion of maximum half-size of image (e.g., 1 = attention bubble extends to furthest edge of image; only corners are attenuated)
MethodDef proto bool AttentionFilter(float_Matrix&amp; mat, float radius_pct)
MethodDef opts [u'CAT_Filter', u'MENU_BUTTON', u'MENU_ON_Filter']
MethodDef name: GaborFilterV1
MethodDef desc: apply Gabor filter to on/off input channels to produce a V1-like processing of the input image. superimpose = add values instead of overwriting (this is just a call to equiv function on spec)
MethodDef proto bool GaborFilterV1(float_Matrix&amp; v1_output, DoGFilterSpec::ColorChannel c_chan, float_Matrix&amp; on_input, float_Matrix&amp; off_input, GaborV1Spec&amp; spec, bool superimpose = false)
MethodDef opts [u'CAT_Filter', u'MENU_BUTTON', u'MENU_ON_Filter']
MethodDef names [u'AttentionFilter', u'CropImage_float', u'DoGFilterRetina', u'FadeEdgesToBorder_float', u'GaborFilterV1', u'RenderBorder_float', u'RenderOccluderBorderColor_float', u'RotateImage_float', u'ScaleImage_float', u'TransformImage_float', u'TranslateImagePix_float', u'TranslateImage_float']
########################################################################
TypeDef len: 17
TypeDef name:  RetinaSpec
TypeDef type: class
TypeDef desc: full specification of retinal filtering based on difference-of-gaussian filters
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'DEF_CHILD_dogs', u'DEF_CHILDNAME_DOG_Filters', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: MONOCHROME
EnumDef val: MONOCHROME
EnumDef name: COLOR
EnumDef val: COLOR
EnumDef names: [u'ColorType']
MemberDef name: color_type
MemberDef type: RetinaSpec::ColorType
MemberDef desc: type of color processing (determines file processing
MemberDef name: retina_size
MemberDef type: TwoDCoord
MemberDef desc: overall size of retina (auto copied to retina specs)
MemberDef name: dogs
MemberDef type: DoGRetinaSpecList
MemberDef desc: the difference-of-gaussian retinal filters
MethodDef name: AddFilter
MethodDef desc: add a new retina filter
MethodDef proto DoGRetinaSpec_ptr AddFilter()
MethodDef opts [u'BUTTON', u'CAT_Filter']
MethodDef name: DefaultFilters
MethodDef desc: create a set of default filters
MethodDef proto void DefaultFilters()
MethodDef opts [u'BUTTON', u'CAT_Filter']
MethodDef name: ConfigDataTable
MethodDef desc: configure a data table to hold all of the image data (if reset_cols, reset any existing cols in data table before adding new ones) (if dt == NULL, a new one is created in data.InputData)
MethodDef proto void ConfigDataTable(DataTable* dt, bool reset_cols = false)
MethodDef opts [u'BUTTON', u'CAT_Config', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: PlotSpacing
MethodDef desc: plot the arrangement of the filters (centers) in the data table and generate a grid view
MethodDef proto void PlotSpacing(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: GetRetImageColumn
MethodDef desc: get the RetinaImage column with appropriate args for ensuring its correct size etc has been set
MethodDef proto DataCol_ptr GetRetImageColumn(DataTable* dt)
MethodDef opts [u'CAT_Transform']
MethodDef name: TransformImageData
MethodDef desc: transform image data into datatable, with retina centered at given normalized offsets from center of image (move), scaled by given factor (zoom), rotated by normalized units (1=360deg), ret = final movement in retinal coordinates, superimpose = merge into filter values into last row of table; otherwise new row is added -- impl routine for other functions to call (doesn&apos;t do any display updating), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool TransformImageData(float_Matrix&amp; img_data, DataTable* dt, float move_x = 0.0f, float move_y = 0.0f, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int fade_width = -1)
MethodDef opts [u'CAT_Transform']
MethodDef name: LookAtImageData
MethodDef desc: transform image data into given datatable, with region of retina centered and scaled to fit the box coordinates given (ll=lower-left coordinates, in pct; ur=upper-right); additional scale, rotate, and offset params applied after foveation scaling and offsets, ret = final movement in retinal coordinates, if superimpose, only do for last one!), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool LookAtImageData(float_Matrix&amp; img_data, DataTable* dt, RetinalSpacingSpec::Region region, float box_ll_x, float box_ll_y, float box_ur_x, float box_ur_y, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int fade_width = -1)
MethodDef opts [u'CAT_Transform']
MethodDef name: FilterImageData
MethodDef desc: filter retinal image data in RetinaImage column produced by TransformImageData_impl or LookAtImageData_impl in given datatable -- superimpose = merge into filter values into last row of table; otherwise new row is added -- impl routine for other functions to call (doesn&apos;t do any display updating), renorm = renormalize dynamic range to max = 1 across all filters (if 0 don&apos;t do, 1 = linear renorm, 2 = log renorm, if superimpose, only do for last one!)
MethodDef proto bool FilterImageData(DataTable* dt, bool superimpose = false, int renorm = 1)
MethodDef opts [u'CAT_Filter']
MethodDef name: ConvertImageToMatrix
MethodDef desc: convert image file to img_data float matrix
MethodDef proto bool ConvertImageToMatrix(taImage&amp; img, float_Matrix&amp; img_data)
MethodDef opts [u'CAT_Image']
MethodDef name: RecordImageName
MethodDef desc: record name of image in Name column of data table
MethodDef proto bool RecordImageName(taImage&amp; img, DataTable* dt)
MethodDef opts [u'CAT_Image']
MethodDef name: TransformImage
MethodDef desc: transform image data into datatable, with retina centered at given normalized offsets from center of image (move), scaled by given factor (zoom), rotated by normalized units (1=360deg), ret = final movement in retinal coordinates, superimpose = merge into filter values into last row of table; otherwise new row is added -- impl routine for other functions to call (doesn&apos;t do any display updating), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool TransformImage(taImage&amp; img, DataTable* dt, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int fade_width = -1)
MethodDef opts [u'CAT_Transform']
MethodDef name: TransformImageName
MethodDef desc: load image from file and transform image data into datatable, with retina centered at given normalized offsets from center of image (move), scaled by given factor (zoom), rotated by normalized units (1=360deg), ret = final movement in retinal coordinates, superimpose = merge into filter values into last row of table; otherwise new row is added -- impl routine for other functions to call (doesn&apos;t do any display updating), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool TransformImageName(const taString&amp; img_fname, DataTable* dt, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int fade_width = -1)
MethodDef opts [u'BUTTON', u'CAT_Transform', u'FILE_DIALOG_LOAD']
MethodDef name: LookAtImage
MethodDef desc: transform mage data into given datatable, with region of retina centered and scaled to fit the box coordinates given (ll=lower-left coordinates, in pct; ur=upper-right); additional scale, rotate, and offset params add to foveation scaling and offsets, ret = final movement in retinal coordinates, fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool LookAtImage(taImage&amp; img, DataTable* dt, RetinalSpacingSpec::Region region, float box_ll_x, float box_ll_y, float box_ur_x, float box_ur_y, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int fade_width = -1)
MethodDef opts [u'CAT_Transform']
MethodDef name: LookAtImageName
MethodDef desc: load image from file and transform into given datatable, with region of retina centered and scaled to fit the box coordinates given (ll=lower-left coordinates, in pct; ur=upper-right); additional scale, rotate, and offset params add to foveation scaling and offsets, ret = final movement in retinal coordinates, fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool LookAtImageName(const taString&amp; img_fname, DataTable* dt, RetinalSpacingSpec::Region region, float box_ll_x, float box_ll_y, float box_ur_x, float box_ur_y, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int fade_width = -1)
MethodDef opts [u'BUTTON', u'CAT_Filter', u'FILE_DIALOG_LOAD']
MethodDef name: XFormFilterImageData
MethodDef desc: transform and filter image data into given datatable, with retina centered at given normalized offsets from center of image (move), scaled by given factor (zoom), rotated by normalized units (1=360deg), ret = final movement in retinal coordinates, superimpose = merge into filter values into last row of table; otherwise new row is added, renorm = renormalize dynamic range to max = 1 across all filters (if 0 don&apos;t do, 1 = linear renorm, 2 = log renorm, if superimpose, only do for last one!), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool XFormFilterImageData(float_Matrix&amp; img_data, DataTable* dt, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int renorm = 1, int fade_width = -1)
MethodDef opts [u'CAT_Filter']
MethodDef name: XFormFilterImage
MethodDef desc: transform and filter image into given datatable, with retina centered at given normalized offsets from center of image (move), scaled by given factor (zoom), rotated by normalized units (1=360deg), and with normalized retinal offset as specified, ret = final movement in retinal coordinates, superimpose = merge into filter values into last row of table; otherwise new row is added, renorm = renormalize dynamic range to max = 1 across all filters (if 0 don&apos;t do, 1 = linear renorm, 2 = log renorm, if superimpose, only do for last one!), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool XFormFilterImage(taImage&amp; img, DataTable* dt, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int renorm = 1, int fade_width = -1)
MethodDef opts [u'CAT_Filter']
MethodDef name: XFormFilterImageName
MethodDef desc: load image from file and filter into given datatable, with retina centered at given normalized offsets from center of image (move), scaled by given factor (zoom), rotated by normalized units (1=360deg), and with normalized retinal offset as specified, ret = final movement in retinal coordinates, superimpose = merge into filter values into last row of table; otherwise new row is added, renorm = renormalize dynamic range to max = 1 across all filters (if 0 don&apos;t do, 1 = linear renorm, 2 = log renorm, if superimpose, only do for last one!), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool XFormFilterImageName(const taString&amp; img_fname, DataTable* dt, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int renorm = 1, int fade_width = -1)
MethodDef opts [u'BUTTON', u'CAT_Filter', u'FILE_DIALOG_LOAD']
MethodDef name: LookAtFilterImageData
MethodDef desc: transform and filter image data into given datatable, with region of retina centered and scaled to fit the box coordinates given (ll=lower-left coordinates, in pct; ur=upper-right); additional scale, rotate, and offset params applied after foveation scaling and offsets, ret = final movement in retinal coordinates, renorm = renormalize dynamic range to max = 1 across all filters (if 0 don&apos;t do, 1 = linear renorm, 2 = log renorm, if superimpose, only do for last one!), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool LookAtFilterImageData(float_Matrix&amp; img_data, DataTable* dt, RetinalSpacingSpec::Region region, float box_ll_x, float box_ll_y, float box_ur_x, float box_ur_y, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int renorm = 1, int fade_width = -1)
MethodDef opts [u'CAT_Filter']
MethodDef name: LookAtFilterImage
MethodDef desc: transform and filter image data into given datatable, with region of retina centered and scaled to fit the box coordinates given (ll=lower-left coordinates, in pct; ur=upper-right); additional scale, rotate, and offset params add to foveation scaling and offsets, ret = final movement in retinal coordinates, renorm = renormalize dynamic range to max = 1 across all filters (if 0 don&apos;t do, 1 = linear renorm, 2 = log renorm, if superimpose, only do for last one!), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool LookAtFilterImage(taImage&amp; img, DataTable* dt, RetinalSpacingSpec::Region region, float box_ll_x, float box_ll_y, float box_ur_x, float box_ur_y, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int renorm = 1, int fade_width = -1)
MethodDef opts [u'CAT_Filter']
MethodDef name: LookAtFilterImageName
MethodDef desc: load image from file and transform, filter into given datatable, with region of retina centered and scaled to fit the box coordinates given (ll=lower-left coordinates, in pct; ur=upper-right); additional scale, rotate, and offset params add to foveation scaling and offsets, ret = final movement in retinal coordinates, renorm = renormalize dynamic range to max = 1 across all filters (if 0 don&apos;t do, 1 = linear renorm, 2 = log renorm, if superimpose, only do for last one!), fade_width = fade to background around border (-1 = use width of max off-center DOG sigma, 0 = none)
MethodDef proto bool LookAtFilterImageName(const taString&amp; img_fname, DataTable* dt, RetinalSpacingSpec::Region region, float box_ll_x, float box_ll_y, float box_ur_x, float box_ur_y, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f, float ret_move_x = 0.0f, float ret_move_y = 0.0f, bool superimpose = false, int renorm = 1, int fade_width = -1)
MethodDef opts [u'BUTTON', u'CAT_Filter', u'FILE_DIALOG_LOAD']
MethodDef name: AttendRegion
MethodDef desc: apply attentional weighting filter to filtered values, with radius = given region
MethodDef proto bool AttendRegion(DataTable* dt, RetinalSpacingSpec::Region region = RetinalSpacingSpec::FOVEA)
MethodDef opts [u'CAT_Filter']
MethodDef name: RenderOccluder
MethodDef desc: render an occluder rectangle of given normalized size (ll = lower left corner (0,0 = farthest ll), ur = upper right (1,1 = farthest ur) using the border color -- data table must have already been loaded with Transform or LookAt routines
MethodDef proto bool RenderOccluder(DataTable* dt, float llx, float lly, float urx, float ury)
MethodDef opts [u'CAT_Render']
MethodDef name: UpdateRetinaSize
MethodDef desc: copy retina_size to dogs..
MethodDef proto void UpdateRetinaSize()
MethodDef names [u'AddFilter', u'AttendRegion', u'ConfigDataTable', u'ConvertImageToMatrix', u'DefaultFilters', u'FilterImageData', u'GetRetImageColumn', u'LookAtFilterImage', u'LookAtFilterImageData', u'LookAtFilterImageName', u'LookAtImage', u'LookAtImageData', u'LookAtImageName', u'PlotSpacing', u'RecordImageName', u'RenderOccluder', u'TransformImage', u'TransformImageData', u'TransformImageName', u'UpdateRetinaSize', u'XFormFilterImage', u'XFormFilterImageData', u'XFormFilterImageName']
########################################################################
TypeDef len: 15
TypeDef name:  V1GaborSpec
TypeDef type: class
TypeDef desc: full specification of V1 gabor (oriented edge detectors) filtering -- takes output of RetinaSpec as input
TypeDef cats:, [u'Image']
TypeDef opts:, [u'STEM_BASE', u'DEF_CHILD_gabors', u'DEF_CHILDNAME_Gabor_Filters', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: gabors
MemberDef type: GaborV1SpecList
MemberDef desc: the gabor (and blob) V1 filters
MemberDef name: retina
MemberDef type: RetinaSpecRef
MemberDef desc: the specs for the retinal filter that we follow
MemberDef name: norm_max
MemberDef type: float
MemberDef opts [u'DEF_0.95']
MemberDef cats []
MemberDef desc: max value to normalize output activations to -- set to -1 to turn off normalization
MethodDef name: AddFilter
MethodDef desc: add a new v1 filter
MethodDef proto GaborV1Spec_ptr AddFilter()
MethodDef opts [u'BUTTON', u'CAT_Filter']
MethodDef name: DefaultFilters
MethodDef desc: create a set of default filters
MethodDef proto void DefaultFilters()
MethodDef opts [u'BUTTON', u'CAT_Filter']
MethodDef name: UpdateSizesFmRetina
MethodDef desc: update the sizes of our filters based on the retina spec values
MethodDef proto bool UpdateSizesFmRetina()
MethodDef name: ConfigDataTable
MethodDef desc: configure a data table to hold all of the image data (if reset_cols, reset any existing cols in data table before adding new ones) (if dt == NULL, a new one is created in data.InputData)
MethodDef proto void ConfigDataTable(DataTable* dt, bool reset_cols = false)
MethodDef opts [u'BUTTON', u'CAT_Config', u'NULL_OK_0', u'NULL_TEXT_0_NewDataTable']
MethodDef name: FilterRetinaData
MethodDef desc: Perform the filtering function: operates on output of RetinaSpec processing
MethodDef proto bool FilterRetinaData(DataTable* v1_out_dt, DataTable* ret_in_dt)
MethodDef names [u'AddFilter', u'ConfigDataTable', u'DefaultFilters', u'FilterRetinaData', u'UpdateSizesFmRetina']
########################################################################
TypeDef len: 11
TypeDef name:  ImageProcCall
TypeDef type: class
TypeDef desc: call a taImageProc function
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'DEF_CHILD_meth_args', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'StaticMethodCall']
########################################################################
TypeDef len: 19
TypeDef name:  VEBody
TypeDef type: class
TypeDef desc: virtual environment body (rigid structural element), subject to physics dynamics
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'STEM_BASE', u'EXT_vebod', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'VECamera', u'VELight']
EnumDef name: BF_NONE
EnumDef val: BF_NONE
EnumDef name: OFF
EnumDef val: OFF
EnumDef: turn this object off -- do not include in the virtual world
EnumDef name: FIXED
EnumDef val: FIXED
EnumDef: body cannot move at all
EnumDef name: PLANE2D
EnumDef val: PLANE2D
EnumDef: body is constrained to the Z=0 plane
EnumDef name: FM_FILE
EnumDef val: FM_FILE
EnumDef: load object image features from Inventor (iv) object file
EnumDef name: SPHERE
EnumDef val: SPHERE
EnumDef name: CAPSULE
EnumDef val: CAPSULE
EnumDef: a cylinder with half-spheres on each end -- preferred to standard cylinders for collision detection
EnumDef name: CYLINDER
EnumDef val: CYLINDER
EnumDef name: BOX
EnumDef val: BOX
EnumDef name: NO_SHAPE
EnumDef val: NO_SHAPE
EnumDef: no shape at all -- only for special classes light lights
EnumDef name: LONG_X
EnumDef val: LONG_X
EnumDef: long axis is in X direction
EnumDef name: LONG_Y
EnumDef val: LONG_Y
EnumDef: long axis is in Y direction
EnumDef name: LONG_Z
EnumDef val: LONG_Z
EnumDef: long axis is in Z direction
EnumDef names: [u'BodyFlags', u'LongAxis', u'Shape']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: flags
MemberDef type: VEBody::BodyFlags
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: flags for various body properties
MemberDef name: init_pos
MemberDef type: FloatTDCoord
MemberDef desc: initial position of body (when creating it)
MemberDef name: init_rot
MemberDef type: FloatRotation
MemberDef desc: initial rotation of body (when creating it) (rot is in radians: 180deg = 3.1415, 90deg = 1.5708, 45deg = .7854)
MemberDef name: init_lin_vel
MemberDef type: FloatTDCoord
MemberDef desc: initial linear velocity
MemberDef name: init_ang_vel
MemberDef type: FloatTDCoord
MemberDef desc: initial angular velocity
MemberDef name: cur_pos
MemberDef type: FloatTDCoord
MemberDef desc: current position of body
MemberDef name: cur_rot
MemberDef type: FloatRotation
MemberDef desc: current rotation of body (rot is in radians: 180deg = 3.1415, 90deg = 1.5708, 45deg = .7854)
MemberDef name: cur_lin_vel
MemberDef type: FloatTDCoord
MemberDef desc: current linear velocity
MemberDef name: cur_ang_vel
MemberDef type: FloatTDCoord
MemberDef desc: current angular velocity
MemberDef name: shape
MemberDef type: VEBody::Shape
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: shape of body for purposes of mass/inertia and collision (and visual rendering if not FM_FILE)
MemberDef name: mass
MemberDef type: float
MemberDef desc: total mass of body (in kg)
MemberDef name: radius
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_shape:BOX']
MemberDef cats []
MemberDef desc: radius of body, for all but box
MemberDef name: length
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_shape:BOX,SPHERE']
MemberDef cats []
MemberDef desc: length of body, for all but box
MemberDef name: long_axis
MemberDef type: VEBody::LongAxis
MemberDef opts [u'CONDEDIT_OFF_shape:BOX,SPHERE']
MemberDef cats []
MemberDef desc: direction of the long axis of the body (where length is oriented)
MemberDef name: box
MemberDef type: FloatTDCoord
MemberDef opts [u'CONDEDIT_ON_shape:BOX']
MemberDef cats []
MemberDef desc: length of box in each axis for BOX-shaped body
MemberDef name: obj_xform
MemberDef type: FloatTransform
MemberDef desc: full transform to apply to body file to align/size/etc with body
MemberDef name: obj_fname
MemberDef type: taString
MemberDef opts [u'CONDEDIT_ON_flags:FM_FILE', u'FILE_DIALOG_LOAD', u'EXT_iv,wrl', u'FILETYPE_OpenInventor']
MemberDef cats []
MemberDef desc: file name of Inventor file that describes body appearance (if empty or FM_FILE flag is not on, basic shape will be rendered)
MemberDef name: set_color
MemberDef type: bool
MemberDef desc: if true, we directly set our own color (otherwise it is whatever the object defaults to)
MemberDef name: color
MemberDef type: taColor
MemberDef opts [u'CONDEDIT_ON_set_color']
MemberDef cats []
MemberDef desc: default color of body if not otherwise defined (a used for transparency)
MemberDef name: texture
MemberDef type: VETextureRef
MemberDef opts [u'SCOPE_VEWorld', u'NULL_OK']
MemberDef cats []
MemberDef desc: texture mapping of an image to the object (textures are shared resources defined in VEWorld)
MemberDef name: surface
MemberDef type: VESurface
MemberDef desc: physics surface properties of the body (softness, bounciness)
MemberDef name: softness
MemberDef type: ODEIntParams
MemberDef desc: set the cfm and erp values higher here to make the surface softer
MethodDef name: SetBodyFlag
MethodDef desc: set body flag state on
MethodDef proto void SetBodyFlag(VEBody::BodyFlags flg)
MethodDef name: ClearBodyFlag
MethodDef desc: clear body flag state (set off)
MethodDef proto void ClearBodyFlag(VEBody::BodyFlags flg)
MethodDef name: HasBodyFlag
MethodDef desc: check if body flag is set
MethodDef proto bool HasBodyFlag(VEBody::BodyFlags flg)
MethodDef name: SetBodyFlagState
MethodDef desc: set body flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetBodyFlagState(VEBody::BodyFlags flg, bool on)
MethodDef name: GetWorld
MethodDef desc: get world object (parent of this guy)
MethodDef proto VEWorld_ptr GetWorld()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetWorldID
MethodDef desc: get world id value
MethodDef proto void_ptr GetWorldID()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetObject
MethodDef desc: get parent object (parent of this guy)
MethodDef proto VEObject_ptr GetObject()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetObjSpaceID
MethodDef desc: get object space id value
MethodDef proto void_ptr GetObjSpaceID()
MethodDef opts [u'CAT_ODE']
MethodDef name: CreateODE
MethodDef desc: create body in ode (if not already created) -- returns false if unable to create
MethodDef proto bool CreateODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: DestroyODE
MethodDef desc: destroy body in ode (if created)
MethodDef proto void DestroyODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE (creates id&apos;s if not already done)
MethodDef proto void SetValsToODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: SetMassToODE
MethodDef desc: set the mass of body in ODE
MethodDef proto void SetMassToODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetValsFmODE
MethodDef desc: get the updated values from ODE after computing
MethodDef proto void GetValsFmODE(bool updt_disp = false)
MethodDef opts [u'CAT_ODE']
MethodDef names [u'ClearBodyFlag', u'CreateODE', u'DestroyODE', u'GetObjSpaceID', u'GetObject', u'GetValsFmODE', u'GetWorld', u'GetWorldID', u'HasBodyFlag', u'SetBodyFlag', u'SetBodyFlagState', u'SetMassToODE', u'SetValsToODE']
########################################################################
TypeDef len: 17
TypeDef name:  VEJoint
TypeDef type: class
TypeDef desc: a virtual environment joint, which connects two bodies
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'STEM_BASE', u'EXT_vejnt', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: JF_NONE
EnumDef val: JF_NONE
EnumDef name: FEEDBACK
EnumDef val: FEEDBACK
EnumDef: collect feedback information about the joint
EnumDef name: USE_STOPS
EnumDef val: USE_STOPS
EnumDef: set the lo and hi stop values and bounce
EnumDef name: USE_MOTOR
EnumDef val: USE_MOTOR
EnumDef: set the joint motor velocity and maximum force parameters
EnumDef name: USE_ODE_PARAMS
EnumDef val: USE_ODE_PARAMS
EnumDef: use special ODE parameters for this joint (else uses world settings)
EnumDef name: NO_JOINT
EnumDef val: NO_JOINT
EnumDef: no joint type set
EnumDef name: BALL
EnumDef val: BALL
EnumDef: ball joint -- no constraints on relative orientation
EnumDef name: HINGE
EnumDef val: HINGE
EnumDef: hinged -- only bends in one axis
EnumDef name: SLIDER
EnumDef val: SLIDER
EnumDef: slider -- moves
EnumDef name: UNIVERSAL
EnumDef val: UNIVERSAL
EnumDef: hinged in 2 axes -- also like a ball joint but transmits torque
EnumDef name: HINGE2
EnumDef val: HINGE2
EnumDef: two hinges -- first one is like a suspension with a soft constraint, and second one can be used for a rotating wheel or similar
EnumDef name: FIXED
EnumDef val: FIXED
EnumDef: fixed -- use of this is discouraged (just redefine body shape), but it can be quite useful
EnumDef names: [u'JointFlags', u'JointType']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: flags
MemberDef type: VEJoint::JointFlags
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: joint flags
MemberDef name: body1
MemberDef type: VEBodyRef
MemberDef opts [u'SCOPE_VEObject']
MemberDef cats []
MemberDef desc: first body in the joint
MemberDef name: body2
MemberDef type: VEBodyRef
MemberDef opts [u'SCOPE_VEObject']
MemberDef cats []
MemberDef desc: second body in the joint
MemberDef name: joint_type
MemberDef type: VEJoint::JointType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: type of joint
MemberDef name: anchor
MemberDef type: FloatTDCoord
MemberDef desc: anchor location for joint, specified RELATIVE TO BODY1 (note this is different from ODE -- we just add body1&apos;s position to this anchor position)
MemberDef name: axis
MemberDef type: FloatTDCoord
MemberDef opts [u'CONDEDIT_OFF_joint_type:BALL']
MemberDef cats []
MemberDef desc: axis orientation vector
MemberDef name: axis2
MemberDef type: FloatTDCoord
MemberDef opts [u'CONDSHOW_ON_joint_type:UNIVERSAL,HINGE2']
MemberDef cats []
MemberDef desc: second axis for universal joint and hinge2
MemberDef name: stops
MemberDef type: VEJointStops
MemberDef opts [u'CONDEDIT_ON_flags:USE_STOPS']
MemberDef cats []
MemberDef desc: stop parameters for first joint: where the joint will stop (specific meaning is joint-dependent)
MemberDef name: stops2
MemberDef type: VEJointStops
MemberDef opts [u'CONDEDIT_ON_flags:USE_STOPS']
MemberDef cats []
MemberDef desc: stop parameters for second joint: where the joint will stop (specific meaning is joint-dependent)
MemberDef name: motor
MemberDef type: VEJointMotor
MemberDef opts [u'CONDEDIT_ON_flags:USE_MOTOR']
MemberDef cats []
MemberDef desc: motor parameters that drive a powered joint
MemberDef name: motor2
MemberDef type: VEJointMotor
MemberDef opts [u'CONDEDIT_ON_flags:USE_MOTOR']
MemberDef cats []
MemberDef desc: motor parameters for second joint that drive a powered joint
MemberDef name: ode_params
MemberDef type: ODEJointParams
MemberDef opts [u'CONDEDIT_ON_flags:USE_ODE_PARAMS']
MemberDef cats []
MemberDef desc: ode integration parameters specifically for joints -- only used when USE_ODE_PARAMS is set
MemberDef name: suspension
MemberDef type: ODEIntParams
MemberDef opts [u'CONDEDIT_ON_joint_type:HINGE2']
MemberDef cats []
MemberDef desc: ode integration parameters for the hinge2 joint
MemberDef name: pos
MemberDef type: float
MemberDef opts [u'SHOW']
MemberDef cats []
MemberDef desc: probed position value (joint dependent; could be angle)
MemberDef name: vel
MemberDef type: float
MemberDef opts [u'SHOW']
MemberDef cats []
MemberDef desc: probed velocity value (joint dependent; could be angle)
MemberDef name: pos2
MemberDef type: float
MemberDef opts [u'CONDSHOW_ON_joint_type:UNIVERSAL', u'SHOW']
MemberDef cats []
MemberDef desc: probed position value (joint dependent; could be angle)
MemberDef name: vel2
MemberDef type: float
MemberDef opts [u'CONDSHOW_ON_joint_type:UNIVERSAL,HINGE2', u'SHOW']
MemberDef cats []
MemberDef desc: probed velocity value (joint dependent; could be angle)
MemberDef name: cur_force1
MemberDef type: FloatTDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: force that joint applies to body 1
MemberDef name: cur_torque1
MemberDef type: FloatTDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: torque that joint applies to body 1
MemberDef name: cur_force2
MemberDef type: FloatTDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: force that joint applies to body 2
MemberDef name: cur_torque2
MemberDef type: FloatTDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: torque that joint applies to body 2
MethodDef name: SetJointFlag
MethodDef desc: set joint flag state on
MethodDef proto void SetJointFlag(VEJoint::JointFlags flg)
MethodDef name: ClearJointFlag
MethodDef desc: clear joint flag state (set off)
MethodDef proto void ClearJointFlag(VEJoint::JointFlags flg)
MethodDef name: HasJointFlag
MethodDef desc: check if joint flag is set
MethodDef proto bool HasJointFlag(VEJoint::JointFlags flg)
MethodDef name: SetJointFlagState
MethodDef desc: set joint flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetJointFlagState(VEJoint::JointFlags flg, bool on)
MethodDef name: GetWorld
MethodDef desc: get world object (parent of this guy)
MethodDef proto VEWorld_ptr GetWorld()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetWorldID
MethodDef desc: get world id value
MethodDef proto void_ptr GetWorldID()
MethodDef opts [u'CAT_ODE']
MethodDef name: CreateODE
MethodDef desc: create object in ode (if not already created) -- returns false if unable to create
MethodDef proto bool CreateODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: DestroyODE
MethodDef desc: destroy object in ode (if created)
MethodDef proto void DestroyODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE (creates id&apos;s if not already done)
MethodDef proto void SetValsToODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetValsFmODE
MethodDef desc: get the updated values from ODE after computing
MethodDef proto void GetValsFmODE(bool updt_disp = false)
MethodDef opts [u'CAT_ODE']
MethodDef name: ApplyForce
MethodDef desc: apply force(s) (or torque(s) as the case may be) to the joint (only good for next time step)
MethodDef proto void ApplyForce(float force1, float force2 = 0.0f)
MethodDef opts [u'BUTTON', u'CAT_Force']
MethodDef names [u'ApplyForce', u'ClearJointFlag', u'CreateODE', u'DestroyODE', u'GetValsFmODE', u'GetWorld', u'GetWorldID', u'HasJointFlag', u'SetJointFlag', u'SetJointFlagState', u'SetValsToODE']
########################################################################
TypeDef len: 17
TypeDef name:  VEObject
TypeDef type: class
TypeDef desc: a virtual environment object, which contains interconnected bodies and their joints, and represents a sub-space of objects
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'STEM_BASE', u'EXT_veobj', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: SIMPLE_SPACE
EnumDef val: SIMPLE_SPACE
EnumDef: simple list of items, requires O(n^2) but ok for very small spaces
EnumDef name: HASH_SPACE
EnumDef val: HASH_SPACE
EnumDef: hash-coded space with multi-scale grids: efficient for larger number of items
EnumDef names: [u'SpaceType']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: bodies
MemberDef type: VEBody_Group
MemberDef name: joints
MemberDef type: VEJoint_Group
MemberDef name: space_type
MemberDef type: VEObject::SpaceType
MemberDef desc: type of space to use
MemberDef name: hash_levels
MemberDef type: MinMaxInt
MemberDef opts [u'CONDEDIT_ON_space_type:HASH_SPACE']
MemberDef cats []
MemberDef desc: minimum and maximum spacing levels in hash space
MethodDef name: GetWorld
MethodDef desc: get world object (parent of this guy)
MethodDef proto VEWorld_ptr GetWorld()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetWorldID
MethodDef desc: get world id value
MethodDef proto void_ptr GetWorldID()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetWorldSpaceID
MethodDef desc: get world space id value
MethodDef proto void_ptr GetWorldSpaceID()
MethodDef opts [u'CAT_ODE']
MethodDef name: CreateODE
MethodDef desc: create object in ode (if not already created) -- returns false if unable to create
MethodDef proto bool CreateODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: DestroyODE
MethodDef desc: destroy object in ode (if created)
MethodDef proto void DestroyODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE (creates id&apos;s if not already done)
MethodDef proto void SetValsToODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetValsFmODE
MethodDef desc: get the updated values from ODE after computing
MethodDef proto void GetValsFmODE(bool updt_disp = false)
MethodDef opts [u'CAT_ODE']
MethodDef names [u'CreateODE', u'DestroyODE', u'GetValsFmODE', u'GetWorld', u'GetWorldID', u'GetWorldSpaceID', u'SetValsToODE']
########################################################################
TypeDef len: 19
TypeDef name:  VEStatic
TypeDef type: class
TypeDef desc: virtual environment static environment element -- not subject to physics and only interacts with bodies via collisions (cannot be part of a joint)
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'STEM_BASE', u'EXT_vestc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'VEHeightField']
EnumDef name: SF_NONE
EnumDef val: SF_NONE
EnumDef name: OFF
EnumDef val: OFF
EnumDef: turn this object off -- do not include in the virtual world
EnumDef name: FM_FILE
EnumDef val: FM_FILE
EnumDef: load object image features from Inventor (iv) object file
EnumDef name: SPHERE
EnumDef val: SPHERE
EnumDef name: CAPSULE
EnumDef val: CAPSULE
EnumDef: a cylinder with half-spheres on each end -- preferred to standard cylinders for collision detection
EnumDef name: CYLINDER
EnumDef val: CYLINDER
EnumDef name: BOX
EnumDef val: BOX
EnumDef name: PLANE
EnumDef val: PLANE
EnumDef: flat plane -- useful for ground surfaces
EnumDef name: NO_SHAPE
EnumDef val: NO_SHAPE
EnumDef: no shape at all -- only for special classes light lights
EnumDef name: LONG_X
EnumDef val: LONG_X
EnumDef: long axis is in X direction
EnumDef name: LONG_Y
EnumDef val: LONG_Y
EnumDef: long axis is in Y direction
EnumDef name: LONG_Z
EnumDef val: LONG_Z
EnumDef: long axis is in Z direction
EnumDef name: NORM_X
EnumDef val: NORM_X
EnumDef: normal axis is in X direction
EnumDef name: NORM_Y
EnumDef val: NORM_Y
EnumDef: normal axis is in Y direction
EnumDef name: NORM_Z
EnumDef val: NORM_Z
EnumDef: normal axis is in Z direction
EnumDef names: [u'LongAxis', u'NormAxis', u'Shape', u'StaticFlags']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: flags
MemberDef type: VEStatic::StaticFlags
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: flags for various env el properties
MemberDef name: pos
MemberDef type: FloatTDCoord
MemberDef opts [u'CONDEDIT_OFF_shape:PLANE']
MemberDef cats []
MemberDef desc: position of static item
MemberDef name: rot
MemberDef type: FloatRotation
MemberDef opts [u'CONDEDIT_OFF_shape:PLANE']
MemberDef cats []
MemberDef desc: rotation of static item (rot is in radians: 180deg = 3.1415, 90deg = 1.5708, 45deg = .7854)
MemberDef name: shape
MemberDef type: VEStatic::Shape
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: shape of static item for purposes of collision (and visual rendering if not FM_FILE)
MemberDef name: radius
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_shape:BOX,PLANE']
MemberDef cats []
MemberDef desc: radius of body, for all but box
MemberDef name: length
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_shape:BOX,PLANE,SPHERE']
MemberDef cats []
MemberDef desc: length of body, for all but box
MemberDef name: long_axis
MemberDef type: VEStatic::LongAxis
MemberDef opts [u'CONDEDIT_OFF_shape:BOX,PLANE,SPHERE']
MemberDef cats []
MemberDef desc: direction of the long axis of the body (where length is oriented)
MemberDef name: box
MemberDef type: FloatTDCoord
MemberDef opts [u'CONDEDIT_ON_shape:BOX']
MemberDef cats []
MemberDef desc: length of box in each axis for BOX-shaped body
MemberDef name: plane_norm
MemberDef type: VEStatic::NormAxis
MemberDef opts [u'CONDEDIT_ON_shape:PLANE']
MemberDef cats []
MemberDef desc: direction of the plane normal axis (which way is &apos;up&apos; for a ground plane)
MemberDef name: plane_height
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_shape:PLANE']
MemberDef cats []
MemberDef desc: height of the plane above/below 0 in the plane norm axis
MemberDef name: plane_vis_size
MemberDef type: FloatTwoDCoord
MemberDef opts [u'CONDEDIT_ON_shape:PLANE']
MemberDef cats []
MemberDef desc: extent of the plane to actually render in the display (displayed as a very thin box of this size, centered at 0,0,0) -- actual plane in physical system is of infinite extent!
MemberDef name: obj_xform
MemberDef type: FloatTransform
MemberDef desc: full transform to apply to object file to align/size/etc with static item
MemberDef name: obj_fname
MemberDef type: taString
MemberDef opts [u'CONDEDIT_ON_flags:FM_FILE', u'FILE_DIALOG_LOAD', u'EXT_iv,wrl', u'FILETYPE_OpenInventor']
MemberDef cats []
MemberDef desc: file name of Inventor file that describes static item appearance (if empty or FM_FILE flag is not on, basic shape will be rendered)
MemberDef name: set_color
MemberDef type: bool
MemberDef desc: if true, we directly set our own color (otherwise it is whatever the object defaults to)
MemberDef name: color
MemberDef type: taColor
MemberDef opts [u'CONDEDIT_ON_set_color']
MemberDef cats []
MemberDef desc: default color of static item if not otherwise defined (a used for transparency)
MemberDef name: texture
MemberDef type: VETextureRef
MemberDef opts [u'SCOPE_VEWorld']
MemberDef cats []
MemberDef desc: texture mapping of an image to the object (textures are shared resources defined in VEWorld)
MemberDef name: surface
MemberDef type: VESurface
MemberDef desc: surface properties of the static item
MemberDef name: softness
MemberDef type: ODEIntParams
MemberDef desc: set the cfm and erp values higher here to make the surface softer
MethodDef name: SetStaticFlag
MethodDef desc: set body flag state on
MethodDef proto void SetStaticFlag(VEStatic::StaticFlags flg)
MethodDef name: ClearStaticFlag
MethodDef desc: clear body flag state (set off)
MethodDef proto void ClearStaticFlag(VEStatic::StaticFlags flg)
MethodDef name: HasStaticFlag
MethodDef desc: check if body flag is set
MethodDef proto bool HasStaticFlag(VEStatic::StaticFlags flg)
MethodDef name: SetStaticFlagState
MethodDef desc: set body flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetStaticFlagState(VEStatic::StaticFlags flg, bool on)
MethodDef name: GetWorld
MethodDef desc: get world object (parent of this guy)
MethodDef proto VEWorld_ptr GetWorld()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetWorldID
MethodDef desc: get world id value
MethodDef proto void_ptr GetWorldID()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetSpace
MethodDef desc: get parent space (parent of this guy)
MethodDef proto VESpace_ptr GetSpace()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetSpaceID
MethodDef desc: get space id value from space
MethodDef proto void_ptr GetSpaceID()
MethodDef opts [u'CAT_ODE']
MethodDef name: CreateODE
MethodDef desc: create static element in ode (if not already created) -- returns false if unable to create
MethodDef proto bool CreateODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: DestroyODE
MethodDef desc: destroy static element in ode (if created)
MethodDef proto void DestroyODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE (creates id&apos;s if not already done)
MethodDef proto void SetValsToODE()
MethodDef opts [u'CAT_ODE']
MethodDef names [u'ClearStaticFlag', u'CreateODE', u'DestroyODE', u'GetSpace', u'GetSpaceID', u'GetWorld', u'GetWorldID', u'HasStaticFlag', u'SetStaticFlag', u'SetStaticFlagState', u'SetValsToODE']
########################################################################
TypeDef len: 17
TypeDef name:  VESpace
TypeDef type: class
TypeDef desc: a virtual environment object, which contains interconnected bodies and their joints, and represents a sub-space of objects
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'STEM_BASE', u'EXT_veobj', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: SIMPLE_SPACE
EnumDef val: SIMPLE_SPACE
EnumDef: simple list of items, requires O(n^2) but ok for very small spaces
EnumDef name: HASH_SPACE
EnumDef val: HASH_SPACE
EnumDef: hash-coded space with multi-scale grids: efficient for larger number of items
EnumDef names: [u'SpaceType']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: static_els
MemberDef type: VEStatic_Group
MemberDef desc: static elements of the space
MemberDef name: space_type
MemberDef type: VESpace::SpaceType
MemberDef desc: type of space to use
MemberDef name: hash_levels
MemberDef type: MinMaxInt
MemberDef opts [u'CONDEDIT_ON_space_type:HASH_SPACE']
MemberDef cats []
MemberDef desc: minimum and maximum spacing levels in hash space
MethodDef name: GetWorld
MethodDef desc: get world object (parent of this guy)
MethodDef proto VEWorld_ptr GetWorld()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetWorldID
MethodDef desc: get world id value
MethodDef proto void_ptr GetWorldID()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetWorldSpaceID
MethodDef desc: get world space id value
MethodDef proto void_ptr GetWorldSpaceID()
MethodDef opts [u'CAT_ODE']
MethodDef name: CreateODE
MethodDef desc: create object in ode (if not already created) -- returns false if unable to create
MethodDef proto bool CreateODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: DestroyODE
MethodDef desc: destroy object in ode (if created)
MethodDef proto void DestroyODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE (creates id&apos;s if not already done)
MethodDef proto void SetValsToODE()
MethodDef opts [u'CAT_ODE']
MethodDef names [u'CreateODE', u'DestroyODE', u'GetWorld', u'GetWorldID', u'GetWorldSpaceID', u'SetValsToODE']
########################################################################
TypeDef len: 17
TypeDef name:  VEWorld
TypeDef type: class
TypeDef desc: a virtual environment world
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'STEM_BASE', u'EXT_vewld', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: STD_STEP
EnumDef val: STD_STEP
EnumDef name: QUICK_STEP
EnumDef val: QUICK_STEP
EnumDef name: SIMPLE_SPACE
EnumDef val: SIMPLE_SPACE
EnumDef: simple list of items, requires O(n^2) but ok for very small spaces
EnumDef name: HASH_SPACE
EnumDef val: HASH_SPACE
EnumDef: hash-coded space with multi-scale grids: efficient for larger number of items
EnumDef names: [u'SpaceType', u'StepType']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: space_type
MemberDef type: VEWorld::SpaceType
MemberDef desc: type of space to use (typically HASH_SPACE is good for worlds having more objects)
MemberDef name: hash_levels
MemberDef type: MinMaxInt
MemberDef opts [u'CONDEDIT_ON_space_type:HASH_SPACE']
MemberDef cats []
MemberDef desc: minimum and maximum spacing levels in hash space
MemberDef name: step_type
MemberDef type: VEWorld::StepType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: what type of stepping function to use
MemberDef name: stepsize
MemberDef type: float
MemberDef desc: how big of a step to take
MemberDef name: quick_iters
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_step_type:QUICK_STEP']
MemberDef cats []
MemberDef desc: how many iterations to take in quick step mode
MemberDef name: gravity
MemberDef type: FloatTDCoord
MemberDef desc: gravitational setting for world (0,0,-9.81) is std
MemberDef name: updt_display
MemberDef type: bool
MemberDef desc: if true, will update any attached display after each time step
MemberDef name: ode_params
MemberDef type: ODEWorldParams
MemberDef desc: parameters for tuning the ODE engine
MemberDef name: objects
MemberDef type: VEObject_Group
MemberDef desc: objects in the world
MemberDef name: spaces
MemberDef type: VESpace_Group
MemberDef desc: spaces (static elements) in the world
MemberDef name: textures
MemberDef type: VETexture_List
MemberDef desc: shared textures used by bodies in the world
MemberDef name: camera_0
MemberDef type: VECameraRef
MemberDef desc: first camera to use in rendering images (first person view) -- must be set to point to a camera in the set of objects for it to be used
MemberDef name: camera_1
MemberDef type: VECameraRef
MemberDef desc: second camera to use in rendering images (for stereo vision)-- must be set to point to a camera in the set of objects for it to be used
MemberDef name: bg_color
MemberDef type: taColor
MemberDef desc: background color of display for camera images
MemberDef name: sun_light
MemberDef type: VELightParams
MemberDef desc: parameters for a sun (overhead directional) light
MemberDef name: light_0
MemberDef type: VELightRef
MemberDef desc: first light to add to scene -- must be set to point to a light in the set of objects for it to be used
MemberDef name: light_1
MemberDef type: VELightRef
MemberDef desc: second light to add to scene -- must be set to point to a light in the set of objects for it to be used
MethodDef name: CreateODE
MethodDef desc: create world in ode (if not already created) -- returns false if unable to create
MethodDef proto bool CreateODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: DestroyODE
MethodDef desc: destroy world in ode (if created)
MethodDef proto void DestroyODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE (creates id&apos;s if not already done)
MethodDef proto void SetValsToODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetValsFmODE
MethodDef desc: get the updated values from ODE after computing (called after each step)
MethodDef proto void GetValsFmODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: Init
MethodDef desc: initialize the virtual environment, placing all objects in their init configurations, updating with any added objects, etc
MethodDef proto void Init()
MethodDef opts [u'BUTTON', u'CAT_ODE']
MethodDef name: Step
MethodDef desc: take one step of integration, and get updated values
MethodDef proto void Step()
MethodDef opts [u'BUTTON', u'CAT_ODE']
MethodDef name: NewView
MethodDef desc: make a new viewer of this world (NULL=use existing empty frame if any, else make new frame)
MethodDef proto VEWorldView_ptr NewView(T3DataViewFrame* fr = __null)
MethodDef opts [u'NULL_OK', u'NULL_TEXT_0_NewFrame', u'BUTTON', u'CAT_Display']
MethodDef name: FindView
MethodDef desc: find first existing viewer of this world (if it exists)
MethodDef proto VEWorldView_ptr FindView()
MethodDef opts [u'CAT_Display']
MethodDef name: GetCameraImage
MethodDef desc: get camera image from given camera number (image may be null if camera not set)
MethodDef proto QImage GetCameraImage(int camera_no)
MethodDef opts [u'CAT_ODE']
MethodDef names [u'CreateODE', u'DestroyODE', u'FindView', u'GetCameraImage', u'GetValsFmODE', u'Init', u'NewView', u'SetValsToODE', u'Step']
########################################################################
TypeDef len: 15
TypeDef name:  ODEIntParams
TypeDef type: class
TypeDef desc: ODE integration parameters
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
TypeDef children: [u'ODEJointParams', u'ODEWorldParams']
MemberDef name: erp
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: (0-1, .1-.8 useful range) error reduction parameter: how much of the joint error is reduced at the next time step
MemberDef name: cfm
MemberDef type: float
MemberDef opts [u'DEF_1e-05']
MemberDef cats []
MemberDef desc: (0-1, 1e-9 - 1 useful range) constraint force mixing parameter: how &apos;soft&apos; is the constraint (0 = hard, 1 = soft)
########################################################################
TypeDef len: 13
TypeDef name:  VESurface
TypeDef type: class
TypeDef desc: surface properties for collisions
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: friction
MemberDef type: float
MemberDef desc: (0-1e22) coulomb friction coefficient (mu). 0 = frictionless, 1e22 = infinity = no slipping
MemberDef name: bounce
MemberDef type: float
MemberDef desc: (0-1) how bouncy is the surface (0 = hard, 1 = maximum bouncyness)
MemberDef name: bounce_vel
MemberDef type: float
MemberDef desc: minimum incoming velocity necessary for bounce -- incoming velocities below this will have a bounce parameter of 0
########################################################################
TypeDef len: 17
TypeDef name:  VETexture
TypeDef type: class
TypeDef desc: texture mapping of an image onto a 3d object -- defined as a shared resource in the VEWorld that individual objects can point to
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'STEM_BASE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: MODULATE
EnumDef val: MODULATE
EnumDef: texture color is multiplied by the underlying object color, result is shaded by lighting
EnumDef name: DECAL
EnumDef val: DECAL
EnumDef: image overwrites polygon color entirely, result is NOT shaded by lighting (does not work for grayscale texture images! see REPLACE)
EnumDef name: BLEND
EnumDef val: BLEND
EnumDef: for monochrome textures, the intensity is used to blend between the shaded color of the object and the color in blend_color
EnumDef name: REPLACE
EnumDef val: REPLACE
EnumDef: image overwrites object color entirely (same as DECAL but works for greyscale images)
EnumDef name: REPEAT
EnumDef val: REPEAT
EnumDef: repeat texture to fill object size
EnumDef name: CLAMP
EnumDef val: CLAMP
EnumDef: clamp (repeats border pixels to end of object dimension)
EnumDef names: [u'Mode', u'Wrap']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: fname
MemberDef type: taString
MemberDef opts [u'FILE_DIALOG_LOAD', u'FILETYPE_Image']
MemberDef cats []
MemberDef desc: full file name (including path if not in same dir as project) for the texture image file (formats supported: JPEG, PNG, GIF, TIFF, RGB, PIC, TGA)
MemberDef name: mode
MemberDef type: VETexture::Mode
MemberDef desc: how to apply texture to object
MemberDef name: wrap_horiz
MemberDef type: VETexture::Wrap
MemberDef desc: how to wrap in the horizontal (largest) dimension
MemberDef name: wrap_vert
MemberDef type: VETexture::Wrap
MemberDef desc: how to wrap in the vertical (smallest) dimension
MemberDef name: offset
MemberDef type: FloatTwoDCoord
MemberDef desc: [0,0] offset of image from 0,0 (x=horizontal dim, y=vertical dim, shape dependent)
MemberDef name: scale
MemberDef type: FloatTwoDCoord
MemberDef desc: [1,1] scaling of image (x=horizontal dim, y=vertical dim, shape dependent)
MemberDef name: rot
MemberDef type: float
MemberDef desc: [0] rotation in the plane, in degrees
MemberDef name: center
MemberDef type: FloatTwoDCoord
MemberDef desc: [0,0] center point for scale and rotation
MemberDef name: blend_color
MemberDef type: taColor
MemberDef opts [u'CONDEDIT_ON_mode:BLEND']
MemberDef cats []
MemberDef desc: color to use in blend case
MethodDef name: SetTexture
MethodDef desc: configure the texture based on values
MethodDef proto void SetTexture(SoTexture2* sotx)
MethodDef name: UpdateTexture
MethodDef desc: if environment is already initialized and viewed, this will update the texture actually shown in the view
MethodDef proto bool UpdateTexture()
MethodDef opts [u'BUTTON']
MethodDef name: NeedsTransform
MethodDef desc: determines if SoTexture2Transform is needed
MethodDef proto bool NeedsTransform()
MethodDef name: SetTransform
MethodDef desc: configure the transform based on values
MethodDef proto void SetTransform(SoTexture2Transform* sotx)
MethodDef names [u'NeedsTransform', u'SetTexture', u'SetTransform', u'UpdateTexture']
########################################################################
TypeDef len: 9
TypeDef name:  VETexture_List
TypeDef type: class
TypeDef desc: a list of virtual environment textures
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  VEBody_Group
TypeDef type: class
TypeDef desc: a group of virtual environment bodies
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE
MethodDef proto void SetValsToODE()
MethodDef name: GetValsFmODE
MethodDef desc: get the updated values from ODE after computing
MethodDef proto void GetValsFmODE(bool updt_disp = false)
MethodDef names [u'GetValsFmODE', u'SetValsToODE']
########################################################################
TypeDef len: 13
TypeDef name:  VELightParams
TypeDef type: class
TypeDef desc: virtual env light parameters
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: on
MemberDef type: bool
MemberDef desc: is the light turned on?
MemberDef name: intensity
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: (0-1) how bright is the light
MemberDef name: color
MemberDef type: taColor
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: color of light
########################################################################
TypeDef len: 13
TypeDef name:  VECameraDists
TypeDef type: class
TypeDef desc: virtual env camera distances
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: near
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats []
MemberDef desc: near distance of camera -- closest things can be seen
MemberDef name: focal
MemberDef type: float
MemberDef desc: focal distance of camera -- where is it focused on in scene?
MemberDef name: far
MemberDef type: float
MemberDef desc: far distance of camera -- furthest things that can be seen
########################################################################
TypeDef len: 15
TypeDef name:  VECamera
TypeDef type: class
TypeDef desc: virtual environment camera -- a body that contains a camera -- position and orientation are used to point the camera -- body shape is not rendered, but mass/inertia etc is used if part of a non-fixed object -- camera must be selected in the VEWorld for it to actually be used to render images!
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'EXT_vebod', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'VEBody']
MemberDef name: color
MemberDef type: bool
MemberDef desc: if true, get full color images (else greyscale)
MemberDef name: img_size
MemberDef type: TwoDCoord
MemberDef desc: size of image to record from camera
MemberDef name: view_dist
MemberDef type: VECameraDists
MemberDef desc: distances that are in view of the camera
MemberDef name: field_of_view
MemberDef type: float
MemberDef desc: field of view of camera (angle in degrees) -- how much of scene is it taking in
MemberDef name: antialias_scale
MemberDef type: int
MemberDef opts [u'DEF_2']
MemberDef cats []
MemberDef desc: to achieve antialiasing, renders at a larger scale (determined by this parameter), and is then downscaled to target size
MemberDef name: light
MemberDef type: VELightParams
MemberDef desc: directional &apos;headlight&apos; associated with the camera -- ensures that whatever is being viewed can be seen (but makes lighting artificially consistent and good)
MemberDef name: dir_norm
MemberDef type: FloatTDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: normal vector for where the camera is facing
MethodDef name: ConfigCamera
MethodDef desc: config So camera parameters
MethodDef proto void ConfigCamera(SoPerspectiveCamera* cam)
MethodDef names [u'ConfigCamera']
########################################################################
TypeDef len: 17
TypeDef name:  VELight
TypeDef type: class
TypeDef desc: virtual environment light -- a body that contains a light source -- body shape is not rendered, but mass/inertia etc is used if part of a non-fixed object -- light only affects items after it in the list of objects!
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'EXT_vebod', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'VEBody']
EnumDef name: DIRECTIONAL_LIGHT
EnumDef val: DIRECTIONAL_LIGHT
EnumDef: shines in a given direction, rotation is used for the direction, but position is not -- fastest rendering speed
EnumDef name: POINT_LIGHT
EnumDef val: POINT_LIGHT
EnumDef: radiates in all directions, uses position for location
EnumDef name: SPOT_LIGHT
EnumDef val: SPOT_LIGHT
EnumDef: shines in a given direction from a given position
EnumDef names: [u'LightType']
MemberDef name: light_type
MemberDef type: VELight::LightType
MemberDef desc: type of light
MemberDef name: light
MemberDef type: VELightParams
MemberDef desc: light parameters
MemberDef name: drop_off_rate
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_light_type:SPOT_LIGHT']
MemberDef cats []
MemberDef desc: (0-1) how fast light drops off with increasing angle from the direction angle
MemberDef name: cut_off_angle
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_light_type:SPOT_LIGHT']
MemberDef cats []
MemberDef desc: (45 default) angle in degrees from the direction vector where there will be no light
MemberDef name: dir_norm
MemberDef type: FloatTDCoord
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: normal vector for where the camera is facing
MethodDef name: CreateLight
MethodDef desc: create the So light of correct type
MethodDef proto SoLight_ptr CreateLight()
MethodDef name: ConfigLight
MethodDef desc: config So light parameters
MethodDef proto void ConfigLight(SoLight* lgt)
MethodDef name: UpdateLight
MethodDef desc: if environment is already initialized and viewed, this will update the light in the display based on current settings
MethodDef proto bool UpdateLight()
MethodDef opts [u'BUTTON']
MethodDef names [u'ConfigLight', u'CreateLight', u'UpdateLight']
########################################################################
TypeDef len: 13
TypeDef name:  VEJointStops
TypeDef type: class
TypeDef desc: virtual env joint stop parameters
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: lo
MemberDef type: float
MemberDef desc: stop for low angle or position value of joint
MemberDef name: hi
MemberDef type: float
MemberDef desc: stop for high angle or position value of joint
MemberDef name: bounce
MemberDef type: float
MemberDef desc: how bouncy is the joint (0 = no bounce, 1 = maximum bounce)
########################################################################
TypeDef len: 13
TypeDef name:  VEJointMotor
TypeDef type: class
TypeDef desc: virtual env joint motor parameters
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: vel
MemberDef type: float
MemberDef desc: target joint velocity to achieve (angular or linear)
MemberDef name: f_max
MemberDef type: float
MemberDef desc: maximum force or torque to drive the joint to achieve desired velocity
########################################################################
TypeDef len: 13
TypeDef name:  ODEJointParams
TypeDef type: class
TypeDef desc: ODE integration parameters for joints
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'ODEIntParams']
MemberDef name: no_stop_cfm
MemberDef type: float
MemberDef opts [u'DEF_1e-05']
MemberDef cats []
MemberDef desc: (0-1, 1e-9 - 1 useful range) constraint force mixing parameter when not at a stop: how &apos;soft&apos; is the constraint (0 = hard, 1 = soft)
MemberDef name: fudge
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: (0-1) fudge factor for reducing force when a motor is present -- reduce this value if there is excessive jumping at the joint
########################################################################
TypeDef len: 11
TypeDef name:  VEJoint_Group
TypeDef type: class
TypeDef desc: a group of virtual environment joints
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE
MethodDef proto void SetValsToODE()
MethodDef opts [u'CAT_ODE']
MethodDef name: GetValsFmODE
MethodDef desc: get the updated values from ODE after computing
MethodDef proto void GetValsFmODE(bool updt_disp = false)
MethodDef opts [u'CAT_ODE']
MethodDef names [u'GetValsFmODE', u'SetValsToODE']
########################################################################
TypeDef len: 11
TypeDef name:  VEObject_Group
TypeDef type: class
TypeDef desc: a group of virtual environment objects
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE
MethodDef proto void SetValsToODE()
MethodDef name: GetValsFmODE
MethodDef desc: get the updated values from ODE after computing
MethodDef proto void GetValsFmODE(bool updt_disp = false)
MethodDef names [u'GetValsFmODE', u'SetValsToODE']
########################################################################
TypeDef len: 11
TypeDef name:  VEStatic_Group
TypeDef type: class
TypeDef desc: a group of virtual environment static elements
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE
MethodDef proto void SetValsToODE()
MethodDef names [u'SetValsToODE']
########################################################################
TypeDef len: 13
TypeDef name:  VEHeightField
TypeDef type: class
TypeDef desc: virtual environment height field -- 3d surface defined by a grid of height values
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'EXT_vestc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'VEStatic']
MemberDef name: height_data
MemberDef type: DataTableRef
MemberDef desc: data table containing height field data
MemberDef name: data_col
MemberDef type: taString
MemberDef desc: column name within table that has the data -- IMPORTANT: must be a 2d float/double matrix column!
MemberDef name: row_num
MemberDef type: int
MemberDef desc: row number containing height field data
########################################################################
TypeDef len: 11
TypeDef name:  VESpace_Group
TypeDef type: class
TypeDef desc: a group of virtual environment objects
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: SetValsToODE
MethodDef desc: set the current values to ODE
MethodDef proto void SetValsToODE()
MethodDef names [u'SetValsToODE']
########################################################################
TypeDef len: 13
TypeDef name:  ODEWorldParams
TypeDef type: class
TypeDef desc: ODE integration parameters
TypeDef cats:, [u'VirtEnv']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'ODEIntParams']
MemberDef name: max_cor_vel
MemberDef type: float
MemberDef opts [u'DEF_1e+06']
MemberDef cats []
MemberDef desc: maximum correcting velocity for contacts (how quickly they can pop things out of contact)
MemberDef name: contact_depth
MemberDef type: float
MemberDef opts [u'DEF_0.001']
MemberDef cats []
MemberDef desc: depth of the surface layer arond all geometry objects -- allows things to go this deep into a surface before actual contact is made -- increased value can help prevent jittering
MemberDef name: max_col_pts
MemberDef type: int
MemberDef opts [u'DEF_4']
MemberDef cats []
MemberDef desc: maximum number of collision points to get (must be less than 64, which is a hard maximum)
########################################################################
TypeDef len: 13
TypeDef name:  NameValue
TypeDef type: class
TypeDef desc: name/value pair
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: value
MemberDef type: taString
MemberDef desc: Value for name
########################################################################
TypeDef len: 15
TypeDef name:  TypeDefault
TypeDef type: class
TypeDef desc: Contains a default object of a type
TypeDef cats:, [u'Project']
TypeDef opts:, [u'EXT_def', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: default_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_taBase']
MemberDef cats []
MemberDef desc: type of the default
MemberDef name: token
MemberDef type: taBase*
MemberDef opts [u'DEFAULT_EDIT', u'NO_SAVE']
MemberDef cats []
MemberDef desc: token which has default values
MemberDef name: active_membs
MemberDef type: taBase_List
MemberDef desc: MemberName / MemberValue pairs
MethodDef name: SetActive
MethodDef desc: set active flag for member
MethodDef proto void SetActive(char* memb_nm, bool onoff)
MethodDef name: GetActive
MethodDef desc: check active flag for member
MethodDef proto bool GetActive(char* memb_nm)
MethodDef name: UpdateToNameValue
MethodDef desc: set the name value data from token
MethodDef proto void UpdateToNameValue()
MethodDef name: UpdateFromNameValue
MethodDef desc: set the token form the name values
MethodDef proto void UpdateFromNameValue()
MethodDef names [u'GetActive', u'SetActive', u'UpdateFromNameValue', u'UpdateToNameValue']
########################################################################
TypeDef len: 13
TypeDef name:  IPlugin
TypeDef type: class
TypeDef desc: basic interface for a ta plugin; int ret codes use 0=success, !0=errcode
TypeDef cats:, []
TypeDef opts:, [u'VIRT_BASE']
TypeDef parents: [u'ITypedObject']
MethodDef name: desc
MethodDef proto const_char_ptr desc()
MethodDef name: name
MethodDef proto const_char_ptr name()
MethodDef name: uniqueId
MethodDef proto const_char_ptr uniqueId()
MethodDef name: url
MethodDef proto const_char_ptr url()
MethodDef name: NotifyTacssVersion
MethodDef desc: we pass ta/css version; set is_ok false if this version is no good for plugin
MethodDef proto int NotifyTacssVersion(const taVersion&amp; tav, bool&amp; is_ok)
MethodDef name: GetVersion
MethodDef desc: major.minor.step.build -- used to put version dependency stamp into project files
MethodDef proto int GetVersion(taVersion&amp; tav)
MethodDef name: InitializeTypes
MethodDef desc: called when loading plugin to initialize types -- implementer must call ta_init_Xxx() routine
MethodDef proto int InitializeTypes()
MethodDef name: InitializePlugin
MethodDef desc: called to initialize plugin -- it can do things like create classes
MethodDef proto int InitializePlugin()
MethodDef names [u'GetVersion', u'InitializePlugin', u'InitializeTypes', u'NotifyTacssVersion', u'desc', u'name', u'uniqueId', u'url']
########################################################################
TypeDef len: 15
TypeDef name:  taPluginBase
TypeDef type: class
TypeDef desc: taBase rep of a plugin -- these can be out of date w/ respect to actual plugins
TypeDef cats:, []
TypeDef opts:, [u'VIRT_BASE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'taPlugin', u'taPluginDep']
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: the plugin name, provided by the plugin
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: the plugin description, provided by the plugin
MemberDef name: unique_id
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: a unique string to identify the plugin
MemberDef name: version
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: the plugin&apos;s version (as of when plugin was loaded)
MemberDef name: url
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: a url that provides information on the plugin; used mostly for when missing in a proj file
########################################################################
TypeDef len: 13
TypeDef name:  taPlugin
TypeDef type: class
TypeDef desc: taBase rep of a plugin -- these can be out of date w/ respect to actual plugins
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taPluginBase']
MemberDef name: filename
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW', u'FILE_DIALOG_LOAD']
MemberDef cats []
MemberDef desc: the plugin&apos;s filename
MemberDef name: enabled
MemberDef type: bool
MemberDef desc: set if this plugin should be loaded when the app starts
MemberDef name: loaded
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: / set if the plugin is loaded and initialized
########################################################################
TypeDef len: 15
TypeDef name:  taPluginDep
TypeDef type: class
TypeDef desc: describes a plugin dependency -- appears in root, and streamed to files
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taPluginBase']
EnumDef name: DC_OK
EnumDef val: DC_OK
EnumDef: a-ok
EnumDef name: DC_MISSING
EnumDef val: DC_MISSING
EnumDef: required guy is missing
EnumDef name: DC_NOT_LOADED
EnumDef val: DC_NOT_LOADED
EnumDef: guy is listed, but not loaded
EnumDef names: [u'DepCheck']
MemberDef name: dep_check
MemberDef type: taPluginDep::DepCheck
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: set if plugin_dep is missing in plugins
########################################################################
TypeDef len: 13
TypeDef name:  taPluginBase_List
TypeDef type: class
TypeDef desc: plugins available to the program (also used for deps)
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'CHILDREN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef children: [u'taPlugin_List']
MethodDef name: FindUniqueId
MethodDef desc: find by unique_id
MethodDef proto taPluginBase_ptr FindUniqueId(const taString&amp; value)
MethodDef names [u'FindUniqueId']
########################################################################
TypeDef len: 13
TypeDef name:  taPlugin_List
TypeDef type: class
TypeDef desc: plugins available to the program (also used for descs)
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'CHILDREN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taPluginBase_List']
MethodDef name: FindFilename
MethodDef proto taPlugin_ptr FindFilename(const taString&amp; value)
MethodDef name: LoadPlugins
MethodDef desc: Load and initialize all the enabled plugins, unload remainder
MethodDef proto void LoadPlugins()
MethodDef name: ViewPluginLog
MethodDef desc: view the most recent plugin log
MethodDef proto void ViewPluginLog()
MethodDef opts [u'MENU_CONTEXT', u'BUTTON']
MethodDef names [u'FindFilename', u'LoadPlugins', u'ViewPluginLog']
########################################################################
TypeDef len: 17
TypeDef name:  taEngine
TypeDef type: class
TypeDef desc: an object that manages XxxInst instances of a specific computing engine
TypeDef cats:, []
TypeDef opts:, [u'TOKENS', u'VIRT_BASE', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'NetEngine']
MemberDef name: use_log
MemberDef type: bool
MemberDef desc: use a log table (name=engine name) to log performance stats
MemberDef name: max_rows
MemberDef type: int
MemberDef desc: stop logging after this many rows (-1=unlimited)
MethodDef name: MakeEngineInst
MethodDef proto taEngineInst_ptr MakeEngineInst()
MethodDef names [u'MakeEngineInst']
########################################################################
TypeDef len: 17
TypeDef name:  taTask
TypeDef type: class
TypeDef desc: a single processing instance for an engine
TypeDef cats:, [u'Task']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'LeabraTask']
MemberDef name: task_id
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_COPY']
MemberDef cats []
MemberDef desc: unique id per logical set, ex. one per thread
MemberDef name: proc_id
MemberDef type: int
MemberDef desc: current proc being run
MethodDef name: inst
MethodDef desc: typically lex override
MethodDef proto taEngineInst_ptr inst()
MethodDef name: run
MethodDef desc: must be overridden, to dispatch actual proc
MethodDef proto void run()
MethodDef names [u'inst', u'run']
########################################################################
TypeDef len: 17
TypeDef name:  taEngineInst
TypeDef type: class
TypeDef desc: extensible runtime-only structure that contains client-global data and tasks organized for efficient access by runtime Engines
TypeDef cats:, []
TypeDef opts:, [u'NO_INSTANCE', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: []
MemberDef name: m_engine
MemberDef type: taEngineRef
MemberDef name: tasks
MemberDef type: taTask_List
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: -- set tasks with setTaskCount
MemberDef name: log_table
MemberDef type: DataTableRef
MemberDef desc: log table, if set
MemberDef name: use_log
MemberDef type: bool
MemberDef desc: copied from engine
MemberDef name: max_rows
MemberDef type: int
MemberDef desc: stop logging after this many rows (-1=unlimited)
MethodDef name: taskCount
MethodDef proto int taskCount()
MethodDef opts [u'NO_SHOW']
MethodDef name: setTaskCount
MethodDef proto void setTaskCount(int val)
MethodDef name: task
MethodDef proto taTask_ptr task(int i)
MethodDef opts [u'NO_SHOW']
MethodDef name: AssertLogTable
MethodDef desc: call at some point, before logging
MethodDef proto void AssertLogTable()
MethodDef name: WriteLogRecord
MethodDef proto void WriteLogRecord()
MethodDef names [u'AssertLogTable', u'WriteLogRecord', u'setTaskCount', u'task', u'taskCount']
########################################################################
TypeDef len: 9
TypeDef name:  taTask_List
TypeDef type: class
TypeDef desc: a list of tasks
TypeDef cats:, [u'Task']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  taEngine_Group
TypeDef type: class
TypeDef desc: a collection of engines -- there is usually a separate group for each family of engines
TypeDef cats:, [u'Task']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 17
TypeDef name:  SelectEditItem
TypeDef type: class
TypeDef desc: base class for membs/meths in a ControlEdit
TypeDef cats:, [u'Display']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'EditMbrItem', u'EditMthItem']
MemberDef name: label
MemberDef type: taString
MemberDef desc: full display label for item in edit dialog
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description (appears as tooltip for item)
MemberDef name: base
MemberDef type: taBase*
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SET_POINTER']
MemberDef cats []
MemberDef desc: the mbr/mth base (not ref&apos;ed)
MethodDef name: StatFindItemBase
MethodDef desc: find the item with indicated base and mth/mbr in the group
MethodDef proto SelectEditItem_ptr StatFindItemBase(const taGroup_impl* grp, taBase* base, TypeItem* ti, int&amp; idx)
MethodDef name: StatGetBase_Flat
MethodDef desc: gets the flat (leaf) base
MethodDef proto bool StatGetBase_Flat(const taGroup_impl* grp, int idx, taBase*&amp; base)
MethodDef name: StatHasBase
MethodDef desc: see if anyone has this base
MethodDef proto bool StatHasBase(taGroup_impl* grp, taBase* base)
MethodDef name: StatRemoveItemBase
MethodDef desc: remove any items with this base
MethodDef proto bool StatRemoveItemBase(taGroup_impl* grp, taBase* base)
MethodDef name: caption
MethodDef desc: the string used in the editor
MethodDef proto taString caption()
MethodDef name: typeItem
MethodDef desc: the mbr or mth
MethodDef proto TypeItem_ptr typeItem()
MethodDef names [u'StatFindItemBase', u'StatGetBase_Flat', u'StatHasBase', u'StatRemoveItemBase', u'caption', u'typeItem']
########################################################################
TypeDef len: 13
TypeDef name:  EditMbrItem
TypeDef type: class
TypeDef desc: base class for membs/meths in a Edit
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'SelectEditItem']
MemberDef name: mbr
MemberDef type: MemberDef*
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: the mbr type
########################################################################
TypeDef len: 13
TypeDef name:  EditMthItem
TypeDef type: class
TypeDef desc: base class for meths in a Edit
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'SelectEditItem']
MemberDef name: mth
MemberDef type: MethodDef*
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: the mbr type
########################################################################
TypeDef len: 11
TypeDef name:  EditMbrItem_Group
TypeDef type: class
TypeDef desc: group of select edit dialog objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: GetBase_Flat
MethodDef desc: gets the flat (leaf) base -- NULL if out of bounds or doesn&apos;t exist
MethodDef proto taBase_ptr GetBase_Flat(int idx)
MethodDef name: FindItemBase
MethodDef proto EditMbrItem_ptr FindItemBase(taBase* base, MemberDef* md, int&amp; idx)
MethodDef names [u'FindItemBase', u'GetBase_Flat']
########################################################################
TypeDef len: 15
TypeDef name:  EditMthItem_Group
TypeDef type: class
TypeDef desc: group of select edit dialog objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
EnumDef name: GT_BUTTONS
EnumDef val: GT_BUTTONS
EnumDef: make a buttons in the dialog for aach method
EnumDef name: GT_MENU_BUTTON
EnumDef val: GT_MENU_BUTTON
EnumDef: make a button group for the methods (subgroups only)
EnumDef name: GT_MENU
EnumDef val: GT_MENU
EnumDef: make a menu for the methods (subgroups only)
EnumDef names: [u'MthGroupType']
MemberDef name: group_type
MemberDef type: EditMthItem_Group::MthGroupType
MemberDef opts [u'GHOST_ON_is_root']
MemberDef cats []
MemberDef desc: how to organize and display the methods in this group
MethodDef name: SetGroupType
MethodDef desc: set how the methods will be displayed in the SelectEdit dialog
MethodDef proto void SetGroupType(EditMthItem_Group::MthGroupType group_type)
MethodDef opts [u'MENU', u'MENU_CONTEXT']
MethodDef name: GetBase_Flat
MethodDef desc: gets the flat (leaf) base -- NULL if out of bounds or doesn&apos;t exist
MethodDef proto taBase_ptr GetBase_Flat(int idx)
MethodDef names [u'GetBase_Flat', u'SetGroupType']
########################################################################
TypeDef len: 13
TypeDef name:  SelectEditConfig
TypeDef type: class
TypeDef desc: special parameters for controlling the select edit display
TypeDef cats:, [u'Display']
TypeDef opts:, [u'EDIT_INLINE', u'OBSOLETE', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: auto_edit
MemberDef type: bool
MemberDef desc: automatically bring up edit dialog upon loading
MemberDef name: mbr_labels
MemberDef type: String_Array
MemberDef desc: extra labels at the start of each member label for the selected fields
MemberDef name: meth_labels
MemberDef type: String_Array
MemberDef desc: extra labels at the start of each method label for the selected functions
########################################################################
TypeDef len: 15
TypeDef name:  taWizard
TypeDef type: class
TypeDef desc: wizard for automating construction of simulation objects
TypeDef cats:, [u'Wizard']
TypeDef opts:, [u'BUTROWS_2', u'EDIT_WIDTH_60', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'Wizard']
MemberDef name: auto_open
MemberDef type: bool
MemberDef desc: open this wizard upon startup
########################################################################
TypeDef len: 13
TypeDef name:  UserData_DocLink
TypeDef type: class
TypeDef desc: a link to a doc -- when added to the userdata of an obj, will auto display the doc
TypeDef cats:, []
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'UserDataItemBase']
MemberDef name: doc
MemberDef type: taDocRef
MemberDef desc: the doc
########################################################################
TypeDef len: 11
TypeDef name:  Doc_Group
TypeDef type: class
TypeDef desc: group of doc objects
TypeDef cats:, [u'Docs']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: AutoEdit
MethodDef proto void AutoEdit()
MethodDef names [u'AutoEdit']
########################################################################
TypeDef len: 11
TypeDef name:  Wizard_Group
TypeDef type: class
TypeDef desc: group of wizard objects
TypeDef cats:, [u'Wizard']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: AutoEdit
MethodDef proto void AutoEdit()
MethodDef names [u'AutoEdit']
########################################################################
TypeDef len: 11
TypeDef name:  SelectEdit_Group
TypeDef type: class
TypeDef desc: group of select edit dialog objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: AutoEdit
MethodDef proto void AutoEdit()
MethodDef names [u'AutoEdit']
########################################################################
TypeDef len: 9
TypeDef name:  Project_Group
TypeDef type: class
TypeDef desc: group of projects
TypeDef cats:, [u'Project']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 17
TypeDef name:  TemtClient
TypeDef type: class
TypeDef desc: for tcp-based remote services -- represents one connected client
TypeDef cats:, []
TypeDef opts:, [u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taOABase']
EnumDef name: CS_READY
EnumDef val: CS_READY
EnumDef: expecting a command
EnumDef name: CS_DATA_IN
EnumDef val: CS_DATA_IN
EnumDef: expecting another line of data in (from previous command)
EnumDef name: CS_DISCONNECTED
EnumDef val: CS_DISCONNECTED
EnumDef: client has disconnected
EnumDef names: [u'ClientState']
MemberDef name: state
MemberDef type: TemtClient::ClientState
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: comm state
MethodDef name: isConnected
MethodDef proto bool isConnected()
MethodDef names [u'isConnected']
########################################################################
TypeDef len: 15
TypeDef name:  TemtServer
TypeDef type: class
TypeDef desc: Temt Server, for tcp-based remote services
TypeDef cats:, []
TypeDef opts:, [u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taOABase']
MemberDef name: port
MemberDef type: unsigned_short
MemberDef opts [u'DEF_5360']
MemberDef cats []
MemberDef desc: port number to use -- each instance must have unique port
MemberDef name: open
MemberDef type: bool
MemberDef opts [u'NO_SAVE', u'SHOW', u'READ_ONLY']
MemberDef cats []
MemberDef desc: set when server is open and accepting connections
MemberDef name: clients
MemberDef type: TemtClient_List
MemberDef opts [u'SHOW', u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: how many clients are connected
MethodDef name: isOpen
MethodDef proto bool isOpen()
MethodDef name: InitServer
MethodDef desc: initializes the server
MethodDef proto bool InitServer()
MethodDef name: OpenServer
MethodDef desc: open the server and accept connections
MethodDef proto bool OpenServer()
MethodDef opts [u'BUTTON', u'GHOST_ON_open']
MethodDef name: CloseServer
MethodDef desc: stop the server and close open connections
MethodDef proto void CloseServer(bool notify = true)
MethodDef opts [u'BUTTON', u'GHOST_OFF_open', u'ARGC_0']
MethodDef names [u'CloseServer', u'InitServer', u'OpenServer', u'isOpen']
########################################################################
TypeDef len: 7
TypeDef name:  TemtClient_List
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  taiData
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject']
TypeDef children: [u'taiActions', u'taiMethodData', u'taiField', u'taiItemPtrBase', u'taiIncrField', u'taiComboBox']
########################################################################
TypeDef len: 7
TypeDef name:  iTopLevelWindow_List
TypeDef type: class
TypeDef desc: returns item cast as requested, or NULL if not of that type
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: SafeElAsMainWindow
MethodDef desc: returns item cast as requested, or NULL if not of that type
MethodDef proto iMainWindowViewer_ptr SafeElAsMainWindow(int i)
MethodDef name: FindMainWindowById
MethodDef desc: find the main window with indicated uniqueId NULL if not of that type
MethodDef proto iMainWindowViewer_ptr FindMainWindowById(int id)
MethodDef name: SafeElAsDockWindow
MethodDef desc: returns item cast as requested, or NULL if not of that type
MethodDef proto iDockViewer_ptr SafeElAsDockWindow(int i)
MethodDef name: Peek_MainWindow
MethodDef desc: finds the topmost main window, NULL if none
MethodDef proto iMainWindowViewer_ptr Peek_MainWindow()
MethodDef name: Peek_DockWindow
MethodDef desc: finds the topmost undocked dock win, NULL if none
MethodDef proto iDockViewer_ptr Peek_DockWindow()
MethodDef name: GotFocus_MainWindow
MethodDef desc: puts to top of list
MethodDef proto void GotFocus_MainWindow(iMainWindowViewer* imw)
MethodDef name: GotFocus_DockWindow
MethodDef desc: puts to top of list
MethodDef proto void GotFocus_DockWindow(iDockViewer* idv)
MethodDef names [u'FindMainWindowById', u'GotFocus_DockWindow', u'GotFocus_MainWindow', u'Peek_DockWindow', u'Peek_MainWindow', u'SafeElAsDockWindow', u'SafeElAsMainWindow']
########################################################################
TypeDef len: 15
TypeDef name:  IDataHost
TypeDef type: class
TypeDef desc: interface for top level host of data items, mostly for DataChanged
TypeDef cats:, []
TypeDef opts:, [u'VIRT_BASE', u'NO_INSTANCE', u'NO_CSS']
TypeDef parents: [u'ITypedObject']
TypeDef children: []
MethodDef name: isConstructed
MethodDef proto bool isConstructed()
MethodDef name: isModal
MethodDef proto bool isModal()
MethodDef name: isReadOnly
MethodDef proto bool isReadOnly()
MethodDef name: show
MethodDef proto ShowMembs show()
MethodDef name: viewerWindow
MethodDef desc: used to set cliphandler
MethodDef proto iMainWindowViewer_ptr viewerWindow()
MethodDef name: HasChanged
MethodDef desc: &apos;true&apos; if has changed
MethodDef proto bool HasChanged()
MethodDef name: Root
MethodDef desc: root of the object
MethodDef proto void_ptr Root()
MethodDef name: Base
MethodDef desc: root of the object, if a taBase
MethodDef proto taBase_ptr Base()
MethodDef name: GetRootTypeDef
MethodDef desc: TypeDef on the root, for casting
MethodDef proto TypeDef_ptr GetRootTypeDef()
MethodDef name: GetValue
MethodDef desc: copy gui to value
MethodDef proto void GetValue()
MethodDef name: GetImage
MethodDef desc: copy value to gui
MethodDef proto void GetImage()
MethodDef name: Changed
MethodDef desc: called by embedded item to indicate contents have changed
MethodDef proto void Changed()
MethodDef name: SetItemAsHandler
MethodDef desc: called by compatible controls to set or unset the control as clipboard/focus handler (usually don&apos;t need to unset); in ta_qtviewer.cpp
MethodDef proto void SetItemAsHandler(taiData_ptr item, bool set_it = true)
MethodDef name: Apply_Async
MethodDef desc: provided for the APPLY_IMMED functionality
MethodDef proto void Apply_Async()
MethodDef names [u'Apply_Async', u'Base', u'Changed', u'GetImage', u'GetRootTypeDef', u'GetValue', u'HasChanged', u'Root', u'SetItemAsHandler', u'isConstructed', u'isModal', u'isReadOnly', u'show', u'viewerWindow']
########################################################################
TypeDef len: 7
TypeDef name:  taiDataHost
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiDataHostBase', u'taiDataHost_impl']
########################################################################
TypeDef len: 9
TypeDef name:  taiMenuAction
TypeDef type: class
TypeDef desc: object that holds specs for receiver for Action(taiAction*) callback
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: receiver
MemberDef type: QObject*
MemberDef name: member
MemberDef type: taString
########################################################################
TypeDef len: 7
TypeDef name:  taiMenu
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData', u'taiActions']
########################################################################
TypeDef len: 9
TypeDef name:  taiMethodData
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData']
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  taiField
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData']
########################################################################
TypeDef len: 7
TypeDef name:  taiItemPtrBase
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData']
########################################################################
TypeDef len: 9
TypeDef name:  iFieldEditDialog
TypeDef type: class
TypeDef desc: read/write only
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: txtText
MemberDef type: iTextEdit*
MemberDef name: btnOk
MemberDef type: QPushButton*
MemberDef desc: read/write only
MemberDef name: btnCancel
MemberDef type: QPushButton*
MemberDef desc: or close, if read only
MemberDef name: btnApply
MemberDef type: QPushButton*
MemberDef desc: writes it back to field
MemberDef name: btnRevert
MemberDef type: QPushButton*
MemberDef desc: gets back from field
MethodDef name: isReadOnly
MethodDef proto bool isReadOnly()
MethodDef name: setText
MethodDef proto void setText(const_QString_ref value)
MethodDef name: accept
MethodDef proto void accept()
MethodDef name: reject
MethodDef proto void reject()
MethodDef names [u'accept', u'isReadOnly', u'reject', u'setText']
########################################################################
TypeDef len: 9
TypeDef name:  taiDataHostBase
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject']
TypeDef children: [u'taiDataHost_impl']
########################################################################
TypeDef len: 9
TypeDef name:  taiDataHost_impl
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiDataHostBase']
TypeDef children: [u'taiDataHost']
########################################################################
TypeDef len: 7
TypeDef name:  DataLink_QObj
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: dl
MemberDef type: taiDataLink*
########################################################################
TypeDef len: 13
TypeDef name:  ISelectableHost
TypeDef type: class
TypeDef desc: interface on the controlling widget hosting ISelectable items
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
EnumDef name: OP_GOT_FOCUS
EnumDef val: OP_GOT_FOCUS
EnumDef name: OP_SELECTION_CHANGED
EnumDef val: OP_SELECTION_CHANGED
EnumDef name: OP_DESTROYING
EnumDef val: OP_DESTROYING
EnumDef names: [u'NotifyOp']
MethodDef name: curItem
MethodDef desc: convenience
MethodDef proto ISelectable_ptr curItem()
MethodDef name: setCurItem
MethodDef desc: virtual taiAction_List&amp; dynActions() {return dyn_actions;}
MethodDef proto void setCurItem(ISelectable* item, bool forceUpdate = false)
MethodDef name: clipHandlerObj
MethodDef desc: provided so client can connect to us as a ClipHandler (EditEnabled, EditAction only)
MethodDef proto QObject_ptr clipHandlerObj()
MethodDef name: hasMultiSelect
MethodDef desc: true if supports multi select
MethodDef proto bool hasMultiSelect()
MethodDef name: helperObj
MethodDef desc: for attaching slots
MethodDef proto SelectableHostHelper_ptr helperObj()
MethodDef name: mainWindow
MethodDef desc: returns main window we are embedded in
MethodDef proto iMainWindowViewer_ptr mainWindow()
MethodDef name: selectionChanging
MethodDef desc: you can use this to escape from sundry gui notifies to yourself (to avoid recursion)
MethodDef proto bool selectionChanging()
MethodDef name: selItems
MethodDef desc: currently selected items
MethodDef proto ISelectable_PtrList_ref selItems()
MethodDef name: widget
MethodDef desc: provides a gui parent for things like context menus
MethodDef proto QWidget_ptr widget()
MethodDef name: FillContextMenu
MethodDef desc: s/b called by desc class, to put dynaction items onto menu
MethodDef proto void FillContextMenu(taiActions_ptr menu)
MethodDef name: AddDynActions
MethodDef desc: add the dynamic guys to the given menu (note: FillContextMenu does this too)
MethodDef proto void AddDynActions(taiActions_ptr menu, int dyn_list, ISelectable::GuiContext gc_typ = ISelectable::GC_DEFAULT)
MethodDef name: SelectionChanging
MethodDef desc: if used, must be called in pairs, with true then false
MethodDef proto void SelectionChanging(bool begin, bool forced = true)
MethodDef name: ClearSelectedItems
MethodDef proto void ClearSelectedItems(bool forced = true)
MethodDef name: AddSelectedItem
MethodDef proto void AddSelectedItem(ISelectable* item, bool forced = true)
MethodDef name: RemoveSelectedItem
MethodDef desc: &apos;true&apos; if item was actually removed from (i.e. was in) list
MethodDef proto bool RemoveSelectedItem(ISelectable* item, bool forced = true)
MethodDef name: EditActionsEnabled
MethodDef desc: return enabled flags
MethodDef proto void EditActionsEnabled(int&amp; na)
MethodDef name: EditAction
MethodDef desc: perform the action
MethodDef proto void EditAction(int na, ISelectable::GuiContext gc_typ = ISelectable::GC_DEFAULT)
MethodDef name: DropEditAction
MethodDef desc: perform the action (from drop handler)
MethodDef proto void DropEditAction(int ea)
MethodDef name: Emit_GotFocusSignal
MethodDef desc: only signal external guys should call (when we or a parent get focus)
MethodDef proto void Emit_GotFocusSignal()
MethodDef name: Connect_SelectableHostNotifySignal
MethodDef desc: connects (or disconnects) a sink (ex iFrame) to the notify signal raised when sel changes (or gets focus, etc.)
MethodDef proto void Connect_SelectableHostNotifySignal(QObject* sink_obj, const char* sink_slot, bool discnct = false)
MethodDef name: Connect_SelectableHostItemRemovingSlot
MethodDef desc: connects (or disconnects) an optional ItemRemoving notification
MethodDef proto void Connect_SelectableHostItemRemovingSlot(QObject* src_obj, const char* src_signal, bool discnct = false)
MethodDef name: UpdateMethodsActionsForDrop
MethodDef desc: uses ctxt_ms and ctxt_item
MethodDef proto void UpdateMethodsActionsForDrop()
MethodDef name: ctxtMenu_destroyed
MethodDef proto void ctxtMenu_destroyed()
MethodDef names [u'AddDynActions', u'AddSelectedItem', u'ClearSelectedItems', u'Connect_SelectableHostItemRemovingSlot', u'Connect_SelectableHostNotifySignal', u'DropEditAction', u'EditAction', u'EditActionsEnabled', u'Emit_GotFocusSignal', u'FillContextMenu', u'RemoveSelectedItem', u'SelectionChanging', u'UpdateMethodsActionsForDrop', u'clipHandlerObj', u'ctxtMenu_destroyed', u'curItem', u'hasMultiSelect', u'helperObj', u'mainWindow', u'selItems', u'selectionChanging', u'setCurItem', u'widget']
########################################################################
TypeDef len: 9
TypeDef name:  iBaseClipWidgetAction
TypeDef type: class
TypeDef desc: for making drag/copy guys from a taBase instance (ex. see programs_qtso)
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: base
MethodDef desc: tooltip defaults to key_desc of the instance
MethodDef proto taBase_ptr base()
MethodDef names [u'base']
########################################################################
TypeDef len: 15
TypeDef name:  iSearchDialog
TypeDef type: class
TypeDef desc: externals search a project (or more)
TypeDef cats:, []
TypeDef opts:, [u'MULT_INHERIT']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient']
EnumDef name: SO_OBJ_NAME
EnumDef val: SO_OBJ_NAME
EnumDef: the name given to the object by the user
EnumDef name: SO_OBJ_TYPE
EnumDef val: SO_OBJ_TYPE
EnumDef: the type name
EnumDef name: SO_OBJ_DESC
EnumDef val: SO_OBJ_DESC
EnumDef: object description (where applicable), including full display name
EnumDef name: SO_MEMB_NAME
EnumDef val: SO_MEMB_NAME
EnumDef: the name of the member of an object
EnumDef name: SO_MEMB_VAL
EnumDef val: SO_MEMB_VAL
EnumDef: searches in the values of members, especially strings
EnumDef name: SO_ALL_MEMBS
EnumDef val: SO_ALL_MEMBS
EnumDef: searches in all members, otherwise excludes the members that are not typicaly shown according to current settings
EnumDef name: SO_TYPE_DESC
EnumDef val: SO_TYPE_DESC
EnumDef: searches in the type description information, including the description of the type of the object, and the description of the member (all of this information is hard-coded into the program)
EnumDef names: [u'SearchOptions']
MethodDef name: This
MethodDef desc: reference to the &apos;this&apos; pointer of the client object
MethodDef proto void_ptr This()
MethodDef name: GetTypeDef
MethodDef desc: typedef of the dlc
MethodDef proto TypeDef_ptr GetTypeDef()
MethodDef name: link
MethodDef proto taiDataLink_ptr link()
MethodDef name: GetDataTypeDef
MethodDef desc: convenience function, default gets data type from link
MethodDef proto TypeDef_ptr GetDataTypeDef()
MethodDef name: link_
MethodDef proto taDataLink_ptr link_()
MethodDef name: ignoreDataChanged
MethodDef desc: hidden guys can ignore changes (but they always get Destroyed)
MethodDef proto bool ignoreDataChanged()
MethodDef name: isDataView
MethodDef desc: true for dataviews
MethodDef proto bool isDataView()
MethodDef name: DataLinkDestroying
MethodDef desc: called by DataLink when destroying; it will remove datalink ref in dlc upon return
MethodDef proto void DataLinkDestroying(taDataLink* dl)
MethodDef name: DataDataChanged
MethodDef proto void DataDataChanged(taDataLink* dl, int dcr, void* op1, void* op2)
MethodDef name: IgnoredDataChanged
MethodDef desc: called instead if ignoreDataChanged was true
MethodDef proto void IgnoredDataChanged(taDataLink* dl, int dcr, void* op1, void* op2)
MethodDef names [u'DataDataChanged', u'DataLinkDestroying', u'GetDataTypeDef', u'GetTypeDef', u'IgnoredDataChanged', u'This', u'ignoreDataChanged', u'isDataView', u'link', u'link_']
########################################################################
TypeDef len: 11
TypeDef name:  IObjectSelectable
TypeDef type: class
TypeDef desc: specialized for taBase object items
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable']
TypeDef children: [u'T3DataView']
########################################################################
TypeDef len: 9
TypeDef name:  ISelectable_PtrList
TypeDef type: class
TypeDef desc: for selection lists
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: Type1
MethodDef desc: data type of 1st item
MethodDef proto TypeDef_ptr Type1(ISelectable::GuiContext gc_typ = ISelectable::GC_DEFAULT)
MethodDef name: CommonSubtype1N
MethodDef desc: greatest common data subtype of items 1-N
MethodDef proto TypeDef_ptr CommonSubtype1N(ISelectable::GuiContext gc_typ = ISelectable::GC_DEFAULT)
MethodDef name: CommonSubtype2N
MethodDef desc: greatest common data subtype of items 2-N
MethodDef proto TypeDef_ptr CommonSubtype2N(ISelectable::GuiContext gc_typ = ISelectable::GC_DEFAULT)
MethodDef names [u'CommonSubtype1N', u'CommonSubtype2N', u'Type1']
########################################################################
TypeDef len: 7
TypeDef name:  iToolBar_List
TypeDef type: class
TypeDef desc: each mainwin maintains its existent toolbars in this list
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  iTabView_PtrList
TypeDef type: class
TypeDef desc: dispatch to all
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: DataPanelDestroying
MethodDef desc: dispatch to all
MethodDef proto void DataPanelDestroying(iDataPanel* panel)
MethodDef names [u'DataPanelDestroying']
########################################################################
TypeDef len: 15
TypeDef name:  taTime
TypeDef type: class
TypeDef desc: raw time information
TypeDef cats:, [u'Program']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: tot
MemberDef type: double
MemberDef desc: total time ticks (all clock ticks on the CPU for all processes -- wall-clock time)
MethodDef name: TicksToSecs
MethodDef desc: convert ticks to seconds
MethodDef proto double TicksToSecs(double ticks)
MethodDef name: GetUsrSecs
MethodDef desc: get usr time as seconds and fractions thereof
MethodDef proto double GetUsrSecs()
MethodDef name: GetSysSecs
MethodDef desc: get sys time as seconds and fractions thereof
MethodDef proto double GetSysSecs()
MethodDef name: GetTotSecs
MethodDef desc: get tot time as seconds and fractions thereof
MethodDef proto double GetTotSecs()
MethodDef name: ZeroTime
MethodDef desc: zero out the times
MethodDef proto void ZeroTime()
MethodDef name: GetTime
MethodDef desc: get current clock timing information, for computing difference at later point in time
MethodDef proto void GetTime()
MethodDef name: GetString
MethodDef desc: get string output as seconds and fractions of seconds, using given length and precision values for the time values
MethodDef proto taString GetString(int len = 15, int prec = 7)
MethodDef names [u'GetString', u'GetSysSecs', u'GetTime', u'GetTotSecs', u'GetUsrSecs', u'TicksToSecs', u'ZeroTime']
########################################################################
TypeDef len: 15
TypeDef name:  TimeUsed
TypeDef type: class
TypeDef desc: computes amount of time used for a given process: start the timer at the start, then do EndTimer and it computes the amount used
TypeDef cats:, [u'Program']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: s_used
MemberDef type: double
MemberDef opts [u'SHOW', u'GUI_READ_ONLY']
MemberDef cats []
MemberDef desc: total number of seconds used
MemberDef name: n_used
MemberDef type: int
MemberDef opts [u'SHOW', u'GUI_READ_ONLY']
MemberDef cats []
MemberDef desc: number of individual times the timer has been used without resetting accumulation
MethodDef name: StartTimer
MethodDef desc: record the current time as the starting time, and optionally reset the time used information
MethodDef proto void StartTimer(bool reset_used = true)
MethodDef name: EndTimer
MethodDef desc: record the current time as the ending time, and compute difference as the time used
MethodDef proto void EndTimer()
MethodDef name: ResetUsed
MethodDef desc: reset time used information
MethodDef proto void ResetUsed()
MethodDef name: GetString
MethodDef desc: get string output of time used as seconds and fractions of seconds
MethodDef proto taString GetString()
MethodDef names [u'EndTimer', u'GetString', u'ResetUsed', u'StartTimer']
########################################################################
TypeDef len: 15
TypeDef name:  TimeUsedHR
TypeDef type: class
TypeDef desc: computes amount of time used (in high resolution) for a given process: start the timer at the start, then do EndTimer and it computes the amount used
TypeDef cats:, [u'Program']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: s_used
MemberDef type: double
MemberDef opts [u'SHOW', u'GUI_READ_ONLY']
MemberDef cats []
MemberDef desc: total number of seconds used
MemberDef name: n_used
MemberDef type: int
MemberDef opts [u'SHOW', u'GUI_READ_ONLY']
MemberDef cats []
MemberDef desc: number of individual times the timer has been used without resetting accumulation
MethodDef name: StartTimer
MethodDef desc: record the current time as the starting time, and optionally reset the time used information
MethodDef proto void StartTimer(bool reset_used = true)
MethodDef name: EndTimer
MethodDef desc: record the current time as the ending time, and compute difference as the time used
MethodDef proto void EndTimer()
MethodDef name: ResetUsed
MethodDef desc: reset time used information
MethodDef proto void ResetUsed()
MethodDef names [u'EndTimer', u'ResetUsed', u'StartTimer']
########################################################################
TypeDef len: 15
TypeDef name:  taDateTime
TypeDef type: class
TypeDef desc: represents date and time information -- for calendar management and date fields in data tables, etc (use int value conversion for secs since 1 Jan 1970 UTC)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'STEM_BASE', u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: secs_1jan_1970
MemberDef type: int64_t
MemberDef desc: internal storage unit: seconds since january 1st, 1970, UTC
MethodDef name: isNull
MethodDef proto bool isNull()
MethodDef name: isValid
MethodDef proto bool isValid()
MethodDef name: toTime_t
MethodDef proto uint toTime_t()
MethodDef name: setTime_t
MethodDef proto void setTime_t(uint secsSince1Jan1970UTC)
MethodDef name: toString
MethodDef desc: convert to a string representation: format is: d=day number, dd=d with leading zero, ddd=short day name, dddd=long day name, M=month number, MM=M with leading zero, MMM=short month name, MMMM=long month name, yy=2 digit year, yyyy=4 digit year, h=hour, hh=hour with leading zero, m=minute, mm=minute with leading zero, s=second, ss=leading zero, AP=AM or PM, ap=am or pm
MethodDef proto taString toString(const taString&amp; format)
MethodDef name: fromString
MethodDef desc: convert to a string representation: if format is non-empty, format is: d=day number, dd=d with leading zero, ddd=short day name, dddd=long day name, M=month number, MM=M with leading zero, MMM=short month name, MMMM=long month name, yy=2 digit year, yyyy=4 digit year, h=hour, hh=hour with leading zero, m=minute, mm=minute with leading zero, s=second, ss=leading zero, AP=AM or PM, ap=am or pm
MethodDef proto void fromString(const taString&amp; s, const taString&amp; format)
MethodDef name: addSecs
MethodDef proto void addSecs(int secs)
MethodDef name: addMinutes
MethodDef proto void addMinutes(int mins)
MethodDef name: addHours
MethodDef proto void addHours(int hours)
MethodDef name: addDays
MethodDef proto void addDays(int days)
MethodDef name: addMonths
MethodDef proto void addMonths(int months)
MethodDef name: addYears
MethodDef proto void addYears(int years)
MethodDef name: second
MethodDef proto int second()
MethodDef name: minute
MethodDef proto int minute()
MethodDef name: hour
MethodDef proto int hour()
MethodDef name: day
MethodDef proto int day()
MethodDef name: month
MethodDef proto int month()
MethodDef name: year
MethodDef proto int year()
MethodDef name: dayOfWeek
MethodDef proto int dayOfWeek()
MethodDef name: dayOfYear
MethodDef proto int dayOfYear()
MethodDef name: daysInMonth
MethodDef proto int daysInMonth()
MethodDef name: daysInYear
MethodDef proto int daysInYear()
MethodDef name: setDate
MethodDef proto bool setDate(int year, int month, int day)
MethodDef name: currentDateTime
MethodDef proto void currentDateTime()
MethodDef name: toLocalTime
MethodDef proto void toLocalTime()
MethodDef name: toUTC
MethodDef proto void toUTC()
MethodDef name: daysTo
MethodDef proto int daysTo(const taDateTime&amp; dt)
MethodDef name: secsTo
MethodDef proto int secsTo(const taDateTime&amp; dt)
MethodDef name: fmTimeToString
MethodDef desc: convert from an int time input to a formatted string output. format is: d=day number, dd=d with leading zero, ddd=short day name, dddd=long day name, M=month number, MM=M with leading zero, MMM=short month name, MMMM=long month name, yy=2 digit year, yyyy=4 digit year, h=hour, hh=hour with leading zero, m=minute, mm=minute with leading zero, s=second, ss=leading zero, AP=AM or PM, ap=am or pm
MethodDef proto taString fmTimeToString(uint secsSince1Jan1970UTC, const taString&amp; format)
MethodDef name: fmDateToTime_t
MethodDef desc: get a time_t value (secs since Jan 1, 1970) from a date
MethodDef proto uint fmDateToTime_t(int year, int month, int day)
MethodDef name: fmStringToTime_t
MethodDef desc: get a time_t value (secs since Jan 1, 1970) from a date string: if format is empty, default conversion is used; format is: d=day number, dd=d with leading zero, ddd=short day name, dddd=long day name, M=month number, MM=M with leading zero, MMM=short month name, MMMM=long month name, yy=2 digit year, yyyy=4 digit year, h=hour, hh=hour with leading zero, m=minute, mm=minute with leading zero, s=second, ss=leading zero, AP=AM or PM, ap=am or pm
MethodDef proto uint fmStringToTime_t(const taString&amp; s, const taString&amp; format)
MethodDef name: daysBetween_Time_t
MethodDef desc: compute number of days between two time_t values (seconds since january 1st, 1970, UTC)
MethodDef proto int daysBetween_Time_t(uint st_time, uint ed_time)
MethodDef name: longDayName
MethodDef proto taString longDayName(int weekday)
MethodDef name: longMonthName
MethodDef proto taString longMonthName(int month)
MethodDef name: shortDayName
MethodDef proto taString shortDayName(int weekday)
MethodDef name: shortMonthName
MethodDef proto taString shortMonthName(int month)
MethodDef names [u'addDays', u'addHours', u'addMinutes', u'addMonths', u'addSecs', u'addYears', u'currentDateTime', u'day', u'dayOfWeek', u'dayOfYear', u'daysBetween_Time_t', u'daysInMonth', u'daysInYear', u'daysTo', u'fmDateToTime_t', u'fmStringToTime_t', u'fmTimeToString', u'fromString', u'hour', u'isNull', u'isValid', u'longDayName', u'longMonthName', u'minute', u'month', u'second', u'secsTo', u'setDate', u'setTime_t', u'shortDayName', u'shortMonthName', u'toLocalTime', u'toString', u'toTime_t', u'toUTC', u'year']
########################################################################
TypeDef len: 15
TypeDef name:  FunLookup
TypeDef type: class
TypeDef desc: function lookup for non-computable functions and optimization
TypeDef cats:, [u'Math']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'float_Array']
MemberDef name: x_range
MemberDef type: MinMaxRange
MemberDef desc: range of the x axis
MemberDef name: res
MemberDef type: float
MemberDef desc: resolution of the function
MemberDef name: res_inv
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: 1/res: speeds computation because multiplies are faster than divides
MethodDef name: Yval
MethodDef desc: get y value at given x value (no interpolation)
MethodDef proto float Yval(float x)
MethodDef name: Xval
MethodDef desc: get x value for given index position within list
MethodDef proto float Xval(int idx)
MethodDef name: Eval
MethodDef proto float Eval(float x)
MethodDef name: AllocForRange
MethodDef desc: allocate values for given range and resolution
MethodDef proto void AllocForRange()
MethodDef name: Plot
MethodDef desc: generate file for plotting function
MethodDef proto void Plot(ostream&amp; strm)
MethodDef name: Convolve
MethodDef desc: convolve source array with convolve array and put result here
MethodDef proto void Convolve(const FunLookup&amp; src, const FunLookup&amp; con)
MethodDef names [u'AllocForRange', u'Convolve', u'Eval', u'Plot', u'Xval', u'Yval']
########################################################################
TypeDef len: 15
TypeDef name:  FunLookupND
TypeDef type: class
TypeDef desc: n-dimensional function lookup: function is defined for n_dims inputs and produces a corresponding interpolated output
TypeDef cats:, [u'Math']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: n_dims
MemberDef type: int
MemberDef desc: number of dimensions
MemberDef name: mesh_pts
MemberDef type: float_Array
MemberDef desc: the n-dimensional mesh of function values at specific points in n_dims space
MemberDef name: mesh_dim_sz
MemberDef type: int_Array
MemberDef desc: [n_dims] number of points along each dimension
MemberDef name: deltas
MemberDef type: float_Array
MemberDef desc: [n_dims] size of the mesh increment for each dimension
MemberDef name: range_mins
MemberDef type: float_Array
MemberDef desc: [n_dims] minimum dimension values for each dimension
MemberDef name: range_maxs
MemberDef type: float_Array
MemberDef desc: [n_dims] maximum dimension values for each dimension
MethodDef name: EvalArray
MethodDef desc: evaluate function given an n_dims array of dimension input values (index map for mapping the array onto internally-stored dimensions if non-NULL)
MethodDef proto float EvalArray(float* x, int* idx_map = NULL)
MethodDef name: EvalArgs
MethodDef desc: evaluate function given n_dims supplied values as args (in direct correspondence with internally-stored dimensions)
MethodDef proto float EvalArgs(float d0, float d1 = 0.0f, float d2 = 0.0f, float d3 = 0.0f, float d4 = 0.0f, float d5 = 0.0f, float d6 = 0.0f, float d7 = 0.0f, float d8 = 0.0f, float d9 = 0.0f)
MethodDef opts [u'BUTTON']
MethodDef name: LoadTable
MethodDef desc: load a lookup table of function values at specific points in n_dims space
MethodDef proto void LoadTable(istream&amp; is)
MethodDef opts [u'BUTTON']
MethodDef name: ListTable
MethodDef desc: output the lookup table in text format
MethodDef proto void ListTable(ostream&amp; strm = cout)
MethodDef opts [u'BUTTON', u'ARGC_0', u'CONFIRM']
MethodDef name: ShiftNorm
MethodDef desc: normalize the function values via an additive shift to achieve overall desired mean
MethodDef proto void ShiftNorm(float desired_mean)
MethodDef opts [u'BUTTON']
MethodDef name: MulNorm
MethodDef desc: normalize the function values by multiplying positive and negative values by separate scaling factors to achieve desired mean
MethodDef proto void MulNorm(float desired_mean)
MethodDef opts [u'BUTTON']
MethodDef names [u'EvalArgs', u'EvalArray', u'ListTable', u'LoadTable', u'MulNorm', u'ShiftNorm']
########################################################################
TypeDef len: 15
TypeDef name:  DirectoryCatalog
TypeDef type: class
TypeDef desc: a DirectoryCatalog provides a list of files in a directory
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'DataBlock', u'DataBlock_Idx']
EnumDef name: CO_Files
EnumDef val: CO_Files
EnumDef: files
EnumDef name: CO_Dirs
EnumDef val: CO_Dirs
EnumDef: directories
EnumDef names: [u'CatalogOptions']
MemberDef name: options
MemberDef type: DirectoryCatalog::CatalogOptions
MemberDef desc: what items to catalog -- usually one or the other
MemberDef name: filters
MemberDef type: taString
MemberDef desc: ; separated list of * or ? filters, ex. &apos;*.txt;*.doc&apos;
MemberDef name: directory
MemberDef type: taString
MemberDef desc: path of directory where the files are
########################################################################
TypeDef len: 17
TypeDef name:  ImageReader
TypeDef type: class
TypeDef desc: provides ability to read image files, sequential only
TypeDef cats:, [u'Data']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'DataBlock']
EnumDef name: chan_img
EnumDef val: chan_img
EnumDef: the entire image matrix, [h, w, comps]
EnumDef name: CM_GRAYSCALE
EnumDef val: CM_GRAYSCALE
EnumDef: read images in b&amp;w only, 1 channel: bw (HxW byte array)
EnumDef name: CM_RGB
EnumDef val: CM_RGB
EnumDef: RGB mode, 3 channels: r, g, b (H x W x r=0,g=1,b=2 byte array)
EnumDef name: IF_AUTO
EnumDef val: IF_AUTO
EnumDef: try to determine automatically, ex. from filename, or file header
EnumDef name: IF_JPEG
EnumDef val: IF_JPEG
EnumDef names: [u'Channels', u'ColorMode', u'ImageFormat']
MemberDef name: color_mode
MemberDef type: ImageReader::ColorMode
MemberDef desc: color mode to use for reading
MemberDef name: img_format
MemberDef type: ImageReader::ImageFormat
MemberDef desc: image format to use
MemberDef name: fname
MemberDef type: taString
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: file we are to read
MemberDef name: cur_img_format
MemberDef type: ImageReader::ImageFormat
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: image format of current image
MemberDef name: img_size
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: size of current image
MethodDef name: sourceChannelCount
MethodDef desc: depends on mode
MethodDef proto int sourceChannelCount()
MethodDef name: sourceChannelName
MethodDef desc: bw || r, g, b
MethodDef proto const_taString sourceChannelName(int chan)
MethodDef name: ReadItem_impl
MethodDef desc: actually does the read
MethodDef proto bool ReadItem_impl()
MethodDef name: ReadOpen_impl
MethodDef proto void ReadOpen_impl(bool&amp; ok)
MethodDef name: ReadClose_impl
MethodDef proto void ReadClose_impl()
MethodDef names [u'ReadClose_impl', u'ReadItem_impl', u'ReadOpen_impl', u'sourceChannelCount', u'sourceChannelName']
########################################################################
TypeDef len: 9
TypeDef name:  ColorMatrixGrid
TypeDef type: class
TypeDef desc: a grid for visually depicting and/or editing grid data (usually 2d)
TypeDef cats:, []
TypeDef opts:, []
MethodDef name: cellSize
MethodDef desc: h/w of each grid square; 0=auto
MethodDef proto int cellSize()
MethodDef name: setCellSize
MethodDef proto void setCellSize(int value)
MethodDef names [u'cellSize', u'setCellSize']
########################################################################
TypeDef len: 5
TypeDef name:  SoNode
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 5
TypeDef name:  SoSeparator
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 19
TypeDef name:  T3DataView
TypeDef type: class
TypeDef desc: base class for 3d-based DataView objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MULT_INHERIT', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView']
TypeDef children: [u'T3DataViewPar', u'DataColView', u'GraphAxisBase', u'VEBodyView', u'VEStaticView', u'UnitView', u'NetViewObjView']
EnumDef name: DNF_IS_FOLDER
EnumDef val: DNF_IS_FOLDER
EnumDef: true for list/group folder nodes (note: does *not* indicate whether item can contain other things or not)
EnumDef name: DNF_IS_ALIAS
EnumDef val: DNF_IS_ALIAS
EnumDef: true after children have been created (after clicking on node)
EnumDef name: DNF_UPDATE_NAME
EnumDef val: DNF_UPDATE_NAME
EnumDef: typically for list items, update the visual name (tree, tab, etc.) after item edited
EnumDef name: DNF_CAN_BROWSE
EnumDef val: DNF_CAN_BROWSE
EnumDef: can be a new browser root
EnumDef name: DNF_CAN_DRAG
EnumDef val: DNF_CAN_DRAG
EnumDef: 16 can allow drags
EnumDef name: DNF_NO_CAN_DROP
EnumDef val: DNF_NO_CAN_DROP
EnumDef: 32 cannot accept drops
EnumDef name: DNF_IS_MEMBER
EnumDef val: DNF_IS_MEMBER
EnumDef: 64 true for members (and root), not for list/group items -- helps node configure edit ops
EnumDef name: DNF_IS_LIST_NODE
EnumDef val: DNF_IS_LIST_NODE
EnumDef: true for nodes in a list view (in panel, not on tree)
EnumDef names: [u'DataNodeFlags']
MemberDef name: flags
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: any of T3DataViewFlags TODO: tbd
MemberDef name: m_transform
MemberDef type: FloatTransform*
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: transform, created only if not unity
MethodDef name: own_link
MethodDef desc: owner item&apos;s link -- this is the *eff_data* parent (not the gui parent)
MethodDef proto taiDataLink_ptr own_link(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: par
MethodDef desc: gui parent, if any override taiDataLink* par_link() const; // from parent data
MethodDef proto ISelectable_ptr par()
MethodDef name: par_link
MethodDef desc: parent item&apos;s link -- this is the *gui* parent (not the data parent/owner)
MethodDef proto taiDataLink_ptr par_link()
MethodDef name: viewLink
MethodDef desc: only defined for T3 guys data of the link
MethodDef proto taiDataLink_ptr viewLink()
MethodDef name: effLink
MethodDef desc: for trees and things like layers, we just just use the data, for things like graphs (where view==data) we use the view itself (override shType)
MethodDef proto taiDataLink_ptr effLink(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: clipParLink
MethodDef desc: for tree stuff, we use the gui parent for clip ops; for t3 we use the eff_data owner not par_link
MethodDef proto taiDataLink_ptr clipParLink(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: par_md
MethodDef desc: eff_data parent item&apos;s (if any) md
MethodDef proto MemberDef_ptr par_md()
MethodDef name: host
MethodDef proto ISelectableHost_ptr host()
MethodDef name: shType
MethodDef desc: mediates menu handling, and default source for clip ops
MethodDef proto GuiContext shType()
MethodDef name: taData
MethodDef desc: if the eff_data is taBase, this returns it
MethodDef proto taBase_ptr taData(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: widget
MethodDef desc: gets from host
MethodDef proto QWidget_ptr widget()
MethodDef name: clipHandlerObj
MethodDef desc: shortcut for host()-&gt;clipHanderObj();
MethodDef proto QObject_ptr clipHandlerObj()
MethodDef name: GetEffDataTypeDef
MethodDef desc: gets it from effLink
MethodDef proto TypeDef_ptr GetEffDataTypeDef(ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: EditAction_
MethodDef desc: do the indicated edit action (called from browser or list view); normally implement the _impl
MethodDef proto int EditAction_(ISelectable_PtrList&amp; sel_items, int ea, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: FillContextMenu
MethodDef desc: for multi or single (normally implement the _impl)
MethodDef proto void FillContextMenu(ISelectable_PtrList&amp; sel_items, taiActions_ptr menu, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: GetClipData
MethodDef desc: works for single or multi; normally not overridden
MethodDef proto taiClipData_ptr GetClipData(const ISelectable_PtrList&amp; sel_items, int src_edit_action, bool for_drag, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: GetClipDataSingle
MethodDef proto taiClipData_ptr GetClipDataSingle(int src_edit_action, bool for_drag, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: GetClipDataMulti
MethodDef desc: only needed if multi is handled
MethodDef proto taiClipData_ptr GetClipDataMulti(const ISelectable_PtrList&amp; sel_items, int src_edit_action, bool for_drag, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: QueryEditActions_
MethodDef desc: called to get edit items available on clipboard for the sel_items
MethodDef proto int QueryEditActions_(const ISelectable_PtrList&amp; sel_items, ISelectable::GuiContext sh_typ = GC_DEFAULT)
MethodDef name: RefUnref
MethodDef desc: ref&apos;ed/unrefed in select lists etc.; optional, and can be used for lifetime mgt; returns count after operation
MethodDef proto int RefUnref(bool ref)
MethodDef name: bgColor
MethodDef desc: high-level items can optionally supply a bg color, for when they are singles
MethodDef proto const_iColor bgColor(bool&amp; ok)
MethodDef name: hasChildren
MethodDef proto bool hasChildren()
MethodDef name: hasViewProperties
MethodDef desc: true if this item has editable view properties, and should be shown
MethodDef proto bool hasViewProperties()
MethodDef name: expandable
MethodDef proto bool expandable()
MethodDef name: setExpandable
MethodDef proto void setExpandable(bool na)
MethodDef name: transform
MethodDef desc: transform, in Inventor coords
MethodDef proto FloatTransform_ptr transform(bool auto_create = false)
MethodDef name: node_so
MethodDef proto T3Node_ptr node_so()
MethodDef name: root
MethodDef proto T3DataViewRoot_ptr root()
MethodDef name: GetFrame
MethodDef desc: get the T3DataViewFrame that owns us
MethodDef proto T3DataViewFrame_ptr GetFrame()
MethodDef name: AddRemoveChildNode
MethodDef desc: can be used for manually using non-default T3Node items in a child; add in Pre_impl, remove in Clear_impl
MethodDef proto void AddRemoveChildNode(SoNode_ptr node, bool adding)
MethodDef name: BuildAll
MethodDef desc: subclass-dependent operation -- reinvoked after major update -- builds any sub-dataview objects, but not the corresponding So guys (which is done in render)
MethodDef proto void BuildAll()
MethodDef name: OnWindowBind
MethodDef desc: called after the viewer creates/fills the main window (for dataviews embedded in main viewer only), or when DataView added to existing viewer
MethodDef proto void OnWindowBind(iT3DataViewFrame* vw)
MethodDef name: ReInit
MethodDef desc: perform a reinitialization, particularly of visual state -- overload _impl
MethodDef proto void ReInit()
MethodDef name: ViewProperties
MethodDef desc: show the view properties for this object
MethodDef proto void ViewProperties()
MethodDef opts [u'MENU', u'VIEWMENU']
MethodDef names [u'AddRemoveChildNode', u'BuildAll', u'EditAction_', u'FillContextMenu', u'GetClipData', u'GetClipDataMulti', u'GetClipDataSingle', u'GetEffDataTypeDef', u'GetFrame', u'OnWindowBind', u'QueryEditActions_', u'ReInit', u'RefUnref', u'ViewProperties', u'bgColor', u'clipHandlerObj', u'clipParLink', u'effLink', u'expandable', u'hasChildren', u'hasViewProperties', u'host', u'node_so', u'own_link', u'par', u'par_link', u'par_md', u'root', u'setExpandable', u'shType', u'taData', u'transform', u'viewLink', u'widget']
########################################################################
TypeDef len: 15
TypeDef name:  T3DataViewPar
TypeDef type: class
TypeDef desc: T3DataView that has child T3DataView&apos;s
TypeDef cats:, [u'Display']
TypeDef opts:, [u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView']
TypeDef children: [u'T3DataViewRoot', u'T3DataViewMain', u'VEObjectView', u'VESpaceView', u'nvDataView']
MemberDef name: children
MemberDef type: T3DataView_List
MemberDef opts [u'SHOW', u'READ_ONLY', u'SHOW_TREE']
MemberDef cats []
########################################################################
TypeDef len: 13
TypeDef name:  T3DataViewRoot
TypeDef type: class
TypeDef desc: Root item for a viewwidget type
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar']
MemberDef name: host
MemberDef type: ISelectableHost*
MemberDef desc: ss/b set by owner
########################################################################
TypeDef len: 15
TypeDef name:  T3DataViewMain
TypeDef type: class
TypeDef desc: base class for major self-contained view objects, which can be independently positioned etc (main classes under T3DataViewRoot)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar']
TypeDef children: [u'VEWorldView', u'DataTableView', u'NetView']
MemberDef name: main_xform
MemberDef type: FloatTransform
MemberDef desc: this is the overall transform (position, scale, rotation) for this view object (typically can be adjusted by view&apos;s transform dragbox)
########################################################################
TypeDef len: 11
TypeDef name:  T3DataView_List
TypeDef type: class
TypeDef desc: find DataView guy with data() == dat (fills in its index in list), returns NULL &amp; idx=-1 for not found
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'DataView_List']
MethodDef name: FindData
MethodDef desc: find DataView guy with data() == dat (fills in its index in list), returns NULL &amp; idx=-1 for not found
MethodDef proto T3DataView_ptr FindData(taBase* dat, int&amp; idx)
MethodDef names [u'FindData']
########################################################################
TypeDef len: 15
TypeDef name:  VEWorldView
TypeDef type: class
TypeDef desc: a virtual environment world viewer
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'T3DataViewMain']
MemberDef name: display_on
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: &apos;true&apos; if display should be updated
MemberDef name: drag_objs
MemberDef type: bool
MemberDef desc: allow user to drag/rotate/rescale objects
MethodDef name: caption
MethodDef desc: what to show in viewer
MethodDef proto const_taString caption()
MethodDef name: World
MethodDef proto VEWorld_ptr World()
MethodDef name: SetWorld
MethodDef proto void SetWorld(VEWorld* wl)
MethodDef name: InitDisplay
MethodDef desc: does a hard reset on the display, reinitializing variables etc. Note does NOT do Updatedisplay -- that is a separate step
MethodDef proto void InitDisplay(bool init_panel = true)
MethodDef name: UpdateDisplay
MethodDef desc: full re-render of the display (generally calls Render_impl)
MethodDef proto void UpdateDisplay(bool update_panel = true)
MethodDef name: InitPanel
MethodDef desc: lets panel init itself after struct changes
MethodDef proto void InitPanel()
MethodDef name: UpdatePanel
MethodDef desc: after changes to props
MethodDef proto void UpdatePanel()
MethodDef name: SetupCameras
MethodDef desc: configure the cameras during rendering -- called by Render_impl
MethodDef proto void SetupCameras()
MethodDef name: CreateLights
MethodDef desc: create the lights during render_pre
MethodDef proto void CreateLights()
MethodDef name: CreateTextures
MethodDef desc: create the textures during render_pre
MethodDef proto void CreateTextures()
MethodDef name: SetupLights
MethodDef desc: configure the lights during rendering -- called by Render_impl
MethodDef proto void SetupLights()
MethodDef name: GetCameraImage
MethodDef desc: get the output of the given camera number (currently 0 or 1)
MethodDef proto QImage GetCameraImage(int cam_no)
MethodDef name: isVisible
MethodDef desc: gui_active, mapped and display_on
MethodDef proto bool isVisible()
MethodDef name: OnWindowBind_impl
MethodDef proto void OnWindowBind_impl(iT3DataViewFrame* vw)
MethodDef names [u'CreateLights', u'CreateTextures', u'GetCameraImage', u'InitDisplay', u'InitPanel', u'OnWindowBind_impl', u'SetWorld', u'SetupCameras', u'SetupLights', u'UpdateDisplay', u'UpdatePanel', u'World', u'caption', u'isVisible']
########################################################################
TypeDef len: 15
TypeDef name:  T3DataViewer
TypeDef type: class
TypeDef desc: top-level taDataViewer object that contains one 3D data view of multiple objects
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DEF_NAME_STYLE_1', u'DEF_NAME_ROOT_T3Frames', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'DataViewer', u'FrameViewer']
MemberDef name: frames
MemberDef type: T3DataViewFrame_List
MethodDef name: GetBlankOrNewT3DataViewFrame
MethodDef desc: gets the first blank, or a new, frame, in the default proj browser for the obj -- used by all the view-creating routines for various viewable objs (tables, nets, etc.)
MethodDef proto T3DataViewFrame_ptr GetBlankOrNewT3DataViewFrame(taBase* obj)
MethodDef name: FindRootViewOfData
MethodDef desc: looks for a root view of the data, returns it if found; useful to check for existing view before adding a new one
MethodDef proto T3DataView_ptr FindRootViewOfData(taBase* data)
MethodDef name: FirstEmptyT3DataViewFrame
MethodDef desc: find the first frame with no contents (to avoid making a new one)
MethodDef proto T3DataViewFrame_ptr FirstEmptyT3DataViewFrame()
MethodDef name: NewT3DataViewFrame
MethodDef desc: create and map a new frame
MethodDef proto T3DataViewFrame_ptr NewT3DataViewFrame()
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_CONTEXT']
MethodDef name: FrameChanged
MethodDef desc: called by frame if changes, we update names
MethodDef proto void FrameChanged(T3DataViewFrame* frame)
MethodDef names [u'FindRootViewOfData', u'FirstEmptyT3DataViewFrame', u'FrameChanged', u'GetBlankOrNewT3DataViewFrame', u'NewT3DataViewFrame']
########################################################################
TypeDef len: 7
TypeDef name:  t3Misc
TypeDef type: class
TypeDef desc: global params and funcs for T3 viewing system
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 11
TypeDef name:  T3ExaminerViewer
TypeDef type: class
TypeDef desc: get my owning frame, from t3vw
TypeDef cats:, []
TypeDef opts:, [u'MULT_INHERIT']
MemberDef name: t3vw
MemberDef type: iT3ViewspaceWidget*
MethodDef name: GetFrame
MethodDef desc: get my owning frame, from t3vw
MethodDef proto T3DataViewFrame_ptr GetFrame()
MethodDef name: viewAll
MethodDef desc: make this actually fill the damn screen!
MethodDef proto void viewAll()
MethodDef name: saveHomePosition
MethodDef proto void saveHomePosition()
MethodDef name: resetToHomePosition
MethodDef desc: use our saved values in frame dude
MethodDef proto void resetToHomePosition()
MethodDef name: interactbuttonClicked
MethodDef proto void interactbuttonClicked()
MethodDef name: viewbuttonClicked
MethodDef proto void viewbuttonClicked()
MethodDef name: homebuttonClicked
MethodDef proto void homebuttonClicked()
MethodDef name: sethomebuttonClicked
MethodDef proto void sethomebuttonClicked()
MethodDef name: viewallbuttonClicked
MethodDef proto void viewallbuttonClicked()
MethodDef name: seekbuttonClicked
MethodDef proto void seekbuttonClicked()
MethodDef name: snapshotbuttonClicked
MethodDef proto void snapshotbuttonClicked()
MethodDef name: printbuttonClicked
MethodDef proto void printbuttonClicked()
MethodDef names [u'GetFrame', u'homebuttonClicked', u'interactbuttonClicked', u'printbuttonClicked', u'resetToHomePosition', u'saveHomePosition', u'seekbuttonClicked', u'sethomebuttonClicked', u'snapshotbuttonClicked', u'viewAll', u'viewallbuttonClicked', u'viewbuttonClicked']
########################################################################
TypeDef len: 7
TypeDef name:  T3DataView_PtrList
TypeDef type: class
TypeDef desc: for selection lists, aux lists, etc.
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 9
TypeDef name:  T3DataViewFrame_List
TypeDef type: class
TypeDef cats:, [u'Display']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'NO_EXPAND_ALL', u'INSTANCE']
TypeDef parents: [u'DataView_List', u'DataViewer_List']
########################################################################
TypeDef len: 7
TypeDef name:  iTabWidget
TypeDef type: class
TypeDef desc: IGNORE
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 17
TypeDef name:  DataColView
TypeDef type: class
TypeDef desc: base specification for the display of data columns
TypeDef cats:, [u'Display']
TypeDef opts:, [u'SCOPE_DataTableView', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView']
TypeDef children: [u'GridColView', u'GraphColView']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of column this guy is associated with
MemberDef name: visible
MemberDef type: bool
MemberDef desc: is this column visible in display?
MethodDef name: dataCol
MethodDef proto DataCol_ptr dataCol()
MethodDef name: setDataCol
MethodDef proto void setDataCol(DataCol* value, bool first_time = false)
MethodDef name: isVisible
MethodDef desc: bakes in check for datacol
MethodDef proto bool isVisible()
MethodDef name: Hide
MethodDef desc: set this column to be invisible
MethodDef proto void Hide()
MethodDef opts [u'BUTTON', u'VIEWMENU']
MethodDef names [u'Hide', u'dataCol', u'isVisible', u'setDataCol']
########################################################################
TypeDef len: 17
TypeDef name:  DataTableView
TypeDef type: class
TypeDef desc: base class of grid and graph views
TypeDef cats:, [u'Display']
TypeDef opts:, [u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'T3DataViewMain']
TypeDef children: [u'GraphTableView', u'GridTableView']
MemberDef name: view_rows
MemberDef type: int
MemberDef desc: maximum number of rows visible
MemberDef name: view_range
MemberDef type: MinMaxInt
MemberDef desc: range of visible rows (max is the last row visible, not the last+1; range = view_rows-1)
MemberDef name: display_on
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: &apos;true&apos; if display should be updated
MemberDef name: manip_ctrl_on
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: display the manipulation controls on objects for positioning etc
MethodDef name: caption
MethodDef desc: what to show in viewer
MethodDef proto const_taString caption()
MethodDef name: dataTable
MethodDef proto DataTable_ptr dataTable()
MethodDef name: setDataTable
MethodDef desc: build the view from the given table
MethodDef proto void setDataTable(DataTable* dt)
MethodDef opts [u'MENU', u'NO_NULL']
MethodDef name: setDisplay
MethodDef desc: use this to change display_on
MethodDef proto void setDisplay(bool value)
MethodDef name: rows
MethodDef proto int rows()
MethodDef name: isVisible
MethodDef desc: gui_active, mapped and display_on
MethodDef proto bool isVisible()
MethodDef name: colView
MethodDef proto DataColView_ptr colView(int i)
MethodDef name: colViewCount
MethodDef desc: ///////////////////////////////////////////
MethodDef proto int colViewCount()
MethodDef name: InitDisplay
MethodDef desc: does a hard reset on the display, reinitializing variables etc. Note does NOT do Updatedisplay -- that is a separate step
MethodDef proto void InitDisplay(bool init_panel = true)
MethodDef name: UpdateDisplay
MethodDef desc: full re-render of the display (generally calls Render_impl)
MethodDef proto void UpdateDisplay(bool update_panel = true)
MethodDef name: InitPanel
MethodDef desc: lets panel init itself after struct changes
MethodDef proto void InitPanel()
MethodDef name: UpdatePanel
MethodDef desc: after changes to props
MethodDef proto void UpdatePanel()
MethodDef name: ClearData
MethodDef desc: Clear the display and the data
MethodDef proto void ClearData()
MethodDef name: ViewRow_At
MethodDef desc: start viewing at indicated viewrange value
MethodDef proto void ViewRow_At(int start)
MethodDef names [u'ClearData', u'InitDisplay', u'InitPanel', u'UpdateDisplay', u'UpdatePanel', u'ViewRow_At', u'caption', u'colView', u'colViewCount', u'dataTable', u'isVisible', u'rows', u'setDataTable', u'setDisplay']
########################################################################
TypeDef len: 17
TypeDef name:  GraphTableView
TypeDef type: class
TypeDef desc: the master view guy for entire graph view
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'T3DataViewMain', u'DataTableView']
EnumDef name: XY
EnumDef val: XY
EnumDef: standard XY(Z) plot -- plot value determines Y axis coordinate to plot (optional error bars as well, if turned on)
EnumDef name: BAR
EnumDef val: BAR
EnumDef: gar graph -- for integer/nominal X axis values (optional error bars as well, if turned on)
EnumDef name: RASTER
EnumDef val: RASTER
EnumDef: raster plot (flat lines stacked up using raster_axis), typically with color representing plot data value or thresholded lines (spike raster)
EnumDef name: LINE
EnumDef val: LINE
EnumDef: just a line, no points
EnumDef name: POINTS
EnumDef val: POINTS
EnumDef: just points, no line
EnumDef name: LINE_AND_POINTS
EnumDef val: LINE_AND_POINTS
EnumDef: both line and points
EnumDef name: THRESH_LINE
EnumDef val: THRESH_LINE
EnumDef: draw a line when value is over threshold
EnumDef name: THRESH_POINT
EnumDef val: THRESH_POINT
EnumDef: draw a point when value is over threshold
EnumDef name: SMALL
EnumDef val: SMALL
EnumDef name: MEDIUM
EnumDef val: MEDIUM
EnumDef name: LARGE
EnumDef val: LARGE
EnumDef name: FIXED_COLOR
EnumDef val: FIXED_COLOR
EnumDef: use the color specified in the plot view (shown in EXPERT mode)
EnumDef name: VALUE_COLOR
EnumDef val: VALUE_COLOR
EnumDef: the data value determines the data drawing color, looked up on the color scale
EnumDef name: COLOR_AXIS
EnumDef val: COLOR_AXIS
EnumDef: use the data column specified by the color_axis to determine the drawing color
EnumDef name: SEP_GRAPHS
EnumDef val: SEP_GRAPHS
EnumDef: each value in the matrix gets a separate graph, with graphs configured in the same layout as the matrix
EnumDef name: Z_INDEX
EnumDef val: Z_INDEX
EnumDef: values in the matrix are drawn in the same graph, arrayed in depth along the z axis
EnumDef names: [u'ColorMode', u'GraphType', u'MatrixMode', u'PlotStyle', u'PointSize']
MemberDef name: graph_type
MemberDef type: GraphTableView::GraphType
MemberDef desc: type of graph to draw
MemberDef name: plot_style
MemberDef type: GraphTableView::PlotStyle
MemberDef desc: how to plot the data
MemberDef name: negative_draw
MemberDef type: bool
MemberDef desc: continue same line when X value resets in negative axis direction?
MemberDef name: negative_draw_z
MemberDef type: bool
MemberDef desc: continue same line when Z value resets in negative axis direction?
MemberDef name: line_width
MemberDef type: float
MemberDef desc: width of line -- 0 means use default
MemberDef name: point_size
MemberDef type: GraphTableView::PointSize
MemberDef desc: size of point symbols
MemberDef name: point_spacing
MemberDef type: int
MemberDef opts [u'CONDEDIT_OFF_plot_style:LINE']
MemberDef cats []
MemberDef desc: how frequently to display point markers
MemberDef name: bar_space
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: amount of space between bars
MemberDef name: label_spacing
MemberDef type: int
MemberDef desc: how frequently to display text labels of the data values (-1 = never); if plotting a string column, the other data column (e.g. plot_2) is used to determine the y axis values
MemberDef name: width
MemberDef type: float
MemberDef desc: how wide to make the display (height is always 1.0)
MemberDef name: depth
MemberDef type: float
MemberDef desc: how deep to make the display (height is always 1.0)
MemberDef name: axis_font_size
MemberDef type: float
MemberDef opts [u'DEF_0.05']
MemberDef cats []
MemberDef desc: size to render axis text
MemberDef name: tick_size
MemberDef type: float
MemberDef opts [u'DEF_0.05']
MemberDef cats []
MemberDef desc: size of tick marks
MemberDef name: label_font_size
MemberDef type: float
MemberDef opts [u'DEF_0.04']
MemberDef cats []
MemberDef desc: size to render value/string labels
MemberDef name: x_axis
MemberDef type: GraphAxisView
MemberDef desc: the x axis (horizontal, left-to-right)
MemberDef name: z_axis
MemberDef type: GraphAxisView
MemberDef desc: the z axis (in depth, front-to-back)
MemberDef name: plot_1
MemberDef type: GraphPlotView
MemberDef desc: first column of data to plot (optional)
MemberDef name: plot_2
MemberDef type: GraphPlotView
MemberDef desc: second column of data to plot (optional)
MemberDef name: plot_3
MemberDef type: GraphPlotView
MemberDef desc: third column of data to plot (optional)
MemberDef name: plot_4
MemberDef type: GraphPlotView
MemberDef desc: fourth column of data to plot (optional)
MemberDef name: plot_5
MemberDef type: GraphPlotView
MemberDef desc: fifth column of data to plot (optional)
MemberDef name: err_1
MemberDef type: GraphPlotView
MemberDef desc: data for error bars for plot_1 values
MemberDef name: err_2
MemberDef type: GraphPlotView
MemberDef desc: data for error bars for plot_2 values
MemberDef name: err_3
MemberDef type: GraphPlotView
MemberDef desc: data for error bars for plot_3 values
MemberDef name: err_4
MemberDef type: GraphPlotView
MemberDef desc: data for error bars for plot_4 values
MemberDef name: err_5
MemberDef type: GraphPlotView
MemberDef desc: data for error bars for plot_5 values
MemberDef name: err_spacing
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_graph_type:XY_ERR']
MemberDef cats []
MemberDef desc: spacing between
MemberDef name: err_bar_width
MemberDef type: float
MemberDef desc: half-width of error bars, in view plot units
MemberDef name: color_mode
MemberDef type: GraphTableView::ColorMode
MemberDef desc: how to determine the colors to draw
MemberDef name: color_axis
MemberDef type: GraphAxisView
MemberDef opts [u'CONDEDIT_ON_color_mode:COLOR_AXIS']
MemberDef cats []
MemberDef desc: color axis, for determining color of lines when color_mode = COLOR_AXIS
MemberDef name: colorscale
MemberDef type: ColorScale
MemberDef desc: contains current min,max,range,zero,auto_scale
MemberDef name: raster_axis
MemberDef type: GraphAxisView
MemberDef opts [u'CONDEDIT_ON_graph_type:RASTER']
MemberDef cats []
MemberDef desc: raster axis, if doing a raster plot
MemberDef name: thresh
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_plot_style:THRESH_LINE,THRESH_POINT']
MemberDef cats []
MemberDef desc: threshold on raw data value for THRESH_LINE or THRESH_POINT plotting sytles
MemberDef name: thr_line_len
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_plot_style:THRESH_LINE,THRESH_POINT']
MemberDef cats []
MemberDef desc: length of line to draw when above threshold: value is subtracted and added to current X value to render line
MemberDef name: matrix_mode
MemberDef type: GraphTableView::MatrixMode
MemberDef desc: how to display matrix data (note that if a matrix column is selected, it is the only thing displayed)
MemberDef name: mat_layout
MemberDef type: taMisc::MatrixView
MemberDef opts [u'CONDEDIT_ON_matrix_mode:SEP_GRAPHS', u'DEF_BOT_ZERO']
MemberDef cats []
MemberDef desc: layout of matrix graphs for SEP_GRAPHS mode
MemberDef name: mat_odd_vert
MemberDef type: bool
MemberDef opts [u'CONDEDIT_ON_matrix_mode:SEP_GRAPHS']
MemberDef cats []
MemberDef desc: how to arrange odd-dimensional matrix values (e.g., 1d or 3d) -- put the odd dimension in the Y (vertical) axis (else X, horizontal)
MemberDef name: two_d_font
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: use 2d font (easier to read, but doesn&apos;t scale) instead of 3d font
MemberDef name: two_d_font_scale
MemberDef type: float
MemberDef opts [u'DEF_350']
MemberDef cats []
MemberDef desc: how to scale the two_d font relative to the computed 3d number
MemberDef name: last_sel_col_nm
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: column name of the last selected point in graph to view values (if empty, then none)
MemberDef name: last_sel_pt
MemberDef type: FloatTDCoord
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: values of last selected point
MethodDef name: SetColorSpec
MethodDef desc: set the color scale spec to determine the palette of colors representing values
MethodDef proto void SetColorSpec(ColorScaleSpec* color_spec)
MethodDef opts [u'BUTTON', u'VIEWMENU', u'INIT_ARGVAL_ON_colorscale.spec']
MethodDef name: SetScrollBars
MethodDef desc: set scroll bar values
MethodDef proto void SetScrollBars()
MethodDef name: FindDefaultXZAxes
MethodDef desc: set X and Z axis columns to user data spec or the last INT columns -- if that doesn&apos;t work, then choose the first numeric columns
MethodDef proto void FindDefaultXZAxes()
MethodDef name: FindDefaultPlot1
MethodDef desc: set plot_1 as first float/double column (or user data spec)
MethodDef proto void FindDefaultPlot1()
MethodDef name: InitFromUserData
MethodDef desc: set initial settings based on user data in columns and overall table
MethodDef proto void InitFromUserData()
MethodDef name: setWidth
MethodDef proto void setWidth(float wdth)
MethodDef name: setScaleData
MethodDef desc: updates the values in us and the stored ones in the colorscale list
MethodDef proto void setScaleData(bool auto_scale, float scale_min, float scale_max)
MethodDef name: lvp
MethodDef proto iGraphTableView_Panel_ptr lvp()
MethodDef names [u'FindDefaultPlot1', u'FindDefaultXZAxes', u'InitFromUserData', u'SetColorSpec', u'SetScrollBars', u'lvp', u'setScaleData', u'setWidth']
########################################################################
TypeDef len: 15
TypeDef name:  GridTableView
TypeDef type: class
TypeDef desc: the master view guy for entire grid view
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'T3DataViewMain', u'DataTableView']
MemberDef name: col_n
MemberDef type: int
MemberDef desc: number of columns to display: determines sizes of everything automatically from this
MemberDef name: vis_cols
MemberDef type: int_Array
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: indicies of visible columns
MemberDef name: col_range
MemberDef type: MinMaxInt
MemberDef desc: column range to display, in terms of the visible columns (contained in vis_cols index list)
MemberDef name: width
MemberDef type: float
MemberDef desc: how wide to make the display (height is always 1.0)
MemberDef name: grid_on
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: whether to show grid lines
MemberDef name: header_on
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: is the table header visible?
MemberDef name: row_num_on
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: row number col visible?
MemberDef name: two_d_font
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: use 2d font (easier to read, but doesn&apos;t scale) instead of 3d font
MemberDef name: two_d_font_scale
MemberDef type: float
MemberDef opts [u'DEF_350']
MemberDef cats []
MemberDef desc: how to scale the two_d font relative to the computed 3d number
MemberDef name: mat_val_text
MemberDef type: bool
MemberDef desc: also display text values for matrix blocks
MemberDef name: colorscale
MemberDef type: ColorScale
MemberDef desc: contains current min,max,range,zero,auto_scale
MemberDef name: grid_margin
MemberDef type: float
MemberDef opts [u'DEF_0.01', u'MIN_0']
MemberDef cats []
MemberDef desc: size of margin between grid cells (in normalized units)
MemberDef name: grid_line_size
MemberDef type: float
MemberDef opts [u'DEF_0.005', u'MIN_0']
MemberDef cats []
MemberDef desc: size of grid lines (in normalized units)
MemberDef name: row_num_width
MemberDef type: int
MemberDef opts [u'DEF_4']
MemberDef cats []
MemberDef desc: width of row number column
MemberDef name: mat_block_spc
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats []
MemberDef desc: space between matrix cell blocks, as a proportion of max of X, Y cell size
MemberDef name: mat_block_height
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: how tall (in Z dimension) to make the blocks (relative to the max of their X or Y size)
MemberDef name: mat_rot
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: rotation of the matrix in the Z plane (in degrees) - allows for vertical stacks of grids to be displayed in depth
MemberDef name: mat_trans
MemberDef type: float
MemberDef opts [u'DEF_0.6']
MemberDef cats []
MemberDef desc: maximum transparency of zero values in matrix blocks -- set to 0 to make all blocks opaque
MemberDef name: mat_size_range
MemberDef type: MinMaxInt
MemberDef desc: range of display sizes for matrix items relative to other text items. each cell in a matrix counts as one character in size, within these ranges (smaller matricies are made larger to min size, and large ones are made smaller to max size)
MemberDef name: text_size_range
MemberDef type: MinMax
MemberDef desc: (default .02 - .05) minimum and maximum text size -- keeps things readable and not too big
MethodDef name: colVis
MethodDef desc: get visible column based on vis_cols index
MethodDef proto GridColView_ptr colVis(int i)
MethodDef name: ShowAllCols
MethodDef desc: show all columns in the data table (turn their visible flags on) -- this is the only way to turn visible back on once it is turned off!
MethodDef proto void ShowAllCols()
MethodDef opts [u'BUTTON', u'CONFIRM', u'VIEWMENU']
MethodDef name: SetColorSpec
MethodDef desc: set the color scale spec to determine the palette of colors representing values
MethodDef proto void SetColorSpec(ColorScaleSpec* color_spec)
MethodDef opts [u'BUTTON', u'VIEWMENU', u'INIT_ARGVAL_ON_colorscale.spec']
MethodDef name: setWidth
MethodDef proto void setWidth(float wdth)
MethodDef name: setScaleData
MethodDef desc: updates the values in us and the stored ones in the colorscale list
MethodDef proto void setScaleData(bool auto_scale, float scale_min, float scale_max)
MethodDef name: VScroll
MethodDef desc: scroll left or right
MethodDef proto void VScroll(bool left)
MethodDef name: ViewCol_At
MethodDef desc: start viewing at indicated column value
MethodDef proto void ViewCol_At(int start)
MethodDef name: lvp
MethodDef proto iGridTableView_Panel_ptr lvp()
MethodDef name: InitFromUserData
MethodDef proto void InitFromUserData()
MethodDef names [u'InitFromUserData', u'SetColorSpec', u'ShowAllCols', u'VScroll', u'ViewCol_At', u'colVis', u'lvp', u'setScaleData', u'setWidth']
########################################################################
TypeDef len: 15
TypeDef name:  GridColView
TypeDef type: class
TypeDef desc: information for display of a data column in a grid display. scalar columns are always displayed as text, and matrix as blocks (with optional value text, controlled by overall table spec)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'SCOPE_DataTableView', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'DataColView']
MemberDef name: text_width
MemberDef type: int
MemberDef desc: width of the column (or each matrix col) in chars; also the min width in chars
MemberDef name: scale_on
MemberDef type: bool
MemberDef desc: adjust overall colorscale to include this data (if it is a matrix type)
MemberDef name: mat_layout
MemberDef type: taMisc::MatrixView
MemberDef opts [u'DEF_BOT_ZERO']
MemberDef cats []
MemberDef desc: layout of matrix and image cells
MemberDef name: mat_image
MemberDef type: bool
MemberDef desc: display matrix as an image instead of grid blocks
MemberDef name: mat_odd_vert
MemberDef type: bool
MemberDef desc: how to arrange odd-dimensional matrix values (e.g., 1d or 3d) -- put the odd dimension in the Y (vertical) axis (else X, horizontal)
MethodDef name: SetTextWidth
MethodDef desc: set the text width for this column (default is 16) -- can adjust to fit more items in the display or allow existing text to fit better
MethodDef proto void SetTextWidth(int text_wdth = 16)
MethodDef opts [u'BUTTON', u'VIEWMENU', u'INIT_ARGVAL_ON_text_width']
MethodDef name: ComputeColSizes
MethodDef desc: compute the column sizes
MethodDef proto void ComputeColSizes()
MethodDef name: InitFromUserData
MethodDef proto void InitFromUserData()
MethodDef names [u'ComputeColSizes', u'InitFromUserData', u'SetTextWidth']
########################################################################
TypeDef len: 13
TypeDef name:  GraphColView
TypeDef type: class
TypeDef desc: information for graph display of a column: note that the axis handles all the key display, so not much happens with this guy
TypeDef cats:, [u'Display']
TypeDef opts:, [u'SCOPE_DataTableView', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'DataColView']
MemberDef name: fixed_range
MemberDef type: FixedMinMax
MemberDef desc: fixed min/max range values for display (if not fixed, automatically set to min/max of data)
MemberDef name: data_range
MemberDef type: MinMax
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: actual min and max of data (including fixed range)
########################################################################
TypeDef len: 5
TypeDef name:  iDataTableView
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 19
TypeDef name:  GraphAxisBase
TypeDef type: class
TypeDef desc: base class for data about axis on a graph
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView']
TypeDef children: [u'GraphAxisView', u'GraphPlotView']
EnumDef name: X
EnumDef val: X
EnumDef name: Y
EnumDef val: Y
EnumDef name: Z
EnumDef val: Z
EnumDef names: [u'AxisType']
MemberDef name: on
MemberDef type: bool
MemberDef desc: is this axis active for displaying info
MemberDef name: axis
MemberDef type: GraphAxisBase::AxisType
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: type of axis this is, for rendering purposes
MemberDef name: col_lookup
MemberDef type: GraphColView*
MemberDef opts [u'NULL_OK', u'FROM_GROUP_col_list', u'NO_SAVE', u'NO_EDIT', u'NO_UPDATE_POINTER']
MemberDef cats []
MemberDef desc: lookup a column of data for this axis -- only for lookup purposes -- fills in the name and is reset to NULL -- name is what is actually used
MemberDef name: col_name
MemberDef type: taString
MemberDef desc: name of column of data for this axis
MemberDef name: fixed_range
MemberDef type: FixedMinMax
MemberDef desc: fixed min/max range values for display (if not fixed, automatically set to min/max of data)
MemberDef name: color
MemberDef type: RGBA
MemberDef desc: color of the line and points
MemberDef name: data_range
MemberDef type: MinMax
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: actual min and max of data (including fixed range)
MemberDef name: range
MemberDef type: MinMax
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: actual display range of the axis data
MemberDef name: n_ticks
MemberDef type: int
MemberDef opts [u'DEF_10']
MemberDef cats []
MemberDef desc: number of ticks desired
MemberDef name: axis_length
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: in view units (width or depth)
MemberDef name: start_tick
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: first tick mark here
MemberDef name: tick_incr
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: increment for tick marks
MemberDef name: act_n_ticks
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: actual number of ticks
MemberDef name: units
MemberDef type: double
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: order of the units displayed (i.e. divide by this)
MemberDef name: col_list
MemberDef type: T3DataView_List*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: list of columns for the col_lookup
MethodDef name: SetColPtr
MethodDef proto void SetColPtr(GraphColView* cgv)
MethodDef name: GetColPtr
MethodDef desc: get column pointer from col_name
MethodDef proto GraphColView_ptr GetColPtr()
MethodDef name: GetDAPtr
MethodDef desc: get dataarray ptr
MethodDef proto DataCol_ptr GetDAPtr()
MethodDef name: GetGTV
MethodDef proto GraphTableView_ptr GetGTV()
MethodDef name: isString
MethodDef desc: is this data a string?
MethodDef proto bool isString()
MethodDef name: SetRange_impl
MethodDef desc: set range to known good starting range values (fixed vals will still override); calls UpdateRange_impl to get &apos;nice&apos; vals still
MethodDef proto void SetRange_impl(float first, float last)
MethodDef name: UpdateRange_impl
MethodDef desc: update range with new min/max data -- returns true if range actually changed -- finds a &apos;nice number&apos; for min and max based on n_ticks, etc
MethodDef proto bool UpdateRange_impl(float first, float last)
MethodDef name: ComputeRange
MethodDef desc: compute range information based on data column, call UpdateRange_impl
MethodDef proto void ComputeRange()
MethodDef name: UpdateRange
MethodDef desc: update range information based on last cell in data column, call UpdateRange_impl &amp; returns true if a new range update
MethodDef proto bool UpdateRange()
MethodDef name: ComputeTicks
MethodDef desc: compute the start_tick, tick_incr, and act_n_ticks vals, based on current range info
MethodDef proto void ComputeTicks()
MethodDef name: DataToPlot
MethodDef desc: convert data value to plotting value
MethodDef proto float DataToPlot(float data)
MethodDef name: RenderAxis
MethodDef desc: draw the actual axis in a given direction -- if n_ax &gt; 0 then it is an alternative one (only for Y)
MethodDef proto void RenderAxis(T3Axis* t3ax, int n_ax = 0, bool ticks_only = false)
MethodDef name: InitFromUserData
MethodDef desc: initialize various settings from the user data of the data column
MethodDef proto void InitFromUserData()
MethodDef name: UpdateOnFlag
MethodDef desc: update the &apos;on&apos; flag for this column, taking into account whether there is actually any data column set (if not, on must be false)
MethodDef proto void UpdateOnFlag()
MethodDef name: UpdateFmColLookup
MethodDef desc: if col_lookup is set, update our values from it
MethodDef proto void UpdateFmColLookup()
MethodDef names [u'ComputeRange', u'ComputeTicks', u'DataToPlot', u'GetColPtr', u'GetDAPtr', u'GetGTV', u'InitFromUserData', u'RenderAxis', u'SetColPtr', u'SetRange_impl', u'UpdateFmColLookup', u'UpdateOnFlag', u'UpdateRange', u'UpdateRange_impl', u'isString']
########################################################################
TypeDef len: 13
TypeDef name:  GraphAxisView
TypeDef type: class
TypeDef desc: a non-Y axis (X, Z, etc)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'GraphAxisBase']
MemberDef name: row_num
MemberDef type: bool
MemberDef desc: display row number instead of column value for this axis
########################################################################
TypeDef len: 15
TypeDef name:  GraphPlotView
TypeDef type: class
TypeDef desc: parameters for plotting one column of data -- contains Y axis data as well
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'GraphAxisBase']
EnumDef name: SOLID
EnumDef val: SOLID
EnumDef: -----
EnumDef name: DOT
EnumDef val: DOT
EnumDef: .....
EnumDef name: DASH
EnumDef val: DASH
EnumDef: - - -
EnumDef name: DASH_DOT
EnumDef val: DASH_DOT
EnumDef: _._._
EnumDef name: CIRCLE
EnumDef val: CIRCLE
EnumDef: o
EnumDef name: SQUARE
EnumDef val: SQUARE
EnumDef: []
EnumDef name: DIAMOND
EnumDef val: DIAMOND
EnumDef: &lt;&gt;
EnumDef name: TRIANGLE
EnumDef val: TRIANGLE
EnumDef name: MINUS
EnumDef val: MINUS
EnumDef: -
EnumDef name: BACKSLASH
EnumDef val: BACKSLASH
EnumDef name: BAR
EnumDef val: BAR
EnumDef: |
EnumDef name: SLASH
EnumDef val: SLASH
EnumDef: /
EnumDef name: PLUS
EnumDef val: PLUS
EnumDef: +
EnumDef name: CROSS
EnumDef val: CROSS
EnumDef: x
EnumDef name: STAR
EnumDef val: STAR
EnumDef: *
EnumDef names: [u'LineStyle', u'PointStyle']
MemberDef name: line_style
MemberDef type: GraphPlotView::LineStyle
MemberDef desc: the style in which the line is drawn
MemberDef name: point_style
MemberDef type: GraphPlotView::PointStyle
MemberDef desc: the style in which the points are drawn
MemberDef name: alt_y
MemberDef type: bool
MemberDef desc: use the alternate (right hand side) y axis instead of default left axis
MemberDef name: eff_y_axis
MemberDef type: GraphPlotView*
MemberDef opts [u'NO_SAVE', u'READ_ONLY', u'NO_SET_POINTER']
MemberDef cats []
MemberDef desc: effective y axis for this guy at this point in time
########################################################################
TypeDef len: 7
TypeDef name:  DataTableDelegate
TypeDef type: class
TypeDef desc: we maintain a ref to get modal information
TypeDef cats:, []
TypeDef opts:, []
MemberDef name: dt
MemberDef type: DataTableRef
MemberDef desc: we maintain a ref to get modal information
########################################################################
TypeDef len: 11
TypeDef name:  taiTabularDataMimeItem
TypeDef type: class
TypeDef desc: base for matrix, tsv, and table data; this class is not itself instantiated
TypeDef cats:, []
TypeDef opts:, [u'NO_CSS', u'NO_MEMBERS', u'NO_INSTANCE', u'VIRT_BASE', u'INSTANCE']
TypeDef children: []
########################################################################
TypeDef len: 15
TypeDef name:  VEBodyView
TypeDef type: class
TypeDef desc: view of one body
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of body this one is associated with
MethodDef name: Body
MethodDef proto VEBody_ptr Body()
MethodDef name: SetBody
MethodDef proto void SetBody(VEBody* ob)
MethodDef name: SetDraggerPos
MethodDef desc: set dragger position, based on shape
MethodDef proto void SetDraggerPos()
MethodDef names [u'Body', u'SetBody', u'SetDraggerPos']
########################################################################
TypeDef len: 15
TypeDef name:  VEStaticView
TypeDef type: class
TypeDef desc: view of one static environment element
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of static item this one is associated with
MethodDef name: Static
MethodDef proto VEStatic_ptr Static()
MethodDef name: SetStatic
MethodDef proto void SetStatic(VEStatic* ob)
MethodDef name: SetDraggerPos
MethodDef desc: set dragger position, based on shape
MethodDef proto void SetDraggerPos()
MethodDef names [u'SetDraggerPos', u'SetStatic', u'Static']
########################################################################
TypeDef len: 15
TypeDef name:  VEObjectView
TypeDef type: class
TypeDef desc: view of one object: a group of bodies
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of body this one is associated with
MethodDef name: Object
MethodDef proto VEObject_ptr Object()
MethodDef name: SetObject
MethodDef proto void SetObject(VEObject* ob)
MethodDef names [u'Object', u'SetObject']
########################################################################
TypeDef len: 15
TypeDef name:  VESpaceView
TypeDef type: class
TypeDef desc: view of one space
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of body this one is associated with
MethodDef name: Space
MethodDef proto VESpace_ptr Space()
MethodDef name: SetSpace
MethodDef proto void SetSpace(VESpace* ob)
MethodDef names [u'SetSpace', u'Space']
########################################################################
TypeDef len: 7
TypeDef name:  QString
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QIcon
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QVariant
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  QWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject']
TypeDef children: [u'QSplitter', u'QMainWindow', u'QDockWidget', u'QTabBar', u'QToolBar', u'iT3DataViewFrame', u'QLabel', u'QDialog', u'ScaleBar']
########################################################################
TypeDef len: 7
TypeDef name:  iColor
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QObject
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: [u'taiData', u'taiDataHostBase', u'QWidget', u'taBaseAdapter', u'QAction', u'QPluginLoader']
########################################################################
TypeDef len: 5
TypeDef name:  QStringList
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 9
TypeDef name:  taBaseAdapter
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject']
TypeDef children: []
########################################################################
TypeDef len: 5
TypeDef name:  QByteArray
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  QMimeData
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: [u'taiClipData']
########################################################################
TypeDef len: 7
TypeDef name:  QAction
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject']
########################################################################
TypeDef len: 7
TypeDef name:  QMenu
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  cssProgSpace
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  cssTA_Base
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QEvent
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QLayout
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iLabel
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QMenuBar
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  taiClipData
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QMimeData']
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  QSplitter
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QMainWindow
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
########################################################################
TypeDef len: 7
TypeDef name:  QDockWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
########################################################################
TypeDef len: 7
TypeDef name:  QToolBox
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iClipWidgetAction
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  QTabBar
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QVBoxLayout
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QStackedWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QFrame
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QHBoxLayout
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QButtonGroup
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QStackedLayout
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  QToolBar
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  cssElPtr
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  iT3DataViewFrame
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
TypeDef children: []
########################################################################
TypeDef len: 5
TypeDef name:  QPixmap
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  QImage
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoTexture2
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoTexture2Transform
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoPerspectiveCamera
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoLight
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QPluginLoader
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject']
########################################################################
TypeDef len: 9
TypeDef name:  QLabel
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  HiLightButton
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QPushButton']
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iFlowLayout
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QScrollArea
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QGridLayout
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 5
TypeDef name:  MembSet_List
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  iLineEdit
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iCheckBox
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QComboBox
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QTreeWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QPushButton
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: [u'HiLightButton']
########################################################################
TypeDef len: 7
TypeDef name:  QLineEdit
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QTreeWidgetItem
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QAbstractButton
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iTextEdit
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QListWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QTextEdit
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QTextBrowser
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  cssEl
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 5
TypeDef name:  iTreeWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  QDialog
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
########################################################################
TypeDef len: 7
TypeDef name:  QBoxLayout
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 5
TypeDef name:  QToolButton
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 5
TypeDef name:  QAbstractTableModel
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 5
TypeDef name:  QTableView
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  DocEditDataHost
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iStripeWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iProgramCtrlDataHost
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoFont
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoAsciiText
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoTransform
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoMaterial
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 5
TypeDef name:  SoTriangleStripSet
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  SoIndexedLineSet
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoTransformBoxDragger
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoCalculator
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoTranslate1Dragger
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoCylinder
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoGetPrimitiveCountAction
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoGLRenderAction
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QScrollBar
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  iT3DataViewer
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoCamera
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QCheckBox
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  taiIncrField
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData']
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  ScaleBar
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'QWidget']
TypeDef children: []
########################################################################
TypeDef len: 9
TypeDef name:  taiComboBox
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef parents: [u'QObject', u'taiData']
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  taiListElsButton
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  taiPolyData
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SbRotation
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 5
TypeDef name:  QItemDelegate
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  SoDirectionalLight
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoSwitch
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 17
TypeDef name:  ProjectBase
TypeDef type: class
TypeDef desc: Base class for a pdp project (do not create one of these -- create an algorithm-specific version)
TypeDef cats:, [u'Project']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject']
TypeDef children: [u'V3ProjectBase', u'CsProject', u'SoProject', u'LeabraProject', u'BpProject']
MemberDef name: networks
MemberDef type: Network_Group
MemberDef desc: Networks of interconnected units
MethodDef name: GetNewNetwork
MethodDef desc: get a new network object
MethodDef proto Network_ptr GetNewNetwork(TypeDef* typ = __null)
MethodDef name: GetDefNetwork
MethodDef desc: get default network from project
MethodDef proto Network_ptr GetDefNetwork()
MethodDef name: AutoBuildNets
MethodDef desc: build networks according to their own individual auto_bulid modes
MethodDef proto void AutoBuildNets()
MethodDef names [u'AutoBuildNets', u'GetDefNetwork', u'GetNewNetwork']
########################################################################
TypeDef len: 7
TypeDef name:  EmergentMisc
TypeDef type: class
TypeDef desc: miscellaneous things for Emergent
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 17
TypeDef name:  BaseSpec
TypeDef type: class
TypeDef desc: base specification class
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'ConSpec', u'UnitSpec', u'ProjectionSpec', u'LayerSpec', u'EventSpec']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: Description of what this variable is for
MemberDef name: children
MemberDef type: BaseSpec_Group
MemberDef opts [u'NO_INHERIT', u'IN_GPMENU']
MemberDef cats []
MemberDef desc: sub-specs descending from this one and inheriting values
MethodDef name: FindParent
MethodDef desc: Find the parent spec of this one
MethodDef proto BaseSpec_ptr FindParent()
MethodDef opts [u'MENU', u'USE_RVAL', u'MENU_ON_Actions']
MethodDef name: SetUnique
MethodDef desc: set inherit bit
MethodDef proto void SetUnique(const char* memb_nm, bool on)
MethodDef name: GetUnique
MethodDef desc: check inherit bit
MethodDef proto bool GetUnique(const char* memb_nm)
MethodDef name: UpdateMember
MethodDef desc: copy member from given parent
MethodDef proto void UpdateMember(BaseSpec* from, int memb_no)
MethodDef name: UpdateSpec
MethodDef desc: update values from parent, and update children
MethodDef proto void UpdateSpec()
MethodDef name: UpdateChildren
MethodDef desc: update any children
MethodDef proto void UpdateChildren()
MethodDef name: UpdateSubSpecs
MethodDef desc: update any subspec objects (overload me)
MethodDef proto void UpdateSubSpecs()
MethodDef name: NewChild
MethodDef desc: create a new child spec that inherits from this one but can have its own unique parameters
MethodDef proto BaseSpec_ptr NewChild(TypeDef* child_type)
MethodDef opts [u'BUTTON', u'TYPE_ON_children.el_base', u'CAT_Modify']
MethodDef name: CheckType
MethodDef desc: checks typedef type, issues error and returns false if not sufficient
MethodDef proto bool CheckType(TypeDef* td)
MethodDef name: CheckObjectType
MethodDef desc: checks object type, issues error and returns false if not sufficient
MethodDef proto bool CheckObjectType(taBase* obj)
MethodDef name: FindMakeChild
MethodDef desc: find a child spec of given name, and if not, make it (if nm is not found and alt_nm != NULL, it is searched for)
MethodDef proto BaseSpec_ptr FindMakeChild(const char* nm, TypeDef* td = NULL, bool&amp; nw_itm = nw_itm_def_arg, const char* alt_nm = NULL)
MethodDef name: RemoveChild
MethodDef desc: remove a child based on name or type
MethodDef proto bool RemoveChild(const char* nm, TypeDef* td = NULL)
MethodDef names [u'CheckObjectType', u'CheckType', u'FindMakeChild', u'FindParent', u'GetUnique', u'NewChild', u'RemoveChild', u'SetUnique', u'UpdateChildren', u'UpdateMember', u'UpdateSpec', u'UpdateSubSpecs']
########################################################################
TypeDef len: 13
TypeDef name:  BaseSpec_Group
TypeDef type: class
TypeDef desc: group of specs
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'EXT_spec', u'SCOPE_Network', u'INSTANCE']
TypeDef parents: [u'taBase_Group']
MethodDef name: FindSpecType
MethodDef desc: find a spec of eactly given type, searching in the children too
MethodDef proto BaseSpec_ptr FindSpecType(TypeDef* td)
MethodDef name: FindSpecInherits
MethodDef desc: find a spec that inherits from given type, searching in the children too
MethodDef proto BaseSpec_ptr FindSpecInherits(TypeDef* td, taBase* for_obj = NULL)
MethodDef name: FindSpecTypeNotMe
MethodDef desc: find a spec of eactly given type, searching in the children too, but skip not_me
MethodDef proto BaseSpec_ptr FindSpecTypeNotMe(TypeDef* td, BaseSpec* not_me)
MethodDef name: FindSpecInheritsNotMe
MethodDef desc: find a spec that inherits from given type, searching in the children too
MethodDef proto BaseSpec_ptr FindSpecInheritsNotMe(TypeDef* td, BaseSpec* not_me, taBase* for_obj = NULL)
MethodDef name: FindSpecName
MethodDef desc: find a spec with given name, also searches in the children of each spec
MethodDef proto BaseSpec_ptr FindSpecName(const char* nm)
MethodDef name: FindMakeSpec
MethodDef desc: find a given spec and if not found, make it (if nm is not found and alt_nm != NULL, it is searched for)
MethodDef proto BaseSpec_ptr FindMakeSpec(const char* nm, TypeDef* td, bool&amp; nw_itm = nw_itm_def_arg, const char* alt_nm = NULL)
MethodDef name: RemoveSpec
MethodDef desc: find a given spec and remove it
MethodDef proto bool RemoveSpec(const char* nm, TypeDef* td)
MethodDef name: FindParent
MethodDef desc: Find the parent spec of this one
MethodDef proto BaseSpec_ptr FindParent()
MethodDef opts [u'MENU', u'USE_RVAL', u'MENU_ON_Actions']
MethodDef names [u'FindMakeSpec', u'FindParent', u'FindSpecInherits', u'FindSpecInheritsNotMe', u'FindSpecName', u'FindSpecType', u'FindSpecTypeNotMe', u'RemoveSpec']
########################################################################
TypeDef len: 15
TypeDef name:  BaseSubSpec
TypeDef type: class
TypeDef desc: specification class for sub-objects of specs
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'PatternSpec']
MethodDef name: FindParent
MethodDef desc: Find the corresponding parent subspec of this one
MethodDef proto BaseSubSpec_ptr FindParent()
MethodDef opts [u'MENU', u'USE_RVAL', u'MENU_ON_Actions']
MethodDef name: FindParentBaseSpec
MethodDef desc: Find the parent spec of this one
MethodDef proto BaseSpec_ptr FindParentBaseSpec()
MethodDef opts [u'MENU', u'USE_RVAL']
MethodDef name: SetUnique
MethodDef desc: set inherit bit
MethodDef proto void SetUnique(const char* memb_nm, bool on)
MethodDef name: GetUnique
MethodDef desc: check inherit bit
MethodDef proto bool GetUnique(const char* memb_nm)
MethodDef name: UpdateMember
MethodDef desc: copy member from given sub spec if not unique
MethodDef proto void UpdateMember(BaseSubSpec* from, int memb_no)
MethodDef name: UpdateSpec
MethodDef desc: update from parent sub spec, if one exists
MethodDef proto void UpdateSpec()
MethodDef names [u'FindParent', u'FindParentBaseSpec', u'GetUnique', u'SetUnique', u'UpdateMember', u'UpdateSpec']
########################################################################
TypeDef len: 17
TypeDef name:  SpecPtr_impl
TypeDef type: class
TypeDef desc: magic pointer to a spec
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'SpecPtr']
MemberDef name: type
MemberDef type: TypeDef*
MemberDef opts [u'APPLY_IMMED', u'TYPE_ON_base_type']
MemberDef cats []
MemberDef desc: The type of the spec to use
MethodDef name: GetSpec
MethodDef desc: get the spec pointer
MethodDef proto BaseSpec_ptr GetSpec()
MethodDef name: SetSpec
MethodDef desc: set the spec pointer
MethodDef proto bool SetSpec(BaseSpec* na)
MethodDef name: SetDefaultSpec
MethodDef desc: for class that owns ptr
MethodDef proto void SetDefaultSpec(taBase* ownr, TypeDef* td)
MethodDef name: SetBaseType
MethodDef desc: for overloaded classes
MethodDef proto void SetBaseType(TypeDef* td)
MethodDef name: GetSpecGroup
MethodDef desc: get the group where specs go
MethodDef proto BaseSpec_Group_ptr GetSpecGroup()
MethodDef name: GetSpecOfType
MethodDef desc: get a spec of type type
MethodDef proto void GetSpecOfType()
MethodDef names [u'GetSpec', u'GetSpecGroup', u'GetSpecOfType', u'SetBaseType', u'SetDefaultSpec', u'SetSpec']
########################################################################
TypeDef len: 11
TypeDef name:  SpecPtr
TypeDef type: class
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'SpecPtr_impl']
TypeDef children: []
########################################################################
TypeDef len: 13
TypeDef name:  Connection
TypeDef type: class
TypeDef desc: base connection between two units
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER']
TypeDef children: [u'CsCon', u'SoCon', u'LeabraCon', u'BpCon']
MemberDef name: wt
MemberDef type: float
MemberDef desc: weight of connection
MemberDef name: dwt
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: resulting net weight change
########################################################################
TypeDef len: 17
TypeDef name:  ConSpec
TypeDef type: class
TypeDef desc: Connection specs: for processing over a set of connections all from the same projection
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec']
TypeDef children: [u'CsConSpec', u'SoConSpec', u'LeabraConSpec', u'BpConSpec']
MemberDef name: rnd
MemberDef type: Random
MemberDef opts []
MemberDef cats [u'ConSpec']
MemberDef desc: Weight randomization specification. Note that NONE means no value at all, not the mean, and should be used if some other source is setting the weights, e.g., from a projectionspec or loading from a file etc
MemberDef name: wt_limits
MemberDef type: WeightLimits
MemberDef opts []
MemberDef cats [u'ConSpec']
MemberDef desc: limits on weight sign, symmetry
MethodDef name: C_ApplyLimits
MethodDef desc: apply weight limits to single connection
MethodDef proto void C_ApplyLimits(Connection* cn, Unit* na, Unit* na)
MethodDef opts [u'CAT_Learning']
MethodDef name: ApplyLimits
MethodDef desc: apply weight limits (sign, magnitude)
MethodDef proto void ApplyLimits(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: ApplySymmetry
MethodDef desc: apply weight symmetrizing between reciprocal units
MethodDef proto void ApplySymmetry(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Init_Weights
MethodDef proto void C_Init_Weights(RecvCons* cg, Connection* cn, Unit* ru, Unit* su)
MethodDef name: Init_Weights
MethodDef desc: initialize state variables (ie. at beginning of training)
MethodDef proto void Init_Weights(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Init_dWt
MethodDef desc: initialize weight-change variables on a single connecdtion
MethodDef proto void C_Init_dWt(RecvCons* na, Connection* cn, Unit* na, Unit* na)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_dWt
MethodDef desc: initialize weight-change variables for whole set
MethodDef proto void Init_dWt(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Netin
MethodDef proto float C_Compute_Netin(Connection* cn, Unit* ru, Unit* su)
MethodDef name: Compute_Netin
MethodDef desc: compute net input for weights in this con group
MethodDef proto float Compute_Netin(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Activation']
MethodDef name: C_Send_Netin
MethodDef proto void C_Send_Netin(Connection* cn, Unit* ru, Unit* su)
MethodDef name: Send_Netin
MethodDef desc: sender-based net input for con group (send net input to receivers)
MethodDef proto void Send_Netin(SendCons* cg, Unit* su)
MethodDef opts [u'CAT_Activation']
MethodDef name: C_Compute_Dist
MethodDef proto float C_Compute_Dist(Connection* cn, Unit* ru, Unit* su)
MethodDef name: Compute_Dist
MethodDef desc: compute net distance for con group (ie. euclidean distance)
MethodDef proto float Compute_Dist(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Activation']
MethodDef name: C_Compute_dWt
MethodDef proto void C_Compute_dWt(Connection* na, Unit* na, Unit* na)
MethodDef name: Compute_dWt
MethodDef desc: compute the delta-weight change
MethodDef proto void Compute_dWt(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Weights
MethodDef proto void C_Compute_Weights(Connection* na, Unit* na, Unit* na)
MethodDef name: Compute_Weights
MethodDef desc: update weights (ie. add delta-wt to wt, zero delta-wt)
MethodDef proto void Compute_Weights(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: CheckConfig_RecvCons
MethodDef desc: check for for misc configuration settings required by different algorithms
MethodDef proto bool CheckConfig_RecvCons(RecvCons* cg, bool quiet = false)
MethodDef name: Init_Weights_Net
MethodDef desc: initializes all weights in the network
MethodDef proto void Init_Weights_Net()
MethodDef opts [u'BUTTON', u'CAT_Learning']
MethodDef name: DMem_AlwaysLocal
MethodDef desc: overload this function to prevent this projection from being pruned for non-local units under dmem processing (for &apos;special&apos; connection types)
MethodDef proto bool DMem_AlwaysLocal()
MethodDef opts [u'CAT_DMem']
MethodDef names [u'ApplyLimits', u'ApplySymmetry', u'C_ApplyLimits', u'C_Compute_Dist', u'C_Compute_Netin', u'C_Compute_Weights', u'C_Compute_dWt', u'C_Init_Weights', u'C_Init_dWt', u'C_Send_Netin', u'CheckConfig_RecvCons', u'Compute_Dist', u'Compute_Netin', u'Compute_Weights', u'Compute_dWt', u'DMem_AlwaysLocal', u'Init_Weights', u'Init_Weights_Net', u'Init_dWt', u'Send_Netin']
########################################################################
TypeDef len: 15
TypeDef name:  ConArray
TypeDef type: class
TypeDef desc: a physically contiguous array of connections, for receiving con group -- only one alloc of connections is allowed (to preserve validity of links to existing connections)
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: con_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT', u'NO_SAVE']
MemberDef cats []
MemberDef desc: sizeof() connection object being stored
MemberDef name: con_type
MemberDef type: TypeDef*
MemberDef desc: type of connection object being stored
MemberDef name: size
MemberDef type: int
MemberDef opts [u'NO_SAVE', u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: number of elements in the array
MemberDef name: alloc_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'EXPERT']
MemberDef cats []
MemberDef desc: allocated (physical) size, in con_size units -- this is not incrementally allocated -- must be done in advance of making connections!
MethodDef name: InRange
MethodDef desc: is index in range?
MethodDef proto bool InRange(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: SafeEl
MethodDef desc: safely access connection at given index, consumer must cast to appropriate sub-type (for type safety, check con_type)
MethodDef proto Connection_ptr SafeEl(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: FastEl
MethodDef desc: fast access (no range checking) connection at given index, consumer must cast to appropriate type (for type safety, check con_type)
MethodDef proto Connection_ptr FastEl(int idx)
MethodDef opts [u'CAT_Access']
MethodDef name: SetType
MethodDef desc: set new connection type -- resets any existing conections
MethodDef proto void SetType(TypeDef* cn_tp)
MethodDef opts [u'CAT_Modify']
MethodDef name: Alloc
MethodDef desc: allocate storage for exactly the given size -- frees any existing connections!
MethodDef proto void Alloc(int n)
MethodDef opts [u'CAT_Modify']
MethodDef name: Free
MethodDef desc: deallocate all storage
MethodDef proto void Free()
MethodDef opts [u'CAT_Modify']
MethodDef name: SetSize
MethodDef desc: set size of array to given number of elements, with new items initialized to zero
MethodDef proto void SetSize(int sz)
MethodDef opts [u'CAT_Modify']
MethodDef name: Reset
MethodDef desc: reset size of array to zero (does not free underlying memory)
MethodDef proto void Reset()
MethodDef opts [u'CAT_Modify']
MethodDef name: Add
MethodDef desc: add a connection
MethodDef proto void Add(const Connection* it)
MethodDef opts [u'CAT_Modify']
MethodDef name: RemoveIdx
MethodDef desc: remove connection at given index, moving others down to fill in
MethodDef proto bool RemoveIdx(int i)
MethodDef opts [u'CAT_Modify']
MethodDef name: CopyCons
MethodDef desc: copy connections from other con array, checking to make sure they are the same type (false if not)
MethodDef proto bool CopyCons(const ConArray&amp; cp)
MethodDef opts [u'CAt_Modify']
MethodDef names [u'Add', u'Alloc', u'CopyCons', u'FastEl', u'Free', u'InRange', u'RemoveIdx', u'Reset', u'SafeEl', u'SetSize', u'SetType']
########################################################################
TypeDef len: 19
TypeDef name:  RecvCons
TypeDef type: class
TypeDef desc: receiving connections: owns all the connection objects
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'CsRecvCons', u'SoRecvCons', u'LeabraRecvCons', u'BpRecvCons']
EnumDef name: TEXT
EnumDef val: TEXT
EnumDef: weights are saved as ascii text representation of digits (completely portable)
EnumDef name: BINARY
EnumDef val: BINARY
EnumDef: weights are written directly to the file in binary format (no loss in accuracy and more space efficient, but possibly non-portable)
EnumDef names: [u'WtSaveFormat']
MemberDef name: con_type
MemberDef type: TypeDef*
MemberDef opts [u'AKA_el_typ']
MemberDef cats [u'Structure']
MemberDef desc: type of connections to make
MemberDef name: cons
MemberDef type: ConArray
MemberDef opts [u'NO_FIND', u'NO_SAVE']
MemberDef cats [u'Structure']
MemberDef desc: the array of connections, in index correspondence with units
MemberDef name: units
MemberDef type: UnitPtrList
MemberDef opts [u'NO_FIND', u'NO_SAVE']
MemberDef cats [u'Structure']
MemberDef desc: pointers to the sending units of this connection (in index correspondence with cons)
MemberDef name: prjn
MemberDef type: Projection*
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: pointer the the projection which created this Group
MemberDef name: send_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: index into sending unit&apos;s send. list of SendCons
MethodDef name: Cn
MethodDef desc: gets the connection at the given index
MethodDef proto Connection_ptr Cn(int i)
MethodDef opts [u'CAT_Structure']
MethodDef name: Un
MethodDef desc: gets the unit at the given index
MethodDef proto Unit_ptr Un(int i)
MethodDef opts [u'CAT_Structure']
MethodDef name: GetConSpec
MethodDef desc: get the con spec for this connection group -- this is controlled entirely by the projection con_spec
MethodDef proto ConSpec_ptr GetConSpec()
MethodDef opts [u'CAT_Structure']
MethodDef name: SetConSpec
MethodDef desc: set the con spec to given value -- no ref counting or other checking is done -- should generally only be called by the Projection
MethodDef proto void SetConSpec(ConSpec* cs)
MethodDef opts [u'CAT_Structure']
MethodDef name: SetConType
MethodDef desc: set the type of connection to make
MethodDef proto void SetConType(TypeDef* cn_tp)
MethodDef opts [u'CAT_Structure']
MethodDef name: AllocCons
MethodDef desc: allocate given number of new connections (if projection knows this in advance, it is more efficient than doing them incrementally)
MethodDef proto void AllocCons(int no)
MethodDef opts [u'CAT_Structure']
MethodDef name: NewCon
MethodDef desc: create a connection to given unit
MethodDef proto Connection_ptr NewCon(Unit* un)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveConIdx
MethodDef desc: remove connection at given index
MethodDef proto bool RemoveConIdx(int i)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveConUn
MethodDef desc: remove connection from given unit
MethodDef proto bool RemoveConUn(Unit* un)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveAll
MethodDef desc: remove all conections
MethodDef proto void RemoveAll()
MethodDef opts [u'CAT_Structure']
MethodDef name: Reset
MethodDef desc: remove all conections
MethodDef proto void Reset()
MethodDef opts [u'CAT_Structure']
MethodDef name: MonitorVar
MethodDef desc: monitor (record in a datatable) the given variable on this set of receiving connections
MethodDef proto void MonitorVar(NetMonitor* net_mon, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: FindConFrom
MethodDef desc: find connection from given unit
MethodDef proto Connection_ptr FindConFrom(Unit* un, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'USE_RVAL', u'ARGC_1', u'CAT_Structure']
MethodDef name: FindRecipRecvCon
MethodDef desc: find the reciprocal for sending unit su to this receiving unit ru
MethodDef proto Connection_ptr FindRecipRecvCon(Unit* su, Unit* ru, Layer* ru_lay)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindRecipSendCon
MethodDef desc: find the reciprocal for receiving unit ru from this sending unit su
MethodDef proto Connection_ptr FindRecipSendCon(Unit* ru, Unit* su, Layer* su_lay)
MethodDef opts [u'CAT_Structure']
MethodDef name: Init_Weights
MethodDef desc: initialize weights for group
MethodDef proto void Init_Weights(Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Init_Weights
MethodDef desc: initialize weights for single connection
MethodDef proto void C_Init_Weights(Connection* cn, Unit* ru, Unit* su)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_dWt
MethodDef desc: initialize weight change variables
MethodDef proto void Init_dWt(Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Netin
MethodDef desc: compute net input (receiver based; recv group)
MethodDef proto float Compute_Netin(Unit* ru)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Dist
MethodDef desc: compute net input as distance between activation and weights
MethodDef proto float Compute_Dist(Unit* ru)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_dWt
MethodDef desc: compute weight changes (the fundamental learning problem)
MethodDef proto void Compute_dWt(Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights
MethodDef desc: update weight values from deltas
MethodDef proto void Compute_Weights(Unit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: TransformWeights
MethodDef desc: apply given transformation to weights
MethodDef proto void TransformWeights(const SimpleMathSpec&amp; trans)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Learning']
MethodDef name: AddNoiseToWeights
MethodDef desc: add noise to weights using given noise specification
MethodDef proto void AddNoiseToWeights(const Random&amp; noise_spec)
MethodDef opts [u'MENU', u'CAT_Learning']
MethodDef name: PruneCons
MethodDef desc: remove weights that (after pre-proc) meet relation to compare val
MethodDef proto int PruneCons(Unit* un, const SimpleMathSpec&amp; pre_proc, Relation::Relations rel, float cmp_val)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionCons
MethodDef desc: remove weights with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionCons(Unit* un, float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: ConValuesToArray
MethodDef desc: adds values of variable from the connections into the given array (false if var not found)
MethodDef proto bool ConValuesToArray(float_Array&amp; ary, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConValuesToMatrix
MethodDef desc: sets values of variable from the connections into the given matrix (uses flat index of cons to set: 0..size-1), returns false if matrix is not appropriately sized
MethodDef proto bool ConValuesToMatrix(float_Matrix&amp; mat, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConValuesFromArray
MethodDef desc: sets values of variable in the connections from the given array (false if var not found)
MethodDef proto bool ConValuesFromArray(float_Array&amp; ary, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConValuesFromMatrix
MethodDef desc: sets values of variable in the connections from the given array (false if var not found) -- uses flat index of cons to set: 0..size-1
MethodDef proto bool ConValuesFromMatrix(float_Matrix&amp; mat, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: SaveWeights_strm
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt)
MethodDef proto void SaveWeights_strm(ostream&amp; strm, Unit* ru, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: LoadWeights_strm
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary format) -- rval is taMisc::ReadTagStatus, TAG_END if successful
MethodDef proto int LoadWeights_strm(istream&amp; strm, Unit* ru, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SaveWeights
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto void SaveWeights(const taString&amp; fname, Unit* ru = __null, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_SAVE']
MethodDef name: LoadWeights
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary format) (leave fname empty to pull up file chooser)
MethodDef proto int LoadWeights(const taString&amp; fname, Unit* ru = __null, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_LOAD']
MethodDef name: Copy_Weights
MethodDef desc: copies weights from other con_group
MethodDef proto void Copy_Weights(const RecvCons* src)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: LinkSendCons
MethodDef desc: make connection links in all the sending units (assumes that these are initially empty, as after loading or copying)
MethodDef proto void LinkSendCons(Unit* ru)
MethodDef opts [u'CAT_Structure']
MethodDef names [u'AddNoiseToWeights', u'AllocCons', u'C_Init_Weights', u'Cn', u'Compute_Dist', u'Compute_Netin', u'Compute_Weights', u'Compute_dWt', u'ConValuesFromArray', u'ConValuesFromMatrix', u'ConValuesToArray', u'ConValuesToMatrix', u'Copy_Weights', u'FindConFrom', u'FindRecipRecvCon', u'FindRecipSendCon', u'GetConSpec', u'Init_Weights', u'Init_dWt', u'LesionCons', u'LinkSendCons', u'LoadWeights', u'LoadWeights_strm', u'MonitorVar', u'NewCon', u'PruneCons', u'RemoveAll', u'RemoveConIdx', u'RemoveConUn', u'Reset', u'SaveWeights', u'SaveWeights_strm', u'SetConSpec', u'SetConType', u'TransformWeights', u'Un']
########################################################################
TypeDef len: 17
TypeDef name:  SendCons
TypeDef type: class
TypeDef desc: sending connections: points to receiving connections
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'CsSendCons', u'SoSendCons', u'LeabraSendCons', u'BpSendCons']
MemberDef name: con_type
MemberDef type: TypeDef*
MemberDef opts [u'AKA_el_typ']
MemberDef cats [u'Structure']
MemberDef desc: type of connections to make
MemberDef name: cons
MemberDef type: ConPtrList
MemberDef opts [u'NO_FIND', u'NO_SAVE']
MemberDef cats [u'Structure']
MemberDef desc: list of pointers to receiving connections, in index correspondence with units;
MemberDef name: units
MemberDef type: UnitPtrList
MemberDef opts [u'NO_FIND', u'NO_SAVE']
MemberDef cats [u'Structure']
MemberDef desc: pointers to the receiving units of this connection, in index correspondence with cons
MemberDef name: prjn
MemberDef type: Projection*
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: pointer the the projection which created this Group
MemberDef name: recv_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: index into recv unit&apos;s list of RecvCons for this projection
MethodDef name: Cn
MethodDef desc: gets the connection at the given index
MethodDef proto Connection_ptr Cn(int i)
MethodDef opts [u'CAT_Structure']
MethodDef name: Un
MethodDef desc: gets the unit at the given index
MethodDef proto Unit_ptr Un(int i)
MethodDef opts [u'CAT_Structure']
MethodDef name: GetConSpec
MethodDef desc: get the con spec for this connection group -- this is controlled entirely by the projection con_spec
MethodDef proto ConSpec_ptr GetConSpec()
MethodDef opts [u'CAT_Structure']
MethodDef name: SetConSpec
MethodDef desc: set the con spec to given value -- no ref counting or other checking is done -- should generally only be called by the Projection
MethodDef proto void SetConSpec(ConSpec* cs)
MethodDef opts [u'CAT_Structure']
MethodDef name: SetConType
MethodDef desc: set the type of connection to make
MethodDef proto void SetConType(TypeDef* cn_tp)
MethodDef opts [u'CAT_Structure']
MethodDef name: LinkCon
MethodDef desc: make a link connection from given connection, unit (for sending groups)
MethodDef proto void LinkCon(Connection* cn, Unit* un)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveConIdx
MethodDef desc: remove connection at given index
MethodDef proto bool RemoveConIdx(int i)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveConUn
MethodDef desc: remove connection from given unit
MethodDef proto bool RemoveConUn(Unit* un)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveAll
MethodDef desc: remove all conections
MethodDef proto void RemoveAll()
MethodDef opts [u'CAT_Structure']
MethodDef name: Reset
MethodDef desc: remove all conections
MethodDef proto void Reset()
MethodDef opts [u'CAT_Structure']
MethodDef name: FindConFrom
MethodDef desc: find connection from given unit
MethodDef proto Connection_ptr FindConFrom(Unit* un, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'USE_RVAL', u'ARGC_1', u'CAT_Structure']
MethodDef name: Send_Netin
MethodDef desc: send net input (sender based; send group)
MethodDef proto void Send_Netin(Unit* su)
MethodDef opts [u'CAT_Activation']
MethodDef name: ConValuesToArray
MethodDef desc: adds values of variable from the connections into the given array (false if var not found)
MethodDef proto bool ConValuesToArray(float_Array&amp; ary, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConValuesToMatrix
MethodDef desc: sets values of variable from the connections into the given matrix (uses flat index of cons to set: 0..size-1), returns false if matrix is not appropriately sized
MethodDef proto bool ConValuesToMatrix(float_Matrix&amp; mat, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConValuesFromArray
MethodDef desc: sets values of variable in the connections from the given array (false if var not found)
MethodDef proto bool ConValuesFromArray(float_Array&amp; ary, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConValuesFromMatrix
MethodDef desc: sets values of variable in the connections from the given array (false if var not found) -- uses flat index of cons to set: 0..size-1
MethodDef proto bool ConValuesFromMatrix(float_Matrix&amp; mat, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: MonitorVar
MethodDef desc: monitor (record in a datatable) the given variable on this set of connections
MethodDef proto void MonitorVar(NetMonitor* net_mon, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef names [u'Cn', u'ConValuesFromArray', u'ConValuesFromMatrix', u'ConValuesToArray', u'ConValuesToMatrix', u'FindConFrom', u'GetConSpec', u'LinkCon', u'MonitorVar', u'RemoveAll', u'RemoveConIdx', u'RemoveConUn', u'Reset', u'Send_Netin', u'SetConSpec', u'SetConType', u'Un']
########################################################################
TypeDef len: 17
TypeDef name:  UnitSpec
TypeDef type: class
TypeDef desc: Generic Unit Specification
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec']
TypeDef children: [u'CsUnitSpec', u'SoUnitSpec', u'LeabraUnitSpec', u'BpUnitSpec']
MemberDef name: act_range
MemberDef type: MinMaxRange
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: range of activation for units
MemberDef name: bias_spec
MemberDef type: ConSpec_SPtr
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: con spec that controls the bias connection on the unit
MemberDef name: sse_tol
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Statistic']
MemberDef desc: tolerance for computing sum-squared error on a per-unit basis
MethodDef name: Init_Acts
MethodDef desc: initialize unit activation state variables
MethodDef proto void Init_Acts(Unit* u)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_dWt
MethodDef desc: initialize the weight change variables
MethodDef proto void Init_dWt(Unit* u)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_Weights
MethodDef desc: init weight state variables
MethodDef proto void Init_Weights(Unit* u)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Netin
MethodDef desc: compute net input: activations times weights (receiver based)
MethodDef proto void Compute_Netin(Unit* u)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_Netin
MethodDef desc: send net input to all units I send to (sender based)
MethodDef proto void Send_Netin(Unit* u)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinToLay
MethodDef desc: send net input only to units in given layer (not used by default)
MethodDef proto void Send_NetinToLay(Unit* u, Layer* tolay)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Act
MethodDef desc: compute the activation value of the unit: what it sends to other units
MethodDef proto void Compute_Act(Unit* u)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_dWt
MethodDef desc: compute change in weights: the mechanism of learning
MethodDef proto void Compute_dWt(Unit* u)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights
MethodDef desc: update weights from deltas
MethodDef proto void Compute_Weights(Unit* u)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SSE
MethodDef desc: compute sum squared error for this unit
MethodDef proto float Compute_SSE(bool&amp; has_targ, Unit* u)
MethodDef opts [u'CAT_Statistic']
MethodDef name: BuildBiasCons
MethodDef desc: build the bias connections according to specified type
MethodDef proto void BuildBiasCons()
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'MENU_SEP_BEFORE', u'CAT_Structure']
MethodDef name: CheckConfig_Unit
MethodDef desc: check for for misc configuration settings required by different algorithms
MethodDef proto bool CheckConfig_Unit(Unit* un, bool quiet = false)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef names [u'BuildBiasCons', u'CheckConfig_Unit', u'Compute_Act', u'Compute_Netin', u'Compute_SSE', u'Compute_Weights', u'Compute_dWt', u'Init_Acts', u'Init_Weights', u'Init_dWt', u'Send_Netin', u'Send_NetinToLay']
########################################################################
TypeDef len: 19
TypeDef name:  Unit
TypeDef type: class
TypeDef desc: Generic unit
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'CsUnit', u'SoUnit', u'LeabraUnit', u'BpUnit']
EnumDef name: NO_EXTERNAL
EnumDef val: NO_EXTERNAL
EnumDef: no input
EnumDef name: TARG
EnumDef val: TARG
EnumDef: a target value used to train the network (value goes in targ field of unit)
EnumDef name: EXT
EnumDef val: EXT
EnumDef: an external input value that drives activations (value goes in ext field of unit)
EnumDef name: COMP
EnumDef val: COMP
EnumDef: a comparison value used for computing satistics but not training the network (value goes in targ field of unit)
EnumDef name: TARG_EXT
EnumDef val: TARG_EXT
EnumDef: as both external input and target value
EnumDef name: COMP_TARG
EnumDef val: COMP_TARG
EnumDef: as a comparision and target layer
EnumDef name: COMP_EXT
EnumDef val: COMP_EXT
EnumDef: as a comparison and external input layer
EnumDef name: COMP_TARG_EXT
EnumDef val: COMP_TARG_EXT
EnumDef: as a comparison, target, and external input layer
EnumDef names: [u'ExtType']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of unit (empty by default)
MemberDef name: ext_flag
MemberDef type: Unit::ExtType
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: tells what kind of external input unit received
MemberDef name: targ
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: target value: drives learning to produce this activation value
MemberDef name: ext
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: external input: drives activation of unit from outside influences (e.g., sensory input)
MemberDef name: act
MemberDef type: float
MemberDef opts [u'DMEM_SHARE_SET_2']
MemberDef cats [u'Activation']
MemberDef desc: activation value -- what the unit communicates to others
MemberDef name: net
MemberDef type: float
MemberDef opts [u'DMEM_SHARE_SET_1']
MemberDef cats [u'Activation']
MemberDef desc: net input value -- what the unit receives from others
MemberDef name: wt_prjn
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Statistic']
MemberDef desc: weight projection value -- computed by Network::ProjectUnitWeights (triggered in GUI by setting wt prjn variable in netview control panel to point to a layer instead of NULL) -- represents weight values projected through any intervening layers from source unit (selected unit in netview or passed to ProjectUnitWeights function directly)
MemberDef name: snap
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Statistic']
MemberDef desc: current snapshot value, as computed by the Snapshot function -- this can be displayed as a border around the units in the netview
MemberDef name: recv
MemberDef type: RecvCons_List
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: Receiving connections, one set of connections for each projection (collection of connections) received from other units
MemberDef name: send
MemberDef type: SendCons_List
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: Sending connections, one set of connections for each projection (collection of connections) sent from other units
MemberDef name: bias
MemberDef type: RecvCons
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: bias weight connection (type determined in unit spec) -- provides intrinsic activation in absence of other inputs
MemberDef name: n_recv_cons
MemberDef type: int
MemberDef opts [u'DMEM_SHARE_SET_0', u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Structure']
MemberDef desc: total number of receiving connections
MemberDef name: pos
MemberDef type: TDCoord
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: position in space relative to owning group, layer
MethodDef name: own_lay_
MethodDef proto Layer_ptr own_lay_()
MethodDef name: GetUnitSpec
MethodDef desc: get the unit spec for this unit -- this is controlled entirely by the layer and all units in the layer have the same unit spec
MethodDef proto UnitSpec_ptr GetUnitSpec()
MethodDef opts [u'CAT_Structure']
MethodDef name: SetUnitSpec
MethodDef desc: set the unit spec to given value -- no ref counting or other checking is done
MethodDef proto void SetUnitSpec(UnitSpec* us)
MethodDef opts [u'CAT_Structure']
MethodDef name: Copy_Weights
MethodDef desc: copies weights from other unit (incl wts assoc with unit bias member)
MethodDef proto void Copy_Weights(const Unit* src, Projection* prjn = __null)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SaveWeights_strm
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt)
MethodDef proto void SaveWeights_strm(ostream&amp; strm, Projection* prjn = __null, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: LoadWeights_strm
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt) -- rval is taMisc::ReadTagStatus, TAG_END if successful
MethodDef proto int LoadWeights_strm(istream&amp; strm, Projection* prjn = __null, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SaveWeights
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto void SaveWeights(const taString&amp; fname, Projection* prjn = __null, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_SAVE']
MethodDef name: LoadWeights
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto int LoadWeights(const taString&amp; fname, Projection* prjn = __null, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_LOAD']
MethodDef name: SetExtFlag
MethodDef desc: set ext flag for what type of input data we receive
MethodDef proto void SetExtFlag(Unit::ExtType flg)
MethodDef opts [u'CAT_Activation']
MethodDef name: UnSetExtFlag
MethodDef desc: un-set ext flag for what type of input data we receive
MethodDef proto void UnSetExtFlag(Unit::ExtType flg)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_InputData
MethodDef desc: initialize unit external input data variables
MethodDef proto void Init_InputData()
MethodDef opts [u'MENU', u'MENU_ON_Actions']
MethodDef name: Init_Netin
MethodDef desc: initialize netinput state prior to computing it (for sender-based)
MethodDef proto void Init_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_NetinDelta
MethodDef desc: initialize netinput state prior to computing it (for sender-delta-based)
MethodDef proto void Init_NetinDelta()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Acts
MethodDef desc: initialize unit state variables
MethodDef proto void Init_Acts()
MethodDef opts [u'MENU', u'CAT_Activation']
MethodDef name: Init_dWt
MethodDef desc: initialze weight change variables
MethodDef proto void Init_dWt()
MethodDef opts [u'MENU', u'CAT_Learning']
MethodDef name: Init_Weights
MethodDef desc: Initialize weight values
MethodDef proto void Init_Weights()
MethodDef opts [u'MENU', u'CAT_Learning']
MethodDef name: Compute_Netin
MethodDef desc: compute net input from other units
MethodDef proto void Compute_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_Netin
MethodDef desc: send net input to other units
MethodDef proto void Send_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinToLay
MethodDef desc: send net input to other units in given layer
MethodDef proto void Send_NetinToLay(Layer* tolay)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Act
MethodDef desc: compute activation value: what we send to others
MethodDef proto void Compute_Act()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_dWt
MethodDef desc: compute weight changes: the essence of learning
MethodDef proto void Compute_dWt()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights
MethodDef desc: update weight values from weight change variables
MethodDef proto void Compute_Weights()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SSE
MethodDef desc: compute sum-squared-error of activations versus target values (standard measure of performance)
MethodDef proto float Compute_SSE(bool&amp; has_targ)
MethodDef opts [u'CAT_Statistic']
MethodDef name: ApplyInputData
MethodDef desc: apply external input or target value to unit
MethodDef proto void ApplyInputData(float val, Unit::ExtType act_ext_flags, Random* ran = __null)
MethodDef opts [u'CAT_Activation']
MethodDef name: BuildUnits
MethodDef desc: build unit: make sure bias connection is created and right type
MethodDef proto bool BuildUnits()
MethodDef opts [u'CAT_Structure']
MethodDef name: CheckBuild
MethodDef desc: check if network is built
MethodDef proto bool CheckBuild(bool quiet = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConnectAlloc
MethodDef desc: pre-allocate given no of connections (for better memory layout)
MethodDef proto void ConnectAlloc(int no, Projection* prjn, RecvCons*&amp; cgp = rcg_rval)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConnectFrom
MethodDef desc: make a recv connection from given unit to this unit using given projection
MethodDef proto Connection_ptr ConnectFrom(Unit* su, Projection* prjn, RecvCons*&amp; recv_gp = rcg_rval, SendCons*&amp; send_gp = scg_rval)
MethodDef opts [u'CAT_Structure']
MethodDef name: ConnectFromCk
MethodDef desc: does ConnectFrom but checks for an existing connection to prevent double-connections! -- note that this is expensive!
MethodDef proto Connection_ptr ConnectFromCk(Unit* su, Projection* prjn, RecvCons*&amp; recv_gp = rcg_rval, SendCons*&amp; send_gp = scg_rval)
MethodDef opts [u'CAT_Structure']
MethodDef name: DisConnectFrom
MethodDef desc: remove connection from given unit (projection is optional)
MethodDef proto bool DisConnectFrom(Unit* su, Projection* prjn = __null)
MethodDef opts [u'CAT_Structure']
MethodDef name: DisConnectAll
MethodDef desc: disconnect unit from all other units
MethodDef proto void DisConnectAll()
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'CAT_Structure']
MethodDef name: CountRecvCons
MethodDef desc: count total number of receiving connections
MethodDef proto int CountRecvCons()
MethodDef opts [u'CAT_Structure']
MethodDef name: GetLocalistName
MethodDef desc: look for a receiving projection from a single unit, which has a name: if found, set our name to that name
MethodDef proto void GetLocalistName()
MethodDef opts [u'CAT_Structure']
MethodDef name: TransformWeights
MethodDef desc: apply given transformation to weights
MethodDef proto void TransformWeights(const SimpleMathSpec&amp; trans, Projection* prjn = __null)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Learning']
MethodDef name: AddNoiseToWeights
MethodDef desc: add noise to weights using given noise specification
MethodDef proto void AddNoiseToWeights(const Random&amp; noise_spec, Projection* prjn = __null)
MethodDef opts [u'MENU', u'CAT_Learning']
MethodDef name: PruneCons
MethodDef desc: remove weights that (after pre-proc) meet relation to compare val
MethodDef proto int PruneCons(const SimpleMathSpec&amp; pre_proc, Relation::Relations rel, float cmp_val, Projection* prjn = __null)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionCons
MethodDef desc: remove connections with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionCons(float p_lesion, bool permute = true, Projection* prjn = __null)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: MonitorVar
MethodDef desc: monitor (record in a datatable) the given variable on this unit
MethodDef proto void MonitorVar(NetMonitor* net_mon, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: Snapshot
MethodDef desc: take a snapshot of given variable: assign snap value on unit to given variable value, optionally using simple math operation on that value. if arg_is_snap is true, then the &apos;arg&apos; argument to the math operation is the current value of the snap variable. for example, to compute intersection of variable with snap value, use MIN and arg_is_snap.
MethodDef proto bool Snapshot(const taString&amp; variable, SimpleMathSpec&amp; math_op, bool arg_is_snap = true)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: VarToTable
MethodDef desc: send given variable to data table -- number of columns depends on variable (for connection variables, specify r. or s. (e.g., r.wt)) -- this uses a NetMonitor internally, so see documentation there for more information
MethodDef proto void VarToTable(DataTable* dt, const taString&amp; variable)
MethodDef opts [u'MENU', u'NULL_OK_0', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef name: LinkSendCons
MethodDef desc: link sending connections based on recv cons (after load, copy)
MethodDef proto void LinkSendCons()
MethodDef opts [u'CAT_Structure']
MethodDef name: GetMyLeafIndex
MethodDef desc: compute leaf index from my individual index in an efficient manner
MethodDef proto int GetMyLeafIndex()
MethodDef name: GetMyAbsPos
MethodDef desc: get the absolute position of this unit relative to the layer, taking into account any unit groups
MethodDef proto TwoDCoord GetMyAbsPos()
MethodDef names [u'AddNoiseToWeights', u'ApplyInputData', u'BuildUnits', u'CheckBuild', u'Compute_Act', u'Compute_Netin', u'Compute_SSE', u'Compute_Weights', u'Compute_dWt', u'ConnectAlloc', u'ConnectFrom', u'ConnectFromCk', u'Copy_Weights', u'CountRecvCons', u'DisConnectAll', u'DisConnectFrom', u'GetLocalistName', u'GetMyAbsPos', u'GetMyLeafIndex', u'GetUnitSpec', u'Init_Acts', u'Init_InputData', u'Init_Netin', u'Init_NetinDelta', u'Init_Weights', u'Init_dWt', u'LesionCons', u'LinkSendCons', u'LoadWeights', u'LoadWeights_strm', u'MonitorVar', u'PruneCons', u'SaveWeights', u'SaveWeights_strm', u'Send_Netin', u'Send_NetinToLay', u'SetExtFlag', u'SetUnitSpec', u'Snapshot', u'TransformWeights', u'UnSetExtFlag', u'VarToTable', u'own_lay_']
########################################################################
TypeDef len: 17
TypeDef name:  ProjectionSpec
TypeDef type: class
TypeDef desc: Specifies the connectivity between layers (ie. full vs. partial)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec']
TypeDef children: [u'FullPrjnSpec', u'TesselPrjnSpec', u'OneToOnePrjnSpec', u'UniformRndPrjnSpec', u'PolarRndPrjnSpec', u'SymmetricPrjnSpec', u'ScriptPrjnSpec', u'CustomPrjnSpec', u'GpRndTesselPrjnSpec', u'TiledRFPrjnSpec', u'TiledGpRFPrjnSpec', u'TiledNovlpPrjnSpec', u'ScalarValSelfPrjnSpec', u'V1RFPrjnSpec', u'SaliencyPrjnSpec', u'GpAggregatePrjnSpec']
MemberDef name: self_con
MemberDef type: bool
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: whether to create self-connections or not (if applicable)
MemberDef name: init_wts
MemberDef type: bool
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: whether this projection spec does weight init (else conspec)
MethodDef name: RemoveCons
MethodDef desc: deletes any existing connections
MethodDef proto void RemoveCons(Projection* prjn)
MethodDef opts [u'CAT_Structure']
MethodDef name: PreConnect
MethodDef desc: Prepare to connect (init con_groups)
MethodDef proto void PreConnect(Projection* prjn)
MethodDef opts [u'CAT_Structure']
MethodDef name: Connect_impl
MethodDef desc: actually implements specific connection code
MethodDef proto void Connect_impl(Projection* na)
MethodDef opts [u'CAT_Structure']
MethodDef name: Connect
MethodDef desc: connects the network, first removing existing cons, and inits weights
MethodDef proto void Connect(Projection* prjn)
MethodDef opts [u'CAT_Structure']
MethodDef name: ProbAddCons
MethodDef desc: probabilistically add a proportion of new connections to replace those pruned previously, init_wt = initial weight value of new connection
MethodDef proto int ProbAddCons(Projection* prjn, float p_add_con, float init_wt = 0.0)
MethodDef opts [u'CAT_Structure']
MethodDef name: Init_dWt
MethodDef desc: initializes the weight change variables
MethodDef proto void Init_dWt(Projection* prjn)
MethodDef opts [u'CAT_Weights']
MethodDef name: Init_Weights
MethodDef desc: initializes the weiht values
MethodDef proto void Init_Weights(Projection* prjn)
MethodDef opts [u'CAT_Weights']
MethodDef name: CheckConnect
MethodDef desc: check if projection is connected
MethodDef proto bool CheckConnect(Projection* prjn, bool quiet = false)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: C_Init_Weights
MethodDef desc: custom initialize weights in this con group for given receiving unit ru
MethodDef proto void C_Init_Weights(Projection* prjn, RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Weights']
MethodDef names [u'C_Init_Weights', u'CheckConnect', u'Connect', u'Connect_impl', u'Init_Weights', u'Init_dWt', u'PreConnect', u'ProbAddCons', u'RemoveCons']
########################################################################
TypeDef len: 19
TypeDef name:  Projection
TypeDef type: class
TypeDef desc: Projection describes connectivity between layers (from receivers perspective)
TypeDef cats:, [u'Network']
TypeDef opts:, [u'STEM_BASE', u'SCOPE_Network', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'LeabraPrjn']
EnumDef name: NEXT
EnumDef val: NEXT
EnumDef: Recv from the next layer in network
EnumDef name: PREV
EnumDef val: PREV
EnumDef: Recv from the previous layer in network
EnumDef name: SELF
EnumDef val: SELF
EnumDef: Recv from the same layer
EnumDef name: CUSTOM
EnumDef val: CUSTOM
EnumDef: Recv from the layer spec&apos;d in the projection
EnumDef name: FM_INPUT
EnumDef val: FM_INPUT
EnumDef: from layer is closer to input signals than recv layer
EnumDef name: FM_OUTPUT
EnumDef val: FM_OUTPUT
EnumDef: from layer is closer to output signals than recv layer
EnumDef name: LATERAL
EnumDef val: LATERAL
EnumDef: from layer is same distance from input and output signals as this layer
EnumDef name: DIR_UNKNOWN
EnumDef val: DIR_UNKNOWN
EnumDef: direction not set
EnumDef names: [u'PrjnDirection', u'PrjnSource']
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: name of the projection -- this is generated automatically based on the from name
MemberDef name: from_type
MemberDef type: Projection::PrjnSource
MemberDef opts [u'APPLY_IMMED']
MemberDef cats [u'Structure']
MemberDef desc: Source of the projections
MemberDef name: from
MemberDef type: LayerRef
MemberDef opts [u'CONDEDIT_ON_from_type:CUSTOM']
MemberDef cats [u'Structure']
MemberDef desc: layer receiving from (set this for custom)
MemberDef name: spec
MemberDef type: ProjectionSpec_SPtr
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: spec for this item
MemberDef name: con_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_Connection']
MemberDef cats [u'Structure']
MemberDef desc: Type of connection
MemberDef name: recvcons_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_RecvCons']
MemberDef cats [u'Structure']
MemberDef desc: Type of receiving connection group to make
MemberDef name: sendcons_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_SendCons']
MemberDef cats [u'Structure']
MemberDef desc: Type of sending connection group to make
MemberDef name: con_spec
MemberDef type: ConSpec_SPtr
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: conspec to use for creating connections
MemberDef name: recv_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Structure']
MemberDef desc: receiving con_group index
MemberDef name: send_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Structure']
MemberDef desc: sending con_group index
MemberDef name: recv_n
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'DEF_1']
MemberDef cats [u'Structure']
MemberDef desc: number of receiving con_groups allocated to this projection: almost always 1 -- some things won&apos;t work right if &gt; 1 (e.g., copying)
MemberDef name: send_n
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Structure']
MemberDef desc: number of sending con_groups: almost always 1 -- some things won&apos;t work right if &gt; 1 (e.g., copying)
MemberDef name: direction
MemberDef type: Projection::PrjnDirection
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: which direction does this projection go (in terms of distance from input and output layers) -- auto computed by Compute_PrjnDirection or you can manually set; optionally used by only some algorithms
MethodDef name: SetFrom
MethodDef desc: set where to receive from based on selections
MethodDef proto void SetFrom()
MethodDef opts [u'CAT_Structure']
MethodDef name: SetCustomFrom
MethodDef desc: set a CUSTOM projection from given layer (if from_lay == layer, turns into SELF)
MethodDef proto void SetCustomFrom(Layer* from_lay)
MethodDef opts [u'CAT_Structure']
MethodDef name: Copy_Weights
MethodDef desc: copies weights from other projection
MethodDef proto void Copy_Weights(const Projection* src)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'CAT_Weights']
MethodDef name: SaveWeights_strm
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt)
MethodDef proto void SaveWeights_strm(ostream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: LoadWeights_strm
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt)
MethodDef proto int LoadWeights_strm(istream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SaveWeights
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto void SaveWeights(const taString&amp; fname, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_SAVE']
MethodDef name: LoadWeights
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto int LoadWeights(const taString&amp; fname, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_LOAD']
MethodDef name: RemoveCons
MethodDef desc: Reset all connections for this projection
MethodDef proto void RemoveCons()
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'CONFIRM', u'CAT_Structure']
MethodDef name: PreConnect
MethodDef desc: pre-configure connection state
MethodDef proto void PreConnect()
MethodDef opts [u'CAT_Structure']
MethodDef name: Connect
MethodDef desc: Make all connections for this projection (resets first)
MethodDef proto void Connect()
MethodDef opts [u'BUTTON', u'CONFIRM', u'CAT_Structure']
MethodDef name: Connect_impl
MethodDef desc: actually do the connecting
MethodDef proto void Connect_impl()
MethodDef opts [u'CAT_Structure']
MethodDef name: ProbAddCons
MethodDef desc: probabilistically add a proportion of new connections to replace those pruned previously, init_wt = initial weight value of new connection
MethodDef proto int ProbAddCons(float p_add_con, float init_wt = 0.0)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: Init_dWt
MethodDef desc: Initialize weight changes for this projection
MethodDef proto void Init_dWt()
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Weights']
MethodDef name: Init_Weights
MethodDef desc: Initialize weight state for this projection
MethodDef proto void Init_Weights()
MethodDef opts [u'BUTTON', u'CONFIRM', u'CAT_Weights']
MethodDef name: C_Init_Weights
MethodDef desc: custom initialize weights in this con group for given receiving unit ru
MethodDef proto void C_Init_Weights(RecvCons* cg, Unit* ru)
MethodDef opts [u'CAT_Weights']
MethodDef name: TransformWeights
MethodDef desc: apply given transformation to weights
MethodDef proto void TransformWeights(const SimpleMathSpec&amp; trans)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Weights']
MethodDef name: AddNoiseToWeights
MethodDef desc: add noise to weights using given noise specification
MethodDef proto void AddNoiseToWeights(const Random&amp; noise_spec)
MethodDef opts [u'MENU', u'CAT_Weights']
MethodDef name: PruneCons
MethodDef desc: remove weights that (after pre-proc) meet relation to compare val
MethodDef proto int PruneCons(const SimpleMathSpec&amp; pre_proc, Relation::Relations rel, float cmp_val)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Weights']
MethodDef name: LesionCons
MethodDef desc: remove connections with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionCons(float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: UpdateConSpecs
MethodDef desc: update con specs for all connection groups for this projection in the network to use con_spec (only if changed from last update -- force = do regardless); returns true if changed and all cons can use given spec
MethodDef proto bool UpdateConSpecs(bool force = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: SetPrjnSpec
MethodDef desc: set the projection spec (connectivity pattern) for this projection
MethodDef proto bool SetPrjnSpec(ProjectionSpec* sp)
MethodDef opts [u'BUTTON', u'CAT_Structure', u'INIT_ARGVAL_ON_spec.spec']
MethodDef name: SetConSpec
MethodDef desc: set the con spec for all connections in this prjn
MethodDef proto bool SetConSpec(ConSpec* sp)
MethodDef opts [u'BUTTON', u'CAT_Structure', u'INIT_ARGVAL_ON_con_spec.spec']
MethodDef name: CheckConnect
MethodDef desc: check if projection is connected
MethodDef proto bool CheckConnect(bool quiet = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: FixPrjnIndexes
MethodDef desc: fix the indicies of the connection groups (recv_idx, send_idx)
MethodDef proto void FixPrjnIndexes()
MethodDef opts [u'MENU', u'CAT_Structure']
MethodDef name: ReplaceConSpec
MethodDef desc: switch any connections/projections using old_sp to using new_sp
MethodDef proto int ReplaceConSpec(ConSpec* old_sp, ConSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplacePrjnSpec
MethodDef desc: switch any projections using old_sp to using new_sp
MethodDef proto int ReplacePrjnSpec(ProjectionSpec* old_sp, ProjectionSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: SetConType
MethodDef desc: set the connection type for all connections in this prjn
MethodDef proto bool SetConType(TypeDef* td)
MethodDef opts [u'BUTTON', u'CAT_Structure', u'TYPE_Connection', u'INIT_ARGVAL_ON_con_type']
MethodDef name: SetRecvConsType
MethodDef desc: set the receiving connection group type for all connections in this prjn
MethodDef proto bool SetRecvConsType(TypeDef* td)
MethodDef opts [u'BUTTON', u'CAT_Structure', u'TYPE_RecvCons', u'INIT_ARGVAL_ON_recvcons_type']
MethodDef name: SetSendConsType
MethodDef desc: set the connection group type for all connections in this prjn
MethodDef proto bool SetSendConsType(TypeDef* td)
MethodDef opts [u'BUTTON', u'CAT_Structure', u'TYPE_SendCons', u'INIT_ARGVAL_ON_sendcons_type']
MethodDef name: MonitorVar
MethodDef desc: monitor (record in a datatable) the given variable on this projection
MethodDef proto void MonitorVar(NetMonitor* net_mon, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: WeightsToTable
MethodDef desc: copy entire set of projection weights to given table (e.g., for analysis), with one row per receiving unit, and one column (name is layer name if not otherwise specified) that has a float matrix cell of the geometry of the sending layer
MethodDef proto void WeightsToTable(DataTable* dt, const taString&amp; col_nm)
MethodDef opts [u'MENU', u'NULL_OK', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef name: VarToTable
MethodDef desc: send given variable to data table -- number of columns depends on variable (for connection variables, specify r. or s. (e.g., r.wt)) -- this uses a NetMonitor internally, so see documentation there for more information
MethodDef proto void VarToTable(DataTable* dt, const taString&amp; variable)
MethodDef opts [u'MENU', u'NULL_OK_0', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef names [u'AddNoiseToWeights', u'C_Init_Weights', u'CheckConnect', u'Connect', u'Connect_impl', u'Copy_Weights', u'FixPrjnIndexes', u'Init_Weights', u'Init_dWt', u'LesionCons', u'LoadWeights', u'LoadWeights_strm', u'MonitorVar', u'PreConnect', u'ProbAddCons', u'PruneCons', u'RemoveCons', u'ReplaceConSpec', u'ReplacePrjnSpec', u'SaveWeights', u'SaveWeights_strm', u'SetConSpec', u'SetConType', u'SetCustomFrom', u'SetFrom', u'SetPrjnSpec', u'SetRecvConsType', u'SetSendConsType', u'TransformWeights', u'UpdateConSpecs', u'VarToTable', u'WeightsToTable']
########################################################################
TypeDef len: 19
TypeDef name:  Layer
TypeDef type: class
TypeDef desc: layer containing units
TypeDef cats:, [u'Network']
TypeDef opts:, [u'EXT_lay', u'COMPRESS', u'SCOPE_Network', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'CsLayer', u'SoLayer', u'LeabraLayer', u'BpLayer']
EnumDef name: DMEM_DIST_DEFAULT
EnumDef val: DMEM_DIST_DEFAULT
EnumDef: distribute units to different processors for distributed memory processing according to the default sequential scheme
EnumDef name: DMEM_DIST_UNITGP
EnumDef val: DMEM_DIST_UNITGP
EnumDef: distribute units according to unit groups, which can be less even but allows for shared weights by unit group
EnumDef name: HIDDEN
EnumDef val: HIDDEN
EnumDef: layer does not receive external input of any form
EnumDef name: INPUT
EnumDef val: INPUT
EnumDef: layer receives external input (EXT) that drives activation states directly
EnumDef name: TARGET
EnumDef val: TARGET
EnumDef: layer receives a target input (TARG) that determines correct activation states, used for training
EnumDef name: OUTPUT
EnumDef val: OUTPUT
EnumDef: layer produces a visible output response but is not a target. any external input serves as a comparison (COMP) against current activations.
EnumDef name: LF_NONE
EnumDef val: LF_NONE
EnumDef name: LESIONED
EnumDef val: LESIONED
EnumDef: this layer is temporarily lesioned (inactivated for all network-level processing functions)
EnumDef name: ICONIFIED
EnumDef val: ICONIFIED
EnumDef: only display a single unit showing icon_value (set in algorithm-specific manner)
EnumDef name: NO_ADD_SSE
EnumDef val: NO_ADD_SSE
EnumDef: do NOT add this layer&apos;s sse value (sum squared error) to the overall network sse value: this is for all types of SSE computed for ext_flag = TARG (layer_type = TARGET) or ext_flag = COMP (layer_type = OUTPUT) layers
EnumDef name: NO_ADD_COMP_SSE
EnumDef val: NO_ADD_COMP_SSE
EnumDef: do NOT add this layer&apos;s sse value (sum squared error) to the overall network sse value: ONLY for ext_flag = COMP (OUTPUT) flag settings (NO_ADD_SSE blocks all contributions) -- this is relevant if the layer type or ext_flags are switched dynamically and only TARGET errors are relevant
EnumDef name: PROJECT_WTS_NEXT
EnumDef val: PROJECT_WTS_NEXT
EnumDef: this layer is next in line for weight projection operation
EnumDef name: PROJECT_WTS_DONE
EnumDef val: PROJECT_WTS_DONE
EnumDef: this layer is done with weight projection operation (prevents loops)
EnumDef names: [u'DMemDist', u'LayerFlags', u'LayerType']
MemberDef name: flags
MemberDef type: Layer::LayerFlags
MemberDef desc: flags controlling various aspects of layer funcdtion
MemberDef name: layer_type
MemberDef type: Layer::LayerType
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: type of layer: determines default way that external inputs are presented, and helps with other automatic functions (e.g., wizards)
MemberDef name: pos
MemberDef type: PosTDCoord
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: position of layer relative to the overall network position (0,0,0 is lower left hand corner)
MemberDef name: un_geom
MemberDef type: XYNGeom
MemberDef opts [u'AKA_geom']
MemberDef cats [u'Structure']
MemberDef desc: two-dimensional layout and number of units within the layer or each unit group within the layer
MemberDef name: unit_groups
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats [u'Structure']
MemberDef desc: organize units into subgroups within the layer, with each unit group having the geometry specified by un_geom
MemberDef name: gp_geom
MemberDef type: XYNGeom
MemberDef opts [u'CONDEDIT_ON_unit_groups:true']
MemberDef cats [u'Structure']
MemberDef desc: geometry of sub-groups (if unit_groups)
MemberDef name: gp_spc
MemberDef type: PosTwoDCoord
MemberDef opts [u'CONDEDIT_ON_unit_groups:true']
MemberDef cats [u'Structure']
MemberDef desc: spacing between sub-groups (if unit_groups)
MemberDef name: flat_geom
MemberDef type: XYNGeom
MemberDef opts [u'EXPERT', u'READ_ONLY', u'NO_SAVE']
MemberDef cats [u'Structure']
MemberDef desc: geometry of the units flattening out over unit groups (same as un_geom if !unit_groups; un_geom * gp_geom otherwise)
MemberDef name: projections
MemberDef type: Projection_Group
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: group of receiving projections
MemberDef name: units
MemberDef type: Unit_Group
MemberDef opts [u'NO_SEARCH']
MemberDef cats [u'Structure']
MemberDef desc: units or groups of units
MemberDef name: unit_spec
MemberDef type: UnitSpec_SPtr
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: default unit specification for units in this layer
MemberDef name: ext_flag
MemberDef type: Unit::ExtType
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: indicates which kind of external input layer received
MemberDef name: sent_already
MemberDef type: int_Array
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: array of layer addresses for coordinating sending of net input to this layer
MemberDef name: dmem_dist
MemberDef type: Layer::DMemDist
MemberDef opts []
MemberDef cats [u'DMem']
MemberDef desc: how to distribute units across multiple distributed memory processors
MemberDef name: dist
MemberDef type: LayerDistances
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: distances from closest input/output layers to this layer
MemberDef name: output_name
MemberDef type: taString
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: name for the output produced by the network (algorithm/program dependent, e.g., unit name of most active unit)
MemberDef name: sse
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: sum squared error over the network, for the current external input pattern
MemberDef name: icon_value
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: value to display if layer is iconified (algorithmically determined)
MethodDef name: SetLayerFlag
MethodDef desc: set flag state on
MethodDef proto void SetLayerFlag(Layer::LayerFlags flg)
MethodDef name: ClearLayerFlag
MethodDef desc: clear flag state (set off)
MethodDef proto void ClearLayerFlag(Layer::LayerFlags flg)
MethodDef name: HasLayerFlag
MethodDef desc: check if flag is set
MethodDef proto bool HasLayerFlag(Layer::LayerFlags flg)
MethodDef name: SetLayerFlagState
MethodDef desc: set flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetLayerFlagState(Layer::LayerFlags flg, bool on)
MethodDef name: lesioned
MethodDef desc: check if this layer is lesioned -- use in function calls
MethodDef proto bool lesioned()
MethodDef name: Copy_Weights
MethodDef desc: copies weights from other layer (incl wts assoc with unit bias member)
MethodDef proto void Copy_Weights(const Layer* src)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'CAT_ObjectMgmt']
MethodDef name: SaveWeights_strm
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt)
MethodDef proto void SaveWeights_strm(ostream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: LoadWeights_strm
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt) -- rval is taMisc::ReadTagStatus = END_TAG if successful
MethodDef proto int LoadWeights_strm(istream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SkipWeights_strm
MethodDef desc: skip over weight values in from a simple ordered list of weights (optionally in binary fmt) -- rval is taMisc::ReadTagStatus = END_TAG if successful
MethodDef proto int SkipWeights_strm(istream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SaveWeights
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto void SaveWeights(const taString&amp; fname, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_SAVE']
MethodDef name: LoadWeights
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto int LoadWeights(const taString&amp; fname, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_LOAD']
MethodDef name: SetNUnits
MethodDef desc: set number of units in layer in the un_geom member -- attempts to lay out geometry in closest to a square that fits all the units evenly, if possible. note: does NOT rebuild the network. also does not make any changes if current number of units is same as arg, or arg &lt;= 0 (e.g., for startup arg, just init n_units to -1 prior to getting arg val so it won&apos;t have any effect if arg not passed)
MethodDef proto void SetNUnits(int n_units)
MethodDef opts [u'CAT_Structure']
MethodDef name: BuildUnits
MethodDef desc: build the units based current geometry configuration
MethodDef proto void BuildUnits()
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'CONFIRM', u'CAT_Structure']
MethodDef name: RecomputeGeometry
MethodDef desc: recompute the layer&apos;s geometry specifcations
MethodDef proto void RecomputeGeometry()
MethodDef opts [u'CAT_Structure']
MethodDef name: LayoutUnits
MethodDef desc: layout the units according to layer geometry
MethodDef proto void LayoutUnits(Unit* u = __null)
MethodDef opts [u'ARGC_0', u'CAT_Structure']
MethodDef name: LayoutUnitGroups
MethodDef desc: layout the unit groups according to layer group geometry and spacing
MethodDef proto void LayoutUnitGroups()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: ConnectFrom
MethodDef desc: connect from one or more other layers to this layer (receive from other layer(s)) -- in network view, receiver is FIRST layer selected -- makes a new projection between layers
MethodDef proto void ConnectFrom(Layer* lay)
MethodDef opts [u'DYN12N', u'CAT_Structure']
MethodDef name: ConnectBidir
MethodDef desc: bidirectionally connect with one or more other layers to (receive from and send to other layer(s)) -- makes new projections between layers
MethodDef proto void ConnectBidir(Layer* lay)
MethodDef opts [u'DYN12N', u'CAT_Structure']
MethodDef name: ConnectSelf
MethodDef desc: create a new self-connection within this layer (a projection to/from this layer)
MethodDef proto void ConnectSelf()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure', u'MENU_CONTEXT']
MethodDef name: Connect
MethodDef desc: connect the layer -- construct connections according to existing projections
MethodDef proto void Connect()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: CheckBuild
MethodDef desc: check if network is built
MethodDef proto bool CheckBuild(bool quiet = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: CheckConnect
MethodDef desc: check if network is connected
MethodDef proto bool CheckConnect(bool quiet = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveCons
MethodDef desc: remove all connections in this layer
MethodDef proto void RemoveCons()
MethodDef opts [u'MENU', u'CONFIRM', u'MENU_SEP_BEFORE', u'CAT_Structure']
MethodDef name: RemoveCons_Net
MethodDef desc: remove all connections in this layer, in context of entire network removecons -- calls unit removecons only
MethodDef proto void RemoveCons_Net()
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveUnits
MethodDef desc: remove all units in this layer (preserving groups)
MethodDef proto void RemoveUnits()
MethodDef opts [u'MENU', u'DYN1', u'CAT_Structure']
MethodDef name: RemoveUnitGroups
MethodDef desc: remove all unit groups in this layer
MethodDef proto void RemoveUnitGroups()
MethodDef opts [u'MENU', u'DYN1', u'CAT_Structure']
MethodDef name: PreConnect
MethodDef desc: prepare to connect the layer (create con_groups)
MethodDef proto void PreConnect()
MethodDef opts [u'CAT_Structure']
MethodDef name: SyncSendPrjns
MethodDef desc: synchronize sending projections with the recv projections so everyone&apos;s happy
MethodDef proto void SyncSendPrjns()
MethodDef opts [u'CAT_Structure']
MethodDef name: DisConnect
MethodDef desc: disconnect layer from all others
MethodDef proto void DisConnect()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: CountRecvCons
MethodDef desc: count recv connections for all units in layer
MethodDef proto int CountRecvCons()
MethodDef opts [u'CAT_Structure']
MethodDef name: Init_InputData
MethodDef desc: Initializes external and target inputs
MethodDef proto void Init_InputData()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Netin
MethodDef desc: Initialize the net-input state variable(s) (prior to Send_Netin)
MethodDef proto void Init_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_NetinDelta
MethodDef desc: Initialize the net-input state variable(s) (prior to Send_Netin)
MethodDef proto void Init_NetinDelta()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Acts
MethodDef desc: Initialize the unit state variables
MethodDef proto void Init_Acts()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_dWt
MethodDef desc: Initialize the weight change variables
MethodDef proto void Init_dWt()
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_Weights
MethodDef desc: Initialize the weights
MethodDef proto void Init_Weights()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Learning']
MethodDef name: SetExtFlag
MethodDef desc: set external input data flag
MethodDef proto void SetExtFlag(int flg)
MethodDef opts [u'CAT_Activation']
MethodDef name: UnSetExtFlag
MethodDef desc: un-set external input data flag
MethodDef proto void UnSetExtFlag(int flg)
MethodDef opts [u'CAT_Activation']
MethodDef name: SetLayUnitExtFlags
MethodDef desc: set external input data flags for layer and all units in the layer
MethodDef proto void SetLayUnitExtFlags(int flg)
MethodDef opts [u'CAT_Activation']
MethodDef name: ApplyInputData
MethodDef desc: apply the 2d or 4d external input pattern to the network, optional random additional values, and offsetting; uses a flat 2-d model where grouped layer or 4-d data are flattened to 2d; frame&lt;0 means from end
MethodDef proto void ApplyInputData(taMatrix* data, Unit::ExtType ext_flags = Unit::NO_EXTERNAL, Random* ran = __null, const PosTwoDCoord* offset = __null)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Netin
MethodDef desc: Compute NetInput -- weighted activations from other units
MethodDef proto void Compute_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_Netin
MethodDef desc: sender-based compute net-input sending to all layers
MethodDef proto void Send_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinToLay
MethodDef desc: sender-based compute net-input sending only to tolay layer
MethodDef proto void Send_NetinToLay(Layer* tolay)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinToMe
MethodDef desc: tell all layers that I receive from to send their net input to me
MethodDef proto void Send_NetinToMe()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Act
MethodDef desc: compute activation: the value I send to other units
MethodDef proto void Compute_Act()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_dWt
MethodDef desc: compute weight changes: the essence of learning
MethodDef proto void Compute_dWt()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights
MethodDef desc: update weights based on previous weight changes
MethodDef proto void Compute_Weights()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SSE
MethodDef desc: compute sum squared error of activation vs target over the entire layer -- always returns the actual sse, but unit_avg and sqrt flags determine averaging and sqrt of layer&apos;s own sse value
MethodDef proto float Compute_SSE(int&amp; n_vals, bool unit_avg = false, bool sqrt = false)
MethodDef opts [u'CAT_Statistic']
MethodDef name: PropagateInputDistance
MethodDef desc: propagate my input distance (dist.fm_input) to layers I send to
MethodDef proto void PropagateInputDistance()
MethodDef opts [u'CAT_Structure']
MethodDef name: PropagateOutputDistance
MethodDef desc: propagate my output distance (dist.fm_output) to layers I receive from
MethodDef proto void PropagateOutputDistance()
MethodDef opts [u'CAT_Structure']
MethodDef name: Compute_PrjnDirections
MethodDef desc: compute the directions of projections based on the relative distances from input/output layers
MethodDef proto void Compute_PrjnDirections()
MethodDef opts [u'CAT_Structure']
MethodDef name: GetLocalistName
MethodDef desc: look for a receiving projection from a single unit, which has a name: if found, set our name to that name
MethodDef proto void GetLocalistName()
MethodDef opts [u'CAT_Structure']
MethodDef name: TransformWeights
MethodDef desc: apply given transformation to weights
MethodDef proto void TransformWeights(const SimpleMathSpec&amp; trans)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Learning']
MethodDef name: AddNoiseToWeights
MethodDef desc: add noise to weights using given noise specification
MethodDef proto void AddNoiseToWeights(const Random&amp; noise_spec)
MethodDef opts [u'MENU', u'CAT_Learning']
MethodDef name: PruneCons
MethodDef desc: remove weights that (after pre-proc) meet relation to compare val
MethodDef proto int PruneCons(const SimpleMathSpec&amp; pre_proc, Relation::Relations rel, float cmp_val)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: ProbAddCons
MethodDef desc: probabilistically add new connections (assuming prior pruning), init_wt = initial weight value of new connection
MethodDef proto int ProbAddCons(float p_add_con, float init_wt = 0.0)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionCons
MethodDef desc: remove connectiosn with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionCons(float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionUnits
MethodDef desc: remove units with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionUnits(float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: Iconify
MethodDef desc: iconify this layer in the network display
MethodDef proto void Iconify()
MethodDef opts [u'MENU', u'CAT_Display', u'MENU_CONTEXT']
MethodDef name: DeIconify
MethodDef desc: de-iconify this layer in the network display
MethodDef proto void DeIconify()
MethodDef opts [u'MENU', u'CAT_Display', u'MENU_CONTEXT']
MethodDef name: Iconified
MethodDef desc: convenience function for checking iconified flag
MethodDef proto bool Iconified()
MethodDef name: SetLayerUnitGeom
MethodDef desc: set layer unit geometry (convenience function for programs)
MethodDef proto void SetLayerUnitGeom(int x, int y, bool n_not_xy = false, int n = 0)
MethodDef name: SetLayerUnitGpGeom
MethodDef desc: set layer unit group geometry (convenience function for programs)
MethodDef proto void SetLayerUnitGpGeom(int x, int y, bool n_not_xy = false, int n = 0)
MethodDef name: UpdateUnitSpecs
MethodDef desc: update unit specs for all units in the layer to use unit_spec (only if changed from last update -- force = do regardless); returns true if changed and all units can use given spec
MethodDef proto bool UpdateUnitSpecs(bool force = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: UpdateConSpecs
MethodDef desc: update connection specs for all projections in the layer (only if changed from last update -- force = do regardless)
MethodDef proto bool UpdateConSpecs(bool force = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: SetLayerSpec
MethodDef desc: set the layer specification
MethodDef proto bool SetLayerSpec(LayerSpec* layspec)
MethodDef opts [u'BUTTON', u'DROP1', u'CAT_Structure', u'INIT_ARGVAL_ON_spec.spec']
MethodDef name: GetLayerSpec
MethodDef desc: get the layer spec for this layer (if used)
MethodDef proto LayerSpec_ptr GetLayerSpec()
MethodDef opts [u'CAT_Structure']
MethodDef name: SetUnitSpec
MethodDef desc: set unit spec for all units in layer
MethodDef proto bool SetUnitSpec(UnitSpec* unitspec)
MethodDef opts [u'BUTTON', u'DROP1', u'CAT_Structure', u'INIT_ARGVAL_ON_unit_spec.spec']
MethodDef name: SetUnitType
MethodDef desc: set unit type for all units in layer (created by Build)
MethodDef proto void SetUnitType(TypeDef* td)
MethodDef opts [u'BUTTON', u'TYPE_Unit', u'CAT_Structure', u'INIT_ARGVAL_ON_units.el_typ']
MethodDef name: FixPrjnIndexes
MethodDef desc: fix the projection indicies of the connection groups (other_idx)
MethodDef proto void FixPrjnIndexes()
MethodDef opts [u'CAT_Structure']
MethodDef name: MonitorVar
MethodDef desc: monitor (record in a datatable) the given variable on this layer (can be a variable on the units or connections as well)
MethodDef proto void MonitorVar(NetMonitor* net_mon, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: Snapshot
MethodDef desc: take a snapshot of given variable: assign snap value on unit to given variable value, optionally using simple math operation on that value. if arg_is_snap is true, then the &apos;arg&apos; argument to the math operation is the current value of the snap variable. for example, to compute intersection of variable with snap value, use MIN and arg_is_snap.
MethodDef proto bool Snapshot(const taString&amp; variable, SimpleMathSpec&amp; math_op, bool arg_is_snap = true)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: ReplaceUnitSpec
MethodDef desc: switch any units/layers using old_sp to using new_sp
MethodDef proto int ReplaceUnitSpec(UnitSpec* old_sp, UnitSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplaceConSpec
MethodDef desc: switch any connections/projections using old_sp to using new_sp
MethodDef proto int ReplaceConSpec(ConSpec* old_sp, ConSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplacePrjnSpec
MethodDef desc: switch any projections using old_sp to using new_sp
MethodDef proto int ReplacePrjnSpec(ProjectionSpec* old_sp, ProjectionSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplaceLayerSpec
MethodDef desc: switch any layers using old_sp to using new_sp
MethodDef proto int ReplaceLayerSpec(LayerSpec* old_sp, LayerSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: WeightsToTable
MethodDef desc: send entire set of weights from sending layer to given table (e.g., for analysis), with one row per receiving unit, and the pattern in the event reflects the weights into that unit
MethodDef proto void WeightsToTable(DataTable* dt, Layer* send_lay)
MethodDef opts [u'MENU', u'NULL_OK_0', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef name: VarToTable
MethodDef desc: send given variable to data table -- number of columns depends on variable (for projection variables, specify prjns.; for connection variables, specify r. or s. (e.g., r.wt)) -- this uses a NetMonitor internally, so see documentation there for more information
MethodDef proto void VarToTable(DataTable* dt, const taString&amp; variable)
MethodDef opts [u'MENU', u'NULL_OK_0', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef name: FindUnitFmCoord
MethodDef desc: find unit within layer from given coordinates (layer relative coords), taking into account group geometry if present (subtracts any gp_spc -- as if it is not present).
MethodDef proto Unit_ptr FindUnitFmCoord(int x, int y)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindUnitFmGpCoord
MethodDef desc: get unit from both unit and group coordinates
MethodDef proto Unit_ptr FindUnitFmGpCoord(const TwoDCoord&amp; gp_coord, const TwoDCoord&amp; coord)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindUnitGpFmCoord
MethodDef desc: get unit group from group coordinates (i.e., within gp_geom, not unit coordinates)
MethodDef proto Unit_Group_ptr FindUnitGpFmCoord(const TwoDCoord&amp; coord)
MethodDef opts [u'CAT_Structure']
MethodDef name: GetActGeomNoSpc
MethodDef desc: get the actual geometry of the layer, subtracting any gp_spc that might be present (as if there were no spaces between unit groups)
MethodDef proto void GetActGeomNoSpc(PosTwoDCoord&amp; nospc_geom)
MethodDef opts [u'CAT_Structure']
MethodDef names [u'AddNoiseToWeights', u'ApplyInputData', u'BuildUnits', u'CheckBuild', u'CheckConnect', u'ClearLayerFlag', u'Compute_Act', u'Compute_Netin', u'Compute_PrjnDirections', u'Compute_SSE', u'Compute_Weights', u'Compute_dWt', u'Connect', u'ConnectBidir', u'ConnectFrom', u'ConnectSelf', u'Copy_Weights', u'CountRecvCons', u'DeIconify', u'DisConnect', u'FindUnitFmCoord', u'FindUnitFmGpCoord', u'FindUnitGpFmCoord', u'FixPrjnIndexes', u'GetActGeomNoSpc', u'GetLayerSpec', u'GetLocalistName', u'HasLayerFlag', u'Iconified', u'Iconify', u'Init_Acts', u'Init_InputData', u'Init_Netin', u'Init_NetinDelta', u'Init_Weights', u'Init_dWt', u'LayoutUnitGroups', u'LayoutUnits', u'LesionCons', u'LesionUnits', u'LoadWeights', u'LoadWeights_strm', u'MonitorVar', u'PreConnect', u'ProbAddCons', u'PropagateInputDistance', u'PropagateOutputDistance', u'PruneCons', u'RecomputeGeometry', u'RemoveCons', u'RemoveCons_Net', u'RemoveUnitGroups', u'RemoveUnits', u'ReplaceConSpec', u'ReplaceLayerSpec', u'ReplacePrjnSpec', u'ReplaceUnitSpec', u'SaveWeights', u'SaveWeights_strm', u'Send_Netin', u'Send_NetinToLay', u'Send_NetinToMe', u'SetExtFlag', u'SetLayUnitExtFlags', u'SetLayerFlag', u'SetLayerFlagState', u'SetLayerSpec', u'SetLayerUnitGeom', u'SetLayerUnitGpGeom', u'SetNUnits', u'SetUnitSpec', u'SetUnitType', u'SkipWeights_strm', u'Snapshot', u'SyncSendPrjns', u'TransformWeights', u'UnSetExtFlag', u'UpdateConSpecs', u'UpdateUnitSpecs', u'VarToTable', u'WeightsToTable', u'lesioned']
########################################################################
TypeDef len: 19
TypeDef name:  Network
TypeDef type: class
TypeDef desc: A network, containing layers, units, etc..
TypeDef cats:, [u'Network']
TypeDef opts:, [u'FILETYPE_Network', u'EXT_net', u'COMPRESS', u'DEF_NAME_ROOT_Network', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase']
TypeDef children: [u'CsNetwork', u'SoNetwork', u'LeabraNetwork', u'BpNetwork']
EnumDef name: TWO_D
EnumDef val: TWO_D
EnumDef: all z = 0, no skew
EnumDef name: THREE_D
EnumDef val: THREE_D
EnumDef: z = layer index, default skew
EnumDef name: FULL_NET
EnumDef val: FULL_NET
EnumDef: save the full network (dump file)
EnumDef name: JUST_WEIGHTS
EnumDef val: JUST_WEIGHTS
EnumDef: just do a &apos;write weights&apos; command
EnumDef name: DMEM_SYNC_NETWORK
EnumDef val: DMEM_SYNC_NETWORK
EnumDef: synchronize the entire network at a time
EnumDef name: DMEM_SYNC_LAYER
EnumDef val: DMEM_SYNC_LAYER
EnumDef: synchronize only layer-by-layer
EnumDef name: TEXT
EnumDef val: TEXT
EnumDef: weights are saved as ascii text representation of digits (completely portable)
EnumDef name: BINARY
EnumDef val: BINARY
EnumDef: weights are written directly to the file in binary format (no loss in accuracy and more space efficient, but possibly non-portable)
EnumDef name: NET_FMT
EnumDef val: NET_FMT
EnumDef: use format specified on the network
EnumDef name: ON_LINE
EnumDef val: ON_LINE
EnumDef: update weights on-line (after every event) -- this is not viable for dmem processing across trials and is automatically switched to small_batch in that case
EnumDef name: SMALL_BATCH
EnumDef val: SMALL_BATCH
EnumDef: update weights every small_batch_n trials
EnumDef name: BATCH
EnumDef val: BATCH
EnumDef: update weights in batch mode (after every epoch)
EnumDef name: TEST
EnumDef val: TEST
EnumDef: network is only being tested; no learning should occur
EnumDef name: TRAIN
EnumDef val: TRAIN
EnumDef: network is being trained: learning should occur
EnumDef name: AUTO_BUILD
EnumDef val: AUTO_BUILD
EnumDef: automatically build the network after loading
EnumDef name: PROMPT_BUILD
EnumDef val: PROMPT_BUILD
EnumDef: prompt about building after loading (if run in -nogui mode, it is automatically built without prompting)
EnumDef name: NO_BUILD
EnumDef val: NO_BUILD
EnumDef: do not build network after loading
EnumDef name: NF_NONE
EnumDef val: NF_NONE
EnumDef name: SAVE_UNITS
EnumDef val: SAVE_UNITS
EnumDef: save units with the project or other saves (specificaly saving just the network always saves the units)
EnumDef name: SAVE_UNITS_FORCE
EnumDef val: SAVE_UNITS_FORCE
EnumDef: internal flag that forces the saving of units in cases where it is important to do so (e.g., saving just the network, or for a crash recover file)
EnumDef names: [u'AutoBuildMode', u'DMem_SyncLevel', u'LayerLayout', u'NetFlags', u'TrainMode', u'Usr1SaveFmt', u'WtSaveFormat', u'WtUpdate']
MemberDef name: specs
MemberDef type: BaseSpec_Group
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: Specifications for network parameters
MemberDef name: layers
MemberDef type: Layer_Group
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: Layers or Groups of Layers
MemberDef name: view_objs
MemberDef type: NetViewObj_Group
MemberDef opts []
MemberDef cats [u'Display']
MemberDef desc: objects to display in the network 3d view
MemberDef name: flags
MemberDef type: Network::NetFlags
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: flags controlling various aspects of network function
MemberDef name: auto_build
MemberDef type: Network::AutoBuildMode
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: whether to automatically build the network (make units and connections) after loading or not (if the SAVE_UNITS flag is not on, then auto building makes sense)
MemberDef name: train_mode
MemberDef type: Network::TrainMode
MemberDef opts [u'APPLY_IMMED']
MemberDef cats [u'Learning']
MemberDef desc: training mode -- determines whether weights are updated or not (and other algorithm-dependent differences as well). TEST turns off learning
MemberDef name: wt_update
MemberDef type: Network::WtUpdate
MemberDef opts [u'APPLY_IMMED', u'CONDEDIT_ON_train_mode:TRAIN']
MemberDef cats [u'Learning']
MemberDef desc: weight update mode: when are weights updated (only applicable if train_mode = TRAIN)
MemberDef name: small_batch_n
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_wt_update:SMALL_BATCH']
MemberDef cats [u'Learning']
MemberDef desc: number of events for small_batch learning mode (specifies how often weight changes are synchronized in dmem)
MemberDef name: small_batch_n_eff
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT', u'NO_SAVE']
MemberDef cats [u'Learning']
MemberDef desc: effective batch_n value = batch_n except for dmem when it = (batch_n / epc_nprocs) &gt;= 1
MemberDef name: batch
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: batch counter: number of times network has been trained over a full sequence of epochs (updated by program)
MemberDef name: epoch
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: epoch counter: number of times a complete set of training patterns has been presented (updated by program)
MemberDef name: group
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: group counter: optional extra counter to record sequence-level information (sequence = group of trials)
MemberDef name: trial
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: trial counter: number of external input patterns that have been presented in the current epoch (updated by program)
MemberDef name: tick
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: tick counter: optional extra counter to record a level of organization below the trial level (for cases where trials have multiple component elements)
MemberDef name: cycle
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: cycle counter: number of iterations of activation updating (settling) on the current external input pattern (updated by program)
MemberDef name: time
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: the current time, relative to some established starting point, in algorithm-specific units (often miliseconds)
MemberDef name: group_name
MemberDef type: taString
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: name associated with the current group of trials, if such a grouping is applicable (typically set by a LayerWriter)
MemberDef name: trial_name
MemberDef type: taString
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)
MemberDef name: output_name
MemberDef type: taString
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: name for the output produced by the network (must be computed by a program)
MemberDef name: sse_unit_avg
MemberDef type: bool
MemberDef opts []
MemberDef cats [u'Statistic']
MemberDef desc: when computing the sse value, average over units
MemberDef name: sse_sqrt
MemberDef type: bool
MemberDef opts []
MemberDef cats [u'Statistic']
MemberDef desc: when computing the sse value, take the square root of the result
MemberDef name: sse
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: sum squared error over the network, for the current external input pattern
MemberDef name: sum_sse
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: total sum squared error over an epoch or similar larger set of external input patterns
MemberDef name: avg_sse
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: average sum squared error over an epoch or similar larger set of external input patterns
MemberDef name: cnt_err_tol
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Statistic']
MemberDef desc: tolerance for computing the count of number of errors over current epoch
MemberDef name: cnt_err
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: count of number of times the sum squared error was above cnt_err_tol over an epoch or similar larger set of external input patterns
MemberDef name: cur_sum_sse
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: current sum_sse -- used during computation of sum_sse
MemberDef name: avg_sse_n
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: number of times cur_sum_sse updated: for computing avg_sse
MemberDef name: cur_cnt_err
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: current cnt_err -- used for computing cnt_err
MemberDef name: train_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: time used for computing entire training (across epochs) (managed entirely by programs -- not always used)
MemberDef name: epoch_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: time used for computing an epoch (managed entirely by programs -- not always used)
MemberDef name: group_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT', u'NO_SAVE']
MemberDef cats [u'Statistic']
MemberDef desc: time used for computing a group, when groups used (managed entirely by programs -- not always used)
MemberDef name: trial_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: time used for computing a trial (managed entirely by programs -- not always used)
MemberDef name: settle_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: time used for computing a settling (managed entirely by programs -- not always used)
MemberDef name: cycle_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: time used for computing a cycle (managed entirely by programs -- not always used)
MemberDef name: wt_sync_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: time used for the DMem_SumDWts operation (trial-level dmem, computed by network)
MemberDef name: misc_time
MemberDef type: TimeUsed
MemberDef opts [u'GUI_READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: misc timer for ad-hoc use by programs
MemberDef name: dmem_sync_level
MemberDef type: Network::DMem_SyncLevel
MemberDef opts []
MemberDef cats [u'DMem']
MemberDef desc: at what level of network structure should information be synchronized across processes?
MemberDef name: dmem_nprocs
MemberDef type: int
MemberDef opts []
MemberDef cats [u'DMem']
MemberDef desc: number of processors to use in distributed memory computation of connection-level processing (actual number may be less, depending on processors requested!)
MemberDef name: dmem_nprocs_actual
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: actual number of processors being used
MemberDef name: usr1_save_fmt
MemberDef type: Network::Usr1SaveFmt
MemberDef opts []
MemberDef cats [u'File']
MemberDef desc: save network for -USR1 signal: full net or weights
MemberDef name: wt_save_fmt
MemberDef type: Network::WtSaveFormat
MemberDef opts []
MemberDef cats [u'File']
MemberDef desc: format to save weights in if saving weights
MemberDef name: lay_layout
MemberDef type: Network::LayerLayout
MemberDef opts []
MemberDef cats [u'Display']
MemberDef desc: Visual mode of layer position/view
MemberDef name: n_units
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Structure']
MemberDef desc: total number of units in the network
MemberDef name: n_cons
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Structure']
MemberDef desc: total number of connections in the network
MemberDef name: max_size
MemberDef type: PosTDCoord
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Structure']
MemberDef desc: maximum size in each dimension of the net
MemberDef name: font_sizes
MemberDef type: NetViewFontSizes
MemberDef opts []
MemberDef cats [u'Display']
MemberDef desc: default size of display labels when a new view is made (can be overriden in specific views)
MemberDef name: view_params
MemberDef type: NetViewParams
MemberDef opts []
MemberDef cats [u'Display']
MemberDef desc: misc netview parameters
MemberDef name: min_engine
MemberDef type: TypeDef*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: the minimum type of the engine
MemberDef name: net_engine
MemberDef type: NetEngineRef
MemberDef opts [u'APPLY_IMMED', u'NO_SAVE', u'TYPE_ON_min_engine']
MemberDef cats []
MemberDef desc: the engine being used for this net
MethodDef name: SetNetFlag
MethodDef desc: set flag state on
MethodDef proto void SetNetFlag(Network::NetFlags flg)
MethodDef name: ClearNetFlag
MethodDef desc: clear flag state (set off)
MethodDef proto void ClearNetFlag(Network::NetFlags flg)
MethodDef name: HasNetFlag
MethodDef desc: check if flag is set
MethodDef proto bool HasNetFlag(Network::NetFlags flg)
MethodDef name: SetNetFlagState
MethodDef desc: set flag state according to on bool (if true, set flag, if false, clear it)
MethodDef proto void SetNetFlagState(Network::NetFlags flg, bool on)
MethodDef name: Copy_Weights
MethodDef desc: copies weights from other network (incl wts assoc with unit bias member)
MethodDef proto void Copy_Weights(const Network* src)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'MENU_SEP_BEFORE', u'CAT_ObjectMgmt']
MethodDef name: SaveWeights_strm
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt)
MethodDef proto void SaveWeights_strm(ostream&amp; strm, Network::WtSaveFormat fmt = NET_FMT)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: LoadWeights_strm
MethodDef desc: read weight values in from a simple ordered list of weights (fmt is read from file)
MethodDef proto bool LoadWeights_strm(istream&amp; strm, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SaveWeights
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto void SaveWeights(const taString&amp; fname, Network::WtSaveFormat fmt = NET_FMT)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILETYPE_Weights', u'FILE_DIALOG_SAVE']
MethodDef name: LoadWeights
MethodDef desc: read weight values in from a simple ordered list of weights (fmt is read from file) (leave fname empty to pull up file chooser)
MethodDef proto bool LoadWeights(const taString&amp; fname, bool quiet = false)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILETYPE_Weights', u'FILE_DIALOG_LOAD']
MethodDef name: Build
MethodDef desc: Build the network units and Connect them (calls BuildUnits and Connect)
MethodDef proto void Build()
MethodDef opts [u'BUTTON', u'CAT_Structure']
MethodDef name: BuildUnits
MethodDef desc: Build the network units in layers according to geometry
MethodDef proto void BuildUnits()
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'CAT_Structure']
MethodDef name: Connect
MethodDef desc: Connect this network according to projections on Layers
MethodDef proto void Connect()
MethodDef opts [u'MENU', u'CAT_Structure']
MethodDef name: CheckBuild
MethodDef desc: check if network units are built
MethodDef proto bool CheckBuild(bool quiet = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: CheckConnect
MethodDef desc: check if network is connected
MethodDef proto bool CheckConnect(bool quiet = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: UpdtAfterNetMod
MethodDef desc: update network after any network modification (calls appropriate functions)
MethodDef proto void UpdtAfterNetMod()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SetUnitType
MethodDef desc: set unit type for all units in layer (created by Build)
MethodDef proto void SetUnitType(TypeDef* td)
MethodDef opts [u'MENU', u'TYPE_Unit', u'CAT_Structure']
MethodDef name: SyncSendPrjns
MethodDef desc: synchronize sending projections with the recv projections so everyone&apos;s happy
MethodDef proto void SyncSendPrjns()
MethodDef opts [u'CAT_Structure']
MethodDef name: CountRecvCons
MethodDef desc: count recv connections for all units in network
MethodDef proto void CountRecvCons()
MethodDef opts [u'CAT_Structure']
MethodDef name: ConnectUnits
MethodDef desc: connect u1 so that it recieves from u2. Create projection if necessary
MethodDef proto void ConnectUnits(Unit* u_to, Unit* u_from = __null, bool record = true, ConSpec* conspec = __null)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveCons
MethodDef desc: Remove all connections in network
MethodDef proto void RemoveCons()
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'CONFIRM', u'MENU_SEP_BEFORE', u'CAT_Structure']
MethodDef name: RemoveUnits
MethodDef desc: Remove all units in network (preserving unit groups)
MethodDef proto void RemoveUnits()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: RemoveUnitGroups
MethodDef desc: Remove all unit groups in network
MethodDef proto void RemoveUnitGroups()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: LayoutUnitGroups
MethodDef desc: layout all the layer&apos;s unit groups according to layer group geometry and spacing
MethodDef proto void LayoutUnitGroups()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: PreConnect
MethodDef desc: Prepare to connect this network (make con_groups)
MethodDef proto void PreConnect()
MethodDef opts [u'CAT_Structure']
MethodDef name: FixPrjnIndexes
MethodDef desc: fix the projection indicies of the connection groups (recv_idx, send_idx)
MethodDef proto void FixPrjnIndexes()
MethodDef opts [u'CAT_Structure']
MethodDef name: NewLayer
MethodDef desc: create a new layer in the network, using default layer type
MethodDef proto Layer_ptr NewLayer()
MethodDef opts [u'BUTTON']
MethodDef name: MonitorVar
MethodDef desc: monitor (record in a datatable) the given variable on this network
MethodDef proto void MonitorVar(NetMonitor* net_mon, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: RemoveMonitors
MethodDef desc: Remove monitoring of all objects in all processes associated with parent project
MethodDef proto void RemoveMonitors()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: UpdateMonitors
MethodDef desc: Update monitoring of all objects in all processes associated with parent project
MethodDef proto void UpdateMonitors()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: SnapVar
MethodDef desc: take a snapshot of currently selected variable in netview -- copies this value to the snap unit variable
MethodDef proto bool SnapVar()
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Snapshot', u'CAT_Statistic']
MethodDef name: SnapAnd
MethodDef desc: do an AND-like MIN computation of the current snap unit variable and the current value of the variable shown in netview -- shows the intersection between current state and previously snap&apos;d state
MethodDef proto bool SnapAnd()
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Snapshot', u'CAT_Statistic']
MethodDef name: SnapOr
MethodDef desc: do an OR-like MAX computation of the current snap unit variable and the current value of the variable shown in netview -- shows the union between current state and previously snap&apos;d state
MethodDef proto bool SnapOr()
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Snapshot', u'CAT_Statistic']
MethodDef name: SnapThresh
MethodDef desc: take a snapshot of currently selected variable in netview -- copies this value to the snap unit variable, but also applies a thresholding such that values above the thresh_val are set to 1 and values below the thresh_val are set to 0
MethodDef proto bool SnapThresh(float thresh_val = 0.5f)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Snapshot', u'CAT_Statistic']
MethodDef name: Snapshot
MethodDef desc: take a snapshot of given variable (if empty, currently viewed variable in netview is used): assign snap value on unit to given variable value, optionally using simple math operation on that value. if arg_is_snap is true, then the &apos;arg&apos; argument to the math operation is the current value of the snap variable. for example, to compute intersection of variable with snap value, use MIN and arg_is_snap.
MethodDef proto bool Snapshot(const taString&amp; variable, SimpleMathSpec&amp; math_op, bool arg_is_snap = true)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Snapshot', u'CAT_Statistic']
MethodDef name: NewView
MethodDef desc: make a new viewer of this network (NULL=use existing empty frame if any, else make new frame)
MethodDef proto NetView_ptr NewView(T3DataViewFrame* fr = __null)
MethodDef opts [u'NULL_OK', u'NULL_TEXT_0_NewFrame', u'MENU_BUTTON', u'MENU_ON_NetView', u'CAT_Display']
MethodDef name: FindMakeView
MethodDef desc: find existing or make a new viewer of this network (NULL=use existing empty frame if any, else make new frame)
MethodDef proto NetView_ptr FindMakeView(T3DataViewFrame* fr = __null)
MethodDef opts [u'CAT_Display']
MethodDef name: FindView
MethodDef desc: find (first) existing viewer of this network
MethodDef proto NetView_ptr FindView()
MethodDef opts [u'CAT_Display']
MethodDef name: GetViewVar
MethodDef desc: get the currently viewed variable name from netview
MethodDef proto taString GetViewVar()
MethodDef opts [u'CAT_Display']
MethodDef name: NewViewText
MethodDef desc: add a new text label to the network view objects
MethodDef proto NetViewObj_ptr NewViewText(const taString&amp; txt)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_NetView', u'MENU_SEP_BEFORE', u'CAT_Display']
MethodDef name: NewGlassBrain
MethodDef desc: add a new glass brain (as two separate hemispheres) to netview objects -- useful for situating biologically-based network models
MethodDef proto NetViewObj_ptr NewGlassBrain()
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_NetView', u'CAT_Display']
MethodDef name: Init_InputData
MethodDef desc: Initializes external and target inputs
MethodDef proto void Init_InputData()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Netin
MethodDef desc: Initialize the netinput variable(s) (prior to Send_Netin)
MethodDef proto void Init_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_NetinDelta
MethodDef desc: Initialize the netinput variable(s) (prior to Send_Netin)
MethodDef proto void Init_NetinDelta()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Acts
MethodDef desc: initialize the unit activation state variables
MethodDef proto void Init_Acts()
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Activation']
MethodDef name: Init_dWt
MethodDef desc: Initialize the weight change variables
MethodDef proto void Init_dWt()
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_Weights
MethodDef desc: Initialize the weights -- also inits acts, counters and stats
MethodDef proto void Init_Weights()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Learning']
MethodDef name: Init_Metrics
MethodDef desc: this is an omnibus guy that initializes every metric: Counters, Stats, and Timers
MethodDef proto void Init_Metrics()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Init_Counters
MethodDef desc: initialize all counter variables on network (called in Init_Weights; except batch because that loops over inits!)
MethodDef proto void Init_Counters()
MethodDef opts [u'EXPERT', u'CAT_Counter']
MethodDef name: Init_Stats
MethodDef desc: initialize statistic variables on network
MethodDef proto void Init_Stats()
MethodDef opts [u'EXPERT', u'CAT_Statistic']
MethodDef name: Init_Timers
MethodDef desc: initialize statistic variables on network
MethodDef proto void Init_Timers()
MethodDef opts [u'EXPERT', u'CAT_Statistic']
MethodDef name: Init_Sequence
MethodDef desc: called by NetGroupedDataLoop at the start of a sequence (group) of input data events -- some algorithms may want to have a flag to optionally initialize activations at this point
MethodDef proto void Init_Sequence()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Netin
MethodDef desc: Compute NetInput: weighted activation from other units
MethodDef proto void Compute_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_Netin
MethodDef desc: sender-based computation of net input: weighted activation from other units
MethodDef proto void Send_Netin()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Act
MethodDef desc: Compute Activation -- subtypes may replace with their own algorithm
MethodDef proto void Compute_Act()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Act_default
MethodDef desc: default version, may be replaced or extended
MethodDef proto void Compute_Act_default()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_dWt
MethodDef desc: compute weight changes -- the essence of learning
MethodDef proto void Compute_dWt()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights_Test
MethodDef desc: check to see if it is time to update the weights based on the given number of completed trials (typically trial counter + 1): if ON_LINE, always true; if SMALL_BATCH, only if trial_no % batch_n_eff == 0; if BATCH, never (check at end of epoch and run then)
MethodDef proto bool Compute_Weights_Test(int trial_no)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights
MethodDef desc: update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode
MethodDef proto void Compute_Weights()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights_impl
MethodDef desc: just the weight update routine: update weights from delta-weight changes
MethodDef proto void Compute_Weights_impl()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SSE
MethodDef desc: compute sum squared error of activations vs targets over the entire network -- optionally taking the average over units, and square root of the final results
MethodDef proto void Compute_SSE(bool unit_avg = false, bool sqrt = false)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TrialStats
MethodDef desc: compute trial-level statistics (SSE and others defined by specific algorithms)
MethodDef proto void Compute_TrialStats()
MethodDef opts [u'CAT_Statistic']
MethodDef name: DMem_ShareTrialData
MethodDef desc: share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient
MethodDef proto void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)
MethodDef opts [u'CAT_DMem']
MethodDef name: Compute_EpochSSE
MethodDef desc: compute epoch-level sum squared error and related statistics
MethodDef proto void Compute_EpochSSE()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_EpochStats
MethodDef desc: compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more
MethodDef proto void Compute_EpochStats()
MethodDef opts [u'CAT_Statistic']
MethodDef name: LayerZPos_Unitize
MethodDef desc: set layer z axis positions to unitary increments (0, 1, 2.. etc)
MethodDef proto void LayerZPos_Unitize()
MethodDef opts [u'CAT_Structure', u'MENU']
MethodDef name: LayerPos_Cleanup
MethodDef desc: cleanup the layer positions relative to each other (prevent overlap etc)
MethodDef proto void LayerPos_Cleanup()
MethodDef opts [u'CAT_Structure', u'MENU_BUTTON', u'MENU_ON_NetView']
MethodDef name: Compute_LayerDistances
MethodDef desc: compute distances between layers and input/output layers
MethodDef proto void Compute_LayerDistances()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: Compute_PrjnDirections
MethodDef desc: compute the directions of projections based on the relative distances from input/output layers (calls Compute_LayerDistances first)
MethodDef proto void Compute_PrjnDirections()
MethodDef opts [u'MENU', u'CONFIRM', u'CAT_Structure']
MethodDef name: GetLocalistName
MethodDef desc: look for a receiving projection from a single unit, which has a name: if found, set our name to that name
MethodDef proto void GetLocalistName()
MethodDef opts [u'CAT_Structure']
MethodDef name: TransformWeights
MethodDef desc: apply given transformation to weights
MethodDef proto void TransformWeights(const SimpleMathSpec&amp; trans)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Learning']
MethodDef name: AddNoiseToWeights
MethodDef desc: add noise to weights using given noise specification
MethodDef proto void AddNoiseToWeights(const Random&amp; noise_spec)
MethodDef opts [u'MENU', u'CAT_Learning']
MethodDef name: PruneCons
MethodDef desc: remove weights that (after pre-proc) meet relation to compare val
MethodDef proto int PruneCons(const SimpleMathSpec&amp; pre_proc, Relation::Relations rel, float cmp_val)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: ProbAddCons
MethodDef desc: probabilistically add new connections (assuming prior pruning), init_wt = initial weight value of new connection
MethodDef proto int ProbAddCons(float p_add_con, float init_wt = 0.0)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionCons
MethodDef desc: remove connections with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionCons(float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionUnits
MethodDef desc: remove units with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionUnits(float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: TwoD_Or_ThreeD
MethodDef desc: Set 2d or 3d and reposition and redraw layers
MethodDef proto void TwoD_Or_ThreeD(Network::LayerLayout layout_type)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Display']
MethodDef name: WeightsToTable
MethodDef desc: send entire set of weights from sending layer to recv layer in given table (e.g., for analysis), with one row per receiving unit, and the pattern in the event reflects the weights into that unit
MethodDef proto void WeightsToTable(DataTable* dt, Layer* recv_lay, Layer* send_lay)
MethodDef opts [u'MENU', u'NULL_OK_0', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef name: VarToTable
MethodDef desc: send given variable to data table -- number of columns depends on variable (if a network, one col, if a layer, number of layers, etc). for projection data, specify: prjns.xxx for weight values, specify r. or s. (e.g., r.wt) -- this uses a NetMonitor internally (just does AddNetwork with variable, then gets data), so see documentation there for more information
MethodDef proto void VarToTable(DataTable* dt, const taString&amp; variable)
MethodDef opts [u'MENU', u'NULL_OK_0', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef name: ProjectUnitWeights
MethodDef desc: project given unit&apos;s weights (receiving unless swt = true) through all layers (without any loops) -- results stored in anal1 on each unit (anal2 is used as a sum variable) wt_thr is threshold on max-normalized weights (max=1) for following a given weight value to accumulate (so weaker weights are excluded). values are always normalized at each layer to prevent exponential decrease/increase effects, so results are only relative indications of influence
MethodDef proto void ProjectUnitWeights(Unit* un, float wt_thr = 0.5f, bool swt = false)
MethodDef opts [u'CAT_Statistic']
MethodDef name: UpdateUnitSpecs
MethodDef desc: update unit specs for entire network (calls layer version of this function)
MethodDef proto bool UpdateUnitSpecs(bool force = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: UpdateConSpecs
MethodDef desc: update con specs for entire network (calls layer version of this function)
MethodDef proto bool UpdateConSpecs(bool force = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: UpdateAllSpecs
MethodDef desc: update all unit and con specs -- just calls above two functions
MethodDef proto bool UpdateAllSpecs(bool force = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplaceSpecs
MethodDef desc: replace a spec of any kind, including iterating through any children of that spec
MethodDef proto void ReplaceSpecs(BaseSpec* old_sp, BaseSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplaceSpecs_Gp
MethodDef desc: replace a specs on two matching spec groups, including iterating through any children of each spec
MethodDef proto void ReplaceSpecs_Gp(const BaseSpec_Group&amp; old_spg, BaseSpec_Group&amp; new_spg)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplaceUnitSpec
MethodDef desc: switch any units/layers using old_sp to using new_sp
MethodDef proto int ReplaceUnitSpec(UnitSpec* old_sp, UnitSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplaceConSpec
MethodDef desc: switch any connections/projections using old_sp to using new_sp
MethodDef proto int ReplaceConSpec(ConSpec* old_sp, ConSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplacePrjnSpec
MethodDef desc: switch any projections using old_sp to using new_sp
MethodDef proto int ReplacePrjnSpec(ProjectionSpec* old_sp, ProjectionSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: ReplaceLayerSpec
MethodDef desc: switch any layers using old_sp to using new_sp
MethodDef proto int ReplaceLayerSpec(LayerSpec* old_sp, LayerSpec* new_sp)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindMakeSpecGp
MethodDef desc: find a given spec group and if not found, make it
MethodDef proto BaseSpec_Group_ptr FindMakeSpecGp(const char* nm, bool&amp; nw_itm = nw_itm_def_arg)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindMakeSpec
MethodDef desc: find a given spec and if not found, make it
MethodDef proto BaseSpec_ptr FindMakeSpec(const char* nm, TypeDef* td, bool&amp; nw_itm = nw_itm_def_arg)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindSpecName
MethodDef desc: find a given spec by name
MethodDef proto BaseSpec_ptr FindSpecName(const char* nm)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindSpecType
MethodDef desc: find a given spec by type
MethodDef proto BaseSpec_ptr FindSpecType(TypeDef* td)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindMakeLayer
MethodDef desc: find a given layer and if not found, make it (of default type if NULL) (if nm is not found and alt_nm != NULL, it is searched for)
MethodDef proto Layer_ptr FindMakeLayer(const char* nm, TypeDef* td = __null, bool&amp; nw_itm = nw_itm_def_arg, const char* alt_nm = __null)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindLayer
MethodDef desc: find layer by name
MethodDef proto Layer_ptr FindLayer(const char* nm)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindMakePrjn
MethodDef desc: find a projection between two layers using given specs, make it if not found; if existing prjn between layers exists, it will be modified with current specs
MethodDef proto Projection_ptr FindMakePrjn(Layer* recv, Layer* send, ProjectionSpec* ps = __null, ConSpec* cs = __null, bool&amp; nw_itm = nw_itm_def_arg)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindMakePrjnAdd
MethodDef desc: find a projection between two layers using given specs, make it if not found; if existing prjn between layers exists but has diff specs, a new prjn is made
MethodDef proto Projection_ptr FindMakePrjnAdd(Layer* recv, Layer* send, ProjectionSpec* ps = __null, ConSpec* cs = __null, bool&amp; nw_itm = nw_itm_def_arg)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindMakeSelfPrjn
MethodDef desc: find a self projection using given specs, make it if not found; if existing self prjn exists, it will be modified with current specs
MethodDef proto Projection_ptr FindMakeSelfPrjn(Layer* recv, ProjectionSpec* ps = __null, ConSpec* cs = __null, bool&amp; nw_itm = nw_itm_def_arg)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindMakeSelfPrjnAdd
MethodDef desc: find a self projection using given specs, make it if not found; if existing self prjn exists but has diff specs, a new prjn is made
MethodDef proto Projection_ptr FindMakeSelfPrjnAdd(Layer* recv, ProjectionSpec* ps = __null, ConSpec* cs = __null, bool&amp; nw_itm = nw_itm_def_arg)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemovePrjn
MethodDef desc: remove a projection between two layers, if it exists
MethodDef proto bool RemovePrjn(Layer* recv, Layer* send, ProjectionSpec* ps = __null, ConSpec* cs = __null)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveLayer
MethodDef desc: remove layer with given name, if it exists
MethodDef proto bool RemoveLayer(const char* nm)
MethodDef opts [u'CAT_Structure']
MethodDef name: DMem_SyncNRecvCons
MethodDef desc: syncronize number of receiving connections (share set 0)
MethodDef proto void DMem_SyncNRecvCons()
MethodDef opts [u'CAT_DMem']
MethodDef name: DMem_DistributeUnits
MethodDef desc: distribute units to different nodes
MethodDef proto void DMem_DistributeUnits()
MethodDef opts [u'CAT_DMem']
MethodDef names [u'AddNoiseToWeights', u'Build', u'BuildUnits', u'CheckBuild', u'CheckConnect', u'ClearNetFlag', u'Compute_Act', u'Compute_Act_default', u'Compute_EpochSSE', u'Compute_EpochStats', u'Compute_LayerDistances', u'Compute_Netin', u'Compute_PrjnDirections', u'Compute_SSE', u'Compute_TrialStats', u'Compute_Weights', u'Compute_Weights_Test', u'Compute_Weights_impl', u'Compute_dWt', u'Connect', u'ConnectUnits', u'Copy_Weights', u'CountRecvCons', u'DMem_DistributeUnits', u'DMem_ShareTrialData', u'DMem_SyncNRecvCons', u'FindLayer', u'FindMakeLayer', u'FindMakePrjn', u'FindMakePrjnAdd', u'FindMakeSelfPrjn', u'FindMakeSelfPrjnAdd', u'FindMakeSpec', u'FindMakeSpecGp', u'FindMakeView', u'FindSpecName', u'FindSpecType', u'FindView', u'FixPrjnIndexes', u'GetLocalistName', u'GetViewVar', u'HasNetFlag', u'Init_Acts', u'Init_Counters', u'Init_InputData', u'Init_Metrics', u'Init_Netin', u'Init_NetinDelta', u'Init_Sequence', u'Init_Stats', u'Init_Timers', u'Init_Weights', u'Init_dWt', u'LayerPos_Cleanup', u'LayerZPos_Unitize', u'LayoutUnitGroups', u'LesionCons', u'LesionUnits', u'LoadWeights', u'LoadWeights_strm', u'MonitorVar', u'NewGlassBrain', u'NewLayer', u'NewView', u'NewViewText', u'PreConnect', u'ProbAddCons', u'ProjectUnitWeights', u'PruneCons', u'RemoveCons', u'RemoveLayer', u'RemoveMonitors', u'RemovePrjn', u'RemoveUnitGroups', u'RemoveUnits', u'ReplaceConSpec', u'ReplaceLayerSpec', u'ReplacePrjnSpec', u'ReplaceSpecs', u'ReplaceSpecs_Gp', u'ReplaceUnitSpec', u'SaveWeights', u'SaveWeights_strm', u'Send_Netin', u'SetNetFlag', u'SetNetFlagState', u'SetUnitType', u'SnapAnd', u'SnapOr', u'SnapThresh', u'SnapVar', u'Snapshot', u'SyncSendPrjns', u'TransformWeights', u'TwoD_Or_ThreeD', u'UpdateAllSpecs', u'UpdateConSpecs', u'UpdateMonitors', u'UpdateUnitSpecs', u'UpdtAfterNetMod', u'VarToTable', u'WeightsToTable']
########################################################################
TypeDef len: 13
TypeDef name:  NetEngine
TypeDef type: class
TypeDef desc: abstract definition of NetEngine
TypeDef cats:, [u'NetEngine']
TypeDef opts:, [u'TOKENS', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taEngine']
TypeDef children: [u'LeabraEngine']
########################################################################
TypeDef len: 15
TypeDef name:  NetMonitor
TypeDef type: class
TypeDef desc: monitors values from network (or other) objects and sends them to a data table/sink
TypeDef cats:, [u'Network']
TypeDef opts:, [u'STEM_BASE', u'TOKENS', u'NO_UPDATE_AFTER', u'DEF_CHILD_items', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: items
MemberDef type: NetMonItem_List
MemberDef desc: the list of items being monitored
MemberDef name: network
MemberDef type: NetworkRef
MemberDef desc: the overall network object that is being monitored -- if changed, any sub-objects will be updated based on path to new network
MemberDef name: data
MemberDef type: DataTableRef
MemberDef desc: the data table that will be used to hold the monitor data
MemberDef name: rmv_orphan_cols
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: remove orphan columns when updating table schema
MethodDef name: SetNetwork
MethodDef desc: set the overall network -- will update any sub-objects to corresponding ones on this network
MethodDef proto void SetNetwork(Network* net)
MethodDef opts [u'MENU', u'MENU_ON_Action', u'MENU_CONTEXT', u'CAT_Monitor', u'INIT_ARGVAL_ON_network']
MethodDef name: SetDataTable
MethodDef desc: set the data table used
MethodDef proto void SetDataTable(DataTable* dt)
MethodDef opts [u'MENU', u'MENU_CONTEXT', u'CAT_Monitor', u'INIT_ARGVAL_ON_data']
MethodDef name: SetDataNetwork
MethodDef desc: set both the data table and network -- convenient for programs
MethodDef proto void SetDataNetwork(DataTable* dt, Network* net)
MethodDef opts [u'CAT_Monitor']
MethodDef name: AddBlank
MethodDef desc: add a new blank monitor to be filled in
MethodDef proto void AddBlank()
MethodDef opts [u'BUTTON', u'CAT_Monitor']
MethodDef name: AddNetwork
MethodDef desc: monitor a value in the Network or its subobjects
MethodDef proto void AddNetwork(Network* net, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Monitor']
MethodDef name: AddLayer
MethodDef desc: monitor a value in the Layer or its subobjects
MethodDef proto void AddLayer(Layer* lay, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Monitor']
MethodDef name: AddProjection
MethodDef desc: monitor a value in the Projection or its subobjects
MethodDef proto void AddProjection(Projection* prj, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Monitor']
MethodDef name: AddUnitGroup
MethodDef desc: monitor a value in the UnitGroup or its subobjects
MethodDef proto void AddUnitGroup(Unit_Group* ug, const taString&amp; variable)
MethodDef opts [u'CAT_Monitor']
MethodDef name: AddUnit
MethodDef desc: monitor a value in the Unit or its subobjects
MethodDef proto void AddUnit(Unit* un, const taString&amp; variable)
MethodDef opts [u'CAT_Monitor']
MethodDef name: AddObject
MethodDef desc: monitor a value in the object or its subobjects
MethodDef proto void AddObject(taBase* obj, const taString&amp; variable)
MethodDef opts [u'CAT_Monitor']
MethodDef name: UpdateDataTable
MethodDef desc: update the datatable configuration to match current set of monitored items -- call this during Init. if reset_first, then existing data rows are removed first
MethodDef proto void UpdateDataTable(bool reset_first = false)
MethodDef opts [u'BUTTON', u'CAT_Monitor']
MethodDef name: UpdateMonitors
MethodDef desc: old name for UpdateDataTable
MethodDef proto void UpdateMonitors(bool reset_first = false)
MethodDef opts [u'CAT_Monitor']
MethodDef name: ResetDataTableCols
MethodDef desc: reset the data table columns, and then call UpdateDataTable -- this is useful when new monitor items have been inserted in the middle of the list (they will appear at the end of the data table unless this function is called) -- WARNING: removes any columns that might have been manually added!!
MethodDef proto void ResetDataTableCols()
MethodDef opts [u'BUTTON', u'CONFIRM', u'CAT_Monitor']
MethodDef name: GetMonVals
MethodDef desc: get all the values and store in current row of data table -- call in program to get new data
MethodDef proto void GetMonVals()
MethodDef opts [u'CAT_Monitor']
MethodDef names [u'AddBlank', u'AddLayer', u'AddNetwork', u'AddObject', u'AddProjection', u'AddUnit', u'AddUnitGroup', u'GetMonVals', u'ResetDataTableCols', u'SetDataNetwork', u'SetDataTable', u'SetNetwork', u'UpdateDataTable', u'UpdateMonitors']
########################################################################
TypeDef len: 15
TypeDef name:  NetView
TypeDef type: class
TypeDef desc: no text (default)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'DUMP_LOAD_POST', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'T3DataViewMain']
EnumDef name: MD_FLOAT
EnumDef val: MD_FLOAT
EnumDef name: MD_DOUBLE
EnumDef val: MD_DOUBLE
EnumDef name: MD_INT
EnumDef val: MD_INT
EnumDef name: MD_UNKNOWN
EnumDef val: MD_UNKNOWN
EnumDef name: UTD_NONE
EnumDef val: UTD_NONE
EnumDef: no text (default)
EnumDef name: UTD_VALUES
EnumDef val: UTD_VALUES
EnumDef: unit values only
EnumDef name: UTD_NAMES
EnumDef val: UTD_NAMES
EnumDef: unit names only
EnumDef name: UTD_BOTH
EnumDef val: UTD_BOTH
EnumDef: both unit values and names
EnumDef name: UDM_CIRCLE
EnumDef val: UDM_CIRCLE
EnumDef: just color, no 3d -- best for when displaying labels
EnumDef name: UDM_RECT
EnumDef val: UDM_RECT
EnumDef: just color, no 3d -- best for when displaying labels
EnumDef name: UDM_BLOCK
EnumDef val: UDM_BLOCK
EnumDef name: UDM_CYLINDER
EnumDef val: UDM_CYLINDER
EnumDef names: [u'MDFlags', u'UnitDisplayMode', u'UnitTextDisplay']
MemberDef name: layers
MemberDef type: T3DataView_PtrList
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef name: prjns
MemberDef type: T3DataView_PtrList
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef name: lay_disp_modes
MemberDef type: NameVar_Array
MemberDef desc: layer display modes (not properly saved otherwise, due to reset construction of LayerViews)
MemberDef name: scale
MemberDef type: ColorScale
MemberDef desc: contains current min,max,range,zero,auto_scale
MemberDef name: scale_ranges
MemberDef type: ScaleRange_List
MemberDef desc: Auto ranges for member buttons
MemberDef name: display
MemberDef type: bool
MemberDef desc: whether to update the display when values change (under control of programs)
MemberDef name: lay_mv
MemberDef type: bool
MemberDef desc: whether to display layer move controls when the arrow button is pressed (can get in the way of viewing weights)
MemberDef name: membs
MemberDef type: MemberSpace
MemberDef opts [u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: list of all the members possible in units; note: all items are new clones
MemberDef name: unit_src
MemberDef type: UnitRef
MemberDef opts [u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: unit last picked (if any) for display
MemberDef name: unit_con_md
MemberDef type: bool
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: true if memberdef is from a connection as opposed to a direct unit var
MemberDef name: unit_disp_md
MemberDef type: MemberDef*
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: memberdef (if any) of Unit (or Connection) to display
MemberDef name: unit_sr
MemberDef type: ScaleRange*
MemberDef opts [u'NO_SAVE', u'NO_COPY']
MemberDef cats []
MemberDef desc: scalerange of disp_md
MemberDef name: unit_md_flags
MemberDef type: NetView::MDFlags
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: type to display in units
MemberDef name: unit_disp_mode
MemberDef type: NetView::UnitDisplayMode
MemberDef desc: how to display unit values
MemberDef name: unit_text_disp
MemberDef type: NetView::UnitTextDisplay
MemberDef desc: what labels to display with units
MemberDef name: max_size
MemberDef type: FloatTDCoord
MemberDef desc: maximum size in each dimension of the net
MemberDef name: font_sizes
MemberDef type: NetViewFontSizes
MemberDef desc: font sizes for various items
MemberDef name: view_params
MemberDef type: NetViewParams
MemberDef desc: misc view parameters
MemberDef name: wt_line_disp
MemberDef type: bool
MemberDef desc: display weights from selected unit as lines?
MemberDef name: wt_line_width
MemberDef type: float
MemberDef desc: width of weight lines
MemberDef name: wt_line_thr
MemberDef type: float
MemberDef desc: threshold on fabs(wt) value -- don&apos;t display below this value
MemberDef name: wt_line_swt
MemberDef type: bool
MemberDef desc: plot sending weights instead of recv weights
MemberDef name: wt_prjn_lay
MemberDef type: LayerRef
MemberDef desc: layer to display projected weights for
MemberDef name: snap_bord_disp
MemberDef type: bool
MemberDef desc: display snapshot value snap as a border around units
MemberDef name: snap_bord_width
MemberDef type: float
MemberDef desc: width of snapshot border lines
MethodDef name: net
MethodDef proto Network_ptr net()
MethodDef name: setUnitSrc
MethodDef desc: updates picked unit
MethodDef proto void setUnitSrc(UnitView* uv, Unit* unit)
MethodDef name: setUnitDisp
MethodDef desc: sets a new md to display, index in membs
MethodDef proto void setUnitDisp(int value)
MethodDef name: setUnitDispMd
MethodDef desc: sets a new md to display, lookup/set scale values
MethodDef proto void setUnitDispMd(MemberDef* md)
MethodDef name: InitDisplay
MethodDef desc: hard reset of display, esp. Unit values -- also calls BuildAll. Note this does not call Render -- that is done by UpdateDisplay, so a full reset is InitDisplay followed by UpdateDisplay
MethodDef proto void InitDisplay(bool init_panel = true)
MethodDef name: InitDisplay_Layer
MethodDef proto void InitDisplay_Layer(LayerView* lv, bool check_build = true)
MethodDef name: InitDisplay_UnitGroup
MethodDef proto void InitDisplay_UnitGroup(UnitGroupView* ugrv, bool check_build = true)
MethodDef name: InitPanel
MethodDef desc: hard reset of panel, esp. membr vars
MethodDef proto void InitPanel()
MethodDef name: UpdateDisplay
MethodDef desc: re-renders entire display (calls Render_impl) -- assumes structure is still same but various display elements may have changed. if structure is different, then an InitDisplay is required first
MethodDef proto void UpdateDisplay(bool update_panel = true)
MethodDef name: UpdateUnitValues
MethodDef desc: *only* updates unit values -- display and structure must be the same as last time
MethodDef proto void UpdateUnitValues()
MethodDef name: UpdatePanel
MethodDef desc: updates nvp, esp. after UAE etc.
MethodDef proto void UpdatePanel()
MethodDef name: GetMembs
MethodDef proto void GetMembs()
MethodDef name: GetMaxSize
MethodDef desc: get max size from network
MethodDef proto void GetMaxSize()
MethodDef name: GetUnitColor
MethodDef proto void GetUnitColor(float val, iColor&amp; col, float&amp; sc_val)
MethodDef name: GetUnitDisplayVals
MethodDef proto void GetUnitDisplayVals(UnitGroupView* ugrv, TwoDCoord&amp; co, float&amp; val, T3Color&amp; col, float&amp; sc_val)
MethodDef name: InitScaleRange
MethodDef desc: initialize sr to its defaults; used when creating, and if user clicks &apos;default&apos; button for the scale
MethodDef proto void InitScaleRange(ScaleRange&amp; sr)
MethodDef name: FindUnitView
MethodDef desc: find the uv for the unit
MethodDef proto UnitView_ptr FindUnitView(Unit* unit)
MethodDef name: SelectVar
MethodDef desc: select given variable for viewing on units (add to currently disp vars if add)
MethodDef proto void SelectVar(const char* var_name, bool add = false, bool update = true)
MethodDef name: SetScaleData
MethodDef desc: updates the values in us and the stored ones in the colorscale list
MethodDef proto void SetScaleData(bool auto_scale, float scale_min, float scale_max, bool update_panel = true)
MethodDef name: SetScaleDefault
MethodDef desc: revert scale to its default
MethodDef proto void SetScaleDefault()
MethodDef name: SetColorSpec
MethodDef desc: set the color scale spec to determine the palette of colors representing values
MethodDef proto void SetColorSpec(ColorScaleSpec* color_spec)
MethodDef opts [u'BUTTON', u'INIT_ARGVAL_ON_scale.spec']
MethodDef name: SetLayDispMode
MethodDef desc: set the layer display mode value for given layer name (called by LayerView UAE)
MethodDef proto void SetLayDispMode(const taString&amp; lay_nm, int disp_md)
MethodDef name: NewLayer
MethodDef proto void NewLayer(int x = 3, int y = 3)
MethodDef name: Layer_DataUAE
MethodDef desc: send a DataUAE for all prjns for this layer
MethodDef proto void Layer_DataUAE(LayerView* lv)
MethodDef names [u'FindUnitView', u'GetMaxSize', u'GetMembs', u'GetUnitColor', u'GetUnitDisplayVals', u'InitDisplay', u'InitDisplay_Layer', u'InitDisplay_UnitGroup', u'InitPanel', u'InitScaleRange', u'Layer_DataUAE', u'NewLayer', u'SelectVar', u'SetColorSpec', u'SetLayDispMode', u'SetScaleData', u'SetScaleDefault', u'UpdateDisplay', u'UpdatePanel', u'UpdateUnitValues', u'net', u'setUnitDisp', u'setUnitDispMd', u'setUnitSrc']
########################################################################
TypeDef len: 15
TypeDef name:  SigmoidSpec
TypeDef type: class
TypeDef desc: Specifies a Sigmoid 1 / [1 + exp(-(x - off) * gain)]
TypeDef cats:, [u'Math']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: off
MemberDef type: float
MemberDef desc: offset for .5 point
MemberDef name: gain
MemberDef type: float
MemberDef desc: gain
MethodDef name: Clip
MethodDef proto float Clip(float y)
MethodDef name: ClipNet
MethodDef proto float ClipNet(float x)
MethodDef name: Eval
MethodDef proto float Eval(float x)
MethodDef name: Deriv
MethodDef proto float Deriv(float x)
MethodDef name: Inverse
MethodDef proto float Inverse(float y)
MethodDef names [u'Clip', u'ClipNet', u'Deriv', u'Eval', u'Inverse']
########################################################################
TypeDef len: 15
TypeDef name:  SchedItem
TypeDef type: class
TypeDef desc: one element of a schedule
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: start_ctr
MemberDef type: int
MemberDef desc: ctr number to start at for this item
MemberDef name: start_val
MemberDef type: float
MemberDef desc: starting value for item
MethodDef name: GetVal
MethodDef desc: get value for given ctr value
MethodDef proto float GetVal(int ctr)
MethodDef names [u'GetVal']
########################################################################
TypeDef len: 13
TypeDef name:  Schedule
TypeDef type: class
TypeDef desc: A schedule for parameters that vary over time
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MemberDef name: last_ctr
MemberDef type: int
MemberDef desc: the last counter index called
MemberDef name: default_val
MemberDef type: float
MemberDef desc: the default if group is empty
MemberDef name: interpolate
MemberDef type: bool
MemberDef desc: use linear interpolation between points
MemberDef name: cur_val
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: the current val
MethodDef name: GetVal
MethodDef desc: get current schedule val, based on counter
MethodDef proto float GetVal(int ctr)
MethodDef opts [u'MENU', u'MENU_ON_Edit', u'USE_RVAL']
MethodDef names [u'GetVal']
########################################################################
TypeDef len: 17
TypeDef name:  WeightLimits
TypeDef type: class
TypeDef desc: specifies weight limits for connections
TypeDef cats:, [u'Network']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: NONE
EnumDef val: NONE
EnumDef: no weight limitations
EnumDef name: GT_MIN
EnumDef val: GT_MIN
EnumDef: constrain weights to be greater than min value
EnumDef name: LT_MAX
EnumDef val: LT_MAX
EnumDef: constrain weights to be less than max value
EnumDef name: MIN_MAX
EnumDef val: MIN_MAX
EnumDef: constrain weights to be within min and max values
EnumDef names: [u'LimitType']
MemberDef name: type
MemberDef type: WeightLimits::LimitType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: type of weight limitation to impose
MemberDef name: min
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_type:NONE,LT_MAX']
MemberDef cats []
MemberDef desc: minimum weight value (if applicable)
MemberDef name: max
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_type:NONE,GT_MIN']
MemberDef cats []
MemberDef desc: maximum weight value (if applicable)
MemberDef name: sym
MemberDef type: bool
MemberDef desc: if true, also symmetrize with reciprocal connections
MethodDef name: ApplyMinLimit
MethodDef proto void ApplyMinLimit(float&amp; wt)
MethodDef name: ApplyMaxLimit
MethodDef proto void ApplyMaxLimit(float&amp; wt)
MethodDef name: ApplyLimits
MethodDef proto void ApplyLimits(float&amp; wt)
MethodDef names [u'ApplyLimits', u'ApplyMaxLimit', u'ApplyMinLimit']
########################################################################
TypeDef len: 7
TypeDef name:  ConSpec_SPtr
TypeDef type: class
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  UnitPtrList
TypeDef type: class
TypeDef desc: list of unit pointers, for sending connections
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER']
MethodDef name: UpdatePointers_NewPar
MethodDef proto int UpdatePointers_NewPar(taBase* old_par, taBase* new_par)
MethodDef name: UpdatePointers_NewParType
MethodDef proto int UpdatePointers_NewParType(TypeDef* par_typ, taBase* new_par)
MethodDef name: UpdatePointers_NewObj
MethodDef proto int UpdatePointers_NewObj(taBase* old_ptr, taBase* new_ptr)
MethodDef names [u'UpdatePointers_NewObj', u'UpdatePointers_NewPar', u'UpdatePointers_NewParType']
########################################################################
TypeDef len: 11
TypeDef name:  RecvCons_List
TypeDef type: class
TypeDef desc: list of receiving connections, one per projection
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'NO_EXPAND_ALL', u'INSTANCE']
MethodDef name: NewPrjn
MethodDef desc: create a new sub_group from given projection, with given ownership (own_cons)
MethodDef proto RecvCons_ptr NewPrjn(Projection* prjn)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindPrjn
MethodDef desc: find sub group associated with given projection
MethodDef proto RecvCons_ptr FindPrjn(Projection* prjn, int&amp; idx = no_idx)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindFrom
MethodDef desc: find sub group that receives from given layer
MethodDef proto RecvCons_ptr FindFrom(Layer* from, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'USE_RVAL', u'ARGC_1', u'CAT_Structure']
MethodDef name: FindFromName
MethodDef desc: find sub group that receives from given layer named fm_nm
MethodDef proto RecvCons_ptr FindFromName(const taString&amp; fm_nm, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'USE_RVAL', u'ARGC_1', u'CAT_Structure']
MethodDef name: FindTypeFrom
MethodDef desc: find sub group that recvs prjn of given type from layer
MethodDef proto RecvCons_ptr FindTypeFrom(TypeDef* prjn_typ, Layer* from, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'USE_RVAL', u'ARGC_2', u'CAT_Structure']
MethodDef name: FindLayer
MethodDef desc: find sub group where projection is in the given layer
MethodDef proto RecvCons_ptr FindLayer(Layer* lay, int&amp; idx = no_idx)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemovePrjn
MethodDef desc: remove sub group associated with given projection
MethodDef proto bool RemovePrjn(Projection* prjn)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveFrom
MethodDef desc: remove sub group that receives from given layer
MethodDef proto bool RemoveFrom(Layer* from)
MethodDef opts [u'MENU', u'CAT_Structure']
MethodDef names [u'FindFrom', u'FindFromName', u'FindLayer', u'FindPrjn', u'FindTypeFrom', u'NewPrjn', u'RemoveFrom', u'RemovePrjn']
########################################################################
TypeDef len: 9
TypeDef name:  ConPtrList
TypeDef type: class
TypeDef desc: list of connection pointers, for sending connections
TypeDef cats:, [u'Network']
TypeDef opts:, [u'NO_UPDATE_AFTER']
########################################################################
TypeDef len: 11
TypeDef name:  SendCons_List
TypeDef type: class
TypeDef desc: list of sending connections, one per projection
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'NO_EXPAND_ALL', u'INSTANCE']
MethodDef name: NewPrjn
MethodDef desc: create a new sub_group from given projection, with given ownership (own_cons)
MethodDef proto SendCons_ptr NewPrjn(Projection* prjn)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindPrjn
MethodDef desc: find sending connections associated with given projection
MethodDef proto SendCons_ptr FindPrjn(Projection* prjn, int&amp; idx = no_idx)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindFrom
MethodDef desc: find sending connections that receive from given layer
MethodDef proto SendCons_ptr FindFrom(Layer* from, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'USE_RVAL', u'ARGC_1', u'CAT_Structure']
MethodDef name: FindFromName
MethodDef desc: find sending connections that receive from given layer named fm_nm
MethodDef proto SendCons_ptr FindFromName(const taString&amp; fm_nm, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'USE_RVAL', u'ARGC_1', u'CAT_Structure']
MethodDef name: FindTypeFrom
MethodDef desc: find sending connections that recvs prjn of given type from layer
MethodDef proto SendCons_ptr FindTypeFrom(TypeDef* prjn_typ, Layer* from, int&amp; idx = no_idx)
MethodDef opts [u'MENU', u'USE_RVAL', u'ARGC_2', u'CAT_Structure']
MethodDef name: FindLayer
MethodDef desc: find sending connections where projection is in the given layer
MethodDef proto SendCons_ptr FindLayer(Layer* lay, int&amp; idx = no_idx)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemovePrjn
MethodDef desc: remove sending connections associated with given projection
MethodDef proto bool RemovePrjn(Projection* prjn)
MethodDef opts [u'CAT_Structure']
MethodDef name: RemoveFrom
MethodDef desc: remove sending connections from given layer
MethodDef proto bool RemoveFrom(Layer* from)
MethodDef opts [u'MENU', u'CAT_Structure']
MethodDef names [u'FindFrom', u'FindFromName', u'FindLayer', u'FindPrjn', u'FindTypeFrom', u'NewPrjn', u'RemoveFrom', u'RemovePrjn']
########################################################################
TypeDef len: 7
TypeDef name:  UnitSpec_SPtr
TypeDef type: class
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
########################################################################
TypeDef len: 7
TypeDef name:  ProjectionSpec_SPtr
TypeDef type: class
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  Projection_Group
TypeDef type: class
TypeDef desc: group of projections
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 15
TypeDef name:  Unit_Group
TypeDef type: class
TypeDef desc: a group of units
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'SCOPE_Network', u'NO_EXPAND_ALL', u'INSTANCE']
TypeDef children: [u'LeabraUnit_Group']
MemberDef name: pos
MemberDef type: PosTDCoord
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: position of group relative to the layer
MemberDef name: unique_geom
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED', u'DEF_false']
MemberDef cats [u'Structure']
MemberDef desc: if true, this unit group has a unique geometry different from the layer geometry (otherwise, geom is always copied from lay-&gt;un_geom)
MemberDef name: geom
MemberDef type: XYNGeom
MemberDef opts [u'CONDEDIT_ON_unique_geom:true']
MemberDef cats [u'Structure']
MemberDef desc: geometry of the group: layout and number of units
MemberDef name: units_lesioned
MemberDef type: bool
MemberDef opts [u'GUI_READ_ONLY']
MemberDef cats []
MemberDef desc: if units were lesioned in this group, don&apos;t complain about rebuilding!
MemberDef name: output_name
MemberDef type: taString
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: name for the output produced by the network (algorithm/program dependent, e.g., unit name of most active unit)
MethodDef name: Copy_Weights
MethodDef desc: copies weights from other unit group (incl wts assoc with unit bias member)
MethodDef proto void Copy_Weights(const Unit_Group* src)
MethodDef opts [u'MENU', u'MENU_ON_Object', u'CAT_ObjectMgmt']
MethodDef name: SaveWeights_strm
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt)
MethodDef proto void SaveWeights_strm(ostream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: LoadWeights_strm
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt) -- rval is taMisc::ReadTagStatus = END_TAG if successful
MethodDef proto int LoadWeights_strm(istream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SkipWeights_strm
MethodDef desc: skip over weight values -- rval is taMisc::ReadTagStatus = END_TAG if successful
MethodDef proto int SkipWeights_strm(istream&amp; strm, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'EXT_wts', u'COMPRESS', u'CAT_File']
MethodDef name: SaveWeights
MethodDef desc: write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto void SaveWeights(const taString&amp; fname, RecvCons::WtSaveFormat fmt = RecvCons::TEXT)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_SAVE']
MethodDef name: LoadWeights
MethodDef desc: read weight values in from a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)
MethodDef proto int LoadWeights(const taString&amp; fname, RecvCons::WtSaveFormat fmt = RecvCons::TEXT, bool quiet = false)
MethodDef opts [u'MENU', u'EXT_wts', u'COMPRESS', u'CAT_File', u'FILE_DIALOG_LOAD']
MethodDef name: BuildUnits
MethodDef desc: for subgroups: build units to specs (true if changed)
MethodDef proto bool BuildUnits()
MethodDef opts [u'MENU', u'MENU_ON_Actions', u'CAT_Structure']
MethodDef name: CheckBuild
MethodDef desc: check if network is built
MethodDef proto bool CheckBuild(bool quiet = false)
MethodDef opts [u'CAT_Structure']
MethodDef name: LayoutUnits
MethodDef desc: for subgroups: redistribute units within the given geometry of the group
MethodDef proto void LayoutUnits(Unit* u = __null)
MethodDef opts [u'CAT_Structure']
MethodDef name: RecomputeGeometry
MethodDef desc: re compute geometry based on parent layer
MethodDef proto void RecomputeGeometry()
MethodDef opts [u'CAT_Structure']
MethodDef name: MonitorVar
MethodDef desc: monitor (record in a datatable) the given variable on this unit group
MethodDef proto void MonitorVar(NetMonitor* net_mon, const taString&amp; variable)
MethodDef opts [u'BUTTON', u'CAT_Statistic']
MethodDef name: TransformWeights
MethodDef desc: apply given transformation to weights
MethodDef proto void TransformWeights(const SimpleMathSpec&amp; trans)
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CAT_Learning']
MethodDef name: AddNoiseToWeights
MethodDef desc: add noise to weights using given noise specification
MethodDef proto void AddNoiseToWeights(const Random&amp; noise_spec)
MethodDef opts [u'MENU', u'CAT_Learning']
MethodDef name: PruneCons
MethodDef desc: remove weights that (after pre-proc) meet relation to compare val
MethodDef proto int PruneCons(const SimpleMathSpec&amp; pre_proc, Relation::Relations rel, float cmp_val)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionCons
MethodDef desc: remove connections with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionCons(float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: LesionUnits
MethodDef desc: remove units with prob p_lesion (permute = fixed no. lesioned)
MethodDef proto int LesionUnits(float p_lesion, bool permute = true)
MethodDef opts [u'MENU', u'USE_RVAL', u'CAT_Structure']
MethodDef name: UnitValuesToArray
MethodDef desc: adds values of variable from the units into the given array
MethodDef proto bool UnitValuesToArray(float_Array&amp; ary, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: UnitValuesToMatrix
MethodDef desc: adds values of variable from the units into the given matrix
MethodDef proto bool UnitValuesToMatrix(float_Matrix&amp; mat, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: UnitValuesFromArray
MethodDef desc: sets unit values from values in the given array
MethodDef proto bool UnitValuesFromArray(float_Array&amp; ary, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: UnitValuesFromMatrix
MethodDef desc: sets unit values from values in the given array
MethodDef proto bool UnitValuesFromMatrix(float_Matrix&amp; mat, const char* variable)
MethodDef opts [u'CAT_Structure']
MethodDef name: VarToTable
MethodDef desc: send given variable to data table -- number of columns depends on variable (for connection variables, specify r. or s. (e.g., r.wt)) -- this uses a NetMonitor internally, so see documentation there for more information
MethodDef proto void VarToTable(DataTable* dt, const taString&amp; variable)
MethodDef opts [u'MENU', u'NULL_OK_0', u'NULL_TEXT_0_NewTable', u'CAT_Structure']
MethodDef name: FindUnitFmCoord
MethodDef desc: find unit from given set of x and y coordinates
MethodDef proto Unit_ptr FindUnitFmCoord(int x, int y)
MethodDef opts [u'CAT_Structure']
MethodDef name: GetGpGeomPos
MethodDef desc: returns unit group position in terms of layer unit group geometry gp_geom (pos is in unit coordinates and not unit group geometry)
MethodDef proto TwoDCoord GetGpGeomPos()
MethodDef opts [u'CAT_Structure']
MethodDef names [u'AddNoiseToWeights', u'BuildUnits', u'CheckBuild', u'Copy_Weights', u'FindUnitFmCoord', u'GetGpGeomPos', u'LayoutUnits', u'LesionCons', u'LesionUnits', u'LoadWeights', u'LoadWeights_strm', u'MonitorVar', u'PruneCons', u'RecomputeGeometry', u'SaveWeights', u'SaveWeights_strm', u'SkipWeights_strm', u'TransformWeights', u'UnitValuesFromArray', u'UnitValuesFromMatrix', u'UnitValuesToArray', u'UnitValuesToMatrix', u'VarToTable']
########################################################################
TypeDef len: 15
TypeDef name:  LayerSpec
TypeDef type: class
TypeDef desc: generic layer specification
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec']
TypeDef children: [u'SoLayerSpec', u'LeabraLayerSpec']
MethodDef name: CheckConfig_Layer
MethodDef desc: This is ONLY for spec-specific stuff; the layer still does all its default checking (incl child checking)
MethodDef proto bool CheckConfig_Layer(Layer* lay, bool quiet = false)
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef names [u'CheckConfig_Layer']
########################################################################
TypeDef len: 13
TypeDef name:  LayerDistances
TypeDef type: class
TypeDef desc: specifies distance from input/output layers
TypeDef cats:, [u'Network']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: fm_input
MemberDef type: int
MemberDef desc: how many layers between closest input layer and me (-1 if unknown)
MemberDef name: fm_output
MemberDef type: int
MemberDef desc: how many layers between closest output layer and me (-1 if unknown)
########################################################################
TypeDef len: 11
TypeDef name:  Layer_Group
TypeDef type: class
TypeDef desc: group of layers
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Network', u'INSTANCE']
MemberDef name: pos
MemberDef type: TDCoord
MemberDef desc: Position of Group of layers relative to network
########################################################################
TypeDef len: 13
TypeDef name:  NetViewFontSizes
TypeDef type: class
TypeDef desc: network display font sizes
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: net_name
MemberDef type: float
MemberDef opts [u'DEF_0.05']
MemberDef cats []
MemberDef desc: network name
MemberDef name: net_vals
MemberDef type: float
MemberDef opts [u'DEF_0.05']
MemberDef cats []
MemberDef desc: network values (counters, stats)
MemberDef name: layer
MemberDef type: float
MemberDef opts [u'DEF_0.04']
MemberDef cats []
MemberDef desc: layer names
MemberDef name: layer_vals
MemberDef type: float
MemberDef opts [u'DEF_0.03']
MemberDef cats []
MemberDef desc: layer values (stats)
MemberDef name: prjn
MemberDef type: float
MemberDef opts [u'DEF_0.01']
MemberDef cats []
MemberDef desc: projection names and values
MemberDef name: unit
MemberDef type: float
MemberDef opts [u'DEF_0.02']
MemberDef cats []
MemberDef desc: unit names and values
MemberDef name: un_nm_len
MemberDef type: int
MemberDef opts [u'DEF_3']
MemberDef cats []
MemberDef desc: unit name length -- used to compute output name font size
########################################################################
TypeDef len: 15
TypeDef name:  NetViewParams
TypeDef type: class
TypeDef desc: misc parameters for the network display
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: L_R_F
EnumDef val: L_R_F
EnumDef: all in front: sender is at left of layer, receiver is right
EnumDef name: L_R_B
EnumDef val: L_R_B
EnumDef: all in back: sender is at left of layer, receiver is right
EnumDef name: B_F
EnumDef val: B_F
EnumDef: sender is at back of layer, receiver is front
EnumDef names: [u'PrjnDisp']
MemberDef name: xy_square
MemberDef type: bool
MemberDef desc: keep the x and y dimensions of the network square (same) -- makes the units square
MemberDef name: unit_spacing
MemberDef type: float
MemberDef opts [u'DEF_0.05']
MemberDef cats []
MemberDef desc: spacing between units (as a proportion of total space available to render the unit)
MemberDef name: prjn_disp
MemberDef type: NetViewParams::PrjnDisp
MemberDef desc: how to arrange projection arrows to convey sender/receiver info
MemberDef name: prjn_name
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: whether to display the projection name
MemberDef name: prjn_width
MemberDef type: float
MemberDef opts [u'DEF_0.002']
MemberDef cats []
MemberDef desc: width of the projection arrows
MemberDef name: prjn_trans
MemberDef type: float
MemberDef opts [u'DEF_0.5']
MemberDef cats []
MemberDef desc: transparency of the projection arrows
MemberDef name: lay_trans
MemberDef type: float
MemberDef opts [u'DEF_0.5']
MemberDef cats []
MemberDef desc: transparency of the layer border
MemberDef name: unit_trans
MemberDef type: float
MemberDef opts [u'DEF_0.6']
MemberDef cats []
MemberDef desc: transparency of the units
########################################################################
TypeDef len: 15
TypeDef name:  NetViewObj
TypeDef type: class
TypeDef desc: network view object (3d object or text) -- is displayed in network view
TypeDef cats:, [u'Network']
TypeDef opts:, [u'EXT_nvobj', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: TEXT
EnumDef val: TEXT
EnumDef: text label
EnumDef name: OBJECT
EnumDef val: OBJECT
EnumDef: 3d object loaded from an open inventor format 3d object file
EnumDef names: [u'ObjType']
MemberDef name: desc
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: description of this object: what does it do, how should it be used, etc
MemberDef name: pos
MemberDef type: FloatTDCoord
MemberDef desc: 3d position of object (can be moved within network view)
MemberDef name: rot
MemberDef type: FloatRotation
MemberDef desc: 3d rotation of body, specifying an axis and a rot along that axis in radians: 180deg = 3.1415, 90deg = 1.5708, 45deg = .7854)
MemberDef name: scale
MemberDef type: FloatTDCoord
MemberDef desc: 3d scaling of object along each dimension (applied prior to rotation)
MemberDef name: obj_type
MemberDef type: NetViewObj::ObjType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: type of object to display
MemberDef name: obj_fname
MemberDef type: taString
MemberDef opts [u'CONDEDIT_ON_obj_type:OBJECT', u'FILE_DIALOG_LOAD', u'EXT_iv,wrl', u'FILETYPE_OpenInventor']
MemberDef cats []
MemberDef desc: file name of Open Inventor file that contains the 3d geometry of the object
MemberDef name: text
MemberDef type: taString
MemberDef opts [u'CONDEDIT_ON_obj_type:TEXT']
MemberDef cats []
MemberDef desc: text to display for text type of object
MemberDef name: font_size
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_obj_type:TEXT']
MemberDef cats []
MemberDef desc: font size to display text in, in normalized units (the entire network is 1x1x1, so this should typically be a smaller fraction like .05)
MemberDef name: set_color
MemberDef type: bool
MemberDef desc: if true, we directly set our own color (otherwise it is whatever the object defaults to)
MemberDef name: color
MemberDef type: taColor
MemberDef opts [u'CONDEDIT_ON_set_color']
MemberDef cats []
MemberDef desc: default color if not otherwise defined (a=alpha used for transparency)
########################################################################
TypeDef len: 9
TypeDef name:  NetViewObj_Group
TypeDef type: class
TypeDef desc: a group of network view objects
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  Network_Group
TypeDef type: class
TypeDef desc: a group of networks
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'FILETYPE_Network', u'EXT_net', u'COMPRESS', u'INSTANCE']
########################################################################
TypeDef len: 13
TypeDef name:  FullPrjnSpec
TypeDef type: class
TypeDef desc: Full connectivity between layers
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
TypeDef children: [u'PFCLVPrjnSpec']
########################################################################
TypeDef len: 13
TypeDef name:  TessEl
TypeDef type: class
TypeDef desc: one element of a tesselation specification
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: send_off
MemberDef type: TwoDCoord
MemberDef desc: offset from current receiving unit
MemberDef name: wt_val
MemberDef type: float
MemberDef desc: value to assign to weight
########################################################################
TypeDef len: 9
TypeDef name:  TessEl_List
TypeDef type: class
TypeDef desc: list of TessEl objects
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 15
TypeDef name:  TesselPrjnSpec
TypeDef type: class
TypeDef desc: arbitrary tesselations (repeating patterns) of connectivity
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: recv_off
MemberDef type: TwoDCoord
MemberDef desc: offset in layer for start of recv units to begin connecting
MemberDef name: recv_n
MemberDef type: TwoDCoord
MemberDef desc: number of receiving units to connect in each dimension (-1 for all)
MemberDef name: recv_skip
MemberDef type: TwoDCoord
MemberDef desc: increment for recv units in each dimension -- 1 = connect all units; 2 = skip every other unit, etc
MemberDef name: recv_group
MemberDef type: TwoDCoord
MemberDef desc: group together this many units under the same starting coord, resulting in a tile pattern
MemberDef name: wrap
MemberDef type: bool
MemberDef desc: whether to wrap coordinates around (else clip)
MemberDef name: send_scale
MemberDef type: FloatTwoDCoord
MemberDef desc: scale to apply to transform receiving unit coords into sending unit coords
MemberDef name: send_border
MemberDef type: FloatTwoDCoord
MemberDef desc: border size around sending layer (constant offset to add to sending offsets)
MemberDef name: send_offs
MemberDef type: TessEl_List
MemberDef desc: offsets of the sending units
MethodDef name: GetCtrFmRecv
MethodDef desc: get center of sender coords from receiving coords
MethodDef proto void GetCtrFmRecv(TwoDCoord&amp; sctr, TwoDCoord ruc)
MethodDef name: Connect_RecvUnit
MethodDef desc: connects one recv unit to all senders (doesn&apos;t check for linking..)
MethodDef proto void Connect_RecvUnit(Unit* ru_u, const TwoDCoord&amp; ruc, Projection* prjn)
MethodDef name: MakeEllipse
MethodDef desc: make a connection pattern in the form of an elipse: center is located at ctr_x,y and extends half_width and half_height therefrom
MethodDef proto void MakeEllipse(int half_width, int half_height, int ctr_x, int ctr_y)
MethodDef opts [u'BUTTON', u'MENU_SEP_BEFORE']
MethodDef name: MakeRectangle
MethodDef desc: make a connection pattern in the form of a rectangle starting at left, bottom coordinate and going right and up by width, height
MethodDef proto void MakeRectangle(int width, int height, int left, int bottom)
MethodDef opts [u'BUTTON']
MethodDef name: WeightsFromDist
MethodDef desc: assign weights as a linear function of sender distance
MethodDef proto void WeightsFromDist(float scale)
MethodDef opts [u'BUTTON']
MethodDef name: WeightsFromGausDist
MethodDef desc: assign weights as a Gaussian function of sender distance
MethodDef proto void WeightsFromGausDist(float scale, float sigma)
MethodDef opts [u'BUTTON']
MethodDef names [u'Connect_RecvUnit', u'GetCtrFmRecv', u'MakeEllipse', u'MakeRectangle', u'WeightsFromDist', u'WeightsFromGausDist']
########################################################################
TypeDef len: 15
TypeDef name:  OneToOnePrjnSpec
TypeDef type: class
TypeDef desc: one-to-one connectivity (1st unit to 1st unit, etc)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
TypeDef children: [u'GpOneToOnePrjnSpec', u'GpOneToManyPrjnSpec']
MemberDef name: n_conns
MemberDef type: int
MemberDef desc: number of connections to make (-1 for size of layer)
MemberDef name: recv_start
MemberDef type: int
MemberDef desc: starting unit index for recv connections
MemberDef name: send_start
MemberDef type: int
MemberDef desc: starting unit index for sending connections
########################################################################
TypeDef len: 13
TypeDef name:  UniformRndPrjnSpec
TypeDef type: class
TypeDef desc: Uniform random connectivity between layers -- only &apos;permute&apos; stye randomness is supported, creates same number of connections per unit
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: p_con
MemberDef type: float
MemberDef desc: overall probability of connection
MemberDef name: sym_self
MemberDef type: bool
MemberDef desc: if a self projection, make it symmetric (senders = receivers) otherwise it is not
MemberDef name: same_seed
MemberDef type: bool
MemberDef desc: use the same random seed each time (same connect pattern)
########################################################################
TypeDef len: 17
TypeDef name:  PolarRndPrjnSpec
TypeDef type: class
TypeDef desc: random connectivity defined as a function of distance and angle
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
EnumDef name: XY_DIST
EnumDef val: XY_DIST
EnumDef: X-Y axis distance between units
EnumDef name: XY_DIST_CENTER
EnumDef val: XY_DIST_CENTER
EnumDef: centered distance (layers centered over each other)
EnumDef name: XY_DIST_NORM
EnumDef val: XY_DIST_NORM
EnumDef: normalized range (0-1 for each layer) distance
EnumDef name: XY_DIST_CENTER_NORM
EnumDef val: XY_DIST_CENTER_NORM
EnumDef: normalized and centered (-1:1 for each layer) distance
EnumDef names: [u'UnitDistType']
MemberDef name: p_con
MemberDef type: float
MemberDef desc: overall probability of connection (number of samples)
MemberDef name: rnd_dist
MemberDef type: Random
MemberDef desc: prob density of connectivity as a fctn of distance
MemberDef name: rnd_angle
MemberDef type: Random
MemberDef desc: prob density of connectivity as a fctn of angle (1 = 2pi)
MemberDef name: dist_type
MemberDef type: PolarRndPrjnSpec::UnitDistType
MemberDef desc: type of distance function to use
MemberDef name: wrap
MemberDef type: bool
MemberDef desc: wrap around layer coordinates (else clip at ends)
MemberDef name: max_retries
MemberDef type: int
MemberDef desc: maximum number of times attempt to con same sender allowed
MemberDef name: same_seed
MemberDef type: bool
MemberDef desc: use the same random seed each time (same connect pattern)
MethodDef name: UnitDist
MethodDef desc: computes the distance between two units according to distance type
MethodDef proto float UnitDist(PolarRndPrjnSpec::UnitDistType typ, Projection* prjn, const TwoDCoord&amp; ru, const TwoDCoord&amp; su)
MethodDef name: GetUnitFmOff
MethodDef desc: gets unit from real-valued offset scaled according to distance type
MethodDef proto Unit_ptr GetUnitFmOff(PolarRndPrjnSpec::UnitDistType typ, bool wrap, Projection* prjn, const TwoDCoord&amp; ru, const FloatTwoDCoord&amp; su_off)
MethodDef name: GetDistProb
MethodDef desc: compute the probability for connecting two units as a fctn of distance
MethodDef proto float GetDistProb(Projection* prjn, Unit* ru, Unit* su)
MethodDef names [u'GetDistProb', u'GetUnitFmOff', u'UnitDist']
########################################################################
TypeDef len: 11
TypeDef name:  SymmetricPrjnSpec
TypeDef type: class
TypeDef desc: connects units with receiving connection where sending one already exists
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
########################################################################
TypeDef len: 15
TypeDef name:  ScriptPrjnSpec
TypeDef type: class
TypeDef desc: Script-controlled connectivity: use prjn variable in script code to refer to current projection that script is operating on; recv layer is prjn-&gt;layer, send layer is prjn-&gt;from; must do recv_unit-&gt;ConnectAlloc(no_of_cons, prjn); to allocate full set of connections before making any connections using recv_unit-&gt;ConnectFromCk(send_unit, prjn)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'MULT_INHERIT', u'INSTANCE']
TypeDef parents: [u'AbstractScriptBase', u'ScriptBase', u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: script_compiled
MemberDef type: bool
MemberDef opts [u'SHOW', u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: true when compiled
MemberDef name: script_file
MemberDef type: taFiler*
MemberDef desc: file to use for the script
MemberDef name: script_string
MemberDef type: taString
MemberDef opts [u'EDIT_DIALOG']
MemberDef cats []
MemberDef desc: script text to use for the script
MemberDef name: prjn
MemberDef type: Projection*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: this holds the argument to the prjn
MemberDef name: s_args
MemberDef type: SArg_Array
MemberDef desc: string-valued arguments to pass to script
MethodDef name: scriptSource
MethodDef desc: override this
MethodDef proto ScriptSource scriptSource()
MethodDef name: scriptFilename
MethodDef desc: override this
MethodDef proto const_taString scriptFilename()
MethodDef name: scriptString
MethodDef desc: override this
MethodDef proto const_taString scriptString()
MethodDef name: HasScript
MethodDef desc: returns true if we have some kind of script file or string to run
MethodDef proto bool HasScript()
MethodDef name: RunScript
MethodDef desc: run the script (returns false for no scr)
MethodDef proto bool RunScript()
MethodDef name: CompileScript
MethodDef desc: compile script from source into internal runnable format;
 &apos;true&apos; if compiled, &apos;false&apos; if not or if deferred due to being in readline
MethodDef proto bool CompileScript(bool force = false)
MethodDef opts [u'MENU', u'LABEL_Compile', u'MENU_ON_Actions', u'ARGC_0']
MethodDef name: StopScript
MethodDef desc: stops the running script
MethodDef proto void StopScript()
MethodDef name: CmdShellScript
MethodDef desc: set the css command shell to operate on this script, so that you can interact with (run, debug, etc) this script
MethodDef proto void CmdShellScript()
MethodDef opts [u'MENU', u'LABEL_CmdShell', u'MENU_ON_Actions']
MethodDef name: ExitShellScript
MethodDef desc: if this script is currently being operated on by the command shell (via CmdShell function), exit from that shell (shell returns to previous script it was operating on)
MethodDef proto void ExitShellScript()
MethodDef opts [u'MENU', u'LABEL_ExitShell', u'MENU_ON_Actions']
MethodDef name: LoadScript
MethodDef desc: load script from script file and compile it
MethodDef proto void LoadScript(const taString&amp; file_nm)
MethodDef name: LoadScriptString
MethodDef desc: load script from script string and compile it
MethodDef proto void LoadScriptString(const taString&amp; string)
MethodDef name: SetScript
MethodDef desc: set the script file name (also clears script string)
MethodDef proto void SetScript(const taString&amp; file_nm)
MethodDef name: Compile
MethodDef desc: compile script from script file into internal runnable format
MethodDef proto void Compile()
MethodDef opts [u'BUTTON']
MethodDef names [u'CmdShellScript', u'Compile', u'CompileScript', u'ExitShellScript', u'HasScript', u'LoadScript', u'LoadScriptString', u'RunScript', u'SetScript', u'StopScript', u'scriptFilename', u'scriptSource', u'scriptString']
########################################################################
TypeDef len: 11
TypeDef name:  CustomPrjnSpec
TypeDef type: class
TypeDef desc: connectivity is defined manually (i.e. unit-by-unit)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
########################################################################
TypeDef len: 13
TypeDef name:  GpOneToOnePrjnSpec
TypeDef type: class
TypeDef desc: unit_group based one-to-one connectivity (all in 1st group to all in 1st group, etc)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec', u'OneToOnePrjnSpec']
TypeDef children: [u'RndGpOneToOnePrjnSpec']
########################################################################
TypeDef len: 13
TypeDef name:  RndGpOneToOnePrjnSpec
TypeDef type: class
TypeDef desc: uniform random connectivity between one-to-one groups -- only &apos;permute&apos; style random connectivity is supported (same number of connections across recv units)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec', u'OneToOnePrjnSpec', u'GpOneToOnePrjnSpec']
MemberDef name: p_con
MemberDef type: float
MemberDef desc: overall probability of connection
MemberDef name: same_seed
MemberDef type: bool
MemberDef desc: use the same random seed each time (same connect pattern)
########################################################################
TypeDef len: 17
TypeDef name:  GpOneToManyPrjnSpec
TypeDef type: class
TypeDef desc: unit_group based one-to-many connectivity (one sending gp to all recv units)
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec', u'OneToOnePrjnSpec']
EnumDef name: RECV_SEND_PAIR
EnumDef val: RECV_SEND_PAIR
EnumDef: create separate con_groups for each recv_send pair
EnumDef name: SEND_ONLY
EnumDef val: SEND_ONLY
EnumDef: create separate recv con_groups for ea sending gp
EnumDef name: ONE_GROUP
EnumDef val: ONE_GROUP
EnumDef: make only one con_group
EnumDef names: [u'NConGroups']
MemberDef name: n_con_groups
MemberDef type: GpOneToManyPrjnSpec::NConGroups
MemberDef desc: number of con_groups to create
MethodDef name: GetNGroups
MethodDef desc: get number of connection groups for the projection
MethodDef proto void GetNGroups(Projection* prjn, int&amp; r_n_ugp, int&amp; s_n_ugp)
MethodDef names [u'GetNGroups']
########################################################################
TypeDef len: 13
TypeDef name:  GpTessEl
TypeDef type: class
TypeDef desc: one element of a tesselation specification for groups
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: send_gp_off
MemberDef type: TwoDCoord
MemberDef desc: offset of group from current receiving group
MemberDef name: p_con
MemberDef type: float
MemberDef desc: proportion connectivity from this group -- negative value means just make symmetric cons
########################################################################
TypeDef len: 9
TypeDef name:  GpTessEl_List
TypeDef type: class
TypeDef desc: list of GpTessEl objects
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 15
TypeDef name:  GpRndTesselPrjnSpec
TypeDef type: class
TypeDef desc: specifies patterns of groups to connect with, with random connectivity within each group -- only &apos;permute&apos; style randomness is suported, producing same number of recv connections per unit
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: recv_gp_off
MemberDef type: TwoDCoord
MemberDef desc: offset for start of recv group to begin connecting
MemberDef name: recv_gp_n
MemberDef type: TwoDCoord
MemberDef desc: number of receiving groups to connect in each dimension (-1 for all)
MemberDef name: recv_gp_skip
MemberDef type: TwoDCoord
MemberDef desc: increment for recv groups in each dimension -- 1 = connect all groups; 2 = skip every other group, etc
MemberDef name: recv_gp_group
MemberDef type: TwoDCoord
MemberDef desc: group together this many units under the same starting coord, resulting in a tile pattern
MemberDef name: send_gp_scale
MemberDef type: FloatTwoDCoord
MemberDef desc: scale to apply to transform receiving unit coords into sending unit coords
MemberDef name: send_gp_border
MemberDef type: TwoDCoord
MemberDef desc: border size around sending layer (constant offset to add to sending offsets)
MemberDef name: send_gp_offs
MemberDef type: TessEl_List
MemberDef desc: offsets of the sending units
MemberDef name: wrap
MemberDef type: bool
MemberDef desc: whether to wrap coordinates around (else clip)
MemberDef name: def_p_con
MemberDef type: float
MemberDef desc: default probability of connectivity when new send_gp_offs are created
MemberDef name: sym_self
MemberDef type: bool
MemberDef desc: if a self projection, make it symmetric (senders = receivers) otherwise it is not
MemberDef name: same_seed
MemberDef type: bool
MemberDef desc: use the same random seed each time (same connect pattern)
MethodDef name: GetCtrFmRecv
MethodDef desc: get center of sender coords from receiving coords
MethodDef proto void GetCtrFmRecv(TwoDCoord&amp; sctr, TwoDCoord ruc)
MethodDef name: Connect_RecvGp
MethodDef desc: connects one recv unit to all senders
MethodDef proto void Connect_RecvGp(Unit_Group* ru_gp, const TwoDCoord&amp; ruc, Projection* prjn)
MethodDef name: MakeRectangle
MethodDef desc: make a connection pattern in the form of a rectangle starting at left, bottom coordinate and going right and up by width, height
MethodDef proto void MakeRectangle(int width, int height, int left, int bottom)
MethodDef opts [u'BUTTON']
MethodDef name: MakeEllipse
MethodDef desc: make a connection pattern in the form of an elipse: center is located at ctr_x,y and extends half_width and half_height therefrom
MethodDef proto void MakeEllipse(int half_width, int half_height, int ctr_x, int ctr_y)
MethodDef opts [u'BUTTON']
MethodDef name: SetPCon
MethodDef desc: set p_con value for a range of send_gp_offs (default = all; end-1 = all)
MethodDef proto void SetPCon(float p_con, int start = 0, int end = -1)
MethodDef opts [u'BUTTON']
MethodDef names [u'Connect_RecvGp', u'GetCtrFmRecv', u'MakeEllipse', u'MakeRectangle', u'SetPCon']
########################################################################
TypeDef len: 15
TypeDef name:  TiledRFPrjnSpec
TypeDef type: class
TypeDef desc: Tiled receptive field projection spec: connects entire receiving layer unit groups with overlapping tiled regions of sending layers
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: recv_gp_border
MemberDef type: TwoDCoord
MemberDef desc: number of groups around edge of layer to not connect
MemberDef name: recv_gp_ex_st
MemberDef type: TwoDCoord
MemberDef desc: start of groups to exclude (e.g., from the middle; -1 = no exclude)
MemberDef name: recv_gp_ex_n
MemberDef type: TwoDCoord
MemberDef desc: number of groups to exclude
MemberDef name: send_border
MemberDef type: TwoDCoord
MemberDef desc: number of units around edge of sending layer to not connect
MemberDef name: send_adj_rfsz
MemberDef type: TwoDCoord
MemberDef desc: adjust the total number of sending units by this amount in computing rfield size
MemberDef name: send_adj_sndloc
MemberDef type: TwoDCoord
MemberDef desc: adjust the total number of sending units by this amount in computing sending locations
MemberDef name: rf_width_mult
MemberDef type: float
MemberDef desc: multiplier factor on the receptive field width: 1.0 = exactly half overlap of RF&apos;s across groups. Larger number = more overlap
MemberDef name: ru_geo
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: receiving unit geometry
MemberDef name: recv_gp_ed
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: recv gp end
MemberDef name: recv_gp_ex_ed
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: recv gp ex end
MemberDef name: su_act_geom
MemberDef type: PosTwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: sending actual geometry
MemberDef name: n_recv_gps
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: number of recv gps
MemberDef name: n_send_units
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: number of sending units total
MemberDef name: rf_ovlp
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: ovlp = send / (ng + 1)
MemberDef name: rf_move
MemberDef type: FloatTwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: how much to move sending rf per recv group
MemberDef name: rf_width
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: width of the sending rf
MethodDef name: InitRFSizes
MethodDef desc: initialize sending receptive field sizes
MethodDef proto bool InitRFSizes(Projection* prjn)
MethodDef name: SelectRF
MethodDef desc: select all sending and receiving units in the receptive field of this projection
MethodDef proto void SelectRF(Projection* prjn)
MethodDef opts [u'BUTTON']
MethodDef names [u'InitRFSizes', u'SelectRF']
########################################################################
TypeDef len: 15
TypeDef name:  TiledGpRFPrjnSpec
TypeDef type: class
TypeDef desc: Tiled receptive field projection spec for entirely group-to-group connections: connects entire receiving layer unit groups with overlapping tiled regions of sending layer groups
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: send_gp_size
MemberDef type: TwoDCoord
MemberDef desc: number of groups in the sending receptive field
MemberDef name: send_gp_skip
MemberDef type: TwoDCoord
MemberDef desc: number of groups to skip per each recv group (typically 1/2 of the size for nice overlap)
MemberDef name: reciprocal
MemberDef type: bool
MemberDef desc: if true, make the appropriate reciprocal connections for a backwards projection from recv to send
MethodDef name: Connect_Reciprocal
MethodDef proto void Connect_Reciprocal(Projection* prjn)
MethodDef names [u'Connect_Reciprocal']
########################################################################
TypeDef len: 15
TypeDef name:  TiledNovlpPrjnSpec
TypeDef type: class
TypeDef desc: Tiled non-overlapping projection spec: connects entire receiving layer unit groups with non-overlapping tiled regions of sending units
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: reciprocal
MemberDef type: bool
MemberDef desc: if true, make the appropriate reciprocal connections for a backwards projection from recv to send
MemberDef name: ru_geo
MemberDef type: TwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: receiving unit geometry
MemberDef name: su_act_geom
MemberDef type: PosTwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: sending actual geometry
MemberDef name: rf_width
MemberDef type: FloatTwoDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: how much to move sending rf per recv group
MethodDef name: InitRFSizes
MethodDef desc: initialize sending receptive field sizes
MethodDef proto bool InitRFSizes(Projection* prjn)
MethodDef name: Connect_Reciprocal
MethodDef desc: int ProbAddCons(Projection* prjn, float p_add_con, float init_wt = 0.0);
MethodDef proto void Connect_Reciprocal(Projection* prjn)
MethodDef names [u'Connect_Reciprocal', u'InitRFSizes']
########################################################################
TypeDef len: 15
TypeDef name:  float_CircBuffer
TypeDef type: class
TypeDef desc: Circular buffer for holding state information -- efficient way to store a fixed window of state information without actually shifting memory around -- use CircAdd to initially populate and CircShiftLeft to make room for new items
TypeDef cats:, [u'Data']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'float_Array']
MemberDef name: st_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: index in underlying array where the list starts (i.e., the position of the logical 0 index) -- updated by functions and should not be set manually
MemberDef name: length
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: logical length of the list -- is controlled by adding and shifting, and should NOT be set manually
MethodDef name: CircIdx
MethodDef desc: gets physical index from logical circular index
MethodDef proto int CircIdx(int cidx)
MethodDef opts [u'CAT_CircAccess']
MethodDef name: CircIdxInRange
MethodDef desc: check if logical circular index is in range
MethodDef proto bool CircIdxInRange(int cidx)
MethodDef opts [u'CAT_CircAccess']
MethodDef name: CircSafeEl
MethodDef desc: returns element at given logical circular index, or err value which is 0.0
MethodDef proto const_float_ref CircSafeEl(int cidx)
MethodDef opts [u'CAT_CircAccess']
MethodDef name: CircPeek
MethodDef desc: returns element at end of circular buffer
MethodDef proto const_float_ref CircPeek()
MethodDef opts [u'CAT_CircAccess']
MethodDef name: CircShiftLeft
MethodDef desc: shift the buffer to the left -- shift the first elements off the start of the list, making room at the end for more elements (decreasing length)
MethodDef proto void CircShiftLeft(int nshift)
MethodDef opts [u'CAT_CircModify']
MethodDef name: CircAddExpand
MethodDef desc: add a new item to the circular buffer, expanding the length of the list by 1 under all circumstances
MethodDef proto void CircAddExpand(const float&amp; item)
MethodDef opts [u'CAT_CircModify']
MethodDef name: CircAddLimit
MethodDef desc: add a new item to the circular buffer, shifting it left if length is at or above max_length to ensure a fixed overall length list (otherwise expanding list up to max_length)
MethodDef proto void CircAddLimit(const float&amp; item, int max_length)
MethodDef opts [u'CAT_CircModify']
MethodDef names [u'CircAddExpand', u'CircAddLimit', u'CircIdx', u'CircIdxInRange', u'CircPeek', u'CircSafeEl', u'CircShiftLeft']
########################################################################
TypeDef len: 19
TypeDef name:  LayerDataEl
TypeDef type: class
TypeDef desc: controls the reading/writing of information to/from layers and data blocks/tables
TypeDef cats:, [u'Network']
TypeDef opts:, [u'VIRT_BASE', u'NO_INSTANCE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'LayerWriterEl']
EnumDef name: LAYER
EnumDef val: LAYER
EnumDef: read/write the layer information
EnumDef name: TRIAL_NAME
EnumDef val: TRIAL_NAME
EnumDef: read/write the network trial_name field
EnumDef name: GROUP_NAME
EnumDef val: GROUP_NAME
EnumDef: read/write the network group_name field
EnumDef names: [u'NetTarget']
MemberDef name: col_lookup
MemberDef type: DataCol*
MemberDef opts [u'NO_SAVE', u'FROM_GROUP_data_cols', u'APPLY_IMMED', u'NO_EDIT', u'NO_UPDATE_POINTER']
MemberDef cats []
MemberDef desc: column/channel in data table use -- just to lookup the chan_name, which is what is actually used -- this is reset to NULL after column is selected
MemberDef name: chan_name
MemberDef type: taString
MemberDef desc: name of the channel/column in the data to use
MemberDef name: net_target
MemberDef type: LayerDataEl::NetTarget
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: what to read/write from on the network
MemberDef name: layer
MemberDef type: LayerRef
MemberDef opts [u'NO_SAVE', u'CONDSHOW_ON_net_target:LAYER', u'FROM_GROUP_layer_group', u'NO_SCOPE']
MemberDef cats []
MemberDef desc: the Layer that will get read or written -- this is just for choosing layer_name from a list -- will be reset after selection is applied
MemberDef name: layer_name
MemberDef type: taString
MemberDef opts [u'CONDSHOW_ON_net_target:LAYER']
MemberDef cats []
MemberDef desc: the name of the Layer that will get read or written
MemberDef name: offset
MemberDef type: PosTwoDCoord
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: offset in layer or unit group at which to start reading/writing
MethodDef name: SetDataNetwork
MethodDef desc: set the data table and network pointers enable looking up columns/layer names
MethodDef proto void SetDataNetwork(DataBlock* db, Network* net)
MethodDef opts [u'CAT_LayerData']
MethodDef name: GetChanIdx
MethodDef desc: get channel index from data block: depends on source or sink (override in subclass)
MethodDef proto int GetChanIdx(DataBlock* db)
MethodDef opts [u'CAT_LayerData']
MethodDef names [u'GetChanIdx', u'SetDataNetwork']
########################################################################
TypeDef len: 11
TypeDef name:  LayerDataEl_List
TypeDef type: class
TypeDef desc: list of individual LayerDataEl objects
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
MethodDef name: SetDataNetwork
MethodDef desc: set the data table and network pointers enable looking up columns/layer names
MethodDef proto void SetDataNetwork(DataBlock* db, Network* net)
MethodDef opts [u'CAT_LayerData']
MethodDef name: FindChanName
MethodDef desc: find (first) layer data that applies to given data channel name
MethodDef proto LayerDataEl_ptr FindChanName(const taString&amp; chn_name)
MethodDef opts [u'CAT_LayerData']
MethodDef name: FindMakeChanName
MethodDef desc: find (first) layer data that applies to given data channel name -- make it if it doesn&apos;t exist
MethodDef proto LayerDataEl_ptr FindMakeChanName(const taString&amp; chn_name)
MethodDef opts [u'CAT_LayerData']
MethodDef name: FindLayerName
MethodDef desc: find (first) layer data that applies to given layer name
MethodDef proto LayerDataEl_ptr FindLayerName(const taString&amp; lay_name)
MethodDef opts [u'CAT_LayerData']
MethodDef name: FindMakeLayerName
MethodDef desc: find (first) layer data that applies to given layer name -- make it if it doesn&apos;t exist
MethodDef proto LayerDataEl_ptr FindMakeLayerName(const taString&amp; lay_name)
MethodDef opts [u'CAT_LayerData']
MethodDef name: FindLayerData
MethodDef desc: find (first) layer data that applies to given data channel name and layer name
MethodDef proto LayerDataEl_ptr FindLayerData(const taString&amp; chn_name, const taString&amp; lay_name)
MethodDef opts [u'CAT_LayerData']
MethodDef name: FindMakeLayerData
MethodDef desc: find (first) layer data that applies to given data channel name and layer name -- make it if it doesn&apos;t exist
MethodDef proto LayerDataEl_ptr FindMakeLayerData(const taString&amp; chn_name, const taString&amp; lay_name)
MethodDef opts [u'CAT_LayerData']
MethodDef names [u'FindChanName', u'FindLayerData', u'FindLayerName', u'FindMakeChanName', u'FindMakeLayerData', u'FindMakeLayerName', u'SetDataNetwork']
########################################################################
TypeDef len: 15
TypeDef name:  LayerWriterEl
TypeDef type: class
TypeDef desc: controls the writing of input data from a data source to a network layer
TypeDef cats:, [u'Network']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'LayerDataEl']
MemberDef name: use_layer_type
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED', u'DEF_true']
MemberDef cats []
MemberDef desc: use layer_type information on the layer to determine flags to set (if false, turn on EXPERT showing to view flags)
MemberDef name: ext_flags
MemberDef type: Unit::ExtType
MemberDef opts [u'EXPERT', u'CONDSHOW_OFF_use_layer_type:true']
MemberDef cats []
MemberDef desc: how to flag the unit/layer&apos;s external input status
MemberDef name: noise
MemberDef type: Random
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: noise optionally added to values when applied
MethodDef name: ApplyInputData
MethodDef desc: apply data to the layer on network, using the network&apos;s current context settings (TEST,TRAIN,etc) -- returns success
MethodDef proto bool ApplyInputData(DataBlock* db, Network* net)
MethodDef opts [u'CAT_LayerWriter']
MethodDef names [u'ApplyInputData']
########################################################################
TypeDef len: 15
TypeDef name:  LayerWriter
TypeDef type: class
TypeDef desc: controls the writing of input data from a data source to network layers
TypeDef cats:, [u'Network']
TypeDef opts:, [u'STEM_BASE', u'DEF_CHILD_layer_data', u'DEF_CHILDNAME_LayerDataEls', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: data
MemberDef type: DataBlockRef
MemberDef desc: the data object with input data to present to the network
MemberDef name: network
MemberDef type: NetworkRef
MemberDef desc: the network to present the input data to
MemberDef name: layer_data
MemberDef type: LayerDataEl_List
MemberDef desc: the layers/input data channel mappings to present to the network
MethodDef name: AddLayerData
MethodDef desc: add a new layer data item
MethodDef proto LayerDataEl_ptr AddLayerData()
MethodDef opts [u'BUTTON']
MethodDef name: SetDataNetwork
MethodDef desc: set the data table and network pointers -- convenience function for programs
MethodDef proto void SetDataNetwork(DataBlock* db, Network* net)
MethodDef opts [u'CAT_LayerWriter']
MethodDef name: AutoConfig
MethodDef desc: do a &apos;best guess&apos; configuration of items by matching up like-named data Channels and network Layers
MethodDef proto void AutoConfig(bool reset_existing = true)
MethodDef opts [u'BUTTON', u'CAT_LayerWriter']
MethodDef name: ApplyInputData
MethodDef desc: apply data to the layers, using the network&apos;s current context settings (TEST,TRAIN,etc) -- returns success
MethodDef proto bool ApplyInputData()
MethodDef opts [u'CAT_LayerWriter']
MethodDef names [u'AddLayerData', u'ApplyInputData', u'AutoConfig', u'SetDataNetwork']
########################################################################
TypeDef len: 17
TypeDef name:  NetMonItem
TypeDef type: class
TypeDef desc: used for monitoring the value of an object
(special support for network variables, including Layer, Projection, UnitGroup, Unit)
TypeDef cats:, [u'Network']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: AUTO_NAME
EnumDef val: AUTO_NAME
EnumDef: auto-generate a name based on the object name and the variable name, etc
EnumDef name: MY_NAME
EnumDef val: MY_NAME
EnumDef: always use my (net monitor item) name; if multiple columns, then add a subscript index for later ones (_1 _2, etc.)
EnumDef names: [u'NameStyle']
MemberDef name: computed
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: if true, this value is computed separately in a program, and this is here just to make a place for it in the output data (note: computation sold separately -- must be performed elsewhere)
MemberDef name: object_type
MemberDef type: TypeDef*
MemberDef opts [u'APPLY_IMMED', u'CONDSHOW_OFF_computed', u'TYPE_taOBase']
MemberDef cats []
MemberDef desc: LAYER type of object to monitor (narrows down the choices when choosing the object)
MemberDef name: object
MemberDef type: taSmartRef
MemberDef opts [u'CONDSHOW_OFF_computed', u'TYPE_ON_object_type', u'NO_SCOPE']
MemberDef cats []
MemberDef desc: the network object being monitored
MemberDef name: lookup_var
MemberDef type: MemberDef*
MemberDef opts [u'APPLY_IMMED', u'CONDSHOW_OFF_computed', u'TYPE_ON_object_type', u'NULL_OK', u'NO_SAVE', u'NO_EDIT']
MemberDef cats []
MemberDef desc: lookup a member variable to monitor -- this just enters the name into the variable field and then auto-resets to NULL. you can also just type variable directly, esp for non-members (r.wt, etc)
MemberDef name: variable
MemberDef type: taString
MemberDef opts [u'CONDSHOW_OFF_computed']
MemberDef cats []
MemberDef desc: Variable on object to monitor. Can also be a variable on sub-objects (e.g., act on Layer or Network will get all unit activations); r. and s. indicate recv and send connection vals (e.g., r.wt)
MemberDef name: var_label
MemberDef type: taString
MemberDef opts [u'CONDSHOW_OFF_computed']
MemberDef cats []
MemberDef desc: label to use in place of variable in naming the columns/channels generated from this data (if empty, variable is used)
MemberDef name: name_style
MemberDef type: NetMonItem::NameStyle
MemberDef opts [u'CONDSHOW_OFF_computed']
MemberDef cats []
MemberDef desc: how to name the columns/channels generated from this data?
MemberDef name: max_name_len
MemberDef type: int
MemberDef opts [u'DEF_6', u'EXPERT']
MemberDef cats []
MemberDef desc: maximum length for any name segment
MemberDef name: val_type
MemberDef type: taBase::ValType
MemberDef opts [u'CONDSHOW_ON_computed']
MemberDef cats []
MemberDef desc: type of data column to create (only for computed variables)
MemberDef name: matrix
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED', u'CONDSHOW_ON_computed']
MemberDef cats []
MemberDef desc: if true, create a matrix data column (otherwise scalar)
MemberDef name: matrix_geom
MemberDef type: MatrixGeom
MemberDef opts [u'CONDSHOW_ON_matrix']
MemberDef cats []
MemberDef desc: geometry of matrix to create if a matrix type
MemberDef name: data_agg
MemberDef type: bool
MemberDef opts [u'CONDSHOW_ON_computed']
MemberDef cats []
MemberDef desc: compute value automatically from a column of data in another data table
MemberDef name: data_src
MemberDef type: DataTableRef
MemberDef opts [u'CONDSHOW_ON_data_agg']
MemberDef cats []
MemberDef desc: source data for data aggregation operation
MemberDef name: agg_col
MemberDef type: DataOpEl
MemberDef opts [u'CONDSHOW_ON_data_agg']
MemberDef cats []
MemberDef desc: column name in data_src data table to get data to aggregate from
MemberDef name: agg
MemberDef type: Aggregate
MemberDef opts [u'CONDSHOW_ON_computed:false||data_agg:true']
MemberDef cats []
MemberDef desc: aggregation operation to perform (reduces vector data down to a single scalar value for network variables, and is aggregation to perform for data_agg aggregation)
MemberDef name: select_rows
MemberDef type: bool
MemberDef opts [u'CONDSHOW_ON_data_agg']
MemberDef cats []
MemberDef desc: whether to select specific rows of data from the data_src data table to operate on
MemberDef name: select_spec
MemberDef type: DataSelectEl
MemberDef opts [u'CONDSHOW_ON_select_rows']
MemberDef cats []
MemberDef desc: optional selection of rows to perform aggregation on according to the value of items in given column -- for more complex selections and/or greater efficiency, use DataSelectRowsProg to create intermediate data table and operate on that
MemberDef name: pre_proc_1
MemberDef type: SimpleMathSpec
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: first step of pre-processing to perform
MemberDef name: pre_proc_2
MemberDef type: SimpleMathSpec
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: second step of pre-processing to perform
MemberDef name: pre_proc_3
MemberDef type: SimpleMathSpec
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: third step of pre-processing to perform
MethodDef name: GetAutoName
MethodDef desc: get auto-name value based on current values
MethodDef proto taString GetAutoName(taBase* obj)
MethodDef name: GetObjName
MethodDef desc: get name of object for naming monitored values -- uses GetDisplayName by default but is optimized for various network objects; uses max_name_len constraint
MethodDef proto taString GetObjName(taBase* obj)
MethodDef name: GetChanName
MethodDef desc: get name for given column/channel of data, taking into account namestyle preferences; chan_idx is index within the channelspec_list for this guy
MethodDef proto taString GetChanName(taBase* obj, int chan_idx)
MethodDef name: SetMonVals
MethodDef desc: set object and variable, and update appropriately
MethodDef proto void SetMonVals(taBase* obj, const taString&amp; var)
MethodDef opts [u'CAT_Monitor']
MethodDef name: GetMonVals
MethodDef desc: get the monitor data and stick it in the current row of the datablock/datatable
MethodDef proto void GetMonVals(DataBlock* db)
MethodDef opts [u'CAT_Monitor']
MethodDef name: ResetMonVals
MethodDef desc: deletes the cached vars
MethodDef proto void ResetMonVals()
MethodDef opts [u'CAT_Monitor']
MethodDef name: ScanObject
MethodDef desc: get the monitor data information from the object
MethodDef proto void ScanObject()
MethodDef opts [u'CAT_Monitor']
MethodDef names [u'GetAutoName', u'GetChanName', u'GetMonVals', u'GetObjName', u'ResetMonVals', u'ScanObject', u'SetMonVals']
########################################################################
TypeDef len: 9
TypeDef name:  NetMonItem_List
TypeDef type: class
TypeDef desc: list of network monitor items
TypeDef cats:, [u'Network']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 17
TypeDef name:  ActBasedRF
TypeDef type: class
TypeDef desc: computes an activation-based receptive field of network unit activations weighted by the activation of target units within selected target layer across a range of testing patterns: effectively shows what patterns of network activation are associated with the activation of target units, regardless of direct connectivity: columns of data table are for each network layer, and rows are the units within the target layer
TypeDef cats:, [u'Network']
TypeDef opts:, [u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: NO_NORM
EnumDef val: NO_NORM
EnumDef: no normalization at all
EnumDef name: NORM_TRG_UNIT
EnumDef val: NORM_TRG_UNIT
EnumDef: normalize across each target unit separately: each row of the rf_data table has a max value of 1
EnumDef name: NORM_TRG_LAYER
EnumDef val: NORM_TRG_LAYER
EnumDef: normalize across entire target layer of units: entire rf_data table has a max value of 1
EnumDef name: NORM_RF_LAY
EnumDef val: NORM_RF_LAY
EnumDef: normalize across each receptive field layer (i.e., all the layers in the network) separately: each column of the rf_data table has a max value of 1
EnumDef name: NORM_TRG_UNIT_RF_LAY
EnumDef val: NORM_TRG_UNIT_RF_LAY
EnumDef: normalize across each target unit for each receptive field layer: each cell of the rf_data table has a max value of 1
EnumDef names: [u'NormMode']
MemberDef name: rf_data
MemberDef type: DataTableRef
MemberDef desc: the data table containing the results of the receptive field computation (is completely configured by this object!) -- columns are layers of the network, and rows are units of the trg_layer -- this is computed from sum_data / wt_array followed by normalization
MemberDef name: network
MemberDef type: NetworkRef
MemberDef desc: the network to operate on -- all layers (except lesioned or iconified) are computed, with each layer getting a column of the data table
MemberDef name: trg_layer
MemberDef type: LayerRef
MemberDef opts [u'NO_SCOPE']
MemberDef cats []
MemberDef desc: the target layer to compute receptive fields for: each unit in the layer gets a row of the data table, and the columns in that row show the activation based receptive field for that unit for all the other layers in the network
MemberDef name: norm_mode
MemberDef type: ActBasedRF::NormMode
MemberDef desc: how to normalize the resulting values
MemberDef name: threshold
MemberDef type: float
MemberDef desc: threshold on absolute value of target unit activation for including in overall average -- can produce sharper results by increasing the threshold to only include cases where the unit is strongly active
MethodDef name: ConfigDataTable
MethodDef desc: configure data table based on current network (called internally for rf_data, sum_data, and wt_data)
MethodDef proto void ConfigDataTable(DataTable* dt, Network* net)
MethodDef opts [u'CAT_ActBasedRF']
MethodDef name: InitData
MethodDef desc: initialize the data based on current network settings (calls ConfigDataTable on rf_data, sum_data, and wt_data, and intializes all values to 0)
MethodDef proto void InitData()
MethodDef opts [u'BUTTON', u'CAT_ActBasedRF']
MethodDef name: InitAll
MethodDef desc: set the data table, network, trg_lay pointers and initialize everything -- convenience function for init_code of programs -- resets all data first and then calls InitData after setting
MethodDef proto void InitAll(DataTable* dt, Network* net, Layer* tlay)
MethodDef opts [u'CAT_ActBasedRF']
MethodDef name: IncrementSums
MethodDef desc: update the receptive field data based on current network activations (computes sum_data and wt_data, does NOT compute rf_data based on those: see ComputeRF)
MethodDef proto bool IncrementSums()
MethodDef opts [u'BUTTON', u'CAT_ActBasedRF']
MethodDef name: ComputeRF
MethodDef desc: compute the rf_data based on currently accumulated sum_data and wt_data from multiple previous calls to IncrementSums function
MethodDef proto bool ComputeRF()
MethodDef opts [u'BUTTON', u'CAT_ActBasedRF']
MethodDef name: CopyRFtoNetWtPrjn
MethodDef desc: copy given target unit number&apos;s rf_data to the network&apos;s wt_prjn field (weight projection), for easy visualization in the network context
MethodDef proto bool CopyRFtoNetWtPrjn(int trg_unit_no)
MethodDef opts [u'BUTTON', u'CAT_ActBasedRF']
MethodDef names [u'ComputeRF', u'ConfigDataTable', u'CopyRFtoNetWtPrjn', u'IncrementSums', u'InitAll', u'InitData']
########################################################################
TypeDef len: 15
TypeDef name:  NetBaseProgEl
TypeDef type: class
TypeDef desc: base type for network-oriented prog els (filter function, etc)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'VIRT_BASE', u'NO_INSTANCE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
TypeDef children: [u'NetCounterInit', u'NetCounterIncr', u'NetUpdateView', u'InitNamedUnits']
MethodDef name: NetProgVarFilter
MethodDef desc: Network* progvar filter -- only shows Network* items -- use in ITEM_FILTER comment directive
MethodDef proto bool NetProgVarFilter(void* base, void* var)
MethodDef names [u'NetProgVarFilter']
########################################################################
TypeDef len: 17
TypeDef name:  NetDataLoop
TypeDef type: class
TypeDef desc: For network input data: loops over items in a DataTable, in different basic orderings, using index to select current data table item using ReadItem(index) call, so that later processes will access this row of data. Note: assumes that there is a &apos;network&apos; object pointer variable and an int &apos;trial&apos; counter variable defined in the program!!
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop', u'DataLoop']
TypeDef children: [u'BasicDataLoop']
MemberDef name: dmem_nprocs
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: number of processors to use for distributed memory processing (input data distributed over nodes) -- computed automatically if dmem is active; else set to 1
MemberDef name: dmem_this_proc
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: processor rank for this processor relative to communicator group
MethodDef name: DMem_Initialize
MethodDef desc: configure the dmem communicator stuff: depends on dmem setup of network
MethodDef proto void DMem_Initialize(Network* net)
MethodDef names [u'DMem_Initialize']
########################################################################
TypeDef len: 19
TypeDef name:  NetGroupedDataLoop
TypeDef type: class
TypeDef desc: loops over items in a DataTable, in different basic orderings, using index to select current data table item using ReadItem(index) call, so that later processes will access this row of data. Note: assumes that there is a &apos;network&apos; variable defined in program!!
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop']
TypeDef children: [u'GroupedDataLoop']
EnumDef name: SEQUENTIAL
EnumDef val: SEQUENTIAL
EnumDef: present events (input data rows) in sequential order
EnumDef name: PERMUTED
EnumDef val: PERMUTED
EnumDef: permute the order of event (input data row) presentation
EnumDef name: RANDOM
EnumDef val: RANDOM
EnumDef: pick an event (input data row) at random (with replacement)
EnumDef names: [u'Order']
MemberDef name: data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to the data table to use
MemberDef name: group_index_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable for the group index used in the loop -- goes from 0 to number of groups in data table-1
MemberDef name: item_index_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: program variable for the item index used in the loop -- goes from 0 to number of items in current group
MemberDef name: group_order_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: variable that contains the order to process data groups in -- is automatically created if not set
MemberDef name: item_order_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: variable that contains the order to process data items in -- is automatically created if not set
MemberDef name: group_order
MemberDef type: NetGroupedDataLoop::Order
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: order to process data groups in -- set from group_order_var
MemberDef name: item_order
MemberDef type: NetGroupedDataLoop::Order
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: order to process data items in -- set from item_order_var
MemberDef name: group_col
MemberDef type: int
MemberDef desc: column in the data table that contains the group names
MemberDef name: group_idx_list
MemberDef type: int_Array
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: list of group starting indicies
MemberDef name: item_idx_list
MemberDef type: int_Array
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: list of item indicies within group
MethodDef name: GetOrderVals
MethodDef desc: get order values from order_var variables
MethodDef proto void GetOrderVals()
MethodDef name: GetGroupList
MethodDef desc: initialize the group_idx_list from the data: idx&apos;s are where group name changes
MethodDef proto void GetGroupList()
MethodDef name: GetItemList
MethodDef proto void GetItemList(int group_idx)
MethodDef names [u'GetGroupList', u'GetItemList', u'GetOrderVals']
########################################################################
TypeDef len: 13
TypeDef name:  BasicDataLoop
TypeDef type: class
TypeDef desc: DO NOT USE -- OBSOLETE! REPLACE WITH NetDataLoop!
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop', u'DataLoop', u'NetDataLoop']
MethodDef name: ChangeToNetDataLoop
MethodDef desc: -- this will change me to a NetDataLoop object -- do this!!
MethodDef proto void ChangeToNetDataLoop()
MethodDef opts [u'BUTTON']
MethodDef names [u'ChangeToNetDataLoop']
########################################################################
TypeDef len: 13
TypeDef name:  GroupedDataLoop
TypeDef type: class
TypeDef desc: DO NOT USE -- OBSOLETE! REPLACE WITH NetGroupedDataLoop!
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'Loop', u'NetGroupedDataLoop']
MethodDef name: ChangeToNetGroupedDataLoop
MethodDef desc: -- this will change me to a NetGroupedDataLoop object -- do this!!
MethodDef proto void ChangeToNetGroupedDataLoop()
MethodDef opts [u'BUTTON']
MethodDef names [u'ChangeToNetGroupedDataLoop']
########################################################################
TypeDef len: 13
TypeDef name:  NetCounterInit
TypeDef type: class
TypeDef desc: initialize a network counter: program keeps a local version of the counter, and updates both this and the network&apos;s copy
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'NetBaseProgEl']
MemberDef name: network_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_NetProgVarFilter']
MemberDef cats []
MemberDef desc: variable that points to the network
MemberDef name: local_ctr_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: local version of the counter variable, maintained by the program -- must have same name as the counter! automatically created if not set
MemberDef name: counter
MemberDef type: MemberDef*
MemberDef opts [u'TYPE_ON_network_type', u'DEFCAT_Counter']
MemberDef cats []
MemberDef desc: counter variable on network to operate on
########################################################################
TypeDef len: 13
TypeDef name:  NetCounterIncr
TypeDef type: class
TypeDef desc: initialize a network counter: program keeps a local version of the counter, and updates both this and the network&apos;s copy
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'NetBaseProgEl']
MemberDef name: network_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_NetProgVarFilter']
MemberDef cats []
MemberDef desc: variable that points to the network (typically a global_var)
MemberDef name: local_ctr_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: local version of the counter variable, maintained by the program -- must have same name as the counter! -- automatically created if not set
MemberDef name: counter
MemberDef type: MemberDef*
MemberDef opts [u'TYPE_ON_network_type', u'DEFCAT_Counter']
MemberDef cats []
MemberDef desc: counter variable on network to operate on
########################################################################
TypeDef len: 13
TypeDef name:  NetUpdateView
TypeDef type: class
TypeDef desc: update the network view, conditional on an update_net_view variable that is created by this progam element
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'NetBaseProgEl']
MemberDef name: network_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_NetProgVarFilter']
MemberDef cats []
MemberDef desc: variable that points to the network
MemberDef name: update_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: variable that controls whether we update the display or not
########################################################################
TypeDef len: 15
TypeDef name:  InitNamedUnits
TypeDef type: class
TypeDef desc: Initialize named units system -- put this in the Init code of the program and it will configure everything based on the input_data datatable (which should be the first datatable in the args or vars -- Set Unit guys will look for it there)
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'NetBaseProgEl']
MemberDef name: input_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to the input data table -- finds the first one in the program by default (and makes one if not found)
MemberDef name: unit_names_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to the unit_names data table, which is created if it does not exist -- contains the name labels for each of the units
MemberDef name: network_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_NetProgVarFilter']
MemberDef cats []
MemberDef desc: variable that points to the network (optional; for labeling network units if desired)
MemberDef name: init_label_net
MemberDef type: bool
MemberDef desc: label the network units (if network_var is set) in the Init code for this function (typically at the start of training)
MemberDef name: n_lay_name_chars
MemberDef type: int
MemberDef desc: number of layer-name chars to prepend to the enum values
MemberDef name: max_unit_chars
MemberDef type: int
MemberDef desc: max number of characters to use in unit label names (-1 = all)
MethodDef name: InitUnitNamesFmInputData
MethodDef desc: intialize unit names data table from input data table
MethodDef proto bool InitUnitNamesFmInputData(DataTable* unit_names, const DataTable* input_data)
MethodDef name: InitDynEnumFmUnitNames
MethodDef desc: initialize a dynamic enum with names from unit names table colum (string matrix with one row)
MethodDef proto bool InitDynEnumFmUnitNames(DynEnumType* dyn_enum, const DataCol* unit_names_col, const taString&amp; prefix)
MethodDef name: InitLayerFmUnitNames
MethodDef desc: initialize layer unit names from unit names table column (string matrix with one row) -- max_un_chars is max length of name to apply to unit
MethodDef proto bool InitLayerFmUnitNames(Layer* lay, const DataCol* unit_names_col, int max_un_chars = -1)
MethodDef name: InitNamesTable
MethodDef desc: intialize (and update) the unit names table (will auto-create if not set) -- must have set the input_data_var to point to an input data table already!
MethodDef proto bool InitNamesTable()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: InitDynEnums
MethodDef desc: intialize the dynamic enums from names table -- do this after you have entered the names in the unit_names table, in order to then refer to the names using enum values (avoiding having to use quotes!)
MethodDef proto bool InitDynEnums()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: LabelNetwork
MethodDef desc: label units in the network -- network_var must be set
MethodDef proto bool LabelNetwork()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef name: ViewDataLegend
MethodDef desc: create a new grid view display of the input data with the unit names as alegend
MethodDef proto bool ViewDataLegend()
MethodDef opts [u'BUTTON', u'CONFIRM']
MethodDef names [u'InitDynEnumFmUnitNames', u'InitDynEnums', u'InitLayerFmUnitNames', u'InitNamesTable', u'InitUnitNamesFmInputData', u'LabelNetwork', u'ViewDataLegend']
########################################################################
TypeDef len: 13
TypeDef name:  SetUnitsLit
TypeDef type: class
TypeDef desc: set units in input_data table to present to the network based on dynamic enum values where the type name of the dynamic enum corresponds to the layer name in the input data: values supplied as literal items
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: input_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to the input data table
MemberDef name: set_nm
MemberDef type: bool
MemberDef desc: set trial name based on unit names here
MemberDef name: offset
MemberDef type: int
MemberDef desc: add this additional offset to unit indicies -- useful for unit groups with same sets of units
MemberDef name: unit_1
MemberDef type: DynEnum
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
MemberDef name: unit_2
MemberDef type: DynEnum
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
MemberDef name: unit_3
MemberDef type: DynEnum
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
MemberDef name: unit_4
MemberDef type: DynEnum
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
########################################################################
TypeDef len: 13
TypeDef name:  SetUnitsVar
TypeDef type: class
TypeDef desc: set units in input_data table to present to the network based on dynamic enum variables where the type name of the dynamic enum corresponds to the layer name in the input data: values supplied as variables
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl']
MemberDef name: input_data_var
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DataProgVarFilter']
MemberDef cats []
MemberDef desc: program variable pointing to the input data table
MemberDef name: set_nm
MemberDef type: bool
MemberDef desc: set trial name based on unit names here
MemberDef name: offset
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_StdProgVarFilter']
MemberDef cats []
MemberDef desc: add this additional offset to unit indicies -- useful for unit groups with same sets of units
MemberDef name: unit_1
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DynEnumProgVarFilter']
MemberDef cats []
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
MemberDef name: unit_2
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DynEnumProgVarFilter']
MemberDef cats []
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
MemberDef name: unit_3
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DynEnumProgVarFilter']
MemberDef cats []
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
MemberDef name: unit_4
MemberDef type: ProgVarRef
MemberDef opts [u'ITEM_FILTER_DynEnumProgVarFilter']
MemberDef cats []
MemberDef desc: unit to activate -- order doesn&apos;t matter -- can be any unit
########################################################################
TypeDef len: 11
TypeDef name:  WtInitPrompt
TypeDef type: class
TypeDef desc: special program element for prompting whether to initialize network weights -- only prompts if network has been trained (epoch &gt; 0) -- requires a variable named: network -- will complain if not found!
TypeDef cats:, [u'Program']
TypeDef opts:, [u'EDIT_INLINE', u'SCOPE_Program', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'ProgEl', u'IfGuiPrompt']
########################################################################
TypeDef len: 17
TypeDef name:  LayerWizEl
TypeDef type: class
TypeDef desc: specifies basic parameters for a layer
TypeDef cats:, [u'Wizard']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
EnumDef name: INPUT
EnumDef val: INPUT
EnumDef name: HIDDEN
EnumDef val: HIDDEN
EnumDef name: OUTPUT
EnumDef val: OUTPUT
EnumDef names: [u'InputOutput']
MemberDef name: n_units
MemberDef type: int
MemberDef desc: number of units in the layer
MemberDef name: io_type
MemberDef type: LayerWizEl::InputOutput
MemberDef desc: is it an input, hidden, or output layer -- determines environment patterns
MethodDef name: GetDecorateKey
MethodDef proto taString GetDecorateKey()
MethodDef names [u'GetDecorateKey']
########################################################################
TypeDef len: 9
TypeDef name:  LayerWizElList
TypeDef type: class
TypeDef desc: a list of layer wiz elements
TypeDef cats:, [u'Wizard']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 19
TypeDef name:  Wizard
TypeDef type: class
TypeDef desc: wizard for automating construction of simulation objects
TypeDef cats:, [u'Wizard']
TypeDef opts:, [u'BUTROWS_2', u'EDIT_WIDTH_60', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taWizard']
TypeDef children: [u'CsWizard', u'SoWizard', u'LeabraWizard', u'BpWizard']
EnumDef name: FEEDFORWARD
EnumDef val: FEEDFORWARD
EnumDef: each layer projects to the next one in sequence
EnumDef name: BIDIRECTIONAL
EnumDef val: BIDIRECTIONAL
EnumDef: layers are bidirectionally connected in sequence (each sends and receives from its neighbors)
EnumDef names: [u'Connectivity']
MemberDef name: n_layers
MemberDef type: int
MemberDef desc: number of layers
MemberDef name: layer_cfg
MemberDef type: LayerWizElList
MemberDef desc: provides configuration information for each layer
MemberDef name: connectivity
MemberDef type: Wizard::Connectivity
MemberDef desc: how to connect the layers
MemberDef name: default_net_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_Network']
MemberDef cats []
MemberDef desc: default type of network to create
MethodDef name: ThreeLayerNet
MethodDef desc: set configuration to a standard three-layer network (input, hidden, output) -- DOESN&apos;T MAKE NETWORK (use StdEnv!)
MethodDef proto bool ThreeLayerNet()
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Defaults']
MethodDef name: MultiLayerNet
MethodDef desc: set configuration for specified number of each type of layer -- DOESN&apos;T MAKE NETWORK (use StdEnv!)
MethodDef proto bool MultiLayerNet(int n_inputs = 1, int n_hiddens = 1, int n_outputs = 1)
MethodDef opts [u'MENU_BUTTON']
MethodDef name: StdNetwork
MethodDef desc: make a standard network according to the current settings (if net == NULL, new network is created)
MethodDef proto bool StdNetwork(TypeDef* net_type, Network* net = __null)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Network', u'NULL_OK_1', u'NULL_TEXT_NewNetwork', u'TYPE_ON_default_net_type']
MethodDef name: RetinaSpecNetwork
MethodDef desc: configure the input layers of the network to accept the output of the image processing performed by retina_spec (if net == NULL, new network is created)
MethodDef proto bool RetinaSpecNetwork(RetinaSpec* retina_spec, Network* net = __null)
MethodDef opts [u'MENU_BUTTON', u'NULL_OK_1', u'NULL_TEXT_1_NewNetwork']
MethodDef name: StdData
MethodDef desc: make standard input and output data tables: make a standard data table of input patterns according to the given network (if data_table == NULL, new datatable is created), group = create a group column for grouping inputs into sequences. also make standard output data to monitor network output
MethodDef proto bool StdData(Network* net, DataTable* data_table = __null, int n_patterns = 0, bool group = false)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Data', u'NULL_OK_1', u'NULL_TEXT_1_NewDataTable']
MethodDef name: StdInputData
MethodDef desc: make a standard data table of input patterns according to the given network (if data_table == NULL, new datatable is created), group = create a group column for grouping inputs into sequences. also calls StdOutputData to create monitor output data
MethodDef proto bool StdInputData(Network* net, DataTable* data_table = __null, int n_patterns = 0, bool group = false)
MethodDef opts [u'MENU_BUTTON', u'MENU_SEP_BEFORE', u'NULL_OK_1', u'NULL_TEXT_1_NewDataTable']
MethodDef name: StdOutputData
MethodDef desc: make standard set of output data (monitoring network performance) -- this just creates empty datatables in OutputData subgroup with names that standard programs look for
MethodDef proto bool StdOutputData()
MethodDef opts [u'MENU_BUTTON']
MethodDef name: UpdateInputDataFmNet
MethodDef desc: update data table columns based on configuration of the network
MethodDef proto bool UpdateInputDataFmNet(Network* net, DataTable* data_table)
MethodDef opts [u'MENU_BUTTON', u'MENU_SEP_BEFORE']
MethodDef name: StdProgs
MethodDef desc: create a standard set of programs for running the algorithm specified by this project
MethodDef proto bool StdProgs()
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Programs', u'CONFIRM']
MethodDef name: TestProgs
MethodDef desc: create a standard set of testing programs for testing the network -- the call_test_from argument specifies a training program to call the testing program from (NULL for none), and call_in_loop &amp; call_modulus specify whether to call in the loop of that program (else at the end), and how frequently to call it (modulus -- in terms of network.epoch by default -- can change to loop counter or anything else, and modulus is hard-coded -- could make it a variable instead). Testing versions of std OutputData tables are made -- test programs use 3rd &amp; 4th tables in data.gp.OuputData for output by default, so check that!
MethodDef proto bool TestProgs(Program* call_test_from, bool call_in_loop = true, int call_modulus = 1)
MethodDef opts [u'MENU_BUTTON', u'MENU_SEP_BEFORE', u'CONFIRM', u'NULL_OK_0']
MethodDef names [u'MultiLayerNet', u'RetinaSpecNetwork', u'StdData', u'StdInputData', u'StdNetwork', u'StdOutputData', u'StdProgs', u'TestProgs', u'ThreeLayerNet', u'UpdateInputDataFmNet']
########################################################################
TypeDef len: 13
TypeDef name:  EmergentRoot
TypeDef type: class
TypeDef desc: structural root of object hierarchy
TypeDef cats:, [u'Project']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taRootBase']
MethodDef name: Browse
MethodDef desc: use object browser to find an object, starting with initial path if given
MethodDef proto TAPtr Browse(const char* init_path = __null)
MethodDef opts [u'MENU', u'ARGC_0', u'USE_RVAL', u'NO_REVERT_AFTER']
MethodDef names [u'Browse']
########################################################################
TypeDef len: 15
TypeDef name:  nvDataView
TypeDef type: class
TypeDef desc: most children of NetView
TypeDef cats:, [u'Display']
TypeDef opts:, [u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar']
TypeDef children: [u'UnitGroupView', u'nvhDataView']
MethodDef name: nv
MethodDef proto NetView_ptr nv()
MethodDef name: setDefaultColor
MethodDef desc: restore to its default color
MethodDef proto void setDefaultColor()
MethodDef name: setHighlightColor
MethodDef desc: used for highlighting in gui, esp lay/prjn
MethodDef proto void setHighlightColor(const T3Color&amp; color)
MethodDef names [u'nv', u'setDefaultColor', u'setHighlightColor']
########################################################################
TypeDef len: 11
TypeDef name:  UnitGroupView
TypeDef type: class
TypeDef desc: renders the display text, typ 6 chars max
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'nvDataView']
MethodDef name: ValToDispText
MethodDef desc: renders the display text, typ 6 chars max
MethodDef proto void ValToDispText(float val, taString&amp; str)
MethodDef name: ugrp
MethodDef proto Unit_Group_ptr ugrp()
MethodDef name: lv
MethodDef proto LayerView_ptr lv()
MethodDef name: SetLayerView
MethodDef proto void SetLayerView(LayerView* l)
MethodDef name: AllocUnitViewData
MethodDef desc: make sure we have correct space in uvd array
MethodDef proto void AllocUnitViewData()
MethodDef name: GetUnitDisplayVal
MethodDef desc: get val for unit at co
MethodDef proto float GetUnitDisplayVal(const TwoDCoord&amp; co, int unit_md_flags)
MethodDef name: UpdateUnitViewBase
MethodDef desc: set the base for the given md; src_u only used for s./r. values (sets con_md true if con)
MethodDef proto void UpdateUnitViewBase(MemberDef* disp_md, Unit* src_u, bool&amp; con_md)
MethodDef name: UpdateUnitValues
MethodDef desc: *only* updates unit values
MethodDef proto void UpdateUnitValues()
MethodDef name: UpdateUnitValues_blocks
MethodDef desc: *only* updates unit values: optimized blocks mode
MethodDef proto void UpdateUnitValues_blocks()
MethodDef name: UpdateUnitValues_outnm
MethodDef desc: output name mode update
MethodDef proto void UpdateUnitValues_outnm()
MethodDef name: UpdateUnitValues_snap_bord
MethodDef desc: snap border
MethodDef proto void UpdateUnitValues_snap_bord()
MethodDef names [u'AllocUnitViewData', u'GetUnitDisplayVal', u'SetLayerView', u'UpdateUnitValues', u'UpdateUnitValues_blocks', u'UpdateUnitValues_outnm', u'UpdateUnitValues_snap_bord', u'UpdateUnitViewBase', u'ValToDispText', u'lv', u'ugrp']
########################################################################
TypeDef len: 11
TypeDef name:  UnitView
TypeDef type: class
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView']
MethodDef name: unit
MethodDef proto Unit_ptr unit()
MethodDef name: ugrv
MethodDef proto UnitGroupView_ptr ugrv()
MethodDef name: nv
MethodDef proto NetView_ptr nv()
MethodDef names [u'nv', u'ugrv', u'unit']
########################################################################
TypeDef len: 13
TypeDef name:  nvhDataView
TypeDef type: class
TypeDef desc: highlightable guys
TypeDef cats:, [u'Display']
TypeDef opts:, [u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'nvDataView']
TypeDef children: [u'LayerView', u'PrjnView']
########################################################################
TypeDef len: 15
TypeDef name:  LayerView
TypeDef type: class
TypeDef desc: display units (standard)
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'nvDataView', u'nvhDataView']
EnumDef name: DISP_UNITS
EnumDef val: DISP_UNITS
EnumDef: display units (standard)
EnumDef name: DISP_OUTPUT_NAME
EnumDef val: DISP_OUTPUT_NAME
EnumDef: display output_name field (what layer has generated)
EnumDef name: DISP_FRAME
EnumDef val: DISP_FRAME
EnumDef: only display outer frame -- useful when using another viewer for the layer data (e.g., a grid view)
EnumDef names: [u'DispMode']
MemberDef name: disp_mode
MemberDef type: LayerView::DispMode
MemberDef desc: how to display layer information
MethodDef name: layer
MethodDef proto Layer_ptr layer()
MethodDef name: UpdateUnitValues
MethodDef desc: *only* updates unit values
MethodDef proto void UpdateUnitValues()
MethodDef name: UpdateNetLayDispMode
MethodDef desc: update network&apos;s storing of the layer display mode value
MethodDef proto void UpdateNetLayDispMode()
MethodDef name: DispUnits
MethodDef desc: display standard representation of unit values
MethodDef proto void DispUnits()
MethodDef opts [u'BUTTON', u'VIEWMENU']
MethodDef name: DispOutputName
MethodDef desc: display contents of output_name on layer instead of unit values
MethodDef proto void DispOutputName()
MethodDef opts [u'BUTTON', u'VIEWMENU']
MethodDef name: UseViewer
MethodDef desc: replace usual unit view display with display from viewer (only displays frame of layer, and aligns given viewer with layer)
MethodDef proto void UseViewer(T3DataViewMain* viewer)
MethodDef opts [u'BUTTON', u'VIEWMENU', u'SCOPE_T3DataViewFrame']
MethodDef names [u'DispOutputName', u'DispUnits', u'UpdateNetLayDispMode', u'UpdateUnitValues', u'UseViewer', u'layer']
########################################################################
TypeDef len: 11
TypeDef name:  PrjnView
TypeDef type: class
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView', u'T3DataViewPar', u'nvDataView', u'nvhDataView']
MethodDef name: prjn
MethodDef proto Projection_ptr prjn()
MethodDef names [u'prjn']
########################################################################
TypeDef len: 15
TypeDef name:  NetViewObjView
TypeDef type: class
TypeDef desc: view of net view object
TypeDef cats:, [u'Display']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'ITypedObject', u'IDataLinkProxy', u'ISelectable', u'IObjectSelectable', u'ITypedObject', u'IDataLinkProxy', u'IDataLinkClient', u'taBase', u'taOBase', u'taDataView', u'T3DataView']
MemberDef name: name
MemberDef type: taString
MemberDef desc: name of body this one is associated with
MethodDef name: Obj
MethodDef proto NetViewObj_ptr Obj()
MethodDef name: SetObj
MethodDef proto void SetObj(NetViewObj* ob)
MethodDef names [u'Obj', u'SetObj']
########################################################################
TypeDef len: 13
TypeDef name:  CtrlPanelData
TypeDef type: class
TypeDef desc: data for the control panel
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: active
MemberDef type: bool
MemberDef desc: is panel active (save this state)
MemberDef name: lft
MemberDef type: float
MemberDef desc: panel window left coord
MemberDef name: top
MemberDef type: float
MemberDef desc: panel window top coord
########################################################################
TypeDef len: 19
TypeDef name:  Process
TypeDef type: class
TypeDef desc: simple processes for controlling and coordinating execution
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'Stat', u'SchedProcess', u'ScriptProcess', u'SaveNetsProc', u'SaveWtsProc', u'LoadWtsProc', u'InitWtsProc', u'BridgeProcess', u'UnitActRFStatResetProc', u'TimeCounterStatResetProc', u'DispDataEnvProc', u'DispNetWeightsProc', u'ClearLogProc']
EnumDef name: C_CODE
EnumDef val: C_CODE
EnumDef: C code (builtin)
EnumDef name: SCRIPT
EnumDef val: SCRIPT
EnumDef: Script (user-defined)
EnumDef names: [u'Type']
MemberDef name: script_file
MemberDef type: V3ScriptFile
MemberDef name: script_string
MemberDef type: taString
MemberDef name: type
MemberDef type: Process::Type
MemberDef desc: process can be builtin c-code or a script
MemberDef name: mod
MemberDef type: Modulo
MemberDef desc: flag=run this process or not, m=modulus, run process every m times, off=start runing at this offset
MemberDef name: network
MemberDef type: Network*
MemberDef opts [u'CONTROL_PANEL']
MemberDef cats []
MemberDef desc: network to act on
MemberDef name: environment
MemberDef type: Environment*
MemberDef opts [u'CONTROL_PANEL']
MemberDef cats []
MemberDef desc: environmnent to act in
MethodDef name: GetThisTypeDef
MethodDef proto TypeDef_ptr GetThisTypeDef()
MethodDef name: GetThisPtr
MethodDef proto void_ptr GetThisPtr()
MethodDef names [u'GetThisPtr', u'GetThisTypeDef']
########################################################################
TypeDef len: 15
TypeDef name:  DataItem
TypeDef type: class
TypeDef desc: source of a piece of data
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'StatVal']
MemberDef name: name
MemberDef type: taString
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: name of data item
MemberDef name: disp_opts
MemberDef type: taString
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: default display options for item
MemberDef name: is_string
MemberDef type: bool
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: is a string-valued item
MemberDef name: vec_n
MemberDef type: int
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: length of vector (0 if not)
########################################################################
TypeDef len: 13
TypeDef name:  StatVal
TypeDef type: class
TypeDef desc: Statistic value
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'DataItem']
MemberDef name: val
MemberDef type: float
MemberDef desc: value of statistic
MemberDef name: str_val
MemberDef type: taString
MemberDef opts [u'HIDDEN_INLINE']
MemberDef cats []
MemberDef desc: value of statistic if its a string
MemberDef name: stopcrit
MemberDef type: CritParam
MemberDef desc: Stopping Criteria Parameters
########################################################################
TypeDef len: 11
TypeDef name:  StatVal_List
TypeDef type: class
TypeDef desc: group of stat values
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase_List']
########################################################################
TypeDef len: 13
TypeDef name:  StatValAgg
TypeDef type: class
TypeDef desc: Aggregation for StatVal-based values
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Aggregate']
TypeDef children: [u'AggStat']
########################################################################
TypeDef len: 13
TypeDef name:  AggStat
TypeDef type: class
TypeDef desc: Aggregate statistics over time (processing levels)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Aggregate', u'StatValAgg']
MemberDef name: real_stat
MemberDef type: Stat*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: the &apos;real&apos; (non-agg) stat
MemberDef name: from
MemberDef type: Stat*
MemberDef desc: which statisitic to aggregate from (a statistic of a sub process)
########################################################################
TypeDef len: 17
TypeDef name:  Stat
TypeDef type: class
TypeDef desc: Generic Statistic Process
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
TypeDef children: [u'SE_Stat', u'MonitorStat', u'ClosestEventStat', u'CyclesToSettle', u'ActThreshRTStat', u'ScriptStat', u'CompareStat', u'ProjectionStat', u'ComputeStat', u'CopyToEnvStat', u'EpochCounterStat', u'ProcCounterStat', u'MaxActTrgStat', u'UnitActRFStat', u'UnitEventRFStat', u'UniquePatStat', u'TimeCounterStat', u'CsMaxDa', u'CsDistStat', u'CsTIGstat', u'CsTargStat', u'CsGoodStat', u'LeabraMaxDa', u'LeabraGoodStat', u'LeabraSharpStat', u'WrongOnStat', u'LeabraPrjnRelNetinStat', u'ExtRew_Stat', u'APBpMaxDa_De', u'CE_Stat', u'NormDotProd_Stat', u'VecCor_Stat', u'NormVecLen_Stat']
EnumDef name: INIT_IN_LOOP
EnumDef val: INIT_IN_LOOP
EnumDef: initialize inside the loop (each time stat is run in loop)
EnumDef name: INIT_START_ONLY
EnumDef val: INIT_START_ONLY
EnumDef: initialize only at the start of the loop
EnumDef name: NO_INIT
EnumDef val: NO_INIT
EnumDef: never initialize this statistic at all (regardless of whether it is a loop or final stat -- this should only be used for script stats)
EnumDef names: [u'LoopInitType']
MemberDef name: own_proc
MemberDef type: SchedProcess*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: The SchedProcess which owns this stat
MemberDef name: has_stop_crit
MemberDef type: bool
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: true if any of the stats have a stopping crit
MemberDef name: n_copy_vals
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: the number of copy values added
MemberDef name: loop_init
MemberDef type: Stat::LoopInitType
MemberDef desc: how to initialize stat values of a non-aggregator loop_stats statistic -- if NO_INIT then applies to all stats (never init)
MemberDef name: log_stat
MemberDef type: bool
MemberDef desc: flag determines if stat data is logged
MemberDef name: time_agg
MemberDef type: AggStat
MemberDef desc: Aggregation over time (i.e., over loop of lower process), if from != NULL
MemberDef name: net_agg
MemberDef type: StatValAgg
MemberDef opts [u'CONDEDIT_ON_time_agg.from:NULL']
MemberDef cats []
MemberDef desc: Aggregation over network objects (i.e., over units)
MemberDef name: copy_vals
MemberDef type: StatVal_List
MemberDef desc: the values of the stat if using COPY time agg
MemberDef name: layer
MemberDef type: Layer*
MemberDef desc: restrict computation to this layer if non-null
########################################################################
TypeDef len: 11
TypeDef name:  Stat_Group
TypeDef type: class
TypeDef desc: a group of statistics
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
TypeDef parents: [u'taBase_Group']
########################################################################
TypeDef len: 15
TypeDef name:  SE_Stat
TypeDef type: class
TypeDef desc: Squared Error Statistic
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
TypeDef children: [u'LeabraSE_Stat', u'RBpSE_Stat']
MemberDef name: se
MemberDef type: StatVal
MemberDef desc: squared errors
MemberDef name: tolerance
MemberDef type: float
MemberDef desc: if error is less than this, its 0
########################################################################
TypeDef len: 13
TypeDef name:  MonitorStat
TypeDef type: class
TypeDef desc: from sched_proc.h Network Monitor Statistic
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: mon_vals
MemberDef type: StatVal_List
MemberDef desc: the values of the stat as computed directly
MemberDef name: objects
MemberDef type: taBase_List
MemberDef opts [u'LINK_GROUP']
MemberDef cats []
MemberDef desc: Group of network objects
MemberDef name: variable
MemberDef type: taString
MemberDef desc: Variable (member) to monitor
MemberDef name: pre_proc_1
MemberDef type: SimpleMathSpec
MemberDef desc: first step of pre-processing to perform
MemberDef name: pre_proc_2
MemberDef type: SimpleMathSpec
MemberDef desc: second step of pre-processing to perform
MemberDef name: pre_proc_3
MemberDef type: SimpleMathSpec
MemberDef desc: third step of pre-processing to perform
########################################################################
TypeDef len: 15
TypeDef name:  Counter
TypeDef type: class
TypeDef desc: Holds the value of a loop counter
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: val
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: value of the counter
MemberDef name: max
MemberDef type: int
MemberDef desc: maximum value of the counter
MethodDef name: SetMax
MethodDef proto void SetMax(int i)
MethodDef names [u'SetMax']
########################################################################
TypeDef len: 13
TypeDef name:  StepParams
TypeDef type: class
TypeDef desc: Holds steping process parameters
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: owner
MemberDef type: SchedProcess*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: use this to find the subtypes
MemberDef name: proc
MemberDef type: SchedProcess*
MemberDef opts [u'SUBTYPE_SchedProcess']
MemberDef cats []
MemberDef desc: process to step
MemberDef name: n
MemberDef type: int
MemberDef desc: number of steps to take
########################################################################
TypeDef len: 17
TypeDef name:  SchedProcess
TypeDef type: class
TypeDef desc: Generic scheduling, looping process
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
TypeDef children: [u'BatchProcess', u'TrainProcess', u'NEpochProcess', u'EpochProcess', u'SequenceProcess', u'TrialProcess', u'SettleProcess', u'CycleProcess', u'ForkProcess', u'MultiEnvProcess', u'PatternFlagProcess']
EnumDef name: DEFAULT
EnumDef val: DEFAULT
EnumDef name: LOOP_STATS
EnumDef val: LOOP_STATS
EnumDef name: FINAL_STATS
EnumDef val: FINAL_STATS
EnumDef name: INIT_PROCS
EnumDef val: INIT_PROCS
EnumDef name: LOOP_PROCS
EnumDef val: LOOP_PROCS
EnumDef name: FINAL_PROCS
EnumDef val: FINAL_PROCS
EnumDef name: SUPER_PROC
EnumDef val: SUPER_PROC
EnumDef name: SUB_PROC
EnumDef val: SUB_PROC
EnumDef names: [u'ProcLoc', u'SchedProcLoc', u'StatLoc']
MemberDef name: cntr
MemberDef type: Counter*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to the counter
MemberDef name: cntr_items
MemberDef type: DataItem_List
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: data item representations for cntrs
MemberDef name: super_proc
MemberDef type: SchedProcess*
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_SUBTYPE']
MemberDef cats []
MemberDef desc: Process which calls this
MemberDef name: sub_proc_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_SchedProcess', u'NULL_OK']
MemberDef cats []
MemberDef desc: type of sub-process to use
MemberDef name: sub_proc
MemberDef type: SchedProcess*
MemberDef desc: Sub-process called by this
MemberDef name: step
MemberDef type: StepParams
MemberDef opts [u'CONTROL_PANEL']
MemberDef cats []
MemberDef desc: Which process to step and n_steps
MemberDef name: loop_stats
MemberDef type: Stat_Group
MemberDef opts [u'IN_GPMENU', u'SHOW_TREE']
MemberDef cats []
MemberDef desc: Statistics Computed in Loop
MemberDef name: final_stats
MemberDef type: Stat_Group
MemberDef opts [u'IN_GPMENU', u'SHOW_TREE']
MemberDef cats []
MemberDef desc: Statistics Computed after Loop
MemberDef name: init_procs
MemberDef type: Process_Group
MemberDef opts [u'IN_GPMENU', u'SHOW_TREE']
MemberDef cats []
MemberDef desc: Misc procs run when process is initialized
MemberDef name: loop_procs
MemberDef type: Process_Group
MemberDef opts [u'IN_GPMENU', u'SHOW_TREE']
MemberDef cats []
MemberDef desc: Misc procs run in the loop, using mod based on loop counter
MemberDef name: final_procs
MemberDef type: Process_Group
MemberDef opts [u'IN_GPMENU', u'SHOW_TREE']
MemberDef cats []
MemberDef desc: Misc procs run after process is finished
MemberDef name: log_loop
MemberDef type: bool
MemberDef desc: Log the loop state (instead of final state)
MemberDef name: log_counter
MemberDef type: bool
MemberDef desc: Log the counter values for this process
########################################################################
TypeDef len: 15
TypeDef name:  BatchProcess
TypeDef type: class
TypeDef desc: Runs multiple trainings
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_LAST', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
TypeDef children: [u'GridSearchBatch', u'SameSeedBatch']
MemberDef name: batch
MemberDef type: Counter
MemberDef desc: number of batches run
########################################################################
TypeDef len: 13
TypeDef name:  TrainProcess
TypeDef type: class
TypeDef desc: Runs epochs to train network
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_LAST', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
MemberDef name: epoch
MemberDef type: Counter
MemberDef desc: Epoch Counter
MemberDef name: epoch_proc
MemberDef type: EpochProcess*
MemberDef opts [u'NO_SUBTYPE', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to epoch process
########################################################################
TypeDef len: 13
TypeDef name:  NEpochProcess
TypeDef type: class
TypeDef desc: Runs epochs to train network
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_LAST', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
MemberDef name: epc_ctr
MemberDef type: Counter
MemberDef desc: local epoch counter
MemberDef name: epoch
MemberDef type: int
MemberDef desc: epoch count on the network itself
MemberDef name: epoch_proc
MemberDef type: EpochProcess*
MemberDef opts [u'NO_SUBTYPE', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to epoch process
########################################################################
TypeDef len: 17
TypeDef name:  EpochProcess
TypeDef type: class
TypeDef desc: Loops over entire set of trials (events) in the environment.
If multiple dmem processors are available (after network dmem_nprocs) events are distributed across
processors, and weights synchronized: every batch_n for SMALL_BATCH (=ONLINE), or at end for BATCH.
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
TypeDef children: [u'SequenceEpoch', u'InteractiveEpoch', u'SyncEpochProc']
EnumDef name: SEQUENTIAL
EnumDef val: SEQUENTIAL
EnumDef: present events in sequential order
EnumDef name: PERMUTED
EnumDef val: PERMUTED
EnumDef: permute the order of event presentation
EnumDef name: RANDOM
EnumDef val: RANDOM
EnumDef: pick an event at random (with replacement)
EnumDef name: TEST
EnumDef val: TEST
EnumDef: don&apos;t update weights at all (for testing net)
EnumDef name: ON_LINE
EnumDef val: ON_LINE
EnumDef: update weights on-line (after every event) -- this is not viable for dmem processing and is automatically switched to small_batch
EnumDef name: SMALL_BATCH
EnumDef val: SMALL_BATCH
EnumDef: update weights every batch_n events (in SequenceEpoch, see small_batch for how to apply to sequences)
EnumDef name: BATCH
EnumDef val: BATCH
EnumDef: update weights in batch (after every epoch)
EnumDef names: [u'Order', u'WtUpdate']
MemberDef name: trial
MemberDef type: Counter
MemberDef desc: Current trial number (and index into list)
MemberDef name: cur_event
MemberDef type: Event*
MemberDef opts [u'FROM_GROUP_enviro_group']
MemberDef cats []
MemberDef desc: the current event
MemberDef name: order
MemberDef type: EpochProcess::Order
MemberDef desc: order to present events in
MemberDef name: wt_update
MemberDef type: EpochProcess::WtUpdate
MemberDef desc: determines weight update mode
MemberDef name: batch_n
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_wt_update:SMALL_BATCH']
MemberDef cats []
MemberDef desc: number of events for small_batch learning mode (specifies how often weight changes are synchronized in dmem)
MemberDef name: batch_n_eff
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: effective batch_n value = batch_n except for dmem when it = (batch_n / epc_nprocs) &gt;= 1
MemberDef name: enviro_group
MemberDef type: Event_Group*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: main event group on environment
MemberDef name: dmem_nprocs
MemberDef type: int
MemberDef desc: maximum number of processors to use for distributed memory computation of events within the epoch (actual = MIN(dmem_nprocs, nprocs / net dmem_nprocs_actual); may be less)
########################################################################
TypeDef len: 17
TypeDef name:  SequenceProcess
TypeDef type: class
TypeDef desc: Processes a sequence of trials in one event group (must be under a SequenceEpoch, which loops over event groups)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
TypeDef children: [u'RBpSequence']
EnumDef name: SEQUENTIAL
EnumDef val: SEQUENTIAL
EnumDef: present events in sequential order
EnumDef name: PERMUTED
EnumDef val: PERMUTED
EnumDef: permute the order of event presentation
EnumDef name: RANDOM
EnumDef val: RANDOM
EnumDef: pick an event at random (with replacement)
EnumDef name: DO_NOTHING
EnumDef val: DO_NOTHING
EnumDef: do nothing
EnumDef name: INIT_STATE
EnumDef val: INIT_STATE
EnumDef: initialize the network state
EnumDef name: MODIFY_STATE
EnumDef val: MODIFY_STATE
EnumDef: modify state (algorithm specific)
EnumDef names: [u'Order', u'StateInit']
MemberDef name: tick
MemberDef type: Counter
MemberDef desc: one unit of time in a sequence
MemberDef name: cur_event
MemberDef type: Event*
MemberDef opts [u'FROM_GROUP_cur_event_gp']
MemberDef cats []
MemberDef desc: current event
MemberDef name: cur_event_gp
MemberDef type: Event_Group*
MemberDef opts [u'FROM_GROUP_enviro_group']
MemberDef cats []
MemberDef desc: event group
MemberDef name: order
MemberDef type: SequenceProcess::Order
MemberDef desc: order to present events in
MemberDef name: sequence_init
MemberDef type: SequenceProcess::StateInit
MemberDef desc: how to initialize network stat at start of sequence
MemberDef name: sequence_epoch
MemberDef type: SequenceEpoch*
MemberDef opts [u'NO_SUBTYPE', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to parent epoch process
MemberDef name: enviro_group
MemberDef type: Event_Group*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: main event group on environment
########################################################################
TypeDef len: 15
TypeDef name:  TrialProcess
TypeDef type: class
TypeDef desc: Runs a single trial (one event)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
TypeDef children: [u'CsSample', u'CsTrial', u'SoTrial', u'LeabraTrial', u'APBpTrial', u'BpTrial']
MemberDef name: cur_event
MemberDef type: Event*
MemberDef opts [u'FROM_GROUP_enviro_group']
MemberDef cats []
MemberDef desc: the current event (copied from the EpochProc)
MemberDef name: epoch_proc
MemberDef type: EpochProcess*
MemberDef opts [u'NO_SUBTYPE', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to parent epoch_proc
MemberDef name: enviro_group
MemberDef type: Event_Group*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: main event group on environment
########################################################################
TypeDef len: 15
TypeDef name:  SettleProcess
TypeDef type: class
TypeDef desc: Settles over cycles of activation propagation
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
TypeDef children: [u'CsSettle', u'LeabraSettle', u'APBpSettle']
MemberDef name: cycle
MemberDef type: Counter
MemberDef desc: Current cycle number
########################################################################
TypeDef len: 13
TypeDef name:  CycleProcess
TypeDef type: class
TypeDef desc: Runs one cycle of activation update
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
TypeDef children: [u'CsCycle', u'LeabraCycle', u'APBpCycle']
########################################################################
TypeDef len: 15
TypeDef name:  SequenceEpoch
TypeDef type: class
TypeDef desc: Loops over sequences (groups of events) instead of individual events (enviro must have event groups!).
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'EpochProcess']
EnumDef name: SEQUENCE
EnumDef val: SEQUENCE
EnumDef: at the sequence level (batch_n sequences)
EnumDef name: EVENT
EnumDef val: EVENT
EnumDef: at the event level (within the sequence, weights updated every batch_n events, with an additional update at end of sequence if needed)
EnumDef names: [u'SmallBatchType']
MemberDef name: small_batch
MemberDef type: SequenceEpoch::SmallBatchType
MemberDef opts [u'CONDEDIT_ON_wt_update:SMALL_BATCH']
MemberDef cats []
MemberDef desc: how to apply SMALL_BATCH wt_update when using sequences
MemberDef name: cur_event_gp
MemberDef type: Event_Group*
MemberDef opts [u'FROM_GROUP_enviro_group']
MemberDef cats []
MemberDef desc: current event group
########################################################################
TypeDef len: 17
TypeDef name:  PatternSpec
TypeDef type: class
TypeDef desc: sub-spec for patterns within an eventspec
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSubSpec']
TypeDef children: [u'XYPatternSpec', u'XYSubPatternSpec', u'GroupPatternSpec']
EnumDef name: INACTIVE
EnumDef val: INACTIVE
EnumDef: not presented to network
EnumDef name: INPUT
EnumDef val: INPUT
EnumDef: input pattern
EnumDef name: TARGET
EnumDef val: TARGET
EnumDef: target (output) pattern
EnumDef name: COMPARE
EnumDef val: COMPARE
EnumDef: comparison pattern (for error only)
EnumDef name: FIRST
EnumDef val: FIRST
EnumDef: first layer in the network
EnumDef name: LAST
EnumDef val: LAST
EnumDef: last layer in the network
EnumDef name: LAY_NAME
EnumDef val: LAY_NAME
EnumDef: specify layer by name
EnumDef name: LAY_NUM
EnumDef val: LAY_NUM
EnumDef: specify layer by number
EnumDef name: NO_FLAGS
EnumDef val: NO_FLAGS
EnumDef: no flags on pattern value, apply as normal
EnumDef name: TARG_FLAG
EnumDef val: TARG_FLAG
EnumDef: unit&apos;s TARG flag is set
EnumDef name: EXT_FLAG
EnumDef val: EXT_FLAG
EnumDef: unit&apos;s EXT flag is set
EnumDef name: TARG_EXT_FLAG
EnumDef val: TARG_EXT_FLAG
EnumDef: unit&apos;s TARG and EXT flags are set
EnumDef name: COMP_FLAG
EnumDef val: COMP_FLAG
EnumDef: unit&apos;s COMP flag is set
EnumDef name: COMP_TARG_FLAG
EnumDef val: COMP_TARG_FLAG
EnumDef: unit&apos;s COMP and TARG flags are set
EnumDef name: COMP_EXT_FLAG
EnumDef val: COMP_EXT_FLAG
EnumDef: unit&apos;s COMP and EXT flags are set
EnumDef name: COMP_TARG_EXT_FLAG
EnumDef val: COMP_TARG_EXT_FLAG
EnumDef: unit&apos;s COMP, TARG, and EXT flags are set
EnumDef name: TARG_VALUE
EnumDef val: TARG_VALUE
EnumDef: pattern value goes to the unit targ field
EnumDef name: EXT_VALUE
EnumDef val: EXT_VALUE
EnumDef: pattern value goes to the unit ext field
EnumDef name: TARG_EXT_VALUE
EnumDef val: TARG_EXT_VALUE
EnumDef: pattern value goes to the unit targ &amp; ext fields
EnumDef name: NO_UNIT_FLAG
EnumDef val: NO_UNIT_FLAG
EnumDef: no unit flags are set, but value is set as normal
EnumDef name: NO_UNIT_VALUE
EnumDef val: NO_UNIT_VALUE
EnumDef: don&apos;t set the unit&apos;s value, but flag as normal
EnumDef name: NO_APPLY
EnumDef val: NO_APPLY
EnumDef: don&apos;t apply this value to unit (no flags either)
EnumDef name: DEFAULT
EnumDef val: DEFAULT
EnumDef: set default layer flags based on pattern type
EnumDef name: TARG_LAYER
EnumDef val: TARG_LAYER
EnumDef: as a target layer
EnumDef name: EXT_LAYER
EnumDef val: EXT_LAYER
EnumDef: as an external input layer
EnumDef name: TARG_EXT_LAYER
EnumDef val: TARG_EXT_LAYER
EnumDef: as both external input and target layer
EnumDef name: COMP_LAYER
EnumDef val: COMP_LAYER
EnumDef: as a comparison layer
EnumDef name: COMP_TARG_LAYER
EnumDef val: COMP_TARG_LAYER
EnumDef: as a comparision and target layer
EnumDef name: COMP_EXT_LAYER
EnumDef val: COMP_EXT_LAYER
EnumDef: as a comparison and external input layer
EnumDef name: COMP_TARG_EXT_LAYER
EnumDef val: COMP_TARG_EXT_LAYER
EnumDef: as a comparison, target, and external input layer
EnumDef name: NO_LAYER_FLAGS
EnumDef val: NO_LAYER_FLAGS
EnumDef: don&apos;t set any layer flags at all
EnumDef name: USE_NO_FLAGS
EnumDef val: USE_NO_FLAGS
EnumDef: no flags on pattern value, apply as normal
EnumDef name: USE_PATTERN_FLAGS
EnumDef val: USE_PATTERN_FLAGS
EnumDef: use flags from pattern
EnumDef name: USE_GLOBAL_FLAGS
EnumDef val: USE_GLOBAL_FLAGS
EnumDef: use global flags from pattern spec
EnumDef name: USE_PAT_THEN_GLOBAL_FLAGS
EnumDef val: USE_PAT_THEN_GLOBAL_FLAGS
EnumDef: use flags from pattern if avail, else global flags
EnumDef names: [u'LayerFlags', u'PatFlags', u'PatLayer', u'PatTypes', u'PatUseFlags']
MemberDef name: type
MemberDef type: PatternSpec::PatTypes
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: Type of pattern
MemberDef name: to_layer
MemberDef type: PatternSpec::PatLayer
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: which network layer to present pattern to
MemberDef name: layer_name
MemberDef type: taString
MemberDef opts [u'ENVIROVIEW', u'CONDEDIT_ON_to_layer:LAY_NAME']
MemberDef cats []
MemberDef desc: name of layer
MemberDef name: layer_num
MemberDef type: int
MemberDef opts [u'ENVIROVIEW', u'CONDEDIT_ON_to_layer:LAY_NUM']
MemberDef cats []
MemberDef desc: number of layer
MemberDef name: layer
MemberDef type: Layer*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: Pointer to Layer presented to
MemberDef name: pattern_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_Pattern']
MemberDef cats []
MemberDef desc: type of pattern to use
MemberDef name: layer_flags
MemberDef type: PatternSpec::LayerFlags
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: how to flag the layer&apos;s external input status
MemberDef name: use_flags
MemberDef type: PatternSpec::PatUseFlags
MemberDef desc: how to use the flags (on each pattern or global_flags)
MemberDef name: n_vals
MemberDef type: int
MemberDef desc: number of values in pattern
MemberDef name: geom
MemberDef type: PosTDCoord
MemberDef desc: geometry of pattern in EnviroView
MemberDef name: pos
MemberDef type: PosTDCoord
MemberDef desc: position of pattern in EnviroView
MemberDef name: initial_val
MemberDef type: float
MemberDef desc: Initial value for pattern values
MemberDef name: noise
MemberDef type: Random
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: Noise added to values when applied
MemberDef name: value_names
MemberDef type: String_Array
MemberDef desc: display names of the individual pattern values
MemberDef name: global_flags
MemberDef type: int_Array
MemberDef opts [u'CONDEDIT_ON_use_flags:USE_GLOBAL_FLAGS,USE_PAT_THEN_GLOBAL_FLAGS']
MemberDef cats []
MemberDef desc: these are global flags for all events (cf use_flags)
########################################################################
TypeDef len: 17
TypeDef name:  EventSpec
TypeDef type: class
TypeDef desc: event specification
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'SCOPE_Environment', u'IMMEDIATE_UPDATE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec']
TypeDef children: [u'ProbEventSpec', u'PhaseOrderEventSpec']
EnumDef name: DEFAULT
EnumDef val: DEFAULT
EnumDef name: HORIZONTAL
EnumDef val: HORIZONTAL
EnumDef name: VERTICAL
EnumDef val: VERTICAL
EnumDef names: [u'PatternLayout']
MemberDef name: last_net
MemberDef type: Network*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: last network events applied to
MemberDef name: patterns
MemberDef type: PatternSpec_Group
MemberDef opts [u'IN_GPMENU', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: group of pattern specs (one-to-one with patterns)
MemberDef name: pattern_layout
MemberDef type: EventSpec::PatternLayout
MemberDef desc: determines the layout of patterns within an event (just for display purposes)
########################################################################
TypeDef len: 15
TypeDef name:  Pattern
TypeDef type: class
TypeDef desc: Contains activation values to be applied to a network layer
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_pat', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
TypeDef children: [u'ProbPattern', u'XYPattern', u'XYSubPattern']
MemberDef name: value
MemberDef type: float_RArray
MemberDef desc: Values of Pattern
MemberDef name: flag
MemberDef type: int_Array
MemberDef desc: Flags of Pattern
########################################################################
TypeDef len: 15
TypeDef name:  Event
TypeDef type: class
TypeDef desc: Contains patterns of activation for different layers in the network specifying one event
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_evt', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'FreqEvent', u'TimeEvent', u'DurEvent']
MemberDef name: index
MemberDef type: int
MemberDef opts [u'NO_SAVE', u'READ_ONLY']
MemberDef cats []
MemberDef desc: Index of this event within group
MemberDef name: patterns
MemberDef type: Pattern_Group
MemberDef opts [u'NO_SAVE_PATH_R']
MemberDef cats []
MemberDef desc: group of patterns
MemberDef name: spec
MemberDef type: EventSpec_SPtr
MemberDef desc: determines the configuration of patterns and how they are presented to the network
########################################################################
TypeDef len: 17
TypeDef name:  Environment
TypeDef type: class
TypeDef desc: basic environment: contains events to present to the network, and can be used to hold data for analysis
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_env', u'COMPRESS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'ScriptEnv', u'FreqEnv', u'TimeEnvironment', u'FromFileEnv']
EnumDef name: NAME_FIRST
EnumDef val: NAME_FIRST
EnumDef: save file with names as first column
EnumDef name: NAME_LAST
EnumDef val: NAME_LAST
EnumDef: save file with names as last column
EnumDef name: NO_NAME
EnumDef val: NO_NAME
EnumDef: no names at all in file..
EnumDef name: STD_PRINT
EnumDef val: STD_PRINT
EnumDef: standard printout format
EnumDef name: PRINT_NO_LABELS
EnumDef val: PRINT_NO_LABELS
EnumDef: standard printout with no event names or other labels
EnumDef name: GRID_LOG
EnumDef val: GRID_LOG
EnumDef: grid log format for importing into a grid log
EnumDef names: [u'DistMatFmt', u'TextFmt']
MemberDef name: event_specs
MemberDef type: BaseSpec_Group
MemberDef desc: specs for events: controls the layout and configuration of events
MemberDef name: events
MemberDef type: Event_Group
MemberDef desc: the events, contain patterns that map onto layers of the network
MemberDef name: event_ctr
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: counter for interactive interface with environment: number of events processed since last InitEvents()
########################################################################
TypeDef len: 17
TypeDef name:  V3ProjectBase
TypeDef type: class
TypeDef desc: for loading legacy (v3.x) projects only
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'HIDDEN', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase']
TypeDef children: [u'V3CsProject', u'V3SoProject', u'V3LeabraProject', u'V3BpProject']
MemberDef name: defaults
MemberDef type: TypeDefault_Group
MemberDef opts []
MemberDef cats [u'V3_Compat']
MemberDef desc: type defaults
MemberDef name: specs
MemberDef type: BaseSpec_Group
MemberDef opts []
MemberDef cats [u'V3_Compat']
MemberDef desc: network specifications and parameters (moved to Network in V4)
MemberDef name: environments
MemberDef type: Environment_Group
MemberDef opts []
MemberDef cats [u'V3_Compat']
MemberDef desc: Environments of patterns to present to networks (replaced with datatables in V4)
MemberDef name: processes
MemberDef type: Process_Group
MemberDef opts []
MemberDef cats [u'V3_Compat']
MemberDef desc: Processes to coordinate training/testing, etc (replaced with programs in V4)
MemberDef name: logs
MemberDef type: PDPLog_Group
MemberDef opts []
MemberDef cats [u'V3_Compat']
MemberDef desc: Logs to display statistics in processes (replaced with datatables in V4)
MemberDef name: scripts
MemberDef type: Script_Group
MemberDef opts []
MemberDef cats [u'V3_Compat']
MemberDef desc: Scripts to control arbitrary actions (replaced with programs in V4)
MemberDef name: desc1
MemberDef type: taString
MemberDef name: desc2
MemberDef type: taString
MemberDef name: desc3
MemberDef type: taString
MemberDef name: desc4
MemberDef type: taString
MethodDef name: ConvertToV4
MethodDef desc: convert the project to v4.x format
MethodDef proto void ConvertToV4()
MethodDef opts [u'BUTTON', u'CAT_Convert']
MethodDef name: ConvertToV4_impl
MethodDef desc: implementation: must be defined by specific type of algorithm
MethodDef proto bool ConvertToV4_impl()
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_Nets
MethodDef desc: Convert networks
MethodDef proto bool ConvertToV4_Nets(ProjectBase* nwproj)
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_Enviros
MethodDef desc: Convert environments to datatables
MethodDef proto bool ConvertToV4_Enviros(ProjectBase* nwproj)
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_Scripts
MethodDef desc: Convert scripts to programs
MethodDef proto bool ConvertToV4_Scripts(ProjectBase* nwproj)
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_ProcScripts
MethodDef desc: Convert process scripts to programs
MethodDef proto bool ConvertToV4_ProcScripts(ProjectBase* nwproj)
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_Edits
MethodDef desc: Copy selectedits over
MethodDef proto bool ConvertToV4_Edits(ProjectBase* nwproj)
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_DefaultApplyInputs
MethodDef desc: fix ApplyInputs script for first program group in nwproj, based on first enviro and network in old proj
MethodDef proto bool ConvertToV4_DefaultApplyInputs(ProjectBase* nwproj)
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_ApplyInputs
MethodDef desc: make layerwriter list reflect patterns in given event spec as applied to given network
MethodDef proto bool ConvertToV4_ApplyInputs(LayerWriter* lw, EventSpec* es, Network* net, DataTable* dt)
MethodDef opts [u'CAT_Convert']
MethodDef name: ConvertToV4_ProcScripts_impl
MethodDef proto bool ConvertToV4_ProcScripts_impl(ProjectBase* nwproj, taBase_Group* gp, const taString&amp; nm_extra)
MethodDef name: ConvertToV4_Script_impl
MethodDef proto bool ConvertToV4_Script_impl(Program_Group* pg, const taString&amp; objnm, const taString&amp; fname, SArg_Array&amp; s_args)
MethodDef names [u'ConvertToV4', u'ConvertToV4_ApplyInputs', u'ConvertToV4_DefaultApplyInputs', u'ConvertToV4_Edits', u'ConvertToV4_Enviros', u'ConvertToV4_Nets', u'ConvertToV4_ProcScripts', u'ConvertToV4_ProcScripts_impl', u'ConvertToV4_Script_impl', u'ConvertToV4_Scripts', u'ConvertToV4_impl']
########################################################################
TypeDef len: 15
TypeDef name:  PDPLog
TypeDef type: class
TypeDef desc: v3 obsolete log object
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
TypeDef children: [u'TextLog', u'GraphLog']
MemberDef name: log_file
MemberDef type: taFiler*
MemberDef desc: optional file for saving
MemberDef name: data
MemberDef type: DataTable
MemberDef desc: data for the log
MemberDef name: data_bufsz
MemberDef type: int
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: how big a data buffer size to keep
MemberDef name: data_shift
MemberDef type: float
MemberDef opts [u'EXPERT']
MemberDef cats []
MemberDef desc: percentage to shift buffer upon overflow
MemberDef name: record_proc_name
MemberDef type: bool
MemberDef desc: whether to record process name in log file or not
MemberDef name: display_labels
MemberDef type: String_Array
MemberDef desc: ordered list of labels to use for views and log files
MemberDef name: pos
MemberDef type: TDCoord
MemberDef desc: position of view
MemberDef name: geom
MemberDef type: TDCoord
MemberDef desc: size of view
########################################################################
TypeDef len: 11
TypeDef name:  TextLog
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'PDPLog']
TypeDef children: [u'GridLog', u'NetLog']
########################################################################
TypeDef len: 9
TypeDef name:  GridLog
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'PDPLog', u'TextLog']
########################################################################
TypeDef len: 9
TypeDef name:  NetLog
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'PDPLog', u'TextLog']
########################################################################
TypeDef len: 9
TypeDef name:  GraphLog
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'PDPLog']
########################################################################
TypeDef len: 15
TypeDef name:  float_RArray
TypeDef type: class
TypeDef desc: float array with range, plus a lot of other mathematical functions
TypeDef cats:, [u'Data']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'float_Array']
EnumDef name: SUM_SQUARES
EnumDef val: SUM_SQUARES
EnumDef: sum of squares: sum[(x-y)^2]
EnumDef name: EUCLIDIAN
EnumDef val: EUCLIDIAN
EnumDef: Euclidian distance (sqrt of sum of squares)
EnumDef name: HAMMING
EnumDef val: HAMMING
EnumDef: Hamming distance: sum[abs(x-y)]
EnumDef name: COVAR
EnumDef val: COVAR
EnumDef: covariance: sum[(x-&lt;x&gt;)(y-&lt;y&gt;)]
EnumDef name: CORREL
EnumDef val: CORREL
EnumDef: correlation: sum[(x-&lt;x&gt;)(y-&lt;y&gt;)] / sqrt(sum[x^2 y^2])
EnumDef name: INNER_PROD
EnumDef val: INNER_PROD
EnumDef: inner product: sum[x y]
EnumDef name: CROSS_ENTROPY
EnumDef val: CROSS_ENTROPY
EnumDef: cross entropy: sum[x ln(x/y) + (1-x)ln((1-x)/(1-y))]
EnumDef names: [u'DistMetric']
MemberDef name: range
MemberDef type: MinMax
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: min-max range of the data
########################################################################
TypeDef len: 17
TypeDef name:  CritParam
TypeDef type: class
TypeDef desc: stopping criteria params
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase']
EnumDef name: EQUAL
EnumDef val: EQUAL
EnumDef name: NOTEQUAL
EnumDef val: NOTEQUAL
EnumDef name: LESSTHAN
EnumDef val: LESSTHAN
EnumDef name: GREATERTHAN
EnumDef val: GREATERTHAN
EnumDef name: LESSTHANOREQUAL
EnumDef val: LESSTHANOREQUAL
EnumDef name: GREATERTHANOREQUAL
EnumDef val: GREATERTHANOREQUAL
EnumDef names: [u'Relations']
MemberDef name: flag
MemberDef type: bool
MemberDef opts [u'LABEL_']
MemberDef cats []
MemberDef desc: whether to use this criterion or not
MemberDef name: rel
MemberDef type: CritParam::Relations
MemberDef opts [u'LABEL_', u'CONDEDIT_ON_flag:true']
MemberDef cats []
MemberDef desc: relation of statistic to target value
MemberDef name: val
MemberDef type: float
MemberDef opts [u'LABEL_', u'CONDEDIT_ON_flag:true']
MemberDef cats []
MemberDef desc: target or comparison value
MemberDef name: cnt
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_flag:true']
MemberDef cats []
MemberDef desc: Number of times criterion must be met before stopping
MemberDef name: n_met
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: number of times actually met
MethodDef name: Evaluate
MethodDef proto bool Evaluate(float cmp)
MethodDef name: Init
MethodDef desc: initialize the process (n_met counter)
MethodDef proto void Init()
MethodDef names [u'Evaluate', u'Init']
########################################################################
TypeDef len: 13
TypeDef name:  V3ScriptFile
TypeDef type: class
TypeDef desc: V3 compat format for reading script files
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: fname
MemberDef type: taString
########################################################################
TypeDef len: 15
TypeDef name:  Script
TypeDef type: class
TypeDef desc: an object for maintaining and running arbitrary scripts
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_scr', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase']
MemberDef name: script_file
MemberDef type: V3ScriptFile
MemberDef name: script_string
MemberDef type: taString
MemberDef desc: script code to be run, instead of loading from file
MemberDef name: recording
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: currently recording?
MemberDef name: auto_run
MemberDef type: bool
MemberDef desc: run automatically at startup?
MemberDef name: s_args
MemberDef type: SArg_Array
MemberDef desc: string-valued arguments to pass to script
MethodDef name: GetThisTypeDef
MethodDef proto TypeDef_ptr GetThisTypeDef()
MethodDef name: GetThisPtr
MethodDef desc: void	UpdateAfterEdit();
MethodDef proto void_ptr GetThisPtr()
MethodDef names [u'GetThisPtr', u'GetThisTypeDef']
########################################################################
TypeDef len: 7
TypeDef name:  Script_Group
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  Process_Group
TypeDef type: class
TypeDef desc: from stats.h a menu group for processes
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  DataItem_List
TypeDef type: class
TypeDef desc: list of DataItem objects
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 13
TypeDef name:  InteractiveEpoch
TypeDef type: class
TypeDef desc: Loops over events in an environment using the interactive interface of GetNextEvent(), which can generate new events based on current state
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'EpochProcess']
MemberDef name: last_trial_val
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: last trial.val when GetCurEvent was called -- decide wether its time to get a new event or not
########################################################################
TypeDef len: 15
TypeDef name:  PatternSpec_Group
TypeDef type: class
TypeDef desc: group of pattern specs (acts like a template for pattern groups)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'taBase_Group']
TypeDef children: [u'ProbPatternSpec_Group']
MemberDef name: pat_gp_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_Pattern_Group']
MemberDef cats []
MemberDef desc: type of pattern group to use
########################################################################
TypeDef len: 7
TypeDef name:  EventSpec_SPtr
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  Pattern_Group
TypeDef type: class
TypeDef desc: Group of patterns
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  Event_Group
TypeDef type: class
TypeDef desc: Group of events
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Environment', u'INSTANCE']
TypeDef children: [u'FreqEvent_Group', u'TimeEvent_Group']
########################################################################
TypeDef len: 9
TypeDef name:  Environment_Group
TypeDef type: class
TypeDef desc: group of environments
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 9
TypeDef name:  Environment_List
TypeDef type: class
TypeDef desc: group of environments
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 17
TypeDef name:  ScriptEnv
TypeDef type: class
TypeDef desc: For algorithmically generated events: Initialization of events is done by a script at the start of each epoch through the InitEvents() function
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_env', u'COMPRESS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Environment']
TypeDef children: [u'InteractiveScriptEnv']
MemberDef name: script_file
MemberDef type: V3ScriptFile
MemberDef name: script_string
MemberDef type: taString
MemberDef name: s_args
MemberDef type: SArg_Array
MemberDef desc: string-valued arguments to pass to script
MethodDef name: GetThisTypeDef
MethodDef proto TypeDef_ptr GetThisTypeDef()
MethodDef name: GetThisPtr
MethodDef proto void_ptr GetThisPtr()
MethodDef names [u'GetThisPtr', u'GetThisTypeDef']
########################################################################
TypeDef len: 11
TypeDef name:  InteractiveScriptEnv
TypeDef type: class
TypeDef desc: For interactively-generated environments: Script is called for each event in GetNextEvent function (use with InteractiveEpoch)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_env', u'COMPRESS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Environment', u'ScriptEnv']
########################################################################
TypeDef len: 13
TypeDef name:  FreqEvent
TypeDef type: class
TypeDef desc: an event that has a frequency associated with it
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_evt', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Event']
MemberDef name: frequency
MemberDef type: float
MemberDef opts [u'ENVIROVIEW_freq']
MemberDef cats []
MemberDef desc: frequency of occurance for this event
########################################################################
TypeDef len: 15
TypeDef name:  FreqEnv
TypeDef type: class
TypeDef desc: environment which has a frequency for each event
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_env', u'COMPRESS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Environment']
EnumDef name: NO_FREQ
EnumDef val: NO_FREQ
EnumDef: don&apos;t use frequency
EnumDef name: EVENT
EnumDef val: EVENT
EnumDef: use frequency at the event level
EnumDef name: GROUP
EnumDef val: GROUP
EnumDef: use frequency at the group level
EnumDef name: GROUP_EVENT
EnumDef val: GROUP_EVENT
EnumDef: frequency at both group and event levels
EnumDef name: RANDOM
EnumDef val: RANDOM
EnumDef: random sampling (n_samples at freq probability)
EnumDef name: PERMUTED
EnumDef val: PERMUTED
EnumDef: permuted (n_sample * freq evts per epoch)
EnumDef names: [u'FreqLevel', u'SampleType']
MemberDef name: freq_level
MemberDef type: FreqEnv::FreqLevel
MemberDef desc: level at which to use the frequency information
MemberDef name: n_sample
MemberDef type: int
MemberDef opts [u'CONDEDIT_OFF_freq_level:NO_FREQ']
MemberDef cats []
MemberDef desc: number samples of the events to make per epoch
MemberDef name: sample_type
MemberDef type: FreqEnv::SampleType
MemberDef opts [u'CONDEDIT_OFF_freq_level:NO_FREQ']
MemberDef cats []
MemberDef desc: type of sampling (random with freq or permuted n_samples * freq)
########################################################################
TypeDef len: 13
TypeDef name:  FreqEvent_Group
TypeDef type: class
TypeDef desc: an event group that has a frequency associated with it
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'Event_Group']
MemberDef name: fenv
MemberDef type: FreqEnv*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: parent frequency environment
MemberDef name: frequency
MemberDef type: float
MemberDef desc: frequency of occurance for this group of events
########################################################################
TypeDef len: 15
TypeDef name:  TimeEvent
TypeDef type: class
TypeDef desc: an event which occurs at a specific time
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_evt', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Event']
TypeDef children: [u'FreqTimeEvent']
MemberDef name: time
MemberDef type: float
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: time at which it should appear
########################################################################
TypeDef len: 17
TypeDef name:  TimeEvent_Group
TypeDef type: class
TypeDef desc: a group of time-based events
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'Event_Group']
TypeDef children: [u'FreqTimeEvent_Group']
EnumDef name: PUNCTATE
EnumDef val: PUNCTATE
EnumDef: events appear for a single instant only
EnumDef name: CONSTANT
EnumDef val: CONSTANT
EnumDef: events persist constantly, change discretely
EnumDef name: LINEAR
EnumDef val: LINEAR
EnumDef: linear interpolation is performed between events
EnumDef name: USE_ENVIRO
EnumDef val: USE_ENVIRO
EnumDef: use interpolation specified in the environment
EnumDef names: [u'Interpolate']
MemberDef name: interpolate
MemberDef type: TimeEvent_Group::Interpolate
MemberDef desc: if and how to interpolate between given event times
MemberDef name: end_time
MemberDef type: float
MemberDef desc: time this sequence ends at
########################################################################
TypeDef len: 17
TypeDef name:  TimeEnvironment
TypeDef type: class
TypeDef desc: an environment that manages time-based events
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_env', u'COMPRESS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Environment']
TypeDef children: [u'FreqTimeEnv']
EnumDef name: PUNCTATE
EnumDef val: PUNCTATE
EnumDef: events appear for a single instant only
EnumDef name: CONSTANT
EnumDef val: CONSTANT
EnumDef: events persist constantly, change discretely
EnumDef name: LINEAR
EnumDef val: LINEAR
EnumDef: linear interpolation is performed between events
EnumDef names: [u'Interpolate']
MemberDef name: interpolate
MemberDef type: TimeEnvironment::Interpolate
MemberDef desc: if and how to interpolate between given event times
########################################################################
TypeDef len: 13
TypeDef name:  FreqTimeEvent
TypeDef type: class
TypeDef desc: a time event that has a frequency associated with it
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_evt', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Event', u'TimeEvent']
MemberDef name: frequency
MemberDef type: float
MemberDef opts [u'ENVIROVIEW_freq']
MemberDef cats []
MemberDef desc: frequency of occurance for this event
########################################################################
TypeDef len: 13
TypeDef name:  FreqTimeEvent_Group
TypeDef type: class
TypeDef desc: a time event group that has a frequency associated with it
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'Event_Group', u'TimeEvent_Group']
MemberDef name: frequency
MemberDef type: float
MemberDef desc: frequency of occurance for this group of events
########################################################################
TypeDef len: 15
TypeDef name:  FreqTimeEnv
TypeDef type: class
TypeDef desc: a time environment which has a frequency for each event
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_env', u'COMPRESS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Environment', u'TimeEnvironment']
EnumDef name: NO_FREQ
EnumDef val: NO_FREQ
EnumDef: don&apos;t use frequency
EnumDef name: EVENT
EnumDef val: EVENT
EnumDef: use frequency at the event level
EnumDef name: GROUP
EnumDef val: GROUP
EnumDef: use frequency at the group level
EnumDef name: RANDOM
EnumDef val: RANDOM
EnumDef: random sampling (n_samples at freq probability)
EnumDef name: PERMUTED
EnumDef val: PERMUTED
EnumDef: permuted (n_sample * freq evts per epoch)
EnumDef names: [u'FreqLevel', u'SampleType']
MemberDef name: freq_level
MemberDef type: FreqTimeEnv::FreqLevel
MemberDef desc: level at which to use the frequency information
MemberDef name: n_sample
MemberDef type: int
MemberDef opts [u'CONDEDIT_OFF_freq_level:NO_FREQ']
MemberDef cats []
MemberDef desc: number samples of the events to make per epoch
MemberDef name: sample_type
MemberDef type: FreqTimeEnv::SampleType
MemberDef opts [u'CONDEDIT_OFF_freq_level:NO_FREQ']
MemberDef cats []
MemberDef desc: type of sampling (random with freq or permuted n_samples * freq)
########################################################################
TypeDef len: 13
TypeDef name:  ProbPattern
TypeDef type: class
TypeDef desc: pattern is chosen from group of patterns with given probability
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_pat', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Pattern']
MemberDef name: prob
MemberDef type: float
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: probability of showing this pattern
MemberDef name: applied
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: whether it was applied
########################################################################
TypeDef len: 11
TypeDef name:  ProbPatternSpec_Group
TypeDef type: class
TypeDef desc: defines a group of patterns that are chosen according to their probabilities
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'taBase_Group', u'PatternSpec_Group']
########################################################################
TypeDef len: 13
TypeDef name:  ProbEventSpec
TypeDef type: class
TypeDef desc: events have probabalistically-chosen patterns contained in ProbPatternSpec_Groups
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'SCOPE_Environment', u'IMMEDIATE_UPDATE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'EventSpec']
MemberDef name: default_prob
MemberDef type: float
MemberDef desc: default probability
########################################################################
TypeDef len: 13
TypeDef name:  XYPatternSpec
TypeDef type: class
TypeDef desc: for patterns that are positioned at a particular x,y offset location
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSubSpec', u'PatternSpec']
MemberDef name: wrap
MemberDef type: bool
MemberDef desc: whether to wrap around target layer if pattern extends beyond coords
MemberDef name: apply_background
MemberDef type: bool
MemberDef desc: whether to give all units not in the pattern a background value
MemberDef name: background_value
MemberDef type: float
MemberDef desc: value to apply to all other units in the layer (if applied)
########################################################################
TypeDef len: 13
TypeDef name:  XYPattern
TypeDef type: class
TypeDef desc: specifies the x,y offset location of the pattern in the layer
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_pat', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Pattern']
MemberDef name: offset
MemberDef type: TwoDCoord
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: offset within network layer for pattern
########################################################################
TypeDef len: 13
TypeDef name:  XYSubPatternSpec
TypeDef type: class
TypeDef desc: presents rectagular subsets (size of layer) of large patterns at x,y offset
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSubSpec', u'PatternSpec']
MemberDef name: wrap
MemberDef type: bool
MemberDef desc: whether to wrap around pattern if layer extends beyond coords
########################################################################
TypeDef len: 13
TypeDef name:  XYSubPattern
TypeDef type: class
TypeDef desc: specifies the x,y offset location of the layer within the pattern
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_pat', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Pattern']
MemberDef name: offset
MemberDef type: TwoDCoord
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: offset within pattern for network layer
########################################################################
TypeDef len: 13
TypeDef name:  GroupPatternSpec
TypeDef type: class
TypeDef desc: organizes pattern values into sub-groups for viewing and/or sending to network
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Environment', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSubSpec', u'PatternSpec']
MemberDef name: sub_geom
MemberDef type: PosTDCoord
MemberDef desc: geometry of the individual sub-groups: must evenly divide into overall geom in both x &amp; y
MemberDef name: gp_geom
MemberDef type: PosTDCoord
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: geometry of the groups within overall geom (just geom / sub_geom)
MemberDef name: trans_apply
MemberDef type: bool
MemberDef desc: translate apply of values to network (only if units are flat, not grouped!)
########################################################################
TypeDef len: 13
TypeDef name:  DurEvent
TypeDef type: class
TypeDef desc: an event which lasts for a particular amount of time
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'SCOPE_Environment', u'EXT_evt', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Event']
MemberDef name: duration
MemberDef type: float
MemberDef opts [u'ENVIROVIEW']
MemberDef cats []
MemberDef desc: length of time (cycles) event should be presented
########################################################################
TypeDef len: 15
TypeDef name:  FromFileEnv
TypeDef type: class
TypeDef desc: Environment that reads events incrementally from a file into events. NOT SUPPORTED IN CONVERSION
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_env', u'COMPRESS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Environment']
EnumDef name: ONE_EPOCH
EnumDef val: ONE_EPOCH
EnumDef: read one epoch at a time, using InitEvents interface
EnumDef name: ONE_EVENT
EnumDef val: ONE_EVENT
EnumDef: read one event at a time, using GetNextEvent interface (requires InteractiveEpoch process)
EnumDef names: [u'ReadMode']
MemberDef name: read_mode
MemberDef type: FromFileEnv::ReadMode
MemberDef desc: how to read in events: either one epoch or one event at a time (one event requires InteractiveEpoch process)
MemberDef name: event_file
MemberDef type: taFiler*
MemberDef desc: file to read events from
MemberDef name: text_file_fmt
MemberDef type: Environment::TextFmt
MemberDef desc: format of text file
MemberDef name: binary
MemberDef type: bool
MemberDef desc: file is binary (written by WriteBinary). Otherwise, its Text as readable by ReadText
MemberDef name: events_per_epc
MemberDef type: int
MemberDef desc: how many events to present per epoch
MemberDef name: file_pos
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'SHOW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: position (in terms of events) within the file
########################################################################
TypeDef len: 13
TypeDef name:  ScriptProcess
TypeDef type: class
TypeDef desc: a process for use with scripts (has s_args)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
MemberDef name: s_args
MemberDef type: SArg_Array
MemberDef desc: string-valued arguments to pass to script
########################################################################
TypeDef len: 11
TypeDef name:  SaveNetsProc
TypeDef type: class
TypeDef desc: saves networks with network.name + counters (batch, epoch)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
########################################################################
TypeDef len: 11
TypeDef name:  SaveWtsProc
TypeDef type: class
TypeDef desc: saves weights with network.name + counters (batch, epoch)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
########################################################################
TypeDef len: 13
TypeDef name:  LoadWtsProc
TypeDef type: class
TypeDef desc: reads in a set of weights from specified file, as a way to initialize weights
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
MemberDef name: weights_file
MemberDef type: taString
MemberDef desc: the file name for the weights file to read in
########################################################################
TypeDef len: 11
TypeDef name:  InitWtsProc
TypeDef type: class
TypeDef desc: initialize the network&apos;s weights (Init_Weights)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
########################################################################
TypeDef len: 13
TypeDef name:  SyncEpochProc
TypeDef type: class
TypeDef desc: Epoch that runs two different sub-processes
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'EpochProcess']
MemberDef name: second_network
MemberDef type: Network*
MemberDef opts [u'CONTROL_PANEL']
MemberDef cats []
MemberDef desc: the network for the second trial process
MemberDef name: second_proc_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_SchedProcess']
MemberDef cats []
MemberDef desc: type of second process
MemberDef name: second_proc
MemberDef type: SchedProcess*
MemberDef opts [u'CONTROL_PANEL']
MemberDef cats []
MemberDef desc: second process to call
########################################################################
TypeDef len: 13
TypeDef name:  GridSearchBatch
TypeDef type: class
TypeDef desc: Increments param_path parameter over batches to search parameter space in equal increments
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_LAST', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'BatchProcess']
MemberDef name: start_val
MemberDef type: float
MemberDef opts [u'CONTROL_PANEL']
MemberDef cats []
MemberDef desc: start value of parameter being searched
MemberDef name: inc_val
MemberDef type: float
MemberDef opts [u'CONTROL_PANEL']
MemberDef cats []
MemberDef desc: increment of parameter being searched
MemberDef name: cur_val
MemberDef type: float
MemberDef opts [u'CONTROL_PANEL', u'GUI_READ_ONLY']
MemberDef cats []
MemberDef desc: current value of parameter based on batch value
MemberDef name: param_path
MemberDef type: taString
MemberDef desc: path to the parameter (starting at the project)
########################################################################
TypeDef len: 13
TypeDef name:  SameSeedBatch
TypeDef type: class
TypeDef desc: Stores a list of random seeds that are used at start of each batch run -- ensures each batch run starts with the same seed
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_LAST', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'BatchProcess']
MemberDef name: rnd_seeds
MemberDef type: taBase_List
MemberDef desc: the random seeds
MemberDef name: in_goto_val
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: currently inside a GoTo call (with this val): affects seed usage
########################################################################
TypeDef len: 13
TypeDef name:  ForkProcess
TypeDef type: class
TypeDef desc: Runs two different sub-processes
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
MemberDef name: second_network
MemberDef type: Network*
MemberDef desc: the network for the second process
MemberDef name: second_environment
MemberDef type: Environment*
MemberDef desc: the environment for the second process
MemberDef name: second_proc_type
MemberDef type: TypeDef*
MemberDef opts [u'TYPE_SchedProcess', u'NULL_OK']
MemberDef cats []
MemberDef desc: type of second process
MemberDef name: second_proc
MemberDef type: SchedProcess*
MemberDef desc: second process to call
########################################################################
TypeDef len: 15
TypeDef name:  BridgeProcess
TypeDef type: class
TypeDef desc: a bridge that connects two different networks together by copying values
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
EnumDef name: ONE_TO_TWO
EnumDef val: ONE_TO_TWO
EnumDef: first network (network) copies to second_network
EnumDef name: TWO_TO_ONE
EnumDef val: TWO_TO_ONE
EnumDef: second_network copies to first one (network)
EnumDef names: [u'BridgeDirection']
MemberDef name: second_network
MemberDef type: Network*
MemberDef desc: the other network to bridge to
MemberDef name: direction
MemberDef type: BridgeProcess::BridgeDirection
MemberDef desc: direction to copy in
MemberDef name: src_layer_nm
MemberDef type: taString
MemberDef desc: name of the source layer
MemberDef name: trg_layer_nm
MemberDef type: taString
MemberDef desc: name of the target layer
MemberDef name: src_variable
MemberDef type: taString
MemberDef desc: the source variable (member) to copy
MemberDef name: trg_variable
MemberDef type: taString
MemberDef desc: the target variable (member) to copy
MemberDef name: trg_ext_flag
MemberDef type: Unit::ExtType
MemberDef desc: flag to apply to the target units
########################################################################
TypeDef len: 13
TypeDef name:  MultiEnvProcess
TypeDef type: class
TypeDef desc: run subprocess over multiple environments, indexed by counter
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
MemberDef name: environments
MemberDef type: Environment_List
MemberDef opts [u'LINK_GROUP']
MemberDef cats []
MemberDef desc: list of environments to process
MemberDef name: use_subctr_max
MemberDef type: bool
MemberDef desc: determines whether subctr_max values are actually used
MemberDef name: subctr_max
MemberDef type: int_Array
MemberDef desc: sets the counter max value for the subprocess under this one for each environment (e.g., if subproc is nepochproc, sets numb of epochs per enviro)
MemberDef name: env
MemberDef type: Counter
MemberDef desc: current environment number
########################################################################
TypeDef len: 13
TypeDef name:  PatternFlagProcess
TypeDef type: class
TypeDef desc: iteratively sets/resets pattern flag at index = counter for all patterns, e.g. to determine sensitivity to given input
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess']
MemberDef name: pattern_no
MemberDef type: int
MemberDef desc: index of pattern to update
MemberDef name: flag
MemberDef type: PatternSpec::PatFlags
MemberDef desc: flag to be set (or unset if invert)
MemberDef name: invert
MemberDef type: bool
MemberDef desc: unset the flag instead of setting it
MemberDef name: val_idx
MemberDef type: Counter
MemberDef desc: index of current pattern value to be flagged
########################################################################
TypeDef len: 13
TypeDef name:  ClosestEventStat
TypeDef type: class
TypeDef desc: gets the closest event to the current output activity pattern
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: trial_proc
MemberDef type: TrialProcess*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: current trial process
MemberDef name: cmp_type
MemberDef type: float_RArray::DistMetric
MemberDef desc: comparison type to perform to compute distance
MemberDef name: dist_tol
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_cmp_type:SUM_SQUARES,EUCLIDIAN,HAMMING']
MemberDef cats []
MemberDef desc: tolerance value for distance functions
MemberDef name: norm
MemberDef type: bool
MemberDef opts [u'CONDEDIT_OFF_cmp_type:COVAR,CORREL,CROSS_ENTROPY']
MemberDef cats []
MemberDef desc: whether to normalize (distance, inner prod)
MemberDef name: subgp_no
MemberDef type: int
MemberDef desc: if not -1, then indicates which subgroup of units within layer
MemberDef name: dist
MemberDef type: StatVal
MemberDef desc: distance from closest event
MemberDef name: ev_nm
MemberDef type: StatVal
MemberDef desc: name of event which was closest
MemberDef name: sm_nm
MemberDef type: StatVal
MemberDef desc: 1 or 0 depending on whether the name matched cur event
########################################################################
TypeDef len: 13
TypeDef name:  CyclesToSettle
TypeDef type: class
TypeDef desc: Records number of cycles it took to settle
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'LOOP_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: settle
MemberDef type: SettleProcess*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: settle process to record
MemberDef name: cycles
MemberDef type: StatVal
MemberDef desc: number of cycles to settle
########################################################################
TypeDef len: 13
TypeDef name:  ActThreshRTStat
TypeDef type: class
TypeDef desc: records reaction-time in terms of number of cycles it took for max act in layer to exceed a threshold (doesn&apos;t necc stop settling though, unless stopcrit is set!)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_SettleProcess', u'LOOP_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: settle
MemberDef type: SettleProcess*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: settle process to record
MemberDef name: act_thresh
MemberDef type: float
MemberDef desc: threshold activation level -- rt_cycles are updated until layer max_act &gt;= thresh (also auto sets max_act.stopcrit.val)
MemberDef name: max_act
MemberDef type: StatVal
MemberDef desc: maximum activation of units in layer -- computed continuously, if stopcrit set here then process will actually stop at rt threshold
MemberDef name: rt_cycles
MemberDef type: StatVal
MemberDef desc: number of cycles of settling prior to max_act.val &gt;= act_tresh
MemberDef name: crossed_thresh
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: true if already crossed threshold
########################################################################
TypeDef len: 13
TypeDef name:  ScriptStat
TypeDef type: class
TypeDef desc: Use this stat for custom script-based stats
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: vals
MemberDef type: StatVal_List
MemberDef desc: put stat results in this group
MemberDef name: s_args
MemberDef type: SArg_Array
MemberDef desc: string-valued arguments to pass to script
########################################################################
TypeDef len: 13
TypeDef name:  CompareStat
TypeDef type: class
TypeDef desc: An aggregator-like stat that compares the output of two other stats
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: stat_1
MemberDef type: Stat*
MemberDef desc: first comparison stat
MemberDef name: stat_2
MemberDef type: Stat*
MemberDef desc: second comparison stat
MemberDef name: cmp_type
MemberDef type: float_RArray::DistMetric
MemberDef desc: comparison type to perform
MemberDef name: cmp
MemberDef type: StatVal
MemberDef desc: comparison value
MemberDef name: dist_tol
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_cmp_type:SUM_SQUARES,EUCLIDIAN,HAMMING']
MemberDef cats []
MemberDef desc: tolerance value for distance functions
MemberDef name: norm
MemberDef type: bool
MemberDef opts [u'CONDEDIT_OFF_cmp_type:COVAR,CORREL,CROSS_ENTROPY']
MemberDef cats []
MemberDef desc: whether to normalize (distance, inner prod)
MemberDef name: pre_proc_1
MemberDef type: SimpleMathSpec
MemberDef desc: step 1 of pre-processing to apply before comparision
MemberDef name: pre_proc_2
MemberDef type: SimpleMathSpec
MemberDef desc: step 2 of pre-processing to apply before comparision
MemberDef name: pre_proc_3
MemberDef type: SimpleMathSpec
MemberDef desc: step 3 of pre-processing to apply before comparision
########################################################################
TypeDef len: 13
TypeDef name:  ProjectionStat
TypeDef type: class
TypeDef desc: projects values from another stat along a given vector according to given distance metric
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'BUTROWS_1', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: stat
MemberDef type: Stat*
MemberDef desc: stat to get values to project
MemberDef name: prjn_vector
MemberDef type: float_RArray
MemberDef desc: vector of values to project along
MemberDef name: dist_metric
MemberDef type: float_RArray::DistMetric
MemberDef desc: distance metric for projection (INNER_PROD = standard metric for projections)
MemberDef name: dist_tol
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_dist_metric:SUM_SQUARES,EUCLIDIAN,HAMMING']
MemberDef cats []
MemberDef desc: tolerance value for distance metric
MemberDef name: dist_norm
MemberDef type: bool
MemberDef opts [u'CONDEDIT_OFF_dist_metric:COVAR,CORREL,CROSS_ENTROPY']
MemberDef cats []
MemberDef desc: whether to normalize distances (distance, inner prod)
MemberDef name: prjn
MemberDef type: StatVal
MemberDef desc: projection value
########################################################################
TypeDef len: 13
TypeDef name:  ComputeStat
TypeDef type: class
TypeDef desc: performs simple math computations on one or two stats, aggs the results according to net_agg
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: stat_1
MemberDef type: Stat*
MemberDef desc: first comparison stat
MemberDef name: stat_2
MemberDef type: Stat*
MemberDef desc: second comparison stat (optional)
MemberDef name: cpt
MemberDef type: StatVal
MemberDef desc: aggregated computed value (if not COPY)
MemberDef name: pre_proc_1
MemberDef type: SimpleMathSpec
MemberDef desc: step 1 of pre-processing to apply to each stat before computing
MemberDef name: pre_proc_2
MemberDef type: SimpleMathSpec
MemberDef desc: step 2 of pre-processing to apply to each stat before computing
MemberDef name: pre_proc_3
MemberDef type: SimpleMathSpec
MemberDef desc: step 3 of pre-processing to apply to each stat before computing
MemberDef name: compute_1
MemberDef type: SimpleMathSpec
MemberDef desc: step 1 of computation: stat1 is val stat2 is arg
MemberDef name: compute_2
MemberDef type: SimpleMathSpec
MemberDef desc: step 2 of computation: stat1 is val stat2 is arg
MemberDef name: compute_3
MemberDef type: SimpleMathSpec
MemberDef desc: step 3 of computation: stat1 is val stat2 is arg
########################################################################
TypeDef len: 15
TypeDef name:  CopyToEnvStat
TypeDef type: class
TypeDef desc: an aggregator-like stat that copies stat values from source stat to data environment
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
EnumDef name: SUPER
EnumDef val: SUPER
EnumDef: accumulate over the sched process just above the one in hierarchy (super proc) that owns this stat
EnumDef name: OWNER
EnumDef val: OWNER
EnumDef: accumulate over the sched process that owns this stat
EnumDef name: TRAIN
EnumDef val: TRAIN
EnumDef: accumulate over the training process (train must be ABOVE this stat in hierarchy)
EnumDef name: EPOCH
EnumDef val: EPOCH
EnumDef: accumulate over the epoch process in this hierarchy (epoch must be ABOVE this stat in hierarchy)
EnumDef name: SEQUENCE
EnumDef val: SEQUENCE
EnumDef: accumulate over the sequence process in this hierarcy (sequence must be ABOVE this stat in hierarchy)
EnumDef name: SETTLE
EnumDef val: SETTLE
EnumDef: accumulate over the settle process in this hierarchy (settle must be ABOVE this stat in hierarchy)
EnumDef names: [u'AccumScope']
MemberDef name: stat
MemberDef type: Stat*
MemberDef desc: stat to get copy vals from
MemberDef name: data_env
MemberDef type: Environment*
MemberDef desc: environment to store data in
MemberDef name: accum_scope
MemberDef type: CopyToEnvStat::AccumScope
MemberDef desc: over what scope of processing to accumulate data?
MemberDef name: pre_proc_1
MemberDef type: SimpleMathSpec
MemberDef desc: step 1 of pre-processing to apply before storage
MemberDef name: pre_proc_2
MemberDef type: SimpleMathSpec
MemberDef desc: step 2 of pre-processing to apply before storage
MemberDef name: pre_proc_3
MemberDef type: SimpleMathSpec
MemberDef desc: step 3 of pre-processing to apply before storage
MemberDef name: evt_idx
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: current event index
MemberDef name: last_ctr_vals
MemberDef type: int_Array
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: last accumulation counter values for all procs up to accum proc
########################################################################
TypeDef len: 13
TypeDef name:  EpochCounterStat
TypeDef type: class
TypeDef desc: gets the epoch counter from the network
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'FINAL_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: epoch
MemberDef type: StatVal
########################################################################
TypeDef len: 13
TypeDef name:  ProcCounterStat
TypeDef type: class
TypeDef desc: gets the process counters from a different process hierarchy
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'FINAL_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: proc
MemberDef type: SchedProcess*
MemberDef desc: process to get counters from
MemberDef name: counters
MemberDef type: StatVal_List
MemberDef desc: group of counters of data
########################################################################
TypeDef len: 13
TypeDef name:  MaxActTrgStat
TypeDef type: class
TypeDef desc: 0-1 error statistic, 1 if unit with max act has trg = 1
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: mxat
MemberDef type: StatVal
MemberDef desc: max activation = target 0-1 err value
########################################################################
TypeDef len: 15
TypeDef name:  UnitActRFStat
TypeDef type: class
TypeDef desc: unit activity receptive-field stat: gets RF of units in layer from rf_layers by weighting rf_layer acts by unit acts of layer units
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
EnumDef name: NORM_UNIT
EnumDef val: NORM_UNIT
EnumDef: normalize each unit separately
EnumDef name: NORM_LAYER
EnumDef val: NORM_LAYER
EnumDef: normalize over entire layer (divide by layer max of avg_norms)
EnumDef name: NORM_GROUP
EnumDef val: NORM_GROUP
EnumDef: normalize by unit groups (divide by group max of avg_norms)
EnumDef names: [u'NormMode']
MemberDef name: rf_layers
MemberDef type: Layer_Group
MemberDef opts [u'LINK_GROUP']
MemberDef cats []
MemberDef desc: layers to compute receptive field over: (sending-layers -- receiving layer is in layer member)
MemberDef name: data_env
MemberDef type: Environment*
MemberDef desc: environment to store data into
MemberDef name: norm_mode
MemberDef type: UnitActRFStat::NormMode
MemberDef desc: how to normalize the values
MemberDef name: avg_norms
MemberDef type: float_RArray
MemberDef desc: average normalizers (sum of unit activity vals)
########################################################################
TypeDef len: 13
TypeDef name:  UnitActRFStatResetProc
TypeDef type: class
TypeDef desc: resets the accumulated activation-based receptive field information on a UnitActRFStat -- put this at the point in a process heirarchy where RF&apos;s should be reset (e.g., Epoch INIT)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
MemberDef name: unit_act_rf_stat
MemberDef type: UnitActRFStat*
MemberDef desc: pointer to the stat to reset time for
########################################################################
TypeDef len: 13
TypeDef name:  UnitEventRFStat
TypeDef type: class
TypeDef desc: stores one event per unit, with each pattern element representing firing for each trial
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: epoch_proc
MemberDef type: EpochProcess*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: epoch process for event count
MemberDef name: data_env
MemberDef type: Environment*
MemberDef desc: environment to store data into
########################################################################
TypeDef len: 13
TypeDef name:  UniquePatStat
TypeDef type: class
TypeDef desc: An aggregator-like stat that counts the number of unique patterns in given stat
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: pat_stat
MemberDef type: Stat*
MemberDef desc: stat that is the source of patterns
MemberDef name: data_env
MemberDef type: Environment*
MemberDef desc: environment to store patterns into during computation
MemberDef name: cmp_type
MemberDef type: float_RArray::DistMetric
MemberDef desc: comparison type to perform to determine uniqueness
MemberDef name: unq
MemberDef type: StatVal
MemberDef desc: number of unique patterns
MemberDef name: dist_tol
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_cmp_type:SUM_SQUARES,EUCLIDIAN,HAMMING']
MemberDef cats []
MemberDef desc: tolerance value for distance functions
MemberDef name: norm
MemberDef type: bool
MemberDef opts [u'CONDEDIT_OFF_cmp_type:COVAR,CORREL,CROSS_ENTROPY']
MemberDef cats []
MemberDef desc: whether to normalize (distance, inner prod)
MemberDef name: uniq_tol
MemberDef type: float
MemberDef desc: overall distance tolerance to determine if unique or not
MemberDef name: pre_proc_1
MemberDef type: SimpleMathSpec
MemberDef desc: step 1 of pre-processing to apply before comparision
MemberDef name: pre_proc_2
MemberDef type: SimpleMathSpec
MemberDef desc: step 2 of pre-processing to apply before comparision
MemberDef name: pre_proc_3
MemberDef type: SimpleMathSpec
MemberDef desc: step 3 of pre-processing to apply before comparision
########################################################################
TypeDef len: 13
TypeDef name:  TimeCounterStat
TypeDef type: class
TypeDef desc: continuously incrementing time counter -- useful for an X axis for graphing events across normal counter boundaries
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'LOOP_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: time
MemberDef type: StatVal
########################################################################
TypeDef len: 13
TypeDef name:  TimeCounterStatResetProc
TypeDef type: class
TypeDef desc: resets the time on a TimeCounterStat -- put this at the point in a process heirarchy where time should be reset
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
MemberDef name: time_ctr_stat
MemberDef type: TimeCounterStat*
MemberDef desc: pointer to the stat to reset time for
########################################################################
TypeDef len: 15
TypeDef name:  DispDataEnvProc
TypeDef type: class
TypeDef desc: displays information contained in a data environment that is being updated by another statistic
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
EnumDef name: RAW_DATA_GRID
EnumDef val: RAW_DATA_GRID
EnumDef: directly plot the data to a grid log
EnumDef name: DIST_MATRIX
EnumDef val: DIST_MATRIX
EnumDef: distance matrix in grid log
EnumDef name: CLUSTER_PLOT
EnumDef val: CLUSTER_PLOT
EnumDef: cluster plot of distance matrix in graph log
EnumDef name: CORREL_MATRIX
EnumDef val: CORREL_MATRIX
EnumDef: correlation matrix for values across patterns displayed in grid log
EnumDef name: PCA_EIGEN_GRID
EnumDef val: PCA_EIGEN_GRID
EnumDef: principal components analysis plot of eigen vectors in grid log
EnumDef name: PCA_PRJN_PLOT
EnumDef val: PCA_PRJN_PLOT
EnumDef: principal components analysis projection plot in graph log
EnumDef name: MDS_PRJN_PLOT
EnumDef val: MDS_PRJN_PLOT
EnumDef: multidimensional scaling on distance matrix in graph log
EnumDef names: [u'DispType']
MemberDef name: data_env
MemberDef type: Environment*
MemberDef desc: environment containing data to be plotted (data is assumed to be in pattern 0)
MemberDef name: pat_no
MemberDef type: int
MemberDef desc: pattern number in the environment to display
MemberDef name: disp_type
MemberDef type: DispDataEnvProc::DispType
MemberDef desc: what type of data display to make
MemberDef name: disp_log
MemberDef type: PDPLog*
MemberDef desc: log view to contain the display
MemberDef name: dist_metric
MemberDef type: float_RArray::DistMetric
MemberDef desc: distance metric (where appropriate)
MemberDef name: dist_norm
MemberDef type: bool
MemberDef opts [u'CONDEDIT_OFF_dist_metric:COVAR,CORREL,CROSS_ENTROPY']
MemberDef cats []
MemberDef desc: normalize distances?
MemberDef name: dist_tol
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_dist_metric:SUM_SQUARES,EUCLIDIAN,HAMMING']
MemberDef cats []
MemberDef desc: tolerance for computing distances (below tol = 0 error)
MemberDef name: x_axis_component
MemberDef type: int
MemberDef desc: for PCA &amp; MDS Prjn Plots -- use this component for x axis
MemberDef name: y_axis_component
MemberDef type: int
MemberDef desc: for PCA &amp; MDS Prjn Plots -- use this component for y axis
########################################################################
TypeDef len: 13
TypeDef name:  DispNetWeightsProc
TypeDef type: class
TypeDef desc: displays network weight values in a GridLog using GridViewWeights function
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
MemberDef name: recv_layer_nm
MemberDef type: taString
MemberDef desc: name of the receiving layer (plot weights into these units)
MemberDef name: send_layer_nm
MemberDef type: taString
MemberDef desc: name of the sending layer (plot weights from these units into recv)
MemberDef name: grid_log
MemberDef type: GridLog*
MemberDef desc: grid log to display weights in
########################################################################
TypeDef len: 13
TypeDef name:  ClearLogProc
TypeDef type: class
TypeDef desc: clear a log display
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process']
MemberDef name: log_to_clear
MemberDef type: PDPLog*
MemberDef desc: log to clear
########################################################################
TypeDef len: 9
TypeDef name:  TypeDefault_Group
TypeDef type: class
TypeDef desc: group of type default objects
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'DEF_PATH_$PDPDIR$/defaults', u'INSTANCE']
########################################################################
TypeDef len: 7
TypeDef name:  PDPLog_Group
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'INSTANCE']
########################################################################
TypeDef len: 5
TypeDef name:  Layer_PtrList
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
########################################################################
TypeDef len: 7
TypeDef name:  SoAction
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoIndexedTriangleStripSet
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoVertexProperty
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoDrawStyle
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  SoCube
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  taiGroupElsButton
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 7
TypeDef name:  QTabWidget
TypeDef type: class
TypeDef cats:, []
TypeDef opts:, []
TypeDef children: []
########################################################################
TypeDef len: 13
TypeDef name:  CsCon
TypeDef type: class
TypeDef desc: connection values for constraint satisfaction
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE']
TypeDef parents: [u'Connection']
MemberDef name: pdw
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: the previous delta-weight (for momentum)
MemberDef name: dwt_agg
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE']
MemberDef cats []
MemberDef desc: variable for aggregating the outer-prods
########################################################################
TypeDef len: 17
TypeDef name:  CsConSpec
TypeDef type: class
TypeDef desc: constraint satisfaction connection specifications
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec']
TypeDef children: [u'HebbCsConSpec']
MemberDef name: lrate
MemberDef type: float
MemberDef desc: learning rate
MemberDef name: momentum
MemberDef type: float
MemberDef desc: momentum for change in weights
MemberDef name: momentum_c
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: complement of momentum
MemberDef name: decay
MemberDef type: float
MemberDef desc: decay rate (before lrate and momentum)
MemberDef name: decay_fun
MemberDef type: void
MemberDef opts [u'CONDEDIT_OFF_decay:0']
MemberDef cats []
MemberDef desc: the weight decay function to use
MethodDef name: C_Aggregate_dWt
MethodDef proto void C_Aggregate_dWt(CsCon* cn, CsUnit* ru, CsUnit* su, float phase)
MethodDef name: Aggregate_dWt
MethodDef proto void Aggregate_dWt(CsRecvCons* cg, CsUnit* ru, float phase)
MethodDef name: B_Aggregate_dWt
MethodDef desc: aggregate coproducts
MethodDef proto void B_Aggregate_dWt(CsCon* cn, CsUnit* ru, float phase)
MethodDef name: C_Compute_WtDecay
MethodDef desc: call the decay function
MethodDef proto void C_Compute_WtDecay(CsCon* cn, Unit* ru, Unit* su)
MethodDef name: B_Compute_dWt
MethodDef proto void B_Compute_dWt(CsCon* cn, CsUnit* ru)
MethodDef name: B_Compute_Weights
MethodDef proto void B_Compute_Weights(CsCon* cn, Unit* ru)
MethodDef names [u'Aggregate_dWt', u'B_Aggregate_dWt', u'B_Compute_Weights', u'B_Compute_dWt', u'C_Aggregate_dWt', u'C_Compute_WtDecay']
########################################################################
TypeDef len: 13
TypeDef name:  CsRecvCons
TypeDef type: class
TypeDef desc: group of constraint-satisfaction receiving connections
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'RecvCons']
MethodDef name: Aggregate_dWt
MethodDef desc: compute weight change
MethodDef proto void Aggregate_dWt(CsUnit* ru, float phase)
MethodDef names [u'Aggregate_dWt']
########################################################################
TypeDef len: 19
TypeDef name:  CsUnitSpec
TypeDef type: class
TypeDef desc: standard constraint satisfaction unit (uses inverse-logistic activation)
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec']
TypeDef children: [u'SigmoidUnitSpec', u'BoltzUnitSpec', u'IACUnitSpec', u'LinearCsUnitSpec', u'ThreshLinCsUnitSpec']
EnumDef name: HARD_CLAMP
EnumDef val: HARD_CLAMP
EnumDef: input sets value, noise is added
EnumDef name: HARD_FAST_CLAMP
EnumDef val: HARD_FAST_CLAMP
EnumDef: input fixed for entire settle (much faster)
EnumDef name: SOFT_CLAMP
EnumDef val: SOFT_CLAMP
EnumDef: input added to net input
EnumDef name: SOFT_THEN_HARD_CLAMP
EnumDef val: SOFT_THEN_HARD_CLAMP
EnumDef: soft clamping in minus phase, hard clamping in plus
EnumDef names: [u'ClampType']
MemberDef name: real_range
MemberDef type: MinMaxRange
MemberDef desc: the actual range to use for activations
MemberDef name: noise
MemberDef type: Random
MemberDef desc: what kind of noise?
MemberDef name: step
MemberDef type: float
MemberDef desc: step size taken to update activations
MemberDef name: gain
MemberDef type: float
MemberDef desc: gain of the activation fun (1/T for boltz)
MemberDef name: clamp_type
MemberDef type: CsUnitSpec::ClampType
MemberDef desc: type of clamping to use
MemberDef name: clamp_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_clamp_type:HARD_CLAMP,HARD_FAST_CLAMP']
MemberDef cats []
MemberDef desc: gain of the soft clamping
MemberDef name: initial_act
MemberDef type: Random
MemberDef desc: what to initialize the act to
MemberDef name: state_decay
MemberDef type: float
MemberDef opts [u'AKA_modify_decay']
MemberDef cats []
MemberDef desc: amount to decay acts towards rest for DECAY_STATE initialization between phases or trials
MemberDef name: use_annealing
MemberDef type: bool
MemberDef desc: true if noise sched is used to anneal acts
MemberDef name: noise_sched
MemberDef type: Schedule
MemberDef opts [u'CONDEDIT_ON_use_annealing:true']
MemberDef cats []
MemberDef desc: schedule of noise variance multipliers
MemberDef name: use_sharp
MemberDef type: bool
MemberDef desc: true if gain sched is used to sharpen acts
MemberDef name: gain_sched
MemberDef type: Schedule
MemberDef opts [u'CONDEDIT_ON_use_sharp:true']
MemberDef cats []
MemberDef desc: schedule of gain multipliers
MethodDef name: Compute_ClampAct
MethodDef desc: hard-fast-clamp inputs (at start of settling)
MethodDef proto void Compute_ClampAct(CsUnit* u)
MethodDef name: Compute_ClampNet
MethodDef desc: compute net input from clamped inputs (at start of settling)
MethodDef proto void Compute_ClampNet(CsUnit* u)
MethodDef name: Compute_Act_impl
MethodDef desc: actually computes specific activation function
MethodDef proto void Compute_Act_impl(CsUnit* u, int cycle, int phase)
MethodDef name: DecayState
MethodDef desc: decay activation state information
MethodDef proto void DecayState(CsUnit* u)
MethodDef name: PhaseInit
MethodDef desc: initialize external inputs based on phase information
MethodDef proto void PhaseInit(CsUnit* u, int phase)
MethodDef name: Aggregate_dWt
MethodDef proto void Aggregate_dWt(Unit* u, int phase)
MethodDef name: PostSettle
MethodDef desc: set stuff after settling is over
MethodDef proto void PostSettle(CsUnit* u, int phase)
MethodDef name: GraphActFun
MethodDef desc: graph the activation function, settling for 50 cycles for each net input (NULL = new graph data)
MethodDef proto void GraphActFun(DataTable* graph_data, float min = -5.0, float max = 5.0, int ncycles = 50)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'Aggregate_dWt', u'Compute_Act_impl', u'Compute_ClampAct', u'Compute_ClampNet', u'DecayState', u'GraphActFun', u'PhaseInit', u'PostSettle']
########################################################################
TypeDef len: 15
TypeDef name:  SigmoidUnitSpec
TypeDef type: class
TypeDef desc: Sigmoid (logistic) activation function (float-valued within range)
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'CsUnitSpec']
EnumDef name: ACTIVATION
EnumDef val: ACTIVATION
EnumDef: time-average the activations
EnumDef name: NET_INPUT
EnumDef val: NET_INPUT
EnumDef: time-average the net inputs
EnumDef names: [u'TimeAvgType']
MemberDef name: time_avg
MemberDef type: SigmoidUnitSpec::TimeAvgType
MemberDef desc: type of time-averaging to perform
########################################################################
TypeDef len: 13
TypeDef name:  BoltzUnitSpec
TypeDef type: class
TypeDef desc: Boltzmann-machine activation function (binary, probabalistic)
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'CsUnitSpec']
MemberDef name: temp
MemberDef type: float
MemberDef desc: temperature (1/gain)
########################################################################
TypeDef len: 13
TypeDef name:  IACUnitSpec
TypeDef type: class
TypeDef desc: Interactive-Activation &amp; Competition activation function (IAC)
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'CsUnitSpec']
MemberDef name: rest
MemberDef type: float
MemberDef desc: rest level of activation
MemberDef name: decay
MemberDef type: float
MemberDef desc: decay rate (1/gain) (continuous decay -- not between phases or trials, which is state_decay)
MemberDef name: use_send_thresh
MemberDef type: bool
MemberDef desc: pay attn to send_thresh? if so, need SYNC_SENDER_BASED in cycle proc, sender based netin
MemberDef name: send_thresh
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_use_send_thresh:true']
MemberDef cats []
MemberDef desc: threshold below which unit does not send act
########################################################################
TypeDef len: 15
TypeDef name:  CsUnit
TypeDef type: class
TypeDef desc: constraint satisfaction unit
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Unit']
MemberDef name: da
MemberDef type: float
MemberDef desc: delta-activation (or net input) value
MemberDef name: prv_net
MemberDef type: float
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: previous net input
MemberDef name: clmp_net
MemberDef type: float
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: net input from hard_fast_clamp
MemberDef name: act_m
MemberDef type: float
MemberDef desc: minus phase activation
MemberDef name: act_p
MemberDef type: float
MemberDef desc: plus phase activation
MemberDef name: n_dwt_aggs
MemberDef type: int
MemberDef desc: number of delta-weight aggregations performed
MethodDef name: Compute_ClampAct
MethodDef proto void Compute_ClampAct()
MethodDef name: Compute_ClampNet
MethodDef proto void Compute_ClampNet()
MethodDef name: DecayState
MethodDef proto void DecayState()
MethodDef name: PhaseInit
MethodDef proto void PhaseInit(int phase)
MethodDef name: PostSettle
MethodDef proto void PostSettle(int phase)
MethodDef name: Aggregate_dWt
MethodDef proto void Aggregate_dWt(int phase)
MethodDef names [u'Aggregate_dWt', u'Compute_ClampAct', u'Compute_ClampNet', u'DecayState', u'PhaseInit', u'PostSettle']
########################################################################
TypeDef len: 11
TypeDef name:  CsLayer
TypeDef type: class
TypeDef desc: A constraint-satisfaction layer
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_lay', u'COMPRESS', u'SCOPE_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Layer']
########################################################################
TypeDef len: 17
TypeDef name:  CsNetwork
TypeDef type: class
TypeDef desc: network for constraint statisfaction
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'FILETYPE_Network', u'EXT_net', u'COMPRESS', u'DEF_NAME_ROOT_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'Network']
EnumDef name: SYNCHRONOUS
EnumDef val: SYNCHRONOUS
EnumDef name: ASYNCHRONOUS
EnumDef val: ASYNCHRONOUS
EnumDef name: SYNC_SENDER_BASED
EnumDef val: SYNC_SENDER_BASED
EnumDef: needed for IAC send_thresh impl
EnumDef name: DO_NOTHING
EnumDef val: DO_NOTHING
EnumDef: do nothing
EnumDef name: INIT_STATE
EnumDef val: INIT_STATE
EnumDef: initialize the network state
EnumDef name: DECAY_STATE
EnumDef val: DECAY_STATE
EnumDef: decay the activations from prior state
EnumDef name: MINUS_PHASE
EnumDef val: MINUS_PHASE
EnumDef name: PLUS_PHASE
EnumDef val: PLUS_PHASE
EnumDef names: [u'Phase', u'StateInit', u'UpdateMode']
MemberDef name: update_mode
MemberDef type: CsNetwork::UpdateMode
MemberDef desc: how to update: async = n_updates, sync = all units. sender_based is for IAC
MemberDef name: n_updates
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_update_mode:ASYNCHRONOUS']
MemberDef cats []
MemberDef desc: for ASYNC mode, number of updates (with replacement) to perform in one cycle
MemberDef name: trial_init
MemberDef type: CsNetwork::StateInit
MemberDef desc: how to initialize network at start of trial
MemberDef name: between_phases
MemberDef type: CsNetwork::StateInit
MemberDef desc: what to do between phases
MemberDef name: deterministic
MemberDef type: bool
MemberDef desc: only compute stats after the last cycle (deterministic mode)
MemberDef name: start_stats
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_deterministic:false']
MemberDef cats []
MemberDef desc: the cycle at which to start aggregating dWt
MemberDef name: cycle_max
MemberDef type: int
MemberDef opts []
MemberDef cats [u'Counter']
MemberDef desc: maximum number of cycles to compute
MemberDef name: sample
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: current sample number
MemberDef name: phase_max
MemberDef type: int
MemberDef opts []
MemberDef cats [u'Counter']
MemberDef desc: maximum number of phases
MemberDef name: phase
MemberDef type: CsNetwork::Phase
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: current phase name
MemberDef name: phase_no
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: current phase number
MemberDef name: maxda_stopcrit
MemberDef type: float
MemberDef opts [u'DEF_0.01']
MemberDef cats [u'Statistic']
MemberDef desc: stopping criterion for max da
MemberDef name: maxda
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: maximum change in activation (delta-activation) over network; used in stopping settling
MemberDef name: minus_cycles
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: cycles to settle in the minus phase -- this is the typical settling time statistic to record
MemberDef name: avg_cycles
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: average settling cycles in the minus phase (computed over previous epoch)
MemberDef name: avg_cycles_sum
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: sum for computing current average cycles in this epoch
MemberDef name: avg_cycles_n
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: N for average cycles computation for this epoch
MethodDef name: Compute_SyncAct
MethodDef desc: compute synchronous activations: first pass is netin, second pass is activations, for all units
MethodDef proto void Compute_SyncAct()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Compute_AsyncAct
MethodDef desc: compute asynchronous activations: select units at random to update
MethodDef proto void Compute_AsyncAct()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Aggregate_dWt
MethodDef desc: aggregate weight changes (for probabilistic sampling)
MethodDef proto void Aggregate_dWt()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Cycle_Run
MethodDef desc: compuate one cyle of updating
MethodDef proto void Cycle_Run()
MethodDef opts [u'CAT_Cycle']
MethodDef name: PhaseInit
MethodDef desc: initialize at start of settling phase -- sets external input flags based on phase (called by Settle_Init)
MethodDef proto void PhaseInit()
MethodDef opts [u'CAT_Settle']
MethodDef name: DecayState
MethodDef desc: decay state at start of settling phase (called by Settle_Init)
MethodDef proto void DecayState()
MethodDef opts [u'CAT_Settle']
MethodDef name: Compute_ClampAct
MethodDef desc: compute activations of hard clamped units (called by Settle_Init)
MethodDef proto void Compute_ClampAct()
MethodDef opts [u'CAT_Settle']
MethodDef name: Compute_ClampNet
MethodDef desc: compute fixed netinputs from hard clamped units (optimizes computation) (called by Settle_Init)
MethodDef proto void Compute_ClampNet()
MethodDef opts [u'CAT_Settle']
MethodDef name: PostSettle
MethodDef desc: get activation states after settling
MethodDef proto void PostSettle()
MethodDef opts [u'CAT_Settle']
MethodDef name: Settle_Init
MethodDef desc: run various initialization steps at the start of settling
MethodDef proto void Settle_Init()
MethodDef opts [u'CAT_Settle']
MethodDef name: Settle_Final
MethodDef desc: run final steps of processing after settling
MethodDef proto void Settle_Final()
MethodDef opts [u'CAT_Settle']
MethodDef name: Compute_MinusCycles
MethodDef desc: compute minus-phase cycles (and increment epoch sums) -- at the end of the minus phase (of course)
MethodDef proto void Compute_MinusCycles()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Trial_Init
MethodDef desc: initialize at start of trial: initializes activations and phase counters
MethodDef proto void Trial_Init()
MethodDef opts [u'CAT_Trial']
MethodDef name: Trial_Final
MethodDef desc: at end of trial, calls Compute_dWt if not testing
MethodDef proto void Trial_Final()
MethodDef opts [u'CAT_Trial']
MethodDef name: Trial_UpdatePhase
MethodDef desc: update phase after one settle -- just sets phase to plus phase
MethodDef proto void Trial_UpdatePhase()
MethodDef opts [u'CAT_Trial']
MethodDef name: Compute_AvgCycles
MethodDef desc: compute average cycles (at an epoch-level timescale)
MethodDef proto void Compute_AvgCycles()
MethodDef opts [u'CAT_Statistic']
MethodDef names [u'Aggregate_dWt', u'Compute_AsyncAct', u'Compute_AvgCycles', u'Compute_ClampAct', u'Compute_ClampNet', u'Compute_MinusCycles', u'Compute_SyncAct', u'Cycle_Run', u'DecayState', u'PhaseInit', u'PostSettle', u'Settle_Final', u'Settle_Init', u'Trial_Final', u'Trial_Init', u'Trial_UpdatePhase']
########################################################################
TypeDef len: 11
TypeDef name:  CsProject
TypeDef type: class
TypeDef desc: project for constraint satisfaction networks
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase']
########################################################################
TypeDef len: 11
TypeDef name:  CsSendCons
TypeDef type: class
TypeDef desc: group of constraint-satisfaction sending connections
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'SendCons']
########################################################################
TypeDef len: 11
TypeDef name:  LinearCsUnitSpec
TypeDef type: class
TypeDef desc: linear version of Cs units with time-averaging on the net inputs
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'CsUnitSpec']
########################################################################
TypeDef len: 13
TypeDef name:  ThreshLinCsUnitSpec
TypeDef type: class
TypeDef desc: threshold-linear version of Cs units with time-averaging on the net inputs
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'CsUnitSpec']
MemberDef name: threshold
MemberDef type: float
########################################################################
TypeDef len: 11
TypeDef name:  HebbCsConSpec
TypeDef type: class
TypeDef desc: Simple Hebbian wt update (send act * recv act), operates only on final activity states
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'CsConSpec']
########################################################################
TypeDef len: 11
TypeDef name:  CsWizard
TypeDef type: class
TypeDef desc: constraint satisfaction specific wizard for automating construction of simulation objects
TypeDef cats:, [u'Cs']
TypeDef opts:, [u'BUTROWS_2', u'EDIT_WIDTH_60', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taWizard', u'Wizard']
########################################################################
TypeDef len: 13
TypeDef name:  CsSample
TypeDef type: class
TypeDef desc: Samples over Cs Trials (
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'TrialProcess']
MemberDef name: sample
MemberDef type: Counter
########################################################################
TypeDef len: 15
TypeDef name:  CsTrial
TypeDef type: class
TypeDef desc: one minus phase and one plus phase of settling
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'TrialProcess']
EnumDef name: DO_NOTHING
EnumDef val: DO_NOTHING
EnumDef: do nothing
EnumDef name: INIT_STATE
EnumDef val: INIT_STATE
EnumDef: initialize the network state
EnumDef name: MODIFY_STATE
EnumDef val: MODIFY_STATE
EnumDef: modify state (algorithm specific)
EnumDef name: MINUS_PHASE
EnumDef val: MINUS_PHASE
EnumDef name: PLUS_PHASE
EnumDef val: PLUS_PHASE
EnumDef names: [u'Phase', u'StateInit']
MemberDef name: phase_no
MemberDef type: Counter
MemberDef desc: current phase number
MemberDef name: phase
MemberDef type: CsTrial::Phase
MemberDef desc: state variable for phase
MemberDef name: trial_init
MemberDef type: CsTrial::StateInit
MemberDef desc: how to initialize network at start of trial
MemberDef name: no_plus_stats
MemberDef type: bool
MemberDef desc: don&apos;t do stats/logging in plus phase
MemberDef name: no_plus_test
MemberDef type: bool
MemberDef desc: don&apos;t do plus phase when testing
########################################################################
TypeDef len: 15
TypeDef name:  CsSettle
TypeDef type: class
TypeDef desc: one settle to equilibrium of constrant satsisfaction
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'SettleProcess']
EnumDef name: DO_NOTHING
EnumDef val: DO_NOTHING
EnumDef: do nothing
EnumDef name: INIT_STATE
EnumDef val: INIT_STATE
EnumDef: initialize the network state
EnumDef name: MODIFY_STATE
EnumDef val: MODIFY_STATE
EnumDef: modify state (algorithm specific)
EnumDef names: [u'StateInit']
MemberDef name: between_phases
MemberDef type: CsSettle::StateInit
MemberDef desc: what to do between phases
MemberDef name: deterministic
MemberDef type: bool
MemberDef desc: only compute stats after the last cycle (deterministic mode)
MemberDef name: start_stats
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_deterministic:false']
MemberDef cats []
MemberDef desc: the cycle at which to start aggregating dWt
########################################################################
TypeDef len: 15
TypeDef name:  CsCycle
TypeDef type: class
TypeDef desc: one update cycle of all units (or n_updates in async) in network
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'CycleProcess']
EnumDef name: SYNCHRONOUS
EnumDef val: SYNCHRONOUS
EnumDef name: ASYNCHRONOUS
EnumDef val: ASYNCHRONOUS
EnumDef name: SYNC_SENDER_BASED
EnumDef val: SYNC_SENDER_BASED
EnumDef: needed for IAC send_thresh impl
EnumDef names: [u'UpdateMode']
MemberDef name: update_mode
MemberDef type: CsCycle::UpdateMode
MemberDef desc: how to update: async = n_updates, sync = all units. sender_based is for IAC
MemberDef name: n_updates
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_update_mode:ASYNCHRONOUS']
MemberDef cats []
MemberDef desc: for ASYNC mode, number of updates (with replacement) to perform in one cycle
########################################################################
TypeDef len: 13
TypeDef name:  CsMaxDa
TypeDef type: class
TypeDef desc: stat that computes when equilibrium is
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_SettleProcess', u'LOOP_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: da
MemberDef type: StatVal
MemberDef desc: delta-activation
########################################################################
TypeDef len: 13
TypeDef name:  CsDistStat
TypeDef type: class
TypeDef desc: gets actual distributions for TIG Stat aggregation makes avg of this in phases, TIG stat in trial
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_SettleProcess', u'LOOP_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: probs
MemberDef type: StatVal_List
MemberDef desc: prob of each dist pattern
MemberDef name: tolerance
MemberDef type: float
MemberDef desc: the tolerance for judging if act=targ
########################################################################
TypeDef len: 13
TypeDef name:  CsTIGstat
TypeDef type: class
TypeDef desc: Total Information Gain statistic, needs a dist stat to compute raw stats for this one
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_CsSample', u'FINAL_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: tig
MemberDef type: StatVal
MemberDef desc: the Information Gain for the trial
MemberDef name: dist_stat
MemberDef type: CsDistStat*
MemberDef desc: get the actual distributions from this stat
########################################################################
TypeDef len: 13
TypeDef name:  CsTargStat
TypeDef type: class
TypeDef desc: computes the pct in target distribution, is just like a TIG stat in that it gets raw values from dist stat
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_CsSample', u'FINAL_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: trg_pct
MemberDef type: StatVal
MemberDef desc: the pct in target for the trial
########################################################################
TypeDef len: 13
TypeDef name:  CsGoodStat
TypeDef type: class
TypeDef desc: ////////////////////////////// constraint satisfaction goodness statistic
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: use_netin
MemberDef type: bool
MemberDef desc: use net-input for harmony instead of computing anew?
MemberDef name: hrmny
MemberDef type: StatVal
MemberDef name: strss
MemberDef type: StatVal
MemberDef name: gdnss
MemberDef type: StatVal
MemberDef name: netin_hrmny
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: temp variable to hold netin-based harmony
########################################################################
TypeDef len: 11
TypeDef name:  V3CsProject
TypeDef type: class
TypeDef desc: self-organizing learning project
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase', u'V3ProjectBase']
########################################################################
TypeDef len: 13
TypeDef name:  SoCon
TypeDef type: class
TypeDef desc: generic self-organizing algorithm connection
TypeDef cats:, [u'So']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE']
TypeDef parents: [u'Connection']
MemberDef name: pdw
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: previous delta-weight change
########################################################################
TypeDef len: 19
TypeDef name:  SoConSpec
TypeDef type: class
TypeDef desc: generic self-organizing algorithm connection specification
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'VIRT_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec']
TypeDef children: [u'HebbConSpec', u'ClConSpec', u'SoftClConSpec', u'ZshConSpec']
EnumDef name: LAYER_AVG_ACT
EnumDef val: LAYER_AVG_ACT
EnumDef: from layer&apos;s average activation
EnumDef name: COMPUTE_AVG_ACT
EnumDef val: COMPUTE_AVG_ACT
EnumDef: compute the avg_in_act directly from my inputs (more computationally expensive but always accurate)
EnumDef names: [u'AvgInActSource']
MemberDef name: lrate
MemberDef type: float
MemberDef desc: learning rate
MemberDef name: avg_act_source
MemberDef type: SoConSpec::AvgInActSource
MemberDef desc: source of average input actviation value
MethodDef name: Compute_AvgInAct
MethodDef desc: compute the average input activation
MethodDef proto void Compute_AvgInAct(SoRecvCons* cg, Unit* ru)
MethodDef names [u'Compute_AvgInAct']
########################################################################
TypeDef len: 15
TypeDef name:  SoRecvCons
TypeDef type: class
TypeDef desc: self-organizing connection group
TypeDef cats:, [u'So']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'RecvCons']
MemberDef name: avg_in_act
MemberDef type: float
MemberDef desc: average input activation
MemberDef name: sum_in_act
MemberDef type: float
MemberDef desc: summed input activation
MethodDef name: Compute_AvgInAct
MethodDef desc: compute the average (and sum) input activation
MethodDef proto void Compute_AvgInAct(Unit* ru)
MethodDef names [u'Compute_AvgInAct']
########################################################################
TypeDef len: 15
TypeDef name:  SoUnit
TypeDef type: class
TypeDef desc: generic self-organizing unit
TypeDef cats:, [u'So']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Unit']
MemberDef name: act_i
MemberDef type: float
MemberDef desc: independent activation of the unit (before layer-level rescaling)
MethodDef name: Compute_AvgInAct
MethodDef proto void Compute_AvgInAct()
MethodDef names [u'Compute_AvgInAct']
########################################################################
TypeDef len: 15
TypeDef name:  SoUnitSpec
TypeDef type: class
TypeDef desc: generic self-organizing unit spec: linear act of std dot-product netin
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec']
TypeDef children: [u'ThreshLinSoUnitSpec', u'SomUnitSpec', u'SoftClUnitSpec']
MethodDef name: Compute_AvgInAct
MethodDef desc: compute average input activations
MethodDef proto void Compute_AvgInAct(Unit* u)
MethodDef name: GraphActFun
MethodDef desc: graph the activation function (NULL = new graph data)
MethodDef proto void GraphActFun(DataTable* graph_data, float min = -5.0, float max = 5.0)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'Compute_AvgInAct', u'GraphActFun']
########################################################################
TypeDef len: 15
TypeDef name:  SoLayer
TypeDef type: class
TypeDef desc: generic self-organizing layer
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_lay', u'COMPRESS', u'SCOPE_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Layer']
MemberDef name: spec
MemberDef type: SoLayerSpec_SPtr
MemberDef desc: the spec for this layer
MemberDef name: avg_act
MemberDef type: float
MemberDef desc: average activation over layer
MemberDef name: sum_act
MemberDef type: float
MemberDef desc: summed activation over layer
MemberDef name: winner
MemberDef type: Unit*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: winning unit
MethodDef name: Compute_AvgAct
MethodDef proto void Compute_AvgAct()
MethodDef names [u'Compute_AvgAct']
########################################################################
TypeDef len: 19
TypeDef name:  SoLayerSpec
TypeDef type: class
TypeDef desc: generic self-organizing layer specification
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec']
TypeDef children: [u'SoftMaxLayerSpec', u'SomLayerSpec', u'ClLayerSpec', u'SoftClLayerSpec']
EnumDef name: MAX_NETIN_WINS
EnumDef val: MAX_NETIN_WINS
EnumDef: maximum net input wins (like dot product)
EnumDef name: MIN_NETIN_WINS
EnumDef val: MIN_NETIN_WINS
EnumDef: minimum net input wins (like distance)
EnumDef names: [u'NetInType']
MemberDef name: netin_type
MemberDef type: SoLayerSpec::NetInType
MemberDef desc: type of netinput measure for computing winner
MethodDef name: FindMaxNetIn
MethodDef desc: finds unit with the maximum net-input value in the layer (clears acts too)
MethodDef proto SoUnit_ptr FindMaxNetIn(SoLayer* lay)
MethodDef name: FindMinNetIn
MethodDef desc: finds unit with the minimum net-input value in the layer (clears acts too)
MethodDef proto SoUnit_ptr FindMinNetIn(SoLayer* lay)
MethodDef name: FindWinner
MethodDef desc: finds the winning unit according to netin_type (clears acts too)
MethodDef proto SoUnit_ptr FindWinner(SoLayer* lay)
MethodDef name: Compute_Netin
MethodDef proto void Compute_Netin(SoLayer* lay)
MethodDef name: Compute_Act
MethodDef proto void Compute_Act(SoLayer* lay)
MethodDef name: Compute_AvgAct
MethodDef proto void Compute_AvgAct(SoLayer* lay)
MethodDef name: Compute_dWt
MethodDef proto void Compute_dWt(SoLayer* lay)
MethodDef name: Compute_Weights
MethodDef proto void Compute_Weights(SoLayer* lay)
MethodDef names [u'Compute_Act', u'Compute_AvgAct', u'Compute_Netin', u'Compute_Weights', u'Compute_dWt', u'FindMaxNetIn', u'FindMinNetIn', u'FindWinner']
########################################################################
TypeDef len: 11
TypeDef name:  SoSendCons
TypeDef type: class
TypeDef desc: group of self-organizing sending connections
TypeDef cats:, [u'So']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'SendCons']
########################################################################
TypeDef len: 13
TypeDef name:  ThreshLinSoUnitSpec
TypeDef type: class
TypeDef desc: threshold-linear self-org unit spec
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'SoUnitSpec']
MemberDef name: threshold
MemberDef type: float
########################################################################
TypeDef len: 7
TypeDef name:  SoLayerSpec_SPtr
TypeDef type: class
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
########################################################################
TypeDef len: 11
TypeDef name:  HebbConSpec
TypeDef type: class
TypeDef desc: simple hebbian learning
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'SoConSpec']
########################################################################
TypeDef len: 13
TypeDef name:  SoftMaxLayerSpec
TypeDef type: class
TypeDef desc: soft competitive learning layer spec: does a softmax on the units
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'SoLayerSpec']
MemberDef name: softmax_gain
MemberDef type: float
MemberDef desc: gain of the softmax function
########################################################################
TypeDef len: 13
TypeDef name:  SoNetwork
TypeDef type: class
TypeDef desc: network for self-organizing networks
TypeDef cats:, [u'So']
TypeDef opts:, [u'FILETYPE_Network', u'EXT_net', u'COMPRESS', u'DEF_NAME_ROOT_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'Network']
MethodDef name: Trial_Run
MethodDef desc: run one trial of So
MethodDef proto void Trial_Run()
MethodDef names [u'Trial_Run']
########################################################################
TypeDef len: 11
TypeDef name:  SoProject
TypeDef type: class
TypeDef desc: project for self-organizing networks
TypeDef cats:, [u'So']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase']
########################################################################
TypeDef len: 11
TypeDef name:  SoWizard
TypeDef type: class
TypeDef desc: self-organizing networks specific wizard for automating construction of simulation objects
TypeDef cats:, [u'So']
TypeDef opts:, [u'BUTROWS_2', u'EDIT_WIDTH_60', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taWizard', u'Wizard']
########################################################################
TypeDef len: 11
TypeDef name:  SomUnitSpec
TypeDef type: class
TypeDef desc: self-organizing feature maps: net input is distance, not raw netin
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'SoUnitSpec']
########################################################################
TypeDef len: 13
TypeDef name:  NeighborEl
TypeDef type: class
TypeDef desc: one element of a neighborhood function
TypeDef cats:, []
TypeDef opts:, [u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: off
MemberDef type: TwoDCoord
MemberDef desc: offset from &apos;winning&apos; unit
MemberDef name: act_val
MemberDef type: float
MemberDef desc: activation value for this unit
########################################################################
TypeDef len: 9
TypeDef name:  NeighborEl_List
TypeDef type: class
TypeDef desc: list of NeighborEl objects
TypeDef cats:, []
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
########################################################################
TypeDef len: 15
TypeDef name:  SomLayerSpec
TypeDef type: class
TypeDef desc: self-organizing map activates a neighborhood of elements
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'SoLayerSpec']
MemberDef name: neighborhood
MemberDef type: NeighborEl_List
MemberDef desc: neighborhood kernel function (determines activations around max unit)
MemberDef name: wrap
MemberDef type: bool
MemberDef desc: whether to wrap the neighborhood function around the output layer or not
MethodDef name: KernelEllipse
MethodDef desc: make a kernel in the form of an elipse
MethodDef proto void KernelEllipse(int half_width, int half_height, int ctr_x, int ctr_y)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Kernel']
MethodDef name: KernelRectangle
MethodDef desc: make a kernel in the form of a rectangle
MethodDef proto void KernelRectangle(int width, int height, int ctr_x, int ctr_y)
MethodDef opts [u'MENU_BUTTON']
MethodDef name: StepKernelActs
MethodDef desc: kernel activations are 1.0, others are 0
MethodDef proto void StepKernelActs(float val = 1.0)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Acts']
MethodDef name: LinearKernelActs
MethodDef desc: assign acts as a linear function of distance from center
MethodDef proto void LinearKernelActs(float scale = 1.0)
MethodDef opts [u'MENU_BUTTON']
MethodDef name: GaussianKernelActs
MethodDef desc: assign kernel acts as a Gaussian function of distance from center
MethodDef proto void GaussianKernelActs(float scale = 1.0, float sigma = 1.0)
MethodDef opts [u'MENU_BUTTON']
MethodDef name: WrapClip
MethodDef desc: does coordinate wrapping
MethodDef proto int WrapClip(int coord, int max_coord)
MethodDef names [u'GaussianKernelActs', u'KernelEllipse', u'KernelRectangle', u'LinearKernelActs', u'StepKernelActs', u'WrapClip']
########################################################################
TypeDef len: 11
TypeDef name:  ClConSpec
TypeDef type: class
TypeDef desc: competitive learning connection spec (uses normalized input activation)
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'SoConSpec']
########################################################################
TypeDef len: 11
TypeDef name:  SoftClConSpec
TypeDef type: class
TypeDef desc: soft competitive learning connection spec
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'SoConSpec']
########################################################################
TypeDef len: 11
TypeDef name:  ClLayerSpec
TypeDef type: class
TypeDef desc: competitive learning layer spec
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'SoLayerSpec']
########################################################################
TypeDef len: 13
TypeDef name:  SoftClUnitSpec
TypeDef type: class
TypeDef desc: soft competitive learning unit spec
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'SoUnitSpec']
MemberDef name: var
MemberDef type: float
MemberDef desc: variance of the Gaussian activation function
########################################################################
TypeDef len: 11
TypeDef name:  SoftClLayerSpec
TypeDef type: class
TypeDef desc: soft competitive learning layer spec: does a softmax on the units
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'SoLayerSpec']
########################################################################
TypeDef len: 15
TypeDef name:  ZshConSpec
TypeDef type: class
TypeDef desc: zero-sum-hebbian (subtractive normalization) learning
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'SoConSpec']
TypeDef children: [u'MaxInConSpec']
MemberDef name: soft_wt_bound
MemberDef type: bool
MemberDef desc: soft weight bounding *(1-wt) for inc, *wt for dec
########################################################################
TypeDef len: 13
TypeDef name:  MaxInConSpec
TypeDef type: class
TypeDef desc: approximation to MaxIn (Zsh + SoftCl)
TypeDef cats:, [u'So']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'SoConSpec', u'ZshConSpec']
MemberDef name: k_scl
MemberDef type: float
MemberDef desc: strength of the soft-competitive learning component
########################################################################
TypeDef len: 11
TypeDef name:  SoTrial
TypeDef type: class
TypeDef desc: one self-organizing trial step
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'TrialProcess']
########################################################################
TypeDef len: 11
TypeDef name:  V3SoProject
TypeDef type: class
TypeDef desc: self-organizing learning project
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase', u'V3ProjectBase']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraCon
TypeDef type: class
TypeDef desc: Leabra connection
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE']
TypeDef parents: [u'Connection']
TypeDef children: [u'TrialSynDepCon', u'CycleSynDepCon', u'CaiSynDepCon', u'FastWtCon']
MemberDef name: pdw
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: previous delta-weight change -- useful for viewing because current weight change (dwt) is typically reset to 0 when views are updated
MemberDef name: sravg
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: average of sender and receiver activation product over time, used for minus phase of ct leabra contrastive attractor learning
########################################################################
TypeDef len: 19
TypeDef name:  LeabraConSpec
TypeDef type: class
TypeDef desc: Leabra connection specs
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec']
TypeDef children: [u'LeabraBiasSpec', u'MarkerConSpec', u'TrialSynDepConSpec', u'CycleSynDepConSpec', u'CaiSynDepConSpec', u'FastWtConSpec', u'ActAvgHebbConSpec', u'LeabraLimPrecConSpec', u'LeabraCtExptConSpec', u'TDRewPredConSpec', u'PVConSpec', u'MatrixConSpec']
EnumDef name: LEABRA_CHL
EnumDef val: LEABRA_CHL
EnumDef: use the standard Leabra Contrastive Hebbian Learning rule: (s+r+) - (s-r-) (s=sender,r=recv +=plus phase, -=minus phase)
EnumDef name: CTLEABRA_CAL
EnumDef val: CTLEABRA_CAL
EnumDef: use the continuous-time Leabra Contrastive Attractor Learning rule: (s+r+) - &lt;s-r-&gt; (s=sender,r=recv +=plus phase, -=minus phase = average over all non-+ states indicated by &lt;&gt;)
EnumDef name: CTLEABRA_DCAL
EnumDef val: CTLEABRA_DCAL
EnumDef: use the continuous-time Leabra Delta-Contrastive Attractor Learning rule: (s+ - &lt;s-&gt;) - (r+ - &lt;r-&gt;) (s=sender,r=recv +=plus phase, -=minus phase = average over all non-+ states indicated by &lt;&gt;)
EnumDef name: NO_LRS
EnumDef val: NO_LRS
EnumDef: don&apos;t use a learning rate schedule
EnumDef name: EPOCH
EnumDef val: EPOCH
EnumDef: current epoch counter
EnumDef name: EXT_REW_STAT
EnumDef val: EXT_REW_STAT
EnumDef: avg_ext_rew value on network (computed over an &apos;epoch&apos; of training): value is * 100 (0..100)
EnumDef name: EXT_REW_AVG
EnumDef val: EXT_REW_AVG
EnumDef: uses average reward computed by ExtRew layer (if present): value is units[0].act_avg (avg_rew) * 100 (0..100)
EnumDef names: [u'LRSValue', u'LearnRule']
MemberDef name: learn_rule
MemberDef type: LeabraConSpec::LearnRule
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: the learning rule, set by the overall network parameter and copied here -- determines what type of learning to perform
MemberDef name: inhib
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats [u'Activation']
MemberDef desc: makes the connection inhibitory (to g_i instead of net)
MemberDef name: wt_scale
MemberDef type: WtScaleSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler
MemberDef name: wt_scale_init
MemberDef type: WtScaleSpecInit
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: initial values of wt_scale parameters, set during InitWeights -- useful for rel_net_adapt and abs_net_adapt (on LayerSpec)
MemberDef name: lrate
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: [0.01 for std leabra, .04-.08 for CtLeabra] learning rate -- how fast do the weights change per experience
MemberDef name: cur_lrate
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_INHERIT', u'SHOW']
MemberDef cats [u'Learning']
MemberDef desc: current actual learning rate = lrate * lrate_sched current value (* 1 if no lrate_sched)
MemberDef name: lrs_value
MemberDef type: LeabraConSpec::LRSValue
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: what value to drive the learning rate schedule with (Important: affects values entered in start_ctr fields of schedule!)
MemberDef name: lrate_sched
MemberDef type: Schedule
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: schedule of learning rate over training epochs or as a function of performance, as determined by lrs_value (NOTE: these factors multiply lrate to give the cur_lrate value)
MemberDef name: wt_sig
MemberDef type: WtSigSpec
MemberDef opts [u'CONDSHOW_ON_learn_rule:LEABRA_CHL']
MemberDef cats [u'Learning']
MemberDef desc: sigmoidal weight function for contrast enhancement: high gain makes weights more binary &amp; discriminative
MemberDef name: lmix
MemberDef type: LearnMixSpec
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: mixture of hebbian &amp; err-driven learning (note: for CTLEABRA_CAL default is for 0 hebbian learning)
MemberDef name: savg_cor
MemberDef type: SAvgCorSpec
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: for Hebbian and netinput computation: correction for sending average act levels (i.e., renormalization); also norm_con_n for normalizing netinput computation
MemberDef name: dwt_norm
MemberDef type: LeabraDwtNorm
MemberDef desc: renormalize weight changes to compensate for overal mean changes (zero sum weight changes)
MemberDef name: rel_net_adapt
MemberDef type: AdaptRelNetinSpec
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: adapt relative netinput values based on targets for fm_input, fm_output, and lateral projections -- not used by default (call Compute_RelNetinAdapt to activate; requires Compute_RelNetin and Compute_AvgRelNetin for underlying data)
MethodDef name: GetWtFmLin
MethodDef desc: get contrast-enhanced weight from linear weight value
MethodDef proto float GetWtFmLin(float lin_wt)
MethodDef opts [u'CAT_Learning']
MethodDef name: GetLinFmWt
MethodDef desc: get linear weight value from contrast-enhanced sigmoidal weight value
MethodDef proto float GetLinFmWt(float sig_wt)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Init_Weights_Post
MethodDef desc: hook for setting other weight-like values after initializing the weight value
MethodDef proto void C_Init_Weights_Post(RecvCons* na, Connection* na, Unit* na, Unit* na)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Send_Inhib
MethodDef desc: sender-based inhibitiory net input computation
MethodDef proto void C_Send_Inhib(LeabraSendCons* cg, LeabraCon* cn, LeabraUnit* ru, float su_act_eff)
MethodDef opts [u'CAT_Activation']
MethodDef name: C_Send_NetinDelta
MethodDef desc: sender-based delta net input computation (send_delta mode only)
MethodDef proto void C_Send_NetinDelta(LeabraSendCons* cg, LeabraCon* cn, LeabraUnit* ru, float su_act_delta_eff)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinDelta
MethodDef desc: sender-based delta net input computation (send_delta mode only)
MethodDef proto void Send_NetinDelta(LeabraSendCons* cg, float su_act_delta)
MethodDef opts [u'CAT_Activation']
MethodDef name: C_Send_InhibDelta
MethodDef desc: sender-based delta inhibitiory net input computation (send_delta mode only)
MethodDef proto void C_Send_InhibDelta(LeabraSendCons* cg, LeabraCon* cn, LeabraUnit* ru, float su_act_delta_eff)
MethodDef opts [u'CAT_Activation']
MethodDef name: C_Send_ClampNet
MethodDef desc: sender-based net input computation for clamp net
MethodDef proto void C_Send_ClampNet(LeabraSendCons* cg, LeabraCon* cn, LeabraUnit* ru, float su_act_eff)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_ClampNet
MethodDef desc: sender-based net input computation for clamp net
MethodDef proto void Send_ClampNet(LeabraSendCons* cg, float su_act)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SAvgCor
MethodDef desc: compute hebb correction scaling term for sending average act (cg-&gt;savg_cor) based on layer target activity percent
MethodDef proto void Compute_SAvgCor(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Hebb
MethodDef desc: compute Hebbian associative learning
MethodDef proto float C_Compute_Hebb(LeabraCon* cn, LeabraRecvCons* cg, float lin_wt, float ru_act, float su_act)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Err_LeabraCHL
MethodDef desc: compute generec error term, sigmoid case
MethodDef proto float C_Compute_Err_LeabraCHL(LeabraCon* cn, float lin_wt, float ru_act_p, float ru_act_m, float su_act_p, float su_act_m)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_LeabraCHL
MethodDef desc: Leabra/CHL weight changes
MethodDef proto void Compute_dWt_LeabraCHL(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWtMean
MethodDef desc: compute cg-&gt;dwt_mean -- mean of all weight changes, for dwt_norm
MethodDef proto void Compute_dWtMean(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_ActReg_LeabraCHL
MethodDef desc: compute dwt for activation regulation
MethodDef proto void C_Compute_ActReg_LeabraCHL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Weights_LeabraCHL
MethodDef desc: update weights, if activation regulation is NOT in effect
MethodDef proto void C_Compute_Weights_LeabraCHL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Weights_Norm_LeabraCHL
MethodDef desc: update weights, if dwt_norm.on and activation regulation is NOT in effect
MethodDef proto void C_Compute_Weights_Norm_LeabraCHL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus, float dwnorm)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_WeightsActReg_LeabraCHL
MethodDef desc: update weights, if activation regulation is in effect
MethodDef proto void C_Compute_WeightsActReg_LeabraCHL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_WeightsActReg_Norm_LeabraCHL
MethodDef desc: update weights, if dwt_norm.on and activation regulation is in effect
MethodDef proto void C_Compute_WeightsActReg_Norm_LeabraCHL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus, float dwnorm)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights_LeabraCHL
MethodDef desc: overall compute weights for LeabraCHL learning rule
MethodDef proto void Compute_Weights_LeabraCHL(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_SRAvg
MethodDef proto void C_Compute_SRAvg(LeabraCon* cn, LeabraUnit* ru, LeabraUnit* su)
MethodDef name: Compute_SRAvg
MethodDef desc: accumulate sender-receiver activation product average, using given weighting factor
MethodDef proto void Compute_SRAvg(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef name: Init_SRAvg
MethodDef desc: initialize sender-receiver activation product average
MethodDef proto void Init_SRAvg(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef name: C_Compute_Err_CtLeabraCAL
MethodDef desc: compute contrastive attractor learning (CAL)
MethodDef proto float C_Compute_Err_CtLeabraCAL(LeabraCon* cn, float ru_act_p, float su_act_p, float avg_nrm)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_dWt_NoHebb
MethodDef desc: no hebbian version of updating weights
MethodDef proto void C_Compute_dWt_NoHebb(LeabraCon* cn, LeabraUnit* ru, float err)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_CtLeabraCAL
MethodDef desc: CtLeabra/CAL weight changes
MethodDef proto void Compute_dWt_CtLeabraCAL(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_ActReg_CtLeabraCAL
MethodDef desc: compute dwt for activation regulation
MethodDef proto void C_Compute_ActReg_CtLeabraCAL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Weights_CtLeabraCAL
MethodDef desc: update weights, if activation regulation is NOT in effect
MethodDef proto void C_Compute_Weights_CtLeabraCAL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Weights_Norm_CtLeabraCAL
MethodDef desc: update weights, if dwt_norm.on and activation regulation is NOT in effect
MethodDef proto void C_Compute_Weights_Norm_CtLeabraCAL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus, float dwnorm)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_WeightsActReg_CtLeabraCAL
MethodDef desc: update weights, if activation regulation is in effect
MethodDef proto void C_Compute_WeightsActReg_CtLeabraCAL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_WeightsActReg_Norm_CtLeabraCAL
MethodDef desc: update weights, if dwt_norm.on and activation regulation is in effect
MethodDef proto void C_Compute_WeightsActReg_Norm_CtLeabraCAL(LeabraCon* cn, LeabraRecvCons* cg, LeabraUnit* ru, LeabraUnit* su, LeabraUnitSpec* rus, float dwnorm)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights_CtLeabraCAL
MethodDef desc: overall compute weights for CtLeabraCAL learning rule
MethodDef proto void Compute_Weights_CtLeabraCAL(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: C_Compute_Err_CtLeabraDCAL
MethodDef desc: compute delta-contrastive attractor learning (DCAL)
MethodDef proto float C_Compute_Err_CtLeabraDCAL(LeabraCon* cn, float ru_act_p, float su_act_p, float ru_avg, float su_avg, float avg_nrm)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_CtLeabraDCAL
MethodDef desc: CtLeabra/DCAL weight changes
MethodDef proto void Compute_dWt_CtLeabraDCAL(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: B_Compute_dWt_LeabraCHL
MethodDef desc: compute bias weight change for netin model of bias weight
MethodDef proto void B_Compute_dWt_LeabraCHL(LeabraCon* cn, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: B_Compute_SRAvg
MethodDef desc: compute bias weight sender-receiver average (actually just receiver)
MethodDef proto void B_Compute_SRAvg(LeabraCon* cn, LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: B_Compute_dWt_CtLeabraCAL
MethodDef desc: compute bias weight change for netin model of bias weight
MethodDef proto void B_Compute_dWt_CtLeabraCAL(LeabraCon* cn, LeabraUnit* ru, LeabraLayer* rlay)
MethodDef opts [u'CAT_Learning']
MethodDef name: B_Compute_Weights
MethodDef desc: update weights for bias connection
MethodDef proto void B_Compute_Weights(LeabraCon* cn, LeabraUnit* ru, LeabraUnitSpec* rus)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_CycSynDep
MethodDef desc: compute cycle-level synaptic depression (must be defined by appropriate subclass) -- called at end of each cycle of computation if net_misc.cyc_syn_dep is on.
MethodDef proto void Compute_CycSynDep(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef opts [u'CAT_Activation']
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate based on schedule given epoch (or error value)
MethodDef proto void SetCurLrate(LeabraNetwork* net, int epoch)
MethodDef opts [u'CAT_Learning']
MethodDef name: SetLearnRule
MethodDef desc: set current learning rule from the network
MethodDef proto void SetLearnRule(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: CreateWtSigFun
MethodDef desc: create the wt_sig_fun and wt_sig_fun_inv
MethodDef proto void CreateWtSigFun()
MethodDef opts [u'CAT_Learning']
MethodDef name: Defaults
MethodDef desc: restores default parameter settings: warning -- you will lose any unique parameters you might have set!
MethodDef proto void Defaults()
MethodDef opts [u'BUTTON', u'CONFIRM', u'CAT_ObjectMgmt']
MethodDef name: GraphWtSigFun
MethodDef desc: graph the sigmoidal weight contrast enhancement function (NULL = new data table)
MethodDef proto void GraphWtSigFun(DataTable* graph_data = __null)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'B_Compute_SRAvg', u'B_Compute_Weights', u'B_Compute_dWt_CtLeabraCAL', u'B_Compute_dWt_LeabraCHL', u'C_Compute_ActReg_CtLeabraCAL', u'C_Compute_ActReg_LeabraCHL', u'C_Compute_Err_CtLeabraCAL', u'C_Compute_Err_CtLeabraDCAL', u'C_Compute_Err_LeabraCHL', u'C_Compute_Hebb', u'C_Compute_SRAvg', u'C_Compute_WeightsActReg_CtLeabraCAL', u'C_Compute_WeightsActReg_LeabraCHL', u'C_Compute_WeightsActReg_Norm_CtLeabraCAL', u'C_Compute_WeightsActReg_Norm_LeabraCHL', u'C_Compute_Weights_CtLeabraCAL', u'C_Compute_Weights_LeabraCHL', u'C_Compute_Weights_Norm_CtLeabraCAL', u'C_Compute_Weights_Norm_LeabraCHL', u'C_Compute_dWt_NoHebb', u'C_Init_Weights_Post', u'C_Send_ClampNet', u'C_Send_Inhib', u'C_Send_InhibDelta', u'C_Send_NetinDelta', u'Compute_CycSynDep', u'Compute_SAvgCor', u'Compute_SRAvg', u'Compute_Weights_CtLeabraCAL', u'Compute_Weights_LeabraCHL', u'Compute_dWtMean', u'Compute_dWt_CtLeabraCAL', u'Compute_dWt_CtLeabraDCAL', u'Compute_dWt_LeabraCHL', u'CreateWtSigFun', u'Defaults', u'GetLinFmWt', u'GetWtFmLin', u'GraphWtSigFun', u'Init_SRAvg', u'Send_ClampNet', u'Send_NetinDelta', u'SetCurLrate', u'SetLearnRule']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraBiasSpec
TypeDef type: class
TypeDef desc: Leabra bias-weight connection specs (bias wts are a little bit special)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
TypeDef children: [u'LeabraNegBiasSpec', u'MatrixBiasSpec']
MemberDef name: dwt_thresh
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats [u'Learning']
MemberDef desc: don&apos;t change if dwt &lt; thresh, prevents buildup of small changes
########################################################################
TypeDef len: 15
TypeDef name:  LeabraRecvCons
TypeDef type: class
TypeDef desc: Leabra receiving connection group
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'RecvCons']
MemberDef name: scale_eff
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: effective scale parameter for netin
MemberDef name: savg_cor
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Learning']
MemberDef desc: savg correction factor for hebbian learning
MemberDef name: net
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: netinput to this con_group: only computed for special statistics such as RelNetin
MemberDef name: dwt_mean
MemberDef type: float
MemberDef desc: mean delta-weight changes (only computed for dwt_norm.on)
MethodDef name: C_Init_Weights_Post
MethodDef desc: hook for setting other weight-like values after initializing the weight value
MethodDef proto void C_Init_Weights_Post(Connection* cn, Unit* ru, Unit* su)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SRAvg
MethodDef desc: compute sending-receiving activation product averages
MethodDef proto void Compute_SRAvg(LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_SRAvg
MethodDef desc: initialize sending-receiving activation product averages
MethodDef proto void Init_SRAvg(LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_LeabraCHL
MethodDef desc: compute weight changes: Leabra CHL version
MethodDef proto void Compute_dWt_LeabraCHL(LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_CtLeabraCAL
MethodDef desc: compute weight changes: CtLeabra CAL version
MethodDef proto void Compute_dWt_CtLeabraCAL(LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_CtLeabraDCAL
MethodDef desc: compute weight changes: CtLeabra DCAL version
MethodDef proto void Compute_dWt_CtLeabraDCAL(LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights_LeabraCHL
MethodDef desc: compute weights: Leabra CHL version
MethodDef proto void Compute_Weights_LeabraCHL(LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights_CtLeabraCAL
MethodDef desc: compute weights: CtLeabra CAL version
MethodDef proto void Compute_Weights_CtLeabraCAL(LeabraUnit* ru)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_CycSynDep
MethodDef desc: compute cycle-level synaptic depression (must be defined by appropriate subclass) -- called at end of each cycle of computation if net_misc.cyc_syn_dep is on.
MethodDef proto void Compute_CycSynDep(LeabraUnit* ru)
MethodDef opts [u'CAT_Activation']
MethodDef names [u'C_Init_Weights_Post', u'Compute_CycSynDep', u'Compute_SRAvg', u'Compute_Weights_CtLeabraCAL', u'Compute_Weights_LeabraCHL', u'Compute_dWt_CtLeabraCAL', u'Compute_dWt_CtLeabraDCAL', u'Compute_dWt_LeabraCHL', u'Init_SRAvg']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraSendCons
TypeDef type: class
TypeDef desc: Leabra sending connection group
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'SendCons']
MethodDef name: Send_ClampNet
MethodDef desc: send input from clamped layers
MethodDef proto void Send_ClampNet(float su_act)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinDelta
MethodDef desc: send delta-netin
MethodDef proto void Send_NetinDelta(float su_act_delta)
MethodDef opts [u'CAT_Activation']
MethodDef names [u'Send_ClampNet', u'Send_NetinDelta']
########################################################################
TypeDef len: 19
TypeDef name:  LeabraUnitSpec
TypeDef type: class
TypeDef desc: Leabra unit specifications, point-neuron approximation
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec']
TypeDef children: [u'LeabraLinUnitSpec', u'DaModUnitSpec', u'LeabraTdUnitSpec', u'MatrixUnitSpec']
EnumDef name: NOISY_XX1
EnumDef val: NOISY_XX1
EnumDef: x over x plus 1 convolved with Gaussian noise (noise is nvar)
EnumDef name: XX1
EnumDef val: XX1
EnumDef: x over x plus 1, hard threshold, no noise convolution
EnumDef name: NOISY_LINEAR
EnumDef val: NOISY_LINEAR
EnumDef: simple linear output function (still thesholded) convolved with Gaussian noise (noise is nvar)
EnumDef name: LINEAR
EnumDef val: LINEAR
EnumDef: simple linear output function (still thesholded)
EnumDef name: DEPRESS
EnumDef val: DEPRESS
EnumDef: depressing synapses activation function (rate coded)
EnumDef name: SPIKE
EnumDef val: SPIKE
EnumDef: discrete spiking activations (spike when &gt; thr)
EnumDef name: NO_NOISE
EnumDef val: NO_NOISE
EnumDef: no noise added to processing
EnumDef name: VM_NOISE
EnumDef val: VM_NOISE
EnumDef: noise in the value of v_m (membrane potential)
EnumDef name: NETIN_NOISE
EnumDef val: NETIN_NOISE
EnumDef: noise in the net input (g_e)
EnumDef name: ACT_NOISE
EnumDef val: ACT_NOISE
EnumDef: noise in the activations
EnumDef names: [u'ActFun', u'NoiseType']
MemberDef name: act_fun
MemberDef type: LeabraUnitSpec::ActFun
MemberDef opts [u'APPLY_IMMED']
MemberDef cats [u'Activation']
MemberDef desc: activation function to use
MemberDef name: act
MemberDef type: ActFunSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: activation function specs
MemberDef name: spike
MemberDef type: SpikeFunSpec
MemberDef opts [u'CONDEDIT_ON_act_fun:SPIKE']
MemberDef cats [u'Activation']
MemberDef desc: spiking function specs (only for act_fun = SPIKE)
MemberDef name: depress
MemberDef type: DepressSpec
MemberDef opts [u'CONDEDIT_ON_act_fun:DEPRESS']
MemberDef cats [u'Activation']
MemberDef desc: depressing synapses activation function specs, note that act_range deterimines range of spk_amp spiking amplitude, max should be &gt; 1
MemberDef name: syn_delay
MemberDef type: SynDelaySpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: synaptic delay -- if active, activation sent to other units is delayed by a given amount
MemberDef name: opt_thresh
MemberDef type: OptThreshSpec
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: optimization thresholds for speeding up processing when units are basically inactive
MemberDef name: clamp_range
MemberDef type: MinMaxRange
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: range of clamped activation values (min, max, 0, .95 std), don&apos;t clamp to 1 because acts can&apos;t reach, so .95 instead
MemberDef name: vm_range
MemberDef type: MinMaxRange
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: membrane potential range (min, max, 0-1 for normalized, -90-50 for bio-based)
MemberDef name: v_m_init
MemberDef type: Random
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: what to initialize the membrane potential to (mean = .15, var = 0 std)
MemberDef name: dt
MemberDef type: DtSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: time constants (rate of updating): membrane potential (vm) and net input (net)
MemberDef name: g_bar
MemberDef type: LeabraChannels
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: [Defaults: 1, .1, 1, .1, .5] maximal conductances for channels
MemberDef name: e_rev
MemberDef type: LeabraChannels
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: [Defaults: 1, .15, .15, 1, 0] reversal potentials for each channel
MemberDef name: hyst
MemberDef type: VChanSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: [Defaults: .05, .8, .7, .1] hysteresis (excitatory) v-gated chan (Ca2+, NMDA)
MemberDef name: acc
MemberDef type: VChanSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: [Defaults: .01, .5, .1, .1] accomodation (inhibitory) v-gated chan (K+)
MemberDef name: da_mod
MemberDef type: DaModSpec
MemberDef desc: da modulation of activations (for da-based learning, and other effects)
MemberDef name: act_reg
MemberDef type: ActRegSpec
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: activity regulation via global scaling of weight values
MemberDef name: maxda
MemberDef type: MaxDaSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: maximum change in activation (da) computation -- regulates settling
MemberDef name: noise_type
MemberDef type: LeabraUnitSpec::NoiseType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats [u'Activation']
MemberDef desc: where to add random noise in the processing (if at all)
MemberDef name: noise
MemberDef type: Random
MemberDef opts [u'CONDEDIT_OFF_noise_type:NO_NOISE']
MemberDef cats [u'Activation']
MemberDef desc: distribution parameters for random added noise
MemberDef name: noise_sched
MemberDef type: Schedule
MemberDef opts [u'CONDEDIT_OFF_noise_type:NO_NOISE']
MemberDef cats [u'Activation']
MemberDef desc: schedule of noise variance over settling cycles
MethodDef name: Init_ActAvg
MethodDef desc: initialize average activation values, used to control learning
MethodDef proto void Init_ActAvg(LeabraUnit* u)
MethodDef opts [u'CAT_Activation']
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate based on epoch
MethodDef proto void SetCurLrate(LeabraNetwork* net, int epoch)
MethodDef opts [u'CAT_Learning']
MethodDef name: SetLearnRule
MethodDef desc: set current learning rule from the network
MethodDef proto void SetLearnRule(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_NetinScale
MethodDef desc: compute net input scaling values and input from hard-clamped inputs
MethodDef proto void Compute_NetinScale(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinRescale
MethodDef desc: rescale netinput scales by given amount
MethodDef proto void Compute_NetinRescale(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net, float new_scale)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_ClampNet
MethodDef desc: init clam net value prior to sending
MethodDef proto void Init_ClampNet(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_ClampNet
MethodDef desc: compute net input from hard-clamped inputs (sender based)
MethodDef proto void Send_ClampNet(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinDelta
MethodDef desc: send netinput; sender based and only when act changes above a threshold
MethodDef proto void Send_NetinDelta(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Netin_Spike
MethodDef desc: compute actual netin conductance value for spiking units by integrating over spike
MethodDef proto void Compute_Netin_Spike(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinAvg
MethodDef desc: compute netin average
MethodDef proto void Compute_NetinAvg(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ApplyInhib
MethodDef desc: apply computed (kwta) inhibition value to unit inhibitory conductance
MethodDef proto void Compute_ApplyInhib(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net, float inhib_val)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_InhibAvg
MethodDef desc: compute inhib netin average
MethodDef proto void Compute_InhibAvg(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_HardClamp
MethodDef desc: force units to external values provided by environment: also optimizes settling by only computing netinput once
MethodDef proto void Compute_HardClamp(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_HardClampNoClip
MethodDef desc: hard-clamp units without clipping values to clamp_range (use for second plus phase clamping to settled values)
MethodDef proto void Compute_HardClampNoClip(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SoftClamp
MethodDef desc: soft-clamps unit, returns true if unit is not above .5
MethodDef proto bool Compute_SoftClamp(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThresh
MethodDef desc: compute inhibitory value that would place unit directly at threshold
MethodDef proto float Compute_IThresh(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThreshStd
MethodDef desc: compute inhibitory value that would place unit directly at threshold, using all currents EXCEPT bias.wt
MethodDef proto float Compute_IThreshStd(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThreshNoA
MethodDef desc: compute inhibitory value that would place unit directly at threshold, excluding gc.a current
MethodDef proto float Compute_IThreshNoA(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThreshNoH
MethodDef desc: compute inhibitory value that would place unit directly at threshold, excluding gc.a current
MethodDef proto float Compute_IThreshNoH(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThreshNoAH
MethodDef desc: compute inhibitory value that would place unit directly at threshold, excluding any gc.a, gc.h currents
MethodDef proto float Compute_IThreshNoAH(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThreshAll
MethodDef desc: compute inhibitory value that would place unit directly at threshold, using all currents INCLUDING bias.wt
MethodDef proto float Compute_IThreshAll(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_MaxDa
MethodDef desc: compute the maximum delta-activation (change in activation); used to control settling
MethodDef proto void Compute_MaxDa(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_DaMod_PlusCont
MethodDef desc: compute da modulation as plus-phase continuous gc.h/.a
MethodDef proto void Compute_DaMod_PlusCont(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Conduct
MethodDef desc: compute input conductance values in the gc variables
MethodDef proto void Compute_Conduct(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Vm
MethodDef desc: compute the membrante potential from input conductances
MethodDef proto void Compute_Vm(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActFmVm
MethodDef desc: compute the activation from membrane potential
MethodDef proto void Compute_ActFmVm(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SelfReg_Cycle
MethodDef desc: compute self-regulatory currents (hysteresis, accommodation) -- at the cycle time scale
MethodDef proto void Compute_SelfReg_Cycle(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SelfReg_Trial
MethodDef desc: compute self-regulatory currents (hysteresis, accommodation) -- at the trial time scale
MethodDef proto void Compute_SelfReg_Trial(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_CycSynDep
MethodDef desc: compute cycle-level synaptic depression (must be defined by appropriate subclass) -- called at end of each cycle of computation if net_misc.cyc_syn_dep is on.
MethodDef proto void Compute_CycSynDep(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PhaseInit
MethodDef desc: initialize external input flags based on phase
MethodDef proto void PhaseInit(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayPhase
MethodDef desc: decay activation states towards initial values: at phase-level boundary
MethodDef proto void DecayPhase(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net, float decay)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayEvent
MethodDef desc: decay activation states towards initial values: at event-level boundary
MethodDef proto void DecayEvent(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net, float decay)
MethodDef opts [u'CAT_Activation']
MethodDef name: ExtToComp
MethodDef desc: change external inputs to comparisons (remove input)
MethodDef proto void ExtToComp(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: TargExtToComp
MethodDef desc: change target &amp; external inputs to comparisons (remove targ &amp; input)
MethodDef proto void TargExtToComp(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActTimeAvg
MethodDef desc: compute time-averaged activation of unit (using act.avg_dt time constant), typically done at end of settling in PostSettle function
MethodDef proto void Compute_ActTimeAvg(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_DaMod_PlusPost
MethodDef desc: post-plus dav modulation
MethodDef proto void Compute_DaMod_PlusPost(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle
MethodDef desc: set stuff after settling is over (act_m, act_p, etc)
MethodDef proto void PostSettle(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SRAvg
MethodDef desc: compute sending-receiving activation product averages (CtLeabraCAL)
MethodDef proto void Compute_SRAvg(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_SRAvg
MethodDef desc: reset the sender-receiver coproduct average -- needed when no learning happening
MethodDef proto void Init_SRAvg(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_impl
MethodDef desc: actually do wt change: learn!
MethodDef proto void Compute_dWt_impl(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: EncodeState
MethodDef desc: encode current state information after end of current trial (hook for time-based learning)
MethodDef proto void EncodeState(LeabraUnit* na, LeabraLayer* na, LeabraNetwork* na)
MethodDef opts [u'CAT_Learning']
MethodDef name: CreateNXX1Fun
MethodDef desc: create convolved gaussian and x/x+1
MethodDef proto void CreateNXX1Fun()
MethodDef opts [u'CAT_Activation']
MethodDef name: Defaults
MethodDef desc: restores default parameter settings: warning -- you will lose any unique parameters you might have set!
MethodDef proto void Defaults()
MethodDef opts [u'BUTTON', u'CONFIRM', u'CAT_ObjectMgmt']
MethodDef name: GraphVmFun
MethodDef desc: graph membrane potential (v_m) as a function of excitatory net input (net) for given inhib conductance (g_i) (NULL = new graph data)
MethodDef proto void GraphVmFun(DataTable* graph_data, float g_i = .5, float min = 0.0, float max = 1.0, float incr = .01)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef name: GraphActFmVmFun
MethodDef desc: graph the activation function as a function of membrane potential (v_m) (NULL = new graph data)
MethodDef proto void GraphActFmVmFun(DataTable* graph_data, float min = .15, float max = .50, float incr = .001)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef name: GraphActFmNetFun
MethodDef desc: graph the activation function as a function of net input (projected through membrane potential) (NULL = new graph data)
MethodDef proto void GraphActFmNetFun(DataTable* graph_data, float g_i = .5, float min = 0.0, float max = 1.0, float incr = .001)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef name: GraphSpikeAlphaFun
MethodDef desc: graph the spike alpha function for conductance integration over time window given in spike parameters
MethodDef proto void GraphSpikeAlphaFun(DataTable* graph_data)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'Compute_ActFmVm', u'Compute_ActTimeAvg', u'Compute_ApplyInhib', u'Compute_Conduct', u'Compute_CycSynDep', u'Compute_DaMod_PlusCont', u'Compute_DaMod_PlusPost', u'Compute_HardClamp', u'Compute_HardClampNoClip', u'Compute_IThresh', u'Compute_IThreshAll', u'Compute_IThreshNoA', u'Compute_IThreshNoAH', u'Compute_IThreshNoH', u'Compute_IThreshStd', u'Compute_InhibAvg', u'Compute_MaxDa', u'Compute_NetinAvg', u'Compute_NetinRescale', u'Compute_NetinScale', u'Compute_Netin_Spike', u'Compute_SRAvg', u'Compute_SelfReg_Cycle', u'Compute_SelfReg_Trial', u'Compute_SoftClamp', u'Compute_Vm', u'Compute_dWt_impl', u'CreateNXX1Fun', u'DecayEvent', u'DecayPhase', u'Defaults', u'EncodeState', u'ExtToComp', u'GraphActFmNetFun', u'GraphActFmVmFun', u'GraphSpikeAlphaFun', u'GraphVmFun', u'Init_ActAvg', u'Init_ClampNet', u'Init_SRAvg', u'PhaseInit', u'PostSettle', u'Send_ClampNet', u'Send_NetinDelta', u'SetCurLrate', u'SetLearnRule', u'TargExtToComp']
########################################################################
TypeDef len: 17
TypeDef name:  LeabraUnit
TypeDef type: class
TypeDef desc: Leabra unit, point-neuron approximation
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'STEM_BASE', u'DMEM_SHARE_SETS_5', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Unit']
TypeDef children: [u'DaModUnit', u'LeabraTdUnit']
MemberDef name: act_eq
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: rate-code equivalent activity value (time-averaged spikes or just act)
MemberDef name: act_avg
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: average activation over long time intervals (dt = act.avg_dt)
MemberDef name: act_m
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: minus_phase activation, set after settling, used for learning
MemberDef name: act_p
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: plus_phase activation, set after settling, used for learning
MemberDef name: act_dif
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: difference between plus and minus phase acts, gives unit err contribution
MemberDef name: act_m2
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: second minus_phase activation (e.g., nothing phase), set after settling, used for learning
MemberDef name: act_p2
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: second plus_phase activation, set after settling, used for learning
MemberDef name: act_dif2
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: difference between second set of phases, where relevant (e.g., act_p - act_m2 for MINUS_PLUS_NOTHING, or act_p2 - act_p for MINUS_PLUS_PLUS)
MemberDef name: da
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: delta activation: change in act from one cycle to next, used to stop settling
MemberDef name: vcb
MemberDef type: VChanBasis
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: voltage-gated channel basis variables
MemberDef name: gc
MemberDef type: LeabraUnitChans
MemberDef opts [u'DMEM_SHARE_SET_1', u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: current unit channel conductances
MemberDef name: I_net
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: net current produced by all channels
MemberDef name: v_m
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: membrane potential
MemberDef name: dav
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: dopamine value (da is delta activation) which modulates activations (e.g., via accom and hyst currents) to then drive learning
MemberDef name: maint_h
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: maintained hysteresis current value (e.g., for PFC units)
MemberDef name: in_subgp
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats [u'Structure']
MemberDef desc: determine if unit is in a subgroup
MemberDef name: clmp_net
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT', u'DMEM_SHARE_SET_4']
MemberDef cats [u'Activation']
MemberDef desc: hard-clamp net input (no need to recompute)
MemberDef name: net_scale
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: total netinput scaling basis
MemberDef name: bias_scale
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: bias weight scaling factor
MemberDef name: prv_net
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: previous net input (for time averaging)
MemberDef name: prv_g_i
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: previous inhibitory conductance value (for time averaging)
MemberDef name: act_sent
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: last activation value sent (only send when diff is over threshold)
MemberDef name: net_raw
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: raw net input received from sending units (increments the deltas in send_delta)
MemberDef name: net_delta
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT', u'DMEM_SHARE_SET_3']
MemberDef cats [u'Activation']
MemberDef desc: change in netinput received from other units (send_delta mode only)
MemberDef name: g_i_raw
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: raw inhib net input received from sending units (increments the deltas in send_delta)
MemberDef name: g_i_delta
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE', u'EXPERT', u'DMEM_SHARE_SET_3']
MemberDef cats [u'Activation']
MemberDef desc: change in inhibitory netinput received from other units (send_delta mode only)
MemberDef name: i_thr
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: inhibitory threshold value for computing kWTA
MemberDef name: spk_amp
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: amplitude of spiking output (for depressing synapse activation function)
MemberDef name: misc_1
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: miscellaneous variable for other algorithms that need it
MemberDef name: misc_2
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: miscellaneous variable for other algorithms that need it
MemberDef name: misc_3
MemberDef type: float
MemberDef opts [u'NO_VIEW', u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: miscellaneous variable for other algorithms that need it
MemberDef name: act_buf
MemberDef type: float_CircBuffer
MemberDef opts [u'NO_VIEW', u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: buffer of activation states for synaptic delay computation
MemberDef name: spike_buf
MemberDef type: float_CircBuffer
MemberDef opts [u'NO_VIEW', u'NO_SAVE']
MemberDef cats [u'Activation']
MemberDef desc: buffer of net input from spikes for synaptic integration over discrete spikes
MethodDef name: AddToActBuf
MethodDef desc: add current activation to act buf if synaptic delay is on
MethodDef proto void AddToActBuf(SynDelaySpec&amp; sds)
MethodDef name: own_lay
MethodDef proto LeabraLayer_ptr own_lay()
MethodDef name: Init_ActAvg
MethodDef desc: initialize average activation
MethodDef proto void Init_ActAvg()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinScale
MethodDef desc: compute net input scaling values and input from hard-clamped inputs
MethodDef proto void Compute_NetinScale(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinRescale
MethodDef desc: rescale netinput scales by given amount
MethodDef proto void Compute_NetinRescale(LeabraLayer* lay, LeabraNetwork* net, float new_scale)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_ClampNet
MethodDef desc: init clam net value prior to sending
MethodDef proto void Init_ClampNet(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_ClampNet
MethodDef desc: compute net input from hard-clamped inputs (sender based)
MethodDef proto void Send_ClampNet(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinDelta
MethodDef desc: send netinput; sender based and only when act changes above a threshold
MethodDef proto void Send_NetinDelta(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinAvg
MethodDef desc: compute netin average
MethodDef proto void Compute_NetinAvg(LeabraLayer* lay, LeabraInhib* athr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ApplyInhib
MethodDef desc: apply computed inhibitory value (kwta) to unit inhibitory conductance
MethodDef proto void Compute_ApplyInhib(LeabraLayer* lay, LeabraInhib* athr, LeabraNetwork* net, float inhib_val)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_InhibAvg
MethodDef desc: compute inhib netin average
MethodDef proto void Compute_InhibAvg(LeabraLayer* lay, LeabraInhib* athr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_HardClamp
MethodDef desc: force units to external values provided by environment: also optimizes settling by only computing netinput once
MethodDef proto void Compute_HardClamp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_HardClampNoClip
MethodDef desc: hard-clamp units without clipping values to clamp_range (use for second plus phase clamping to settled values)
MethodDef proto void Compute_HardClampNoClip(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SoftClamp
MethodDef desc: soft-clamps unit, returns true if unit is not above .5
MethodDef proto bool Compute_SoftClamp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThresh
MethodDef desc: compute inhibitory value that would place unit directly at threshold
MethodDef proto float Compute_IThresh(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_IThreshNoAH
MethodDef desc: compute inhibitory value that would place unit directly at threshold, excluding any gc.a, gc.h currents
MethodDef proto float Compute_IThreshNoAH(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_MaxDa
MethodDef desc: compute the maximum delta-activation (change in activation); used to control settling
MethodDef proto void Compute_MaxDa(LeabraLayer* lay, LeabraInhib* athr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_CycSynDep
MethodDef desc: compute cycle-level synaptic depression (must be defined by appropriate subclass) -- called at end of each cycle of computation if net_misc.cyc_syn_dep is on.
MethodDef proto void Compute_CycSynDep(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PhaseInit
MethodDef desc: initialize external input flags based on phase
MethodDef proto void PhaseInit(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayPhase
MethodDef desc: decay activation states towards initial values: at phase-level boundary
MethodDef proto void DecayPhase(LeabraLayer* lay, LeabraNetwork* net, float decay)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayEvent
MethodDef desc: decay activation states towards initial values: at event-level boundary
MethodDef proto void DecayEvent(LeabraLayer* lay, LeabraNetwork* net, float decay)
MethodDef opts [u'CAT_Activation']
MethodDef name: ExtToComp
MethodDef desc: change external inputs to comparisons (remove input)
MethodDef proto void ExtToComp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: TargExtToComp
MethodDef desc: change target &amp; external inputs to comparisons (remove targ &amp; input)
MethodDef proto void TargExtToComp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle
MethodDef desc: set stuff after settling is over (act_m, act_p etc)
MethodDef proto void PostSettle(LeabraLayer* lay, LeabraInhib* athr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SRAvg
MethodDef desc: compute sending-receiving activation product averages (CtLeabra_CAL)
MethodDef proto void Compute_SRAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_SRAvg
MethodDef desc: reset the sender-receiver coproduct average -- needed when no learning happening (CtLeabra_CAL)
MethodDef proto void Init_SRAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: EncodeState
MethodDef desc: encode current state information at end of trial (hook for time-based learning)
MethodDef proto void EncodeState(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SelfReg_Trial
MethodDef desc: compute self-regulation (accommodation, hysteresis) at end of trial
MethodDef proto void Compute_SelfReg_Trial(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: GetInSubGp
MethodDef proto void GetInSubGp()
MethodDef names [u'AddToActBuf', u'Compute_ApplyInhib', u'Compute_CycSynDep', u'Compute_HardClamp', u'Compute_HardClampNoClip', u'Compute_IThresh', u'Compute_IThreshNoAH', u'Compute_InhibAvg', u'Compute_MaxDa', u'Compute_NetinAvg', u'Compute_NetinRescale', u'Compute_NetinScale', u'Compute_SRAvg', u'Compute_SelfReg_Trial', u'Compute_SoftClamp', u'DecayEvent', u'DecayPhase', u'EncodeState', u'ExtToComp', u'GetInSubGp', u'Init_ActAvg', u'Init_ClampNet', u'Init_SRAvg', u'PhaseInit', u'PostSettle', u'Send_ClampNet', u'Send_NetinDelta', u'TargExtToComp', u'own_lay']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraPrjn
TypeDef type: class
TypeDef desc: leabra specific projection -- has special variables at the projection-level
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'SCOPE_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Projection']
MemberDef name: netin_avg
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: average netinput values for the recv projections into this layer
MemberDef name: netin_rel
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: relative netinput values for the recv projections into this layer
MemberDef name: avg_netin_avg
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: average netinput values for the recv projections into this layer, averaged over an epoch
MemberDef name: avg_netin_rel
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Statistic']
MemberDef desc: relative netinput values for the recv projections into this layer, averaged over an epoch
MemberDef name: trg_netin_rel
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: target value for avg_netin_rel -- used for adapting scaling and actual layer activations to achieve desired relative netinput levels -- important for large multilayered networks, where bottom-up projections should be stronger than top-down ones. this value can be set automatically based on the projection direction and other projections, as determined by the con spec
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate based on epoch
MethodDef proto void SetCurLrate(LeabraNetwork* net, int epoch)
MethodDef opts [u'CAT_Learning']
MethodDef name: SetLearnRule
MethodDef desc: set current learning rule from the network
MethodDef proto void SetLearnRule(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_Stats
MethodDef desc: intialize statistic counters
MethodDef proto void Init_Stats()
MethodDef opts [u'CAT_Statistic']
MethodDef names [u'Init_Stats', u'SetCurLrate', u'SetLearnRule']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraInhib
TypeDef type: class
TypeDef desc: holds threshold-computation values, used as a parent class for layers, etc
TypeDef cats:, [u'Leabra']
TypeDef opts:, []
TypeDef children: [u'LeabraUnit_Group', u'LeabraLayer']
MemberDef name: netin
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: net input values for the layer
MemberDef name: i_thrs
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: inhibitory threshold values for the layer
MemberDef name: acts
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: activation values for the layer
MemberDef name: acts_p
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: plus-phase activation stats for the layer
MemberDef name: acts_m
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: minus-phase activation stats for the layer
MemberDef name: phase_dif_ratio
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: phase-difference ratio (acts_m.avg / acts_p.avg)
MemberDef name: acts_p2
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: second plus-phase activation stats for the layer
MemberDef name: acts_m2
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: second minus-phase activation stats for the layer
MemberDef name: kwta
MemberDef type: KWTAVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: values for kwta -- activity levels, etc NOTE THIS IS A COMPUTED VALUE: k IS SET IN LayerSpec!
MemberDef name: i_val
MemberDef type: InhibVals
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: inhibitory values computed by kwta
MemberDef name: un_g_i
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: average and stdev (not max) values for unit inhib-to-thresh
MemberDef name: adapt_i
MemberDef type: AdaptIVals
MemberDef opts [u'READ_ONLY', u'AKA_adapt_pt', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: adapting inhibition values
MemberDef name: maxda
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: maximum change in activation (delta-activation) over network; used in stopping settling
MethodDef name: Inhib_SetVals
MethodDef proto void Inhib_SetVals(float val)
MethodDef name: Inhib_ResetSortBuf
MethodDef proto void Inhib_ResetSortBuf()
MethodDef name: Inhib_Init_Acts
MethodDef proto void Inhib_Init_Acts(LeabraLayerSpec* lay)
MethodDef name: Inhib_Initialize
MethodDef proto void Inhib_Initialize()
MethodDef name: Inhib_Copy_
MethodDef proto void Inhib_Copy_(const LeabraInhib&amp; cp)
MethodDef names [u'Inhib_Copy_', u'Inhib_Init_Acts', u'Inhib_Initialize', u'Inhib_ResetSortBuf', u'Inhib_SetVals']
########################################################################
TypeDef len: 19
TypeDef name:  LeabraLayerSpec
TypeDef type: class
TypeDef desc: Leabra layer specs, computes inhibitory input for all units in layer
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec']
TypeDef children: [u'LeabraContextLayerSpec', u'ScalarValLayerSpec', u'TwoDValLayerSpec', u'LeabraV1LayerSpec', u'TdLayerSpec', u'PVLVDaLayerSpec', u'MatrixLayerSpec', u'SNrThalLayerSpec', u'PFCLayerSpec', u'PFCOutLayerSpec']
EnumDef name: ENTIRE_LAYER
EnumDef val: ENTIRE_LAYER
EnumDef: treat entire layer as one inhibitory group (even if subgroups exist)
EnumDef name: UNIT_GROUPS
EnumDef val: UNIT_GROUPS
EnumDef: treat sub unit groups as separate inhibitory groups (but also uses gp_i and gp_g if set, to have some sharing of inhib across groups
EnumDef name: LAY_AND_GPS
EnumDef val: LAY_AND_GPS
EnumDef: compute inhib over both groups and whole layer, inhibi is max of layer and group inhib
EnumDef name: KWTA_INHIB
EnumDef val: KWTA_INHIB
EnumDef: between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)
EnumDef name: KWTA_AVG_INHIB
EnumDef val: KWTA_AVG_INHIB
EnumDef: average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)
EnumDef name: KWTA_KV2K
EnumDef val: KWTA_KV2K
EnumDef: average of top k vs avg of next k (2k) -- avoids long &apos;tail&apos; of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB
EnumDef name: KWTA_COMP_COST
EnumDef val: KWTA_COMP_COST
EnumDef: competitor cost kwta function: inhibition is i_kwta_pt below the k&apos;th unit&apos;s threshold inhibition value if there are no strong competitors (&gt;comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility
EnumDef name: AVG_MAX_PT_INHIB
EnumDef val: AVG_MAX_PT_INHIB
EnumDef: put inhib value at i_kwta_pt between avg and max values for layer
EnumDef name: MAX_INHIB
EnumDef val: MAX_INHIB
EnumDef: put inhib value at i_kwta_pt below max guy in layer
EnumDef name: UNIT_INHIB
EnumDef val: UNIT_INHIB
EnumDef: unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)
EnumDef names: [u'Compute_I', u'InhibGroup']
MemberDef name: inhib_group
MemberDef type: LeabraLayerSpec::InhibGroup
MemberDef opts [u'APPLY_IMMED']
MemberDef cats [u'Activation']
MemberDef desc: what to consider the inhibitory group (layer or unit subgroups, or both)
MemberDef name: inhib
MemberDef type: LeabraInhibSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer
MemberDef name: kwta
MemberDef type: KWTASpec
MemberDef opts [u'CONDEDIT_OFF_inhib_group:UNIT_GROUPS']
MemberDef cats [u'Activation']
MemberDef desc: desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)
MemberDef name: gp_kwta
MemberDef type: KWTASpec
MemberDef opts [u'CONDEDIT_OFF_inhib_group:ENTIRE_LAYER']
MemberDef cats [u'Activation']
MemberDef desc: desired activity level for units within unit groups (not for ENTIRE_LAYER) (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)
MemberDef name: tie_brk
MemberDef type: KwtaTieBreak
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: break ties when all the units in the layer have similar netinputs, which puts the inhbition value too close to everyone&apos;s threshold and produces no activation at all. this will lower the inhibition and allow all the units to have some activation
MemberDef name: adapt_i
MemberDef type: AdaptISpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: adapt the inhibition: either i_kwta_pt point based on diffs between actual and target k level (for avg-based), or g_bar.i for unit-inhib
MemberDef name: clamp
MemberDef type: ClampSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: how to clamp external inputs to units (hard vs. soft)
MemberDef name: decay
MemberDef type: DecaySpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: decay of activity state vars between events, -/+ phase, and 2nd set of phases (if appl)
MemberDef name: ct_inhib_mod
MemberDef type: CtLayerInhibMod
MemberDef desc: layer-level inhibitory modulation parameters, to be used instead of network-level values where needed
MemberDef name: net_rescale
MemberDef type: LayNetRescaleSpec
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: rescale layer-wide netinputs to prevent blowup, when max net exceeds specified net value
MemberDef name: abs_net_adapt
MemberDef type: LayAbsNetAdaptSpec
MemberDef opts []
MemberDef cats [u'Learning']
MemberDef desc: adapt absolute netinput values (must call AbsRelNetin functions, and AdaptAbsNetin)
MethodDef name: Init_Weights
MethodDef desc: initialize weight values and other permanent state
MethodDef proto void Init_Weights(LeabraLayer* lay)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_ActAvg
MethodDef desc: initialize act_avg values
MethodDef proto void Init_ActAvg(LeabraLayer* lay)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Stats
MethodDef desc: intialize statistic variables
MethodDef proto void Init_Stats(LeabraLayer* lay)
MethodDef opts [u'CAT_Statistic']
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate based on epoch
MethodDef proto void SetCurLrate(LeabraLayer* lay, LeabraNetwork* net, int epoch)
MethodDef opts [u'CAT_Learning']
MethodDef name: SetLearnRule
MethodDef desc: set current learning rule from the network
MethodDef proto void SetLearnRule(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Active_K
MethodDef desc: prior to settling: compute actual activity levels based on spec, inputs, etc
MethodDef proto void Compute_Active_K(LeabraLayer* lay)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Active_K_impl
MethodDef proto void Compute_Active_K_impl(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, KWTASpec&amp; kwtspec)
MethodDef name: Compute_Pat_K
MethodDef desc: above are implementation helpers
MethodDef proto int Compute_Pat_K(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Acts
MethodDef desc: prior to settling: initialize dynamic state variables
MethodDef proto void Init_Acts(LeabraLayer* lay)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_HardClampPhase2
MethodDef desc: prior to settling: hard-clamp inputs (special code for hard clamping in phase 2 based on prior acts)
MethodDef proto void Compute_HardClampPhase2(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_HardClamp
MethodDef desc: prior to settling: hard-clamp inputs
MethodDef proto void Compute_HardClamp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinScale
MethodDef desc: prior to settling: compute netinput scaling values
MethodDef proto void Compute_NetinScale(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_ClampNet
MethodDef desc: prior to settling: init clamp net variable prior to sending
MethodDef proto void Init_ClampNet(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_ClampNet
MethodDef desc: prior to settling: compute input from hard-clamped
MethodDef proto void Send_ClampNet(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_Netin
MethodDef desc: compute net inputs
MethodDef proto void Send_Netin(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinDelta
MethodDef desc: compute net inputs as changes in activation
MethodDef proto void Send_NetinDelta(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Clamp_NetAvg
MethodDef desc: clamp and compute averages of net inputs that were already computed
MethodDef proto void Compute_Clamp_NetAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinAvg
MethodDef proto void Compute_NetinAvg(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net)
MethodDef name: Compute_SoftClamp
MethodDef desc: soft-clamp inputs by adding to net input
MethodDef proto void Compute_SoftClamp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Inhib
MethodDef desc: initialize the inhibitory state values
MethodDef proto void Init_Inhib(LeabraLayer* lay)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib
MethodDef desc: stage two: compute the inhibition for layer
MethodDef proto void Compute_Inhib(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_impl
MethodDef desc: implementation of inhibition computation for either layer or unit group
MethodDef proto void Compute_Inhib_impl(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_kWTA_Sort
MethodDef desc: implementation of sort into active and inactive unit buffers -- basic to various kwta functions: eff_k = effective k to use, k_net = net of kth unit (lowest unit in act_buf), k_idx = index of kth unit
MethodDef proto void Compute_Inhib_kWTA_Sort(Unit_Group* ug, LeabraInhib* thr, LeabraSort&amp; act_buf, LeabraSort&amp; inact_buf, int k_eff, float&amp; k_net, int&amp; k_idx)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_BreakTie
MethodDef desc: break any ties in the kwta function
MethodDef proto void Compute_Inhib_BreakTie(LeabraInhib* thr)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_kWTA
MethodDef desc: implementation of basic kwta inhibition computation
MethodDef proto void Compute_Inhib_kWTA(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_kWTA_Avg
MethodDef desc: implementation of kwta avg-based inhibition computation
MethodDef proto void Compute_Inhib_kWTA_Avg(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_kWTA_kv2k
MethodDef desc: implementation of k vs. 2k wta avg-based inhibition computation
MethodDef proto void Compute_Inhib_kWTA_kv2k(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_kWTA_CompCost
MethodDef desc: implementation of kwta competitor cost inhibition computation
MethodDef proto void Compute_Inhib_kWTA_CompCost(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_AvgMaxPt
MethodDef desc: implementation of avg-max-pt inhibition computation
MethodDef proto void Compute_Inhib_AvgMaxPt(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_Max
MethodDef desc: implementation of max inhibition computation
MethodDef proto void Compute_Inhib_Max(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib_kWTA_Gps
MethodDef desc: implementation of GPS_THEN_UNITS kwta on groups
MethodDef proto void Compute_Inhib_kWTA_Gps(LeabraLayer* lay, LeabraNetwork* net, LeabraInhibSpec&amp; ispec)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_LayInhibToGps
MethodDef desc: Stage 3.25: for layer groups, need to propagate inhib out to unit groups
MethodDef proto void Compute_LayInhibToGps(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_CtDynamicInhib
MethodDef desc: compute extra dynamic inhibition for CtLeabra_CAL algorithm
MethodDef proto void Compute_CtDynamicInhib(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ApplyInhib
MethodDef desc: apply computed inhib value to individual unit inhibitory conductances
MethodDef proto void Compute_ApplyInhib(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ApplyInhib_impl
MethodDef desc: implementation of apply inhibition computation for either layer or unit group
MethodDef proto void Compute_ApplyInhib_impl(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_InhibAvg
MethodDef desc: stage three: compute average inhibition value
MethodDef proto void Compute_InhibAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_InhibAvg_impl
MethodDef desc: stage three: compute average inhibition value
MethodDef proto void Compute_InhibAvg_impl(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActAvg_ugp
MethodDef desc: compute acts.avg from act_eq
MethodDef proto void Compute_ActAvg_ugp(LeabraLayer* na, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* na)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActAvg
MethodDef desc: compute acts.avg from act_eq
MethodDef proto void Compute_ActAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_MaxDa_ugp
MethodDef desc: compute maximum delta-activation in layer (used for stopping criterion)
MethodDef proto void Compute_MaxDa_ugp(LeabraLayer* na, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* na)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_MaxDa
MethodDef desc: compute maximum delta-activation in layer (used for stopping criterion)
MethodDef proto void Compute_MaxDa(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActMAvg_ugp
MethodDef desc: compute acts_m.avg from act_m
MethodDef proto void Compute_ActMAvg_ugp(LeabraLayer* na, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* na)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActMAvg
MethodDef desc: compute acts_m.avg from act_m
MethodDef proto void Compute_ActMAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActPAvg_ugp
MethodDef desc: compute acts_p.avg from act_p
MethodDef proto void Compute_ActPAvg_ugp(LeabraLayer* na, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* na)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActPAvg
MethodDef desc: compute acts_p.avg from act_p
MethodDef proto void Compute_ActPAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Act
MethodDef desc: stage three: compute final activation
MethodDef proto void Compute_Act(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Act_impl
MethodDef desc: stage three: compute final activation
MethodDef proto void Compute_Act_impl(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinRescale
MethodDef desc: do net rescaling to prevent blowup based on netin.max
MethodDef proto void Compute_NetinRescale(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_OutputName_ugp
MethodDef desc: compute the output_name field from the layer acts.max_i (only for OUTPUT or TARGET layers)
MethodDef proto void Compute_OutputName_ugp(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_OutputName
MethodDef desc: compute the output_name field from the layer acts.max_i (only for OUTPUT or TARGET layers)
MethodDef proto void Compute_OutputName(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TopKAvgAct_ugp
MethodDef desc: compute the average activation of the top k most active units (useful as a measure of recognition) -- requires a kwta inhibition function to be in use, and operates on current act_eq values
MethodDef proto float Compute_TopKAvgAct_ugp(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TopKAvgAct
MethodDef desc: compute the average activation of the top k most active units (useful as a measure of recognition) -- requires a kwta inhibition function to be in use, and operates on current act_eq values
MethodDef proto float Compute_TopKAvgAct(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TopKAvgNetin_ugp
MethodDef desc: compute the average net input of the top k most active units (useful as a measure of recognition) -- requires a kwta inhibition function to be in use, and operates on current net values
MethodDef proto float Compute_TopKAvgNetin_ugp(LeabraLayer* lay, Unit_Group* ug, LeabraInhib* thr, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TopKAvgNetin
MethodDef desc: compute the average net input of the top k most active units (useful as a measure of recognition) -- requires a kwta inhibition function to be in use, and operates on current net values
MethodDef proto float Compute_TopKAvgNetin(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_CycSynDep
MethodDef desc: compute cycle-level synaptic depression (must be defined by appropriate subclass) -- called at end of each cycle of computation if net_misc.cyc_syn_dep is on.
MethodDef proto void Compute_CycSynDep(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PhaseInit
MethodDef desc: initialize start of a setting phase, set input flags appropriately, etc
MethodDef proto void PhaseInit(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayEvent
MethodDef desc: decay activations and other state between events
MethodDef proto void DecayEvent(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayPhase
MethodDef desc: decay activations and other state between phases
MethodDef proto void DecayPhase(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayPhase2
MethodDef desc: decay activations and other state between second phase
MethodDef proto void DecayPhase2(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: ExtToComp
MethodDef desc: change external inputs to comparisons (remove input)
MethodDef proto void ExtToComp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: TargExtToComp
MethodDef desc: change target &amp; external inputs to comparisons (remove targ &amp; input)
MethodDef proto void TargExtToComp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle_GetMinus
MethodDef desc: get minus phase act stats
MethodDef proto void PostSettle_GetMinus(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle_GetPlus
MethodDef desc: get plus phase act stats
MethodDef proto void PostSettle_GetPlus(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle_GetMinus2
MethodDef desc: get 2nd minus phase act stats
MethodDef proto void PostSettle_GetMinus2(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle_GetPlus2
MethodDef desc: get 2nd plus phase act stats
MethodDef proto void PostSettle_GetPlus2(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle_GetPhaseDifRatio
MethodDef desc: get phase dif ratio from minus to plus
MethodDef proto void PostSettle_GetPhaseDifRatio(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle
MethodDef desc: after settling, keep track of phase variables, etc.
MethodDef proto void PostSettle(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: AdaptGBarI
MethodDef desc: adapt inhibitory conductances based on target activation values relative to current values
MethodDef proto void AdaptGBarI(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: EncodeState
MethodDef desc: encode final state information at end of trial for time-based learning across trials
MethodDef proto void EncodeState(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SelfReg_Trial
MethodDef desc: update self-regulation (accommodation, hysteresis) at end of trial
MethodDef proto void Compute_SelfReg_Trial(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SRAvg
MethodDef desc: compute sending-receiving activation product averages (CtLeabra_CAL)
MethodDef proto void Compute_SRAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Init_SRAvg
MethodDef desc: reset the sender-receiver coproduct average -- needed when no learning happening (CtLeabra_CAL)
MethodDef proto void Init_SRAvg(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: AdaptKWTAPt
MethodDef desc: adapt the kwta point based on average activity
MethodDef proto void AdaptKWTAPt(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_dWt_impl
MethodDef desc: learn: compute the weight changes -- actually do it
MethodDef proto void Compute_dWt_impl(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_FirstPlus
MethodDef desc: compute weight change after first plus phase has been encountered: standard layers do a weight change here, except under CtLeabra_CAL
MethodDef proto void Compute_dWt_FirstPlus(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_SecondPlus
MethodDef desc: compute weight change after second plus phase has been encountered: standard layers do NOT do a weight change here -- only selected special ones
MethodDef proto void Compute_dWt_SecondPlus(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_Nothing
MethodDef desc: compute weight change after final nothing phase: standard layers do a weight change here under both learning rules
MethodDef proto void Compute_dWt_Nothing(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Weights
MethodDef desc: learn: update the weights based on computed weight changes (dwt&apos;s)
MethodDef proto void Compute_Weights(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SSE
MethodDef desc: compute sum squared error of activation vs target over the entire layer -- always returns the actual sse, but unit_avg and sqrt flags determine averaging and sqrt of layer&apos;s own sse value
MethodDef proto float Compute_SSE(LeabraLayer* lay, int&amp; n_vals, bool unit_avg = false, bool sqrt = false)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AbsRelNetin
MethodDef desc: compute the absolute layer-level and relative netinput from different projections into this layer
MethodDef proto void Compute_AbsRelNetin(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AvgAbsRelNetin
MethodDef desc: compute time-average relative netinput from different projections into this layer (e.g., every epoch)
MethodDef proto void Compute_AvgAbsRelNetin(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TrgRelNetin
MethodDef desc: compute target rel netin based on projection direction information plus the adapt_rel_net values in the conspec
MethodDef proto void Compute_TrgRelNetin(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_AdaptRelNetin
MethodDef desc: adapt the relative input values by changing the conspec wt_scale.rel parameter; See Compute_AdaptAbsNetin for adaptation of wt_scale.abs parameters to achieve good netinput values overall
MethodDef proto void Compute_AdaptRelNetin(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_AdaptAbsNetin
MethodDef desc: adapt the absolute net input values by changing the conspec wt_scale.abs parameter
MethodDef proto void Compute_AdaptAbsNetin(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: FindLayerFmSpec
MethodDef desc: find a layer that given layer receives from based on the type of layer spec
MethodDef proto LeabraLayer_ptr FindLayerFmSpec(LeabraLayer* lay, int&amp; prjn_idx, TypeDef* layer_spec)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindLayerFmSpecExact
MethodDef desc: find a layer that given layer receives from based on the type of layer spec: uses exact type match, not inherits!
MethodDef proto LeabraLayer_ptr FindLayerFmSpecExact(LeabraLayer* lay, int&amp; prjn_idx, TypeDef* layer_spec)
MethodDef opts [u'CAT_Structure']
MethodDef name: FindLayerFmSpecNet
MethodDef desc: find a layer in network based on the type of layer spec
MethodDef proto LeabraLayer_ptr FindLayerFmSpecNet(Network* net, TypeDef* layer_spec)
MethodDef opts [u'CAT_Structure']
MethodDef name: HelpConfig
MethodDef desc: get help message for configuring this spec
MethodDef proto void HelpConfig()
MethodDef opts [u'BUTTON', u'CAT_Structure']
MethodDef name: Defaults
MethodDef desc: restores default parameter settings: warning -- you will lose any unique parameters you might have set!
MethodDef proto void Defaults()
MethodDef opts [u'BUTTON', u'CONFIRM', u'CAT_ObjectMgmt']
MethodDef names [u'AdaptGBarI', u'AdaptKWTAPt', u'Compute_AbsRelNetin', u'Compute_Act', u'Compute_ActAvg', u'Compute_ActAvg_ugp', u'Compute_ActMAvg', u'Compute_ActMAvg_ugp', u'Compute_ActPAvg', u'Compute_ActPAvg_ugp', u'Compute_Act_impl', u'Compute_Active_K', u'Compute_Active_K_impl', u'Compute_AdaptAbsNetin', u'Compute_AdaptRelNetin', u'Compute_ApplyInhib', u'Compute_ApplyInhib_impl', u'Compute_AvgAbsRelNetin', u'Compute_Clamp_NetAvg', u'Compute_CtDynamicInhib', u'Compute_CycSynDep', u'Compute_HardClamp', u'Compute_HardClampPhase2', u'Compute_Inhib', u'Compute_InhibAvg', u'Compute_InhibAvg_impl', u'Compute_Inhib_AvgMaxPt', u'Compute_Inhib_BreakTie', u'Compute_Inhib_Max', u'Compute_Inhib_impl', u'Compute_Inhib_kWTA', u'Compute_Inhib_kWTA_Avg', u'Compute_Inhib_kWTA_CompCost', u'Compute_Inhib_kWTA_Gps', u'Compute_Inhib_kWTA_Sort', u'Compute_Inhib_kWTA_kv2k', u'Compute_LayInhibToGps', u'Compute_MaxDa', u'Compute_MaxDa_ugp', u'Compute_NetinAvg', u'Compute_NetinRescale', u'Compute_NetinScale', u'Compute_OutputName', u'Compute_OutputName_ugp', u'Compute_Pat_K', u'Compute_SRAvg', u'Compute_SSE', u'Compute_SelfReg_Trial', u'Compute_SoftClamp', u'Compute_TopKAvgAct', u'Compute_TopKAvgAct_ugp', u'Compute_TopKAvgNetin', u'Compute_TopKAvgNetin_ugp', u'Compute_TrgRelNetin', u'Compute_Weights', u'Compute_dWt_FirstPlus', u'Compute_dWt_Nothing', u'Compute_dWt_SecondPlus', u'Compute_dWt_impl', u'DecayEvent', u'DecayPhase', u'DecayPhase2', u'Defaults', u'EncodeState', u'ExtToComp', u'FindLayerFmSpec', u'FindLayerFmSpecExact', u'FindLayerFmSpecNet', u'HelpConfig', u'Init_ActAvg', u'Init_Acts', u'Init_ClampNet', u'Init_Inhib', u'Init_SRAvg', u'Init_Stats', u'Init_Weights', u'PhaseInit', u'PostSettle', u'PostSettle_GetMinus', u'PostSettle_GetMinus2', u'PostSettle_GetPhaseDifRatio', u'PostSettle_GetPlus', u'PostSettle_GetPlus2', u'Send_ClampNet', u'Send_Netin', u'Send_NetinDelta', u'SetCurLrate', u'SetLearnRule', u'TargExtToComp']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraUnit_Group
TypeDef type: class
TypeDef desc: for independent subgroups of competing units within a single layer
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'MEMB_HIDDEN_EDIT', u'HIDDEN_INLINE', u'SCOPE_Network', u'NO_EXPAND_ALL', u'MULT_INHERIT', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'LeabraInhib', u'Unit_Group']
MemberDef name: netin
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: net input values for the layer
MemberDef name: i_thrs
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: inhibitory threshold values for the layer
MemberDef name: acts
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: activation values for the layer
MemberDef name: acts_p
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: plus-phase activation stats for the layer
MemberDef name: acts_m
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: minus-phase activation stats for the layer
MemberDef name: phase_dif_ratio
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: phase-difference ratio (acts_m.avg / acts_p.avg)
MemberDef name: acts_p2
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: second plus-phase activation stats for the layer
MemberDef name: acts_m2
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: second minus-phase activation stats for the layer
MemberDef name: kwta
MemberDef type: KWTAVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: values for kwta -- activity levels, etc NOTE THIS IS A COMPUTED VALUE: k IS SET IN LayerSpec!
MemberDef name: i_val
MemberDef type: InhibVals
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: inhibitory values computed by kwta
MemberDef name: un_g_i
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: average and stdev (not max) values for unit inhib-to-thresh
MemberDef name: adapt_i
MemberDef type: AdaptIVals
MemberDef opts [u'READ_ONLY', u'AKA_adapt_pt', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: adapting inhibition values
MemberDef name: maxda
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: maximum change in activation (delta-activation) over network; used in stopping settling
MemberDef name: misc_state
MemberDef type: int
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: miscellaneous state variable
MemberDef name: misc_state1
MemberDef type: int
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: second miscellaneous state variable
MemberDef name: misc_state2
MemberDef type: int
MemberDef opts []
MemberDef cats [u'Activation']
MemberDef desc: third miscellaneous state variable
MethodDef name: Inhib_SetVals
MethodDef proto void Inhib_SetVals(float val)
MethodDef name: Inhib_ResetSortBuf
MethodDef proto void Inhib_ResetSortBuf()
MethodDef name: Inhib_Init_Acts
MethodDef proto void Inhib_Init_Acts(LeabraLayerSpec* lay)
MethodDef name: Inhib_Initialize
MethodDef proto void Inhib_Initialize()
MethodDef name: Inhib_Copy_
MethodDef proto void Inhib_Copy_(const LeabraInhib&amp; cp)
MethodDef names [u'Inhib_Copy_', u'Inhib_Init_Acts', u'Inhib_Initialize', u'Inhib_ResetSortBuf', u'Inhib_SetVals']
########################################################################
TypeDef len: 17
TypeDef name:  LeabraLayer
TypeDef type: class
TypeDef desc: layer that implements the Leabra algorithms
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_lay', u'COMPRESS', u'SCOPE_Network', u'MULT_INHERIT', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'LeabraInhib', u'taBase', u'taOBase', u'taNBase', u'Layer']
TypeDef children: [u'LeabraV1Layer']
MemberDef name: netin
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: net input values for the layer
MemberDef name: i_thrs
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: inhibitory threshold values for the layer
MemberDef name: acts
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: activation values for the layer
MemberDef name: acts_p
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: plus-phase activation stats for the layer
MemberDef name: acts_m
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: minus-phase activation stats for the layer
MemberDef name: phase_dif_ratio
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: phase-difference ratio (acts_m.avg / acts_p.avg)
MemberDef name: acts_p2
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: second plus-phase activation stats for the layer
MemberDef name: acts_m2
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: second minus-phase activation stats for the layer
MemberDef name: kwta
MemberDef type: KWTAVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: values for kwta -- activity levels, etc NOTE THIS IS A COMPUTED VALUE: k IS SET IN LayerSpec!
MemberDef name: i_val
MemberDef type: InhibVals
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: inhibitory values computed by kwta
MemberDef name: un_g_i
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: average and stdev (not max) values for unit inhib-to-thresh
MemberDef name: adapt_i
MemberDef type: AdaptIVals
MemberDef opts [u'READ_ONLY', u'AKA_adapt_pt', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: adapting inhibition values
MemberDef name: maxda
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: maximum change in activation (delta-activation) over network; used in stopping settling
MemberDef name: spec
MemberDef type: LeabraLayerSpec_SPtr
MemberDef opts []
MemberDef cats [u'Structure']
MemberDef desc: the spec for this layer: controls all functions of layer
MemberDef name: stm_gain
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: actual stim gain for soft clamping, can be incremented to ensure clamped units active
MemberDef name: hard_clamped
MemberDef type: bool
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats [u'Activation']
MemberDef desc: this layer is actually hard clamped
MemberDef name: sravg_sum
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: sum of sravg weightings (count of number of times sravg has been computed) -- used for normalizing the weighted average
MemberDef name: sravg_nrm
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: actual normalization term computed from sravg_sum
MemberDef name: maxda_sum
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: sum of maxda since last SRAvg update -- for CtLeabra_CAL
MemberDef name: dav
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Learning']
MemberDef desc: dopamine-like modulatory value (where applicable)
MemberDef name: net_rescale
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: computed netinput rescaling factor (updated by net_rescale)
MemberDef name: avg_netin
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Activation']
MemberDef desc: net input values for the layer, averaged over an epoch-level timescale
MemberDef name: avg_netin_sum
MemberDef type: AvgMaxVals
MemberDef opts [u'READ_ONLY', u'EXPERT', u'DMEM_AGG_SUM']
MemberDef cats [u'Activation']
MemberDef desc: sum of net input values for the layer, for computing average over an epoch-level timescale
MemberDef name: avg_netin_n
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT', u'DMEM_AGG_SUM']
MemberDef cats [u'Activation']
MemberDef desc: number of times sum is updated for computing average
MemberDef name: da_updt
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'EXPERT']
MemberDef cats [u'Learning']
MemberDef desc: true if da triggered an update (either + to store or - reset)
MethodDef name: Inhib_SetVals
MethodDef proto void Inhib_SetVals(float val)
MethodDef name: Inhib_ResetSortBuf
MethodDef proto void Inhib_ResetSortBuf()
MethodDef name: Inhib_Init_Acts
MethodDef proto void Inhib_Init_Acts(LeabraLayerSpec* lay)
MethodDef name: Inhib_Initialize
MethodDef proto void Inhib_Initialize()
MethodDef name: Inhib_Copy_
MethodDef proto void Inhib_Copy_(const LeabraInhib&amp; cp)
MethodDef name: Init_ActAvg
MethodDef desc: initialize act_avg values
MethodDef proto void Init_ActAvg()
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_Inhib
MethodDef desc: initialize inhibitory state
MethodDef proto void Init_Inhib()
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate based on epoch
MethodDef proto void SetCurLrate(LeabraNetwork* net, int epoch)
MethodDef opts [u'CAT_Learning']
MethodDef name: SetLearnRule
MethodDef desc: set current learning rule from the network
MethodDef proto void SetLearnRule(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Active_K
MethodDef desc: prior to settling: compute actual activity levels based on spec, inputs, etc
MethodDef proto void Compute_Active_K()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_HardClamp
MethodDef desc: prior to settling: hard-clamp inputs
MethodDef proto void Compute_HardClamp(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_NetinScale
MethodDef desc: prior to settling: compute netinput scaling values
MethodDef proto void Compute_NetinScale(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Init_ClampNet
MethodDef desc: prior to settling: init clamp net variable prior to sending
MethodDef proto void Init_ClampNet(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_ClampNet
MethodDef desc: prior to settling: compute input from hard-clamped
MethodDef proto void Send_ClampNet(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Send_NetinDelta
MethodDef proto void Send_NetinDelta()
MethodDef name: Compute_Clamp_NetAvg
MethodDef desc: clamp and compute averages of net inputs that were already computed
MethodDef proto void Compute_Clamp_NetAvg(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_Inhib
MethodDef desc: compute the inhibition for layer
MethodDef proto void Compute_Inhib(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_LayInhibToGps
MethodDef desc: for layer groups, need to propagate inhib out to unit groups
MethodDef proto void Compute_LayInhibToGps(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ApplyInhib
MethodDef desc: apply inhibition value to unit inhibitory conductances
MethodDef proto void Compute_ApplyInhib(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_InhibAvg
MethodDef desc: compute average inhibition value (integrating unit inhib etc)
MethodDef proto void Compute_InhibAvg(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_TopKAvgAct
MethodDef desc: compute the average activation of the top k most active units (useful as a measure of recognition) -- requires a kwta inhibition function to be in use, and operates on current act_eq values
MethodDef proto float Compute_TopKAvgAct(LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TopKAvgNetin
MethodDef desc: compute the average netinput of the top k most active units (useful as a measure of recognition) -- requires a kwta inhibition function to be in use, and operates on current act_eq values
MethodDef proto float Compute_TopKAvgNetin(LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_CycSynDep
MethodDef desc: compute cycle-level synaptic depression (must be defined by appropriate subclass) -- called at end of each cycle of computation if net_misc.cyc_syn_dep is on.
MethodDef proto void Compute_CycSynDep(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActMAvg
MethodDef desc: compute acts_m.avg from act_m
MethodDef proto void Compute_ActMAvg(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_ActPAvg
MethodDef desc: compute acts_p.avg from act_p
MethodDef proto void Compute_ActPAvg(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PhaseInit
MethodDef desc: initialize start of a setting phase, set input flags appropriately, etc
MethodDef proto void PhaseInit(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayEvent
MethodDef desc: decay activations and other state between events
MethodDef proto void DecayEvent(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayPhase
MethodDef desc: decay activations and other state between phases
MethodDef proto void DecayPhase(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: DecayPhase2
MethodDef desc: decay activations and other state between second phase
MethodDef proto void DecayPhase2(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: ExtToComp
MethodDef desc: change external inputs to comparisons (remove input)
MethodDef proto void ExtToComp(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: TargExtToComp
MethodDef desc: change target &amp; external inputs to comparisons (remove targ &amp; input)
MethodDef proto void TargExtToComp(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: PostSettle
MethodDef desc: after settling, keep track of phase variables, etc.
MethodDef proto void PostSettle(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: EncodeState
MethodDef desc: encode final state information at end of trial for time-based learning across trials
MethodDef proto void EncodeState(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_SelfReg_Trial
MethodDef desc: update self-regulation (accommodation, hysteresis) at end of trial
MethodDef proto void Compute_SelfReg_Trial(LeabraNetwork* net)
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SRAvg
MethodDef desc: compute sending-receiving activation product averages (CtLeabra_CAL)
MethodDef proto void Compute_SRAvg(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_FirstPlus
MethodDef desc: compute weight change after first plus phase has been encountered: standard layers do a weight change here, except under CtLeabra_CAL
MethodDef proto void Compute_dWt_FirstPlus(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_SecondPlus
MethodDef desc: compute weight change after second plus phase has been encountered: standard layers do NOT do a weight change here -- only selected special ones
MethodDef proto void Compute_dWt_SecondPlus(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dWt_Nothing
MethodDef desc: compute weight change after final nothing phase: standard layers do a weight change here under both learning rules
MethodDef proto void Compute_dWt_Nothing(LeabraNetwork* net)
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_AbsRelNetin
MethodDef desc: compute the absolute layer-level and relative netinput from different projections into this layer
MethodDef proto void Compute_AbsRelNetin(LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AvgAbsRelNetin
MethodDef desc: compute the average absolute layer-level and relative netinput from different projections into this layer (over an epoch-level timescale)
MethodDef proto void Compute_AvgAbsRelNetin(LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TrgRelNetin
MethodDef desc: compute target rel netin based on projection direction information plus the adapt_rel_net values in the conspec
MethodDef proto void Compute_TrgRelNetin(LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AdaptRelNetin
MethodDef desc: adapt the relative input values by changing the conspec wt_scale.rel parameter; See Compute_AdaptAbsNetin for adaptation of wt_scale.abs parameters to achieve good netinput values overall
MethodDef proto void Compute_AdaptRelNetin(LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AdaptAbsNetin
MethodDef desc: adapt the absolute net input values by changing the conspec wt_scale.abs parameter
MethodDef proto void Compute_AdaptAbsNetin(LeabraNetwork* net)
MethodDef opts [u'CAT_Statistic']
MethodDef name: ResetSortBuf
MethodDef proto void ResetSortBuf()
MethodDef names [u'Compute_AbsRelNetin', u'Compute_ActMAvg', u'Compute_ActPAvg', u'Compute_Active_K', u'Compute_AdaptAbsNetin', u'Compute_AdaptRelNetin', u'Compute_ApplyInhib', u'Compute_AvgAbsRelNetin', u'Compute_Clamp_NetAvg', u'Compute_CycSynDep', u'Compute_HardClamp', u'Compute_Inhib', u'Compute_InhibAvg', u'Compute_LayInhibToGps', u'Compute_NetinScale', u'Compute_SRAvg', u'Compute_SelfReg_Trial', u'Compute_TopKAvgAct', u'Compute_TopKAvgNetin', u'Compute_TrgRelNetin', u'Compute_dWt_FirstPlus', u'Compute_dWt_Nothing', u'Compute_dWt_SecondPlus', u'DecayEvent', u'DecayPhase', u'DecayPhase2', u'EncodeState', u'ExtToComp', u'Inhib_Copy_', u'Inhib_Init_Acts', u'Inhib_Initialize', u'Inhib_ResetSortBuf', u'Inhib_SetVals', u'Init_ActAvg', u'Init_ClampNet', u'Init_Inhib', u'PhaseInit', u'PostSettle', u'ResetSortBuf', u'Send_ClampNet', u'Send_NetinDelta', u'SetCurLrate', u'SetLearnRule', u'TargExtToComp']
########################################################################
TypeDef len: 17
TypeDef name:  LeabraNetwork
TypeDef type: class
TypeDef desc: network that uses the Leabra algorithms and objects
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'FILETYPE_Network', u'EXT_net', u'COMPRESS', u'DEF_NAME_ROOT_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'Network']
EnumDef name: LEABRA_CHL
EnumDef val: LEABRA_CHL
EnumDef: use the standard Leabra Contrastive Hebbian Learning rule: (s+r+) - (s-r-) (s=sender,r=recv +=plus phase, -=minus phase)
EnumDef name: CTLEABRA_CAL
EnumDef val: CTLEABRA_CAL
EnumDef: use the continuous-time Leabra Contrastive Attractor Learning rule: (s+r+) - &lt;s-r-&gt; (s=sender,r=recv +=plus phase, -=minus phase = average over all non-+ states) indicated by &lt;&gt;
EnumDef name: CTLEABRA_DCAL
EnumDef val: CTLEABRA_DCAL
EnumDef: use the continuous-time Leabra Delta-Contrastive Attractor Learning rule: (s+ - &lt;s-&gt;) - (r+ - &lt;r-&gt;) (s=sender,r=recv +=plus phase, -=minus phase = average over all non-+ states indicated by &lt;&gt;)
EnumDef name: DO_NOTHING
EnumDef val: DO_NOTHING
EnumDef: do nothing
EnumDef name: INIT_STATE
EnumDef val: INIT_STATE
EnumDef: initialize state
EnumDef name: DECAY_STATE
EnumDef val: DECAY_STATE
EnumDef: decay the state
EnumDef name: MINUS_PHASE
EnumDef val: MINUS_PHASE
EnumDef: minus phase
EnumDef name: PLUS_PHASE
EnumDef val: PLUS_PHASE
EnumDef: plus phase
EnumDef name: MINUS_PLUS
EnumDef val: MINUS_PLUS
EnumDef: standard minus-plus (err and assoc)
EnumDef name: PLUS_MINUS
EnumDef val: PLUS_MINUS
EnumDef: reverse order: plus phase first
EnumDef name: PLUS_ONLY
EnumDef val: PLUS_ONLY
EnumDef: only present the plus phase (hebbian-only)
EnumDef name: MINUS_PLUS_NOTHING
EnumDef val: MINUS_PLUS_NOTHING
EnumDef: standard for CtLeabra_CAL and auto-encoder version with final &apos;nothing&apos; minus phase
EnumDef name: MINUS_PLUS_MINUS
EnumDef val: MINUS_PLUS_MINUS
EnumDef: alternative version for CtLeabra_CAL with input still in final phase -- this 2nd minus is also marked as a nothing_phase
EnumDef name: PLUS_NOTHING
EnumDef val: PLUS_NOTHING
EnumDef: just an auto-encoder (no initial minus phase)
EnumDef name: MINUS_PLUS_PLUS
EnumDef val: MINUS_PLUS_PLUS
EnumDef: two plus phases for gated context layer updating in second plus phase, for the PBWM model
EnumDef name: MINUS_PLUS_PLUS_NOTHING
EnumDef val: MINUS_PLUS_PLUS_NOTHING
EnumDef: PBWM in CtLeabra_CAL mode
EnumDef name: MINUS_PLUS_PLUS_MINUS
EnumDef val: MINUS_PLUS_PLUS_MINUS
EnumDef: PBWM in CtLeabra_CAL mode, alternative final inhib stage
EnumDef names: [u'LearnRule', u'Phase', u'PhaseOrder', u'StateInit']
MemberDef name: learn_rule
MemberDef type: LeabraNetwork::LearnRule
MemberDef desc: The variant of Leabra learning rule to use
MemberDef name: phase_order
MemberDef type: LeabraNetwork::PhaseOrder
MemberDef opts [u'APPLY_IMMED']
MemberDef cats [u'Counter']
MemberDef desc: [Default: MINUS_PLUS] number and order of phases to present
MemberDef name: no_plus_test
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats [u'Counter']
MemberDef desc: don&apos;t run the plus phase when testing
MemberDef name: trial_init
MemberDef type: LeabraNetwork::StateInit
MemberDef opts [u'DEF_DECAY_STATE']
MemberDef cats [u'Activation']
MemberDef desc: how to initialize network state at start of trial
MemberDef name: sequence_init
MemberDef type: LeabraNetwork::StateInit
MemberDef opts [u'DEF_DO_NOTHING']
MemberDef cats [u'Activation']
MemberDef desc: how to initialize network state at start of a sequence of trials
MemberDef name: phase
MemberDef type: LeabraNetwork::Phase
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: type of settling phase
MemberDef name: nothing_phase
MemberDef type: bool
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Counter']
MemberDef desc: the current phase is a NOTHING phase (phase will indicate MINUS for learning purposes)
MemberDef name: phase_no
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: phase as an ordinal number (regular phase is Phase enum)
MemberDef name: phase_max
MemberDef type: int
MemberDef opts []
MemberDef cats [u'Counter']
MemberDef desc: maximum number of phases to run (note: this is set by Trial_Init depending on phase_order)
MemberDef name: ct_cycle
MemberDef type: int
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Counter']
MemberDef desc: continuous time cycle counter: counts up from start of trial
MemberDef name: cycle_max
MemberDef type: int
MemberDef opts [u'DEF_60', u'CONDEDIT_ON_learn_rule:LEABRA_CHL']
MemberDef cats [u'Counter']
MemberDef desc: maximum number of cycles to settle for: note for CtLeabra_CAL this is overridden by phase specific settings by the settle process
MemberDef name: min_cycles
MemberDef type: int
MemberDef opts [u'DEF_15', u'CONDEDIT_ON_learn_rule:LEABRA_CHL']
MemberDef cats [u'Counter']
MemberDef desc: minimum number of cycles to settle for
MemberDef name: min_cycles_phase2
MemberDef type: int
MemberDef opts [u'DEF_35', u'CONDEDIT_ON_learn_rule:LEABRA_CHL']
MemberDef cats [u'Counter']
MemberDef desc: minimum number of cycles to settle for in second phase
MemberDef name: ct_time
MemberDef type: CtTrialTiming
MemberDef opts [u'CONDEDIT_OFF_learn_rule:LEABRA_CHL']
MemberDef cats [u'Learning']
MemberDef desc: timing parameters for ct leabra trial: Settle_Init sets the cycle_max based on these values
MemberDef name: ct_sravg
MemberDef type: CtSRAvgSpec
MemberDef opts [u'CONDEDIT_OFF_learn_rule:LEABRA_CHL']
MemberDef cats [u'Learning']
MemberDef desc: parameters controlling computation of sravg value as a function of cycles
MemberDef name: ct_sin_i
MemberDef type: CtSineInhibMod
MemberDef opts [u'CONDEDIT_OFF_learn_rule:LEABRA_CHL']
MemberDef cats [u'Learning']
MemberDef desc: sinusoidal inhibition parameters for inhibitory modulations during trial, simulating oscillations resulting from imperfect inhibtory set point behavior
MemberDef name: ct_fin_i
MemberDef type: CtFinalInhibMod
MemberDef opts [u'CONDEDIT_OFF_learn_rule:LEABRA_CHL']
MemberDef cats [u'Learning']
MemberDef desc: final inhibition parameters for extra inhibition to apply during final inhib phase, simulating slow-onset GABA currents
MemberDef name: minus_cycles
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: cycles to settle in the minus phase -- this is the typical settling time statistic to record
MemberDef name: avg_cycles
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: average settling cycles in the minus phase (computed over previous epoch)
MemberDef name: avg_cycles_sum
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: sum for computing current average cycles in this epoch
MemberDef name: avg_cycles_n
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: N for average cycles computation for this epoch
MemberDef name: minus_output_name
MemberDef type: taString
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: output_name in the minus phase -- for recording in logs as network&apos;s response (output_name in plus phase is clamped target value)
MemberDef name: net_misc
MemberDef type: LeabraNetMisc
MemberDef desc: misc network level parameters for leabra
MemberDef name: netin_mod
MemberDef type: int
MemberDef opts [u'DEF_1']
MemberDef cats [u'Optimization']
MemberDef desc: net input computation modulus: how often to compute netinput vs. activation update (2 = faster)
MemberDef name: send_delta
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats [u'Optimization']
MemberDef desc: send netin deltas instead of raw netin: more efficient (automatically sets corresponding unitspec flag)
MemberDef name: send_pct
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: proportion of sending units that actually sent activations on this cycle
MemberDef name: send_pct_n
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Statistic']
MemberDef desc: number of units sending activation this cycle
MemberDef name: send_pct_tot
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats [u'Statistic']
MemberDef desc: total number of units that could send activation this cycle
MemberDef name: avg_send_pct
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: average proportion of units sending activation over an epoch
MemberDef name: avg_send_pct_sum
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: sum for computing current average send_pct per epoch (integrates over cycles and trials etc)
MemberDef name: avg_send_pct_n
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: sum for computing current average send_pct per epoch (integrates over cycles and trials etc)
MemberDef name: maxda_stopcrit
MemberDef type: float
MemberDef opts [u'DEF_0.005']
MemberDef cats [u'Statistic']
MemberDef desc: stopping criterion for max da
MemberDef name: maxda
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: maximum change in activation (delta-activation) over network; used in stopping settling
MemberDef name: trg_max_act_stopcrit
MemberDef type: float
MemberDef opts []
MemberDef cats [u'Statistic']
MemberDef desc: stopping criterion for target-layer maximum activation (can be used for stopping settling)
MemberDef name: trg_max_act
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: target-layer maximum activation (can be used for stopping settling)
MemberDef name: ext_rew
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW', u'VIEW']
MemberDef cats [u'Statistic']
MemberDef desc: external reward value (on this trial)
MemberDef name: avg_ext_rew
MemberDef type: float
MemberDef opts [u'GUI_READ_ONLY', u'SHOW']
MemberDef cats [u'Statistic']
MemberDef desc: average external reward value (computed over previous epoch)
MemberDef name: avg_ext_rew_sum
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: sum for computing current average external reward value in this epoch
MemberDef name: avg_ext_rew_n
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'DMEM_AGG_SUM']
MemberDef cats [u'Statistic']
MemberDef desc: N for average external reward value computation for this epoch
MethodDef name: SetLearnRule_ConSpecs
MethodDef desc: set the current learning rule into all conspecs in given spec group (recursive)
MethodDef proto void SetLearnRule_ConSpecs(BaseSpec_Group* spgp)
MethodDef opts [u'IGMORE']
MethodDef name: SetLearnRule
MethodDef desc: set the current learning rule into the conspecs on this network (done by network UAE only when rule changed)
MethodDef proto void SetLearnRule()
MethodDef opts [u'CAT_ObjectMgmt']
MethodDef name: Compute_Clamp_NetAvg
MethodDef desc: add in clamped netinput values (computed once at start of settle) and average netinput values
MethodDef proto void Compute_Clamp_NetAvg()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Compute_Inhib
MethodDef desc: compute inhibitory conductances (kwta)
MethodDef proto void Compute_Inhib()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Compute_ApplyInhib
MethodDef desc: apply inhibitory conductances from kwta to individual units
MethodDef proto void Compute_ApplyInhib()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Compute_InhibAvg
MethodDef desc: compute average inhibitory conductances (unit-level inhib)
MethodDef proto void Compute_InhibAvg()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Compute_CycSynDep
MethodDef desc: compute cycle-level synaptic depression (must be defined by appropriate subclass) -- called at end of each cycle of computation if net_misc.cyc_syn_dep is on.
MethodDef proto void Compute_CycSynDep()
MethodDef opts [u'CAT_Activation']
MethodDef name: Compute_SRAvg
MethodDef desc: compute sending-receiving activation coproduct averages (CtLeabra_CAL)
MethodDef proto void Compute_SRAvg()
MethodDef opts [u'CAT_Learning']
MethodDef name: Cycle_Run
MethodDef desc: compute one cycle of updating: netinput, inhibition, activations
MethodDef proto void Cycle_Run()
MethodDef opts [u'CAT_Cycle']
MethodDef name: Compute_Active_K
MethodDef desc: determine the active k values for each layer based on pcts, etc (called by Settle_Init)
MethodDef proto void Compute_Active_K()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: DecayPhase
MethodDef desc: decay activations and other state between minus-plus phases (called by Settle_Init)
MethodDef proto void DecayPhase()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: DecayPhase2
MethodDef desc: decay activations and other state between second and third phase (if applicable) (called by Settle_Init)
MethodDef proto void DecayPhase2()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: PhaseInit
MethodDef desc: initialize at start of settling phase -- sets external input flags based on phase (called by Settle_Init)
MethodDef proto void PhaseInit()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: ExtToComp
MethodDef desc: move external input values to comparison values (not currently used)
MethodDef proto void ExtToComp()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: TargExtToComp
MethodDef desc: move target and external input values to comparison (for PLUS_NOTHING, called by Settle_Init)
MethodDef proto void TargExtToComp()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: Compute_HardClamp
MethodDef desc: compute hard clamping from external inputs (called by Settle_Init)
MethodDef proto void Compute_HardClamp()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: Compute_NetinScale
MethodDef desc: compute netinput scaling values by projection (called by Settle_Init)
MethodDef proto void Compute_NetinScale()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: Send_ClampNet
MethodDef desc: send clamped activation netinputs to other layers -- only needs to be computed once (called by Settle_Init)
MethodDef proto void Send_ClampNet()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: Settle_Init_Decay
MethodDef desc: logic for performing decay and updating external input settings as a function of phase
MethodDef proto void Settle_Init_Decay()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: Settle_Init_CtTimes
MethodDef desc: initialize cycles based on network phases for CtLeabra_CAL
MethodDef proto void Settle_Init_CtTimes()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: Settle_Init
MethodDef desc: initialize network for settle-level processing (decay, active k, hard clamp, netscale, clampnet)
MethodDef proto void Settle_Init()
MethodDef opts [u'CAT_SettleInit']
MethodDef name: PostSettle
MethodDef desc: perform computations in layers at end of settling (called by Settle_Final)
MethodDef proto void PostSettle()
MethodDef opts [u'CAT_SettleFinal']
MethodDef name: Settle_Final
MethodDef desc: do final processing after settling (postsettle, Compute_dWt if needed
MethodDef proto void Settle_Final()
MethodDef opts [u'CAT_SettleFinal']
MethodDef name: SetCurLrate
MethodDef desc: set the current learning rate according to the LeabraConSpec parameters
MethodDef proto void SetCurLrate()
MethodDef opts [u'CAT_TrialInit']
MethodDef name: DecayEvent
MethodDef desc: decay activations and other state between events (trial-level)
MethodDef proto void DecayEvent()
MethodDef opts [u'CAT_TrialInit']
MethodDef name: DecayState
MethodDef desc: decay the state in between trials (params in LayerSpec)
MethodDef proto void DecayState()
MethodDef opts [u'CAT_TrialInit']
MethodDef name: Trial_Init
MethodDef desc: initialize at start of trial (SetCurLrate, set phase_max, Decay state)
MethodDef proto void Trial_Init()
MethodDef opts [u'CAT_TrialInit']
MethodDef name: Trial_UpdatePhase
MethodDef desc: update phase based on phase_no -- return false if no more phases need to be run
MethodDef proto void Trial_UpdatePhase()
MethodDef opts [u'CAT_TrialInit']
MethodDef name: EncodeState
MethodDef desc: encode final state information at end of trial for time-based learning across trials
MethodDef proto void EncodeState()
MethodDef opts [u'CAT_TrialFinal']
MethodDef name: Compute_SelfReg_Trial
MethodDef desc: update self-regulation (accommodation, hysteresis) at end of trial
MethodDef proto void Compute_SelfReg_Trial()
MethodDef opts [u'CAT_TrialFinal']
MethodDef name: Compute_dWt_FirstPlus
MethodDef desc: compute weight change after first plus phase has been encountered: standard layers do a weight change here, except under CtLeabra_CAL
MethodDef proto void Compute_dWt_FirstPlus()
MethodDef opts [u'CAT_TrialFinal']
MethodDef name: Compute_dWt_SecondPlus
MethodDef desc: compute weight change after second plus phase has been encountered: standard layers do NOT do a weight change here -- only selected special ones
MethodDef proto void Compute_dWt_SecondPlus()
MethodDef opts [u'CAT_TrialFinal']
MethodDef name: Compute_dWt_Nothing
MethodDef desc: compute weight change after final nothing phase: standard layers do a weight change here under both learning rules
MethodDef proto void Compute_dWt_Nothing()
MethodDef opts [u'CAT_TrialFinal']
MethodDef name: Compute_ExtRew
MethodDef desc: compute external reward information: Must be called in plus phase (phase_no == 1)
MethodDef proto void Compute_ExtRew()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_MinusCycles
MethodDef desc: compute minus-phase cycles (and increment epoch sums) -- at the end of the minus phase (of course)
MethodDef proto void Compute_MinusCycles()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TrialStats_Test
MethodDef desc: determine whether it is time to run trial stats -- typically the minus phase but it depends on network phase_order settings etc
MethodDef proto bool Compute_TrialStats_Test()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Trial_Final
MethodDef desc: do final processing after trial (Compute_dWt, EncodeState)
MethodDef proto void Trial_Final()
MethodDef opts [u'CAT_TrialFinal']
MethodDef name: Compute_AbsRelNetin
MethodDef desc: compute the absolute layer-level and relative netinput from different projections into layers in network
MethodDef proto void Compute_AbsRelNetin()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AvgAbsRelNetin
MethodDef desc: compute time-average absolute layer-level and relative netinput from different projections into layers in network (e.g. over epoch timescale)
MethodDef proto void Compute_AvgAbsRelNetin()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_TrgRelNetin
MethodDef desc: compute target rel netin based on projection direction information plus the adapt_rel_net values in the conspec
MethodDef proto void Compute_TrgRelNetin()
MethodDef opts [u'MENU', u'MENU_SEP_BEFORE', u'CONFIRM', u'CAT_Learning']
MethodDef name: Compute_AdaptRelNetin
MethodDef desc: adapt the relative input values by changing the conspec wt_scale.rel parameter; See Compute_AdaptAbsNetin for adaptation of wt_scale.abs parameters to achieve good netinput values overall
MethodDef proto void Compute_AdaptRelNetin()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_AdaptAbsNetin
MethodDef desc: adapt the absolute net input values by changing the conspec wt_scale.abs parameter
MethodDef proto void Compute_AdaptAbsNetin()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_AvgCycles
MethodDef desc: compute average cycles (at an epoch-level timescale)
MethodDef proto void Compute_AvgCycles()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AvgExtRew
MethodDef desc: compute average external reward information (at an epoch-level timescale)
MethodDef proto void Compute_AvgExtRew()
MethodDef opts [u'CAT_Statistic']
MethodDef name: Compute_AvgSendPct
MethodDef desc: compute average sending pct (at an epoch-level timescale)
MethodDef proto void Compute_AvgSendPct()
MethodDef opts [u'CAT_Statistic']
MethodDef name: GraphInhibMod
MethodDef desc: graph the overall inhibitory modulation curve, including sinusoidal and final -- if flip_sign is true, then sign is reversed so that graph looks like the activation profile instead of the inhibition profile
MethodDef proto void GraphInhibMod(bool flip_sign = true, DataTable* graph_data = __null)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'Compute_AbsRelNetin', u'Compute_Active_K', u'Compute_AdaptAbsNetin', u'Compute_AdaptRelNetin', u'Compute_ApplyInhib', u'Compute_AvgAbsRelNetin', u'Compute_AvgCycles', u'Compute_AvgExtRew', u'Compute_AvgSendPct', u'Compute_Clamp_NetAvg', u'Compute_CycSynDep', u'Compute_ExtRew', u'Compute_HardClamp', u'Compute_Inhib', u'Compute_InhibAvg', u'Compute_MinusCycles', u'Compute_NetinScale', u'Compute_SRAvg', u'Compute_SelfReg_Trial', u'Compute_TrgRelNetin', u'Compute_TrialStats_Test', u'Compute_dWt_FirstPlus', u'Compute_dWt_Nothing', u'Compute_dWt_SecondPlus', u'Cycle_Run', u'DecayEvent', u'DecayPhase', u'DecayPhase2', u'DecayState', u'EncodeState', u'ExtToComp', u'GraphInhibMod', u'PhaseInit', u'PostSettle', u'Send_ClampNet', u'SetCurLrate', u'SetLearnRule', u'SetLearnRule_ConSpecs', u'Settle_Final', u'Settle_Init', u'Settle_Init_CtTimes', u'Settle_Init_Decay', u'TargExtToComp', u'Trial_Final', u'Trial_Init', u'Trial_UpdatePhase']
########################################################################
TypeDef len: 11
TypeDef name:  LeabraProject
TypeDef type: class
TypeDef desc: project for Leabra models
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraEngine
TypeDef type: class
TypeDef desc: abstract definition of LeabraEngine
TypeDef cats:, [u'NetEngine']
TypeDef opts:, [u'TOKENS', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taEngine', u'NetEngine']
TypeDef children: [u'LeabraThreadEngine']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraTask
TypeDef type: class
TypeDef desc: one instance of a task for doing Leabra algorithm calculations -- concretely defines the default impl in absence of any other engine
TypeDef cats:, [u'Task']
TypeDef opts:, [u'TOKENS', u'VIRT_BASE', u'NO_INSTANCE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taTask']
TypeDef children: [u'LeabraThreadEngineTask']
EnumDef name: P_Compute_Act
EnumDef val: P_Compute_Act
EnumDef name: P_Compute_dWt
EnumDef val: P_Compute_dWt
EnumDef name: P_Compute_Weights
EnumDef val: P_Compute_Weights
EnumDef name: P_Send_Netin
EnumDef val: P_Send_Netin
EnumDef name: P_Send_NetinDelta_flat
EnumDef val: P_Send_NetinDelta_flat
EnumDef name: P_Send_NetinDelta_list
EnumDef val: P_Send_NetinDelta_list
EnumDef names: [u'Proc']
########################################################################
TypeDef len: 15
TypeDef name:  WtScaleSpec
TypeDef type: class
TypeDef desc: weight scaling specification
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: abs
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: absolute scaling (not subject to normalization: directly multiplies weight values)
MemberDef name: rel
MemberDef type: float
MemberDef desc: [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)
MethodDef name: NetScale
MethodDef proto float NetScale()
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults', u'NetScale']
########################################################################
TypeDef len: 15
TypeDef name:  WtScaleSpecInit
TypeDef type: class
TypeDef desc: initial weight scaling values -- applied to active WtScaleSpec values during InitWeights -- useful for adapting scale values
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: init
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: use these scaling values to initialize the wt_scale parameters during InitWeights (if false, these values have no effect at all)
MemberDef name: abs
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_init', u'DEF_1']
MemberDef cats []
MemberDef desc: absolute scaling (not subject to normalization: directly multiplies weight values)
MemberDef name: rel
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_init']
MemberDef cats []
MemberDef desc: [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  WtSigSpec
TypeDef type: class
TypeDef desc: sigmoidal weight function specification
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: gain
MemberDef type: float
MemberDef opts [u'DEF_6']
MemberDef cats []
MemberDef desc: gain (contrast, sharpness) of the weight contrast function (1 = linear)
MemberDef name: off
MemberDef type: float
MemberDef opts [u'DEF_1.25']
MemberDef cats []
MemberDef desc: offset of the function (1=centered at .5, &gt;1=higher, &lt;1=lower)
MethodDef name: SigFun
MethodDef desc: function for implementing inverse of weight sigmoid
MethodDef proto float SigFun(float w, float gain, float off)
MethodDef name: SigFunInv
MethodDef proto float SigFunInv(float w, float gain, float off)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults', u'SigFun', u'SigFunInv']
########################################################################
TypeDef len: 15
TypeDef name:  LearnMixSpec
TypeDef type: class
TypeDef desc: mixture of learning factors (hebbian vs. error-driven) specification
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: hebb
MemberDef type: float
MemberDef desc: [Default: .01] amount of hebbian learning (should be relatively small, can be effective at .0001)
MemberDef name: err
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: [Default: .99] amount of error driven learning, automatically computed to be 1-hebb
MemberDef name: err_sb
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: apply exponential soft-bounding to the error learning component (applied in dWt for Leabra_CHL and in wt update for Leabra_CAL)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  SAvgCorSpec
TypeDef type: class
TypeDef desc: sending average activation correction specifications: affects hebbian learning and netinput computation
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: cor
MemberDef type: float
MemberDef opts [u'DEF_0.4']
MemberDef cats []
MemberDef desc: proportion of correction to apply (0=none, 1=all, .5=half, etc)
MemberDef name: thresh
MemberDef type: float
MemberDef opts [u'DEF_0.001']
MemberDef cats []
MemberDef desc: threshold of sending average activation below which learning does not occur (prevents learning when there is no input)
MemberDef name: norm_con_n
MemberDef type: bool
MemberDef opts [u'DEF_false', u'AKA_div_gp_n']
MemberDef cats []
MemberDef desc: in normalizing netinput, divide by the actual number of connections (recv group n), not the overall number of units in the sending layer; this is good when units only receive from a small fraction of sending layer units
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraDwtNorm
TypeDef type: class
TypeDef desc: renormalize weight changes -- makes zero sum
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: on
MemberDef type: bool
MemberDef desc: whether to do normalized dwt Compute_Weights function: makes weight changes zero sum
MemberDef name: norm_pct
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: what proportion of full normalization to apply to the delta weights (0 = no norm, 1 = full norm)
########################################################################
TypeDef len: 15
TypeDef name:  AdaptRelNetinSpec
TypeDef type: class
TypeDef desc: parameters to adapt the relative netinput strength of different projections (to be used at epoch-level in AdaptRelNetin call, after AvgAbsRelNetin vals on projection have been computed)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: whether to adapt relative netinput values for this connection (only applied if AdaptAbsNetin is called, after AbsRelNetin and AvgAbsRelNetin)
MemberDef name: trg_fm_input
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: (typically 0.85) target relative netinput for fm_input projections (set by Compute_TrgRelNetin fun): all such projections should sum to this amount (divide equally among them) -- this plus fm_output and lateral should sum to 1. if other types are missing, this is increased in proportion
MemberDef name: trg_fm_output
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: (typically 0.10) target relative netwinput for fm_output projections (set by Compute_TrgRelNetin fun): all such projections should sum to this amount (divide equally among them) -- this plus fm_input and lateral should sum to 1. if other types are missing, this is increased in proportion
MemberDef name: trg_lateral
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: (typically 0.05) target relative netinput for lateral projections (set by Compute_TrgRelNetin fun): all such projections should sum to this amount (divide equally among them) -- this plus fm_input and lateral should sum to 1. if other types are missing, this is increased in proportion
MemberDef name: trg_sum
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: sum of trg values -- should be 1!
MemberDef name: tol_lg
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.05']
MemberDef cats []
MemberDef desc: tolerance from target value (as a proportion of target value) on large numbers (&gt;.25), within which parameters are not adapted
MemberDef name: tol_sm
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.2']
MemberDef cats []
MemberDef desc: tolerance from target value (as a proportion of target value) on small numbers (&lt;.25), within which parameters are not adapted
MemberDef name: rel_lrate
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.2']
MemberDef cats []
MemberDef desc: adpatation &apos;learning&apos; rate on wt_scale.rel parameter
MethodDef name: CheckInTolerance
MethodDef desc: check if value is inside the tolerance from trg
MethodDef proto bool CheckInTolerance(float trg, float val)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'CheckInTolerance', u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  ActFunSpec
TypeDef type: class
TypeDef desc: activation function specifications
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: STD
EnumDef val: STD
EnumDef: include all currents (except bias weights) in inhibitory threshold computation
EnumDef name: NO_A
EnumDef val: NO_A
EnumDef: exclude gc.a current: allows accommodation to knock out units from kwta active list, without other units coming in to take their place
EnumDef name: NO_H
EnumDef val: NO_H
EnumDef: exclude gc.h current: prevent hysteresis current from affecting inhibitory threshold computation
EnumDef name: NO_AH
EnumDef val: NO_AH
EnumDef: exclude gc.a and gc.h currents: prevent both accommodation and hysteresis currents from affecting inhibitory threshold computation
EnumDef name: ALL
EnumDef val: ALL
EnumDef: include all currents INCLUDING bias weights
EnumDef names: [u'IThrFun']
MemberDef name: thr
MemberDef type: float
MemberDef opts [u'DEF_0.25']
MemberDef cats []
MemberDef desc: threshold value Theta (Q) for firing output activation
MemberDef name: gain
MemberDef type: float
MemberDef opts [u'DEF_600']
MemberDef cats []
MemberDef desc: gain (gamma) of the sigmoidal rate-coded activation function
MemberDef name: nvar
MemberDef type: float
MemberDef opts [u'DEF_0.005']
MemberDef cats []
MemberDef desc: variance of the Gaussian noise kernel for convolving with XX1 in NOISY_XX1
MemberDef name: avg_dt
MemberDef type: float
MemberDef opts [u'DEF_0.005']
MemberDef cats []
MemberDef desc: time constant for integrating activation average (computed across trials)
MemberDef name: i_thr
MemberDef type: ActFunSpec::IThrFun
MemberDef desc: [STD or NO_AH for da mod units) how to compute the inhibitory threshold for kWTA functions (what currents to include or exclude in determining what amount of inhibition would keep the unit just at threshold firing) -- for units with dopamine-like modulation using the a and h currents, NO_AH makes learning much more reliable because otherwise kwta partially compensates for the da modulation
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  SpikeFunSpec
TypeDef type: class
TypeDef desc: spiking activation function specs -- conductance is computed postsynaptically using an alpha function based on spike pulses sent presynaptically
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: g_gain
MemberDef type: float
MemberDef opts [u'DEF_4']
MemberDef cats []
MemberDef desc: multiplier for the spike-generated conductances -- needed to recalibrate the alpha-function currents relative to rate code net input which is overall larger -- in general making this the same as the decay constant works well (results in consistent peak current, but differential integrated current over time as a function of rise and decay)
MemberDef name: rise
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: exponential rise time (in cycles) of the synaptic conductance according to the alpha function 1/(decay - rise) [e^(-t/decay) - e^(-t/rise)] -- set to 0 to only include decay time (1/decay e^(-t/decay))
MemberDef name: decay
MemberDef type: float
MemberDef opts [u'DEF_4']
MemberDef cats []
MemberDef desc: exponential decay time (in cycles) of the synaptic conductance according to the alpha function 1/(decay - rise) [e^(-t/decay) - e^(-t/rise)] -- set to 0 to implement a delta function
MemberDef name: window
MemberDef type: int
MemberDef opts [u'DEF_20']
MemberDef cats []
MemberDef desc: spike integration window -- how long to keep spike information around (should be long enough to incorporate the full alpha function)
MemberDef name: v_m_r
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: post-spiking membrane potential to reset to, produces refractory effect
MemberDef name: eq_gain
MemberDef type: float
MemberDef opts [u'DEF_10']
MemberDef cats []
MemberDef desc: gain for computing act_eq relative to actual average: act_eq = eq_gain * (spikes/cycles)
MemberDef name: eq_dt
MemberDef type: float
MemberDef opts [u'DEF_0.02']
MemberDef cats []
MemberDef desc: if non-zero, eq is computed as a running average with this time constant
MemberDef name: hard_gain
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: gain for hard-clamped external inputs, mutliplies ext. constant external inputs otherwise have too much influence compared to spiking ones: Note: soft clamping is strongly recommended
MemberDef name: oneo_decay
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: g_gain/decay
MemberDef name: oneo_decay_sq
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: g_gain/decay^2
MemberDef name: oneo_decay_rise
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: g_gain/(decay-rise)
MethodDef name: ComputeAlpha
MethodDef proto float ComputeAlpha(float t)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'ComputeAlpha', u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  DepressSpec
TypeDef type: class
TypeDef desc: depressing synapses activation function specs
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
EnumDef name: P_NXX1
EnumDef val: P_NXX1
EnumDef: probability of spiking is based on NOISY_XX1 f(Vm - Q)
EnumDef name: P_LINEAR
EnumDef val: P_LINEAR
EnumDef: probability of spiking is based on LINEAR f(Vm - Q)
EnumDef names: [u'PSpike']
MemberDef name: p_spike
MemberDef type: DepressSpec::PSpike
MemberDef desc: how to compute the probability of spiking, which is then mult by amp of spiking
MemberDef name: rec
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: rate of recovery of spike amplitude (determines overall time constant of depression function)
MemberDef name: asymp_act
MemberDef type: float
MemberDef opts [u'DEF_0.5']
MemberDef cats []
MemberDef desc: asymptotic activation value (as proportion of 1) for a fully active unit (determines depl value)
MemberDef name: depl
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: rate of depletion of spike amplitude as a function of activation output (computed from rec, asymp_act)
MemberDef name: max_amp
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: maximum amplitude required to maintain asymptotic firing at normal clamp levels (copied to act_range.max)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  SynDelaySpec
TypeDef type: class
TypeDef desc: synaptic delay -- activation sent to other units is delayed by a given number of cycles
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: on
MemberDef type: bool
MemberDef desc: is synaptic delay active?
MemberDef name: delay
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: number of cycles to delay for
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  OptThreshSpec
TypeDef type: class
TypeDef desc: optimization thresholds for faster processing
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: send
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats []
MemberDef desc: don&apos;t send activation when act &lt;= send -- greatly speeds processing
MemberDef name: delta
MemberDef type: float
MemberDef opts [u'DEF_0.005']
MemberDef cats []
MemberDef desc: don&apos;t send activation changes until they exceed this threshold: only for when LeabraNetwork::send_delta is on!
MemberDef name: learn
MemberDef type: float
MemberDef opts [u'DEF_0.01']
MemberDef cats []
MemberDef desc: don&apos;t learn on recv unit weights when both phase acts &lt;= learn
MemberDef name: phase_dif
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: don&apos;t learn when +/- phase difference ratio (- / +) &lt; phase_dif (.8 when used, but off by default)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  DtSpec
TypeDef type: class
TypeDef desc: time constants
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: vm
MemberDef type: float
MemberDef opts [u'DEF_0.3']
MemberDef cats []
MemberDef desc: membrane potential time constant -- if units oscillate too much, then this is too high (but see d_vm_max for another solution)
MemberDef name: net
MemberDef type: float
MemberDef opts [u'DEF_0.7']
MemberDef cats []
MemberDef desc: net input time constant -- how fast to update net input (damps oscillations)
MemberDef name: midpoint
MemberDef type: bool
MemberDef desc: use the midpoint method in computing the vm value -- better avoids oscillations and allows a larger dt.vm parameter to be used
MemberDef name: d_vm_max
MemberDef type: float
MemberDef opts [u'DEF_0.025']
MemberDef cats []
MemberDef desc: maximum change in vm at any timestep (limits blowup)
MemberDef name: vm_eq_cyc
MemberDef type: int
MemberDef opts [u'AKA_cyc0_vm_eq', u'DEF_0']
MemberDef cats []
MemberDef desc: number of cycles to compute the vm as equilibirium potential given current inputs: set to 1 to quickly activate input layers; set to 100 to always use this computation
MemberDef name: vm_eq_dt
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: time constant for integrating the vm_eq values: how quickly to move toward the current eq value from previous vm value
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraChannels
TypeDef type: class
TypeDef desc: channels used in Leabra
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: e
MemberDef type: float
MemberDef desc: Excitatory (glutamatergic synaptic sodium (Na) channel)
MemberDef name: l
MemberDef type: float
MemberDef desc: Constant leak (potassium, K+) channel
MemberDef name: i
MemberDef type: float
MemberDef desc: inhibitory
MemberDef name: h
MemberDef type: float
MemberDef desc: hysteresis (Ca)
MemberDef name: a
MemberDef type: float
MemberDef desc: accomodation (k)
########################################################################
TypeDef len: 15
TypeDef name:  VChanSpec
TypeDef type: class
TypeDef desc: voltage gated channel specs
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED', u'DEF_false']
MemberDef cats []
MemberDef desc: true if channel is on
MemberDef name: b_inc_dt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'AKA_b_dt']
MemberDef cats []
MemberDef desc: time constant for increases in basis variable (basis ~ intracellular calcium which builds up slowly as function of activation)
MemberDef name: b_dec_dt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: time constant for decreases in basis variable (basis ~ intracellular calcium which builds up slowly as function of activation)
MemberDef name: a_thr
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: activation threshold of the channel: when basis &gt; a_thr, conductance starts to build up (channels open)
MemberDef name: d_thr
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: deactivation threshold of the channel: when basis &lt; d_thr, conductance diminshes (channels close)
MemberDef name: g_dt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: time constant for changing conductance (activating or deactivating) -- if = 1, then gc is equal to the basis if channel is on
MemberDef name: init
MemberDef type: bool
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: initialize variables when state is intialized between trials (else with weights)
MemberDef name: trl
MemberDef type: bool
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: update after every trial instead of every cycle -- time constants need to be much larger in general
MethodDef name: UpdateBasis
MethodDef proto void UpdateBasis(float&amp; basis, bool&amp; on_off, float&amp; gc, float act)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults', u'UpdateBasis']
########################################################################
TypeDef len: 15
TypeDef name:  ActRegSpec
TypeDef type: class
TypeDef desc: activity regulation via weight adjustment -- weights are multiplied by given factors when average activity is out of range -- multiplication preserves overall weight pattern, just changes scaling
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: whether activity regulation is on (active) or not
MemberDef name: bias_only
MemberDef type: bool
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: only apply corrective weight changes to bias weights
MemberDef name: min
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: [.01 if in use] increase weights for units below this level of average activation
MemberDef name: max
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: [.4 -- .8 typical] decrease weights for units above this level of average activation
MemberDef name: dec_wt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: pre-lrate amount to subtract from weights as long as average activation is &gt; max (dwt -= cur_lrate * dec_wt * wt) -- note: multiplicative on existing weights to preserve overall weight pattern
MemberDef name: inc_wt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on']
MemberDef cats []
MemberDef desc: pre-lrate amount to add to weights as long as average activation is &lt; min (dwt += cur_lrate * inc_wt * wt) -- note: multiplicative on existing weights to preserve overall weight pattern
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  MaxDaSpec
TypeDef type: class
TypeDef desc: how to compute the maxda value, which serves as a stopping criterion for settling
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
EnumDef name: DA_ONLY
EnumDef val: DA_ONLY
EnumDef: just use da
EnumDef name: INET_ONLY
EnumDef val: INET_ONLY
EnumDef: just use inet
EnumDef name: INET_DA
EnumDef val: INET_DA
EnumDef: use inet if no activity, then use da
EnumDef names: [u'dAValue']
MemberDef name: val
MemberDef type: MaxDaSpec::dAValue
MemberDef opts [u'DEF_INET_DA']
MemberDef cats []
MemberDef desc: value to use for computing delta-activation (change in activation over cycles of settling).
MemberDef name: inet_scale
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: how to scale the inet measure to be like da
MemberDef name: lay_avg_thr
MemberDef type: float
MemberDef opts [u'DEF_0.01']
MemberDef cats []
MemberDef desc: threshold for layer average activation to switch to da fm Inet
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  DaModSpec
TypeDef type: class
TypeDef desc: specs for effects of da-based modulation: plus-phase = learning effects
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
EnumDef name: PLUS_CONT
EnumDef val: PLUS_CONT
EnumDef: da modulates plus-phase activations (only) in a continuous manner
EnumDef name: PLUS_POST
EnumDef val: PLUS_POST
EnumDef: da modulates plus-phase activations (only), at the end of the plus phase
EnumDef names: [u'ModType']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: whether to actually modulate activations by da values
MemberDef name: mod
MemberDef type: DaModSpec::ModType
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: how to apply DA modulation
MemberDef name: gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: gain multiplier of da values
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 13
TypeDef name:  VChanBasis
TypeDef type: class
TypeDef desc: basis variables for vchannels
TypeDef cats:, []
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: hyst
MemberDef type: float
MemberDef desc: hysteresis
MemberDef name: acc
MemberDef type: float
MemberDef desc: fast accomodation
MemberDef name: hyst_on
MemberDef type: bool
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: binary thresholded mode state variable, hyst
MemberDef name: acc_on
MemberDef type: bool
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: binary thresholded mode state variable, acc
MemberDef name: g_h
MemberDef type: float
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: hysteresis conductance
MemberDef name: g_a
MemberDef type: float
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: accomodation conductance
########################################################################
TypeDef len: 13
TypeDef name:  LeabraUnitChans
TypeDef type: class
TypeDef desc: channels used in Leabra units
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: l
MemberDef type: float
MemberDef desc: leak
MemberDef name: i
MemberDef type: float
MemberDef opts [u'DMEM_SHARE_SET_1']
MemberDef cats []
MemberDef desc: inhibitory
MemberDef name: h
MemberDef type: float
MemberDef desc: hysteresis (Ca)
MemberDef name: a
MemberDef type: float
MemberDef desc: accomodation (K)
########################################################################
TypeDef len: 11
TypeDef name:  LeabraSort
TypeDef type: class
TypeDef desc: used for sorting units in kwta computation
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER']
MethodDef name: FindNewNetPos
MethodDef desc: find position in list for a new net value
MethodDef proto int FindNewNetPos(float nw_net)
MethodDef name: FastInsertLink
MethodDef desc: faster version of insert link fun
MethodDef proto void FastInsertLink(void* it, int where)
MethodDef names [u'FastInsertLink', u'FindNewNetPos']
########################################################################
TypeDef len: 17
TypeDef name:  LeabraInhibSpec
TypeDef type: class
TypeDef desc: specifies how inhibition is computed in Leabra system (kwta, unit inhib, etc)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: KWTA_INHIB
EnumDef val: KWTA_INHIB
EnumDef: between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)
EnumDef name: KWTA_AVG_INHIB
EnumDef val: KWTA_AVG_INHIB
EnumDef: average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)
EnumDef name: KWTA_KV2K
EnumDef val: KWTA_KV2K
EnumDef: average of top k vs avg of next k (2k) -- avoids long &apos;tail&apos; of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB
EnumDef name: KWTA_COMP_COST
EnumDef val: KWTA_COMP_COST
EnumDef: competitor cost kwta function: inhibition is i_kwta_pt below the k&apos;th unit&apos;s threshold inhibition value if there are no strong competitors (&gt;comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility
EnumDef name: AVG_MAX_PT_INHIB
EnumDef val: AVG_MAX_PT_INHIB
EnumDef: put inhib value at i_kwta_pt between avg and max values for layer
EnumDef name: MAX_INHIB
EnumDef val: MAX_INHIB
EnumDef: put inhib value at i_kwta_pt below max guy in layer
EnumDef name: UNIT_INHIB
EnumDef val: UNIT_INHIB
EnumDef: unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)
EnumDef names: [u'InhibType']
MemberDef name: type
MemberDef type: LeabraInhibSpec::InhibType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: how to compute inhibition (g_i)
MemberDef name: kwta_pt
MemberDef type: float
MemberDef desc: [Default: .25 for KWTA_INHIB and KWTA_KV2K, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)
MemberDef name: min_i
MemberDef type: float
MemberDef desc: minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation
MemberDef name: comp_thr
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_type:KWTA_COMP_COST']
MemberDef cats []
MemberDef desc: [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k&apos;th inhibition and those above this threshold are counted as competitors
MemberDef name: comp_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_type:KWTA_COMP_COST']
MemberDef cats []
MemberDef desc: Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level
MemberDef name: gp_pt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_type:AVG_MAX_PT_INHIB']
MemberDef cats []
MemberDef desc: [Default: .2] for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  KWTASpec
TypeDef type: class
TypeDef desc: specifies k-winner-take-all parameters
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: USE_K
EnumDef val: USE_K
EnumDef: use the k specified directly
EnumDef name: USE_PCT
EnumDef val: USE_PCT
EnumDef: use the percentage pct to compute the k as a function of layer size
EnumDef name: USE_PAT_K
EnumDef val: USE_PAT_K
EnumDef: use the activity level of the current event pattern (k = of units &gt; pat_q)
EnumDef names: [u'K_From']
MemberDef name: k_from
MemberDef type: KWTASpec::K_From
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: how is the active_k determined: directly by k, by pct, or by no. of units where ext &gt; pat_q
MemberDef name: k
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_k_from:USE_K']
MemberDef cats []
MemberDef desc: desired number of active units in the layer
MemberDef name: pct
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_k_from:USE_PCT']
MemberDef cats []
MemberDef desc: desired proportion of activity (used to compute a k value based on layer size, .25 std)
MemberDef name: diff_act_pct
MemberDef type: bool
MemberDef opts [u'DEF_false', u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: if true, use different actual percent activity for overall layer activation
MemberDef name: act_pct
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_diff_act_pct:true']
MemberDef cats []
MemberDef desc: actual percent activity to put in kwta.pct field of layer
MemberDef name: gp_i
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX&apos;d, and each item&apos;s inhib is the MAX of this pooled MAX value and its original own value
MemberDef name: gp_g
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_gp_i:true']
MemberDef cats []
MemberDef desc: how much this item (layer or unit group) contributes to the pooled layer group values
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  KwtaTieBreak
TypeDef type: class
TypeDef desc: break ties where all the units have similar netinputs and thus none get activated. this lowers the inhibition so that all get active to some extent
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: whether to perform the tie breaking function at all
MemberDef name: k_thr
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_1']
MemberDef cats []
MemberDef desc: threshold on inhibitory threshold (i_thr) for top kwta units before tie break is engaged: don&apos;t break ties for weakly activated layers
MemberDef name: diff_thr
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.2']
MemberDef cats []
MemberDef desc: threshold on difference ratio between top k and rest (k_ithr - k1_ithr) / k_ithr for a tie to be indicated. This is also how much k1_ithr is reduced relative to k_ithr to fix the tie: sets a lower limit on this value. larger values mean higher overall activations during ties, but you dont&apos; want to activate the tie mechanism unnecessarily either.
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  AdaptISpec
TypeDef type: class
TypeDef desc: specifies adaptive kwta specs (esp for avg-based)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: NONE
EnumDef val: NONE
EnumDef: don&apos;t adapt anything
EnumDef name: KWTA_PT
EnumDef val: KWTA_PT
EnumDef: adapt kwta point (i_kwta_pt) based on running-average layer activation as compared to target value
EnumDef name: G_BAR_I
EnumDef val: G_BAR_I
EnumDef: adapt g_bar.i for unit inhibition values based on layer activation at any point in time
EnumDef name: G_BAR_IL
EnumDef val: G_BAR_IL
EnumDef: adapt g_bar.i and g_bar.l for unit inhibition &amp; leak values based on layer activation at any point in time
EnumDef names: [u'AdaptType']
MemberDef name: type
MemberDef type: AdaptISpec::AdaptType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: what to adapt, or none for nothing
MemberDef name: tol
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_type:NONE', u'DEF_0.02']
MemberDef cats []
MemberDef desc: tolerance around target avg act before changing parameter
MemberDef name: p_dt
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_type:NONE', u'DEF_0.1', u'AKA_pt_dt']
MemberDef cats []
MemberDef desc: time constant for changing the parameter (i_kwta_pt or g_bar.i)
MemberDef name: mx_d
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_type:NONE', u'DEF_0.9']
MemberDef cats []
MemberDef desc: maximum deviation (proportion) from initial parameter setting allowed
MemberDef name: l
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_type:G_BAR_IL']
MemberDef cats []
MemberDef desc: proportion of difference from target activation to allocate to the leak in G_BAR_IL mode
MemberDef name: a_dt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_type:KWTA_PT', u'DEF_0.005']
MemberDef cats []
MemberDef desc: time constant for integrating average average activation, which is basis for adapting i_kwta_pt
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  ClampSpec
TypeDef type: class
TypeDef desc: specs for clamping
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: hard
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED', u'DEF_true']
MemberDef cats []
MemberDef desc: whether to hard clamp inputs to this layer or not
MemberDef name: gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_hard:true', u'DEF_0.5']
MemberDef cats []
MemberDef desc: starting soft clamp gain factor (net = gain * ext)
MemberDef name: d_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_hard:true']
MemberDef cats []
MemberDef desc: [Default: 0] for soft clamp, delta to increase gain when target units not &gt; .5 (0 = off, .1 std when used)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  DecaySpec
TypeDef type: class
TypeDef desc: holds decay values
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: event
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: proportion decay of state vars between events
MemberDef name: phase
MemberDef type: float
MemberDef desc: [1 for Leabra_CHL, 0 for CtLeabra_CAL] proportion decay of state vars between minus and plus phases
MemberDef name: phase2
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: proportion decay of state vars between 2nd set of phases (if appl, 0 std)
MemberDef name: clamp_phase2
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: if true, hard-clamp second plus phase activations to prev plus phase (only special layers will then update -- optimizes speed)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 13
TypeDef name:  CtLayerInhibMod
TypeDef type: class
TypeDef desc: layer-level sinusoidal and final inhibitory modulation parameters simulating initial burst of activation and subsequent oscillatory ringing
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: use_sin
MemberDef type: bool
MemberDef desc: if on, actually use layer-level sinusoidal values (burst_i, trough_i) -- else use network level
MemberDef name: burst_i
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_use_sin']
MemberDef cats []
MemberDef desc: [.02] maximum reduction in inhibition as a proportion of computed kwta value to subtract for positive activation (burst) phase of wave -- value should be a positive number
MemberDef name: trough_i
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_use_sin']
MemberDef cats []
MemberDef desc: [.02] maximum extra inhibition as proportion of computed kwta value to add for negative activation (trough) phase of wave -- value shoudl be a positive number
MemberDef name: use_fin
MemberDef type: bool
MemberDef desc: if on, actually use layer-level final values (inhib_i) -- else use network level
MemberDef name: inhib_i
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_use_fin']
MemberDef cats []
MemberDef desc: [.05 when in use] maximum extra inhibition as proportion of computed kwta value to add during final inhib phase
########################################################################
TypeDef len: 15
TypeDef name:  LayNetRescaleSpec
TypeDef type: class
TypeDef desc: global rescale of layer netinputs to prevent blowup
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: whether to apply layer netinput rescaling
MemberDef name: max_net
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.6']
MemberDef cats []
MemberDef desc: target maximum netinput value
MemberDef name: net_extra
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.2']
MemberDef cats []
MemberDef desc: extra netin value to add to actual to anticipate further increases, preventing too many updates
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  LayAbsNetAdaptSpec
TypeDef type: class
TypeDef desc: adapt absolute netinput values by adjusting the wt_scale.abs parameters in the conspecs of projections into this layer, based on differences between time-averaged max netinput values and the target
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: whether to apply layer netinput rescaling
MemberDef name: trg_net
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.5']
MemberDef cats []
MemberDef desc: target maximum netinput value
MemberDef name: tol
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.1']
MemberDef cats []
MemberDef desc: tolerance around target value -- if actual value is within this tolerance from target, then do not adapt
MemberDef name: abs_lrate
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.2']
MemberDef cats []
MemberDef desc: learning rate for adapting the wt_scale.abs parameters for all projections into layer
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 7
TypeDef name:  LeabraLayerSpec_SPtr
TypeDef type: class
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'SMART_POINTER', u'INSTANCE']
########################################################################
TypeDef len: 15
TypeDef name:  AvgMaxVals
TypeDef type: class
TypeDef desc: holds average and max statistics
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: avg
MemberDef type: float
MemberDef opts [u'DMEM_AGG_SUM']
MemberDef cats []
MemberDef desc: average value
MemberDef name: max
MemberDef type: float
MemberDef opts [u'DMEM_AGG_SUM']
MemberDef cats []
MemberDef desc: maximum value
MemberDef name: max_i
MemberDef type: int
MemberDef desc: index of unit with maximum value
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  KWTAVals
TypeDef type: class
TypeDef desc: holds values for kwta stuff
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: k
MemberDef type: int
MemberDef desc: target number of active units for this collection
MemberDef name: pct
MemberDef type: float
MemberDef desc: actual percent activity in group
MemberDef name: k_ithr
MemberDef type: float
MemberDef desc: inhib threshold for k unit (top k for kwta_avg)
MemberDef name: k1_ithr
MemberDef type: float
MemberDef desc: inhib threshold for k+1 unit (other units for kwta_avg)
MemberDef name: ithr_r
MemberDef type: float
MemberDef desc: log of ratio of ithr values (indicates signal differentiation)
MemberDef name: ithr_diff
MemberDef type: float
MemberDef desc: normalized difference ratio for k vs k+1 ithr values: (k_ithr - k1_ithr) / k_ithr
MemberDef name: tie_brk
MemberDef type: int
MemberDef desc: was a tie break operation applied to this layer based on ithr_diff value?
MethodDef name: Compute_Pct
MethodDef proto void Compute_Pct(int n_units)
MethodDef name: Compute_IThrR
MethodDef desc: compute ithr_r ratio value
MethodDef proto void Compute_IThrR()
MethodDef names [u'Compute_IThrR', u'Compute_Pct']
########################################################################
TypeDef len: 13
TypeDef name:  AdaptIVals
TypeDef type: class
TypeDef desc: holds values for adapting kwta stuff
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: avg_avg
MemberDef type: float
MemberDef desc: average of the average activation in a layer
MemberDef name: i_kwta_pt
MemberDef type: float
MemberDef desc: adapting point to place inhibition between k and k+1 for kwta
MemberDef name: g_bar_i
MemberDef type: float
MemberDef desc: adapting g_bar.i value
MemberDef name: g_bar_l
MemberDef type: float
MemberDef desc: adapting g_bar.l value
########################################################################
TypeDef len: 15
TypeDef name:  InhibVals
TypeDef type: class
TypeDef desc: holds values for inhibition
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: kwta
MemberDef type: float
MemberDef desc: inhibition due to kwta function
MemberDef name: g_i
MemberDef type: float
MemberDef desc: overall value of the inhibition
MemberDef name: gp_g_i
MemberDef type: float
MemberDef desc: g_i from the layer or unit group, if applicable
MemberDef name: g_i_orig
MemberDef type: float
MemberDef desc: original value of the inhibition (before any layer group effects set in)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraNetMisc
TypeDef type: class
TypeDef desc: misc network-level parameters for Leabra
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: cyc_syn_dep
MemberDef type: bool
MemberDef desc: if true, enable synaptic depression calculations at the synapse level (also need conspecs to implement this -- this just enables computation)
MemberDef name: syn_dep_int
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_cyc_syn_dep']
MemberDef cats []
MemberDef desc: [20] synaptic depression interval -- how frequently to actually perform synaptic depression within a trial (uses ct_cycle variable which counts up continously through trial)
########################################################################
TypeDef len: 13
TypeDef name:  CtTrialTiming
TypeDef type: class
TypeDef desc: timing parameters for a single stimulus input trial of ct learning algorithm
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: minus
MemberDef type: int
MemberDef desc: [40] number of cycles to run in the minus phase with only inputs and no targets (used by CtLeabraSettle program), sets cycle_max -- can be 0
MemberDef name: plus
MemberDef type: int
MemberDef desc: [40] number of cycles to run in the plus phase with input and target activations (used by CtLeabraSettle program), sets cycle_max -- must be &gt; 0
MemberDef name: inhib
MemberDef type: int
MemberDef desc: [1] number of cycles to run in the final inhibitory phase -- network can do MINUS_PLUS_PLUS, MINUS_PLUS_MINUS, or MINUS_PLUS_NOTHING for inputs on this phase
MemberDef name: total_cycles
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: computed total number of cycles per trial
MemberDef name: inhib_start
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: computed start of inhib phase (=minus + plus)
########################################################################
TypeDef len: 13
TypeDef name:  CtSRAvgSpec
TypeDef type: class
TypeDef desc: how to compute the sravg value as a function of cycles
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: start
MemberDef type: int
MemberDef desc: [30] number of cycles from the start of a new pattern to start computing sravg value -- avoid transitional states that are too far away from attractor state
MemberDef name: end
MemberDef type: int
MemberDef desc: [1] number of cycles from the start of the final inhibitory phase to continue recording sravg
MemberDef name: interval
MemberDef type: int
MemberDef desc: [5] how frequently to compute sravg -- more infrequent updating saves computational costs as sravg is expensive
MemberDef name: min_da_thr
MemberDef type: float
MemberDef desc: [0 or 0.005] minimum threshold value of accumulated layer-level delta activation (da_sum) for computing sravg value
########################################################################
TypeDef len: 15
TypeDef name:  CtSineInhibMod
TypeDef type: class
TypeDef desc: sinusoidal inhibitory modulation parameters simulating initial burst of activation and subsequent oscillatory ringing
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: start
MemberDef type: int
MemberDef desc: [20] number of cycles from onset of new input to start applying sinusoidal inhibitory modulation
MemberDef name: duration
MemberDef type: int
MemberDef desc: [20] number of cycles from start to apply modulation
MemberDef name: n_pi
MemberDef type: float
MemberDef desc: number of multiples of PI to produce within duration of modulation (1.0 = positive only wave, 2.0 = full pos/neg wave, 4.0 = two waves, etc)
MemberDef name: burst_i
MemberDef type: float
MemberDef desc: [.02] maximum reduction in inhibition as a proportion of computed kwta value to subtract for positive activation (burst) phase of wave -- value should be a positive number
MemberDef name: trough_i
MemberDef type: float
MemberDef desc: [.02] maximum extra inhibition as proportion of computed kwta value to add for negative activation (trough) phase of wave -- value shoudl be a positive number
MethodDef name: GetInhibMod
MethodDef desc: returns inhibitory modulation to apply as a fraction of computed kwta value
MethodDef proto float GetInhibMod(int ct_cycle, float bi, float ti)
MethodDef names [u'GetInhibMod']
########################################################################
TypeDef len: 15
TypeDef name:  CtFinalInhibMod
TypeDef type: class
TypeDef desc: extra inhibition to apply at end of stimulus processing during inhib phase, to clear out existing pattern
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase']
MemberDef name: start
MemberDef type: int
MemberDef desc: number of cycles into inhib phase for inhibition ramp to start
MemberDef name: end
MemberDef type: int
MemberDef desc: number of cycles into inhib phase for inhibition ramp to end -- remains at full inhibition level from end to end of inhib phase
MemberDef name: inhib_i
MemberDef type: float
MemberDef desc: [.05 when in use] maximum extra inhibition as proportion of computed kwta value to add during final inhib phase
MethodDef name: GetInhibMod
MethodDef desc: returns inhibitory modulation to apply as a fraction of computed kwta value
MethodDef proto float GetInhibMod(int inh_cyc, float ii)
MethodDef names [u'GetInhibMod']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraWizard
TypeDef type: class
TypeDef desc: Leabra-specific wizard for automating construction of simulation objects
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'BUTROWS_2', u'EDIT_WIDTH_60', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taWizard', u'Wizard']
MethodDef name: StdLayerSpecs
MethodDef desc: make standard layer specs for a basic Leabra network (KWTA_AVG 25% for hiddens, KWTA PAT_K for input/output)
MethodDef proto bool StdLayerSpecs(LeabraNetwork* net)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Network', u'MENU_SEP_BEFORE']
MethodDef name: SRNContext
MethodDef desc: configure a simple-recurrent-network context layer in the network
MethodDef proto bool SRNContext(LeabraNetwork* net)
MethodDef opts [u'MENU_BUTTON']
MethodDef name: UnitInhib
MethodDef desc: configures unit-based inhibition for all layers in the network
MethodDef proto bool UnitInhib(LeabraNetwork* net, int n_inhib_units = 10)
MethodDef opts [u'MENU_BUTTON']
MethodDef name: TD
MethodDef desc: configure standard TD reinforcement learning layers; bio_labels = use biologically-based labels for layers, else functional; td_mod_all = have td value modulate all the regular units in the network
MethodDef proto bool TD(LeabraNetwork* net, bool bio_labels = false, bool td_mod_all = false)
MethodDef opts [u'MENU_BUTTON', u'MENU_SEP_BEFORE']
MethodDef name: PVLV
MethodDef desc: configure PVLV (pavlovian primary value and learned value) learning layers in a network -- provides a simulated dopamine signal that reflects unexpected primary rewards (PV = primary value system) and unexpected learned reward assocations (conditioned stimuli; LV = learned value = system); da_mod_all = have da value modulate all the regular units in the network
MethodDef proto bool PVLV(LeabraNetwork* net, bool da_mod_all = false)
MethodDef opts [u'MENU_BUTTON', u'MENU_SEP_BEFORE']
MethodDef name: PVLV_ConnectLayer
MethodDef desc: make (or break if disconnect = true) connections between given sending_layer in given network and the learning PVLV layers (PVr, PVi, LVe, LVi, NV), each of which should typically receive from the same sending layers
MethodDef proto bool PVLV_ConnectLayer(LeabraNetwork* net, LeabraLayer* sending_layer, bool disconnect = false)
MethodDef opts [u'MENU_BUTTON', u'NO_SCOPE_1']
MethodDef name: PBWM
MethodDef desc: configure all the layers and specs for the prefrontal-cortex basal ganglia working memory system (PBWM) -- does a PVLV configuration first (see PVLV for details) and then adds a basal ganglia gating system that is trained by PVLV dopamine signals. The gating system determines when the PFC working memory representations are updated; da_mod_all = have da value modulate all the regular units in the network; out_gate = each PFC layer has separate output gated layer and corresponding matrix output gates; nolrn_pfc = pfc does not learn -- just copies input acts directly (useful for demonstration but not as realistic or powerful)
MethodDef proto bool PBWM(LeabraNetwork* net, bool da_mod_all = false, int n_stripes = 4, bool out_gate = false, bool no_lrn_pfc = false)
MethodDef opts [u'MENU_BUTTON', u'MENU_SEP_BEFORE']
MethodDef name: SetPFCStripes
MethodDef desc: set number of &apos;stripes&apos; (unit groups) throughout the entire set of pfc/bg layers (n_units = -1 = use current of units)
MethodDef proto bool SetPFCStripes(LeabraNetwork* net, int n_stripes, int n_units = -1)
MethodDef opts [u'MENU_BUTTON', u'']
MethodDef names [u'PBWM', u'PVLV', u'PVLV_ConnectLayer', u'SRNContext', u'SetPFCStripes', u'StdLayerSpecs', u'TD', u'UnitInhib']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraThreadEngineTask
TypeDef type: class
TypeDef desc: task
TypeDef cats:, [u'Task']
TypeDef opts:, [u'TOKENS', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taTask', u'LeabraTask']
MemberDef name: g_l
MemberDef type: int
MemberDef desc: layers are done globally
MemberDef name: init_done
MemberDef type: bool
MemberDef desc: lets us safely nibble from main task
MemberDef name: g_i
MemberDef type: int
MemberDef desc: index of unit, layer, etc. on which to start
MemberDef name: scr_units
MemberDef type: int
MemberDef desc: number of slots in scratch -- is mod4 value
MemberDef name: excit
MemberDef type: float*
MemberDef desc: our subportion of excit scratch
MemberDef name: inhib
MemberDef type: float*
MemberDef desc: our subportion of excit scratch
########################################################################
TypeDef len: 13
TypeDef name:  LeabraThreadEngine
TypeDef type: class
TypeDef desc: threaded LeabraEngine
TypeDef cats:, [u'NetEngine']
TypeDef opts:, [u'TOKENS', u'DEF_NAME_STYLE_2', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taEngine', u'NetEngine', u'LeabraEngine']
MemberDef name: n_threads
MemberDef type: int
MemberDef opts [u'MIN_1', u'MAX_32']
MemberDef cats []
MemberDef desc: number of threads to use -- typically==number of cores
MemberDef name: nibble
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: set false to disable nibbling (for debugging threads)
########################################################################
TypeDef len: 11
TypeDef name:  MarkerConSpec
TypeDef type: class
TypeDef desc: connection spec that marks special projections: doesn&apos;t send netin or adapt weights
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
########################################################################
TypeDef len: 13
TypeDef name:  CtxtUpdateSpec
TypeDef type: class
TypeDef desc: context updating specifications
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: fm_hid
MemberDef type: float
MemberDef desc: from hidden (inputs to context layer)
MemberDef name: fm_prv
MemberDef type: float
MemberDef desc: from previous context layer values (maintenance)
MemberDef name: to_out
MemberDef type: float
MemberDef desc: outputs from context layer
########################################################################
TypeDef len: 15
TypeDef name:  LeabraContextLayerSpec
TypeDef type: class
TypeDef desc: context layer that copies from its recv projection (like an input layer)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
MemberDef name: updt
MemberDef type: CtxtUpdateSpec
MemberDef desc: ctxt updating constants: from hidden, from previous values (hysteresis), outputs from context (n/a on simple gate layer)
MethodDef name: Compute_Context
MethodDef desc: get context source value for given context unit
MethodDef proto void Compute_Context(LeabraLayer* lay, LeabraUnit* u, LeabraNetwork* net)
MethodDef names [u'Compute_Context']
########################################################################
TypeDef len: 11
TypeDef name:  LeabraLinUnitSpec
TypeDef type: class
TypeDef desc: a pure linear unit (suitable for an AC unit spec unit)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'LeabraUnitSpec']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraNegBiasSpec
TypeDef type: class
TypeDef desc: only learns negative bias changes, not positive ones (decay restores back to zero)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec', u'LeabraBiasSpec']
MemberDef name: decay
MemberDef type: float
MemberDef desc: rate of weight decay towards zero
MemberDef name: updt_immed
MemberDef type: bool
MemberDef desc: update weights immediately when weights are changed
########################################################################
TypeDef len: 13
TypeDef name:  TrialSynDepCon
TypeDef type: class
TypeDef desc: synaptic depression connection at the trial level (as opposed to cycle level)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER']
TypeDef parents: [u'Connection', u'LeabraCon']
MemberDef name: effwt
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: effective weight value (can be depressed) -- used for sending ativation
########################################################################
TypeDef len: 13
TypeDef name:  TrialSynDepSpec
TypeDef type: class
TypeDef desc: specs for synaptic depression
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: rec
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: rate of recovery from depression
MemberDef name: depl
MemberDef type: float
MemberDef opts [u'DEF_1.1']
MemberDef cats []
MemberDef desc: rate of depletion of synaptic efficacy as a function of sender-receiver activations
########################################################################
TypeDef len: 17
TypeDef name:  TrialSynDepConSpec
TypeDef type: class
TypeDef desc: synaptic depression connection at the trial level (as opposed to cycle level)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
TypeDef children: [u'LVConSpec']
MemberDef name: syn_dep
MemberDef type: TrialSynDepSpec
MemberDef desc: synaptic depression specifications
MethodDef name: C_Depress_Wt
MethodDef proto void C_Depress_Wt(TrialSynDepCon* cn, LeabraUnit* na, LeabraUnit* su)
MethodDef name: Depress_Wt
MethodDef proto void Depress_Wt(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef name: C_Reset_EffWt
MethodDef proto void C_Reset_EffWt(TrialSynDepCon* cn)
MethodDef name: Reset_EffWt
MethodDef proto void Reset_EffWt(LeabraSendCons* cg)
MethodDef names [u'C_Depress_Wt', u'C_Reset_EffWt', u'Depress_Wt', u'Reset_EffWt']
########################################################################
TypeDef len: 13
TypeDef name:  CycleSynDepCon
TypeDef type: class
TypeDef desc: synaptic depression connection at the cycle level (as opposed to the trial level) -- this is the simpler version -- Ca_i based version below
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER']
TypeDef parents: [u'Connection', u'LeabraCon']
MemberDef name: effwt
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: effective weight value (subject to synaptic depression) -- used for sending activation
########################################################################
TypeDef len: 15
TypeDef name:  CycleSynDepSpec
TypeDef type: class
TypeDef desc: specs for synaptic depression
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: rec
MemberDef type: float
MemberDef opts [u'DEF_0.002']
MemberDef cats []
MemberDef desc: rate of recovery from depression
MemberDef name: asymp_act
MemberDef type: float
MemberDef opts [u'DEF_0.4']
MemberDef cats []
MemberDef desc: asymptotic activation value (as proportion of 1) for a fully active unit (determines depl rate value)
MemberDef name: depl
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: rate of depletion of synaptic efficacy as a function of sender-receiver activations (computed from rec, asymp_act)
MethodDef name: Depress
MethodDef proto void Depress(float&amp; effwt, float wt, float ru_act, float su_act)
MethodDef names [u'Depress']
########################################################################
TypeDef len: 15
TypeDef name:  CycleSynDepConSpec
TypeDef type: class
TypeDef desc: synaptic depression connection at the cycle level (as opposed to the trial level) -- this is the simpler version -- Ca_i based version below
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
MemberDef name: syn_dep
MemberDef type: CycleSynDepSpec
MemberDef desc: synaptic depression specifications
MethodDef name: C_Compute_CycSynDep
MethodDef proto void C_Compute_CycSynDep(CycleSynDepCon* cn, LeabraUnit* ru, LeabraUnit* su)
MethodDef name: C_Reset_EffWt
MethodDef proto void C_Reset_EffWt(CycleSynDepCon* cn)
MethodDef name: Reset_EffWt
MethodDef proto void Reset_EffWt(LeabraSendCons* cg)
MethodDef names [u'C_Compute_CycSynDep', u'C_Reset_EffWt', u'Reset_EffWt']
########################################################################
TypeDef len: 13
TypeDef name:  CaiSynDepCon
TypeDef type: class
TypeDef desc: synaptic depression connection at the cycle level, based on synaptic integration of calcium
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER']
TypeDef parents: [u'Connection', u'LeabraCon']
MemberDef name: effwt
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: effective weight value (subject to synaptic depression) -- used for sending activation
MemberDef name: cai
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: intracellular postsynaptic calcium current integrated over cycles, used for synaptic depression
########################################################################
TypeDef len: 15
TypeDef name:  CaiSynDepSpec
TypeDef type: class
TypeDef desc: specs for synaptic depression based in synaptic integration of calcium
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: ca_inc
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: time constant for increases in Ca_i (from NMDA etc currents) -- default base value is .01 per cycle -- multiply by network-&gt;ct_learn.syndep_int to get this value (default = 20)
MemberDef name: ca_dec
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: time constant for decreases in Ca_i (from Ca pumps pushing Ca back out into the synapse) -- default base value is .01 per cycle -- multiply by network-&gt;ct_learn.syndep_int to get this value (default = 20)
MemberDef name: sd_ca_thr
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: synaptic depression ca threshold: only when ca_i has increased by this amount (thus synaptic ca depleted) does it affect firing rates and thus synaptic depression
MemberDef name: sd_ca_gain
MemberDef type: float
MemberDef opts [u'DEF_0.3']
MemberDef cats []
MemberDef desc: multiplier on cai value for computing synaptic depression -- modulates overall level of depression independent of rate parameters
MemberDef name: sd_ca_thr_rescale
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: rescaling factor taking into account sd_ca_gain and sd_ca_thr (= sd_ca_gain/(1 - sd_ca_thr))
MethodDef name: CaUpdt
MethodDef proto void CaUpdt(float&amp; cai, float ru_act, float su_act)
MethodDef name: SynDep
MethodDef proto float SynDep(float cai)
MethodDef names [u'CaUpdt', u'SynDep']
########################################################################
TypeDef len: 15
TypeDef name:  CaiSynDepConSpec
TypeDef type: class
TypeDef desc: synaptic depression connection at the cycle level, based on synaptic integration of calcium
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
MemberDef name: ca_dep
MemberDef type: CaiSynDepSpec
MemberDef desc: calcium-based depression of synaptic efficacy
MethodDef name: C_Compute_Cai
MethodDef desc: connection-level Cai update
MethodDef proto void C_Compute_Cai(CaiSynDepCon* cn, LeabraUnit* ru, LeabraUnit* su)
MethodDef name: Compute_Cai
MethodDef desc: connection-level synaptic depression: syn dep direct
MethodDef proto void Compute_Cai(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef name: C_Compute_CycSynDep
MethodDef desc: connection-level synaptic depression: ca mediated
MethodDef proto void C_Compute_CycSynDep(CaiSynDepCon* cn, LeabraUnit* ru, LeabraUnit* su)
MethodDef name: C_Init_SdEffWt
MethodDef proto void C_Init_SdEffWt(CaiSynDepCon* cn)
MethodDef name: Init_SdEffWt
MethodDef desc: reset synaptic depression effective weight (remove any existing synaptic depression and associated variables)
MethodDef proto void Init_SdEffWt(LeabraSendCons* cg)
MethodDef opts [u'CAT_Activation']
MethodDef names [u'C_Compute_Cai', u'C_Compute_CycSynDep', u'C_Init_SdEffWt', u'Compute_Cai', u'Init_SdEffWt']
########################################################################
TypeDef len: 13
TypeDef name:  FastWtCon
TypeDef type: class
TypeDef desc: fast weight connection: standard wt learns fast, but decays toward slow weight value
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER']
TypeDef parents: [u'Connection', u'LeabraCon']
MemberDef name: swt
MemberDef type: float
MemberDef desc: slow weight value
MemberDef name: sdwt
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: slow weight delta-weight change
########################################################################
TypeDef len: 15
TypeDef name:  FastWtSpec
TypeDef type: class
TypeDef desc: specificiations for fast weights
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: ALWAYS
EnumDef val: ALWAYS
EnumDef: always decay all weights toward slow weight (swt)
EnumDef name: SU_PROP
EnumDef val: SU_PROP
EnumDef: decay in proportion to the sending unit activation: decay only happens after sending activity dissipates
EnumDef name: SU_THR
EnumDef val: SU_THR
EnumDef: decay only weights with sending unit activations below sending threshold (nom .1): decay only happens after sending activity dissipates
EnumDef names: [u'DecayMode']
MemberDef name: lrate
MemberDef type: float
MemberDef desc: learning rate
MemberDef name: use_lrs
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: use learning rate schedule to modify cur_lrate learning rate?
MemberDef name: cur_lrate
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_INHERIT', u'SHOW']
MemberDef cats []
MemberDef desc: current learning rate with lrate schedule factored in
MemberDef name: decay
MemberDef type: float
MemberDef desc: rate of decay toward the slow weight values
MemberDef name: slw_sat
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: does fast weight contribute to saturation of slow weights?
MemberDef name: dk_mode
MemberDef type: FastWtSpec::DecayMode
MemberDef desc: how to apply the decay of fast weights back to the slow weight (swt) value
########################################################################
TypeDef len: 15
TypeDef name:  FastWtConSpec
TypeDef type: class
TypeDef desc: fast weight connection: standard wt learns fast, but decays toward slow weight value
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
MemberDef name: fast_wt
MemberDef type: FastWtSpec
MemberDef desc: fast weight specs: fast weights are added in separately to overall weight value as an increment (
MethodDef name: C_Compute_SlowHebb
MethodDef desc: todo: somewhat inefficient to do this computation twice..
MethodDef proto float C_Compute_SlowHebb(FastWtCon* cn, LeabraRecvCons* cg, float lin_wt, float ru_act, float su_act)
MethodDef name: C_Compute_SlowErr
MethodDef proto float C_Compute_SlowErr(FastWtCon* cn, float lin_wt, float ru_act_p, float ru_act_m, float su_act_p, float su_act_m)
MethodDef name: C_Compute_SlowdWt
MethodDef desc: combine hebbian and error-driven
MethodDef proto void C_Compute_SlowdWt(FastWtCon* cn, LeabraUnit* na, float heb, float err)
MethodDef name: C_Compute_FastDecay
MethodDef desc: todo: do ctleabra_cal
MethodDef proto void C_Compute_FastDecay(FastWtCon* cn, LeabraUnit* na, LeabraUnit* su)
MethodDef names [u'C_Compute_FastDecay', u'C_Compute_SlowErr', u'C_Compute_SlowHebb', u'C_Compute_SlowdWt']
########################################################################
TypeDef len: 13
TypeDef name:  ActAvgHebbMixSpec
TypeDef type: class
TypeDef desc: mixture of average activation hebbian learning and regular hebbian learning (on current act value)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: act_avg
MemberDef type: float
MemberDef desc: what proportion of average activation to include in hebbian receiving unit activation learning term
MemberDef name: cur_act
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: 1.0 - act_avg -- proportion of current activation for hebbian learning
########################################################################
TypeDef len: 13
TypeDef name:  ActAvgHebbConSpec
TypeDef type: class
TypeDef desc: hebbian learning that includes a proportion of average activation over time, in addition to standard current unit activation; produces a trace-based learning effect for learning over trajectories -- only for Leabra_CHL
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
MemberDef name: act_avg_hebb
MemberDef type: ActAvgHebbMixSpec
MemberDef desc: mixture of current and average activations to use in hebbian learning
########################################################################
TypeDef len: 15
TypeDef name:  LeabraLimPrecConSpec
TypeDef type: class
TypeDef desc: Leabra limited precision connection specs: limits weight values to specified level of precision between 0-1
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
MemberDef name: prec_levels
MemberDef type: float
MemberDef desc: number of levels of precision available in the weight values
MethodDef name: PrecLimitVal
MethodDef proto float PrecLimitVal(float val)
MethodDef name: C_Compute_LimPrecWts
MethodDef proto void C_Compute_LimPrecWts(LeabraCon* cn)
MethodDef name: Compute_LimPrecWts
MethodDef proto void Compute_LimPrecWts(LeabraRecvCons* cg, LeabraUnit* ru)
MethodDef names [u'C_Compute_LimPrecWts', u'Compute_LimPrecWts', u'PrecLimitVal']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraCtExptConSpec
TypeDef type: class
TypeDef desc: experimental variations of Ct learning rules
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
EnumDef name: STD_CT
EnumDef val: STD_CT
EnumDef: standard ct
EnumDef name: CHL
EnumDef val: CHL
EnumDef name: CHL_SUBPROD
EnumDef val: CHL_SUBPROD
EnumDef: CHL with subprod: (x+ - x-) * (y+ - y-)
EnumDef name: MINUS_INDEP_AVG
EnumDef val: MINUS_INDEP_AVG
EnumDef: use the independently computed average activations instead of sravg coproduct: x+ y+ - &lt;x-&gt; &lt;y-&gt; instead of - &lt;x- y-&gt;
EnumDef name: MINUS_INDEP_AVG_SUBPROD
EnumDef val: MINUS_INDEP_AVG_SUBPROD
EnumDef: compute product of sub terms: (x+ - &lt;x-&gt;)(y+ - &lt;y-&gt;)
EnumDef names: [u'LearnVar']
MemberDef name: learn_var
MemberDef type: LeabraCtExptConSpec::LearnVar
MemberDef desc: learning variant to implement
########################################################################
TypeDef len: 17
TypeDef name:  ScalarValSpec
TypeDef type: class
TypeDef desc: specs for scalar values
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: GAUSSIAN
EnumDef val: GAUSSIAN
EnumDef: gaussian bump, with value = weighted average of tuned unit values
EnumDef name: LOCALIST
EnumDef val: LOCALIST
EnumDef: each unit represents a distinct value; intermediate values represented by graded activity of neighbors; overall activity is weighted-average across all units
EnumDef names: [u'RepType']
MemberDef name: rep
MemberDef type: ScalarValSpec::RepType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: type of representation of scalar value to use
MemberDef name: un_width
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_rep:GAUSSIAN']
MemberDef cats []
MemberDef desc: sigma parameter of a gaussian specifying the tuning width of the coarse-coded units (in unit_range min-max units, unless norm_width is true, meaning use normalized 0-1 proportion of unit range)
MemberDef name: norm_width
MemberDef type: bool
MemberDef desc: un_width is specified in normalized 0-1 proportion of unit range
MemberDef name: clamp_pat
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: if true, environment provides full set of values to clamp over entire layer (instead of providing single scalar value to clamp on 1st unit, which then generates a corresponding distributed pattern)
MemberDef name: min_sum_act
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: minimum total activity of all the units representing a value: when computing weighted average value, this is used as a minimum for the sum that you divide by
MemberDef name: val_mult_lrn
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: for learning, effectively multiply the learning rate by the minus-plus phase difference in overall represented value (i.e., if overall value is the same, no learning takes place)
MemberDef name: clip_val
MemberDef type: bool
MemberDef desc: ensure that value remains within specified range
MemberDef name: send_thr
MemberDef type: bool
MemberDef desc: use unitspec.opt_thresh.send threshold to cut off small activation contributions to overall average value (i.e., if unit&apos;s activation is below this threshold, it doesn&apos;t contribute to weighted average computation)
MemberDef name: init_nms
MemberDef type: bool
MemberDef desc: initialize unit names when weights are initialized
MemberDef name: min
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: minimum unit value
MemberDef name: range
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: range of unit values
MemberDef name: val
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current val being represented (implementational, computed in InitVal())
MemberDef name: incr
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: increment per unit (implementational, computed in InitVal())
MemberDef name: un_width_eff
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: effective unit range
MethodDef name: InitRange
MethodDef desc: initialize range values (also sets un_width_eff)
MethodDef proto void InitRange(float umin, float urng)
MethodDef name: InitVal
MethodDef desc: initialize implementational values for subsequently computing GetUnitAct to represent scalar val sval over unit group of ugp_size
MethodDef proto void InitVal(float sval, int ugp_size, float umin, float urng)
MethodDef name: GetUnitAct
MethodDef desc: get activation under current representation for unit at given index: MUST CALL InitVal first!
MethodDef proto float GetUnitAct(int unit_idx)
MethodDef name: GetUnitVal
MethodDef desc: get target value associated with unit at given index: MUST CALL InitVal first!
MethodDef proto float GetUnitVal(int unit_idx)
MethodDef names [u'GetUnitAct', u'GetUnitVal', u'InitRange', u'InitVal']
########################################################################
TypeDef len: 15
TypeDef name:  ScalarValBias
TypeDef type: class
TypeDef desc: initial bias for given activation value for scalar value units
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: NO_UN
EnumDef val: NO_UN
EnumDef: no unit bias
EnumDef name: GC
EnumDef val: GC
EnumDef: bias value enters as a conductance in gc.h or gc.a
EnumDef name: BWT
EnumDef val: BWT
EnumDef: bias value enters as a bias.wt
EnumDef name: VAL
EnumDef val: VAL
EnumDef: bias as a particular value representation
EnumDef name: NEG_SLP
EnumDef val: NEG_SLP
EnumDef: bias as an increasingly negative slope (gc.a or -bwt) as unit values increase
EnumDef name: POS_SLP
EnumDef val: POS_SLP
EnumDef: bias as an increasingly positive slope (gc.h or +bwt) as unit values increase
EnumDef name: NO_WT
EnumDef val: NO_WT
EnumDef: no weight bias
EnumDef name: WT
EnumDef val: WT
EnumDef: input weights
EnumDef names: [u'BiasShape', u'UnitBias', u'WeightBias']
MemberDef name: un
MemberDef type: ScalarValBias::UnitBias
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: bias on individual units
MemberDef name: un_shp
MemberDef type: ScalarValBias::BiasShape
MemberDef desc: shape of unit bias
MemberDef name: un_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_un:NO_UN', u'DEF_1']
MemberDef cats []
MemberDef desc: gain multiplier (strength) of bias to apply for units. WT = .03 as basic weight multiplier
MemberDef name: wt
MemberDef type: ScalarValBias::WeightBias
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: bias on weights: always uses a val-shaped bias
MemberDef name: wt_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_wt:NO_WT', u'DEF_1']
MemberDef cats []
MemberDef desc: gain multiplier (strength) of bias to apply for weights (gain 1 = .03 wt value)
MemberDef name: val
MemberDef type: float
MemberDef desc: value location (center of gaussian bump)
########################################################################
TypeDef len: 17
TypeDef name:  ScalarValLayerSpec
TypeDef type: class
TypeDef desc: represents a scalar value using a coarse-coded distributed code over units. first unit represents scalar value.
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
TypeDef children: [u'MotorForceLayerSpec', u'ExtRewLayerSpec', u'TDRewPredLayerSpec', u'TDRewIntegLayerSpec', u'PViLayerSpec', u'LVeLayerSpec', u'NVLayerSpec']
MemberDef name: scalar
MemberDef type: ScalarValSpec
MemberDef desc: specifies how values are represented in terms of distributed patterns of activation across the layer
MemberDef name: unit_range
MemberDef type: MinMaxRange
MemberDef desc: range of values represented across the units; for GAUSSIAN, add extra values above and below true useful range to prevent edge effects.
MemberDef name: bias_val
MemberDef type: ScalarValBias
MemberDef desc: specifies bias for given value (as gaussian bump)
MemberDef name: val_range
MemberDef type: MinMaxRange
MemberDef opts [u'READ_ONLY', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: actual range of values (scalar.min/max taking into account un_range)
MethodDef name: ClampValue
MethodDef desc: clamp value in the first unit&apos;s ext field to the units in the group
MethodDef proto void ClampValue(Unit_Group* ugp, LeabraNetwork* net, float rescale = 1.0f)
MethodDef opts [u'CAT_ScalarVal']
MethodDef name: ClampAvgAct
MethodDef desc: computes the average activation for a clamped unit pattern (for computing rescaling)
MethodDef proto float ClampAvgAct(int ugp_size)
MethodDef opts [u'CAT_ScalarVal']
MethodDef name: ReadValue
MethodDef desc: read out current value represented by activations in layer
MethodDef proto float ReadValue(Unit_Group* ugp, LeabraNetwork* net)
MethodDef opts [u'CAT_ScalarVal']
MethodDef name: ResetAfterClamp
MethodDef desc: reset activation of first unit(s) after hard clamping
MethodDef proto void ResetAfterClamp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_ScalarVal']
MethodDef name: HardClampExt
MethodDef desc: hard clamp current ext values (on all units, after ClampValue called) to all the units
MethodDef proto void HardClampExt(LeabraLayer* lay, LeabraNetwork* net)
MethodDef opts [u'CAT_ScalarVal']
MethodDef name: LabelUnits_impl
MethodDef desc: label units with their underlying values
MethodDef proto void LabelUnits_impl(Unit_Group* ugp)
MethodDef opts [u'CAT_ScalarVal']
MethodDef name: LabelUnits
MethodDef desc: label units in given layer with their underlying values
MethodDef proto void LabelUnits(LeabraLayer* lay)
MethodDef opts [u'BUTTON', u'CAT_ScalarVal']
MethodDef name: LabelUnitsNet
MethodDef desc: label all layers in given network using this spec
MethodDef proto void LabelUnitsNet(Network* net)
MethodDef opts [u'BUTTON', u'CAT_ScalarVal']
MethodDef name: Compute_WtBias_Val
MethodDef proto void Compute_WtBias_Val(Unit_Group* ugp, float val)
MethodDef name: Compute_UnBias_Val
MethodDef proto void Compute_UnBias_Val(Unit_Group* ugp, float val)
MethodDef name: Compute_UnBias_NegSlp
MethodDef proto void Compute_UnBias_NegSlp(Unit_Group* ugp)
MethodDef name: Compute_UnBias_PosSlp
MethodDef proto void Compute_UnBias_PosSlp(Unit_Group* ugp)
MethodDef name: Compute_BiasVal
MethodDef desc: initialize the bias value
MethodDef proto void Compute_BiasVal(LeabraLayer* lay)
MethodDef opts [u'CAT_ScalarVal']
MethodDef name: Compute_dWt_Ugp
MethodDef desc: compute weight changes just for one unit group
MethodDef proto void Compute_dWt_Ugp(Unit_Group* ugp, LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_SSE_Ugp
MethodDef proto float Compute_SSE_Ugp(Unit_Group* ugp, LeabraLayer* lay, int&amp; n_vals)
MethodDef name: ReConfig
MethodDef desc: reconfigure layer and associated specs for current scalar.rep type; if n_units &gt; 0, changes number of units in layer to specified value
MethodDef proto void ReConfig(Network* net, int n_units = -1)
MethodDef opts [u'BUTTON', u'CAT_ScalarVal']
MethodDef names [u'ClampAvgAct', u'ClampValue', u'Compute_BiasVal', u'Compute_SSE_Ugp', u'Compute_UnBias_NegSlp', u'Compute_UnBias_PosSlp', u'Compute_UnBias_Val', u'Compute_WtBias_Val', u'Compute_dWt_Ugp', u'HardClampExt', u'LabelUnits', u'LabelUnitsNet', u'LabelUnits_impl', u'ReConfig', u'ReadValue', u'ResetAfterClamp']
########################################################################
TypeDef len: 15
TypeDef name:  ScalarValSelfPrjnSpec
TypeDef type: class
TypeDef desc: special projection for making self-connection that establishes neighbor similarity in scalar val
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: width
MemberDef type: int
MemberDef desc: width of neighborhood, in units (i.e., connect width units to the left, and width units to the right)
MemberDef name: wt_width
MemberDef type: float
MemberDef desc: width of the sigmoid for providing initial weight values
MemberDef name: wt_max
MemberDef type: float
MemberDef desc: maximum weight value (of 1st neighbor -- not of self unit!)
MethodDef name: Connect_UnitGroup
MethodDef proto void Connect_UnitGroup(Unit_Group* gp, Projection* prjn)
MethodDef names [u'Connect_UnitGroup']
########################################################################
TypeDef len: 15
TypeDef name:  MotorForceSpec
TypeDef type: class
TypeDef desc: specs for scalar values
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: pos_width
MemberDef type: float
MemberDef desc: sigma parameter of a gaussian specifying the tuning width of the coarse-coded integration over position (in pos_range or normalized units, depending on norm_width)
MemberDef name: vel_width
MemberDef type: float
MemberDef desc: sigma parameter of a gaussian specifying the tuning width of the coarse-coded integration over velocity (in vel_range or normalized units, depending on norm_width)
MemberDef name: norm_width
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: if true, use normalized 0-1 width parameters instead of raw parameters
MemberDef name: clip_vals
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: clip the pos and velocity values within their ranges, for purposes of computing values
MemberDef name: cur_pos
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current pos val
MemberDef name: cur_vel
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current vel val
MemberDef name: pos_min
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current pos min
MemberDef name: vel_min
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current vel min
MemberDef name: pos_range
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current pos range
MemberDef name: vel_range
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current vel range
MemberDef name: pos_incr
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current pos increment
MemberDef name: vel_incr
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current vel increment
MemberDef name: pos_width_eff
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: effective position width
MemberDef name: vel_width_eff
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: effective velocity width
MethodDef name: InitRanges
MethodDef desc: initialize range parameters
MethodDef proto void InitRanges(float pos_min, float pos_range, float vel_min, float vel_range)
MethodDef opts [u'CAT_MotorForce']
MethodDef name: InitVals
MethodDef desc: intiailize value and range parameters for subsequent calls
MethodDef proto void InitVals(float pos, int pos_size, float pos_min, float pos_range, float vel, int vel_size, float vel_min, float vel_range)
MethodDef opts [u'CAT_MotorForce']
MethodDef name: GetWt
MethodDef desc: get weighting factor for position &amp; velocity group at given indexes: MUST CALL InitVal first!
MethodDef proto float GetWt(int pos_gp_idx, int vel_gp_idx)
MethodDef opts [u'CAT_MotorForce']
MethodDef names [u'GetWt', u'InitRanges', u'InitVals']
########################################################################
TypeDef len: 15
TypeDef name:  MotorForceLayerSpec
TypeDef type: class
TypeDef desc: represents motor force as a function of joint position and velocity using scalar val layer spec: layer uses unit groups -- each group represents a force (typically localist), and groups are organized in X axis by position, Y axis by velocity. Overall value is weighted average from neighboring unit groups
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec']
MemberDef name: motor_force
MemberDef type: MotorForceSpec
MemberDef desc: misc specs for motor force representation
MemberDef name: pos_range
MemberDef type: MinMaxRange
MemberDef desc: range of position values encoded over the X axis of unit groups in the layer
MemberDef name: vel_range
MemberDef type: MinMaxRange
MemberDef desc: range of velocity values encoded over the Y axis of unit groups in the layer
MemberDef name: add_noise
MemberDef type: bool
MemberDef desc: add some noise after computing value from layer
MemberDef name: force_noise
MemberDef type: Random
MemberDef opts [u'CONDEDIT_ON_add_noise']
MemberDef cats []
MemberDef desc: parameters for random added noise to forces
MethodDef name: ReadForce
MethodDef desc: read the force value from the layer, as a gaussian weighted average over units near the current position and velocity values
MethodDef proto float ReadForce(LeabraLayer* lay, LeabraNetwork* net, float pos, float vel)
MethodDef opts [u'CAT_MotorForce']
MethodDef name: ClampForce
MethodDef desc: clamp the force value to the layer, as a gaussian weighted average over units near the current position and velocity values
MethodDef proto void ClampForce(LeabraLayer* lay, LeabraNetwork* net, float force, float pos, float vel)
MethodDef opts [u'CAT_MotorForce']
MethodDef names [u'ClampForce', u'ReadForce']
########################################################################
TypeDef len: 17
TypeDef name:  TwoDValSpec
TypeDef type: class
TypeDef desc: specs for two-dimensional values
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: GAUSSIAN
EnumDef val: GAUSSIAN
EnumDef: gaussian bump, with value = weighted average of tuned unit values
EnumDef name: LOCALIST
EnumDef val: LOCALIST
EnumDef: each unit represents a distinct value; intermediate values represented by graded activity of neighbors; overall activity is weighted-average across all units
EnumDef names: [u'RepType']
MemberDef name: rep
MemberDef type: TwoDValSpec::RepType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: type of representation of scalar value to use
MemberDef name: n_vals
MemberDef type: int
MemberDef desc: number of values to represent in layer: layer geom.x must be &gt;= 2 * n_vals because vals are represented in first row of layer!
MemberDef name: un_width
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_rep:GAUSSIAN']
MemberDef cats []
MemberDef desc: sigma parameter of a gaussian specifying the tuning width of the coarse-coded units (in unit_range min-max units, unless norm_width is true, meaning use normalized 0-1 proportion of unit range)
MemberDef name: norm_width
MemberDef type: bool
MemberDef desc: un_width is specified in normalized 0-1 proportion of unit range
MemberDef name: clamp_pat
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: if true, environment provides full set of values to clamp over entire layer (instead of providing single scalar value to clamp on 1st unit, which then generates a corresponding distributed pattern)
MemberDef name: min_sum_act
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: minimum total activity of all the units representing a value: when computing weighted average value, this is used as a minimum for the sum that you divide by
MemberDef name: mn_dst
MemberDef type: float
MemberDef opts [u'DEF_0.5']
MemberDef cats []
MemberDef desc: minimum distance factor for reading out multiple bumps: must be at least this times un_width far away from other bumps
MemberDef name: clip_val
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: ensure that value remains within specified range
MemberDef name: x_min
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: minimum unit value
MemberDef name: x_range
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: range of unit values
MemberDef name: y_min
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: minimum unit value
MemberDef name: y_range
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: range of unit values
MemberDef name: x_val
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current val being represented (implementational, computed in InitVal())
MemberDef name: y_val
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: current val being represented (implementational, computed in InitVal())
MemberDef name: x_incr
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: increment per unit (implementational, computed in InitVal())
MemberDef name: y_incr
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: increment per unit (implementational, computed in InitVal())
MemberDef name: x_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: size of axis
MemberDef name: y_size
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: size of axis
MemberDef name: un_width_x
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: unit width, x axis (use for all computations -- can be normalized)
MemberDef name: un_width_y
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: unit width, y axis (use for all computations -- can be normalized)
MethodDef name: InitRange
MethodDef desc: initialize range values, including normalized unit width values per axis
MethodDef proto void InitRange(float xmin, float xrng, float ymin, float yrng)
MethodDef name: InitVal
MethodDef desc: initialize implementational values for subsequently computing GetUnitAct to represent scalar val sval over unit group of ugp_size
MethodDef proto void InitVal(float xval, float yval, int xsize, int ysize, float xmin, float xrng, float ymin, float yrng)
MethodDef name: GetUnitAct
MethodDef desc: get activation under current representation for unit at given index: MUST CALL InitVal first!
MethodDef proto float GetUnitAct(int unit_idx)
MethodDef name: GetUnitVal
MethodDef desc: get target values associated with unit at given index: MUST CALL InitVal first!
MethodDef proto void GetUnitVal(int unit_idx, float&amp; x_cur, float&amp; y_cur)
MethodDef names [u'GetUnitAct', u'GetUnitVal', u'InitRange', u'InitVal']
########################################################################
TypeDef len: 15
TypeDef name:  TwoDValBias
TypeDef type: class
TypeDef desc: initial bias for given activation value for scalar value units
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: NO_UN
EnumDef val: NO_UN
EnumDef: no unit bias
EnumDef name: GC
EnumDef val: GC
EnumDef: bias value enters as a conductance in gc.h or gc.a
EnumDef name: BWT
EnumDef val: BWT
EnumDef: bias value enters as a bias.wt
EnumDef name: NO_WT
EnumDef val: NO_WT
EnumDef: no weight bias
EnumDef name: WT
EnumDef val: WT
EnumDef: input weights
EnumDef names: [u'UnitBias', u'WeightBias']
MemberDef name: un
MemberDef type: TwoDValBias::UnitBias
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: bias on individual units
MemberDef name: un_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_un:NO_UN', u'DEF_1']
MemberDef cats []
MemberDef desc: gain multiplier (strength) of bias to apply for units. WT = .03 as basic weight multiplier
MemberDef name: wt
MemberDef type: TwoDValBias::WeightBias
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: bias on weights: always uses a val-shaped bias
MemberDef name: wt_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_wt:NO_WT', u'DEF_1']
MemberDef cats []
MemberDef desc: gain multiplier (strength) of bias to apply for weights (gain 1 = .03 wt value)
MemberDef name: x_val
MemberDef type: float
MemberDef desc: X axis value location (center of gaussian bump)
MemberDef name: y_val
MemberDef type: float
MemberDef desc: Y axis value location (center of gaussian bump)
########################################################################
TypeDef len: 17
TypeDef name:  TwoDValLayerSpec
TypeDef type: class
TypeDef desc: represents one or more two-d value(s) using a coarse-coded distributed code over units. first row represents scalar value(s). one val readout is weighted-average; multiple vals = max bumps over 3x3 local grid
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
TypeDef children: [u'DecodeTwoDValLayerSpec']
MemberDef name: twod
MemberDef type: TwoDValSpec
MemberDef desc: specifies how values are represented in terms of distributed patterns of activation across the layer
MemberDef name: x_range
MemberDef type: MinMaxRange
MemberDef desc: range of values represented across the X (horizontal) axis; for GAUSSIAN, add extra values above and below true useful range to prevent edge effects.
MemberDef name: y_range
MemberDef type: MinMaxRange
MemberDef desc: range of values represented across the Y (vertical) axis; for GAUSSIAN, add extra values above and below true useful range to prevent edge effects.
MemberDef name: bias_val
MemberDef type: TwoDValBias
MemberDef desc: specifies bias values
MemberDef name: x_val_range
MemberDef type: MinMaxRange
MemberDef opts [u'READ_ONLY', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: actual range of values (scalar.min/max taking into account un_range)
MemberDef name: y_val_range
MemberDef type: MinMaxRange
MemberDef opts [u'READ_ONLY', u'NO_INHERIT']
MemberDef cats []
MemberDef desc: actual range of values (scalar.min/max taking into account un_range)
MethodDef name: ClampValue
MethodDef desc: clamp value in the first unit&apos;s ext field to the units in the group
MethodDef proto void ClampValue(Unit_Group* ugp, LeabraNetwork* net, float rescale = 1.0f)
MethodDef name: ReadValue
MethodDef desc: read out current value represented by activations in layer
MethodDef proto void ReadValue(Unit_Group* ugp, LeabraNetwork* net)
MethodDef name: ResetAfterClamp
MethodDef desc: reset activation of first unit(s) after hard clamping
MethodDef proto void ResetAfterClamp(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: HardClampExt
MethodDef desc: hard clamp current ext values (on all units, after ClampValue called) to all the units
MethodDef proto void HardClampExt(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: LabelUnits_impl
MethodDef desc: label units with their underlying values
MethodDef proto void LabelUnits_impl(Unit_Group* ugp)
MethodDef name: LabelUnits
MethodDef desc: label units in given layer with their underlying values
MethodDef proto void LabelUnits(LeabraLayer* lay)
MethodDef opts [u'BUTTON']
MethodDef name: LabelUnitsNet
MethodDef desc: label all layers in given network using this spec
MethodDef proto void LabelUnitsNet(Network* net)
MethodDef opts [u'BUTTON']
MethodDef name: Compute_WtBias_Val
MethodDef proto void Compute_WtBias_Val(Unit_Group* ugp, float x_val, float y_val)
MethodDef name: Compute_UnBias_Val
MethodDef proto void Compute_UnBias_Val(Unit_Group* ugp, float x_val, float y_val)
MethodDef name: Compute_BiasVal
MethodDef desc: initialize the bias value
MethodDef proto void Compute_BiasVal(LeabraLayer* lay)
MethodDef name: Compute_dWtUgp
MethodDef desc: compute weight changes just for one unit group
MethodDef proto void Compute_dWtUgp(Unit_Group* ugp, LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_SSE_Ugp
MethodDef proto float Compute_SSE_Ugp(Unit_Group* ugp, LeabraLayer* lay, int&amp; n_vals)
MethodDef name: ReConfig
MethodDef desc: reconfigure layer and associated specs for current scalar.rep type; if n_units &gt; 0, changes number of units in layer to specified value
MethodDef proto void ReConfig(Network* net, int n_units = -1)
MethodDef opts [u'BUTTON']
MethodDef names [u'ClampValue', u'Compute_BiasVal', u'Compute_SSE_Ugp', u'Compute_UnBias_Val', u'Compute_WtBias_Val', u'Compute_dWtUgp', u'HardClampExt', u'LabelUnits', u'LabelUnitsNet', u'LabelUnits_impl', u'ReConfig', u'ReadValue', u'ResetAfterClamp']
########################################################################
TypeDef len: 13
TypeDef name:  DecodeTwoDValLayerSpec
TypeDef type: class
TypeDef desc: a two-d-value layer spec that copies its activations from one-to-one input prjns, to act as a decoder of another layer
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'TwoDValLayerSpec']
MethodDef name: Compute_dWt
MethodDef proto void Compute_dWt(LeabraLayer* lay, LeabraNetwork* net)
MethodDef names [u'Compute_dWt']
########################################################################
TypeDef len: 15
TypeDef name:  V1RFPrjnSpec
TypeDef type: class
TypeDef desc: V1 receptive field projection spec: does overlapping tiled receptive fields with Gabor and Blob filter weights - rf_spec.rf_width specifies the width of the receptive field, and rf_move specifies how much to move in input coordinates per each recv group
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: rf_spec
MemberDef type: GaborV1Spec
MemberDef opts [u'SHOW_TREE']
MemberDef cats []
MemberDef desc: receptive field specs
MemberDef name: rf_move
MemberDef type: FloatTwoDCoord
MemberDef desc: how much to move in input coordinates per each receiving layer group
MemberDef name: dog_surr_mult
MemberDef type: float
MemberDef desc: multiplier on surround weight values for DoG -- can be used to turn off surround entirely or to amplify it
MethodDef name: GraphFilter
MethodDef desc: plot the filter gaussian into data table and generate a graph of a given unit number&apos;s gabor / blob filter
MethodDef proto void GraphFilter(DataTable* disp_data, int recv_unit_no)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef name: GridFilter
MethodDef desc: plot the filter gaussian into data table and generate a grid view of all the gabor or blob filters
MethodDef proto void GridFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'GraphFilter', u'GridFilter']
########################################################################
TypeDef len: 15
TypeDef name:  SaliencyPrjnSpec
TypeDef type: class
TypeDef desc: Saliency projection spec from V1 layer: receiving layer must have a unit group for each feature, with each unit group having the V1 unit group geometry -- gets excitatory connection from feature corresponding to group index, and from all-but that feature in surrounding sending areas, producing a contrast enhancement effect. Competition within group and across whole layer produces pop-out dynamics
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
MemberDef name: convergence
MemberDef type: int
MemberDef desc: how many sending groups to count as a single entity from the perspective of the saliency computation -- values larger than 1 make the saliency layer smaller than the sending layer
MemberDef name: reciprocal
MemberDef type: bool
MemberDef desc: opposite direction connection: feedback to the features
MemberDef name: feat_only
MemberDef type: bool
MemberDef desc: only get excitatory input from feature only -- no DoG or anything else -- just pure feature aggregation (for use with kwta-based popout dynamics)
MemberDef name: feat_gps
MemberDef type: int
MemberDef desc: number of feature groups contained within V1 unit group -- surround connections are only for within-group connections
MemberDef name: dog_wts
MemberDef type: DoGFilterSpec
MemberDef opts [u'CONDEDIT_OFF_feat_only']
MemberDef cats []
MemberDef desc: Difference of Gaussians filter for setting the weights -- determines the width of the projection, etc -- where the net filter values are positive, receives excitation from the target feature, else from all-but the target feature
MemberDef name: wt_mult
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_feat_only']
MemberDef cats []
MemberDef desc: multiplier on weight values coming from the dog_wts
MemberDef name: surr_mult
MemberDef type: float
MemberDef opts [u'CONDEDIT_OFF_feat_only']
MemberDef cats []
MemberDef desc: multiplier on surround weight values -- DoG has very weak surround in general so it can be useful to increase that
MemberDef name: units_per_feat_gp
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE', u'SHOW']
MemberDef cats []
MemberDef desc: number of units per feature group (computed from sending layer)
MethodDef name: Connect_feat_only
MethodDef proto void Connect_feat_only(Projection* prjn)
MethodDef name: Connect_full_dog
MethodDef proto void Connect_full_dog(Projection* prjn)
MethodDef name: GraphFilter
MethodDef desc: plot the DoG center-surround weights into data table and generate a graph
MethodDef proto void GraphFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef name: GridFilter
MethodDef desc: plot the DoG center-surround weights into data table and generate a grid view
MethodDef proto void GridFilter(DataTable* disp_data)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'Connect_feat_only', u'Connect_full_dog', u'GraphFilter', u'GridFilter']
########################################################################
TypeDef len: 11
TypeDef name:  GpAggregatePrjnSpec
TypeDef type: class
TypeDef desc: aggregates across a layer with unit groups into a receiving layer that has the same geometry as each of the unit groups -- each unit receives from the corresponding unit in each of the sending unit groups
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec']
########################################################################
TypeDef len: 11
TypeDef name:  LeabraV1Layer
TypeDef type: class
TypeDef desc: Specialized layer that implements competition both within unit groups and among features across the entire layer, where a feature is defined as a specific unit position within the unit groups (layer must have unit groups)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_lay', u'COMPRESS', u'SCOPE_Network', u'INSTANCE']
TypeDef parents: [u'LeabraInhib', u'taBase', u'taOBase', u'taNBase', u'Layer', u'LeabraLayer']
########################################################################
TypeDef len: 15
TypeDef name:  V1FeatInhibSpec
TypeDef type: class
TypeDef desc: specifies inhibition parameters for V1 layer units based on feature-level inhibition
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: feat_gain
MemberDef type: float
MemberDef desc: multiplier for feature-level inhibition
MemberDef name: dist_sigma
MemberDef type: float
MemberDef desc: Gaussian std deviation (sigma) for weighting competitors based on distance, in normalized units relative to max x,y size dimension of the layer group geometry
MemberDef name: i_rat_thr
MemberDef type: float
MemberDef desc: optimization threshold of unit i_thr relative to group&apos;s inhib threshold -- if less than this threshold, no distance costs are assessed
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  LeabraV1LayerSpec
TypeDef type: class
TypeDef desc: LayerSpec that implements competition both within unit groups and among features across the entire layer, where a feature is defined as a specific unit position within the unit groups (layer must have unit groups, and must be of LeabraV1Layer type!) -- feature inhibition is based on distance -- adds to layer-level gp_g based inhib for each unit in proportion to distance from active units
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
MemberDef name: feat_inhib
MemberDef type: V1FeatInhibSpec
MemberDef desc: feature-level inhibition parameters
MethodDef name: Compute_FeatGpActive
MethodDef desc: compute active units in active_buf for given feature unit group
MethodDef proto void Compute_FeatGpActive(LeabraLayer* lay, LeabraUnit_Group* fug, LeabraNetwork* net)
MethodDef names [u'Compute_FeatGpActive']
########################################################################
TypeDef len: 11
TypeDef name:  DaModUnit
TypeDef type: class
TypeDef desc: obsolete -- now incorporated into base LeabraUnit
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'DMEM_SHARE_SETS_5', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Unit', u'LeabraUnit']
########################################################################
TypeDef len: 11
TypeDef name:  DaModUnitSpec
TypeDef type: class
TypeDef desc: obsolete -- now incoroporated into base LeabraUnitSpec
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'LeabraUnitSpec']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraTdUnit
TypeDef type: class
TypeDef desc: Leabra unit with dopamine-like modulation of minus phase activation for learning
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'DMEM_SHARE_SETS_5', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Unit', u'LeabraUnit']
MemberDef name: p_act_m
MemberDef type: float
MemberDef desc: previous minus phase activation
MemberDef name: p_act_p
MemberDef type: float
MemberDef desc: previous plus phase activation
MemberDef name: trace
MemberDef type: float
MemberDef desc: the trace of activation states that is used for learning
########################################################################
TypeDef len: 13
TypeDef name:  LeabraTdUnitSpec
TypeDef type: class
TypeDef desc: Leabra unit with temporal-differences variables for prior activation states
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'LeabraUnitSpec']
MemberDef name: lambda
MemberDef type: float
MemberDef desc: exponential decay parameter for updating activation trace values over time: these trace values are used in learning. in principle this should also include the effects of the discount (gamma) parameter from the TdRewInteg layer
########################################################################
TypeDef len: 15
TypeDef name:  AvgExtRewSpec
TypeDef type: class
TypeDef desc: specs for computing average external rewards
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: sub_avg
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: subtract average reward value in computing rewards
MemberDef name: avg_dt
MemberDef type: float
MemberDef opts [u'DEF_0.005']
MemberDef cats []
MemberDef desc: time constant for integrating average reward value
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  OutErrSpec
TypeDef type: class
TypeDef desc: specs for computing external rewards based on output performance of network
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: err_tol
MemberDef type: float
MemberDef opts [u'DEF_0.5']
MemberDef cats []
MemberDef desc: error tolerance for counting an activation wrong
MemberDef name: graded
MemberDef type: bool
MemberDef opts [u'DEF_false', u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: compute a graded reward signal as a function of number of correct output values
MemberDef name: no_off_err
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: do not count a unit wrong if it is off but target says on -- only count wrong units that are on but should be off
MemberDef name: seq_all_cor
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: require that all RewTarg events in a sequence be correct before giving reward (on the last event in sequence); if graded is checked, this reward is a graded function of % correct
MemberDef name: scalar_val_max
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_graded']
MemberDef cats []
MemberDef desc: maximum value for scalar value output layers when using a graded value -- reward is error normalized by this value, and clipped at min/max
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  ExtRewSpec
TypeDef type: class
TypeDef desc: specs for computing external rewards
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: err_val
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: reward value for errors (when network does not respond correctly)
MemberDef name: norew_val
MemberDef type: float
MemberDef opts [u'DEF_0.5']
MemberDef cats []
MemberDef desc: reward value when no feedback information is present
MemberDef name: rew_val
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: reward value for correct responses (positive rewards)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  ExtRewLayerSpec
TypeDef type: class
TypeDef desc: computes external reward feedback: minus phase is zero, plus phase is reward value derived from network performance or other inputs (computed at start of 1+)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec']
EnumDef name: OUT_ERR_REW
EnumDef val: OUT_ERR_REW
EnumDef: get rewards as a function of errors on the output layer ONLY WHEN RewTarg layer act &gt; .5 -- get from markerconspec from output layer(s)
EnumDef name: EXT_REW
EnumDef val: EXT_REW
EnumDef: get rewards as external inputs marked as ext_flag = TARG to the first unit in the layer (if ext val == norew_val, then no ext rew signaled)
EnumDef name: DA_REW
EnumDef val: DA_REW
EnumDef: get rewards from da values on first unit in layer (if ext val == norew_val, then no ext rew signaled)
EnumDef names: [u'RewardType']
MemberDef name: rew_type
MemberDef type: ExtRewLayerSpec::RewardType
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: how do we get the reward values?
MemberDef name: avg_rew
MemberDef type: AvgExtRewSpec
MemberDef desc: average reward computation specifications
MemberDef name: out_err
MemberDef type: OutErrSpec
MemberDef opts [u'CONDEDIT_ON_rew_type:OUT_ERR_REW']
MemberDef cats []
MemberDef desc: how to compute external rewards based on output performance
MemberDef name: rew
MemberDef type: ExtRewSpec
MemberDef desc: misc reward computation specifications
MethodDef name: OutErrRewAvail
MethodDef desc: figure out if reward is available on this trial (look if target signals are present)
MethodDef proto bool OutErrRewAvail(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: GetOutErrRew
MethodDef desc: get reward value based on error at layer with MarkerConSpec connection: 1 = rew (correct), 0 = err, -1 = no info
MethodDef proto float GetOutErrRew(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_OutErrRew
MethodDef desc: get reward value based on external error (put in da val, clamp)
MethodDef proto void Compute_OutErrRew(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_ExtRew
MethodDef desc: get external rewards from inputs (put in da val, clamp)
MethodDef proto void Compute_ExtRew(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_DaRew
MethodDef desc: clamp external rewards as da values (put in da val, clamp)
MethodDef proto void Compute_DaRew(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_UnitDa
MethodDef desc: actually compute the unit da value based on external reward value er
MethodDef proto void Compute_UnitDa(float er, LeabraUnit* u, Unit_Group* ugp, LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_ZeroAct
MethodDef desc: clamp zero activations, for minus phase
MethodDef proto void Compute_ZeroAct(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_NoRewAct
MethodDef desc: clamp norew_val values for when no reward information is present
MethodDef proto void Compute_NoRewAct(LeabraLayer* lay, LeabraNetwork* net)
MethodDef names [u'Compute_DaRew', u'Compute_ExtRew', u'Compute_NoRewAct', u'Compute_OutErrRew', u'Compute_UnitDa', u'Compute_ZeroAct', u'GetOutErrRew', u'OutErrRewAvail']
########################################################################
TypeDef len: 13
TypeDef name:  TDRewPredConSpec
TypeDef type: class
TypeDef desc: Reward Prediction connections: for TD RewPred Layer, uses TD algorithm for predicting rewards
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
MethodDef name: C_Compute_Err
MethodDef desc: this computes weight changes based on sender at time t-1
MethodDef proto float C_Compute_Err(LeabraCon* cn, float lin_wt, LeabraTdUnit* ru, LeabraTdUnit* su)
MethodDef names [u'C_Compute_Err']
########################################################################
TypeDef len: 13
TypeDef name:  TDRewPredLayerSpec
TypeDef type: class
TypeDef desc: predicts rewards: minus phase = clamped prior expected reward V^(t), plus = settles on expectation of future reward V^(t+1)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec']
MethodDef name: Compute_SavePred
MethodDef desc: save current prediction to misc_1 for later clamping
MethodDef proto void Compute_SavePred(Unit_Group* ugp, LeabraNetwork* net)
MethodDef name: Compute_ClampPred
MethodDef desc: clamp misc_1 to ext
MethodDef proto void Compute_ClampPred(Unit_Group* ugp, LeabraNetwork* net)
MethodDef name: Compute_ClampPrev
MethodDef desc: clamp minus phase to previous act value
MethodDef proto void Compute_ClampPrev(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_ExtToPlus
MethodDef desc: copy ext values to act_p
MethodDef proto void Compute_ExtToPlus(Unit_Group* ugp, LeabraNetwork* net)
MethodDef name: Compute_TdPlusPhase_impl
MethodDef proto void Compute_TdPlusPhase_impl(Unit_Group* ugp, LeabraNetwork* net)
MethodDef name: Compute_TdPlusPhase
MethodDef desc: compute plus phase activations for learning including the td values
MethodDef proto void Compute_TdPlusPhase(LeabraLayer* lay, LeabraNetwork* net)
MethodDef names [u'Compute_ClampPred', u'Compute_ClampPrev', u'Compute_ExtToPlus', u'Compute_SavePred', u'Compute_TdPlusPhase', u'Compute_TdPlusPhase_impl']
########################################################################
TypeDef len: 15
TypeDef name:  TDRewIntegSpec
TypeDef type: class
TypeDef desc: misc specs for TDRewIntegLayerSpec
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: discount
MemberDef type: float
MemberDef desc: discount factor for V(t+1) from TDRewPredLayer
MemberDef name: max_r_v
MemberDef type: bool
MemberDef desc: represent the maximum of extrew (r) and tdrewpred estimate of V(t+1) instead of the sum of these two factors -- produces a kind of &apos;absorbing&apos; reward function instead of a cumulative reward function
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 13
TypeDef name:  TDRewIntegLayerSpec
TypeDef type: class
TypeDef desc: integrates perceived and external rewards: delta over phases = DA td-like signal. minus phase = prev exp rew V^(t), plus phase = extrew (r) + tdrewpred computing V(t+1)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec']
MemberDef name: rew_integ
MemberDef type: TDRewIntegSpec
MemberDef desc: misc specs for TDRewIntegLayerSpec
########################################################################
TypeDef len: 13
TypeDef name:  TdLayerSpec
TypeDef type: class
TypeDef desc: computes activation = temporal derivative (act_eq - act_m) of sending units in plus phases: note, act will go negative!
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
MethodDef name: Compute_ZeroAct
MethodDef desc: compute a zero td value: in minus phase
MethodDef proto void Compute_ZeroAct(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_Td
MethodDef desc: compute the td value based on recv projections: every cycle in 1+ phases
MethodDef proto void Compute_Td(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Send_Td
MethodDef desc: send the td value to sending projections: every cycle
MethodDef proto void Send_Td(LeabraLayer* lay, LeabraNetwork* net)
MethodDef names [u'Compute_Td', u'Compute_ZeroAct', u'Send_Td']
########################################################################
TypeDef len: 15
TypeDef name:  PVConSpec
TypeDef type: class
TypeDef desc: primary value connection spec: learns using delta rule from PVe - PVi values -- does not use hebb or err_sb parameters
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
TypeDef children: [u'PVrConSpec']
MethodDef name: C_Compute_Err_Delta
MethodDef proto float C_Compute_Err_Delta(LeabraCon* cn, LeabraUnit* ru, LeabraUnit* su)
MethodDef names [u'C_Compute_Err_Delta']
########################################################################
TypeDef len: 15
TypeDef name:  PVDetectSpec
TypeDef type: class
TypeDef desc: specs for detecting if a primary value is present or expected
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: thr_min
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: minimum threshold on PVe (ExtRew) or PVi, below which PV is considered present (i.e., punishment) (set to 0 if PVe.rew.norew_val = 0)
MemberDef name: thr_max
MemberDef type: float
MemberDef opts [u'DEF_0.8']
MemberDef cats []
MemberDef desc: maximum threshold on PVe (ExtRew) or PVi, above which PV is considered present (i.e., reward) (set to .4 if PVe.rew.norew_val = 0)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  PViLayerSpec
TypeDef type: class
TypeDef desc: primary value inhibitory (PVi) layer: continously learns to expect primary reward values
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec']
TypeDef children: [u'PVrLayerSpec']
MemberDef name: pv_detect
MemberDef type: PVDetectSpec
MemberDef desc: primary reward value detection spec: detect if a primary reward is present or expected
MethodDef name: Compute_PVe
MethodDef desc: get excitatory primary reward value from PVe/ExtRew layer if it is available: actual_er_avail = internal flag from ExtRew layer (cheating), pv_detected = PVi layer&apos;s detection of primary reward presence or expectation based on PVi, PVe values (not cheating)
MethodDef proto float Compute_PVe(LeabraLayer* lay, LeabraNetwork* net, bool&amp; actual_er_avail, bool&amp; pv_detected)
MethodDef name: Compute_ExtToPlus
MethodDef desc: copy ext values to act_p
MethodDef proto void Compute_ExtToPlus(Unit_Group* ugp, LeabraNetwork* net)
MethodDef name: Compute_PVPlusPhaseDwt
MethodDef desc: compute plus phase activations as external rewards and change weights
MethodDef proto void Compute_PVPlusPhaseDwt(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Update_PVPrior
MethodDef desc: update the prior PV value, stored in pv unit misc_1 values
MethodDef proto void Update_PVPrior(LeabraLayer* lay, bool er_avail, float pve_val)
MethodDef names [u'Compute_ExtToPlus', u'Compute_PVPlusPhaseDwt', u'Compute_PVe', u'Update_PVPrior']
########################################################################
TypeDef len: 13
TypeDef name:  PVrConSpec
TypeDef type: class
TypeDef desc: primary value connection spec with asymmetrical learning rates -- used for reward detection connections
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec', u'PVConSpec']
MemberDef name: wt_dec_mult
MemberDef type: float
MemberDef desc: multiplier for weight decrease rate relative to basic lrate used for weight increases
########################################################################
TypeDef len: 11
TypeDef name:  PVrLayerSpec
TypeDef type: class
TypeDef desc: primary value reward detection layer: learns when rewards are expected to occur (just for marking purposes -- same functionality as PVi)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec', u'PViLayerSpec']
########################################################################
TypeDef len: 13
TypeDef name:  LVConSpec
TypeDef type: class
TypeDef desc: learned value connection spec: learns using delta rule from PVe - LV values; also does synaptic depression to do novelty filtering
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec', u'TrialSynDepConSpec']
MethodDef name: C_Compute_Err_Delta
MethodDef proto float C_Compute_Err_Delta(LeabraCon* cn, LeabraUnit* ru, LeabraUnit* su)
MethodDef names [u'C_Compute_Err_Delta']
########################################################################
TypeDef len: 15
TypeDef name:  LVSpec
TypeDef type: class
TypeDef desc: specs for learned value layers
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: delta_on_sum
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: if there are multiple lv subgroups, compute the temporal delta on the summed lv values (else deltas are per each sub-group, then summed)
MemberDef name: use_actual_er
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: use actual external reward presence to determine when to learn (cheating), otherwise use PVi&apos;s estimate of when primary value is avail (more realistic)
MemberDef name: min_lvi
MemberDef type: float
MemberDef desc: minimum effective lvi value, for computing lv da
MemberDef name: syn_dep
MemberDef type: bool
MemberDef opts [u'DEF_false', u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: use the old synaptic depression version of LV
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  LVeLayerSpec
TypeDef type: class
TypeDef desc: learns value based on inputs that are associated with rewards, only learns at time of primary rewards (filtered by PV system). This is excitatory version
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec']
TypeDef children: [u'LViLayerSpec']
MemberDef name: lv
MemberDef type: LVSpec
MemberDef desc: learned value specs
MethodDef name: Compute_ExtToPlus
MethodDef desc: copy ext values to act_p
MethodDef proto void Compute_ExtToPlus(Unit_Group* ugp, LeabraNetwork* net)
MethodDef name: Compute_DepressWt
MethodDef desc: depress weights for units in unit group (only if not doing dwts!)
MethodDef proto void Compute_DepressWt(Unit_Group* ugp, LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_LVPlusPhaseDwt
MethodDef desc: if primary value detected (present/expected), compute plus phase activations for learning, and actually change weights; otherwise just depress weights
MethodDef proto void Compute_LVPlusPhaseDwt(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_ActEqAvg
MethodDef desc: compute average over value representation subgroups of act_eq values
MethodDef proto float Compute_ActEqAvg(LeabraLayer* lay)
MethodDef name: Compute_LVDa_ugp
MethodDef desc: compute da contribution from Lv, based on lve_layer and lvi_layer activations (multiple subgroups allowed)
MethodDef proto float Compute_LVDa_ugp(Unit_Group* lve_ugp, Unit_Group* lvi_ugp)
MethodDef name: Compute_LVDa
MethodDef desc: compute da contribution from Lv, based on lve_layer and lvi_layer activations (multiple subgroups allowed)
MethodDef proto float Compute_LVDa(LeabraLayer* lve_lay, LeabraLayer* lvi_lay)
MethodDef name: Update_LVPrior_ugp
MethodDef desc: update the prior Lv value, stored in lv unit misc_1 values
MethodDef proto void Update_LVPrior_ugp(Unit_Group* lve_ugp, Unit_Group* lvi_ugp, bool er_avail)
MethodDef name: Update_LVPrior
MethodDef desc: update the prior Lv value, stored in lv unit misc_1 values
MethodDef proto void Update_LVPrior(LeabraLayer* lve_lay, LeabraLayer* lvi_lay, bool er_avail)
MethodDef names [u'Compute_ActEqAvg', u'Compute_DepressWt', u'Compute_ExtToPlus', u'Compute_LVDa', u'Compute_LVDa_ugp', u'Compute_LVPlusPhaseDwt', u'Update_LVPrior', u'Update_LVPrior_ugp']
########################################################################
TypeDef len: 11
TypeDef name:  LViLayerSpec
TypeDef type: class
TypeDef desc: inhibitory/slow version of LV layer spec: (just a marker for layer; same functionality as LVeLayerSpec)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec', u'LVeLayerSpec']
########################################################################
TypeDef len: 15
TypeDef name:  NVSpec
TypeDef type: class
TypeDef desc: specs for novelty value learning
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: da_gain
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: gain for novelty value dopamine signal
MemberDef name: val_thr
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats []
MemberDef desc: threshold for value (training value is 0) -- value is zero below this threshold
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  NVLayerSpec
TypeDef type: class
TypeDef desc: novelty value (NV) layer: starts with a bias of 1.0, and learns to activate 0.0 value -- value signal is how novel the stimulus is
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec', u'ScalarValLayerSpec']
MemberDef name: nv
MemberDef type: NVSpec
MemberDef desc: novelty value specs
MethodDef name: Compute_NVDa
MethodDef desc: compute novelty value da value
MethodDef proto float Compute_NVDa(LeabraLayer* lay)
MethodDef name: Compute_NVPlusPhaseDwt
MethodDef desc: compute plus phase activations as train target value and change weights
MethodDef proto void Compute_NVPlusPhaseDwt(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Update_NVPrior
MethodDef desc: update the prior Nv value, stored in nv unit misc_1 values
MethodDef proto void Update_NVPrior(LeabraLayer* lay, bool er_avail)
MethodDef name: Compute_ExtToPlus
MethodDef desc: copy ext values to act_p
MethodDef proto void Compute_ExtToPlus(Unit_Group* ugp, LeabraNetwork* net)
MethodDef names [u'Compute_ExtToPlus', u'Compute_NVDa', u'Compute_NVPlusPhaseDwt', u'Update_NVPrior']
########################################################################
TypeDef len: 15
TypeDef name:  PVLVDaSpec
TypeDef type: class
TypeDef desc: specs for PVLV da parameters
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: da_gain
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: multiplier for dopamine values
MemberDef name: tonic_da
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: set a tonic &apos;dopamine&apos; (DA) level (offset to add to da values)
MemberDef name: min_pvi
MemberDef type: float
MemberDef desc: minimum PVi value, so that a low PVe value (~0) makes for negative DA regardless of pvi learning: DA_pv = PVe - MAX(PVi, min_pvi) -- not that beneficial for PBWM gating, but can be useful for motor learning (e.g., .4)
MemberDef name: use_actual_er
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: use actual external reward presence to determine when PV is detected (cheating), otherwise use PVi&apos;s estimate of when primary value is avail (more realistic)
MemberDef name: syn_dep
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: old synaptic depression-based mechanism: note that this uses LV_PLUS_IF_PV mode automatically (and otherwise lv_delta mode uses IV_PV_ELSE_LV)
MemberDef name: min_lvi
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_syn_dep', u'DEF_0.1']
MemberDef cats []
MemberDef desc: minimum LVi value, so that a low LVe value (~0) makes for negative DA: DA_lv = LVe - MAX(LVi, min_lvi)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  PVLVDaLayerSpec
TypeDef type: class
TypeDef desc: computes PVLV &apos;Da&apos; signal: typically if(ER), da = ER-PV, else LVe - LVs
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
MemberDef name: da
MemberDef type: PVLVDaSpec
MemberDef desc: parameters for the lvpv da computation
MethodDef name: Compute_ZeroAct
MethodDef desc: compute a zero da value: in minus phase -- not used!
MethodDef proto void Compute_ZeroAct(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Send_Da
MethodDef desc: send the da value to sending projections: every cycle
MethodDef proto void Send_Da(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_Da_LvDelta
MethodDef desc: compute the da value based on recv projections: every cycle in 1+ phases (delta version)
MethodDef proto void Compute_Da_LvDelta(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Update_LvDelta
MethodDef desc: update the LV
MethodDef proto void Update_LvDelta(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_Da_SynDep
MethodDef desc: compute the da value based on recv projections: every cycle in 1+ phases (synaptic depression version)
MethodDef proto void Compute_Da_SynDep(LeabraLayer* lay, LeabraNetwork* net)
MethodDef names [u'Compute_Da_LvDelta', u'Compute_Da_SynDep', u'Compute_ZeroAct', u'Send_Da', u'Update_LvDelta']
########################################################################
TypeDef len: 17
TypeDef name:  MatrixConSpec
TypeDef type: class
TypeDef desc: Learning of matrix input connections based on dopamine modulation of activation
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec']
EnumDef name: OUTPUT
EnumDef val: OUTPUT
EnumDef: output/motor delta rule for: (bg+ - bg-) * s-
EnumDef name: MAINT
EnumDef val: MAINT
EnumDef: maintenance learning rule: (bg_p2 - bg_p) * s_p
EnumDef names: [u'MatrixLearnRule']
MemberDef name: matrix_rule
MemberDef type: MatrixConSpec::MatrixLearnRule
MemberDef desc: learning rule to use
MethodDef name: C_Compute_Err_Delta
MethodDef proto float C_Compute_Err_Delta(LeabraCon* cn, float lin_wt, LeabraUnit* ru, LeabraUnit* su)
MethodDef names [u'C_Compute_Err_Delta']
########################################################################
TypeDef len: 15
TypeDef name:  MatrixBiasSpec
TypeDef type: class
TypeDef desc: Matrix bias spec: special learning parameters for matrix units
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'LeabraConSpec', u'LeabraBiasSpec']
EnumDef name: OUTPUT
EnumDef val: OUTPUT
EnumDef: output/motor delta rule for: (bg+ - bg-) * s-
EnumDef name: MAINT
EnumDef val: MAINT
EnumDef: maintenance learning rule: (bg_p2 - bg_p) * s_p
EnumDef names: [u'MatrixLearnRule']
MemberDef name: matrix_rule
MemberDef type: MatrixBiasSpec::MatrixLearnRule
MemberDef desc: learning rule to use
########################################################################
TypeDef len: 15
TypeDef name:  MatrixUnitSpec
TypeDef type: class
TypeDef desc: basal ganglia matrix units: fire actions or WM updates. modulated by da signals
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'LeabraUnitSpec']
MemberDef name: freeze_net
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: freeze netinput (MAINT in 2+ phase, OUTPUT in 1+ phase) during learning modulation so that learning only reflects DA modulation and not other changes in netin
MethodDef name: Compute_NetAvg
MethodDef proto void Compute_NetAvg(LeabraUnit* u, LeabraLayer* lay, LeabraInhib* thr, LeabraNetwork* net)
MethodDef names [u'Compute_NetAvg']
########################################################################
TypeDef len: 15
TypeDef name:  MatrixMiscSpec
TypeDef type: class
TypeDef desc: misc specs for the matrix layer
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: neg_da_bl
MemberDef type: float
MemberDef opts [u'DEF_0.0002']
MemberDef cats []
MemberDef desc: negative da baseline in learning condition: this amount subtracted from all da values in learning phase (essentially reinforces nogo)
MemberDef name: neg_gain
MemberDef type: float
MemberDef opts [u'DEF_1.5']
MemberDef cats []
MemberDef desc: gain for negative DA signals relative to positive ones: neg DA may need to be stronger!
MemberDef name: perf_gain
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: performance effect da gain (in 2- phase for trans, 1+ for gogo)
MemberDef name: no_snr_mod
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: disable the Da learning modulation by SNrThal ativation (this is only to demonstrate how important it is)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  ContrastSpec
TypeDef type: class
TypeDef desc: contrast enhancement of the Matrix units, where dopamine is applied as a function of gating activation levels
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: gain
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: overall gain for da modulation
MemberDef name: one_val
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: use only one contrast spec value instead of 4 separate ones
MemberDef name: contrast
MemberDef type: float
MemberDef opts [u'CONDSHOW_ON_one_val']
MemberDef cats []
MemberDef desc: [0.5 for maint, 1 for out] proportion of da * gate_act to apply for da modulation -- if this value is 1 (highest contrast) then inactive units get no additional boost, and if it is 0 then every unit gets the same amount
MemberDef name: go_p
MemberDef type: float
MemberDef opts [u'CONDSHOW_OFF_one_val']
MemberDef cats []
MemberDef desc: [0.5 for maint, 1 for out] proportion of da * gate_act for DA+ on GO units: contrast enhancement
MemberDef name: go_n
MemberDef type: float
MemberDef opts [u'CONDSHOW_OFF_one_val']
MemberDef cats []
MemberDef desc: [0.5 for maint, 1 for out] proportion of da * gate_act for DA- on GO units: contrast reduction
MemberDef name: nogo_p
MemberDef type: float
MemberDef opts [u'CONDSHOW_OFF_one_val']
MemberDef cats []
MemberDef desc: [0.5 for maint, 1 for out] proportion of da * gate_act for DA+ on NOGO units: contrast enhancement
MemberDef name: nogo_n
MemberDef type: float
MemberDef opts [u'CONDSHOW_OFF_one_val']
MemberDef cats []
MemberDef desc: [0.5 for maint, 1 for out] proportion of da * gate_act for DA- on NOGO units: contrast reduction
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  MatrixRndGoSpec
TypeDef type: class
TypeDef desc: misc random go specifications (unconditional, nogo)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: avgrew
MemberDef type: float
MemberDef opts [u'DEF_0.9']
MemberDef cats []
MemberDef desc: threshold on global avg reward value (0..1) below which random GO can fire (uses ExtRew_Stat if avail, else avg value from ExtRewLayer) -- once network is doing well overall, shutdown the exploration. This is true for all cases EXCEPT err rnd go
MemberDef name: ucond_p
MemberDef type: float
MemberDef opts [u'DEF_0.0001']
MemberDef cats []
MemberDef desc: unconditional random go probability (on every trial, each stripe has this probability of firing a Go randomly, without conditions)
MemberDef name: ucond_da
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: strength of DA for activating Go (gc.h) and inhibiting NoGo (gc.a) for the unconditional random go
MemberDef name: nogo_thr
MemberDef type: int
MemberDef opts [u'DEF_50']
MemberDef cats []
MemberDef desc: threshold of number of nogo firing in a row that will trigger NoGo random go firing
MemberDef name: nogo_p
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats []
MemberDef desc: probability of actually firing a nogo random Go once the threshold is exceeded
MemberDef name: nogo_da
MemberDef type: float
MemberDef opts [u'DEF_10']
MemberDef cats []
MemberDef desc: strength of DA for activating Go (gc.h) and inhibiting NoGo (gc.a) for a nogo-driven random go firing
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  MatrixErrRndGoSpec
TypeDef type: class
TypeDef desc: matrix random Go firing to encourage exploration when (a series of) errors occur: a stripe is chosen from a softmax over the snrthal netinputs (closer to firing chosen with higher probability)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED', u'DEF_true']
MemberDef cats []
MemberDef desc: whether to use error-driven random go
MemberDef name: min_cor
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: [Default is 5 for MAINT, 1 for OUTPUT] minimum number of sequential correct to start counting errors and doing random go: need some amount of correct before errors count!
MemberDef name: min_errs
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_1']
MemberDef cats []
MemberDef desc: minimum number of sequential errors to start this random go exploration
MemberDef name: err_p
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_1']
MemberDef cats []
MemberDef desc: baseline probability of firing Go, once above min_cor and min_errs
MemberDef name: gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true']
MemberDef cats []
MemberDef desc: [Default is 0 for MAINT, .5 for OUTPUT] gain on softmax over netinputs on snrthal units for choosing the stripe to activate Go for: softmax = normalized exp(gain * snrthal-&gt;net)
MemberDef name: if_go_p
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0']
MemberDef cats []
MemberDef desc: probability of firing a random Go if some stripes are actually currently firing a Go (i.e., the not-all-nogo case); by default, only fire Go if all stripes are firing nogo
MemberDef name: err_da
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_10']
MemberDef cats []
MemberDef desc: strength of DA for activating Go (gc.h) and inhibiting NoGo (gc.a) when error Go is fired (for learning effect) -- this multiplies the actual DA value coming from the SNc, and is also weighted by the netinput of the snrthal stripe; da = -dav * err_da * (snrthal-&gt;net + 1)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  MatrixAvgDaRndGoSpec
TypeDef type: class
TypeDef desc: matrix random Go firing to encourage exploration for non-productive stripes based on softmax of avg_go_da for that stripe (matrix_u-&gt;misc_1)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: on
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: [Default true for MAINT, false for OUTPUT] whether to use random go based on average dopamine values
MemberDef name: avgda_p
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.1']
MemberDef cats []
MemberDef desc: baseline probability of firing random Go for any stripe (first pass before doing softmax)
MemberDef name: gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.5']
MemberDef cats []
MemberDef desc: gain on softmax over avgda values on snrthal units for choosing the stripe to activate Go for (softmax = normalized exp(gain * (avgda_thr - avg_go_da))
MemberDef name: avgda_thr
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.1']
MemberDef cats []
MemberDef desc: threshold on per stripe avg_go_da value (-1..1) below which the random Go starts happening (and is subtracted from avgda as the reference point for the softmax computation)
MemberDef name: nogo_thr
MemberDef type: int
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_10']
MemberDef cats []
MemberDef desc: minimum number of sequential nogos in a row for a stripe before a avg-da random Go will fire (not to be confused with nogo_thr, which is regardless of avgda -- this is specifically for avg-da random go)
MemberDef name: avgda_da
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_10']
MemberDef cats []
MemberDef desc: strength of DA for activating Go (gc.h) and inhibiting NoGo (gc.a) when go is fired (for learning effect)
MemberDef name: avgda_dt
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_on:true', u'DEF_0.005']
MemberDef cats []
MemberDef desc: time constant for integrating the average DA value associated with Go firing for each stripe (stored in matrix_u-&gt;misc_1)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  MatrixLayerSpec
TypeDef type: class
TypeDef desc: basal ganglia matrix layer: fire actions/WM updates, or nogo; MAINT = gate in 1+ and 2+, OUTPUT = gate in -
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
EnumDef name: OUTPUT
EnumDef val: OUTPUT
EnumDef: matrix that does output gating: controls access of frontal activations to other areas (e.g., motor output, or output of maintained PFC information)
EnumDef name: MAINT
EnumDef val: MAINT
EnumDef: matrix that does maintenance gating: controls toggling of maintenance of activity patterns (e.g., PFC) over time
EnumDef names: [u'BGType']
MemberDef name: bg_type
MemberDef type: MatrixLayerSpec::BGType
MemberDef desc: type of basal ganglia/frontal system: output gating (e.g., motor) or maintenance gating (e.g., pfc)
MemberDef name: matrix
MemberDef type: MatrixMiscSpec
MemberDef desc: misc parameters for the matrix layer
MemberDef name: contrast
MemberDef type: ContrastSpec
MemberDef desc: contrast enhancement effects of da/dopamine neuromodulation
MemberDef name: rnd_go
MemberDef type: MatrixRndGoSpec
MemberDef desc: matrix random Go firing for unconditional and nogo firing stripes cases
MemberDef name: err_rnd_go
MemberDef type: MatrixErrRndGoSpec
MemberDef desc: matrix random Go firing to encourage exploration when (a series of) errors are made: chooses stripe to Go at random using probabilities from a softmax over snrthal netinput values: stripes that are closer to firing fire more often
MemberDef name: avgda_rnd_go
MemberDef type: MatrixAvgDaRndGoSpec
MemberDef desc: matrix random Go firing based on average da to encourage exploration for non-productive stripes based on a softmax over the avg_go_da for that stripe (matrix_u-&gt;misc_1)
MethodDef name: Check_RndGoAvgRew
MethodDef desc: check avg_rew levels to see whether we should compute random go (don&apos;t do when avg_rew is good!); false = don&apos;t do rnd go, true = do it
MethodDef proto bool Check_RndGoAvgRew(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_UCondNoGoRndGo
MethodDef desc: compute random Go for unconditional and nogo cases
MethodDef proto void Compute_UCondNoGoRndGo(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_ErrRndGo
MethodDef desc: compute random Go signal when errors have been made recently
MethodDef proto void Compute_ErrRndGo(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_AvgDaRndGo
MethodDef desc: compute random Go signal based on average da values for stripes
MethodDef proto void Compute_AvgDaRndGo(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_ClearRndGo
MethodDef desc: clear the rnd go signal
MethodDef proto void Compute_ClearRndGo(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_DaMod_NoContrast
MethodDef desc: apply given dopamine modulation value to the unit, based on whether it is a go (0) or nogo (1); no contrast enancement based on activation
MethodDef proto void Compute_DaMod_NoContrast(LeabraUnit* u, float dav, int go_no)
MethodDef name: Compute_DaMod_Contrast
MethodDef desc: apply given dopamine modulation value to the unit, based on whether it is a go (0) or nogo (1); contrast enhancement based on activation (gating_act)
MethodDef proto void Compute_DaMod_Contrast(LeabraUnit* u, float dav, float gating_act, int go_no)
MethodDef name: Compute_DaTonicMod
MethodDef desc: compute tonic da modulation (for pfc gating units in first two phases)
MethodDef proto void Compute_DaTonicMod(LeabraLayer* lay, LeabraUnit_Group* mugp, LeabraInhib* thr, LeabraNetwork* net)
MethodDef name: Compute_DaPerfMod
MethodDef desc: compute dynamic da modulation; performance modulation, not learning (second minus phase)
MethodDef proto void Compute_DaPerfMod(LeabraLayer* lay, LeabraUnit_Group* mugp, LeabraInhib* thr, LeabraNetwork* net)
MethodDef name: Compute_DaLearnMod
MethodDef desc: compute dynamic da modulation: evaluation modulation, which is sensitive to GO/NOGO firing and activation in action phase
MethodDef proto void Compute_DaLearnMod(LeabraLayer* lay, LeabraUnit_Group* mugp, LeabraInhib* thr, LeabraNetwork* net)
MethodDef name: Compute_AvgGoDa
MethodDef desc: compute average da present when stripes fire a Go (stored in u-&gt;misc_1); used to modulate rnd_go firing
MethodDef proto void Compute_AvgGoDa(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_MotorGate
MethodDef desc: compute gating signal for OUTPUT Matrix_out
MethodDef proto void Compute_MotorGate(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: LabelUnits_impl
MethodDef desc: label units with Go/No (unit group) -- auto done in InitWeights
MethodDef proto void LabelUnits_impl(Unit_Group* ugp)
MethodDef name: LabelUnits
MethodDef desc: label units with Go/No -- auto done in InitWeights
MethodDef proto void LabelUnits(LeabraLayer* lay)
MethodDef names [u'Check_RndGoAvgRew', u'Compute_AvgDaRndGo', u'Compute_AvgGoDa', u'Compute_ClearRndGo', u'Compute_DaLearnMod', u'Compute_DaMod_Contrast', u'Compute_DaMod_NoContrast', u'Compute_DaPerfMod', u'Compute_DaTonicMod', u'Compute_ErrRndGo', u'Compute_MotorGate', u'Compute_UCondNoGoRndGo', u'LabelUnits', u'LabelUnits_impl']
########################################################################
TypeDef len: 15
TypeDef name:  SNrThalMiscSpec
TypeDef type: class
TypeDef desc: misc specs for the snrthal layer
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: net_off
MemberDef type: float
MemberDef desc: [0.2 or 0] netinput offset -- how much to add to each unit&apos;s baseline netinput -- positive values make it more likely that some stripe will always fire, even if it has a net nogo activation state in the matrix -- very useful for preventing all nogo situations -- if net_off is .2 then act.gain should be 600, if net_off is 0 then act.gain should be 20 (dynamic range is diff)
MemberDef name: go_thr
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats []
MemberDef desc: threshold in snrthal activation required to trigger a Go gating event
MemberDef name: rnd_go_inc
MemberDef type: float
MemberDef opts [u'DEF_0.2']
MemberDef cats []
MemberDef desc: how much to add to the net input for a random-go signal triggered in corresponding matrix layer?
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 15
TypeDef name:  SNrThalLayerSpec
TypeDef type: class
TypeDef desc: computes activation = GO - NOGO from MatrixLayerSpec
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
MemberDef name: snrthal
MemberDef type: SNrThalMiscSpec
MemberDef desc: misc specs for snrthal layer
MethodDef name: Compute_GoNogoNet
MethodDef desc: compute netinput as GO - NOGO on matrix layer
MethodDef proto void Compute_GoNogoNet(LeabraLayer* lay, LeabraNetwork* net)
MethodDef names [u'Compute_GoNogoNet']
########################################################################
TypeDef len: 17
TypeDef name:  PFCGateSpec
TypeDef type: class
TypeDef desc: gating specifications for basal ganglia gating of PFC maintenance layer
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'NO_UPDATE_AFTER', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
EnumDef name: GATE_GO
EnumDef val: GATE_GO
EnumDef: gate GO unit fired
EnumDef name: GATE_NOGO
EnumDef val: GATE_NOGO
EnumDef: gate NOGO unit fired
EnumDef name: EMPTY_GO
EnumDef val: EMPTY_GO
EnumDef: stripe was empty, got a GO
EnumDef name: EMPTY_NOGO
EnumDef val: EMPTY_NOGO
EnumDef: stripe was empty, got a NOGO
EnumDef name: LATCH_GO
EnumDef val: LATCH_GO
EnumDef: stripe was already latched, got a GO
EnumDef name: LATCH_NOGO
EnumDef val: LATCH_NOGO
EnumDef: stripe was already latched, got a NOGO
EnumDef name: LATCH_GOGO
EnumDef val: LATCH_GOGO
EnumDef: stripe was already latched, got a GO then another GO
EnumDef name: NO_GATE
EnumDef val: NO_GATE
EnumDef: no gating took place
EnumDef name: UCOND_RND_GO
EnumDef val: UCOND_RND_GO
EnumDef: unconditional random go: just fire random go with a given probability,
EnumDef name: NOGO_RND_GO
EnumDef val: NOGO_RND_GO
EnumDef: random go for stripes constantly firing nogo
EnumDef name: ERR_RND_GO
EnumDef val: ERR_RND_GO
EnumDef: random go when an error has just been made: explore on error (ACC/LC?)
EnumDef name: AVGDA_RND_GO
EnumDef val: AVGDA_RND_GO
EnumDef: random go for stripes with consistently low average dopamine levels (under performers)
EnumDef names: [u'GateSignal', u'GateState']
MemberDef name: off_accom
MemberDef type: float
MemberDef opts [u'DEF_0']
MemberDef cats []
MemberDef desc: how much of the maintenance current to apply to accommodation after turning a unit off
MemberDef name: out_gate_learn_mod
MemberDef type: bool
MemberDef desc: modulate the learning as a function of whether the corresponding output gating layer fired Go, to enforce appropriate credit assignment to only learn when given stripe participated in output -- this is a discrete modulation (all or nothing)
MemberDef name: updt_reset_sd
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: reset synaptic depression when units are updated
MemberDef name: allow_clamp
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: allow external hard clamp of layer (e.g., for testing)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults']
########################################################################
TypeDef len: 17
TypeDef name:  PFCLayerSpec
TypeDef type: class
TypeDef desc: Prefrontal cortex layer: gets gating signal from SNrThal, gate updates before plus and 2nd plus (update) phase (toggle off, toggle on)
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
EnumDef name: NO_UPDT
EnumDef val: NO_UPDT
EnumDef: no update action
EnumDef name: STORE
EnumDef val: STORE
EnumDef: store current activity state in maintenance currents
EnumDef name: CLEAR
EnumDef val: CLEAR
EnumDef: clear current activity state from maintenance currents
EnumDef name: RESTORE
EnumDef val: RESTORE
EnumDef: restore prior maintenance currents (after transient input activation)
EnumDef name: TMP_STORE
EnumDef val: TMP_STORE
EnumDef: temporary store of current activity state (for default maintenance of last state)
EnumDef name: TMP_CLEAR
EnumDef val: TMP_CLEAR
EnumDef: temporary clear of current maintenance state (for transient representation in second plus)
EnumDef names: [u'MaintUpdtAct']
MemberDef name: gate
MemberDef type: PFCGateSpec
MemberDef desc: parameters controlling the gating of pfc units
MethodDef name: ResetSynDep
MethodDef desc: reset synaptic depression for sending cons from unit that was just toggled off in plus phase 1
MethodDef proto void ResetSynDep(LeabraUnit* u, LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_MaintUpdt_ugp
MethodDef desc: update maintenance state variables (gc.h, misc_1) based on given action: ugp impl
MethodDef proto void Compute_MaintUpdt_ugp(LeabraUnit_Group* ugp, PFCLayerSpec::MaintUpdtAct updt_act, LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_MaintUpdt
MethodDef desc: update maintenance state variables (gc.h, misc_1) based on given action
MethodDef proto void Compute_MaintUpdt(PFCLayerSpec::MaintUpdtAct updt_act, LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: SendGateStates
MethodDef desc: send misc_state gating state variables to the snrthal and matrix layers
MethodDef proto void SendGateStates(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_TmpClear
MethodDef desc: temporarily clear the maintenance of pfc units to prepare way for transient acts
MethodDef proto void Compute_TmpClear(LeabraLayer* lay, LeabraNetwork* net)
MethodDef name: Compute_GatingGOGO
MethodDef desc: compute the gating signal based on SNrThal layer: GOGO model
MethodDef proto void Compute_GatingGOGO(LeabraLayer* lay, LeabraNetwork* net)
MethodDef names [u'Compute_GatingGOGO', u'Compute_MaintUpdt', u'Compute_MaintUpdt_ugp', u'Compute_TmpClear', u'ResetSynDep', u'SendGateStates']
########################################################################
TypeDef len: 15
TypeDef name:  PFCOutGateSpec
TypeDef type: class
TypeDef desc: specifications for pfc output gating
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'INLINE', u'INLINE_DUMP', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase']
MemberDef name: base_gain
MemberDef type: float
MemberDef opts [u'DEF_0.5']
MemberDef cats []
MemberDef desc: how much activation gets through even without a Go gating signal
MemberDef name: go_gain
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: how much extra to add for a Go signal -- automatically computed to be 1.0 - base_gain
MemberDef name: graded_go
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: use a graded Go signal as a function of strength of corresponding SNrThal unit?
MethodDef name: SetBaseGain
MethodDef desc: set base gain value with limits enforced and go_gain updated
MethodDef proto void SetBaseGain(float bg)
MethodDef name: Defaults
MethodDef proto void Defaults()
MethodDef names [u'Defaults', u'SetBaseGain']
########################################################################
TypeDef len: 17
TypeDef name:  PFCOutLayerSpec
TypeDef type: class
TypeDef desc: Prefrontal cortex output gated layer: gets gating signal from SNrThal and activations from PFC_mnt layer: gating modulates strength of activation
TypeDef cats:, [u'Leabra']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'LayerSpec', u'LeabraLayerSpec']
EnumDef name: NO_BGS
EnumDef val: NO_BGS
EnumDef: don&apos;t use a base gain schedule
EnumDef name: EPOCH
EnumDef val: EPOCH
EnumDef: current epoch counter
EnumDef name: EXT_REW_STAT
EnumDef val: EXT_REW_STAT
EnumDef: avg_ext_rew value on network (computed over an &apos;epoch&apos; of training): value is * 100 (0..100)
EnumDef name: EXT_REW_AVG
EnumDef val: EXT_REW_AVG
EnumDef: uses average reward computed by ExtRew layer (if present): value is units[0].act_avg (avg_rew) * 100 (0..100)
EnumDef names: [u'BGSValue']
MemberDef name: out_gate
MemberDef type: PFCOutGateSpec
MemberDef opts []
MemberDef cats [u'PFC']
MemberDef desc: parameters controlling the output gating of pfc units
MemberDef name: gain_sched_value
MemberDef type: PFCOutLayerSpec::BGSValue
MemberDef opts []
MemberDef cats [u'PFC']
MemberDef desc: what value drives the base_gain schedule (Important: affects values entered in start_ctr fields of schedule!)
MemberDef name: gain_sched
MemberDef type: Schedule
MemberDef opts []
MemberDef cats [u'PFC']
MemberDef desc: schedule of out_gate.base_gain values as a function of training epochs or other -- note that these are the literal values and not multipliers on the value entered in out_gate.base_gain -- they replace that value
MethodDef name: SetCurBaseGain
MethodDef desc: set current base gain based on gain_sched if in use
MethodDef proto void SetCurBaseGain(LeabraNetwork* net)
MethodDef names [u'SetCurBaseGain']
########################################################################
TypeDef len: 13
TypeDef name:  PFCLVPrjnSpec
TypeDef type: class
TypeDef desc: A special projection spec for PFC to LVe/i layers. If n unit groups (stripes) in LV == PFC, then it makes Gp one-to-one projections; if LV stripes == 1, it makes a single full projection; if LV stripes == PFC + 1, the first projection is full and the subsequent are gp one-to-one; if recv fm multiple PFC layers, same logic applies to each
TypeDef cats:, [u'Spec']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ProjectionSpec', u'FullPrjnSpec']
MethodDef name: Connect_Gp
MethodDef desc: make a projection from all senders in sugp into all receivers in rugp
MethodDef proto void Connect_Gp(Projection* prjn, Unit_Group* rugp, Unit_Group* sugp)
MethodDef names [u'Connect_Gp']
########################################################################
TypeDef len: 11
TypeDef name:  LeabraCycle
TypeDef type: class
TypeDef desc: one Leabra cycle of activation updating
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'CycleProcess']
########################################################################
TypeDef len: 13
TypeDef name:  LeabraSettle
TypeDef type: class
TypeDef desc: Leabra settling phase of activation updating
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'SettleProcess']
MemberDef name: min_cycles
MemberDef type: int
MemberDef opts [u'DEF_15']
MemberDef cats []
MemberDef desc: minimum number of cycles to settle for
MemberDef name: min_cycles_phase2
MemberDef type: int
MemberDef opts [u'DEF_15']
MemberDef cats []
MemberDef desc: minimum number of cycles to settle for in second phase
MemberDef name: netin_mod
MemberDef type: int
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: net input computation modulus: how often to compute netinput vs. activation update (2 = faster)
MemberDef name: send_delta
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: send netin deltas instead of raw netin: more efficient (automatically sets corresponding unitspec flag)
########################################################################
TypeDef len: 15
TypeDef name:  LeabraTrial
TypeDef type: class
TypeDef desc: Leabra trial process, iterates over phases
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'TrialProcess']
EnumDef name: DO_NOTHING
EnumDef val: DO_NOTHING
EnumDef: do nothing
EnumDef name: INIT_STATE
EnumDef val: INIT_STATE
EnumDef: initialize state
EnumDef name: DECAY_STATE
EnumDef val: DECAY_STATE
EnumDef: decay the state
EnumDef name: MINUS_PHASE
EnumDef val: MINUS_PHASE
EnumDef: minus phase
EnumDef name: PLUS_PHASE
EnumDef val: PLUS_PHASE
EnumDef: plus phase
EnumDef name: MINUS_2
EnumDef val: MINUS_2
EnumDef: second minus phase
EnumDef name: PLUS_2
EnumDef val: PLUS_2
EnumDef: second plus phase
EnumDef name: MINUS_PLUS
EnumDef val: MINUS_PLUS
EnumDef: standard minus-plus (err and assoc)
EnumDef name: PLUS_ONLY
EnumDef val: PLUS_ONLY
EnumDef: only present the plus phase (hebbian-only)
EnumDef name: MINUS_PLUS_NOTHING
EnumDef val: MINUS_PLUS_NOTHING
EnumDef: auto-encoder version with final &apos;nothing&apos; minus phase
EnumDef name: PLUS_NOTHING
EnumDef val: PLUS_NOTHING
EnumDef: just the auto-encoder (no initial minus phase)
EnumDef name: MINUS_PLUS_PLUS
EnumDef val: MINUS_PLUS_PLUS
EnumDef: two plus phases for gated context layer updating
EnumDef name: MINUS_PLUS_2
EnumDef val: MINUS_PLUS_2
EnumDef: two minus-plus phases (for pfc/bg system)
EnumDef name: NO_FIRST_DWT
EnumDef val: NO_FIRST_DWT
EnumDef: for three phase cases: don&apos;t change weights after first plus
EnumDef name: ONLY_FIRST_DWT
EnumDef val: ONLY_FIRST_DWT
EnumDef: for three phase cases: only change weights after first plus
EnumDef name: ALL_DWT
EnumDef val: ALL_DWT
EnumDef: for three phase cases: change weights after *both* post-minus phases
EnumDef names: [u'FirstPlusdWt', u'Phase', u'PhaseOrder', u'StateInit']
MemberDef name: phase_order
MemberDef type: LeabraTrial::PhaseOrder
MemberDef desc: [Default: MINUS_PLUS] number and order of phases to present
MemberDef name: phase_no
MemberDef type: Counter
MemberDef desc: Current phase number
MemberDef name: phase
MemberDef type: LeabraTrial::Phase
MemberDef desc: Type of current phase: minus or plus
MemberDef name: trial_init
MemberDef type: LeabraTrial::StateInit
MemberDef opts [u'DEF_DECAY_STATE']
MemberDef cats []
MemberDef desc: how to initialize network state at start of trial
MemberDef name: no_plus_stats
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: don&apos;t do stats/logging in the plus phase
MemberDef name: no_plus_test
MemberDef type: bool
MemberDef opts [u'DEF_true']
MemberDef cats []
MemberDef desc: don&apos;t run the plus phase when testing
MemberDef name: first_plus_dwt
MemberDef type: LeabraTrial::FirstPlusdWt
MemberDef opts [u'CONDEDIT_ON_phase_order:MINUS_PLUS_PLUS']
MemberDef cats []
MemberDef desc: how to change weights on first plus phase if 2 plus phases (applies only to standard leabralayer specs -- others must decide on their own!)
MemberDef name: cycle
MemberDef type: int
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: current cycle value as copied from settle process ONLY VALID DURING PROCESSING
########################################################################
TypeDef len: 15
TypeDef name:  LeabraMaxDa
TypeDef type: class
TypeDef desc: //////////////////////// stat that computes maximum change in activation, used for determining equilibrium to stop settling; also looks for maximum activation on target layers to provide that as an additional stopping criterion
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_SettleProcess', u'LOOP_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
EnumDef name: DA_ONLY
EnumDef val: DA_ONLY
EnumDef: just use da
EnumDef name: INET_ONLY
EnumDef val: INET_ONLY
EnumDef: just use inet
EnumDef name: INET_DA
EnumDef val: INET_DA
EnumDef: use inet if no activity, then use da
EnumDef names: [u'dAType']
MemberDef name: da_type
MemberDef type: LeabraMaxDa::dAType
MemberDef opts [u'DEF_INET_DA']
MemberDef cats []
MemberDef desc: type of activation change measure to use
MemberDef name: inet_scale
MemberDef type: float
MemberDef opts [u'DEF_1']
MemberDef cats []
MemberDef desc: how to scale the inet measure to be like da
MemberDef name: lay_avg_thr
MemberDef type: float
MemberDef opts [u'DEF_0.01']
MemberDef cats []
MemberDef desc: threshold for layer average activation to switch to da fm Inet
MemberDef name: da
MemberDef type: StatVal
MemberDef desc: absolute value of activation change -- set the stopping criterion here to stop network settling when change has gone below threshold (typically .005)
MemberDef name: trg_max_act
MemberDef type: StatVal
MemberDef desc: target layer(s) maximum activation value -- set the stopping criterion here to stop network settling when activation in target layer exceeds threshold (typically .85)
########################################################################
TypeDef len: 13
TypeDef name:  LeabraSE_Stat
TypeDef type: class
TypeDef desc: squared error for leabra, controls when to compute SE
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat', u'SE_Stat']
MemberDef name: trial_proc
MemberDef type: LeabraNetwork*
MemberDef opts [u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: the trial process to get phase info
MemberDef name: targ_or_comp
MemberDef type: Unit::ExtType
MemberDef desc: when to compute SE: targ = 1st minus, comp = 2nd minus, both = both
MemberDef name: no_off_err
MemberDef type: bool
MemberDef desc: do not count a unit wrong if it is off but target says on -- only count wrong units that are on but should be off
########################################################################
TypeDef len: 13
TypeDef name:  LeabraGoodStat
TypeDef type: class
TypeDef desc: constraint satisfaction goodness statistic
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: subtr_inhib
MemberDef type: bool
MemberDef desc: subtract inhibition from harmony?
MemberDef name: hrmny
MemberDef type: StatVal
MemberDef desc: harmony = act * netin = a_i sum_j a_j w_ij
MemberDef name: strss
MemberDef type: StatVal
MemberDef desc: stress = act * log(act)
MemberDef name: gdnss
MemberDef type: StatVal
MemberDef desc: goodness = harmony + stress
########################################################################
TypeDef len: 13
TypeDef name:  LeabraSharpStat
TypeDef type: class
TypeDef desc: layer sharpness statistic: just max / avg
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: sharp
MemberDef type: StatVal
MemberDef desc: sharpness = max / avg
########################################################################
TypeDef len: 13
TypeDef name:  WrongOnStat
TypeDef type: class
TypeDef desc: Reports an error if a unit is on when it shouldn&apos;t have been (for multiple output cases)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: trg_lay
MemberDef type: Layer*
MemberDef desc: target layer, containing activation pattern for all possible correct responses
MemberDef name: wrng
MemberDef type: StatVal
MemberDef desc: wrong on error statistic
MemberDef name: threshold
MemberDef type: float
MemberDef desc: activation value to consider unit being on
########################################################################
TypeDef len: 13
TypeDef name:  LeabraPrjnRelNetinStat
TypeDef type: class
TypeDef desc: computes overall relative netinput contributions for the different projections into a layer. Useful for setting wt_scale parameters to achieve desired relative contributions of different inputs. you MUST set the layer parameter to the layer in question
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: relnet
MemberDef type: StatVal_List
MemberDef desc: relative netinput contributions for the different projections into units in this layer
MemberDef name: recv_act_thr
MemberDef type: float
MemberDef opts [u'DEF_0.1']
MemberDef cats []
MemberDef desc: only compute netinput for receiving units that are active above this threshold (prevents dilution by varying numbers of inactive units)
########################################################################
TypeDef len: 13
TypeDef name:  ExtRew_Stat
TypeDef type: class
TypeDef desc: external reward statistic
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'FINAL_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: rew
MemberDef type: StatVal
MemberDef desc: external reward value
########################################################################
TypeDef len: 15
TypeDef name:  PhaseOrderEventSpec
TypeDef type: class
TypeDef desc: event specification including order of phases
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'SCOPE_Environment', u'IMMEDIATE_UPDATE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'EventSpec']
EnumDef name: MINUS_PLUS
EnumDef val: MINUS_PLUS
EnumDef: minus phase, then plus phase
EnumDef name: PLUS_MINUS
EnumDef val: PLUS_MINUS
EnumDef: plus phase, then minus phase
EnumDef name: MINUS_ONLY
EnumDef val: MINUS_ONLY
EnumDef: only present minus
EnumDef name: PLUS_ONLY
EnumDef val: PLUS_ONLY
EnumDef: only present plus
EnumDef names: [u'PhaseOrder']
MemberDef name: phase_order
MemberDef type: PhaseOrderEventSpec::PhaseOrder
MemberDef desc: order to present phases of stimuli to network
########################################################################
TypeDef len: 9
TypeDef name:  V3LeabraProject
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase', u'V3ProjectBase']
########################################################################
TypeDef len: 19
TypeDef name:  BpConSpec
TypeDef type: class
TypeDef desc: Bp connection specifications
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec']
TypeDef children: [u'HebbBpConSpec', u'ErrScaleBpConSpec', u'DeltaBarDeltaBpConSpec', u'RBpConSpec']
EnumDef name: AFTER_LRATE
EnumDef val: AFTER_LRATE
EnumDef: apply momentum after learning rate (old pdp style)
EnumDef name: BEFORE_LRATE
EnumDef val: BEFORE_LRATE
EnumDef: apply momentum before learning rate
EnumDef name: NORMALIZED
EnumDef val: NORMALIZED
EnumDef: like BEFORE, but normalize direction to unit length
EnumDef names: [u'MomentumType']
MemberDef name: lrate
MemberDef type: float
MemberDef desc: learning rate
MemberDef name: cur_lrate
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'NO_INHERIT', u'SHOW']
MemberDef cats []
MemberDef desc: current actual learning rate = lrate * lrate_sched current value (* 1 if no lrate_sched)
MemberDef name: lrate_sched
MemberDef type: Schedule
MemberDef desc: schedule of learning rate over training epochs (multiplies lrate!)
MemberDef name: momentum
MemberDef type: float
MemberDef desc: momentum
MemberDef name: momentum_type
MemberDef type: BpConSpec::MomentumType
MemberDef opts [u'CONDEDIT_OFF_momentum:0']
MemberDef cats []
MemberDef desc: type of momentum function to use
MemberDef name: momentum_c
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: complement of momentum (for NORMALIZED)
MemberDef name: decay
MemberDef type: float
MemberDef desc: decay rate (before lrate and momentum)
MemberDef name: decay_fun
MemberDef type: void
MemberDef opts [u'CONDEDIT_OFF_decay:0']
MemberDef cats []
MemberDef desc: the weight decay function to use
MethodDef name: C_Compute_dEdA
MethodDef proto float C_Compute_dEdA(BpCon* cn, BpUnit* ru, BpUnit* su)
MethodDef name: Compute_dEdA
MethodDef desc: get error from units I send to
MethodDef proto float Compute_dEdA(BpSendCons* cg, BpUnit* su)
MethodDef name: B_Compute_dWt
MethodDef desc: Compute dE with respect to the weights
MethodDef proto void B_Compute_dWt(BpCon* cn, BpUnit* ru)
MethodDef name: C_Compute_WtDecay
MethodDef desc: call the decay function
MethodDef proto void C_Compute_WtDecay(BpCon* cn, BpUnit* ru, BpUnit* su)
MethodDef name: C_BEF_Compute_Weights
MethodDef desc: BEFORE_LRATE
MethodDef proto void C_BEF_Compute_Weights(BpCon* cn, BpUnit* ru, BpUnit* su)
MethodDef name: C_AFT_Compute_Weights
MethodDef desc: AFTER_LRATE
MethodDef proto void C_AFT_Compute_Weights(BpCon* cn, BpUnit* ru, BpUnit* su)
MethodDef name: C_NRM_Compute_Weights
MethodDef desc: NORMALIZED
MethodDef proto void C_NRM_Compute_Weights(BpCon* cn, BpUnit* ru, BpUnit* su)
MethodDef name: B_Compute_Weights
MethodDef desc: for the bias unit
MethodDef proto void B_Compute_Weights(BpCon* cn, BpUnit* ru)
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate based on schedule given epoch
MethodDef proto void SetCurLrate(int epoch)
MethodDef names [u'B_Compute_Weights', u'B_Compute_dWt', u'C_AFT_Compute_Weights', u'C_BEF_Compute_Weights', u'C_Compute_WtDecay', u'C_Compute_dEdA', u'C_NRM_Compute_Weights', u'Compute_dEdA', u'SetCurLrate']
########################################################################
TypeDef len: 15
TypeDef name:  BpCon
TypeDef type: class
TypeDef desc: Bp connection
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE']
TypeDef parents: [u'Connection']
TypeDef children: [u'DeltaBarDeltaBpCon']
MemberDef name: pdw
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: previous delta-weight change -- useful for viewing because current weight change (dwt) is typically reset to 0 when views are updated
########################################################################
TypeDef len: 13
TypeDef name:  BpRecvCons
TypeDef type: class
TypeDef desc: group of Bp recv connections
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'RecvCons']
MethodDef name: SetCurLrate
MethodDef proto void SetCurLrate(int epoch)
MethodDef names [u'SetCurLrate']
########################################################################
TypeDef len: 13
TypeDef name:  BpSendCons
TypeDef type: class
TypeDef desc: group of Bp sending connections
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'SendCons']
MethodDef name: Compute_dEdA
MethodDef proto float Compute_dEdA(BpUnit* su)
MethodDef names [u'Compute_dEdA']
########################################################################
TypeDef len: 17
TypeDef name:  BpUnit
TypeDef type: class
TypeDef desc: standard feed-forward Bp unit
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'STEM_BASE', u'DMEM_SHARE_SETS_4', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Unit']
TypeDef children: [u'RBpUnit']
MemberDef name: err
MemberDef type: float
MemberDef desc: this is E, not dEdA
MemberDef name: dEdA
MemberDef type: float
MemberDef opts [u'LABEL_dEdA', u'DMEM_SHARE_SET_3']
MemberDef cats []
MemberDef desc: error wrt activation
MemberDef name: dEdNet
MemberDef type: float
MemberDef opts [u'LABEL_dEdNet']
MemberDef cats []
MemberDef desc: error wrt net input
MethodDef name: SetCurLrate
MethodDef proto void SetCurLrate(int epoch)
MethodDef name: Compute_Error
MethodDef proto void Compute_Error()
MethodDef name: Compute_dEdA
MethodDef proto void Compute_dEdA()
MethodDef name: Compute_dEdNet
MethodDef proto void Compute_dEdNet()
MethodDef name: Compute_dEdA_dEdNet
MethodDef proto void Compute_dEdA_dEdNet()
MethodDef names [u'Compute_Error', u'Compute_dEdA', u'Compute_dEdA_dEdNet', u'Compute_dEdNet', u'SetCurLrate']
########################################################################
TypeDef len: 17
TypeDef name:  BpUnitSpec
TypeDef type: class
TypeDef desc: specifications for Bp units
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec']
TypeDef children: [u'BpContextSpec', u'LinearBpUnitSpec', u'ThreshLinBpUnitSpec', u'NoisyBpUnitSpec', u'StochasticBpUnitSpec', u'RBFBpUnitSpec', u'BumpBpUnitSpec', u'ExpBpUnitSpec', u'SoftMaxBpUnitSpec', u'RBpUnitSpec']
MemberDef name: sig
MemberDef type: SigmoidSpec
MemberDef desc: sigmoid activation parameters
MemberDef name: err_tol
MemberDef type: float
MemberDef desc: error tolerance (no error signal if |t-o|&lt;err_tol)
MemberDef name: err_fun
MemberDef type: void
MemberDef desc: this points to the error fun, set appropriately
MethodDef name: Compute_Error
MethodDef desc: call the error function (testing only)
MethodDef proto void Compute_Error(BpUnit* u)
MethodDef name: Compute_dEdA
MethodDef desc: error wrt unit activation
MethodDef proto void Compute_dEdA(BpUnit* u)
MethodDef name: Compute_dEdNet
MethodDef desc: error wrt net input
MethodDef proto void Compute_dEdNet(BpUnit* u)
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate based on epoch
MethodDef proto void SetCurLrate(BpUnit* u, int epoch)
MethodDef name: GraphActFun
MethodDef desc: graph the activation function (NULL = new graph log)
MethodDef proto void GraphActFun(DataTable* graph_data, float min = -5.0, float max = 5.0)
MethodDef opts [u'BUTTON', u'NULL_OK']
MethodDef names [u'Compute_Error', u'Compute_dEdA', u'Compute_dEdNet', u'GraphActFun', u'SetCurLrate']
########################################################################
TypeDef len: 11
TypeDef name:  HebbBpConSpec
TypeDef type: class
TypeDef desc: Simple Hebbian wt update (send act * recv act)
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'BpConSpec']
########################################################################
TypeDef len: 13
TypeDef name:  ErrScaleBpConSpec
TypeDef type: class
TypeDef desc: con spec that scales the error by given parameter
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'BpConSpec']
MemberDef name: err_scale
MemberDef type: float
MemberDef desc: the scaling parameter
########################################################################
TypeDef len: 13
TypeDef name:  DeltaBarDeltaBpCon
TypeDef type: class
TypeDef desc: delta-bar-delta connection object with local learning rate
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'NO_UPDATE_AFTER']
TypeDef parents: [u'Connection', u'BpCon']
MemberDef name: lrate
MemberDef type: float
MemberDef opts [u'NO_SAVE']
MemberDef cats []
MemberDef desc: local learning rate
########################################################################
TypeDef len: 15
TypeDef name:  DeltaBarDeltaBpConSpec
TypeDef type: class
TypeDef desc: delta-bar-delta has local learning rates for each connection
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'BpConSpec']
MemberDef name: lrate_incr
MemberDef type: float
MemberDef desc: rate of learning rate increase (additive)
MemberDef name: lrate_decr
MemberDef type: float
MemberDef desc: rate of learning rate decrease (multiplicative)
MethodDef name: C_UpdateLrate
MethodDef proto void C_UpdateLrate(DeltaBarDeltaBpCon* cn, BpUnit* ru, BpUnit* su)
MethodDef names [u'C_UpdateLrate']
########################################################################
TypeDef len: 13
TypeDef name:  BpContextSpec
TypeDef type: class
TypeDef desc: for context units in simple recurrent nets (SRN), expects one-to-one prjn from layer it copies, must be AFTER that layer in .layers
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
MemberDef name: hysteresis
MemberDef type: float
MemberDef desc: hysteresis factor: (1-hyst)*new + hyst*old
MemberDef name: hysteresis_c
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: complement of hysteresis
MemberDef name: initial_act
MemberDef type: Random
MemberDef desc: initial activation value
MemberDef name: variable
MemberDef type: taString
MemberDef desc: name of unit variable to copy into
MemberDef name: unit_flags
MemberDef type: Unit::ExtType
MemberDef desc: flags to set on the unit after copying value
########################################################################
TypeDef len: 11
TypeDef name:  LinearBpUnitSpec
TypeDef type: class
TypeDef desc: linear unit in Bp
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
########################################################################
TypeDef len: 13
TypeDef name:  ThreshLinBpUnitSpec
TypeDef type: class
TypeDef desc: thresholded linear unit in Bp
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
MemberDef name: threshold
MemberDef type: float
########################################################################
TypeDef len: 13
TypeDef name:  NoisyBpUnitSpec
TypeDef type: class
TypeDef desc: Bp with noisy output signal (act plus noise)
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
MemberDef name: noise
MemberDef type: Random
MemberDef desc: what kind of noise to add to activations
########################################################################
TypeDef len: 11
TypeDef name:  StochasticBpUnitSpec
TypeDef type: class
TypeDef desc: Bp with a binary stochastic activation function
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
########################################################################
TypeDef len: 13
TypeDef name:  RBFBpUnitSpec
TypeDef type: class
TypeDef desc: Radial basis function (Gaussian) function units in Bp
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
MemberDef name: var
MemberDef type: float
MemberDef desc: variance of Gaussian
########################################################################
TypeDef len: 13
TypeDef name:  BumpBpUnitSpec
TypeDef type: class
TypeDef desc: bump function in Bp: Gaussian of std net input
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
MemberDef name: mean
MemberDef type: float
MemberDef desc: mean of Gaussian
MemberDef name: std_dev
MemberDef type: float
MemberDef desc: std deviation of Gaussian
########################################################################
TypeDef len: 11
TypeDef name:  ExpBpUnitSpec
TypeDef type: class
TypeDef desc: exponential units in Bp: simple exponent of net input
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
########################################################################
TypeDef len: 11
TypeDef name:  SoftMaxBpUnitSpec
TypeDef type: class
TypeDef desc: SoftMax Units: first one-to-one prjn is from corresp exponential unit, second prjn is from single summing linear unit, this then divides two
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
########################################################################
TypeDef len: 11
TypeDef name:  BpLayer
TypeDef type: class
TypeDef desc: A feedforward backpropagation layer
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_lay', u'COMPRESS', u'SCOPE_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Layer']
########################################################################
TypeDef len: 15
TypeDef name:  BpNetwork
TypeDef type: class
TypeDef desc: project for feedforward backpropagation networks (recurrent backprop is in RBpNetwork)
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'FILETYPE_Network', u'EXT_net', u'COMPRESS', u'DEF_NAME_ROOT_Network', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'Network']
MemberDef name: bp_to_inputs
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: backpropagate errors to input layers (faster if not done, which is the default)
MethodDef name: SetCurLrate
MethodDef desc: set current learning rate, based on network epoch counter
MethodDef proto void SetCurLrate()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_dEdA_dEdNet
MethodDef desc: compute derivatives of error with respect to activations &amp; net inputs (backpropagate)
MethodDef proto void Compute_dEdA_dEdNet()
MethodDef opts [u'CAT_Learning']
MethodDef name: Compute_Error
MethodDef desc: compute local error values, for display purposes only (only call when testing, not training)
MethodDef proto void Compute_Error()
MethodDef opts [u'CAT_Learning']
MethodDef name: Trial_Run
MethodDef desc: run one trial of Bp: calls SetCurLrate, Compute_Act, Compute_dEdA_dEdNet, and, if train_mode == TRAIN, Compute_dWt. If you want to save some speed just for testing, you can just call Compute_Act and skip the other two (esp Compute_dEdA_dEdNet, which does a full backprop and is expensive, but often useful for visualization &amp; testing)
MethodDef proto void Trial_Run()
MethodDef opts [u'CAT_Bp']
MethodDef names [u'Compute_Error', u'Compute_dEdA_dEdNet', u'SetCurLrate', u'Trial_Run']
########################################################################
TypeDef len: 11
TypeDef name:  BpProject
TypeDef type: class
TypeDef desc: project for backpropagation networks
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase']
########################################################################
TypeDef len: 13
TypeDef name:  RBpConSpec
TypeDef type: class
TypeDef desc: Recurrent Backprop Con Spec
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'BpConSpec']
TypeDef children: [u'SymRBpConSpec']
########################################################################
TypeDef len: 15
TypeDef name:  RBpUnit
TypeDef type: class
TypeDef desc: recurrent BP unit
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'NO_UPDATE_AFTER', u'DMEM_SHARE_SETS_3', u'DMEM_SHARE_SETS_4', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'Unit', u'BpUnit']
MemberDef name: da
MemberDef type: float
MemberDef desc: delta-activation (change in activation value)
MemberDef name: ddE
MemberDef type: float
MemberDef desc: delta-delta-Error (change in error derivative)
MemberDef name: act_raw
MemberDef type: float
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: current raw activation value
MemberDef name: ext_flags
MemberDef type: float_CircBuffer
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: array of external_flag values
MemberDef name: targs
MemberDef type: float_CircBuffer
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: array of target values
MemberDef name: exts
MemberDef type: float_CircBuffer
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: array of external input values
MemberDef name: acts
MemberDef type: float_CircBuffer
MemberDef opts [u'NO_VIEW']
MemberDef cats []
MemberDef desc: array of activation values
MethodDef name: StoreState
MethodDef desc: store state information in buffers
MethodDef proto void StoreState()
MethodDef name: InitForBP
MethodDef desc: initialization prior to backpropagation (prv_dEdA, prv_dEdNet)
MethodDef proto void InitForBP()
MethodDef name: StepBack
MethodDef desc: move units backwards in time at given tick position in array
MethodDef proto bool StepBack(int tick)
MethodDef name: RestoreState
MethodDef desc: restore state of units to current values at given tick
MethodDef proto bool RestoreState(int tick)
MethodDef name: ShiftBuffers
MethodDef desc: shift unit data buffers by given number of ticks
MethodDef proto void ShiftBuffers(int ticks)
MethodDef name: ResetStored
MethodDef proto void ResetStored()
MethodDef name: Compute_ClampExt
MethodDef proto void Compute_ClampExt()
MethodDef name: Compute_HardClampNet
MethodDef proto void Compute_HardClampNet()
MethodDef names [u'Compute_ClampExt', u'Compute_HardClampNet', u'InitForBP', u'ResetStored', u'RestoreState', u'ShiftBuffers', u'StepBack', u'StoreState']
########################################################################
TypeDef len: 19
TypeDef name:  RBpUnitSpec
TypeDef type: class
TypeDef desc: Recurrent Backprop Unit Specification
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec']
TypeDef children: [u'RBpContextSpec', u'NoisyRBpUnitSpec']
EnumDef name: ACTIVATION
EnumDef val: ACTIVATION
EnumDef: time-average the activations
EnumDef name: NET_INPUT
EnumDef val: NET_INPUT
EnumDef: time-average the net inputs
EnumDef names: [u'TimeAvgType']
MemberDef name: dt
MemberDef type: float
MemberDef desc: grain of time computing on (must be in [0..1] range)
MemberDef name: time_avg
MemberDef type: RBpUnitSpec::TimeAvgType
MemberDef desc: type of time-averaging to perform
MemberDef name: soft_clamp
MemberDef type: bool
MemberDef opts [u'APPLY_IMMED']
MemberDef cats []
MemberDef desc: apply input data as a net input instead of as a direct activation value to clamp to
MemberDef name: fast_hard_clamp_net
MemberDef type: bool
MemberDef opts [u'CONDEDIT_OFF_soft_clamp:true']
MemberDef cats []
MemberDef desc: compute netin from hard clamped layers only once: ONLY IF ALL LAYERS HARD CLAMPED
MemberDef name: soft_clamp_gain
MemberDef type: float
MemberDef opts [u'CONDEDIT_ON_soft_clamp:true']
MemberDef cats []
MemberDef desc: gain on the soft clamping
MemberDef name: teacher_force
MemberDef type: bool
MemberDef desc: use teacher forcing
MemberDef name: store_states
MemberDef type: bool
MemberDef desc: store activity states (usually true, except in AP mode)
MemberDef name: initial_act
MemberDef type: Random
MemberDef desc: initial activation value
MemberDef name: updt_clamped_wts
MemberDef type: bool
MemberDef desc: update weights for clamped units: need this for symmetric cons!
MethodDef name: ResetStored
MethodDef desc: reset the stored state values, which clears bp sequence and resets time, but leaves current state intact
MethodDef proto void ResetStored(RBpUnit* u)
MethodDef name: Compute_ClampExt
MethodDef desc: compute activations resulting from clamped external input (for initial state)
MethodDef proto void Compute_ClampExt(RBpUnit* u)
MethodDef name: Compute_HardClampNet
MethodDef desc: for fast-hard-clamp-net: call this first
MethodDef proto void Compute_HardClampNet(RBpUnit* u)
MethodDef name: Compute_Act_impl
MethodDef proto void Compute_Act_impl(RBpUnit* u)
MethodDef names [u'Compute_Act_impl', u'Compute_ClampExt', u'Compute_HardClampNet', u'ResetStored']
########################################################################
TypeDef len: 11
TypeDef name:  RBpSequence
TypeDef type: class
TypeDef desc: one sequence of events, handles TimeEvents properly
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'SequenceProcess']
########################################################################
TypeDef len: 13
TypeDef name:  APBpCycle
TypeDef type: class
TypeDef desc: one cycle of processing in almeida-pineda (either act or bp depending on &apos;phase&apos;)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'CycleProcess']
MemberDef name: apbp_settle
MemberDef type: APBpSettle*
MemberDef opts [u'NO_SUBTYPE', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to parent settle proc
MemberDef name: apbp_trial
MemberDef type: APBpTrial*
MemberDef opts [u'NO_SUBTYPE', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to parent phase trial
########################################################################
TypeDef len: 13
TypeDef name:  APBpSettle
TypeDef type: class
TypeDef desc: one settling phase in Almeide-Pineda (either act or bp depending on phase)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'SettleProcess']
MemberDef name: apbp_trial
MemberDef type: APBpTrial*
MemberDef opts [u'NO_SUBTYPE', u'READ_ONLY', u'NO_SAVE']
MemberDef cats []
MemberDef desc: pointer to parent phase trial
########################################################################
TypeDef len: 15
TypeDef name:  APBpTrial
TypeDef type: class
TypeDef desc: one Almeida-Pineda BP Trial
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'TrialProcess']
EnumDef name: DO_NOTHING
EnumDef val: DO_NOTHING
EnumDef: do nothing
EnumDef name: INIT_STATE
EnumDef val: INIT_STATE
EnumDef: initialize state
EnumDef name: ACT_PHASE
EnumDef val: ACT_PHASE
EnumDef: activation phase
EnumDef name: BP_PHASE
EnumDef val: BP_PHASE
EnumDef: backpropagation phase
EnumDef names: [u'Phase', u'StateInit']
MemberDef name: phase_no
MemberDef type: Counter
MemberDef desc: Current phase number
MemberDef name: phase
MemberDef type: APBpTrial::Phase
MemberDef desc: state variable for phase
MemberDef name: trial_init
MemberDef type: APBpTrial::StateInit
MemberDef desc: how to initialize network state at start of trial
MemberDef name: no_bp_stats
MemberDef type: bool
MemberDef desc: don&apos;t do stats/logging in the bp phase
MemberDef name: no_bp_test
MemberDef type: bool
MemberDef desc: don&apos;t run the bp phase when testing
########################################################################
TypeDef len: 13
TypeDef name:  APBpMaxDa_De
TypeDef type: class
TypeDef desc: computes max of da and ddE to determine when to stop settling in almeida-pineda algorithm
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_SettleProcess', u'LOOP_STAT', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: da_de
MemberDef type: StatVal
MemberDef desc: max of delta-activation or delta-error
########################################################################
TypeDef len: 15
TypeDef name:  SymRBpConSpec
TypeDef type: class
TypeDef desc: Recurrent Backprop Con Spec: option to maintain weight symmetry through simple averaging of two weight changes
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'ConSpec', u'BpConSpec', u'RBpConSpec']
MemberDef name: sym_wt_updt
MemberDef type: bool
MemberDef desc: if true, use symmetric weight updates
MethodDef name: C_Compute_dWt_Sym
MethodDef proto void C_Compute_dWt_Sym(BpCon* cn, RBpUnit* ru, RBpUnit* su)
MethodDef names [u'C_Compute_dWt_Sym']
########################################################################
TypeDef len: 15
TypeDef name:  RBpContextSpec
TypeDef type: class
TypeDef desc: RBp version of context units in simple recurrent nets (SRN), expects one-to-one prjn from layer it copies, Trial-&gt;CopyContext() must be called by script to update!
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec', u'RBpUnitSpec']
MemberDef name: hysteresis
MemberDef type: float
MemberDef desc: hysteresis factor: (1-hyst)*new + hyst*old
MemberDef name: hysteresis_c
MemberDef type: float
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: complement of hysteresis
MemberDef name: variable
MemberDef type: taString
MemberDef desc: name of unit variable to copy into
MemberDef name: unit_flags
MemberDef type: Unit::ExtType
MemberDef desc: flags to set on the unit after copying value
MethodDef name: CopyContext
MethodDef desc: copy the values in to the context units: called by trial CopyContext under control of a script..
MethodDef proto void CopyContext(RBpUnit* u)
MethodDef names [u'CopyContext']
########################################################################
TypeDef len: 13
TypeDef name:  NoisyRBpUnitSpec
TypeDef type: class
TypeDef desc: RBp with noisy output signal (act plus noise)
TypeDef cats:, [u'Bp']
TypeDef opts:, [u'EXT_spec', u'MEMB_IN_GPMENU', u'SCOPE_Network', u'DEF_CHILD_children', u'DEF_CHILDNAME_Sub_Specs', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'BaseSpec', u'UnitSpec', u'BpUnitSpec', u'RBpUnitSpec']
MemberDef name: noise
MemberDef type: Random
MemberDef desc: what kind of noise to add to activations
########################################################################
TypeDef len: 13
TypeDef name:  BpWizard
TypeDef type: class
TypeDef desc: backprop-specific wizard for automating construction of simulation objects
TypeDef cats:, [u'Wizard']
TypeDef opts:, [u'BUTROWS_2', u'EDIT_WIDTH_60', u'STEM_BASE', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taWizard', u'Wizard']
MethodDef name: SRNContext
MethodDef desc: configure a simple-recurrent-network context layer in the network
MethodDef proto bool SRNContext(Network* net)
MethodDef opts [u'MENU_BUTTON', u'MENU_ON_Network', u'MENU_SEP_BEFORE']
MethodDef names [u'SRNContext']
########################################################################
TypeDef len: 15
TypeDef name:  BpTrial
TypeDef type: class
TypeDef desc: standard Bp feed-forward trial
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'TrialProcess']
TypeDef children: [u'RBpTrial']
MemberDef name: bp_to_inputs
MemberDef type: bool
MemberDef opts [u'DEF_false']
MemberDef cats []
MemberDef desc: backpropagate errors to input layers (faster if not done, which is the default)
########################################################################
TypeDef len: 13
TypeDef name:  RBpTrial
TypeDef type: class
TypeDef desc: one presentation of an event to RBp
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'MEMB_IN_GPMENU', u'AGGOP_SUM', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'SchedProcess', u'TrialProcess', u'BpTrial']
MemberDef name: time
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: current time (relative to start of sequence)
MemberDef name: dt
MemberDef type: float
MemberDef opts [u'READ_ONLY', u'SHOW']
MemberDef cats []
MemberDef desc: this is made to correspond to the dt used by units
MemberDef name: time_window
MemberDef type: float
MemberDef desc: time window to pay attention to derivatives for
MemberDef name: bp_gap
MemberDef type: float
MemberDef desc: time period to go before performing a bp
MemberDef name: real_time
MemberDef type: bool
MemberDef desc: use &apos;real time&apos; model (else time_window = length of sequence)
MemberDef name: bp_performed
MemberDef type: bool
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: true if bp was just performed last step
MemberDef name: time_win_ticks
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: time window in ticks
MemberDef name: bp_gap_ticks
MemberDef type: int
MemberDef opts [u'READ_ONLY']
MemberDef cats []
MemberDef desc: bp window in ticks
########################################################################
TypeDef len: 13
TypeDef name:  CE_Stat
TypeDef type: class
TypeDef desc: Cross-entropy error statistic (asymmetric divergence)
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: ce
MemberDef type: StatVal
MemberDef desc: cross-entropy error
MemberDef name: tolerance
MemberDef type: float
MemberDef desc: if error is less than this, its 0
########################################################################
TypeDef len: 13
TypeDef name:  NormDotProd_Stat
TypeDef type: class
TypeDef desc: Normalized Dot Product of act and target values
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: ndp
MemberDef type: StatVal
MemberDef desc: normalized dot product
########################################################################
TypeDef len: 13
TypeDef name:  VecCor_Stat
TypeDef type: class
TypeDef desc: Vector Correlation of act and target values
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: vcor
MemberDef type: StatVal
MemberDef desc: vector correlation
########################################################################
TypeDef len: 13
TypeDef name:  NormVecLen_Stat
TypeDef type: class
TypeDef desc: Normalized Vector Length of act and target values
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat']
MemberDef name: nvl
MemberDef type: StatVal
MemberDef desc: normalized vector length
########################################################################
TypeDef len: 11
TypeDef name:  RBpSE_Stat
TypeDef type: class
TypeDef desc: Squared error for recurrent backprop, mulitplies by dt
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'EXT_proc', u'COMPUTE_IN_TrialProcess', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'Process', u'Stat', u'SE_Stat']
########################################################################
TypeDef len: 9
TypeDef name:  V3BpProject
TypeDef type: class
TypeDef cats:, [u'v3Compat']
TypeDef opts:, [u'FILETYPE_Project', u'EXT_proj', u'COMPRESS', u'DUMP_LOAD_POST', u'DEF_NAME_ROOT_Project', u'INSTANCE']
TypeDef parents: [u'taBase', u'taOBase', u'taNBase', u'taFBase', u'taProject', u'ProjectBase', u'V3ProjectBase']

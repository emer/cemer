// ta_Dump File v2.0
LeabraProject .projects[0] { 
  Doc_Group @.docs = [8] {
    taDoc @[0] { };
    taDoc @[1] { };
    taDoc @[2] { };
    taDoc @[3] { };
    taDoc @[4] { };
    taDoc @[5] { };
    taDoc @[6] { };
    taDoc @[7] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [2] {
    SelectEdit @[0] { };
    SelectEdit @[1] { };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [2] { 
      DataTable @[0] { 
    UserDataItem_List @*(.user_data_) { 
	  UserDataItem @[0] { };
    };

	DataTableCols @.data = [4] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	};
      };
      DataTable @[1] { 
    UserDataItem_List @*(.user_data_) { 
	  UserDataItem @[0] { };
	  UserDataItem @[1] { };
	  UserDataItem @[2] { };
    };

	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  String_Data @[1] { };
	  String_Data @[2] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [22] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	  float_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	  float_Data @[14] { };
	  float_Data @[15] { };
	  float_Data @[16] { };
	  float_Data @[17] { };
	  float_Data @[18] { };
	  float_Data @[19] { };
	  float_Data @[20] { };
	  float_Data @[21] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	};
      };
    };
    DataTable_Group @.gp[2] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [3] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
	      UserDataItem @[2] { };
      };
};
	  String_Data @[2] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[1] { 
    UserDataItem_List @*(.user_data_) { 
	  UserDataItem @[0] { };
    };

	DataTableCols @.data = [3] {
	  String_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [2] {
    Program @[0] { 
      ProgType_List @.types = [2] {
	DynEnumType @[0] { 
	  DynEnumItem_List @.enums = [6] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	    DynEnumItem @[4] { };
	    DynEnumItem @[5] { };
	  };
	};
	DynEnumType @[1] { 
	  DynEnumItem_List @.enums = [2] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	  };
	};
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
      };

      ProgEl_List @.init_code = [1] {
	InitNamedUnits @[0] { };
      };

      ProgEl_List @.prog_code = [2] {
	ResetDataRows @[0] { };
	ForLoop @[1] { 
	  ProgEl_List @.loop_code = [6] {
	    IfElse @[0] { 
	      ProgEl_List @.true_code = [1] {
		AssignExpr @[0] { };
	      };

	      ProgEl_List @.false_code = [1] {
		AssignExpr @[0] { };
	      };
	    };
	    PrintVar @[1] { };
	    AddNewDataRow @[2] { };
	    SetUnitsVar @[3] { };
	    DoneWritingDataRow @[4] { };
	    IfBreak @[5] { };
	  };
	};
      };
    };
    Program @[1] { 
      ProgType_List @.types = [3] {
	DynEnumType @[0] { 
	  DynEnumItem_List @.enums = [6] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	    DynEnumItem @[4] { };
	    DynEnumItem @[5] { };
	  };
	};
	DynEnumType @[1] { 
	  DynEnumItem_List @.enums = [2] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	  };
	};
	DynEnumType @[2] { 
	  DynEnumItem_List @.enums = [1] {
	    DynEnumItem @[0] { };
	  };
	};
      };

      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [8] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
      };

      ProgEl_List @.init_code = [1] {
	InitNamedUnits @[0] { };
      };

      ProgEl_List @.prog_code = [2] {
	ResetDataRows @[0] { };
	ForLoop @[1] { 
	  ProgEl_List @.loop_code = [10] {
	    RandomCall @[0] { };
	    IfElse @[1] { 
	      ProgEl_List @.true_code = [3] {
		AssignExpr @[0] { };
		AssignExpr @[1] { };
		AssignExpr @[2] { };
	      };

	      ProgEl_List @.false_code = [1] {
		DoLoop @[0] { 
		  ProgEl_List @.loop_code = [3] {
		    RandomCall @[0] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[1] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    AssignExpr @[2] { };
		  };
		};
	      };
	    };
	    PrintVar @[2] { };
	    AddNewDataRow @[3] { };
	    SetUnitsVar @[4] { };
	    SetUnitsLit @[5] { };
	    AddNewDataRow @[6] { };
	    SetUnitsVar @[7] { };
	    SetUnitsLit @[8] { };
	    DoneWritingDataRow @[9] { };
	  };
	};
      };
    };
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  ProgramCall @[3] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[4] { };
	  NetDataLoop @[5] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[7] { };
	  ProgramCall @[8] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[9] { };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [6] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[3] { };
	  ProgramCall @[4] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[5] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [4] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [10] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[9] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [4] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [3] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [2] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [8] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		  };
		};
		GridTableView @[2] { 
		  T3DataView_List @.children = [22] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		    GridColView @[9] { };
		    GridColView @[10] { };
		    GridColView @[11] { };
		    GridColView @[12] { };
		    GridColView @[13] { };
		    GridColView @[14] { };
		    GridColView @[15] { };
		    GridColView @[16] { };
		    GridColView @[17] { };
		    GridColView @[18] { };
		    GridColView @[19] { };
		    GridColView @[20] { };
		    GridColView @[21] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [2] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [4] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [3] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
      BaseSpec_Group @.specs = [4] {
	DaModUnitSpec @[0] { };
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { 
	      Schedule @.lrate_sched = [2] {
		SchedItem @[0] { };
		SchedItem @[1] { };
	      };
	    };
	  };

	  Schedule @.lrate_sched = [2] {
	    SchedItem @[0] { };
	    SchedItem @[1] { };
	  };
	};
	BaseSpec_Group @.gp[0] = [5] { 
	  DaModUnitSpec @[0] { 
	    BaseSpec_Group @.children = [1] {
	      DaModUnitSpec @[0] { };
	    };
	  };
	  DaModUnitSpec @[1] { };
	  DaModUnitSpec @[2] { };
	  MatrixUnitSpec @[3] { };
	  DaModUnitSpec @[4] { };
	};
	BaseSpec_Group @.gp[1] = [3] { 
	  LeabraConSpec @[0] { 
	    BaseSpec_Group @.children = [4] {
	      PVConSpec @[0] { 
		BaseSpec_Group @.children = [2] {
		  PVConSpec @[0] { };
		  PVConSpec @[1] { 
		    BaseSpec_Group @.children = [1] {
		      PVConSpec @[0] { };
		    };
		  };
		};
	      };
	      LeabraBiasSpec @[1] { 
		BaseSpec_Group @.children = [2] {
		  LeabraBiasSpec @[0] { 
		    Schedule @.lrate_sched = [2] {
		      SchedItem @[0] { };
		      SchedItem @[1] { };
		    };
		  };
		  MatrixBiasSpec @[1] { 
		    Schedule @.lrate_sched = [2] {
		      SchedItem @[0] { };
		      SchedItem @[1] { };
		    };
		  };
		};

		Schedule @.lrate_sched = [2] {
		  SchedItem @[0] { };
		  SchedItem @[1] { };
		};
	      };
	      LeabraConSpec @[2] { 
		BaseSpec_Group @.children = [2] {
		  LeabraConSpec @[0] { 
		    Schedule @.lrate_sched = [2] {
		      SchedItem @[0] { };
		      SchedItem @[1] { };
		    };
		  };
		  LeabraBiasSpec @[1] { 
		    Schedule @.lrate_sched = [2] {
		      SchedItem @[0] { };
		      SchedItem @[1] { };
		    };
		  };
		};

		Schedule @.lrate_sched = [2] {
		  SchedItem @[0] { };
		  SchedItem @[1] { };
		};
	      };
	      MatrixConSpec @[3] { 
		BaseSpec_Group @.children = [1] {
		  MatrixConSpec @[0] { 
		    Schedule @.lrate_sched = [2] {
		      SchedItem @[0] { };
		      SchedItem @[1] { };
		    };
		  };
		};

		Schedule @.lrate_sched = [2] {
		  SchedItem @[0] { };
		  SchedItem @[1] { };
		};
	      };
	    };

	    Schedule @.lrate_sched = [2] {
	      SchedItem @[0] { };
	      SchedItem @[1] { };
	    };
	  };
	  MarkerConSpec @[1] { };
	  LeabraConSpec @[2] { };
	};
	BaseSpec_Group @.gp[2] = [8] { 
	  ExtRewLayerSpec @[0] { };
	  PVrLayerSpec @[1] { };
	  PViLayerSpec @[2] { };
	  LVeLayerSpec @[3] { 
	    BaseSpec_Group @.children = [1] {
	      LViLayerSpec @[0] { };
	    };
	  };
	  PVLVDaLayerSpec @[4] { };
	  PFCLayerSpec @[5] { };
	  MatrixLayerSpec @[6] { };
	  SNrThalLayerSpec @[7] { };
	};
	BaseSpec_Group @.gp[3] = [7] { 
	  FullPrjnSpec @[0] { };
	  OneToOnePrjnSpec @[1] { };
	  GpOneToOnePrjnSpec @[2] { };
	  UniformRndPrjnSpec @[3] { };
	  OneToOnePrjnSpec @[4] { };
	  GpRndTesselPrjnSpec @[5] { 
	    TessEl_List @.send_gp_offs = [1] {
	      GpTessEl @[0] { };
	    };
	  };
	  TesselPrjnSpec @[6] { 
	    TessEl_List @.send_offs = [1] {
	      TessEl @[0] { };
	    };
	  };
	};
      };

      Layer_Group @.layers = [13] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[3] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[5] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[6] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @[7] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[8] { 
	  Unit_Group @.units = [6] {
	  };
	};
	LeabraLayer @[9] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [2] {
	  };
	};
	LeabraLayer @[10] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [28] { 
	    };
	    LeabraUnit_Group @.gp[1] = [28] { 
	    };
	    LeabraUnit_Group @.gp[2] = [28] { 
	    };
	    LeabraUnit_Group @.gp[3] = [28] { 
	    };
	  };
	};
	LeabraLayer @[11] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [1] { 
	    };
	    LeabraUnit_Group @.gp[1] = [1] { 
	    };
	    LeabraUnit_Group @.gp[2] = [1] { 
	    };
	    LeabraUnit_Group @.gp[3] = [1] { 
	    };
	  };
	};
	LeabraLayer @[12] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [6] { 
	    };
	    LeabraUnit_Group @.gp[1] = [6] { 
	    };
	    LeabraUnit_Group @.gp[2] = [6] { 
	    };
	    LeabraUnit_Group @.gp[3] = [6] { 
	    };
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_0";
 desc=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   auto_open=1;
   text="<html>
<head></head>
<body>

= Building a Complete Model =

This project provides step-by-step directions for constructing a working neural network simulation from the ground up, including programming a simple psychological task (target detection), which we extend through several stages to ultimately simulate the more complex CPT-AX task used in working memory studies.

 '''To return to this document''' at any time, just hit the <code>ProjectDocs</code> tab at the top of this middle panel where you are now reading.

Some basic terminology:
* '''Left browser panel''' is the left portion of the window with a \"tree\" of objects in the simulation (inlcuding the netowrk, and the input/output data, etc).
* '''Middle edit panel''' is where you are currently reading -- it can display different things depending on the selected tabs at the top, and what is currently selected in the left browser panel.  The left-most tab usually shows what is selected in the browser, and the other tabs with \"pins\" down are locked in place and contain this document and the Wizard, which we will be making heavy use of.  The right-most tab represents the configuration information for the 3D display shown in the right-most view panel (which is now called \"Frame1\" and is empty).
* '''Right view panel''' shows 3d displays of various simulation objects, incuding the network, input/output patterns, and graphs of results, etc.

== Basic Task: Target Detection ==

The basic task we'll simulate involves presenting letters one at at a time to the network, and having it identify \"targets\" from \"non-targets\".  The targets are the letters 'A' and 'X', and the non-targets are 'B', 'C', 'Y', and 'Z'.

The network will have 6 input units representing each of these letters, and two output units, one for \"target\" and the other for \"non-target\".  It will have a hidden layer to learn the mapping (though this task is initially so trivial that it doesn't even require a hidden layer -- we'll make it harder later).

== Chapters ==

Here are the steps we'll go through, organized as separate document chapters (which live under the <code>docs</code> section of the browser, as does this document):
# [[.docs.BuildNet]] -- building the network
# [[.docs.InputData]] -- make basic input patterns (data) to present to the network
# [[.docs.Programs]] -- creating and controlling the programs that perform the simulation
# [[.docs.OutputData]] -- monitoring and analyzing the performance of the model
# [[.docs.TaskProgram]] -- writing a program to construct the task input patterns, including more complex tasks.
# Extras: elaborations that go all the way to the full CPT-AX task
## [[.docs.CPTAX_Program]] -- extend our basic program to the full CPT-AX task
## [[.docs.PfcBg]] -- adding a prefrontal cortex/basal ganglia to the model to handle the full CPT-AX task.

== If You Get Off Track.. ==

In the same directory where you loaded this project is a <code>ax_tutorial_final.proj</code> project file, which has the full project that will result from following these directions (not the extras).  You can load this project and refer to it to see what things are supposed to look like.


</body>
</html>
";
  };
  taDoc @[1] {
   name="BuildNet";
   auto_open=0;
   text="<html>
<head></head>
<body>

= Building a Network =

The Wizard makes it easy to get started making a network.  It is located in the <code>wizards</code> section of the browser, and can always be found in the <code>LeabraWizard_0</code> tab at the top of this middle panel.  This link: [[.PanelTab.LeabraWizard_0]] will take you there (return to these docs by pressing the BuildNet tab).

You will see that it is currently configured for 3 layers, which is fine for our purposes.  But how do we tell it how big to make these layers?  The wizard has some layer configuration information tucked inside of it -- to access it, you need to open up the wizard object in the browser (as is true of most things in this simulator).  This link: [[.wizards.LeabraWizard_0.layer_cfg.Input]] will take you directly to the configuration information for the Input layer.  You can see the browser expanding to reveal the other layer configuration information as well.  Here are the layer sizes (<code>n_units</code>) you should enter:

* [[.wizards.LeabraWizard_0.layer_cfg.Input]] = 6
* [[.wizards.LeabraWizard_0.layer_cfg.Hidden]] = 16
* [[.wizards.LeabraWizard_0.layer_cfg.Output]] = 2

Note that the system automatically applies changes when you move from one selection to the next.

Next, return to the [[.PanelTab.LeabraWizard_0]] tab, and at the bottom, click the <code>Network</code> 
menu button, and choose the [[.wizards.LeabraWizard_0.StdNetwork()|Network/StdNetwork]] option.  This pops up a confirmation dialog explaining that it will create a new network according to your current specifications.  Hit OK.

You will see a network appear in the right view panel, and the left browser will expand to reveal all of the objects created (e.g., layers and specifications).  Feel free to click around on these objects now to see what they have in them -- we will just use the defaults so there is no need to change anything.

Now we'll move on to making the [[.docs.InputData]] for the simple target detection task.  Below are a few optional topics that you can explore if you wish (or come back to later at any time):

== Manipulating the 3d View ==

There are different modes and controls for the 3d view located on the extreme right-hand side of the window next to the network display.  Drag the mouse over them to see what they do (a \"tool tip\" should pop up when the mouse hovers over the button).

To begin, you can experiment with the \"hand\" tool -- if you click the mouse and move it around, you'll see that you can manipulate the \"camera view\" into the 3d view of the network.

Two key tips:
* <b>Hold down Shift to move instead of rotate</b> (while moving the mouse).
* <b>Pressing the \"home\" icon restores the initial view</b> (this is the first home one, not the blueprint guy -- the blueprint guy is for saving the current view state as the default view that the home button returns to.

At some point you'll discover that if you don't completely stop before lifting the mouse button, the view continues to rotate -- kind of mezmerizing -- apologies if you spend too much time doing this (we certainly have.. :)

If you have a scroll wheel, you'll see that it acts like a zoom.  The same effect can be had with the <b>Dolly</b> wheel (the term is an analogy to a camera dolly that moves a camera through a scene in filming a movie).

The <b>Rotx</b> and <b>Roty</b> wheels rotate precisely around the x and y axes -- these are often more useful than the mouse-based rotation because they don't introduce off-angles.

The <b>Flashlight</b> button is very useful for zooming in on something of interest (especially for large complicated displays) -- after clicking on it, then click on an object in the view (NOTE: text doesn't work for this purpose).  Thus button stays on until unclicked or another button is clicked, so you can do repeated exploration.

Finally, for extra thrills, you can click the right mouse button (or ctrl+mouse on a Mac) and configure many interesting display options -- check out the different still draw styles, and the stereo options -- dig out those old red/green stereo glasses!

== Configuring the Network View ==

The middle panel tab labeled [[.PanelTab.Network_0]] provides various parameters for controlling the network display.  There are 3 main segments
 (see the wiki [[.Wiki.Network_View]] page for more info):
* Display parameters at the top (font sizes, display style etc) (mouse over to get more info, and explore!)
* Network variable selector -- what value to display in the units in the network view (activations vs. weights vs. netinputs etc).  If you select one of the weight variables (e.g., r.wt for receiving weights into a selected unit; s.wt is for sending weights out), you then need to use the red arrow tool in the viewer to select a unit to view -- it will turn green, and you should be able to see its weights.
* Spec selector and viewer -- this is very handy for seeing where your specs are used in the network -- try clicking on the <code>HiddenLayer</code> and then <code>Input_Output</code> -- note that the green layer border changes color indicating which layers are using these layer specs.  You can also use the context menu to edit the specs right there.

== Changing the Network Configuration ==

You can also configure the network layout interactively in the viewer, including repositioning the layers, and orienting the network display relative to other objects in the view (which we postpone for later, when this arises).

To do this, select the <b>red arrow</b> tool, and you'll see that transparent purple arrow objects now appear on the layers, and a fancy box thing appears on the network text box.  These are the manipulation controls.  Try clicking on one of the horizontal arrows for the Output layer, and moving it around.  This moves within the \"horizontal\" plane (the X-Y plane for the network).  The vertical arrows not surprisingly move in the vertical dimension (the Z axis for the network).

</body>
</html>
";
  };
  taDoc @[2] {
   name="InputData";
   auto_open=0;
   text="<html>
<head></head>
<body>

= Input Data  (Patterns to Present to the Network) =

(Note -- to return to this document, click on docs/InputData in the left browser window).

We return to the [[.PanelTab.LeabraWizard_0]] wizard tab, and move across to the next menu button on the
bottom labeled <code>Data</code>, and select the [[.wizards.LeabraWizard_0.StdData()|Data/StdData]] option.  This will bring up a dialog with mostly default information already filled in (and not modifyiable because there are no other options), but there is one parameter we need to specify: <code>n_patterns</code>.  Enter 6 -- one for each of the different input letters.

This will construct a \"data table\" object (much like a spreadsheet or simple data base) that has columns automatically corresponding to the Input and Output layers of the network, with 6 rows where we can specify the different input patterns to the network, which define our simple target detection task.  The Name column is useful for labeling our patterns.  you'll see <code>(matrix)</code> in the Input and Output columns, and if you click on one of those, an extra editor shows up at the bottom of the window to allow you to enter values for the \"matrix\" of input and output units.  The Name column, in contrast, has just a single value for each row (i.e., a \"scalar\"), so it can be edited directly in the main table view.

This data table object is called [[.data.gp.InputData.StdInputData]] and it lives in the <code>data/InputData subgroup</code> in the left browser, in case you need to get back to it.

Here is what you should enter, where we're calling the 1st output unit the \"non-target\" and the 2nd one the target, and the Input units are ordered bottom-to-top, left-to-right:
<table>
<tr><th>Name</th> <th>Input</th> <th>Output</th></tr>
<tr><td>A</td><td>000<br>100</td><td>01</td></tr>
<tr><td>B</td><td>000<br>010</td><td>10</td></tr>
<tr><td>C</td><td>000<br>001</td><td>10</td></tr>
<tr><td>X</td><td>100<br>000</td><td>01</td></tr>
<tr><td>Y</td><td>010<br>000</td><td>10</td></tr>
<tr><td>Z</td><td>001<br>000</td><td>10</td></tr>
</table>

(If you're really lazy, you can just load in these data patterns from the file <code>sim_tutorial_input_data.dtbl</code> by doing [[.data.gp.InputData.StdInputData.Load()|Object/Load]]
on the [[.data.gp.InputData.StdInputData]] object).

== Visualizing the Data Patterns ==

The best way to make sure you've entered the right patterns is to create a \"Grid View\" of your input data -- do this by selecting the [[.data.gp.InputData.StdInputData.NewGridView()|View/New Grid View]] option from the menu at the top of the data table editor that you've been using to enter input patterns with.  Go ahead and keep the \"New Frame\" default for the dialog that pops up (you can also add multiple view elements together in a single 'frame' in the 3d view -- we'll do that later).

This will create a [[.T3Tab.StdInputData]] tab in the right view panel, and display your input patterns, which hopefully match those shown in the above table.  If not, you can correct them by clicking back on StdInputData in the left browser -- you cannot edit values in the grid view display.

There is also a new [[.PanelTab.StdInputData]] middle-panel tab, which contains various parameters for controlling the configuration of the grid view display.  You can mouse-over the fields to get more info.  Many of these require you to hit the Apply button at the bottom before they take effect on the view.

The next step is to create [[.docs.Programs]] to control the presentation of these input patterns to the network.

</body>
</html>
";
  };
  taDoc @[3] {
   name="Programs";
   auto_open=0;
   text="<html>
<head></head>
<body>

= Programs for Controlling the Simulation =

Again return to the [[.PanelTab.LeabraWizard_0]] wizard panel, and now select 
[[.wizards.LeabraWizard_0.StdProgs()|Programs/Std Progs]] from the bottom menu.  (return to these docs by clicking back on <code>docs/Programs</code> in the browser).

This created a set of standard programs that organize the presentation of input patterns to the network into a hierarchy of time scales:

* LeabraBatch -- iterates over multiple simulated \"subjects\" -- each having their own different random initial weights (we won't use this initially).
* LeabraTrain -- a complete training of the network from random initial weights to final correct performance, by iterating over multiple \"epochs\"
* LeabraEpoch -- one full pass through all of the different task input patterns
* LeabraTrial -- processes one input pattern, using two ''phases'' of settling -- the minus phase presents the input stimulus, and allows the network to come up with its own best guess as to the correct response, and the plus phase presents the correct answer to allow the network to learn to perform the task correctly.
* LeabraSettle -- multiple updates of neural unit activations to process a given input/output pattern.
* LeabraCycle -- a single cycle of updating of neural unit activation states (roughly 5-10msec of simulated real time)

There are also some other supporting programs that we'll discuss later.

You might notice that the ApplyInputs program is opened up to show the LayerWriter_0 object -- this was auto-configured to apply the input data values to the appropriate (same name) layers in the network.  If you change the layer names or add additional layers, etc, you may need to go back to this object and hit the AutoConfig button to reconfigure it.  We'll do this later in the tutorial.

== Running the Simulation ==

First, make sure you're viewing the [[.T3Tab.Network_0]] network view tab, and then click on the 
 [[.programs.gp.LeabraAll_Std.LeabraTrain]] program.  Press the 
 [[.programs.gp.LeabraAll_Std.LeabraTrain.Init()|Init]] button at the bottom of the window, followed by 
the [[.programs.gp.LeabraAll_Std.LeabraTrain.Run()|Run]] button (these links will actually do this for you!).

You should then see the network processing each of the input patterns for the task multiple times, as it iterates over epochs of trials of settles of cycles of processing.  Depending on your hardware, this may wiz by in quite a blur.

Once it finishes, you can see more clearly what it is doing by hitting the [[.programs.gp.LeabraAll_Std.LeabraTrain.Step()|Step]] button, 
which will perform one phase of settling at a time.  You should observe that the network gets the correct output unit active in the minus phase (look for <code>MINUS_PHASE</code> or <code>PLUS_PHASE</code> in the text region at the bottom of the network 3d view display.  It has successfully learned the task!

We'll learn a lot more about how programs work when we write one from scratch to generate our input data for training the network.  If you're adventurous, you can click on them and hit the EditProgram button to see the underlying \"guts\" that make the programs do what they do.  Everything that happens in running the simulation is explicitly listed out, and can be modified in any way that you might want -- this is very powerful and probably a bit dangerous too.. :)  Don't do anything to modify the programs at this point.

The next step is more clearly monitor the performance of the network as it learns, by recording 
[[.docs.OutputData]] from the network.

</body>
</html>
";
  };
  taDoc @[4] {
   name="OutputData";
   auto_open=0;
   text="<html>
<head></head>
<body>
= Monitoring, Analyzing, and Displaying Output Data =

In this section we explore various ways of understanding better how the network is performing.

== Graphing Learning Performance over Epochs ==

To see how your network is learning a given task, the first step is to generate a graph of the learning performance (sum squared error on the training patterns) over epochs.  Fortunately, the default programs are already collecting this data for us, so we just need to display the graph.

The data is being recorded in the [[.data.gp.OutputData.EpochOutputData]] data table object in the <code>data/OutputData subgroup</code>.  You should see a few rows of data from the previous run, and you should notice that the <code>avg_sse</code> column shows a general decrease in average sum-squared-error on the training patterns, ending in a 0, which is what stopped the training.

To graph this data, you just generate a graph view of this data table.  As a general rule in the software, all view information is always generated by a given main object like a datatable or a network -- you don't create a graph and then associate data with it -- it goes the other way.  The menu selection to create the graph view is [[.data.gp.OutputData.EpochOutputData.NewGraphView()|View/New Graph View]].  This time, let's be adventurous and instead of putting this graph in a separate view frame, put it in the <code>Network_0</code> frame.

If you happened to have put it in the wrong frame initially, don't worry -- just do the context menu over the frame view tab on the right (should be called EpochOutputData), and select Delete Frame.  Note that there can be multiple views of the same underlying data.

You should see a graph appear in the upper right of your network display, showing a decreasing line from left to right.  By default the line is (redundantly) color coded for the plot value.  You can control this and many other features of the graph display in the graph control panel.

But wait, where is that panel?  You should only see a [[.PanelTab.Network_0]] tab in the middle panel tabs.  If you click on that guy, and look at the bottom, you'll see selectors for the different view objects within this one view frame (Network_0 and EpochOutputData Graph).  Select the graph view tab at the bottom, and again mouse over the various controls and play around with them.  As you can see, there are many different ways of
configuring the graphs -- feel free to explore.  Note that there are several other variables that you could plot, including average cycles to settle, and a count of the number of errors made across trials. Also see the wiki [[.Wiki.GraphView]] page for more details.

To see your graph updating in real-time, you can re-init and run the [[.programs.gp.LeabraAll_Std.LeabraTrain]] program:
 [[.programs.gp.LeabraAll_Std.LeabraTrain.Init()|Init]] 
[[.programs.gp.LeabraAll_Std.LeabraTrain.Run()|Run]].

=== Arranging the 3d View ===

Although the [[.T3Tab.Network_0]] view is sufficient, it could be configured to look better.  We could shrink the graph view a bit, and orient it better.  To do this (optional), click on the <b>red arrow</b> button to the right of the view, and then grab the upper horizontal bar of the small purple box in the lower-left hand corner of the graph view display.  Drag this slowly down -- you'll see the green frame rotating as you do.  Do this to the point where graph is angled more \"head on\".  Similarly, you can grab the left vertical bar and rotate the graph to the left a bit to make it more face on.  Next, grab any corner of the box, and shrink the view a bit (maybe to half or so of its original size).  Finally, you can move the view down and to the right a bit, to fit in between the Hidden and Output layers.

When you've got it the way you want, you can press the <b>eye</b> button to resize the display to fit, and maybe Dolly zoom in a bit.  You could perhaps pan to the right a bit with shift-mouse.  When it looks good, hit the <b>blueprint house</b> button (\"save home\"), which saves this view configuration.

== Recording Network Activations for a Grid View ==

Another common analysis task is to look at the pattern of activations across trials.  To do this, we need to record activation values to our trial-level output data table (which was automatically created by the wizard).  The easiest way to do this is to select the network object in the network view by clicking on the thin green frame surrounding the text display at the bottom of the network, and then using the right mouse button to get the context menu, and select [[.networks[0].MonitorVar()|MonitorVar]].  For the <code>net_mon</code> field, click and select the <code>trial_netmon</code>, which is for monitoring information at the trial level (the other one is for the epoch level).  For the <code>variable</code> field, type in \"act\" (no quotes), to record activations.  This will record activations for all three layers in the network in one easy step (you could alternatively do MonitorVar on each of the layers individually, or on any other object in the network for that matter, and record any variable).

Next, we need to make a Grid View of the resulting data, which will be recorded in the [[.data.gp.OutputData.TrialOutputData]] object -- do a 
[[.data.gp.OutputData.TrialOutputData.NewGridView()|View/New Grid View]], and again let's put this in the Network_0 frame.  Follow the same general steps as before (see Arranging the 3d View above) to position this new grid view into the bottom right hand region of the view.

The grid view will not contain the new information until the
 [[.programs.gp.LeabraAll_Std.LeabraTrain]] program is 
 [[.programs.gp.LeabraAll_Std.LeabraTrain.Init()|Init]] and
[[.programs.gp.LeabraAll_Std.LeabraTrain.Run()|Run]] again.  After doing that, you need to scroll the grid view display all the way over to the right -- there are too many columns to fit within the 5 columns that the standard grid view is configured to display.  To do this, select the <b>red arrow</b> tool and drag the purple bar at the bottom of the <code>TrialOutputData</code> gridview all the way to the right.  You should see some colored squares with the Input, Hidden, and Output column headers.

To really make things clean, you can select the column headers of the columns you don't want to display (e.g., ext_rew, minus cycles) and do context menu/View Properties and then hit the Hide button at the bottom of the dialog that comes up.  Ideally, you'd just want to see the trial name, sse, and the different layer activation columns.

Also, because there are just 6 events, we can set the rows to display to 6 in the grid view panel, to make the display fit just right.

Again, you can run your program and see it update the display.

== Analyzing the Hidden Layer Representations ==

Now that we have some data from the network, we can perform some powerful analysis techniques on that data. 

First, we can make a cluster plot of the Hidden Layer activations, to see if we can understand better what is being encoded.  To do this, find the [[.data_proc.data_anal]] object under <code>data_proc/data_anal</code> in the left browser.  This contains many useful analysis tools, organized by different topics in the buttons at the bottom.  Select
 [[.data_proc.data_anal.Cluster()|HighDim/Cluster]], and set the following parameters (leave the rest at their defaults):
* view = on (generate a graph of the cluster data)
* src_data = TrialOutputData
* data_col_nm = Hidden_act   (specifies the column of data that we want to cluster)
* name_col_name = trial_name (specifies the column with labels for the cluster nodes)

You should see a new graph show up, with the A,B,C,X,Y,Z labels grouped together into different clusters.  Most likely, you should observe in a trained network that the A and X are grouped together, separate from the other items.  Can you figure out why this would be the case?

Another way to process this high-dimensional activation pattern data is to project it down into 2 dimensions.  Two techniques for this are principal components analysis (PCA) and multidimensiona scaling (MDS).  To try PCA, select
[[.data_proc.data_anal.PCA2dPrjn()|HighDim/PCA2dPrjn]] -- fill in the same info you did for the Cluster plot.  You should see that the labels are distributed as points in a two-dimensional space, with the X-axis being the dimension (principal component) of the hidden layer activation patterns that captures the greatest amount of variance across patterns, and the Y-axis being the second strongest component.  Accordingly, you should see A and X on the left or the right side of the graph, and the others on the other side.  It is not clear what the vertical axis represents..

There are many more things one could do, but hopefully this gives a flavor.  The next step: [[.docs.TaskProgram]] is to write a program to automatically generate our input patterns for training the network -- initially we'll start out with the simple task we ran already, but then we'll progressively expand to more complex tasks.  

</body>
</html>
";
  };
  taDoc @[5] {
   name="TaskProgram";
   auto_open=0;
   text="<html>
<head></head>
<body>
= Programming the Task Environment =

The goal here is to write a Program that will automatically generate a set of input/output patterns to train the network.  Because the task is so easy (at least to start), this will not represent a savings in time, but will hopefully generate understanding of how Programs work, and will also provide a basis for making more complex programs.

The major steps involved are:
# Create the new Program object
# Initialize \"enums\" based on unit names -- allows us to refer to units by name (an enum is geek-speak for an enumerated set of labeled values -- more later).
# Iterate over the input units and generate the appropriate output response.
# Write the appropriate information into the input data table.

==  Create the Program ==

In the context menu (right mouse or ctrl+mouse on mac) on the <code>programs</code> item in the left browser, select [[.programs.New_gui()|New]] -- default parameters are fine, so then hit OK.
This should have created a [[.programs.Program_11]] program, which you should now click on, and change the name to: <code>AXTaskGen</code> (the rest of the links here will assume this name, so do enter exactly that name).

It is good to get in the habit of entering descriptions of various objects in your simluation, especially programs, so enter something like \"generates the simple A-X target detection task\" in the <code>desc</code> field.

Note that there are three sub-tabs or sub-panels for a Program: 

* <code>Program Ctrl</code>: For the \"end user\" to control the running and key parameters of the program
* <code>Edit Program</code>: For writing the program.
* <code>Properties</code>: For setting overall parameters of the program object, including <code>tags</code> which help people find this program if it is uploaded to a common repository, and <code>flags</code> that determine various advanced properties.

Select <code>Edit Program</code> and we can get started doing that!

== Overview of Programing Process ==

Programming in this system mostly consists of dragging program elements from the toolbar at the very left edge of the display into your program, and then configuring their properties (drag-and-drop and duplicate are also very handy here).

The Program object has several different locations for different types of program elements:
* objs -- place to put misc objects that contain local data for the program (e.g., a local DataTable that might hold some intermediate processing data for the program).
* types -- special user-defined types that define properties of corresponding variables (e.g., the enums we'll be using).
* args -- (short for arguments) this is where you put variables that other programs will set when they run  this program.
* vars -- place for other non-argument variables that are used in the program.
* functions -- you can define subroutines (functions) that can be called within a program to perform a given task that needs to be done repeatedly.  These functions are only accessible from <i>within</i> this given program.
* init_code -- actions to be performed when the user presses the Init button -- to initialize the program and other objects that it operates on (e.g., initializing the network weights, as the LeabraTrain process does).
* prog_code -- finally, this is where the main code for your program goes!  because it can depend on any of the preceding elements, it logically comes last (and it is typically the largest).

In the Toolbox, the program elements are organized into various sub-categories (Network, Ctrl, Var/Fun, etc).  Take a look through these categories and use the mouse-over to see what kinds of things are available.

== Initialize Unit Names and Enums ==

To begin your program, locate the Network category, and drag (click and hold and move the mouse) the <code>init nm units</code> element into the <code>init_code</code> section of your program.

This Init nm units is a very powerful program element, which does a lot of configuration when it is first dropped into place.  You'll see various things being created in your project, and you should get an error message indicating that it could not find the input_data table.  Just hit OK to the error message, and let's take stock of what just happened (and fix the error).

You should see that a variable named <code>input_data</code> was created in the <code>vars</code> section, and <code>unit_names</code> was created in the <code>vars</code> section.  These are both \"pointer\" variables that provide a local \"handle\" within the program to refer to objects that actually live outside of the program, in the <code>data</code> section of the overall project.

Click on the [[.programs.AXTaskGen.args.input_data]] object, and take some time to mouse over the various fields and read the tooltips.  We want to set the <code>object_val</code> field to point to our StdInputData data table -- click on it and select it.

Now go down to the  [[.programs.AXTaskGen.vars.unit_names]] object, and note that it is already set to point to the UnitNames data table, which was automatically created in the <code>data/InputData subgroup</code> section of the project.  This new datatable will contain a single row of data, with labels for each of the units in the StdInputData data table.  However, right now it is empty, because we hadn't set the input_data variable yet.

=== Entering UnitNames ===

Now that we have set input_data, we can go back to the InputNamedUnits guy in the init_code, and hit the [[.programs.AXTaskGen.init_code[0].InitNamesTable()|Init Names Table]] button.  This will pull up an informational dialog -- hit OK.
Now go back up to the [[.data.gp.InputData.UnitNames]] data table, and you should see two columns: Input and Output, with a single row of data.  Click on the Input matrix and enter text labels for each of the units, as follows:

<table>
<tr><td>X</td><td>Y</td><td>Z</td></tr>
<tr><td>A</td><td>B</td><td>C</td></tr>
</table>

For the Output matrix, you can enter N and T (for non-target and target, respectively).

=== View Data Legend ===

Next, go back to the [[.programs.AXTaskGen.init_code[0]|InitNamedUnits]] object, and select
[[.programs.AXTaskGen.init_code[0].ViewDataLegend()|View Data Legend]] -- this will configure a new view frame with the input data patterns, plus a legend from the UnitNames table showing what each of the unit names are.  These same names can also be applied directly to the network to label the units -- we'll do that later.  You might want to remove your other view frame for StdInputData (without the legend) -- do context menu and select Delete Frame.

=== Creating Enums ===

Next, we'll create those enums mentioned previously.  Click on [[.programs.AXTaskGen.init_code[0].InitDynEnums()|Init Dyn Enums]].  You will see two new entries in the <code>types</code> section of your program -- Input and Output.

Under the Input type, you should see 6 items with names like I_A, I_B, etc.  Under the Output type, you see O_N and O_T.  The first letter is taken from the first letter of the layer (I = Input, O = Output), and the remainder after the underbar is the name entered in the UnitNames table.

The purpose of these enum types is to allow you to use a symbol to refer to a unit. If you want to activate the X input unit, you can use the I_X enum value to do that.  It represents the <i>index</i> of the X unit within the input layer -- when you click on I_X, you can see that it has a value of 3.  enums have both numeric and symbolic (name-like) properties, and can be converted to and from names and numbers.  You'll understand more about why they are so useful as we go along.

We are done with the unit names for now, and can move on to writing our program.

== Iterating over the Inputs ==

The core of our program will be to <i>loop</i> or <i>iterate</i> over each of the possible input units, and then generate an appropriate output for each.  We can use a <b>for loop</b> for this purpose.

In the left Toolbox, click on the <code>Ctrl</code> category (for \"control\"), and drag the <code>for</code> element into your program code (<code>prog_code</code>).

You should now see a set of 3 main fields for the for loop object: <code>init, test, iter</code> -- the default values produce a loop that goes from 0 to 9:
* Init is for initializing your looping variable (<code>i = 0</code>), where i is the integer variable that keeps track of where we are in the loop -- it was automatically created by the for loop element. 
* Test is for testing when to terminate the loop (<code>i &lt; 10</code>) -- as long as the i variable remains less than 10, we continue looping.
* iter is what to do on each iteration prior to the test (<code>i++</code>) -- i.e., increment the loop variable.  

To see this in action, let's drag the <code>print_var</code> guy from the <code>Print..</code> category of program elements into our <code>loop_code</code> of the for loop.  This is where we put the program elements (\"code\") that we want to run during each iteration of the loop.  Select the <code>i</code> variable for the <code>print_var</code> field.  

Now we can [[.programs.AXTaskGen.Init()|Init]] 
and [[.programs.AXTaskGen.Run()|Run]] our simple program.  You should see a sequence of \"i=0, i=1...i=9\" in the console window (typically located below the main project window).  It is a very good idea to keep that window visible during programming, as various informative messages may show up there.

Although perhaps fascinating for new programmers, this for loop is not exactly what we want.  We want to iterate over the input units, not just over the numbers from 0-9.  To do that, we need to click on the [[.programs.AXTaskGen.vars.i]] variable in the <code>vars</code> section of the program.  Change the <code>var_type</code> to DynEnum instead of Int.  Then, click on the </code>enum_type</code> field and select the Input type (which is what we created earlier).  You can also change the name of this variable to something more expressive, like <code>input_unit</code>.  Note that when you apply this name change, the for loop code automatically updates to use this new name, as does the print var guy.

Let's go back to that [[.programs.AXTaskGen.prog_code[0]|for]] loop guy, and change the <code>test</code> field to: <code>input_unit &lt;= I_Z</code>.  Note how you can just type in I_Z and this is automatically treated as a number -- this is what enums do. 
[[.programs.AXTaskGen.Init()|Init]] 
and [[.programs.AXTaskGen.Run()|Run]] that.  Everything should be fine, up until the very end, when it tries to go beyond the I_Z case -- this will generate an error message (as it should -- one of the many advantages of using enums is that they provide built-in error-checking like this).

To get around this issue, we need to add a test inside of our loop that bails out when we get to I_Z, so that final ++ increment does not occur.  In the <code>Ctrl</code> elements, there is an <code>if.break</code> guy that does just this -- drag it into the loop_code so it appears at the end (note that you need to drop it on the loop_code guy itself to put it at the end, or go just after the print var and you'll see a thin horizontal line -- dropping there should work too).  In the <code>cond</code> field, enter <code>input_unit == I_Z</code> (note that you can do this without much typing by selecting lookup_var and lookup_enum to choose those guys off of a list).  This will break the loop at the last item (I_Z).
[[.programs.AXTaskGen.Init()|Init]] 
and [[.programs.AXTaskGen.Run()|Run]] to confirm.

=== Generating the Correct Output ===

Next, we need to generate the correct output for each input.  To do this, we first need to create a variable to hold the output value.  Goto <code>Var/Fun</code> in the toolbox, and drag the first <code>Var</code> item into your program <code>vars</code> (select \"Copy Here\", not \"Add Var To\", when you drop -- we'll explain later).  Set the name to <code>output_unit</code> and change the type to DynEnum with enum_type selected as Output.

Now we just need to set this variable inside our for loop code, depending on the value of the input_unit variable.  The Ctrl/if guy will do this for us -- drag it into the loop_code and drop on top of the PrintVar (it will become the first element in the program).  In the <code>cond</code> condition expression, enter: <code>input_unit == I_A || input_unit == I_X</code> (again note that you can use the var and enum lookup to save some typing and make sure you've spelled them correctly).  The == is the logical test for equality, and the || is the logical OR operator (this is standard C++ syntax -- any valid C++ expression can be entered here).  This is the condition for a target.

We need to assign our output_unit variable to the target value when this \"if condition\" is true, and to the non-target case otherwise.  To assign a variable value, drag <code>var=</code> from the Var/Fun category to the true_code section of your if guy.  For the <code>result_var</code>, select output_unit, and for the <code>expr</code> expression, enter O_T (or choose from the enum_lookup).  This sets output_unit to O_T (target).  As a timesaver, drag this AssignExpr guy from true_code into false_code -- then you can just change O_T to O_N very quickly.

Finally, go to your PrintVar and select output_unit for print_var1 (or print_var2 if that is easier to see).  [[.programs.AXTaskGen.Init()|Init]] 
and [[.programs.AXTaskGen.Run()|Run]], and you should see the correct values for input_unit and output_unit being displayed in your console! 

== Writing the Data to the Input Data Table ==

Now that you have all the key logic of your task, you just need to write the results to the input data table.  There are three main steps for this:

# Erase any existing data at the start
# In the for loop, add a new row, and write the data for each input/output pattern
# Tell the system that we're done writing to each row so it can update the view

The first step is achieved by dragging a <code>reset_rows</code> guy from the Data toolbox to the first line of the program code (drop right on top of the for loop).  Then select the input_data variable for the data_var.

Next, drag the <code>new_row</code> guy into the loop_code, right before the final IfBreak guy (drop on top of it).  Again select input_data as the data_var.  This will add a new blank row to the data table.  Then, drag <code>set units var</code> from the Network toolbox into the loop_code, again on top of IfBreak.  This is a magic little program element that uses the name of the DynEnum type of a variable, plus its value, to determine which unit to activate in the input data table.  All you have to do is select input_unit for unit1, and output_unit for unit2, and you're done -- it automatically located the input_data datatable (based on its name).

Finally, go back to the Data toolbox, and drag the row_done guy on top of IfBreak -- this just lets the system know that you're done writing to the current row of data, and that it can update any relevant displays.

Congratulations -- you're done!!!  Select the [[.T3Tab.StdInputData]] tab in the 3d view area, and then do
[[.programs.AXTaskGen.Init()|Init]] 
and [[.programs.AXTaskGen.Run()|Run]] -- you should see the display update with the correct patterns freshly generated by your program!

You have now done a little bit of each of the critical main elements of simulating using this system.  The next few steps in the tutorial take this simple starting point and go all the way to a more scientifically interesting model of an actual psychological task: the CPT-AX task: [[.docs.CPTAX_Program]].

</body>
</html>
";
  };
  taDoc @[6] {
   name="CPTAX_Program";
   auto_open=0;
   text="<html>
<head></head>
<body>
= CPT-AX Program =

The next challenge is to write a program that will generate the CPT-AX task (CPT stands for continuous performance task), which is the logical extension of our simple AX task to the ''sequential'' domain.  Instead of A and X each being targets, the target is now
an A ''followed by'' an X in sequence.  Other sequences such as A followed by Y or B followed by X are 
non-target sequences, which nevertheless overlap with the target sequence.  In our simplified version of this task (and in several of the actual experiments on people), we restrict the sequences to cue-probe pairs, where cues are A,B,C and probes are X,Y,Z.  See e.g., Braver, T.S., Barch, D.M. & Cohen, J.D. (1999). Cognition and control in schizophrenia: A computational model of dopamine and prefrontal function. ''Biological Psychiatry, 46,'' 312-328, for an application of this task and further discussion and references.

One implementational detail in how this task is run is key for generating interesting behavioral and neural data: the frequency of the A-X target sequence is set to be relatively high (typically 70%), so that it becomes the default expectation.  Then, the two related non-target sequences become much more interesting.  For A-Y, there should be a strong expectation of getting an X, which will be influenced by the extent to which the A cue is well remembered.  Errors on this trial type, where people might press \"target\" at the Y, would actually suggest strong maintenance of the A cue.  A similar argument applies to B-X, where the X is typically a target, but if you remember the B cue, you should not press the target key.  The C,Z items serve as baseline controls, as does the B-Y sequence.

== Plan for the Program ==

With the above in mind, we can sketch out the logic of our overall program:
* Flip a weighted coin to determine whether we want to generate a target sequence or not.  70% of the time we generate a target sequence, in which case we just produce A followed by X and that is easy.
* Generating a non-target sequence is harder.  We need to randomly select from the cues (A,B,C) and the probes (X,Y,Z), while ensuring that we don't randomly pick A-X.  We'll discuss a couple of different strategies for this.
* We can do the above cue-probe generation process multiple times to generate a larger set of trials that we will run on a given epoch worth of network training.  That is just a simple for loop around the above code.

== List of Variables ==

Once we have this plan in place, we can create a set of variables that we'll need -- the general flow of programming in this system involves creating variables and then opearating on them, so getting the variables down is the key first step:
* pct_target -- how frequent should the target sequence be?  this is actually a proportion, but pct is a much simpler label -- for the default case it should be .7
* rnd_number -- a random number between 0 and 1 (floating point or Real) that we'll generate to simulate the flipping of a weighted coin.
* cue -- the identity of the cue input (A,B, or C) represented as a DynEnum of type Input, taking on values I_A, I_B, or I_C.
* probe -- the identity of the probe input (X,Y, or Z), represented by an Input DynEnum as well.
* output_unit -- correct answer for the output layer (DynEnum of type Output) -- we'll have the model respond \"non-target\" for all the cue items, and \"target\" for the targets.

== Getting Started: Copy and Modify ==

The easiest way to get started is to duplicate and modify the existing AXTaskGen program (this is a general rule -- if there is a program that has several elements that you want, just copy and modify instead of starting from scratch).  To do this, click on the AXTaskGen program in the left browser, and use the context menu to select Duplicate.  In the new program, enter the name as CPTAXGen, and update the description to reflect what we're doing.

Now go to EditProgram, and click on the ForLoop object in the prog_code, and use the context menu to Delete that object -- this will also delete everything within it, which is almost all of the code from the previous program.  All that should remain is the ResetDataRows at the start (which we can use in any case).

We can now setup our variables as indicated above.  Just rename input_unit to cue, then duplicate it and call it probe.  Then drag a new var (from Var/Fun toolbox) into vars and call it \"pct_target\", and set the type to Real, and enter a value of .7.  Duplicate it, and call it \"rnd_number\".  It would be a good idea to enter the descriptions for each variable in their desc fields (you can copy and paste from the above text if you want).

== Flipping a Weighted Coin For the Target ==

The first step in our actual program code is to flip a weighted coin to decide if it is a target sequence or not.  We do this by generating a random number (rnd_number) which is uniformly distributed between 0 and 1.  We then see if this number is ''less than'' our target percent value -- this will be true 70% of the time for a value of .7, and that is what we want!

* in the Toolbox, Misc Fun, there is a random() guy -- grab that and put it at the end of your program (drop on prog_code or after the reset data rows).  Set the result_var to rnd_number, and click on the method -- in the browser window that comes up, you can select different categories (in the menu at the top) of random numbers to generate -- select \"Float\", and then pick ZeroOne.  This will set rnd_number = a random number between 0 and 1.
* Go to Ctrl toolbox and drag <code>if</code> to the end of your program.  In the cond expression, type/select: <code>rnd_number &lt; pct_target</code>.

The true_code for this if is now the target case, and the false_code is the non-target.  To set the target values, we just need to assign cue and probe to A and X respectively.  Drag var= from the Var/Fun toolbox into true_code, and set the result_var to cue, and choose the I_A enum from the enum_lookup button.  Drag var= again and set probe = I_X.  Finally, drag var= and set output_unit = O_T.

== Generating the Non-Target ==

There are two strategies for generating the non-target sequence that excludes A-X:
* Brute force: randomly generate a cue and a probe and check that they aren't A-X -- if they are, then repeat the process until they aren't.  This is not particularly efficient, but it is easy to code.
* Choose from a list: generate a list of all possible cue-probe combinations, remove A-X from this list, and then randomly select an item from this list.  This is more efficient overall, but harder to code.  It is left as an excercise for later, as it demonstrates some important techniques.

To do the brute-force method, you need to enclose the random generation code in a \"do\" loop, which does some things (generates the random cue/probe) and then tests whether it should loop again (if it is A-X) or not.

Drag the <b>do</b> guy from Ctrl into your false_code of the target if test.  Enter/lookup <code>cue == I_A && probe == I_X</code> as the test for continuing to loop ( == is the equality operator, and && is logical AND).

Now inside the loop_code, we need to randomly generate a cue and a probe.  Drag the random() guy from Misc Fun in there, and set the result_var to cue.  For the method, select the Int category, and choose IntMinMax -- we'll specify a minimum and maximum value to generate random numbers between.  Notice that the min and max arguments open up below this element -- these are the values that will be passed to the IntMinMax function.  Click on min, and enter/lookup I_A.  For the max, enter I_C + 1, because this IntMinMax function generates values ''exclusive'' of max (this is consistent with the C programming language convention, where values go between 0 and n-1 instead of 1 to n).

Just duplicate this RandomCall element, and change cue -> probe and min = I_X, max = I_Z+1.  Finally, drag var= and set output_unit = O_N to show that this is a non-target case (quicker to drag AssignExpr guy from true_code and change O_T to O_N).

To test the program at this point, you can drag a print var object to the end of the code, and select cue, probe, and output_unit for the vars to print, and do Init and Run and see that it tends to produce a predominance of A-X and O_T.  To really test it, set pct_target = 0, and Run some more.  You should never see an A-X, and only O_N.

== Generating the Input Data Patterns ==

The last step is to produce the input data patterns for the values we have generated.  This is just a matter of adding a couple of <code>new row</code> guys from the Data toolbox and <code>set units var</code> from the Network toolbox to set the units.
* drag the <code>new row</code> from Data Toolbox to the end of the program (drop on prog_code) and set data_var to input_data.
* drag the <code>set units var</code> from Network toobox to the end, and set unit 1 to the cue variable.
* Because the output is a literal in this case (O_N or non-target), we cannot set it using this element, which requires a variable.  So, you need to drag the <code>set units lit</code> to the end, and set the enum_type to Output, and the value to O_N.
* drag and drop the AddNewDataRow and SetUnitsVar guys on top of prog_code and select Copy Into to duplicate them at the end of the program, and change cue to probe in the set units var, and select output_unit for unit 2 to also set that guy.
* finally, drag a Data/row done guy to the end to tell it to update the view (select input_data as the data_var).

[[.programs.CPTAXGen.Init()|Init]]
and [[.programs.CPTAXGen.Run()|Run]] the program while looking at the 
[[.T3Tab.StdInputData]] view tab.  You should see it generate a valid cue-probe input that matches what is printed out on the console.  Keep running to see a range of inputs.

== Generating Multiple Cue-Probe Trials ==

The last bit of programming needed is to simply loop over the existing set of code multiple times to create several cue-probe sets per epoch for the network to train on.  Drag a for loop from Ctrl on top of the 2nd line of the program (RandomCall).  Then, multi-select the rest of the program code (only the guys at the main level, not the true_code or false_code within the if statement (this is done with alt-click on linux or mac-command-click on the mac -- note that order matters so select down in order!), and then drag the whole thing into the loop_code of the for guy.  Pretty slick.

If you just Run it like this, you'll get 10 trials.  It would be good to make the number of trials a variable that can be set.  Drag a var into vars and call it \"n_trials\", and set it to 25 (Int = integer type).  Then, click on the for loop and replace the 10 in the test expression with n_trials.

You can probably turn off the console printout by now -- just click on the PrintVar guy and click the OFF flag -- this keeps it around in case you want to do some debugging or something later, but it is not actually used in the code.

== Updating the Control Panel ==

If you go back to the Program Ctrl tab for the CPTAXGen program (instead of Edit Program where we've been), you'll see that all of the args and vars are present there.  However, some of those vars are actually more internal variables that the end-user doesn't need to set or configure.  So, we should remove those from the control panel, leaving only the pct_target and n_trials variables.  To do this, go back to Edit Program and click on each of the vars, and turn off the CTRL_PANEL flag for all but pct_target and n_trials.  Then go back and marvel at the clean interface you've provided for your grateful user!  The mouse-over tooltip even shows whatever comment you entered in the desc field for that variable.  This can provide a quick but quite usable interface for many different programs.

== Calling from the Epoch Program ==

The final final step is to call the CPTAXGen program every epoch, so that we get a new random selection of trials every epoch (keeps the network from simply memorizing the particular sample we happen to have generated).  To do this, we go to the LeabraEpoch program in the LeabraAll_Std subgroup of programs, and do Edit Program.  Then drag the prog() guy from the Var/Fun toolbox just after the 3rd line of the prog_code, which starts the timer recording how long the epoch takes to process (it is a MethodCall, in blue).  Then select CPTAXGen for the target.  Note that this automatically brings up the input_data arg, and it even automatically fills this in with the input_data variable in the LeabraEpoch program -- if an arg has the same name as a variable in the calling program, it is used automatically (of course you can always change it if that isn't right).

== Running the Network ==

Now you're finally ready to run the network on this CPT-AX task!  Go back to the LeabraTrain process, do Init and Run on it (initialize the weights) and see what happens!?

You should see that it will run for a while and then stop when the error gets to 0.  But try hitting Run again -- note that it usually will keep running a while longer before stopping again.  It hasn't really learned the problem fully, but it can sometimes get an entire epoch right.

You probably want to turn off the network and trial output data views at some point -- just click off the display button on their respective control panels under the Network_0 view tab.

It shouldn't come as that much of a surprise that the network doesn't fully learn the task -- this task requires working memory, and this network hasn't got any!  In fact, it is quite surprising that it is able to learn as well as it can.  Turns out it can learn to use weight changes as a kind of fairly unreliable form of working memory.  Plus, the default target of AX is highly frequent, so it can get pretty far by focusing a lot on that.

In the next and final segment, we give this network some working memory, and see if that helps: [[.docs.PfcBg]]


</body>
</html>
";
  };
  taDoc @[7] {
   name="PfcBg";
   auto_open=0;
   text="<html>
<head></head>
<body>
= Giving the Model Some Memory: Prefrontal Cortex, Basal Ganglia Working Memory Model =

There are many different ways of giving a neural network some amount of working or active memory, to hold on to prior events.  Perhaps the simplest is to add a \"simple recurrent network\" (SRN) context layer that holds on to the prior time step's hidden layer activations, and then feeds back into the hidden layer to provide context for the current inputs.

However, there are various limitations of this simple SRN memory, which can be overcome by having an active gating mechanism that determines when to hold onto information and when to forget it.  One scientific theory is that the basal ganglia provide this function, by interacting with the prefrontal cortex, which is widely regarded as the brain area responsible for holding onto working memory.  The specific implementation of this idea, called PBWM (prefrontal-cortex basal-ganglia working memory; O'Reilly & Frank, 2006, Neural Computation) is available through the Leabra wizard, and we'll use that.

First, to prepare the model for the PBWM components, we need to move the Input layer up to the same level as the output layer.  For anatomically-inspired reasons, PBWM locates various brain-stem dopamine systems in the lower level of the model.  To do this, click on the red arrow in the [[.T3Tab.Network_0]] panel, and click on the virtical arrow poking through the green Input layer border, and drag it up to the level of the Output layer.  The Output layer should move out of the way, and that is all you need to do, but if things don't look right, you can drag layers around with the horizontal arrows too.

Next, go to the [[.PanelTab.LeabraWizard_0]], and 
select [[.wizards.LeabraWizard_0.BgPFC()|Network/Bg PFC]].  A dialog with several options and lots of information comes up.  Turn off <code>fm_hid_cons</code>, set <code>n_stripes</code> to 2 instead of 4, and turn on <code>no_lrn_pfc</code>.  This makes the PFC working memory layer activated directly from the input layer, and not the hidden layer, and it makes it a direct copy of the input layer, instead of having it learn new representations.  These are \"hacks\" that simplfy the model and make it easier to understand -- performance is generally the same without them.  When you hit OK, you'll get  a series of dialogs with information -- just keep hitting OK until it is done.  You should see a rather more elaborate network now, with many more layers.

For complete details about these layers, see the  [[http://psych.colorado.edu/~oreilly/pubs-abstr.html#OReillyFrank06|O'Reilly and Frank, 2006]] paper (O'Reilly, R.C. & Frank, M.J. (2006). Making Working Memory Work: A Computational Model of Learning in the Frontal Cortex and Basal Ganglia. <i>Neural Computation, 18,</i> 283-328.)  Here is a very brief overview:
* PV* and LV* and friends at the very bottom layer of the network: these represent the dopaminergic system, which provides reinforcement learning signals to train up the dynamic gating system in the basal ganglia.  The PV layers represent \"primary values\" of reward, while the LV layers represent learned values.
* Matrix: this is the dynamic gating system representing the matrix units of the basal ganglia.  The units alternate between \"Go\" and \"NoGo\" functions -- the Go units cause updating of the PFC, while the NoGo units cause the PFC to maintain its existing memory representation.  Note that there are four separate <b>stripes</b> (groups of units) that can each independently update associated PFC stripes.  Thus, this system can remember up to 4 different things at the same time, each with a different \"updating policy\" of when memories are updated and maintained (as determined by these Matrix units).
* SNrThal: represents the substantia nigra pars reticulata (SNr) and the associated area of the thalamus, which produce a competition among the Go/NoGo units within a given stripe.  If there is more overall Go activity in a given stripe, then the associated SNrThal unit gets activated, and it drives updating in PFC.
* PFC: has 4 different stripes each of which has a localist one-to-one representation of the input units (due to the no_lrn_pfc flag).  Thus, you can look at these PFC representations and see directly what the network is maintaining.

== Setting the RewTarg Input ==

Before we can run the model, we need to do one extra bit of configuration.  The PBWM model learns from rewards and punishments generated based on how it is performing the task. Only the reward values generated on the probe trials are relevant, however, so we need to tell the model when the relevant trials are.  This is done using the RewTarg layer (in the bottom layer), which is a new input layer that was added by the wizard.  When we set this unit activation to 1, then that tells the network that this is a trial when reward should be computed based on the difference between the network's output and the correct answer.  Note that this is not the direct value of the reward itself, just the indicator of when reward should be computed.

The procedural steps for making this RewTarg work are mostly the same for any kind of change in the input data table structure (e.g., adding more input units), so these steps are generally useful:
* First, go to the [[.PanelTab.LeabraWizard_0]] and 
select [[.wizards.LeabraWizard_0.UpdateInputDataFmNet()|Data/UpdateInputDataFmNet]] -- this will automatically reconfigure your StdInputData table to include the RewTarg input (and it will adjust it to any other changes you might make in your network -- a very useful function!).
* Next, we need to update the program that applies the input data to the network, so that it will appropriately apply the new RewTarg input to the network.  This is the [[.programs.gp.LeabraAll_Std.ApplyInputs]] program in LeabraAll_Std subgroup.  
In its objs section, there is an object called  [[.programs.gp.LeabraAll_Std.ApplyInputs.LayerWriter_0]], which provides the info for mapping input data the network layers. 
Hit [[.programs.gp.LeabraAll_Std.ApplyInputs.LayerWriter_0.AutoConfig()|AutoConfig]] on this object, and it will automatically update based on the new input data and network configuration.
* Now we need to modify our [[.programs.CPTAXGen]] program to set this RewTarg input value correctly.  This requires several steps:
** Update the unit names so we can refer to the rew targ input using an enum: click on the InitNamedUnits object in the init_code section of the program (under Edit Program tab) and hit the [[.programs.CPTAXGen.init_code[0].InitNamesTable()|InitNamesTable]] button -- this will update the UnitNames data table to match the updates in the input data table.
** Go to [[.data.gp.InputData.UnitNames]] and enter the name \"rew_targ\" for the single RewTarg unit.
** Go back to InitNamedUnits and do [[.programs.CPTAXGen.init_code[0].InitDynEnums()|InitDynEnums]] -- this will add a RewTarg DynEnum in the types section (it would also update the enums based on any other changes you might have made in the UnitNames table -- again a very useful function to remember)
** Now we are finally ready to add the code to set the rew_targ input for the probe trial.  Just drag a <code>set units lit</code> from the Network toolbox to end of the prog_code before the DoneWritingRowData guy, and set the enum_type to RewTarg, and the value should be R_rew_targ.

Finally, you can hit [[.programs.gp.LeabraAll_Std.LeabraTrain.Init()|Init]]
and [[.programs.gp.LeabraAll_Std.LeabraTrain.Run()|Run]] on the LeabraTrain program to run your new network!

== Displaying Unit Names ==



</body>
</html>
";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_0";
   auto_open=1;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=6;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=16;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=2;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="PVLV";
   desc=;
   config {
    auto_edit=0;
    mbr_labels{ pvr;pvi;lve;lvi;pve;pvr;vta;    };
    meth_labels{     };
   };
   mbr_bases {
    name=;
    el_typ=taBase;
    el_def=0;
	taBase_List @. = [0] = PVConSpec .projects[0].networks[0].specs.gp[1][0].children[0].children[0];
	taBase_List @. = [1] = PVConSpec .projects[0].networks[0].specs.gp[1][0].children[0];
	taBase_List @. = [2] = PVConSpec .projects[0].networks[0].specs.gp[1][0].children[0].children[1];
	taBase_List @. = [3] = PVConSpec .projects[0].networks[0].specs.gp[1][0].children[0].children[1].children[0];
	taBase_List @. = [4] = ExtRewLayerSpec .projects[0].networks[0].specs.gp[2][0];
	taBase_List @. = [5] = PVrLayerSpec .projects[0].networks[0].specs.gp[2][1];
	taBase_List @. = [6] = PVLVDaLayerSpec .projects[0].networks[0].specs.gp[2][4];
   };
   mbr_strs{ lrate;lrate;lrate;lrate;rew;pv_detect;da;   };
   meth_bases {
    name=;
    el_typ=taBase;
    el_def=0;
   };
   meth_strs{    };
  };
  SelectEdit @[1] {
   name="PBWM";
   desc=;
   config {
    auto_edit=0;
    mbr_labels{ pfc;pfc_m;matrix;matrix;matrix;matrix;matrix;matrix;matrix;mtx_fm_pfc;snr_thal;    };
    meth_labels{     };
   };
   mbr_bases {
    name=;
    el_typ=taBase;
    el_def=0;
	taBase_List @. = [0] = DaModUnitSpec .projects[0].networks[0].specs.gp[0][2];
	taBase_List @. = [1] = PFCLayerSpec .projects[0].networks[0].specs.gp[2][5];
	taBase_List @. = [2] = MatrixLayerSpec .projects[0].networks[0].specs.gp[2][6];
	taBase_List @. = [3] = MatrixLayerSpec .projects[0].networks[0].specs.gp[2][6];
	taBase_List @. = [4] = MatrixLayerSpec .projects[0].networks[0].specs.gp[2][6];
	taBase_List @. = [5] = MatrixLayerSpec .projects[0].networks[0].specs.gp[2][6];
	taBase_List @. = [6] = MatrixLayerSpec .projects[0].networks[0].specs.gp[2][6];
	taBase_List @. = [7] = MatrixUnitSpec .projects[0].networks[0].specs.gp[0][3];
	taBase_List @. = [8] = MatrixConSpec .projects[0].networks[0].specs.gp[1][0].children[3];
	taBase_List @. = [9] = MatrixConSpec .projects[0].networks[0].specs.gp[1][0].children[3].children[0];
	taBase_List @. = [10] = SNrThalLayerSpec .projects[0].networks[0].specs.gp[2][7];
   };
   mbr_strs{ g_bar;gate;matrix;contrast;rnd_go;err_rnd_go;avgda_rnd_go;g_bar;lmix;wt_scale;kwta;   };
   meth_bases {
    name=;
    el_typ=taBase;
    el_def=0;
   };
   meth_strs{    };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItemBase;
     el_def=0;
     UserDataItem @[0] {
      name="N_ROWS";
      value 2 0=5;
     };
    };
    name="StdInputData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [50] "A_N";"X_T_rew_targ";"A_N";"X_T_rew_targ";"B_N";"Z_N_rew_targ";"C_N";"Y_N_rew_targ";"B_N";"X_N_rew_targ";"C_N";"Z_N_rew_targ";"A_N";"X_T_rew_targ";"B_N";"X_N_rew_targ";"A_N";"Y_N_rew_targ";"A_N";"Z_N_rew_targ";"C_N";"Y_N_rew_targ";"A_N";"X_T_rew_targ";"C_N";"Z_N_rew_targ";"B_N";"X_N_rew_targ";"A_N";"X_T_rew_targ";"A_N";"X_T_rew_targ";"A_N";"X_T_rew_targ";"B_N";"Y_N_rew_targ";"C_N";"Y_N_rew_targ";"C_N";"X_N_rew_targ";"C_N";"Z_N_rew_targ";"A_N";"Z_N_rew_targ";"B_N";"X_N_rew_targ";"A_N";"X_T_rew_targ";"C_N";"Z_N_rew_targ";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;2;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [3 2 50] 1;0;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;0;1;      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 50] 1;0;0;1;1;0;0;1;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;0;1;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;0;1;1;0;1;0;1;0;1;0;1;0;0;1;1;0;0;1;1;0;0;1;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;0;1;1;0;1;0;      };
     };
     float_Data @[3] {
      name="RewTarg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 50] 0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItemBase;
     el_def=0;
     UserDataItem @[0] {
      name="N_ROWS";
      value 2 0=1;
     };
     UserDataItem @[1] {
      name="MAT_VAL_TEXT";
      value 2 0=1;
     };
     UserDataItem @[2] {
      name="WIDTH";
      value 6 0=3.299999952316284;
     };
    };
    name="UnitNames";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;2;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [3 2 1] "A";"B";"C";"X";"Y";"Z";      };
     };
     String_Data @[1] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 1] "N";"T";      };
     };
     String_Data @[2] {
      name="RewTarg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 1] "rew_targ";      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] 0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] 256;256;256;256;256;256;256;256;256;256;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] 0;1;2;3;4;5;6;7;8;9;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] "C_N";"A_N";"A_N";"Z_N_rew_targ";"C_N";"B_N";"X_T_rew_targ";"X_T_rew_targ";"X_T_rew_targ";"B_N";      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] ;;;;;;;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] 3;3;3;3;3;3;3;3;3;3;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] 60;16;16;16;60;18;35;41;39;19;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] 0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10] -1.1;-1.1;-1.1;1;-1.1;-1.1;1;1;1;-1.1;      };
     };
     float_Data @[9] {
      name="Input_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;2;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [3 2 10] 0;0;0.94999999;0;0;0;0.94999999;0;0;0;0;0;0.94999999;0;0;0;0;0;0;0;0;0;0;0.94999999;0;0;0.94999999;0;0;0;0;0.94999999;0;0;0;0;0;0;0;0.94999999;0;0;0;0;0;0.94999999;0;0;0;0;0;0.94999999;0;0;0;0.94999999;0;0;0;0;      };
     };
     float_Data @[10] {
      name="Output_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 10] 0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0;      };
     };
     float_Data @[11] {
      name="RewTar_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 10] 0;0;0;0.94999999;0;0;0.94999999;0.94999999;0.94999999;0;      };
     };
     float_Data @[12] {
      name="PVe_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4 1 10] 0;0;0.94999999;0;0;0;0.94999999;0;0;0;0.94999999;0;0;0;0;0.94999999;0;0;0.94999999;0;0;0;0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;0;0;0;0.94999999;0;0;0.94999999;0;      };
     };
     float_Data @[13] {
      name="PVr_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4 1 10] 0;0.0024527044;0.83494663;0.012426049;0;0.0024484771;0.83504999;0.012369665;0;0.0024452196;0.8351534;0.012312294;0;0.0023489599;0.0065173772;0.84376967;0;0.0024399355;0.83510935;0.012411311;0;0.0024366346;0.83521277;0.012349072;0;0.65223467;0.28755912;0.56717265;0;0.57545805;0.26889363;0.65286839;0;0.35350919;0.21823403;0.6698243;0;0.0018122853;0.84306884;0.0074978312;      };
     };
     float_Data @[14] {
      name="PVi_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4 1 10] 0;0.0018958919;0.84224939;0.0077317753;0;0.0016297239;0.84366053;0.0077249231;0;0.0016291365;0.84370261;0.0077104783;0;0.0020883535;0.0046008257;0.84785569;0;0.0018911721;0.84230107;0.0077420538;0;0.0018939953;0.84232211;0.0077278866;0;0.58371872;0.23225541;0.54688209;0;0.53106916;0.22274081;0.59580112;0;0.42301551;0.20577195;0.65055156;0;0.0016741473;0.84621668;0.0056920936;      };
     };
     float_Data @[15] {
      name="DA_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 10] 0;-3.695488e-05;0;0.017408848;-0.0068010092;-0.0001360178;0.71210241;0.95154536;0.82166815;0.005196929;      };
     };
     float_Data @[16] {
      name="Matrix_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;7;4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4 7 4 1 10] 1.0259099e-13;0;5.7664316e-17;0;0.079410851;0;0;0.31758901;0;0.26372439;0;0.26745558;0;0;0;0;0.28979695;0.32326475;0.41281867;0.25509572;4.2008069e-10;0;8.9055398e-08;6.0650301e-10;0;0;0.38089946;0.27161363;0;0.33036476;1.5952228e-08;6.2544005e-14;0.1816974;0.29481915;0.2555604;0;8.9142235e-18;0.010707047;1.1103417e-16;0.817334;0.14810823;0.35316342;0.19753473;0.3643494;0;0;1.6987943e-16;0;2.6909218e-13;3.4072946e-15;0.00058120501;0.61797011;0;0.37270075;0;0;9.2202681e-06;9.901002e-15;0.036572408;0.61487359;0.095169634;0.080942936;0.24516407;0;6.9165756e-14;0;0.078948721;0.41248092;0;0;1.7635134e-08;0;0;0.63040173;1.0996903e-11;0.055161823;0.54873139;0.84511745;5.6955071e-15;0.020693747;0.89142692;0.32961309;3.7399267e-10;0;0.21911006;0;0.19264488;0.68218464;0.15277091;0;0.17177536;0.496508;0;0.36126706;0;0;1.5557436e-11;0.211808;0.14122318;0.69513339;0;0.23843482;1.7463813e-05;0;0.40088212;0.35243037;0;0;0.61967301;0;0;0;3.0329954e-13;3.8366453e-17;0;0;0;0;0.04339584;0;0.79905283;0.22889826;0.023583848;1.5597664e-06;0;0;0.89551723;0;0;0;0.64699244;0.0033999013;0.89399588;0.38570562;0;0.00073457032;0.59851682;0.42360938;7.8069842e-12;0.022934003;1.7755838e-06;0.016860163;0.00071462971;0.0010292014;1.7368766e-05;0;0.45967484;4.308244e-14;0.92026603;0.0009339184;0.80169272;0;0;6.2291283e-09;0.11522536;0.29072815;0;0.25678205;0.87530351;0;0.90378368;0;1.1759422e-06;3.3980637e-08;0.93262273;0;0.0019492141;4.1072019e-07;0.001518123;0.13055797;3.3639824e-09;7.1177206e-09;0.17150471;0.58937395;0.90360159;0;0;0.00020116434;1.4321697e-07;0.00096390175;0.78365666;0;1.3756223e-08;2.3569519e-05;0.78622872;0.0065439236;0.0065925941;0.0031851279;4.5893794e-06;8.4014902e-17;0.93673331;0.002747057;0.15944783;0.91214693;0.8639105;0;0;5.4723159e-09;0;0.049968302;0;5.4028773e-09;0.90444052;0;8.5897875e-14;0;0.88606972;0.29745713;0.20684752;0.50453836;0.045776676;0;0.88434625;0;0.32036585;0;0.86069554;0.25477347;0;0;0;1.8966261e-05;0;7.2403541e-11;3.0330884e-13;3.8366453e-17;0;0;0;0;0.043396175;0;0.79905206;0.22889933;0.023583848;1.5597921e-06;0;0;0.89551741;0;0;0;0.64697862;0.003399933;0.89399564;0.38570312;0;0.00073458481;0.59850687;0.42360687;7.8074222e-12;0.022934211;1.7756354e-06;0.016868088;0.00071470218;0.0010293028;1.7369348e-05;0;0.45970917;4.3083643e-14;0.92026651;0.00093394739;0.80170733;0;0;6.2292056e-09;0.11524825;0.29078799;0;0.25676492;0.87530673;0;0.90378439;0;1.1760451e-06;3.3985611e-08;0.93262315;0;0.001949531;4.1074054e-07;0.0015181084;0.13055867;3.3638266e-09;7.1173467e-09;0.17150202;0.58937991;0.90360141;0;0;0.00020116195;1.4320338e-07;0.00096387276;0.78365558;0;1.3755848e-08;2.3568937e-05;0.78622657;0.0065438594;0.0065924665;0.0031850645;4.5891993e-06;8.4013281e-17;0.93673325;0.0027469937;0.15944338;0.91214675;0.86391008;0;0;5.4723159e-09;0;0.049968302;0;5.4028773e-09;0.90444052;0;8.5897875e-14;0;0.88606972;0.29745713;0.20683467;0.50453836;0.045776676;0;0.88434571;0;0.32034668;0;0.86069554;0.25477347;0;0;0;1.8966261e-05;0;7.2403541e-11;0;0;0.0729881;0.11369446;4.0565385e-07;0;0.93807065;0;0;0;0.86790383;0.0047537489;0.014689395;0.0062501673;0.93562889;0;0.7588715;0.013538931;0;0;0;0;0.91952616;0;0.9242816;0.0031711222;5.1593352e-09;0.90602338;0;0.36783704;0.58028084;0;0.93937457;0.8579765;1.4863833e-17;0;1.2519474e-08;0;1.5644581e-18;0.015260482;0.0071595865;0.2340204;0.0020981422;1.1493481e-07;0.13105115;0;0;0.018653702;0.89315856;0.91811144;0.21446651;0.0033420094;7.8698909e-14;0;0.92749208;0.0032084177;0.44930699;0;0.58391213;0.020438273;0.4363049;0.16280639;7.7541803e-17;0.47636098;2.6350149e-06;0.85422033;0;7.5721953e-17;0;0.15732373;0.36468217;0.0093327388;0;8.8905683e-14;9.1184612e-13;6.9713537e-06;0;0.0013650759;5.7164017e-17;1.0803602e-09;0.0024826939;0.23492406;0.87533408;8.2709066e-06;6.2552527e-07;0.11031288;2.4504552e-13;9.388895e-09;1.0232764e-14;3.8496974e-08;0.79770249;0;0.9165836;0;0.90645206;0.026416805;2.6353746e-06;0;0;9.1645525e-05;0.76633447;6.4261198e-14;0.92952687;6.8932102e-16;0.93222827;0.012999685;0;5.9984387e-08;0;0.0016045226;0.92346323;0;1.0259099e-13;0;5.7670787e-17;0;0.079408847;0;0;0.31758901;0;0.26372439;0;0.26745558;0;0;0;0;0.28978738;0.32326475;0.41280365;0.25509787;4.2006568e-10;0;8.9057053e-08;6.0650301e-10;0;0;0.38088694;0.27161601;0;0.33038151;1.5952228e-08;6.2545211e-14;0.18169473;0.29482633;0.25555825;0;8.9142235e-18;0.010707047;1.1104065e-16;0.817334;0.14810823;0.35317594;0.19753473;0.36436442;0;0;1.6991121e-16;0;2.6909218e-13;3.4074386e-15;0.0005811989;0.61798;0;0.37271574;0;0;9.2196869e-06;9.900714e-15;0.036571402;0.61488354;0.095166862;0.080944441;0.24516086;0;6.9163344e-14;0;0.078945719;0.41248843;0;0;1.7634012e-08;0;0;0.63040769;1.0996027e-11;0.055161823;0.54872233;0.84511745;5.6952191e-15;0.02069333;0.89142644;0.32962269;3.7396267e-10;0;0.21909828;0;0.19263595;0.68218464;0.15276198;0;0.17177448;0.496508;0;0.36126706;0;0;1.5556997e-11;0.211808;0.14121515;0.695135;0;0.23843482;1.7463813e-05;0;0.4008621;0.35242787;0;0;0.61966306;0;0;0;0;0.23356751;0.87016797;0.00020715952;0.020400733;0;0.83481961;0;9.1205252e-17;0;0;0;0.36941576;0;0.88755131;0;0.041284423;0.67512822;1.8860143e-10;0;0.87777853;6.2299854e-09;2.3380574e-08;0;7.2869313e-15;0.82234418;0;0;2.5973405e-18;0.0012972257;0.90072268;0;0.89729643;0.0012464323;1.2175592e-09;0;0.0009710897;0.91366684;7.0211464e-10;0.00066444493;0.21549971;0.0095515363;0.87154472;0.00060242182;1.0590047e-15;1.4030723e-08;0.00074948231;0;0;0.89762968;0.57234985;0;0;0;0.43230197;1.0088729e-09;5.9377551e-18;0;0;0.41990906;4.3372239e-07;0.00094784494;0.89541471;0.00023282263;0;0.22757061;0.036287218;4.9629429e-09;0.85849327;0.87655568;0.79657763;0;0.39033163;0;0.91362178;0.0023440639;0;0;0.022930875;0.045738094;0.0015073556;0;0.00043370554;0.0042901901;0.01861074;0;4.7469113e-09;0.58295393;0.082688816;0.22592068;1.8635527e-08;0;0;0;0.44743061;0.17151275;0.80975026;2.7630099e-08;1.6618378e-09;0;0;0;0.83527243;6.0023194e-13;0.79565793;0;0;0;1.1434196e-16;0.62330079;0.39608347;0;0;0.33076215;0;0;0;0.25441158;0.10012443;0;0.10915447;0;0.45514703;0;0;0;0.24602704;0.30149308;0.29861572;0;0;0;0;0.35599557;0.35016114;0;0.3614347;0;0;0;0;0;0;0;0;0;0.4870894;0.48339552;0;0;0;0;0.057339288;0;0.28457606;0;0.18542309;0.41617623;0;0.51275998;0.2586183;0.59811437;0.11154482;0;0.72946417;0;0;1.2150006e-14;0.01287833;0.0071325256;0.085304879;0.27762926;3.7406349e-09;0.02724934;0.16527976;0.58616614;0.07250344;0.038887482;0.93350494;0.0059802658;0.00043661823;0;0.16373;0.51051331;0;0.35147965;0.26069218;0.047855884;0;0.5660454;0.061928038;0.11350787;0;8.5457315e-05;0.93476605;0;0.18717025;0.38952351;0.18710773;5.169999e-12;0.14530258;0;0.25896734;0;0;0;0.2946564;0;0;0;0.28341028;0;0;0.42843553;0;0.35773438;0;0;0.29981023;4.8877168e-13;0;0.38551545;7.5767919e-15;0;0;0.32544309;0;0;0;0.24926479;0.10448962;0;0.11375411;0;0.46867156;0;0;0;0.25525633;0.29573837;0.31063023;0;0;0;0;0.35030624;0.36204267;0;0.37386912;0;0;0;0;0;0;0;0;0;0.48708692;0.48339552;0;0;0;0;0.057338789;0;0.28457606;0;0.1854213;0.41618124;0;0.51276225;0.2586183;0.59811836;0.11154412;0;0.7294628;0;0;1.2147596e-14;0.01287833;0.0071325256;0.085302375;0.27764362;3.7406349e-09;0.02724934;0.16527531;0.58618426;0.072502941;0.038888827;0.93350494;0.0059802658;0.00043661211;0;0.16373;0.51053047;0;0.35149714;0.26068792;0.047858231;0;0.56605899;0.061928038;0.11351064;0;8.5457315e-05;0.93476605;0;0.18717025;0.38953102;0.18710773;5.169999e-12;0.14530258;0;0.25896734;0;0;0;0.2946564;0;0;0;0.28341028;0;0;0.42844552;0;0.35774189;0;0;0.29981023;4.8877168e-13;0;0.38552046;7.5766479e-15;0;0;0.32596016;0;0;0;0.24989435;0.10378279;0;0.11315063;0;0.46822762;0;0;0;0.25513855;0.29612139;0.31071401;0;0;0;0;0.35072157;0.36195508;0;0.37382659;0;0;0;0;0;0;0;0;0;0.48708448;0.48339796;0;0;0;0;0.057338286;0;0.28457606;0;0.18542309;0.41618624;0;0.51276678;0.25862041;0.5981223;0.11154273;0;0.7294628;0;0;1.2146391e-14;0.01287833;0.0071324618;0.085300371;0.27765799;3.7406349e-09;0.02724934;0.16527173;0.58619791;0.072500937;0.038890168;0.93350494;0.0059802015;0.00043661211;0;0.1637291;0.51055008;0;0.35151216;0.26068255;0.047860578;0;0.56607258;0.061927538;0.11351341;0;8.5456442e-05;0.93476593;0;0.18717025;0.38954103;0.18710773;5.169999e-12;0.14530258;0;0.25896734;0;0;0;0.2946564;0;0;0;0.28341028;0;0;0.42845303;0;0.3577469;0;0;0.29981023;4.8877168e-13;0;0.38552797;7.5766479e-15;0;0;0.21633378;0.87453556;0.00028726074;0.011649887;0;0.80892462;0;5.8216703e-18;0;0;0;0.42946166;0;0.88022918;0;0.027349027;0.68510431;1.8230747e-11;0;0.86145866;4.9040256e-09;5.3501168e-09;0;9.5380071e-16;0.8394872;0;0;2.5973405e-18;0.0012972257;0.90072268;0;0.89729643;0.0012464323;1.2175592e-09;0;0.0009710897;0.91366684;7.0211464e-10;0.00066444493;0.21550079;0.0095515363;0.87154472;0.00060242182;1.0590206e-15;1.4031471e-08;0.00074948231;0;0;0.89762968;0.57234532;0;0;0;0.43230197;1.0088729e-09;5.9583213e-18;0;0;0.419824;4.3466639e-07;0.00094733771;0.89543778;0.00023273623;0;0.22753741;0.036327146;4.9598254e-09;0.85853899;0.87653798;0.79666847;0;0.3904492;0;0.91363811;0.0023429547;0;0;0.022960488;0.04573071;0.00150937;0;0.0004345763;0.0042882022;0.018610114;0;4.7470676e-09;0.58295619;0.082689315;0.22592175;1.8636275e-08;0;0;0;0.44742328;0.17151722;0.80975103;2.7630472e-08;1.6619937e-09;0;0;0;0.83527303;6.0025986e-13;0.7956571;0;0;0;1.143452e-16;0.62330472;0.39607346;0;      };
     };
     float_Data @[17] {
      name="SNrTha_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 4 1 10] 0;0;0;0;0.016985735;0.38855889;2.9188001e-08;0.022371139;0.01698857;0.38855121;2.9193735e-08;0.022372814;0.47664365;0;0;0.64665765;0;0;0;0;0.10464255;0.028071884;0.23520102;0.018899623;0.75704879;0;0;0;0.76290631;0;0;0;0.76311713;0;0;0;0.096413836;0.030489285;0.2386408;0.020824572;      };
     };
     float_Data @[18] {
      name="PFC_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;2;4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [3 2 4 1 10] 0;0;4.689093e-17;0;0;0.96593803;0.96593803;0;4.6877976e-17;0;0;0;0;0.96593803;4.6877976e-17;0;0;0;0;0;4.6877976e-17;0;0;0.96593803;4.689093e-17;0;0;0;0;0.96593803;0.97022891;0;0;0;0;0;4.6877976e-17;0.96593803;0;0;0;0;4.6877976e-17;0;0;0;0;0.96593803;4.689093e-17;0;0;0;0;0.96593803;0.97022891;0;0;0;0;0;4.6877976e-17;0.96593803;0;0;0;0;4.6877976e-17;0;0;0;0;0.96593803;0;0;0;0;0;0.97022891;0.96593803;0;0;0;0;4.6877976e-17;0;0.96593803;0;0;0;4.6877976e-17;0;0;0;0;0;0.97022891;0;0;4.6877976e-17;0;0;0.96593803;0.96593803;0;4.6877976e-17;0;0;0;0;0.96593803;4.6877976e-17;0;0;0;0;0;4.6877976e-17;0;0;0.96593803;0;4.6877976e-17;0;0;0;0.96593803;0.96593803;4.6877976e-17;0;0;0;0;0;0.97022891;0;0;0;0;0;4.6877976e-17;0;0;0;0.96593803;0;0;0;0.97022694;0;0;0.96593803;0;0;4.6877976e-17;0;0;0;0.96593803;0;4.6877976e-17;0;0;0;0;0;4.6877976e-17;0;0.96593803;0;0;0;0.97022891;0;0;0.96593803;0;0;4.6877976e-17;0;0;0;0.96593803;0;4.6877976e-17;0;0;0;0;0;4.6877976e-17;0;0.96593803;0;0;0;0.97022891;0;0;0.96593803;0;0;4.6877976e-17;0;0;0;0.96593803;0;4.6877976e-17;0;0;0;0;0;4.6877976e-17;0;0.96593803;0;4.6877976e-17;0;0.96593803;0;0;0.96593803;4.6877976e-17;0;0;0;0;0;0.97022891;0;0;0;0;0;4.6877976e-17;0;0;0;0.96593803;      };
     };
     float_Data @[19] {
      name="LVe_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4 1 10] 0;0.12968871;0.020972485;0.75342739;0;0.12969108;0.02096417;0.75342929;0;0.12969108;0.02096417;0.75342929;0;0.0045530498;0.0017117112;0.85156637;0;0.12564349;0.020402206;0.75470257;0;0.12568556;0.020387216;0.75470835;0;0.6192174;0.0074197729;0.71213782;0;0.41820103;0.0068266019;0.7243976;0;0.19504625;0.0061824312;0.74366039;0;0.13598624;0.04114785;0.7326591;      };
     };
     float_Data @[20] {
      name="LVi_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4 1 10] 0;0.0943918;0.074299999;0.72268504;0;0.09438467;0.074270993;0.72269368;0;0.09438467;0.074270993;0.72269368;0;0.0077077467;0.0049944273;0.81737137;0;0.094270214;0.07421679;0.72274393;0;0.094255581;0.074170202;0.72275949;0;0.54425746;0.02175213;0.66880095;0;0.53775376;0.021779215;0.67349702;0;0.52386022;0.021663573;0.67583299;0;0.11267569;0.096430257;0.71194559;      };
     };
     float_Data @[21] {
      name="Hidden_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [5 5 10] 0.74124211;0.86830342;4.9948489e-05;1.3197878e-09;0.19835915;0.82887876;5.3399651e-13;4.8690721e-18;0.89605206;6.0542485e-16;0.78624332;0.88863891;3.1556546e-11;0.17173517;1.1633506e-15;0.00011373025;0.00020321395;4.5720852e-05;2.0490315e-06;0.3853178;1.1263314e-11;0.00073767157;0.1636773;0.0014081309;0.54411232;0.72660035;0.90938145;1.2176855e-12;0.35680869;0.036147643;5.1326537e-13;0.85122555;0.073142312;0.91560006;0.030638099;7.9606209e-05;1.0715389e-07;0.00029783847;6.1775937e-13;2.7882635e-15;1.7047928e-06;0.015828446;6.6193183e-13;9.8855935e-10;0.085549206;0.1765765;7.1386758e-06;0.87553662;0.24986973;1.4868075e-10;0.72647899;0.90936273;1.2276563e-12;0.35713392;0.036186561;5.1465304e-13;0.85125369;0.073170848;0.91558689;0.030669637;7.975474e-05;1.0742249e-07;0.00029888705;6.1916563e-13;2.8089988e-15;1.7090342e-06;0.015849112;6.6332877e-13;9.9091468e-10;0.085710429;0.17670423;7.1536906e-06;0.87549829;0.24978299;1.4909958e-10;6.9361727e-07;0.80298877;0.3498534;0.066556841;0.0091991285;1.3001694e-10;6.7219502e-05;0.13761809;0.90468001;1.2001982e-07;0.047898494;0.89478183;0.00024767246;0.22841966;3.2574972e-05;1.0852935e-17;0.89802492;6.2190218e-16;1.6210227e-13;0.75524884;3.8919171e-07;7.6320168e-05;0.00063617853;0.45484042;4.3506605e-12;0.74087411;0.868249;4.9374321e-05;1.2824577e-09;0.19933026;0.8290146;5.2705821e-13;4.8319007e-18;0.89601183;6.0410602e-16;0.78627056;0.88876522;3.1554794e-11;0.17158243;1.1633824e-15;0.00011373745;0.00020389553;4.572433e-05;2.0491086e-06;0.38478491;1.117305e-11;0.00073771505;0.16277692;0.0014245789;0.54424375;2.4921112e-05;0.69904661;0.51986408;0.17896768;0.012263868;1.9280037e-07;0.1524172;0.6744045;1.0847261e-09;6.599791e-15;0.0119427;1.2068137e-06;8.5059668e-08;5.8442842e-05;0.014142099;0.00072210748;0.7983951;1.5823609e-06;2.1787032e-18;1.765914e-05;0.00028615087;0.10886799;0.92074913;0.89287424;0.69970906;3.3835869e-07;2.9830964e-08;0.60401398;0.7227779;2.0066425e-05;0.087531082;0.61656457;0.53326589;1.2269663e-06;0.34868753;0.72765762;3.515485e-09;0.12714587;0.21473096;0.2753312;0.25988919;0.78155649;0.29229131;0.28873649;0.73114538;0.10128978;0.46133044;2.604555e-08;7.5972462e-10;0.15437695;3.2620903e-07;2.6917668e-08;0.68994164;0.55063426;0.0031180785;0.26240957;0.64149129;0.62020034;1.8024323e-07;0.33740732;0.67548263;1.170571e-09;0.25758401;0.2478001;0.27496016;0.29172397;0.8025589;0.31490797;0.32383686;0.6118663;0.15690838;0.5149551;2.3005025e-09;4.8438181e-10;0.40764225;3.2399507e-07;2.6797622e-08;0.68979424;0.55044627;0.0031072416;0.26211834;0.64122963;0.62004966;1.7802247e-07;0.33848932;0.67528719;1.1658301e-09;0.25864398;0.24888898;0.27649459;0.29313871;0.80253702;0.31627244;0.32529947;0.6115967;0.15743449;0.51477164;2.2757196e-09;4.7967097e-10;0.40736705;1.469058e-05;0.69311297;0.56141049;0.035242416;0.12057277;2.2164725e-06;0.12381978;0.69954348;3.3780725e-11;1.8775504e-16;0.0026115959;3.4081037e-07;3.2972693e-07;2.8465471e-05;0.0076950295;0.0004674255;0.79671305;4.9921789e-07;0;2.2863816e-07;0.00035741099;0.099730439;0.91655171;0.89297038;0.80004472;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;100;101;102;103;104;105;106;107;108;109;110;111;112;113;114;115;116;117;118;119;120;121;122;123;124;125;126;127;128;129;130;131;132;133;134;135;136;137;138;139;140;141;142;143;144;145;146;147;148;149;150;151;152;153;154;155;156;157;158;159;160;161;162;163;164;165;166;167;168;169;170;171;172;173;174;175;176;177;178;179;180;181;182;183;184;185;186;187;188;189;190;191;192;193;194;195;196;197;198;199;200;201;202;203;204;205;206;207;208;209;210;211;212;213;214;215;216;217;218;219;220;221;222;223;224;225;226;227;228;229;230;231;232;233;234;235;236;237;238;239;240;241;242;243;244;245;246;247;248;249;250;251;252;253;254;255;      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 0.20343395;0.071678802;0.1715049;0.17360392;0.21397163;0.064404458;0.24681829;0.21197008;0.24360453;0.18257834;0.10726534;0.29740816;0.15298972;0.13025276;0.073014528;0.24590613;0.14569901;0.10438477;0.19209823;0.22469448;0.17650051;0.1825919;0.26173517;0.1666223;0.21423937;0.072982758;0.13995415;0.17709045;0.14611398;0.1915677;0.16440991;0.19476672;0.11855789;0.25381044;0.14442772;0.31428328;0.14572029;0.18402292;0.31534985;0.16058592;0.2612046;0.29768017;0.12420258;0.14619564;0.14788626;0.089692764;0.15780222;0.24398993;0.25825542;0.23786373;0.19806603;0.30824593;0.25130841;0.1452177;0.34658226;0.13567913;0.11745591;0.18505184;0;0.11269566;0.14764355;0.25829512;0.1101772;0.11897641;0.081076756;0.088621967;0.27841213;0.075363636;0.074971087;0.22346525;0.19314548;0.30911836;0.090655439;0.29885423;0.11876526;0.31306809;0.27170399;0.080898352;0.1505903;0.15017909;0.21346189;0.15604892;0.18699263;0.14696954;0.1207885;0.2081878;0.080233671;0.2608833;0.083490886;0.18840463;0.30323058;0.24669163;0.15725508;0.17787391;0.19011779;0.1939189;0.16201419;0.28579545;0.18392517;0.14892368;0.19975555;0.20663399;0.096407898;0.076497793;0.33997953;0.080439396;0.23322046;0.18023987;0.08068867;0.19444594;0.14246698;0.25278306;0.10866203;0.15111704;0.18625757;0.11633212;0.18207437;0.1347142;0.25782254;0.15305479;0.14847557;0.23360097;0.18972293;0.26478651;0.23561043;0.26020375;0.12212776;0.11722995;0.03717722;0.1072386;0.15104806;0.073438562;0.19961411;0.1500499;0.14411502;0.21721873;0.21681364;0.22391558;0.16456166;0.113054;0.19898029;0.26484886;0.12722166;0.095283598;0.13318057;0.11416334;0.12787463;0.26580906;0.20035324;0.30408698;0.074309543;0.17781851;0.18972044;0.28486416;0.16984838;0.16441455;0.25976256;0.22145672;0.15371805;0.21290594;0.11340104;0.27091798;0.11183072;0.25760034;0.14789766;0.26973891;0.22213173;0.21139465;0.18949577;0.30229598;0.17801389;0.15085454;0.16230492;0.23997001;0.1276045;0.20091671;0.22424228;0.2516225;0.12733416;0;0.074987046;0.14059687;0.34332889;0.30781204;0.043972209;0.10469326;0.0752123;0.13841943;0.18876587;0.14747435;0.1672987;0.19514446;0.075924799;0.14950329;0.12598598;0.27357998;0.21151289;0;0.091746435;0.11295104;0.11359856;0.19943553;0.21271077;0.1619852;0.075652987;0.11204354;0.37310115;0.1708526;0.22387545;0.21222349;0.19492804;0.25571376;0.056034952;0.26068226;0.21380331;0.15291291;0.073741771;0.075254813;0.14022511;0.22728887;0.23012719;0.11277661;0.066203266;0.23003322;0.19739506;0.22398165;0.30030864;0.19533272;0.18556307;0.22021511;0.25699604;0.15933049;0.18847631;0.24457771;0.18917835;0.28852731;0.14632444;0.11063841;0.1501008;0.18325025;0.2046186;0.22749068;0.1769236;0.13038306;0.056727961;0.20914268;0.23375186;0.23246303;0.13169375;0.19869089;0.15252629;0.21630599;0.12040346;0.1126541;0.26993942;0.14749531;      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 8;2;5;5;6;2;7;6;7;5;3;9;5;5;2;7;4;3;6;7;6;5;8;6;6;2;4;6;4;6;6;6;4;7;4;11;4;5;11;5;7;9;5;4;4;4;5;8;7;8;7;9;8;4;11;5;4;5;0;3;4;7;3;4;3;3;8;2;2;6;6;10;3;8;4;10;8;3;4;4;8;5;5;4;4;7;3;7;3;5;9;8;6;7;5;6;5;9;6;4;7;7;4;2;12;3;7;6;3;6;6;8;5;4;5;4;5;4;7;6;4;7;5;9;8;8;4;4;1;3;4;2;6;4;4;7;7;8;5;3;6;7;4;3;5;3;4;8;7;9;2;6;6;9;6;5;7;8;6;7;3;8;5;7;6;8;7;6;5;10;7;4;6;7;4;6;7;8;4;0;2;8;10;10;2;9;2;5;5;4;6;6;2;4;4;8;7;0;3;3;3;6;7;5;2;5;12;5;7;8;6;8;2;7;6;5;2;2;6;8;7;3;3;7;7;7;8;7;7;8;9;5;7;7;5;10;6;3;4;8;7;6;5;4;2;7;7;8;5;8;5;7;4;3;8;5;      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 0.83999997;0.92000002;0.80000001;0.80000001;0.75999999;0.92000002;0.72000003;0.75999999;0.75999999;0.80000001;0.88;0.63999999;0.80000001;0.80000001;0.92000002;0.72000003;0.83999997;0.88;0.75999999;0.75999999;0.75999999;0.80000001;0.68000001;0.75999999;0.75999999;0.92000002;0.83999997;0.75999999;0.83999997;0.75999999;0.75999999;0.75999999;0.83999997;0.75999999;0.83999997;0.56;0.83999997;0.80000001;0.56;0.80000001;0.72000003;0.63999999;0.80000001;0.83999997;0.83999997;0.83999997;0.80000001;0.68000001;0.72000003;0.68000001;0.72000003;0.63999999;0.68000001;0.83999997;0.56;0.80000001;0.83999997;0.83999997;1;0.88;0.83999997;0.72000003;0.88;0.83999997;0.88;0.88;0.68000001;0.92000002;0.92000002;0.75999999;0.75999999;0.60000002;0.88;0.68000001;0.83999997;0.60000002;0.68000001;0.88;0.83999997;0.83999997;0.68000001;0.80000001;0.83999997;0.83999997;0.83999997;0.72000003;0.88;0.72000003;0.88;0.80000001;0.63999999;0.68000001;0.75999999;0.72000003;0.80000001;0.75999999;0.80000001;0.63999999;0.75999999;0.83999997;0.72000003;0.72000003;0.83999997;0.92000002;0.56;0.88;0.72000003;0.75999999;0.88;0.75999999;0.75999999;0.68000001;0.80000001;0.83999997;0.80000001;0.83999997;0.80000001;0.83999997;0.72000003;0.75999999;0.83999997;0.72000003;0.83999997;0.63999999;0.68000001;0.68000001;0.83999997;0.83999997;0.95999998;0.88;0.83999997;0.92000002;0.75999999;0.83999997;0.83999997;0.72000003;0.72000003;0.68000001;0.80000001;0.88;0.75999999;0.75999999;0.83999997;0.88;0.80000001;0.88;0.83999997;0.68000001;0.72000003;0.63999999;0.92000002;0.75999999;0.75999999;0.63999999;0.75999999;0.80000001;0.72000003;0.68000001;0.75999999;0.72000003;0.88;0.68000001;0.80000001;0.72000003;0.75999999;0.68000001;0.72000003;0.75999999;0.80000001;0.60000002;0.72000003;0.83999997;0.75999999;0.72000003;0.83999997;0.75999999;0.72000003;0.68000001;0.83999997;1;0.92000002;0.68000001;0.68000001;0.60000002;0.92000002;0.63999999;0.92000002;0.80000001;0.80000001;0.83999997;0.75999999;0.75999999;0.92000002;0.83999997;0.83999997;0.68000001;0.75999999;1;0.88;0.88;0.88;0.75999999;0.72000003;0.80000001;0.92000002;0.80000001;0.51999998;0.80000001;0.72000003;0.68000001;0.75999999;0.68000001;0.92000002;0.72000003;0.75999999;0.80000001;0.92000002;0.92000002;0.75999999;0.68000001;0.72000003;0.88;0.88;0.72000003;0.72000003;0.72000003;0.68000001;0.72000003;0.72000003;0.68000001;0.63999999;0.80000001;0.72000003;0.72000003;0.80000001;0.60000002;0.75999999;0.88;0.83999997;0.68000001;0.72000003;0.75999999;0.80000001;0.83999997;0.92000002;0.72000003;0.72000003;0.68000001;0.80000001;0.68000001;0.80000001;0.72000003;0.83999997;0.88;0.68000001;0.80000001;      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 40.900002;38.360001;36.560001;42.68;42.459999;41.200001;41.860001;40.16;38.18;43.439999;37.759998;42.040001;48.959999;40.919998;39.400002;44.799999;42.080002;41.34;42.459999;43.380001;45.799999;39.220001;37.02;46.84;42.52;37.02;35.619999;39.060001;39.68;39.16;45.360001;39.119999;35.380001;35.84;44.759998;42.939999;37.240002;34.459999;43.279999;37.380001;41.459999;40.799999;40.880001;36.779999;40.779999;42.639999;37.860001;43.360001;43.419998;40.5;43.380001;44.220001;43.5;41.439999;41.779999;40.5;41.259998;41.119999;34.98;39.959999;31.780001;35.380001;37.880001;40.380001;35.599998;38.639999;41.959999;41.080002;37.82;36.34;41.220001;44.459999;42.459999;40.900002;37.619999;44.939999;36.82;34.220001;39.82;32.5;39.700001;34.619999;42.259998;37.099998;38.380001;36.259998;42.439999;42.900002;31.76;37.880001;38.540001;37.299999;37.259998;34.400002;38.02;36.939999;39.639999;36.82;41.02;34.34;37.360001;40.720001;39.98;41.560001;38.139999;39.040001;37.959999;37.540001;37.68;39.34;34.98;39.66;46.439999;36.16;31.6;38.439999;39.779999;41.220001;32.98;38.919998;36.900002;41.459999;40.700001;37.720001;38.759998;37.799999;35.34;35.52;36.560001;31.799999;36.18;35.84;36.759998;37.439999;37.34;32.68;31.84;36.18;34.5;34.459999;31.82;37.040001;35.34;25.700001;37.439999;30.32;35.259998;36.580002;36.66;37.439999;36.720001;40.419998;37.720001;35.619999;38.560001;31.02;33.68;35.919998;33.34;34.66;25.860001;30.18;33.900002;31.4;31.82;35.540001;30.08;33.900002;33.220001;33.959999;33.639999;33.48;32.82;33.16;33.060001;36.299999;35.599998;34.220001;32.900002;32.560001;30.5;29.16;34.540001;33.060001;33.84;34.580002;29.58;31.959999;30.58;29.9;35;35.84;33.52;34.5;32.68;35.84;31.440001;26.719999;28.74;31.42;39.220001;36.900002;39.259998;31.860001;34.34;33.099998;38.540001;31.540001;33.619999;34.279999;31.120001;34.240002;34.040001;37.959999;33.139999;31.48;35.82;37.400002;34.959999;35;34.580002;28.92;30.299999;32.919998;34.540001;29.98;37.459999;31.08;33.16;35.619999;30.32;33.540001;32.279999;33.66;33.419998;37.700001;38.200001;31.34;33.759998;32.779999;33.119999;33.720001;32.48;31.6;24.24;33.259998;30.860001;33.419998;32.799999;34.080002;29.440001;27.9;28.18;31.24;28.459999;28.440001;      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [256] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData_col_Hidden_act_Cluster";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
       UserDataItem @[1] {
	name="MAX";
	value 6 0=13.43964862823486;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [53] 0;0;0;0;0;4.3747625;4.3747625;6.2901859;4.3747625;4.3747625;4.3747625;4.3747625;6.2901859;4.3747625;4.3747625;4.3747625;0;0;0;4.3747625;4.3747625;7.9630947;4.3747625;4.3747625;4.3747625;4.3747625;7.9630947;7.9630947;10.339836;7.9630947;7.9630947;7.9630947;7.9630947;10.339836;10.339836;11.686651;10.339836;10.339836;10.339836;10.339836;11.686651;10.339836;10.339836;10.339836;7.9630947;7.9630947;4.3747625;4.3747625;0;0;0;0;0;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
       };
       UserDataItem @[1] {
	name="MAX";
	value 6 0=5.800000190734863;
       };
       UserDataItem @[2] {
	name="MIN";
	value 6 0=0.2000000029802322;
       };
      };
      name="Y";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [53] 2.1875;2.1875;2.1875;2.1875;1;1;0.5;0.5;0.5;0.5;1;1.5;1.5;1.5;1.5;1;1;2.1875;3.375;3.375;2.5;2.5;2.5;2.5;3.375;4.25;4.25;3.5;3.5;3.5;3.5;4.25;5;5;4.5;4.5;4.5;4.5;5;5.5;5.5;5.5;5.5;5;5;4.25;4.25;3.375;3.375;2.1875;2.1875;2.1875;2.1875;      };
     };
     String_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_2";
	value 1 0=1;
       };
      };
      name="Label";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [53] ;;;;;;;"A";;;;;"X";;;;;;;;;"C";;;;;;;"Y";;;;;;;"B";;;;;"Z";;;;;;;;;;;;;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItemBase;
     el_def=0;
     UserDataItem @[0] {
      name="PLOT_STYLE";
      value 9 0="POINTS";
     };
    };
    name="TrialOutputData_col_Hidden_act_PCA2dPrjn";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_2";
	value 1 0=1;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] "A";"B";"X";"Z";"C";"Y";      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="x_prjn";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 0.80219531;-0.86114419;0.66741771;-0.95372766;-0.50205368;-0.75487661;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
       };
      };
      name="y_prjn";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] -0.19432957;0.3668336;0.6415717;0.23273477;1.3112323;-0.32664657;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program @[0] {
   name="AXTaskGen";
   tags=;
   desc="generates the simple A-X target detection task";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="Input";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="I_A";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="I_B";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="I_C";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="I_X";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="I_Y";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="I_Z";
       value=5;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @[1] {
     name="Output";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="O_N";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="O_T";
       value=1;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][0]$0$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="unit_names";
     var_type=T_Object;
     object_type=taOBase;
     object_val=.projects[0].data.gp[0][1]$1$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[1] {
     name="input_unit";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[0].types[0]$2$;
      value=5;
     };
     objs_ptr=0;
     flags=NULL_CHECK;
     desc=;
    };
    ProgVar @[2] {
     name="output_unit";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[0].types[1]$3$;
      value=0;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    InitNamedUnits @[0] {
     desc=;
     flags=;
     input_data_var=.projects[0].programs[0].args[0]$4$;
     unit_names_var=.projects[0].programs[0].vars[0]$5$;
     network_var=NULL;
     init_label_net=1;
     n_lay_name_chars=1;
    };
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=$4$;
    };
    ForLoop @[1] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      IfElse @[0] {
       desc=;
       flags=;
       cond {
	expr="input_unit == I_A ||  input_unit == I_X";
	flags=;
	var_expr="$#0#$ == I_A ||  $#0#$ == I_X";
	vars {
	};
	var_names{ input_unit;	};
	bad_vars{ 	};
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[0].vars[2]$6$;
	 expr {
	  expr="O_T";
	  flags=;
	  var_expr="O_T";
	  vars {
	  };
	  var_names{ 	  };
	  bad_vars{ 	  };
	 };
	};
       };
       false_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=$6$;
	 expr {
	  expr="O_N";
	  flags=;
	  var_expr="O_N";
	  vars {
	  };
	  var_names{ 	  };
	  bad_vars{ 	  };
	 };
	};
       };
      };
      PrintVar @[1] {
       desc=;
       flags=;
       message=;
       print_var=.projects[0].programs[0].vars[1]$7$;
       print_var2=$6$;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
      };
      AddNewDataRow @[2] {
       desc=;
       flags=;
       data_var=$4$;
      };
      SetUnitsVar @[3] {
       desc=;
       flags=;
       input_data_var=$4$;
       set_nm=1;
       offset=NULL;
       unit_1=$7$;
       unit_2=$6$;
       unit_3=NULL;
       unit_4=NULL;
      };
      DoneWritingDataRow @[4] {
       desc=;
       flags=;
       data_var=$4$;
      };
      IfBreak @[5] {
       desc=;
       flags=;
       cond {
	expr="input_unit ==  I_Z";
	flags=;
	var_expr="$#0#$ ==  I_Z";
	vars {
	};
	var_names{ input_unit;	};
	bad_vars{ 	};
       };
      };
     };
     init {
      expr="input_unit = 0";
      flags=NO_VAR_ERRS;
      var_expr="$#0#$ = 0";
      vars {
      };
      var_names{ input_unit;      };
      bad_vars{       };
     };
     test {
      expr="input_unit <= I_Z";
      flags=NO_VAR_ERRS;
      var_expr="$#0#$ <= I_Z";
      vars {
      };
      var_names{ input_unit;      };
      bad_vars{       };
     };
     iter {
      expr="input_unit++";
      flags=NO_VAR_ERRS;
      var_expr="$#0#$++";
      vars {
      };
      var_names{ input_unit;      };
      bad_vars{       };
     };
    };
   };
  };
  Program @[1] {
   name="CPTAXGen";
   tags=;
   desc="generates the simple full CPT-A-X target detection task";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="Input";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="I_A";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="I_B";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="I_C";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="I_X";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="I_Y";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="I_Z";
       value=5;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @[1] {
     name="Output";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="O_N";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="O_T";
       value=1;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @[2] {
     name="RewTarg";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="R_rew_targ";
       value=0;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$0$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[1] {
     name="network";
     var_type=T_Object;
     object_type=Network;
     object_val=.projects[0].networks[0]$8$;
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="network to apply inputs to -- typically set by calling program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="unit_names";
     var_type=T_Object;
     object_type=taOBase;
     object_val=$1$;
     objs_ptr=0;
     flags=NULL_CHECK;
     desc=;
    };
    ProgVar @[1] {
     name="cue";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[1].types[0]$9$;
      value=2;
     };
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="the identity of the cue input (A,B, or C) represented as a DynEnum of type Input, taking on values I_A, I_B, or I_C.";
    };
    ProgVar @[2] {
     name="probe";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=$9$;
      value=5;
     };
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="the identity of the probe input (X,Y, or Z), represented by an Output DynEnum. ";
    };
    ProgVar @[3] {
     name="output_unit";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[1].types[1]$10$;
      value=0;
     };
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="correct answer for the output layer -- we'll have the model respond \"non-target\" for all the cue items, and \"target\" for the targets. ";
    };
    ProgVar @[4] {
     name="pct_target";
     var_type=T_Real;
     real_val=0.25;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="how frequent should the target sequence be? this is actually a proportion, but pct is a much simpler label -- for the default case it should be .7 ";
    };
    ProgVar @[5] {
     name="rnd_number";
     var_type=T_Real;
     real_val=0.9247880962807189;
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="a random number between 0 and 1 (floating point or Real) that we'll generate to simulate the flipping of a weighted coin. ";
    };
    ProgVar @[6] {
     name="i";
     var_type=T_Int;
     int_val=25;
     objs_ptr=0;
     flags=NULL_CHECK;
     desc=;
    };
    ProgVar @[7] {
     name="n_trials";
     var_type=T_Int;
     int_val=25;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    InitNamedUnits @[0] {
     desc=;
     flags=;
     input_data_var=.projects[0].programs[1].args[0]$11$;
     unit_names_var=.projects[0].programs[1].vars[0]$12$;
     network_var=.projects[0].programs[1].args[1]$13$;
     init_label_net=1;
     n_lay_name_chars=1;
    };
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=$11$;
    };
    ForLoop @[1] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      RandomCall @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[5]$14$;
       object_type=Random;
       method=Random::ZeroOne;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      IfElse @[1] {
       desc=;
       flags=;
       cond {
	expr="rnd_number <  pct_target";
	flags=;
	var_expr="$#0#$ <  $#1#$";
	vars {
	};
	var_names{ rnd_number;pct_target;	};
	bad_vars{ 	};
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[1].vars[1]$15$;
	 expr {
	  expr="I_A";
	  flags=;
	  var_expr="I_A";
	  vars {
	  };
	  var_names{ 	  };
	  bad_vars{ 	  };
	 };
	};
	AssignExpr @[1] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[1].vars[2]$16$;
	 expr {
	  expr="I_X";
	  flags=;
	  var_expr="I_X";
	  vars {
	  };
	  var_names{ 	  };
	  bad_vars{ 	  };
	 };
	};
	AssignExpr @[2] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[1].vars[3]$17$;
	 expr {
	  expr="O_T";
	  flags=;
	  var_expr="O_T";
	  vars {
	  };
	  var_names{ 	  };
	  bad_vars{ 	  };
	 };
	};
       };
       false_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	DoLoop @[0] {
	 desc=;
	 flags=;
	 loop_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  RandomCall @[0] {
	   desc=;
	   flags=;
	   result_var=$15$;
	   object_type=Random;
	   method=Random::IntMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="min";
	     required=0;
	     def_val=;
	     expr {
	      expr="I_A";
	      flags=;
	      var_expr="I_A";
	      vars {
	      };
	      var_names{ 	      };
	      bad_vars{ 	      };
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="max";
	     required=0;
	     def_val=;
	     expr {
	      expr="I_C+1";
	      flags=;
	      var_expr="I_C+1";
	      vars {
	      };
	      var_names{ 	      };
	      bad_vars{ 	      };
	     };
	    };
	   };
	  };
	  RandomCall @[1] {
	   desc=;
	   flags=;
	   result_var=$16$;
	   object_type=Random;
	   method=Random::IntMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="min";
	     required=0;
	     def_val=;
	     expr {
	      expr="I_X";
	      flags=;
	      var_expr="I_X";
	      vars {
	      };
	      var_names{ 	      };
	      bad_vars{ 	      };
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="max";
	     required=0;
	     def_val=;
	     expr {
	      expr="I_Z+1";
	      flags=;
	      var_expr="I_Z+1";
	      vars {
	      };
	      var_names{ 	      };
	      bad_vars{ 	      };
	     };
	    };
	   };
	  };
	  AssignExpr @[2] {
	   desc=;
	   flags=;
	   result_var=$17$;
	   expr {
	    expr="O_N";
	    flags=;
	    var_expr="O_N";
	    vars {
	    };
	    var_names{ 	    };
	    bad_vars{ 	    };
	   };
	  };
	 };
	 test {
	  expr="cue == I_A && probe == I_X";
	  flags=;
	  var_expr="$#0#$ == I_A && $#1#$ == I_X";
	  vars {
	  };
	  var_names{ cue;probe;	  };
	  bad_vars{ 	  };
	 };
	};
       };
      };
      PrintVar @[2] {
       desc=;
       flags=OFF;
       message=;
       print_var=$15$;
       print_var2=$16$;
       print_var3=$17$;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
      };
      AddNewDataRow @[3] {
       desc=;
       flags=;
       data_var=$11$;
      };
      SetUnitsVar @[4] {
       desc=;
       flags=;
       input_data_var=$11$;
       set_nm=1;
       offset=NULL;
       unit_1=$15$;
       unit_2=NULL;
       unit_3=NULL;
       unit_4=NULL;
      };
      SetUnitsLit @[5] {
       desc="set output to O_N = nontarget";
       flags=;
       input_data_var=$11$;
       set_nm=1;
       offset=0;
       unit_1 {
	enum_type=$10$;
	value=0;
       };
       unit_2 {
	enum_type=NULL;
	value=-1;
       };
       unit_3 {
	enum_type=NULL;
	value=-1;
       };
       unit_4 {
	enum_type=NULL;
	value=-1;
       };
      };
      AddNewDataRow @[6] {
       desc=;
       flags=;
       data_var=$11$;
      };
      SetUnitsVar @[7] {
       desc=;
       flags=;
       input_data_var=$11$;
       set_nm=1;
       offset=NULL;
       unit_1=$16$;
       unit_2=$17$;
       unit_3=NULL;
       unit_4=NULL;
      };
      SetUnitsLit @[8] {
       desc=;
       flags=;
       input_data_var=$11$;
       set_nm=1;
       offset=0;
       unit_1 {
	enum_type=.projects[0].programs[1].types[2]$18$;
	value=0;
       };
       unit_2 {
	enum_type=NULL;
	value=-1;
       };
       unit_3 {
	enum_type=NULL;
	value=-1;
       };
       unit_4 {
	enum_type=NULL;
	value=-1;
       };
      };
      DoneWritingDataRow @[9] {
       desc=;
       flags=;
       data_var=$11$;
      };
     };
     init {
      expr="i = 0";
      flags=NO_VAR_ERRS;
      var_expr="$#0#$ = 0";
      vars {
      };
      var_names{ i;      };
      bad_vars{       };
     };
     test {
      expr="i < n_trials";
      flags=NO_VAR_ERRS;
      var_expr="$#0#$ < $#1#$";
      vars {
      };
      var_names{ i;n_trials;      };
      bad_vars{       };
     };
     iter {
      expr="i++";
      flags=NO_VAR_ERRS;
      var_expr="$#0#$++";
      vars {
      };
      var_names{ i;      };
      bad_vars{       };
     };
    };
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[0][4]$19$;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$0$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
     ProgVar @[2] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="maximum number of batch runs to perform";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="batch counter";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$20$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$21$;
      counter=Network::batch;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$20$;
      local_ctr_var=$21$;
      counter=Network::batch;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=.projects[0].programs.gp[0][1]$22$;
	targ_ld_init="*LeabraTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	   flags=;
	   var_expr="true";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$20$;
	local_ctr_var=$21$;
	counter=Network::batch;
       };
      };
      test {
       expr="batch < max_batch";
       flags=;
       var_expr="$#0#$ < $#1#$";
       vars {
       };
       var_names{ batch;max_batch;       };
       bad_vars{        };
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrain";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ -780234232;90472792;-1824055366;-1458504805;931603553;628114250;-397203912;400599118;668345550;986760015;-1744087755;-1785459266;-286849224;-90084012;-158027167;349098681;-1284692979;-2101067524;-1926786488;367808837;1922891085;949066513;-1494923573;1188396644;1134684913;36446409;712212583;-2045130818;2050189640;1721735914;1196220885;-486830909;80824288;1562917761;-382273118;766420392;-467254420;691536368;-1984810026;-1948850485;1221172853;-494692371;1505447696;-106083616;245827259;1033681652;999183986;545856809;1322414685;-1463920003;2130750285;906182959;-1452024129;-1340799546;-1866650998;-534999073;1933934084;956196146;2095296244;1126704100;-1857112427;635820240;-1570383282;-1676293061;-529329219;-718702537;-2078523194;-1289064041;1570409741;-1899425279;-1307789707;1038789690;827784490;-1460446245;-216441369;1031606079;775469863;714782128;-770384194;-526776864;-148910625;-172297187;1412980264;1136662400;-1746645191;706139548;2056700642;603676390;1480558358;905747308;1271537142;378012110;-1589513054;458171261;-727587409;1602005307;2069155394;-223593520;-1866693215;1767503026;-380217853;-1659507099;-1358090743;69471678;1975917150;1205747428;-1634050621;727336592;407955260;-2041686247;-1354575595;1390595458;-167038945;804059005;962234819;482784610;-14351842;-1031382298;-1108776497;928019288;668965424;-603224727;1490509132;1459684572;1024209069;-325662274;1235139855;305075461;234223737;-78460610;-1308226925;-301939528;-1800228533;-262208686;-243685253;-1687179297;590915513;-651481722;604513027;-888706118;279085449;-567382886;77445611;1948654918;-106591085;-1367767711;1208523681;-938604877;-571681788;202925656;-1060275890;-736751368;-693631329;-1709696987;-847288579;978555089;-584123375;-454224457;-1173166942;1177408447;680999062;-989095473;930470430;-1844765575;1006440491;-1381276516;-1513537284;186684125;310195929;1504691526;-874720083;-726464687;-2067085818;34882625;-196298925;864953151;-223764597;1073985881;1896888426;-125532694;-313424223;1218760863;956095756;-379411853;-1914173720;279180555;-1507880687;1788635194;-2129022205;16132386;-1794151128;-995652527;-1368375526;-1112228551;-1573897207;360092698;-239052538;-609628994;-575017897;-534826517;1532746064;1337988798;1982738725;-528373761;-571399368;1989835284;-1462081513;879840792;-1775851448;-1084882941;-285898185;1698782039;-1274802238;-1605896299;956661353;816845124;-1752157012;-791156865;-1804357434;10068527;-1213127577;-534746698;89035335;406369762;954447114;2029963219;607271100;89194255;-1092835121;2097106630;223581289;1464123220;1339488881;-1528381671;688642449;-1475186656;-1774817194;-404535791;-1616361464;1010288353;-141107019;1505889983;-760905752;1345141674;-1670115733;-2040602270;1940605910;353106890;-771788374;-180729434;-1863623661;-778605392;919514779;1698223908;-661475433;786528867;1177109775;-1885422201;-407899269;-637647013;686309052;1951882545;1940288758;470111610;-1221655510;1809714385;2099666714;-423233102;2123513057;1550181741;-772910934;-590396228;2127124331;-518178845;2056121458;1219286386;-2070953357;954020010;-621466072;-6472946;385696313;1978311318;1018557869;134120284;-1019604888;-1348551084;-1177084148;853524389;-1453790663;-1324679832;1624880628;234350540;-1804689248;-2146823409;-377062841;559456763;-393987025;-1248638331;1940891501;-925246777;2137142400;-1419853550;1495514238;108156490;1330620002;992780608;-1549344910;981014627;1317575491;768185407;-1835649775;-1355866954;215918652;629439717;-1168190317;1126332272;-560227887;-445443305;287849506;1241246889;1520584584;1527614286;1326333549;351956447;1622323519;-938730309;-785527330;-414679432;1688648399;-211684721;574987910;-1527299543;1529028419;1935910999;-1111396036;-1549935419;98540243;987234704;-1694585054;-1139590925;-1213894295;1004864396;1494504338;1388553558;-1811100757;531155974;-286149192;2075838242;-80261845;-1322001883;340062657;-321213564;482471075;1553635504;495712311;-1919984106;-1787505848;2066741143;1384510868;-765877712;-393262457;688196477;-292655429;-25548797;-577123988;276947256;-850602874;145622760;-1632443656;81877011;-242291727;1430624749;-1454831728;-1411702769;1844812695;1531160997;183939884;-815055403;843115752;-323116797;1224312444;-1126828594;-913824006;2086773436;-2117641455;1692998400;-1200475673;-620479012;1927397759;-1777351109;484226819;-971386698;164836849;231293598;-1621108768;1787174837;-1681008752;496054311;572383217;1043879076;838937156;837816933;1246908523;1248359781;-1480272376;-1720070777;1991066639;1344887069;12854692;2097389389;-1379826026;1013665279;-116638153;1921671201;1592331838;575362938;-1243623742;774984545;-759443481;-2053764457;636414829;1060845734;943206692;-931944229;-1192937760;1962646227;-1596163964;1193624713;1125700436;1698094902;-1701084831;-2058549058;1580535772;997689570;-2070416164;-66032823;1659564006;-1000061224;2037917981;707540419;143364775;-2028127076;1145797136;-661568656;-1970460389;-530671206;-457933797;1447415607;-672618482;-988527646;1618555527;-712726879;552628654;796195179;1217244157;1959966771;-49057918;-1210185554;703691174;568907337;-1551327847;1417356020;-1963136649;-320161288;268416215;-846567004;-2118709323;-962386938;-993598259;1015842075;510195837;-1278218200;-2118763414;974225121;-1443595873;1909719500;-432640835;350000851;1803775517;-1819578645;683439309;-1703490622;371729570;-1847646259;1677819279;-1750497045;-1702447405;984808284;-1599772364;-1895142857;1164264915;336588741;469567397;1164858118;-1473871183;168320398;-432019210;-980088934;1980490319;116263097;1738765297;-937939035;949265524;1305671611;-656127910;1127689750;51413005;107248668;-2133592824;755501295;595357513;1856305868;1223272929;-180820127;-554386004;-203784434;411899685;1863315614;23594945;-596092372;-1358447213;-1921555138;-907276618;-1057772428;1924119551;-1763566781;-1299084365;-721102876;-37433549;1540780033;227160594;1120888109;-1389660048;-122058481;987660242;1659752945;1253918152;2072255334;-1583746883;1288385654;-1367317489;-963809218;-729223377;1010363003;-2058528857;-51518662;1526933663;1565365881;308975484;-1014816239;-696904384;-1496563562;1362145420;1720458954;-313537727;-1156610763;-202702881;-844648455;673921488;1336811839;-1339077210;582117349;-1656779637;-1341733568;1326065470;1153119504;-323417365;-1741719617;1945724105;1506528545;-1710354470;-588326285;909254764;-1475045159;-404061275;-1585198915;1353018523;1217938691;-602976756;2033767726;-439663409;1654084289;607938566;-5619035;-698276922;-1495626750;-1658503606;33430707;327294955;1490574596;2118607431;1034632685;-1506916911;1080326544;-1414950521;-1888905012;756124058;-440093161;1452837946;-2032670562;-353483804;-2119668868;1634392336;-1194803440;653395574;-668224277;2137426406;1553074562;860478991;711173452;-1579555490;-1942373457;1441899173;-623185639;320736168;-793803857;1818886468;-1520210014;72854666;-1850544419;-645490841;752500961;821756979;1236071822;      };
      mti=624;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$0$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="datatable with training patterns";
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="maximum number of epochs to run";
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=256;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$23$;
       value=1;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="how to initialize the random numbers when the Init button is pressed";
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$24$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="random seed that is used at start of training -- if OldSeed is called";
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$25$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$26$;
      expr {
       expr="false";
       flags=;
       var_expr="false";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$27$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[6]$28$;
      expr {
       expr="network.train_time";
       flags=;
       var_expr="$#0#$.train_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
       flags=;
       var_expr="$#0#$ == OLD_SEED";
       vars {
       };
       var_names{ rnd_init;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[5]$29$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$29$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$27$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	 flags=;
	 var_expr="$#0#$.name << \" Weights Initialized\"";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$28$;
      expr {
       expr="network.train_time";
       flags=;
       var_expr="$#0#$.train_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$28$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$27$;
      path="train_mode";
      expr {
       expr="train_mode";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ train_mode;       };
       bad_vars{        };
      };
      update_after=0;
     };
     IfElse @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ no_prompts;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$27$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	 flags=;
	 var_expr="$#0#$.name << \" Weights Initialized\"";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$30$;
      expr {
       expr="network.epoch";
       flags=;
       var_expr="$#0#$.epoch";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][2]$31$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$27$;
	local_ctr_var=$30$;
	counter=Network::epoch;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	 flags=;
	 var_expr="$#0#$.cnt_err <= $#1#$";
	 vars {
	 };
	 var_names{ network;err_stopcrit;	 };
	 bad_vars{ 	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
       flags=;
       var_expr="$#0#$ < $#1#$";
       vars {
       };
       var_names{ epoch;max_epoch;       };
       bad_vars{        };
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$28$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$0$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$32$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$33$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$34$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$35$;
      counter=Network::trial;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$36$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$34$;
      local_ctr_var=$35$;
      counter=Network::trial;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$36$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$36$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     ProgramCall @[3] {
      desc=;
      flags=;
      target=.projects[0].programs[1]$37$;
      targ_ld_init="*CPTAXGen*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$38$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][3]$39$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       IfElse @[1] {
	desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
	flags=;
	cond {
	 expr="network.Compute_Weights_Test(trial+1)";
	 flags=;
	 var_expr="$#0#$.Compute_Weights_Test($#1#$+1)";
	 vars {
	 };
	 var_names{ network;trial;	 };
	 bad_vars{ 	 };
	};
	true_code {
	 name=;
	 el_typ=MethodCall;
	 el_def=0;
	 MethodCall @[0] {
	  desc="update the weight values based on changes computed by trial program";
	  flags=;
	  result_var=NULL;
	  obj=$34$;
	  method=Network::Compute_Weights;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$40$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$41$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$42$;
      order=PERMUTED;
      item_idx_list{ 36;0;2;43;48;4;1;13;47;44;10;39;46;22;8;21;12;5;14;38;18;42;41;28;31;29;16;26;24;6;34;11;3;19;27;37;35;25;20;45;17;33;9;30;32;40;7;15;23;49;      };
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[6] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
       flags=;
       var_expr="$#0#$.wt_update == Network::BATCH";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$34$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$34$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[8] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[0][8]$43$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[9] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$36$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$8$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$0$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="determines whether to update any network view displays after trial is completed";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$44$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$45$;
      counter=LeabraNetwork::phase_no;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$44$;
      local_ctr_var=$45$;
      counter=LeabraNetwork::phase_no;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$44$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=$19$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$44$;
	local_ctr_var=$45$;
	counter=LeabraNetwork::phase_no;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$44$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
       flags=;
       var_expr="$#0#$ < $#1#$.phase_max";
       vars {
       };
       var_names{ phase_no;network;       };
       bad_vars{        };
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$44$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[4] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[0][7]$46$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     NetUpdateView @[5] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$44$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$47$;
     };
    };
   };
   Program @[4] {
    name="LeabraSettle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$8$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$0$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=55;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="if true, will update network views at end of settling";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$48$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$49$;
      counter=Network::cycle;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$48$;
      local_ctr_var=$49$;
      counter=Network::cycle;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$48$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[0][6]$50$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$48$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
       flags=;
       var_expr="$#0#$.phase_no <= 1";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$51$;
	expr {
	 expr="network.min_cycles";
	 flags=;
	 var_expr="$#0#$.min_cycles";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$51$;
	expr {
	 expr="network.min_cycles_phase2";
	 flags=;
	 var_expr="$#0#$.min_cycles_phase2";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[0][5]$52$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$48$;
	local_ctr_var=$49$;
	counter=Network::cycle;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	 flags=;
	 var_expr="$#0#$ < $#1#$";
	 vars {
	 };
	 var_names{ cycle;min_cycles;	 };
	 bad_vars{ 	 };
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	 flags=;
	 var_expr="($#0#$.maxda < $#0#$.maxda_stopcrit) ||
 ($#0#$.trg_max_act > $#0#$.trg_max_act_stopcrit)";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
       flags=;
       var_expr="$#0#$ < $#1#$.cycle_max";
       vars {
       };
       var_names{ cycle;network;       };
       bad_vars{        };
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$48$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
       flags=;
       var_expr="$#0#$.phase == LeabraNetwork::MINUS_PHASE";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$48$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
       flags=;
       var_expr="$#0#$.phase_no == 1";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$48$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$48$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$53$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$8$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$54$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$54$;
      update_var=.projects[0].programs.gp[0][5].vars[0]$55$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$0$;
      network=$8$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="RewTarg";
	net_target=LAYER;
	layer_name="RewTarg";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$8$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$0$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="input datatable containing input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$56$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$57$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$57$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$57$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="act";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$8$;
      data=$32$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$32$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$58$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$59$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ trial_mon_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$59$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$59$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$60$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$59$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$60$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$61$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ trial_mon_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	 flags=;
	 var_expr="1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$8$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$8$;
      data=.projects[0].data.gp[1][1]$62$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$62$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$63$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$33$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$64$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$65$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ epoch_mon_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$65$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$65$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$66$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$65$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$64$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$66$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	 flags=;
	 var_expr="$#0#$.used.GetTotSecs()";
	 vars {
	 };
	 var_names{ epoch_timer;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	 flags=;
	 var_expr="\"epoch_time_tot\"";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	 flags=;
	 var_expr="-1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$66$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	 flags=;
	 var_expr="$#0#$.used.GetUsrSecs()";
	 vars {
	 };
	 var_names{ epoch_timer;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	 flags=;
	 var_expr="\"epoch_time_usr\"";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	 flags=;
	 var_expr="-1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$66$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[9] {
    name="SaveWeights";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
       flags=;
       var_expr="taMisc::dmem_proc > 0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$67$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	 flags=;
	 var_expr="$#0#$.batch";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	 flags=;
	 var_expr="2";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$68$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	 flags=;
	 var_expr="$#0#$.epoch";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	 flags=;
	 var_expr="4";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$69$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
       flags=;
       var_expr="$#0#$ + \".\" + batch_str + \"_\" + epoch_str";
       vars {
       };
       var_names{ tag;       };
       bad_vars{        };
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$70$;
      obj=.projects[0].programs.gp[0][9].args[0]$71$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	 flags=;
	 var_expr="\".wts.gz\"";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ final_tag;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ wts_subdir;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$71$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ fname;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	 flags=;
	 var_expr="Network::NET_FMT";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$72$;
   name="Browser";
   visible=1;
   m_is_root=0;
   m_is_proj_viewer=1;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$72$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="Network_0";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  m_data=$8$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  lay_disp_modes{ RewTarg=0;PVe=0;PVr=0;PVi=0;LVe=0;LVi=0;DA=0;Hidden=0;Input=1;Output=1;Matrix=0;SNrThal=0;PFC=1;	  };
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$73$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  display=0;
	  ordered_uvg_list{ r.wt;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=26: y=7: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	 };
	 GraphTableView @[1] {
	  m_data=$62$;
FloatTransform @*(.m_transform) {scale={x=0.649613: y=0.6496129: z=0.6496134: }: rotate={x=0.8604479: y=-0.5067047: z=-0.05377775: rot=0.2454511: }: translate={x=1.109841: y=0.9358078: z=-0.06408901: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[1][1].data[0]$74$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[1][1].data[1]$75$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=16: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[1][1].data[2]$76$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    fixed_range {fix_min=0: min=0.03732688: fix_max=0: max=0.2924317: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].data.gp[1][1].data[3]$77$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=2: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].data.gp[1][1].data[4]$78$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].data.gp[1][1].data[5]$79$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=17.5: fix_max=0: max=25.83333: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].data.gp[1][1].data[6]$80$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].data.gp[1][1].data[7]$81$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.649613: y=0.6496129: z=0.6496134: }: rotate={x=0.8604479: y=-0.5067047: z=-0.05377775: rot=0.2454511: }: translate={x=1.109841: y=0.9358078: z=-0.06408901: }: };
	  view_rows=10000;
	  view_range {min=0: max=255: };
	  display_on=1;
	  manip_ctrl_on=1;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=255: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=255: };
	   range {min=0: max=255: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=12: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=12: };
	   range {min=0: max=12: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	  };
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  graph_type=XY;
	  plot_style=LINE;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  color_mode=VALUE_COLOR;
	  negative_draw=0;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  label_spacing=-1;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$73$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  width=1;
	  depth=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GridTableView @[2] {
	  m_data=$32$;
FloatTransform @*(.m_transform) {scale={x=0.779668: y=0.779668: z=0.779668: }: rotate={x=1: y=0: z=0: rot=0.1187652: }: translate={x=1.070672: y=-0.3119916: z=-4.729297e-06: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[1][0].data[0]$82$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[1][0].data[1]$83$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[1][0].data[2]$84$;
	    m_transform=NULL;
	    name="trial";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[1][0].data[3]$85$;
	    m_transform=NULL;
	    name="trial_name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].data.gp[1][0].data[4]$86$;
	    m_transform=NULL;
	    name="group_name";
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=.projects[0].data.gp[1][0].data[5]$87$;
	    m_transform=NULL;
	    name="phase_no";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=.projects[0].data.gp[1][0].data[6]$88$;
	    m_transform=NULL;
	    name="minus_cycles";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=.projects[0].data.gp[1][0].data[7]$89$;
	    m_transform=NULL;
	    name="sse";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=.projects[0].data.gp[1][0].data[8]$90$;
	    m_transform=NULL;
	    name="ext_rew";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    m_data=.projects[0].data.gp[1][0].data[9]$91$;
	    m_transform=NULL;
	    name="Input_act";
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[10] {
	    m_data=.projects[0].data.gp[1][0].data[10]$92$;
	    m_transform=NULL;
	    name="Output_act";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[11] {
	    m_data=.projects[0].data.gp[1][0].data[11]$93$;
	    m_transform=NULL;
	    name="RewTar_act";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[12] {
	    m_data=.projects[0].data.gp[1][0].data[12]$94$;
	    m_transform=NULL;
	    name="PVe_act";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[13] {
	    m_data=.projects[0].data.gp[1][0].data[13]$95$;
	    m_transform=NULL;
	    name="PVr_act";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[14] {
	    m_data=.projects[0].data.gp[1][0].data[14]$96$;
	    m_transform=NULL;
	    name="PVi_act";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[15] {
	    m_data=.projects[0].data.gp[1][0].data[15]$97$;
	    m_transform=NULL;
	    name="DA_act";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[16] {
	    m_data=.projects[0].data.gp[1][0].data[16]$98$;
	    m_transform=NULL;
	    name="Matrix_act";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[17] {
	    m_data=.projects[0].data.gp[1][0].data[17]$99$;
	    m_transform=NULL;
	    name="SNrTha_act";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[18] {
	    m_data=.projects[0].data.gp[1][0].data[18]$100$;
	    m_transform=NULL;
	    name="PFC_act";
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[19] {
	    m_data=.projects[0].data.gp[1][0].data[19]$101$;
	    m_transform=NULL;
	    name="LVe_act";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[20] {
	    m_data=.projects[0].data.gp[1][0].data[20]$102$;
	    m_transform=NULL;
	    name="LVi_act";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[21] {
	    m_data=.projects[0].data.gp[1][0].data[21]$103$;
	    m_transform=NULL;
	    name="Hidden_act";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.779668: y=0.779668: z=0.779668: }: rotate={x=1: y=0: z=0: rot=0.1187652: }: translate={x=1.070672: y=-0.3119916: z=-4.729297e-06: }: };
	  view_rows=6;
	  view_range {min=0: max=-1: };
	  display_on=0;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=2: max=6: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$73$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=0.8697404: y=0.5564175: z=2.785391: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=3.112823;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="TrialOutputData_col_Hidden_act_Cluster";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=.projects[0].data.gp[2][0]$104$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][0].data[0]$105$;
	    m_transform=NULL;
	    name="X";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][0].data[1]$106$;
	    m_transform=NULL;
	    name="Y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[2][0].data[2]$107$;
	    m_transform=NULL;
	    name="Label";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=52: };
	  display_on=1;
	  manip_ctrl_on=1;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=1: max=13.43965: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=13.43965: };
	   range {min=0: max=13.43965: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y";
	   fixed_range {fix_min=1: min=0.2: fix_max=1: max=5.8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0.2: max=5.8: };
	   range {min=0.2: max=5.8: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Label";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	  };
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  graph_type=XY;
	  plot_style=LINE;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  color_mode=VALUE_COLOR;
	  negative_draw=0;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  label_spacing=-1;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$73$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  width=1;
	  depth=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.624621: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.637121;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="TrialOutputData_col_Hidden_act_PCA2dPrjn";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=.projects[0].data.gp[2][1]$108$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][1].data[0]$109$;
	    m_transform=NULL;
	    name="trial_name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][1].data[1]$110$;
	    m_transform=NULL;
	    name="x_prjn";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[2][1].data[2]$111$;
	    m_transform=NULL;
	    name="y_prjn";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=5: };
	  display_on=1;
	  manip_ctrl_on=1;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="x_prjn";
	   fixed_range {fix_min=0: min=-0.9537277: fix_max=0: max=0.8021953: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.9537277: max=0.8021953: };
	   range {min=-0.9537277: max=0.8021953: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="y_prjn";
	   fixed_range {fix_min=0: min=-0.3266466: fix_max=0: max=1.311232: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.3266466: max=1.311232: };
	   range {min=-0.3266466: max=1.311232: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="trial_name";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	  };
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  graph_type=XY;
	  plot_style=POINTS;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  color_mode=VALUE_COLOR;
	  negative_draw=0;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  label_spacing=-1;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$73$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  width=1;
	  depth=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.451592: y=0.445: z=1.652272: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.664772;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[3] {
       m_data=NULL;
       name="StdInputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$0$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[0][0].data[0]$112$;
	    m_transform=NULL;
	    name="Name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[0][0].data[1]$113$;
	    m_transform=NULL;
	    name="Input";
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[0][0].data[2]$114$;
	    m_transform=NULL;
	    name="Output";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[0][0].data[3]$115$;
	    m_transform=NULL;
	    name="RewTarg";
	    visible=1;
	    text_width=1;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=5;
	  view_range {min=45: max=49: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=3: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$73$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	 GridTableView @[1] {
	  m_data=$1$;
FloatTransform @*(.m_transform) {scale={x=0.33: y=0.33: z=0.33: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=1.13: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[0][1].data[0]$116$;
	    m_transform=NULL;
	    name="Input";
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[0][1].data[1]$117$;
	    m_transform=NULL;
	    name="Output";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[0][1].data[2]$118$;
	    m_transform=NULL;
	    name="RewTarg";
	    visible=1;
	    text_width=1;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.33: y=0.33: z=0.33: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=1.13: z=0: }: };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=2: };
	  width=3.3;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=1;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$73$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.582117: y=0.7139999: z=1.759859: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.769859;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_change_log=0;
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   name="Network_0";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    DaModUnitSpec @[0] {
     name="DaModUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$119$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: send_delta=1: i_thr=STD: };
     spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
     depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
     opt_thresh {send=0.1: delta=0.005: learn=-1: updt_wts=0: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {vm=0.3: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ compute_i;i_kwta_pt;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       compute_i=KWTA_INHIB;
       i_kwta_pt=0.25;
       gp_i_pt=0.2;
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: d_gain=0: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     compute_i=KWTA_AVG_INHIB;
     i_kwta_pt=0.6;
     gp_i_pt=0.2;
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: d_gain=0: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       wt_sig {gain=6: off=1.25: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EXT_REW_STAT;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=80;
	default_val=1;
	interpolate=0;
	cur_val=1;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=90;
	 step=-0.01;
	};
	SchedItem @[1] {
	 start_ctr=90;
	 start_val=0.1;
	 duration=1;
	 step=1;
	};
       };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     wt_sig {gain=6: off=1.25: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EXT_REW_STAT;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=80;
      default_val=1;
      interpolate=0;
      cur_val=1;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=90;
       step=-0.01;
      };
      SchedItem @[1] {
       start_ctr=90;
       start_val=0.1;
       duration=1;
       step=1;
      };
     };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp[0] {
     name="PFC_BG_Units";
     el_typ=DaModUnitSpec;
     el_def=0;
     DaModUnitSpec @[0] {
      name="PVUnits";
      desc=;
      unique{ g_bar;act;act_fun;dt;opt_thresh;      };
      children {
       name=;
       el_typ=DaModUnitSpec;
       el_def=0;
       DaModUnitSpec @[0] {
	name="LVUnits";
	desc=;
	unique{ 	};
	children {
	 name=;
	 el_typ=DaModUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_con_type=LeabraCon;
	bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[1]$120$: };
	sse_tol=0.5;
	act_fun=NOISY_LINEAR;
	act {thr=0.17: gain=220: nvar=0.01: avg_dt=0: send_delta=1: i_thr=STD: };
	spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
	depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
	opt_thresh {send=0.1: delta=0.005: learn=-1: updt_wts=0: phase_dif=0: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=1: range=1: scale=1: };
	v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
	dt {vm=0.05: net=0.7: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: };
	g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
	e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
	hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
	acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
	act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
	maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
	noise_type=NO_NOISE;
	noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=1;
	 cur_val=0;
	};
	da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
       };
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=$120$: };
      sse_tol=0.5;
      act_fun=NOISY_LINEAR;
      act {thr=0.17: gain=220: nvar=0.01: avg_dt=0: send_delta=1: i_thr=STD: };
      spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
      depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
      opt_thresh {send=0.1: delta=0.005: learn=-1: updt_wts=0: phase_dif=0: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
      dt {vm=0.05: net=0.7: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
     };
     DaModUnitSpec @[1] {
      name="DaUnits";
      desc=;
      unique{ act_range;clamp_range;act;      };
      children {
       name=;
       el_typ=DaModUnitSpec;
       el_def=0;
      };
      act_range {min=-2: max=2: range=4: scale=0.25: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[1].children[0]$121$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.25: gain=600: nvar=0.005: avg_dt=0: send_delta=1: i_thr=STD: };
      spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
      depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
      opt_thresh {send=0.1: delta=0.005: learn=0.01: updt_wts=1: phase_dif=0: };
      clamp_range {min=-2: max=2: range=4: scale=0.25: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.3: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
     };
     DaModUnitSpec @[2] {
      name="PFCUnits";
      desc=;
      unique{ g_bar;act_reg;dt;      };
      children {
       name=;
       el_typ=DaModUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[2].children[1]$122$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: send_delta=1: i_thr=STD: };
      spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
      depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
      opt_thresh {send=0.1: delta=0.005: learn=0.01: updt_wts=1: phase_dif=0: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.1: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=1: a=2: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
     };
     MatrixUnitSpec @[3] {
      name="MatrixUnits";
      desc=;
      unique{ bias_spec;g_bar;opt_thresh;      };
      children {
       name=;
       el_typ=MatrixUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=MatrixBiasSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[1].children[1]$123$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: send_delta=1: i_thr=STD: };
      spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
      depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
      opt_thresh {send=0.1: delta=0.005: learn=-1: updt_wts=0: phase_dif=0: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.3: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
      freeze_net=1;
     };
     DaModUnitSpec @[4] {
      name="SNrThalUnits";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=DaModUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=$119$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.25: gain=20: nvar=0.005: avg_dt=0.005: send_delta=1: i_thr=STD: };
      spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
      depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
      opt_thresh {send=0.1: delta=0.005: learn=0.01: updt_wts=1: phase_dif=0: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.1: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
     };
    };
    BaseSpec_Group @.gp[1] {
     name="PFC_BG_Cons";
     el_typ=LeabraConSpec;
     el_def=0;
     LeabraConSpec @[0] {
      name="LearnCons";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=PVConSpec;
       el_def=0;
       PVConSpec @[0] {
	name="PVi";
	desc=;
	unique{ lmix;rnd;wt_limits;wt_sig;lrate;lrate_sched;lrs_value;	};
	children {
	 name=;
	 el_typ=PVConSpec;
	 el_def=0;
	 PVConSpec @[0] {
	  name="PVr";
	  desc=;
	  unique{ lmix;rnd;wt_limits;wt_sig;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  wt_sig {gain=1: off=1: };
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  lmix {hebb=0: err=1: err_sb=0: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.1;
	  };
	 };
	 PVConSpec @[1] {
	  name="LVe";
	  desc=;
	  unique{ lrate;rnd;wt_limits;wt_sig;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	   PVConSpec @[0] {
	    name="LVi";
	    desc=;
	    unique{ lrate;rnd;wt_limits;wt_sig;lrate;lrate_sched;lrs_value;	    };
	    children {
	     name=;
	     el_typ=PVConSpec;
	     el_def=0;
	    };
	    rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	    inhib=0;
	    wt_scale {abs=1: rel=1: };
	    wt_scale_init {init=0: abs=1: rel=1: };
	    wt_sig {gain=1: off=1: };
	    lrate=0.001;
	    cur_lrate=0.001;
	    lrs_value=NO_LRS;
	    lrate_sched {
	     name=;
	     el_typ=SchedItem;
	     el_def=0;
	     last_ctr=-1;
	     default_val=1;
	     interpolate=0;
	     cur_val=0;
	    };
	    lmix {hebb=0: err=1: err_sb=0: };
	    savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	    rel_net_adapt {
	     on=0;
	     trg_fm_input=0.85;
	     trg_fm_output=0.15;
	     trg_lateral=0;
	     trg_sum=1;
	     tol_lg=0.05;
	     tol_sm=0.2;
	     rel_lrate=0.1;
	    };
	   };
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  wt_sig {gain=1: off=1: };
	  lrate=0.05;
	  cur_lrate=0.05;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  lmix {hebb=0: err=1: err_sb=0: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.1;
	  };
	 };
	};
	rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	wt_sig {gain=1: off=1: };
	lrate=0.01;
	cur_lrate=0.01;
	lrs_value=NO_LRS;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=0;
	 cur_val=0;
	};
	lmix {hebb=0: err=1: err_sb=0: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.1;
	};
       };
       LeabraBiasSpec @[1] {
	name="BgBias";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	};
	children {
	 name=;
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	 LeabraBiasSpec @[0] {
	  name="FixedBias";
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	  };
	  children {
	   name=;
	   el_typ=LeabraBiasSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  wt_sig {gain=6: off=1.25: };
	  lrate=0;
	  cur_lrate=0;
	  lrs_value=EXT_REW_STAT;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=80;
	   default_val=1;
	   interpolate=0;
	   cur_val=1;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=90;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=90;
	    start_val=0.1;
	    duration=1;
	    step=1;
	   };
	  };
	  lmix {hebb=0.001: err=0.999: err_sb=1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.1;
	  };
	  dwt_thresh=0.1;
	 };
	 MatrixBiasSpec @[1] {
	  name="MatrixBias";
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;	  };
	  children {
	   name=;
	   el_typ=MatrixBiasSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  wt_sig {gain=6: off=1.25: };
	  lrate=0;
	  cur_lrate=0;
	  lrs_value=EXT_REW_STAT;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=80;
	   default_val=1;
	   interpolate=0;
	   cur_val=1;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=90;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=90;
	    start_val=0.1;
	    duration=1;
	    step=1;
	   };
	  };
	  lmix {hebb=0.001: err=0.999: err_sb=1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.1;
	  };
	  dwt_thresh=0.1;
	  learn_rule=MAINT;
	 };
	};
	rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	wt_sig {gain=6: off=1.25: };
	lrate=0;
	cur_lrate=0;
	lrs_value=EXT_REW_STAT;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=80;
	 default_val=1;
	 interpolate=0;
	 cur_val=1;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=90;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=90;
	  start_val=0.1;
	  duration=1;
	  step=1;
	 };
	};
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.1;
	};
	dwt_thresh=0.1;
       };
       LeabraConSpec @[2] {
	name="ToPFC";
	desc=;
	unique{ lrate;rnd;lmix;	};
	children {
	 name=;
	 el_typ=LeabraConSpec;
	 el_def=0;
	 LeabraConSpec @[0] {
	  name="IntraPFC";
	  desc=;
	  unique{ wt_scale;	  };
	  children {
	   name=;
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0.5: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  wt_sig {gain=6: off=1.25: };
	  lrate=0;
	  cur_lrate=0.01;
	  lrs_value=EXT_REW_STAT;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=90;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=90;
	    start_val=0.1;
	    duration=1;
	    step=1;
	   };
	  };
	  lmix {hebb=0.001: err=0.999: err_sb=1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.1;
	  };
	 };
	 LeabraBiasSpec @[1] {
	  name="PFCBias";
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;	  };
	  children {
	   name=;
	   el_typ=LeabraBiasSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  wt_sig {gain=6: off=1.25: };
	  lrate=0;
	  cur_lrate=0;
	  lrs_value=EXT_REW_STAT;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=80;
	   default_val=1;
	   interpolate=0;
	   cur_val=1;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=90;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=90;
	    start_val=0.1;
	    duration=1;
	    step=1;
	   };
	  };
	  lmix {hebb=0.001: err=0.999: err_sb=1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.1;
	  };
	  dwt_thresh=0.1;
	 };
	};
	rnd {name="": type=UNIFORM: mean=0.5: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	wt_sig {gain=6: off=1.25: };
	lrate=0;
	cur_lrate=0;
	lrs_value=EXT_REW_STAT;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=80;
	 default_val=1;
	 interpolate=0;
	 cur_val=1;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=90;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=90;
	  start_val=0.1;
	  duration=1;
	  step=1;
	 };
	};
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.1;
	};
       };
       MatrixConSpec @[3] {
	name="MatrixCons";
	desc=;
	unique{ lmix;lrate;wt_limits;	};
	children {
	 name=;
	 el_typ=MatrixConSpec;
	 el_def=0;
	 MatrixConSpec @[0] {
	  name="MatrixFmPFC";
	  desc=;
	  unique{ wt_scale;wt_limits;	  };
	  children {
	   name=;
	   el_typ=MatrixConSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.2: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  wt_sig {gain=6: off=1.25: };
	  lrate=0.01;
	  cur_lrate=0.01;
	  lrs_value=EXT_REW_STAT;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=80;
	   default_val=1;
	   interpolate=0;
	   cur_val=1;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=90;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=90;
	    start_val=0.1;
	    duration=1;
	    step=1;
	   };
	  };
	  lmix {hebb=0: err=1: err_sb=1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.1;
	  };
	  learn_rule=MAINT;
	 };
	};
	rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	wt_sig {gain=6: off=1.25: };
	lrate=0.01;
	cur_lrate=0.01;
	lrs_value=EXT_REW_STAT;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=80;
	 default_val=1;
	 interpolate=0;
	 cur_val=1;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=90;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=90;
	  start_val=0.1;
	  duration=1;
	  step=1;
	 };
	};
	lmix {hebb=0: err=1: err_sb=1: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.1;
	};
	learn_rule=MAINT;
       };
      };
      rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      inhib=0;
      wt_scale {abs=1: rel=1: };
      wt_scale_init {init=0: abs=1: rel=1: };
      wt_sig {gain=6: off=1.25: };
      lrate=0.01;
      cur_lrate=0.01;
      lrs_value=EXT_REW_STAT;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=80;
       default_val=1;
       interpolate=0;
       cur_val=1;
       SchedItem @[0] {
	start_ctr=0;
	start_val=1;
	duration=90;
	step=-0.01;
       };
       SchedItem @[1] {
	start_ctr=90;
	start_val=0.1;
	duration=1;
	step=1;
       };
      };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.1;
      };
     };
     MarkerConSpec @[1] {
      name="MarkerCons";
      desc=;
      unique{ rnd;wt_limits;wt_scale;lrate;      };
      children {
       name=;
       el_typ=MarkerConSpec;
       el_def=0;
      };
      rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
      inhib=0;
      wt_scale {abs=1: rel=0: };
      wt_scale_init {init=0: abs=1: rel=1: };
      wt_sig {gain=6: off=1.25: };
      lrate=0;
      cur_lrate=0;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=0;
       cur_val=1;
      };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.1;
      };
     };
     LeabraConSpec @[2] {
      name="PFCSelfCon";
      desc=;
      unique{ lrate;rnd;wt_scale;      };
      children {
       name=;
       el_typ=LeabraConSpec;
       el_def=0;
      };
      rnd {name="": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      inhib=0;
      wt_scale {abs=1: rel=0.1: };
      wt_scale_init {init=0: abs=1: rel=1: };
      wt_sig {gain=6: off=1.25: };
      lrate=0;
      cur_lrate=0;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=0;
       cur_val=1;
      };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.1;
      };
     };
    };
    BaseSpec_Group @.gp[2] {
     name="PFC_BG_Layers";
     el_typ=ExtRewLayerSpec;
     el_def=0;
     ExtRewLayerSpec @[0] {
      name="PVeLayer";
      desc=;
      unique{ kwta;inhib_group;compute_i;i_kwta_pt;decay;      };
      children {
       name=;
       el_typ=ExtRewLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_AVG_INHIB;
      i_kwta_pt=0.9;
      gp_i_pt=0.2;
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: val_mult_lrn=0: clip_val=1: send_thr=0: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
      val_range {min=0: max=1: range=1: scale=1: };
      rew_type=OUT_ERR_REW;
      avg_rew {sub_avg=0: avg_dt=0.005: };
      out_err {err_tol=0.5: graded=0: no_off_err=0: seq_all_cor=0: };
      rew {err_val=0: norew_val=0.5: rew_val=1: };
     };
     PVrLayerSpec @[1] {
      name="PVrLayer";
      desc=;
      unique{ kwta;inhib_group;compute_i;i_kwta_pt;decay;      };
      children {
       name=;
       el_typ=PVrLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_AVG_INHIB;
      i_kwta_pt=0.9;
      gp_i_pt=0.2;
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: val_mult_lrn=0: clip_val=1: send_thr=0: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv_detect {thr_min=0.2: thr_max=0.8: };
     };
     PViLayerSpec @[2] {
      name="PViLayer";
      desc=;
      unique{ kwta;inhib_group;compute_i;i_kwta_pt;decay;      };
      children {
       name=;
       el_typ=PViLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_AVG_INHIB;
      i_kwta_pt=0.9;
      gp_i_pt=0.2;
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: val_mult_lrn=0: clip_val=1: send_thr=0: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv_detect {thr_min=0.2: thr_max=0.8: };
     };
     LVeLayerSpec @[3] {
      name="LVeLayer";
      desc=;
      unique{ kwta;inhib_group;compute_i;i_kwta_pt;decay;gp_kwta;      };
      children {
       name=;
       el_typ=LViLayerSpec;
       el_def=0;
       LViLayerSpec @[0] {
	name="LViLayer";
	desc=;
	unique{ kwta;compute_i;i_kwta_pt;decay;	};
	children {
	 name=;
	 el_typ=LViLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	compute_i=KWTA_AVG_INHIB;
	i_kwta_pt=0.9;
	gp_i_pt=0.2;
	tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	clamp {hard=1: gain=0.5: d_gain=0: };
	decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
	net_rescale {on=0: max_net=0.6: net_extra=0.2: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.1;
	};
	scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: val_mult_lrn=0: clip_val=1: send_thr=0: };
	unit_range {min=0: max=1: range=1: scale=1: };
	bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
	val_range {min=0: max=1: range=1: scale=1: };
	lv {delta_on_sum=0: use_actual_er=0: syn_dep=0: };
       };
      };
      inhib_group=ENTIRE_LAYER;
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_AVG_INHIB;
      i_kwta_pt=0.9;
      gp_i_pt=0.2;
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: val_mult_lrn=0: clip_val=1: send_thr=0: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      lv {delta_on_sum=0: use_actual_er=0: syn_dep=0: };
     };
     PVLVDaLayerSpec @[4] {
      name="DALayer";
      desc=;
      unique{ decay;kwta;inhib_group;compute_i;i_kwta_pt;      };
      children {
       name=;
       el_typ=PVLVDaLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_INHIB;
      i_kwta_pt=0.25;
      gp_i_pt=0.2;
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      da {da_gain=2: tonic_da=0: use_actual_er=0: syn_dep=0: min_lvi=0.1: };
     };
     PFCLayerSpec @[5] {
      name="PFCLayer";
      desc=;
      unique{ gp_kwta;inhib_group;compute_i;i_kwta_pt;decay;      };
      children {
       name=;
       el_typ=PFCLayerSpec;
       el_def=0;
      };
      inhib_group=UNIT_GROUPS;
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_AVG_INHIB;
      i_kwta_pt=0.6;
      gp_i_pt=0.2;
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=0: phase=0: phase2=0.1: clamp_phase2=0: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      gate {off_accom=0: updt_reset_sd=1: allow_clamp=0: };
     };
     MatrixLayerSpec @[6] {
      name="MatrixLayer";
      desc=;
      unique{ decay;      };
      children {
       name=;
       el_typ=MatrixLayerSpec;
       el_def=0;
      };
      inhib_group=UNIT_GROUPS;
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_INHIB;
      i_kwta_pt=0.25;
      gp_i_pt=0.2;
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      bg_type=MAINT;
      matrix {neg_da_bl=0.0002: neg_gain=1.5: perf_gain=0: no_snr_mod=0: };
      contrast {gain=1: go_p=0.5: go_n=0.5: nogo_p=0.5: nogo_n=0.5: };
      rnd_go {avgrew=0.9: ucond_p=0.0001: ucond_da=1: nogo_thr=50: nogo_p=0.1: nogo_da=10: };
      err_rnd_go {on=1: min_cor=5: min_errs=1: err_p=1: gain=0.2: if_go_p=0: err_da=10: };
      avgda_rnd_go {on=1: avgda_p=0.1: gain=0.5: avgda_thr=0.1: nogo_thr=10: avgda_da=10: avgda_dt=0.005: };
     };
     SNrThalLayerSpec @[7] {
      name="SNrThalLayer";
      desc=;
      unique{ decay;kwta;tie_brk;inhib_group;compute_i;i_kwta_pt;      };
      children {
       name=;
       el_typ=SNrThalLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      kwta {k_from=USE_PCT: k=12: pct=0.75: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      compute_i=KWTA_AVG_INHIB;
      i_kwta_pt=0.6;
      gp_i_pt=0.2;
      tie_brk {on=1: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.5: d_gain=0: };
      decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.1;
      };
      snrthal {avg_net_dt=0.005: go_thr=0.1: rnd_go_inc=0.2: };
     };
    };
    BaseSpec_Group @.gp[3] {
     name="PFC_BG_Prjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjn";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
     };
     OneToOnePrjnSpec @[1] {
      name="OneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     GpOneToOnePrjnSpec @[2] {
      name="GpOneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     UniformRndPrjnSpec @[3] {
      name="ToPFC";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      p_con=0.4;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name="RndSeed_1";
       seed{ -571267749;-1914046684;776551021;-1264122686;1076974698;427490194;-640449841;-1790540648;-113417788;64616625;-1464370846;155233716;-1241452241;-248328127;161760419;1033148063;-1261328501;1021128894;-1307852329;127834128;-1570549476;-739239689;1259653445;1408784467;538455133;-1378868564;921163852;-1124807434;242027580;1303755234;1143215018;509808808;-410053139;-1673641093;1250671610;87313743;-427857779;482355734;31684450;1830461172;-56675276;1493710395;-280584862;-1146063878;316678746;1477796472;-1714165457;-1564680646;766640136;1033714045;768676220;-703191248;1010313226;1680111616;-1730664938;1258713941;1493202588;2074049028;1881558700;-412897619;942928927;1428635098;-182974301;782326672;-927853627;700609238;-182319006;-110069713;1889728323;-1600651326;-416149169;485418005;-1311753216;1614441270;1158688160;-1888169059;-1918682516;510126038;-90636066;-1720913850;2024006374;534463;2077981654;-1542310652;1687867312;-1092457331;355328219;786216803;828401275;943797710;2118241844;-698274333;-1349260160;2061625305;266342645;101509975;662593475;1979340652;1226712940;-307149497;-242042508;-1126297175;916917434;336895896;-457212744;180218448;1076790372;1968322122;-2078798824;-912005734;-1309825084;2047904981;94298121;1251130874;-1874030477;-1335096397;568696071;428603933;-347131978;2129484387;1110057952;-448022172;1055157794;1504994388;-260773185;-987161288;-1227027796;560790542;-595965448;854563852;1182763697;70786138;-1954892406;-1483461896;-945083507;1715079115;939521127;-315458157;-1185843375;-1125186411;-1611612548;899737477;75171367;942806909;287966723;-2015695494;79653717;455977594;441254180;1386156662;950969700;-984218277;-1213494936;-2041828765;-1417380524;1976673051;-1554251384;332315921;577941105;-2005181227;1497640474;1630207955;340242092;1686765004;1998784207;1044251565;-1857835287;208733394;-769536636;475821553;192758262;1965982623;-1147450150;-1833493401;879063599;6089182;432486343;-241607534;1754260958;1362553046;-1936802563;999869924;453491112;168395241;-336519996;-115686814;1382077941;709465876;-1296040771;-310048853;109585490;1912762208;189279162;1517345581;664607051;-1889184953;-1857060963;-463383857;-1985088691;-1362941430;1104177900;-1493072271;1963230360;-207678261;1028226043;1998948435;149623184;450769501;-972746344;2107614684;-593433017;869745752;-100656980;1436120784;144196907;-787195543;-532385255;926480846;-629620871;-2020937778;1578986183;1374875436;-1940344490;-1601608426;2041972544;1067227077;330667906;190260485;-2120578935;-1307298119;1582432566;-746324999;1196037499;13861684;-458247735;-2085219573;-920678665;-741480497;-1316418826;-972677073;841931348;-1565687152;828949550;-974317906;-1225750893;-538720736;-1308807241;237276183;28122068;2109342830;-1453940124;-2119073580;845758305;-10756000;-1061784933;-262214107;-443607015;1611393396;-1126871616;1052064632;-478776012;-381125514;-1435011467;-1888734590;2107104638;-837895830;-1248856818;-1450928914;-810927110;1222258677;-488969440;1625825087;-208826983;1488694629;1243686841;917274827;-320223289;-1176741696;-490464569;1365815486;1618301616;-1419150094;818448142;1199697792;142946931;-1487986875;100029958;1400073131;-840276868;-864803082;-199664396;-1055678730;2066468417;-184116634;-966092521;-2012358133;2118816887;-1067634657;331488149;680488365;1587434260;-1934807178;289974962;-467854251;1655803095;-1553885524;1024987407;-1896878755;1492828448;-1048572611;790085125;121447657;-1058837835;-106571087;749492381;-54915141;1765179759;-1527615356;1937910644;-21237855;1853066069;672206237;-645402699;1642455342;-850523157;-1661026768;1959145597;244113958;-1807248811;-687864502;-562480015;1086199314;-721227783;1408459814;322416237;1136696024;247766974;690230622;-1310630387;1444957546;-264570949;816873118;-99405580;-1035297038;-1482372499;1741504744;1181657543;737758352;-1844841170;1131578461;1647982773;1992304692;494881787;269676001;-2070133613;-843622537;1705593091;-371758366;-1753640656;233216201;61976728;-1628855741;-395022261;-1976746724;1772182542;-558650099;-719636106;445213909;1970597423;-288302605;-1083304527;-657132594;-489761751;-1109969257;1236831117;440846651;671744689;630435395;-1646041313;-7943201;-616308698;-1937150;-813880059;1413858453;-953568217;14342142;1623573031;682094994;1028884716;2013522296;1768017428;595874364;-1879435333;1540788744;-1682347990;-1733580268;-1599307457;-1990754280;613105073;1384263910;487973716;-1364305973;-1556231350;-1595674367;49392064;529943606;1578356449;-238018697;1827760519;185322897;2134405699;-1579106019;-1977003816;-583774054;-1211373813;-84586954;40922366;-999546956;-401800788;942728720;1247992153;-1247410304;149398928;-1446397417;-476597298;-115718904;-428219981;-785114575;1333853629;1273954879;944126825;-2127961485;-120650904;631222247;-1816812628;527313915;1787657218;-1627768750;-1140120114;-1562168091;-1604997419;-1420524664;146604022;-2111480907;2125750094;-1553206568;1026008451;-520642961;885279276;-701434837;-1659715714;1077829506;-311558378;-470836939;980509330;994796418;-1850364003;-2036167088;-2094431421;-1431976041;1941573221;247343855;1971983477;394367319;-1142234746;-905421830;1239657645;-249780234;2039039946;1151455523;2087397683;-2023809005;-1279535628;-1104871080;1632118788;517713912;1066798016;1236047385;-1451875090;-936854630;-347168675;1196989472;1029519674;-1070854899;2019979783;-561997650;-1155294299;-1593306475;1589997612;-843732011;479399405;-1566029456;1488698191;280303134;-1810086463;1979890051;1040821129;-42714041;380287316;1834898850;-934912586;-1503929842;-2022772381;-2076136583;-1889316282;1519319564;867700092;-1757129110;-1712055923;1111367836;444086522;907759645;1215859900;-70472313;207539566;-1468691907;28521459;1704591787;1928221281;-1739226257;200653257;-1257765460;1777031025;750360459;-622734038;-986078323;-783135176;944210389;-49870065;1910109065;-1241974288;-1689789341;-945830655;1482634078;935510824;-1802544189;-2137318552;1106400963;2141085653;1246544452;1193593129;-138820872;-325490413;1338343938;1837827078;-1204031051;-231282690;-2038575017;-189066930;1127767149;957221807;1518507358;2129462171;1304795537;1530266293;2062916665;-173622706;-1760348471;1136026083;1960591306;-1306907762;1208533840;-168230738;-432737027;610265643;1426079943;-477080191;1053516237;1894019050;-2063887307;-1212809871;-887323196;1598520452;1084735516;1039598336;-625949032;-1647737702;-1209051505;-1400011401;1217702197;-2048493305;1524403332;80711098;723388502;-1404840939;-1663812192;-1347967834;864325799;-1783172651;377393378;-518306468;1256543915;-775764290;493433783;1644762434;957518310;1772431330;1112001148;914111594;1869846760;733928554;1815525370;-2042630172;-2127822967;-1751069812;-445253377;147628873;-1809339508;-217159265;-688624257;338893953;-884549599;799849958;969538234;606694101;-1928332071;2064507139;1722987014;1009980959;-1012957635;793598448;-1884495858;53346316;392012621;       };
       mti=16;
      };
     };
     OneToOnePrjnSpec @[4] {
      name="PFCSelf";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     GpRndTesselPrjnSpec @[5] {
      name="IntraPFC";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=GpRndTesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      recv_gp_off {x=0: y=0: };
      recv_gp_n {x=-1: y=1: };
      recv_gp_skip {x=1: y=1: };
      recv_gp_group {x=1: y=1: };
      send_gp_scale {x=1: y=1: };
      send_gp_border {x=0: y=0: };
      send_gp_offs {
       name=;
       el_typ=GpTessEl;
       el_def=0;
       GpTessEl @[0] {
	send_gp_off {x=0: y=1: };
	p_con=0.4;
       };
      };
      wrap=0;
      def_p_con=0.4;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name="RndSeed_2";
       seed{ -571267749;-1914046684;776551021;-1264122686;1076974698;427490194;-640449841;-1790540648;-113417788;64616625;-1464370846;155233716;-1241452241;-248328127;161760419;1033148063;-1261328501;1021128894;-1307852329;127834128;-1570549476;-739239689;1259653445;1408784467;538455133;-1378868564;921163852;-1124807434;242027580;1303755234;1143215018;509808808;-410053139;-1673641093;1250671610;87313743;-427857779;482355734;31684450;1830461172;-56675276;1493710395;-280584862;-1146063878;316678746;1477796472;-1714165457;-1564680646;766640136;1033714045;768676220;-703191248;1010313226;1680111616;-1730664938;1258713941;1493202588;2074049028;1881558700;-412897619;942928927;1428635098;-182974301;782326672;-927853627;700609238;-182319006;-110069713;1889728323;-1600651326;-416149169;485418005;-1311753216;1614441270;1158688160;-1888169059;-1918682516;510126038;-90636066;-1720913850;2024006374;534463;2077981654;-1542310652;1687867312;-1092457331;355328219;786216803;828401275;943797710;2118241844;-698274333;-1349260160;2061625305;266342645;101509975;662593475;1979340652;1226712940;-307149497;-242042508;-1126297175;916917434;336895896;-457212744;180218448;1076790372;1968322122;-2078798824;-912005734;-1309825084;2047904981;94298121;1251130874;-1874030477;-1335096397;568696071;428603933;-347131978;2129484387;1110057952;-448022172;1055157794;1504994388;-260773185;-987161288;-1227027796;560790542;-595965448;854563852;1182763697;70786138;-1954892406;-1483461896;-945083507;1715079115;939521127;-315458157;-1185843375;-1125186411;-1611612548;899737477;75171367;942806909;287966723;-2015695494;79653717;455977594;441254180;1386156662;950969700;-984218277;-1213494936;-2041828765;-1417380524;1976673051;-1554251384;332315921;577941105;-2005181227;1497640474;1630207955;340242092;1686765004;1998784207;1044251565;-1857835287;208733394;-769536636;475821553;192758262;1965982623;-1147450150;-1833493401;879063599;6089182;432486343;-241607534;1754260958;1362553046;-1936802563;999869924;453491112;168395241;-336519996;-115686814;1382077941;709465876;-1296040771;-310048853;109585490;1912762208;189279162;1517345581;664607051;-1889184953;-1857060963;-463383857;-1985088691;-1362941430;1104177900;-1493072271;1963230360;-207678261;1028226043;1998948435;149623184;450769501;-972746344;2107614684;-593433017;869745752;-100656980;1436120784;144196907;-787195543;-532385255;926480846;-629620871;-2020937778;1578986183;1374875436;-1940344490;-1601608426;2041972544;1067227077;330667906;190260485;-2120578935;-1307298119;1582432566;-746324999;1196037499;13861684;-458247735;-2085219573;-920678665;-741480497;-1316418826;-972677073;841931348;-1565687152;828949550;-974317906;-1225750893;-538720736;-1308807241;237276183;28122068;2109342830;-1453940124;-2119073580;845758305;-10756000;-1061784933;-262214107;-443607015;1611393396;-1126871616;1052064632;-478776012;-381125514;-1435011467;-1888734590;2107104638;-837895830;-1248856818;-1450928914;-810927110;1222258677;-488969440;1625825087;-208826983;1488694629;1243686841;917274827;-320223289;-1176741696;-490464569;1365815486;1618301616;-1419150094;818448142;1199697792;142946931;-1487986875;100029958;1400073131;-840276868;-864803082;-199664396;-1055678730;2066468417;-184116634;-966092521;-2012358133;2118816887;-1067634657;331488149;680488365;1587434260;-1934807178;289974962;-467854251;1655803095;-1553885524;1024987407;-1896878755;1492828448;-1048572611;790085125;121447657;-1058837835;-106571087;749492381;-54915141;1765179759;-1527615356;1937910644;-21237855;1853066069;672206237;-645402699;1642455342;-850523157;-1661026768;1959145597;244113958;-1807248811;-687864502;-562480015;1086199314;-721227783;1408459814;322416237;1136696024;247766974;690230622;-1310630387;1444957546;-264570949;816873118;-99405580;-1035297038;-1482372499;1741504744;1181657543;737758352;-1844841170;1131578461;1647982773;1992304692;494881787;269676001;-2070133613;-843622537;1705593091;-371758366;-1753640656;233216201;61976728;-1628855741;-395022261;-1976746724;1772182542;-558650099;-719636106;445213909;1970597423;-288302605;-1083304527;-657132594;-489761751;-1109969257;1236831117;440846651;671744689;630435395;-1646041313;-7943201;-616308698;-1937150;-813880059;1413858453;-953568217;14342142;1623573031;682094994;1028884716;2013522296;1768017428;595874364;-1879435333;1540788744;-1682347990;-1733580268;-1599307457;-1990754280;613105073;1384263910;487973716;-1364305973;-1556231350;-1595674367;49392064;529943606;1578356449;-238018697;1827760519;185322897;2134405699;-1579106019;-1977003816;-583774054;-1211373813;-84586954;40922366;-999546956;-401800788;942728720;1247992153;-1247410304;149398928;-1446397417;-476597298;-115718904;-428219981;-785114575;1333853629;1273954879;944126825;-2127961485;-120650904;631222247;-1816812628;527313915;1787657218;-1627768750;-1140120114;-1562168091;-1604997419;-1420524664;146604022;-2111480907;2125750094;-1553206568;1026008451;-520642961;885279276;-701434837;-1659715714;1077829506;-311558378;-470836939;980509330;994796418;-1850364003;-2036167088;-2094431421;-1431976041;1941573221;247343855;1971983477;394367319;-1142234746;-905421830;1239657645;-249780234;2039039946;1151455523;2087397683;-2023809005;-1279535628;-1104871080;1632118788;517713912;1066798016;1236047385;-1451875090;-936854630;-347168675;1196989472;1029519674;-1070854899;2019979783;-561997650;-1155294299;-1593306475;1589997612;-843732011;479399405;-1566029456;1488698191;280303134;-1810086463;1979890051;1040821129;-42714041;380287316;1834898850;-934912586;-1503929842;-2022772381;-2076136583;-1889316282;1519319564;867700092;-1757129110;-1712055923;1111367836;444086522;907759645;1215859900;-70472313;207539566;-1468691907;28521459;1704591787;1928221281;-1739226257;200653257;-1257765460;1777031025;750360459;-622734038;-986078323;-783135176;944210389;-49870065;1910109065;-1241974288;-1689789341;-945830655;1482634078;935510824;-1802544189;-2137318552;1106400963;2141085653;1246544452;1193593129;-138820872;-325490413;1338343938;1837827078;-1204031051;-231282690;-2038575017;-189066930;1127767149;957221807;1518507358;2129462171;1304795537;1530266293;2062916665;-173622706;-1760348471;1136026083;1960591306;-1306907762;1208533840;-168230738;-432737027;610265643;1426079943;-477080191;1053516237;1894019050;-2063887307;-1212809871;-887323196;1598520452;1084735516;1039598336;-625949032;-1647737702;-1209051505;-1400011401;1217702197;-2048493305;1524403332;80711098;723388502;-1404840939;-1663812192;-1347967834;864325799;-1783172651;377393378;-518306468;1256543915;-775764290;493433783;1644762434;957518310;1772431330;1112001148;914111594;1869846760;733928554;1815525370;-2042630172;-2127822967;-1751069812;-445253377;147628873;-1809339508;-217159265;-688624257;338893953;-884549599;799849958;969538234;606694101;-1928332071;2064507139;1722987014;1009980959;-1012957635;793598448;-1884495858;53346316;392012621;       };
       mti=16;
      };
     };
     TesselPrjnSpec @[6] {
      name="Input_PFC";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=1: y=1: };
      wrap=1;
      send_scale {x=1: y=1: };
      send_border {x=0: y=0: };
      send_offs {
       name=;
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	send_off {x=0: y=0: };
	wt_val=1;
       };
      };
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="RewTarg";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=6: z=0: };
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs[0]$124$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="rew_targ";
     sse=0;
     icon_value=0;
     netin {avg=0: max=0: max_i=-1: };
     i_thrs {avg=0: max=0: max_i=-1: };
     acts {avg=0: max=0: max_i=0: };
     acts_p {avg=0: max=0: max_i=0: };
     acts_m {avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {avg=0: max=0: max_i=-1: };
     adapt_i {avg_avg=1: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$125$: };
     stm_gain=0.5;
     hard_clamped=1;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="PVe";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_RewTarg";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$126$;
       spec {type=OneToOnePrjnSpec: spec=.projects[0].networks[0].specs.gp[3][1]$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=.projects[0].networks[0].specs.gp[1][1]$128$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[9]$129$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[3].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs.gp[0][0]$130$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="T";
     sse=0;
     icon_value=0;
     netin {avg=0: max=0: max_i=-1: };
     i_thrs {avg=0: max=0: max_i=-1: };
     acts {avg=0.3166667: max=0.95: max_i=2: };
     acts_p {avg=0.3166667: max=0.95: max_i=2: };
     acts_m {avg=0.3166667: max=0.95: max_i=2: };
     phase_dif_ratio=1;
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.9: gp_g_i=0: g_i_orig=0.9: };
     un_g_i {avg=0: max=0: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     spec {type=ExtRewLayerSpec: spec=.projects[0].networks[0].specs.gp[2][0]$131$: };
     stm_gain=0.5;
     hard_clamped=1;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="PVr";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=4: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVe";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$132$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[6]$133$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=1;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[8]$134$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs.gp[3][0]$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[0].children[0]$136$: };
       recv_idx=2;
       send_idx=6;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_PFC";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[12]$137$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$136$: };
       recv_idx=3;
       send_idx=6;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[4].projections[2];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[5].projections[2];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[6].projections[3];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=$130$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="T";
     sse=0;
     icon_value=0;
     netin {avg=0.1915943: max=0.5320144: max_i=2: };
     i_thrs {avg=8.162415: max=23.2236: max_i=2: };
     acts {avg=0.2841477: max=0.843178: max_i=2: };
     acts_p {avg=0.2841263: max=0.8430688: max_i=2: };
     acts_m {avg=0.2841403: max=0.8431359: max_i=2: };
     phase_dif_ratio=1.000049;
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=23.2236: k1_ithr=3.142018: ithr_r=2.000304: ithr_diff=0.8647059: tie_brk=0: };
     i_val {kwta=21.21544: g_i=21.21544: gp_g_i=0: g_i_orig=21.21544: };
     un_g_i {avg=21.21544: max=21.21544: max_i=0: };
     adapt_i {avg_avg=0.3183472: i_kwta_pt=1.799999: g_bar_i=1: g_bar_l=0.1: };
     spec {type=PVrLayerSpec: spec=.projects[0].networks[0].specs.gp[2][1]$138$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[3] {
     name="PVi";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=2: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVe";
       from_type=CUSTOM;
       from=$132$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$133$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=1;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=$134$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[0]$139$: };
       recv_idx=2;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_PFC";
       from_type=CUSTOM;
       from=$137$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$139$: };
       recv_idx=3;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[4].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[5].projections[0];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[6].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=$130$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="T";
     sse=0;
     icon_value=0;
     netin {avg=0.1810523: max=0.5142243: max_i=2: };
     i_thrs {avg=7.72492: max=22.48531: max_i=2: };
     acts {avg=0.2845464: max=0.8462894: max_i=2: };
     acts_p {avg=0.2845276: max=0.8462167: max_i=2: };
     acts_m {avg=0.2845382: max=0.8462549: max_i=2: };
     phase_dif_ratio=1.000037;
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=22.48531: k1_ithr=2.804789: ithr_r=2.081534: ithr_diff=0.8752613: tie_brk=0: };
     i_val {kwta=20.51726: g_i=20.51726: gp_g_i=0: g_i_orig=20.51726: };
     un_g_i {avg=20.51726: max=20.51726: max_i=0: };
     adapt_i {avg_avg=0.3173498: i_kwta_pt=1.799999: g_bar_i=1: g_bar_l=0.1: };
     spec {type=PViLayerSpec: spec=.projects[0].networks[0].specs.gp[2][2]$140$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[4] {
     name="LVe";
     flags=;
     layer_type=HIDDEN;
     pos {x=9: y=0: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=4: y=1: n_not_xy=0: n=4: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVi";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[3]$141$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$133$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[2]$142$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=2;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=$134$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[0].children[1]$143$: };
       recv_idx=3;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_PFC";
       from_type=CUSTOM;
       from=$137$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$143$: };
       recv_idx=4;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[1];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs.gp[0][0].children[0]$144$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="T";
     sse=0;
     icon_value=0;
     netin {avg=0.1093079: max=0.1814706: max_i=3: };
     i_thrs {avg=4.747528: max=7.431033: max_i=3: };
     acts {avg=0.3032652: max=0.7326383: max_i=3: };
     acts_p {avg=0.3032644: max=0.7326591: max_i=3: };
     acts_m {avg=0.3032568: max=0.7327006: max_i=3: };
     phase_dif_ratio=0.999975;
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=7.431033: k1_ithr=3.853025: ithr_r=0.6568062: ithr_diff=0.4814953: tie_brk=0: };
     i_val {kwta=7.073232: g_i=7.073232: gp_g_i=0: g_i_orig=7.073232: };
     un_g_i {avg=7.073232: max=7.073232: max_i=0: };
     adapt_i {avg_avg=0.3204049: i_kwta_pt=1.799999: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LVeLayerSpec: spec=.projects[0].networks[0].specs.gp[2][3]$145$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[5] {
     name="LVi";
     flags=;
     layer_type=HIDDEN;
     pos {x=9: y=2: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=4: y=1: n_not_xy=0: n=4: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVi";
       from_type=CUSTOM;
       from=$141$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$133$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=$142$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=$134$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[0].children[1].children[0]$146$: };
       recv_idx=3;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_PFC";
       from_type=CUSTOM;
       from=$137$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$146$: };
       recv_idx=4;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[2];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=$144$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="T";
     sse=0;
     icon_value=0;
     netin {avg=0.0934649: max=0.1429186: max_i=3: };
     i_thrs {avg=4.090044: max=5.831123: max_i=3: };
     acts {avg=0.3070412: max=0.7119283: max_i=3: };
     acts_p {avg=0.3070172: max=0.7119456: max_i=3: };
     acts_m {avg=0.3069607: max=0.7119872: max_i=3: };
     phase_dif_ratio=0.9998159;
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=5.831123: k1_ithr=3.509685: ithr_r=0.5076834: ithr_diff=0.3981117: tie_brk=0: };
     i_val {kwta=5.598979: g_i=5.598979: gp_g_i=0: g_i_orig=5.598979: };
     un_g_i {avg=5.598979: max=5.598979: max_i=0: };
     adapt_i {avg_avg=0.3242548: i_kwta_pt=1.799999: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LViLayerSpec: spec=.projects[0].networks[0].specs.gp[2][3].children[0]$147$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[6] {
     name="DA";
     flags=;
     layer_type=HIDDEN;
     pos {x=6: y=4: z=0: };
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVi";
       from_type=CUSTOM;
       from=$141$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_LVe";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[4]$148$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_LVi";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[5]$149$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=$142$;
       spec {type=OneToOnePrjnSpec: spec=$127$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[3].projections[1];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[4].projections[1];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[0].layers[5].projections[1];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[0].layers[10].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs.gp[0][1]$150$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0: max=0: max_i=0: };
     i_thrs {avg=0: max=0: max_i=0: };
     acts {avg=9.50098e-05: max=9.50098e-05: max_i=0: };
     acts_p {avg=0.005196929: max=0.005196929: max_i=0: };
     acts_m {avg=-0.0001046062: max=-0.0001046062: max_i=0: };
     phase_dif_ratio=-0.02012846;
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {avg=0: max=0: max_i=0: };
     adapt_i {avg_avg=1: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     spec {type=PVLVDaLayerSpec: spec=.projects[0].networks[0].specs.gp[2][4]$151$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=9.50098e-05;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[7] {
     name="Hidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=$134$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$152$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[3]$153$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=$129$;
       spec {type=FullPrjnSpec: spec=$152$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$153$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_PFC";
       from_type=CUSTOM;
       from=$137$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs.gp[1][0]$154$: };
       recv_idx=2;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[9].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=$124$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.3519962: max=0.4484524: max_i=8: };
     i_thrs {avg=2.502646: max=3.184284: max_i=8: };
     acts {avg=0.269026: max=0.8909201: max_i=8: };
     acts_p {avg=0.2300356: max=0.9165517: max_i=22: };
     acts_m {avg=0.2689015: max=0.8909075: max_i=8: };
     phase_dif_ratio=1.168956;
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=1: k_ithr=3.088985: k1_ithr=2.317487: ithr_r=0.2873593: ithr_diff=0.2497579: tie_brk=0: };
     i_val {kwta=2.780385: g_i=2.780385: gp_g_i=0: g_i_orig=2.780385: };
     un_g_i {avg=2.780385: max=2.780385: max_i=0: };
     adapt_i {avg_avg=0.2489574: i_kwta_pt=-0.2999998: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LeabraLayerSpec: spec=$125$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[8] {
     name="Input";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=2: };
     un_geom {x=3: y=2: n_not_xy=0: n=6: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=3: y=2: n_not_xy=0: n=6: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[2].projections[2];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[3].projections[2];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[0].layers[4].projections[3];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[0].layers[5].projections[3];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[0].layers[10].projections[3];
	    Projection_Group @. = [6] = LeabraPrjn .projects[0].networks[0].layers[12].projections[2];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=3: y=2: n_not_xy=0: n=6: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=$124$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="C";
     sse=0;
     icon_value=0;
     netin {avg=0: max=0: max_i=-1: };
     i_thrs {avg=0: max=0: max_i=-1: };
     acts {avg=0.1583333: max=0.95: max_i=2: };
     acts_p {avg=0.1583333: max=0.95: max_i=1: };
     acts_m {avg=0.1583333: max=0.95: max_i=2: };
     phase_dif_ratio=1;
     kwta {k=1: pct=0.1666667: pct_c=0.8333333: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {avg=0: max=0: max_i=-1: };
     adapt_i {avg_avg=0.1666667: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[0]$155$: };
     stm_gain=0.5;
     hard_clamped=1;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[9] {
     name="Output";
     flags=;
     layer_type=TARGET;
     pos {x=1: y=4: z=2: };
     un_geom {x=2: y=1: n_not_xy=0: n=2: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=2: y=1: n_not_xy=0: n=2: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[7]$156$;
       spec {type=FullPrjnSpec: spec=$152$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$153$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=2: y=1: n_not_xy=0: n=2: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=$124$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="N";
     sse=0;
     icon_value=0;
     netin {avg=0.2450752: max=0.2954974: max_i=0: };
     i_thrs {avg=1.719481: max=2.057822: max_i=0: };
     acts {avg=0.475: max=0.95: max_i=0: };
     acts_p {avg=0.475: max=0.95: max_i=0: };
     acts_m {avg=0.4727879: max=0.945049: max_i=0: };
     phase_dif_ratio=0.9953429;
     kwta {k=1: pct=0.5: pct_c=0.5: adth_k=1: k_ithr=2.057822: k1_ithr=1.381141: ithr_r=0.3987379: ithr_diff=0.3288334: tie_brk=0: };
     i_val {kwta=1.550311: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {avg=1.550311: max=1.550311: max_i=0: };
     adapt_i {avg_avg=0.4761762: i_kwta_pt=-0.6499997: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LeabraLayerSpec: spec=$155$: };
     stm_gain=0.5;
     hard_clamped=1;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[10] {
     name="Matrix";
     flags=;
     layer_type=HIDDEN;
     pos {x=7: y=0: z=1: };
     un_geom {x=4: y=7: n_not_xy=0: n=28: };
     unit_groups=1;
     gp_geom {x=4: y=1: n_not_xy=0: n=4: };
     gp_spc {x=1: y=1: };
     act_geom {x=19: y=7: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$133$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SNrThal";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[11]$157$;
       spec {type=GpOneToOnePrjnSpec: spec=.projects[0].networks[0].specs.gp[3][2]$158$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_PFC";
       from_type=CUSTOM;
       from=$137$;
       spec {type=GpOneToOnePrjnSpec: spec=$158$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MatrixConSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[3].children[0]$159$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=$134$;
       spec {type=FullPrjnSpec: spec=$135$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MatrixConSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[3]$160$: };
       recv_idx=3;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[11].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=7: n_not_xy=0: n=28: };
       units_lesioned=0;
       output_name="rew_targ";
       netin {avg=0.4643312: max=0.6305231: max_i=17: };
       i_thrs {avg=3.382485: max=4.628924: max_i=17: };
       acts {avg=0.1034904: max=0.3893484: max_i=17: };
       acts_p {avg=0.2012436: max=0.8802292: max_i=14: };
       acts_m {avg=0.1034904: max=0.3893484: max_i=17: };
       phase_dif_ratio=0.5142546;
       kwta {k=7: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.560399: k1_ithr=4.544121: ithr_r=0.003575601: ithr_diff=0.003569274: tie_brk=0: };
       i_val {kwta=4.548191: g_i=4.548191: gp_g_i=0: g_i_orig=4.548191: };
       un_g_i {avg=4.548189: max=4.548191: max_i=0: };
       adapt_i {avg_avg=0.1652262: i_kwta_pt=-0.6499997: g_bar_i=1: g_bar_l=0.1: };
       misc_state=2;
       misc_state1=3;
       misc_state2=1;
      };
      LeabraUnit_Group @.gp[1] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=7: n_not_xy=0: n=28: };
       units_lesioned=0;
       output_name="rew_targ";
       netin {avg=0.4068353: max=0.5658044: max_i=11: };
       i_thrs {avg=2.951265: max=4.143533: max_i=11: };
       acts {avg=0.1408853: max=0.8173196: max_i=11: };
       acts_p {avg=0.2041461: max=0.9136668: max_i=9: };
       acts_m {avg=0.1408853: max=0.8173196: max_i=11: };
       phase_dif_ratio=0.69012;
       kwta {k=7: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=3.760904: k1_ithr=3.739044: ithr_r=0.005829476: ithr_diff=0.005812464: tie_brk=0: };
       i_val {kwta=3.744509: g_i=3.744509: gp_g_i=0: g_i_orig=3.744509: };
       un_g_i {avg=3.744509: max=3.744509: max_i=0: };
       adapt_i {avg_avg=0.1799486: i_kwta_pt=-0.6499997: g_bar_i=1: g_bar_l=0.1: };
       misc_state=8;
       misc_state1=3;
       misc_state2=1;
      };
      LeabraUnit_Group @.gp[2] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=7: n_not_xy=0: n=28: };
       units_lesioned=0;
       output_name="rew_targ";
       netin {avg=0.4097161: max=0.5779831: max_i=24: };
       i_thrs {avg=2.972871: max=4.234873: max_i=24: };
       acts {avg=0.1744706: max=0.8914285: max_i=24: };
       acts_p {avg=0.1961931: max=0.9136381: max_i=18: };
       acts_m {avg=0.1745032: max=0.8913954: max_i=24: };
       phase_dif_ratio=0.8894464;
       kwta {k=7: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=3.643935: k1_ithr=3.598515: ithr_r=0.01254289: ithr_diff=0.01246453: tie_brk=0: };
       i_val {kwta=3.60987: g_i=3.60987: gp_g_i=0: g_i_orig=3.60987: };
       un_g_i {avg=3.609871: max=3.60987: max_i=0: };
       adapt_i {avg_avg=0.1973873: i_kwta_pt=-0.6499997: g_bar_i=1: g_bar_l=0.1: };
       misc_state=1;
       misc_state1=4;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=7: n_not_xy=0: n=28: };
       units_lesioned=0;
       output_name="rew_targ";
       netin {avg=0.4346669: max=0.5869014: max_i=15: };
       i_thrs {avg=3.160002: max=4.301761: max_i=15: };
       acts {avg=0.1762848: max=0.6951251: max_i=15: };
       acts_p {avg=0.1781849: max=0.835273: max_i=18: };
       acts_m {avg=0.1762848: max=0.6951251: max_i=15: };
       phase_dif_ratio=0.9893361;
       kwta {k=7: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.081781: k1_ithr=4.013673: ithr_r=0.0168266: ithr_diff=0.01668587: tie_brk=0: };
       i_val {kwta=4.0307: g_i=4.0307: gp_g_i=0: g_i_orig=4.0307: };
       un_g_i {avg=4.0307: max=4.0307: max_i=0: };
       adapt_i {avg_avg=0.1765761: i_kwta_pt=-0.6499997: g_bar_i=1: g_bar_l=0.1: };
       misc_state=7;
       misc_state1=3;
       misc_state2=1;
      };
     };
     unit_spec {type=MatrixUnitSpec: spec=.projects[0].networks[0].specs.gp[0][3]$161$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.4643312: max=0.6305231: max_i=0: };
     i_thrs {avg=3.382485: max=4.628924: max_i=0: };
     acts {avg=0.1487828: max=0.8914285: max_i=2: };
     acts_p {avg=0.1949419: max=0.9136668: max_i=1: };
     acts_m {avg=0.1487909: max=0.8913954: max_i=2: };
     phase_dif_ratio=0.7632578;
     kwta {k=28: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=4.548191: gp_g_i=0: g_i_orig=0: };
     un_g_i {avg=446.1315: max=4.548191: max_i=0: };
     adapt_i {avg_avg=0.1797846: i_kwta_pt=-0.6499997: g_bar_i=1: g_bar_l=0.1: };
     spec {type=MatrixLayerSpec: spec=.projects[0].networks[0].specs.gp[2][6]$162$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[11] {
     name="SNrThal";
     flags=;
     layer_type=HIDDEN;
     pos {x=14: y=4: z=0: };
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=1;
     gp_geom {x=4: y=1: n_not_xy=0: n=4: };
     gp_spc {x=1: y=1: };
     act_geom {x=7: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Matrix";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[10]$163$;
       spec {type=GpOneToOnePrjnSpec: spec=$158$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[10].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[12].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=1: y=1: n_not_xy=0: n=1: };
       units_lesioned=0;
       output_name=;
       netin {avg=0: max=0: max_i=-1: };
       i_thrs {avg=0: max=0: max_i=-1: };
       acts {avg=0: max=0: max_i=0: };
       acts_p {avg=0.09641384: max=0.09641384: max_i=0: };
       acts_m {avg=0: max=0: max_i=0: };
       phase_dif_ratio=0;
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {avg=0: max=0: max_i=0: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=2;
       misc_state1=3;
       misc_state2=1;
      };
      LeabraUnit_Group @.gp[1] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=2: y=0: z=0: };
       unique_geom=0;
       geom {x=1: y=1: n_not_xy=0: n=1: };
       units_lesioned=0;
       output_name=;
       netin {avg=0: max=0: max_i=-1: };
       i_thrs {avg=0: max=0: max_i=-1: };
       acts {avg=0: max=0: max_i=0: };
       acts_p {avg=0.03048928: max=0.03048928: max_i=0: };
       acts_m {avg=0: max=0: max_i=0: };
       phase_dif_ratio=0;
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {avg=0: max=0: max_i=0: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=8;
       misc_state1=3;
       misc_state2=1;
      };
      LeabraUnit_Group @.gp[2] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=4: y=0: z=0: };
       unique_geom=0;
       geom {x=1: y=1: n_not_xy=0: n=1: };
       units_lesioned=0;
       output_name=;
       netin {avg=0: max=0: max_i=-1: };
       i_thrs {avg=0: max=0: max_i=-1: };
       acts {avg=0: max=0: max_i=0: };
       acts_p {avg=0.2386408: max=0.2386408: max_i=0: };
       acts_m {avg=0: max=0: max_i=0: };
       phase_dif_ratio=0;
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {avg=0: max=0: max_i=0: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=1;
       misc_state1=4;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=6: y=0: z=0: };
       unique_geom=0;
       geom {x=1: y=1: n_not_xy=0: n=1: };
       units_lesioned=0;
       output_name=;
       netin {avg=0: max=0: max_i=-1: };
       i_thrs {avg=0: max=0: max_i=-1: };
       acts {avg=0: max=0: max_i=0: };
       acts_p {avg=0.02082457: max=0.02082457: max_i=0: };
       acts_m {avg=0: max=0: max_i=0: };
       phase_dif_ratio=0;
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {avg=0: max=0: max_i=0: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=7;
       misc_state1=3;
       misc_state2=1;
      };
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs.gp[0][4]$164$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=-0.3387866: max=-0.2237637: max_i=2: };
     i_thrs {avg=-2.6409: max=-1.778228: max_i=2: };
     acts {avg=0: max=0: max_i=0: };
     acts_p {avg=0.09659212: max=0.2386408: max_i=2: };
     acts_m {avg=0: max=0: max_i=0: };
     phase_dif_ratio=0;
     kwta {k=3: pct=0.75: pct_c=0.25: adth_k=1: k_ithr=-1.980963: k1_ithr=-4.62071: ithr_r=0: ithr_diff=-1.332557: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {avg=0: max=0: max_i=0: };
     adapt_i {avg_avg=0.75: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     spec {type=SNrThalLayerSpec: spec=.projects[0].networks[0].specs.gp[2][7]$165$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[12] {
     name="PFC";
     flags=;
     layer_type=HIDDEN;
     pos {x=5: y=0: z=2: };
     un_geom {x=3: y=2: n_not_xy=0: n=6: };
     unit_groups=1;
     gp_geom {x=4: y=1: n_not_xy=0: n=4: };
     gp_spc {x=1: y=1: };
     act_geom {x=15: y=2: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SNrThal";
       from_type=CUSTOM;
       from=$157$;
       spec {type=GpOneToOnePrjnSpec: spec=$158$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$128$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_PFC";
       from_type=SELF;
       from=$137$;
       spec {type=OneToOnePrjnSpec: spec=.projects[0].networks[0].specs.gp[3][4]$166$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs.gp[1][2]$167$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=$134$;
       spec {type=TesselPrjnSpec: spec=.projects[0].networks[0].specs.gp[3][6]$168$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs.gp[1][0].children[2]$169$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[3];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[3].projections[3];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[4].projections[4];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[0].layers[5].projections[4];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[0].layers[7].projections[2];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[0].layers[10].projections[2];
	    Projection_Group @. = [6] = LeabraPrjn .projects[0].networks[0].layers[12].projections[1];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=2: n_not_xy=0: n=6: };
       units_lesioned=0;
       output_name="X";
       netin {avg=0.07526267: max=0.4318182: max_i=2: };
       i_thrs {avg=1.677256: max=7.324901: max_i=3: };
       acts {avg=0.1609897: max=0.965938: max_i=3: };
       acts_p {avg=0.1609897: max=0.965938: max_i=3: };
       acts_m {avg=0.1609897: max=0.965938: max_i=3: };
       phase_dif_ratio=1;
       kwta {k=1: pct=0.1666667: pct_c=0.8333333: adth_k=1: k_ithr=7.324901: k1_ithr=0.5477273: ithr_r=2.593257: ithr_diff=0.9252239: tie_brk=0: };
       i_val {kwta=4.614032: g_i=4.614032: gp_g_i=0: g_i_orig=4.614032: };
       un_g_i {avg=4.614032: max=4.614032: max_i=0: };
       adapt_i {avg_avg=0.1612099: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=2;
       misc_state1=3;
       misc_state2=1;
      };
      LeabraUnit_Group @.gp[1] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=4: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=2: n_not_xy=0: n=6: };
       units_lesioned=0;
       output_name="A";
       netin {avg=0.07526267: max=0.4318182: max_i=2: };
       i_thrs {avg=1.677256: max=7.324901: max_i=0: };
       acts {avg=0.1609897: max=0.965938: max_i=0: };
       acts_p {avg=0.1609897: max=0.965938: max_i=0: };
       acts_m {avg=0.1609897: max=0.965938: max_i=0: };
       phase_dif_ratio=1;
       kwta {k=1: pct=0.1666667: pct_c=0.8333333: adth_k=1: k_ithr=7.324901: k1_ithr=0.5477274: ithr_r=2.593257: ithr_diff=0.9252239: tie_brk=0: };
       i_val {kwta=4.614032: g_i=4.614032: gp_g_i=0: g_i_orig=4.614032: };
       un_g_i {avg=4.614032: max=4.614032: max_i=0: };
       adapt_i {avg_avg=0.1611847: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=8;
       misc_state1=3;
       misc_state2=1;
      };
      LeabraUnit_Group @.gp[2] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=8: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=2: n_not_xy=0: n=6: };
       units_lesioned=0;
       output_name="B";
       netin {avg=0.07526267: max=0.4318182: max_i=2: };
       i_thrs {avg=1.677256: max=7.324901: max_i=1: };
       acts {avg=0.1609897: max=0.965938: max_i=1: };
       acts_p {avg=0.1617048: max=0.9702289: max_i=1: };
       acts_m {avg=0.1609897: max=0.9659384: max_i=1: };
       phase_dif_ratio=0.9955779;
       kwta {k=1: pct=0.1666667: pct_c=0.8333333: adth_k=1: k_ithr=7.324901: k1_ithr=0.5477273: ithr_r=2.593257: ithr_diff=0.9252239: tie_brk=0: };
       i_val {kwta=4.614032: g_i=4.614032: gp_g_i=0: g_i_orig=4.614032: };
       un_g_i {avg=4.614032: max=4.614032: max_i=0: };
       adapt_i {avg_avg=0.1611186: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=1;
       misc_state1=4;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=12: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=2: n_not_xy=0: n=6: };
       units_lesioned=0;
       output_name="Z";
       netin {avg=0.07526267: max=0.4318182: max_i=2: };
       i_thrs {avg=1.677256: max=7.324901: max_i=5: };
       acts {avg=0.1609897: max=0.965938: max_i=5: };
       acts_p {avg=0.1609897: max=0.965938: max_i=5: };
       acts_m {avg=0.1609897: max=0.965938: max_i=5: };
       phase_dif_ratio=1;
       kwta {k=1: pct=0.1666667: pct_c=0.8333333: adth_k=1: k_ithr=7.324901: k1_ithr=0.5477273: ithr_r=2.593257: ithr_diff=0.9252239: tie_brk=0: };
       i_val {kwta=4.614032: g_i=4.614032: gp_g_i=0: g_i_orig=4.614032: };
       un_g_i {avg=4.614032: max=4.614032: max_i=0: };
       adapt_i {avg_avg=0.1611057: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       misc_state=7;
       misc_state1=3;
       misc_state2=1;
      };
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs.gp[0][2]$170$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.07526267: max=0.4318182: max_i=0: };
     i_thrs {avg=1.677256: max=7.324901: max_i=0: };
     acts {avg=0.1609897: max=0.965938: max_i=0: };
     acts_p {avg=0.1611685: max=0.9702289: max_i=2: };
     acts_m {avg=0.1609897: max=0.9659384: max_i=2: };
     phase_dif_ratio=0.9988908;
     kwta {k=4: pct=0.1666667: pct_c=0.8333333: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=4.614032: gp_g_i=0: g_i_orig=0: };
     un_g_i {avg=110.7368: max=4.614032: max_i=0: };
     adapt_i {avg_avg=0.1611547: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     spec {type=PFCLayerSpec: spec=.projects[0].networks[0].specs.gp[2][5]$171$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=256;
   trial=10;
   cycle=55;
   time=0;
   group_name=;
   trial_name="C_N";
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=7.374765;
   avg_sse=0.1474953;
   cnt_err_tol=0;
   cnt_err=5;
   cur_sum_sse=0;
   avg_sse_n=11;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=471504: sys=33912: tot=2747842514: }: end={usr=471397: sys=33901: tot=2747841673: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   epoch_time {name="epoch_time": start={usr=487198: sys=34492: tot=2747858843: }: end={usr=487198: sys=34492: tot=2747858843: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=195;
   n_cons=3117;
   max_size {x=26: y=7: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   phase_order=MINUS_PLUS_PLUS;
   no_plus_test=0;
   trial_init=DECAY_STATE;
   sequence_init=DO_NOTHING;
   first_plus_dwt=ONLY_FIRST_DWT;
   phase=PLUS_PHASE;
   phase_no=1;
   phase_max=3;
   cycle_max=60;
   min_cycles=15;
   min_cycles_phase2=35;
   minus_cycles=60;
   avg_cycles=28.44;
   avg_cycles_sum=380;
   avg_cycles_n=11;
   netin_mod=1;
   send_delta=1;
   maxda_stopcrit=0.005;
   maxda=0.5877613;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=-1.1;
   avg_ext_rew=0.8;
   avg_ext_rew_sum=4;
   avg_ext_rew_n=4;
  };
 };
};

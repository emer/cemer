// ta_Dump File v2.0
LeabraProject .projects[0] { 
  Doc_Group @.docs = [6] {
    taDoc @[0] { };
    taDoc @[1] { };
    taDoc @[2] { };
    taDoc @[3] { };
    taDoc @[4] { };
    taDoc @[5] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  String_Data @[2] { };
	  int_Data @[3] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  String_Data @[4] { };
	  String_Data @[5] { };
	  int_Data @[6] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[7] { };
	};
      };
    };
    DataTable_Group @.gp[1] { };
    DataTable_Group @.gp[2] { };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [5] {
    Program @[0] { 
      ProgType_List @.types = [2] {
	DynEnumType @[0] { 
	  DynEnumItem_List @.enums = [2] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	  };
	};
	DynEnumType @[1] { 
	  DynEnumItem_List @.enums = [2] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	  };
	};
      };

      ProgVar_List @.vars = [10] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
      };

      ProgEl_List @.prog_code = [2] {
	ResetDataRows @[0] { };
	ForLoop @[1] { 
	  ProgEl_List @.loop_code = [1] {
	    ForLoop @[0] { 
	      ProgEl_List @.loop_code = [1] {
		ForLoop @[0] { 
		  ProgEl_List @.loop_code = [11] {
		    AssignExpr @[0] { };
		    AssignExpr @[1] { };
		    AssignExpr @[2] { };
		    AddNewDataRow @[3] { };
		    DataVarProg @[4] { };
		    DataVarProg @[5] { };
		    RandomCall @[6] { 
		      ProgArg_List @.meth_args = [1] {
			ProgArg @[0] { };
		      };
		    };
		    VarIncr @[7] { };
		    RandomCall @[8] { 
		      ProgArg_List @.meth_args = [1] {
			ProgArg @[0] { };
		      };
		    };
		    VarIncr @[9] { };
		    DataVarProg @[10] { };
		  };
		};
	      };
	    };
	  };
	};
      };
    };
    Program @[1] { 
      ProgObjList @.objs = [3] {
	DataTable @[0] { 
	  DataTableCols @.data = [7] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[2] { };
	    float_Data @[3] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[4] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[5] { };
	    float_Data @[6] { };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [9] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[2] { };
	    int_Data @[3] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[4] { };
	    String_Data @[5] { };
	    int_Data @[6] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[7] { };
	    float_Data @[8] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[2] { };
      };

      ProgVar_List @.vars = [5] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
      };

      ProgEl_List @.prog_code = [5] {
	DataGroupProg @[0] { 
	  DataOpList @.ops = [7] {
	    DataGroupEl @[0] { };
	    DataGroupEl @[1] { };
	    DataGroupEl @[2] { };
	    DataGroupEl @[3] { };
	    DataGroupEl @[4] { };
	    DataGroupEl @[5] { };
	    DataGroupEl @[6] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	UserScript @[3] { };
	MathCall @[4] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program @[2] { 
      ProgObjList @.objs = [4] {
	DataTable @[0] { 
	  DataTableCols @.data = [8] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[2] { };
	    int_Data @[3] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[4] { };
	    String_Data @[5] { };
	    int_Data @[6] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[7] { };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [3] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	  };
	};
	DataTable @[2] { 
	  DataTableCols @.data = [3] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	  };
	};
	DataTable @[3] { 
	  DataTableCols @.data = [10] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[2] { };
	    int_Data @[3] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[4] { };
	    String_Data @[5] { };
	    int_Data @[6] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	  };
	};
      };

      ProgVar_List @.vars = [5] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
      };

      ProgEl_List @.prog_code = [2] {
	DataSelectRowsProg @[0] { 
	  DataOpList @.ops = [1] {
	    DataSelectEl @[0] { };
	  };
	};
	DataJoinProg @[1] { };
      };
    };
    Program @[3] { 
      ProgObjList @.objs = [1] {
	DataTable @[0] { 
	  DataTableCols @.data = [9] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[2] { };
	    int_Data @[3] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[4] { };
	    String_Data @[5] { };
	    int_Data @[6] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[7] { };
	    float_Data @[8] { };
	  };
	};
      };

      ProgVar_List @.vars = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgEl_List @.prog_code = [3] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	DataCalcLoop @[2] { 
	  DataOpList @.src_cols = [2] {
	    DataOpEl @[0] { };
	    DataOpEl @[1] { };
	  };

	  DataOpList @.dest_cols = [1] {
	    DataOpEl @[0] { };
	  };

	  ProgEl_List @.loop_code = [4] {
	    DataCalcAddDestRow @[0] { };
	    DataCalcCopyCommonCols @[1] { };
	    AssignExpr @[2] { };
	    DataCalcSetDestRow @[3] { };
	  };

	  ProgVar_List @.src_col_vars = [2] {
	    ProgVar @[0] { };
	    ProgVar @[1] { };
	  };

	  ProgVar_List @.dest_col_vars = [1] {
	    ProgVar @[0] { };
	  };
	};
      };
    };
    Program @[4] { 
      ProgObjList @.objs = [7] {
	DataTable @[0] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	  };
	};
	DataTable @[2] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
     };

	  DataTableCols @.data = [5] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	    float_Data @[3] { };
	    float_Data @[4] { };
	  };
	};
	DataTable @[3] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
     };

	  DataTableCols @.data = [1] {
	    float_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[4] { 
	  DataTableCols @.data = [3] {
	    float_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    float_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
		UserDataItem @[1] { };
		UserDataItem @[2] { };
       };
};
	    String_Data @[2] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[5] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
     };

	  DataTableCols @.data = [3] {
	    String_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[2] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[6] { 
	  DataTableCols @.data = [1] {
	    float_Data @[0] { };
	  };
	};
      };

      ProgVar_List @.vars = [7] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
      };

      ProgEl_List @.prog_code = [11] {
	ResetDataRows @[0] { };
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	DataGenCall @[3] { 
	  ProgArg_List @.meth_args = [7] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	  };
	};
	DataAnalCall @[4] { 
	  ProgArg_List @.meth_args = [8] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	  };
	};
	DataProcCall @[5] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	DataGenCall @[6] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	DataAnalCall @[7] { 
	  ProgArg_List @.meth_args = [8] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	  };
	};
	DataAnalCall @[8] { 
	  ProgArg_List @.meth_args = [8] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	  };
	};
	DataAnalCall @[9] { 
	  ProgArg_List @.meth_args = [7] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	  };
	};
	DataAnalCall @[10] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [9] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [8] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [7] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [5] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [2] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[4] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [1] {
		    GridColView @[0] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[5] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [2] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[6] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[7] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[8] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [1] {
		    GridColView @[0] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_0";
 desc=;
 tags=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   auto_open=1;
   text="<html>
<head></head>
<body>
= Data Table Tutorial =

This tutorial provides an introduction to a variety of techniques for working with DataTables in Emergent.  DataTables are one of the most important objects in the system, and can be used for a very wide range of different functions.  Essentially, anything that requires storing and manipulating multiple items of data can benefit from a data table.  Most of the functionality is exposed through the writing of Programs, so this also serves as a good tutorial for the gui-based programming system in emergent.

 '''To return to this document''' at any time, just hit the <code>ProjectDocs</code> tab at the top of this middle panel where you are now reading.

Also, as you work with each documentation section, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open the documentation in a separate window that you can more easily come back to.

Some basic terminology:
* '''Left browser panel''' is the left portion of the window with a \"tree\" of objects in the simulation (inlcuding the network, and the input/output data, etc).
* '''Middle edit panel''' is where you are currently reading -- it can display different things depending on the selected tabs at the top, and what is currently selected in the left browser panel.  The left-most tab usually shows what is selected in the browser, and the other tabs with \"pins\" down are locked in place and contain this document and the Wizard, which we will be making heavy use of.  The right-most tab represents the configuration information for the 3D display shown in the right-most view panel (which is now called \"Frame1\" and is empty).
* '''Right view panel''' shows 3d displays of various simulation objects, incuding the network, input/output patterns, and graphs of results, etc.

Note: this tutorial is designed for version 4.0.17 or greater of Emergent!  Some features may not work in earlier versions.

== Overview of Tutorial ==

We begin by creating some data, which we then process in a variety of ways.  Each step is described in a separate document object located in the docs section of the left browser panel, and linked here:

# [[.docs.DataGenDoc]] -- generating data, including basic datatable gui usage (''required first step'')
# [[.docs.DataAnalysisDoc]] -- analyzing data in various ways (grouping, stats, dimensionality reduction, etc)
# [[.docs.DataBaseDoc]] -- data-base style operations for modifying data in various ways
# [[.docs.DataCalcLoopDoc]] -- a very powerful mechanism for iterating through data tables row-by-row and performing various computations
# [[.docs.MatrixDataDoc]] -- various operations on matrix column data

Each document involves creating a separate Program with its own data tables, so after the first step of generating the data, each one can be independently explored in any order.

</body>
</html>
";
  };
  taDoc @[1] {
   name="DataGenDoc";
   auto_open=0;
   text="<html>
<head></head>
<body>
= DataGen: Generating Data =

This section introduces the basic steps for creating and configuring a data table in the gui, and generating data within a table.

== Creating and Configuring a DataTable ==

Open the data section in the left browser, and then click on InputData, and click the New button in the middle panel (or use right mouse button or Ctrl+mouse on Mac to get the context menu and select New).  Leave the defaults as they are, and hit Ok.  This creates a new data table (should be called DataTable_0).

Click on the [[.data.gp.InputData.DataTable_0]] (can use link), and observe that the middle edit panel for it has 3 sub-tabs: Data Table, Properties, Columns.  This provides 3 different views of a datatable, each facilitating a different form of interaction.  Click on Properties, and let's give it a new name: \"MyRandomData\" -- we will be using random numbers to generate the data..  You can see various other properties that can be set -- mouse-over these to see what they do (most are not relevant in the default setup and are greyed out).

Now we need to create some columns of data.  A datatable is organized by '''columns first''', and then rows -- each column has a specific type (e.g., floating point numbers, integers, Strings) and all rows of that column must have the same type (to get around this constraint, you can create a Variant column which can contain different types of information, but this is very rarely necessary).  A particular row of a given column is called a '''cell''' -- the cell can either hold a single value (a so-called ''scalar'' column), or it can hold multiple values organized in a ''matrix'' (up to 5 dimensional matricies can be defined for a cell).  See the [[http://grey.colorado.edu/emergent/index.php/AX_Tutorial|AX Tutorial]] for an example where matrix cells are used to hold input patterns to be presented to a network.

For our random data, we're going to simulate the results of a hypothetical test of a network, where we have two separate ''condition'' factors of testing (independent variables in experimental lingo) and a couple of measures recorded from the network (dependent variables in experimental lingo).  Each item of data is recorded over a sequence of ''batches'' (new runs of the network with random initial weights).  Thus, the columns we want to create are:

* '''batch''' (integer) -- batch number (equivalent to subject number in a typical psych experiment)
* '''cond1''' (integer) -- condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)
* '''cond2''' (integer) -- condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)
* '''cycles''' (integer) -- number of cycles the network required (i.e., reaction time in a typical experiment)
* '''sse''' (float) -- summed-squared error (how much error did the network make)

For each column, just click on the Columns menu at the top of the middle edit panel for the data table, and select NewCol (for a scalar column -- one value per cell -- see [[.docs.MatrixDataDoc]] for matrix data), and then select the type (int = integer) and enter the name as given above.  As you create each column, it will be selected -- one could enter something akin to the above comments in the desc field, so another user would know what each column represents -- this is a very good habit to develop.

'''Tip:''' you can do context-menu/Duplicate (or use the Ctrl+M shortcut) on a column in the left browser to create a new column of the same type -- this can be quicker.  Note also that you can move columns around in this left browser, and that determines the order they appear in the data table!  Deleting a column is similarly possible.  All of this also applies to the Columns tab of the edit panel as well.

You can click on the other tabs (Data Table, Columns) to see that your table is configured properly when you're done.

== Writing a Program to Generate Data ==

Now we'll write a program to generate data for our table.

Do context menu/New in programs to create a new program (or use the Ctrl+I keyboard shortcut -- for inserting a new object at any place in the browser), and call it \"DataGenProg\".  Then click on the Edit Program sub-tab in the middle edit panel.  You can see the various empty containers for the various program elements:

* objs -- place to put misc objects that contain local data for the program (e.g., a local DataTable that might hold some intermediate processing data for the program).
* types -- special user-defined types that define properties of corresponding variables (currently for \"dynamic enums\" that define enumerated lists of options).
* args -- (short for arguments) this is where you put variables that other programs will set when they run  this program.
* vars -- place for other non-argument variables that are used in the program.
* functions -- you can define subroutines (functions) that can be called within a program to perform a given task that needs to be done repeatedly.  These functions are only accessible from <i>within</i> this given program.
* init_code -- actions to be performed when the user presses the Init button -- to initialize the program and other objects that it operates on (e.g., initializing the network weights, as the LeabraTrain process does).
* prog_code -- finally, this is where the main code for your program goes!  because it can depend on any of the preceding elements, it logically comes last (and it is typically the largest).

Programming in this system mostly consists of dragging program elements from the toolbar at the very left edge of the display into your program, and then configuring their properties (drag-and-drop and duplicate are also very handy here, and everything can be done with the keyboard for extra efficiency for experts -- see [[http://grey.colorado.edu/emergent/index.php/Keyboard_shortcuts|Keyboard shortcuts]]).

In the Toolbox, the program elements are organized into various sub-categories (Network, Ctrl, Var/Fun, etc).  Take a look through these categories and use the mouse-over to see what kinds of things are available.

=== Overall Plan for Program ===

Our overall plan for the program is to just iterate over the conditions, and then over batches, and randomly generate the sse and cycles data.  Therefore, we need to create 3 \"nested\" loops for each of these iterations, and some simple function calls to set the data.  There is a very useful feature of the system whereby variables with the same names as columns in a datatable can be easily stored and retrieved from a specified row in the datatable, so we'll name all our variables from the columns in the datatable.

=== Step 1: Create Variables ===

In the <code>Var/Fun</code> tab on the Toolbox, there is an item called <code>var</code> (''not'' <code>var=</code>) -- drag this into the <code>vars</code> section of your program, and select \"Copy Into\".

Name this new variable \"batch\", and select Int for its type (should be default already).  This will hold the batch counter that we iterate over, and will be written to the batch column of the data table.

Repeat the above process, or do context menu/Duplicate, to create the remaining column variables (be sure to make sse a Real type, which is the program version of a floating point number (it is actually stored as a double-precision floating point number internally -- for the program level of code, runtime performance is not critical so only one floating point variable type is available, to simplify things).

'''Tip:''' there is a shortcut (added in 4.0.17) for making variables from data table names: just drag a data table on the vars guy and select Create Data Col Vars (or hit the button for that in the middle panel and select a data table).

=== Step 2: Create For Loops ===

Next, drag a <code>for</code> item from the <code>Ctrl</code> (program flow control elements) section of the toolbox into the <code>prog code</code> section of your program.

There are 3 main elements to the for loop:
* init -- run once at the start of the loop -- used to initialize the loop counter variable
* test -- run after each iteration through the loop -- if this expression is true, the looping continues, else it stops
* iter -- what to do after each iteration, typically incrementing the loop counter variable

As you can see, the default for loop will iterate from 0 to 9 over the <code>i</code> variable (which it automatically created for you in your vars section).

Let's replace <code>i</code> with <code>cond1</code> (first condition variable), and have the test expression be: <code>cond1 &lt; 2</code> (and keep all other stuff the same aside from replacing i with cond1) -- this will iterate from 0 to 1 over the cond1 variable.

Now repeat the process by dragging a for into the <code>loop_code</code> of your first for loop, and change it to use cond2 (with a test of < 2).

Finally, repeat this process one last time, changing the variable to batch, and let's keep the test limit of 10 for now.

=== Incremental Progress Test: Write the Vars And Run! ===

It is often a good idea to program incrementally where possible, so you can test what you've done, and consolidate your understanding of how it works, before moving on to the next steps.  Thus, we're going to just write the for-loop variables to our datatable, and see how that works, before adding the random number generation part.

Drag a <code>new row</code> item from the <code>Data</code> toolbox into the inner-most <code>loop code</code> of your three for loops.  This will add a new row into your data table, and then we'll write the variables into that row.  You should see it complaining about an ERROR -- you need to tell it which data table to add a new row to.  When you click on the <code>data var</code>, you'll see that it doesn't show any option corresponding to your MyRandomData data table.  This is because most all of these kinds of data program elements operate on ''variables'' that ''point to'' datatables, instead of referring to data tables directly.  This allows considerable more flexibility (one can change the variable to point to different data tables at will), at the cost of requiring an extra step when you don't need it (like now!).

To create a variable that points to (refers to) your MyRandomData table, you can just drag that item from the left browser into the vars section of your program, and select <code>Add Var To</code>.  Note: you have to do this drag without first selecting the item -- just click down and ''hold the mouse button down'' while dragging over to vars -- otherwise you'll end up selecting the data table and won't be able to drag it into your program in the middle edit panel.

You should see that you now have a variable called MyRandomData (you could rename it to anything else) that is of type Object*, meaning it points to an object (this is C language syntax), and the object_val is MyRandomData (i.e., the data table it is actually pointing to). If you had any other data tables lying around, you could see that you could select one of them and then this variable would point to that other data table.

Now that we have the variable we need, go back down to the new row guy (says AddNewDataRow to:) and select this variable for the <code>data var</code>.  You should see that the text description of this program element says \"AddNewDataRow to: MyRandomData (or whatever you might have renamed your variable to).

Finally, drag a <code>data vars</code> from the Data toolbox into the same loop code as before (this will add it to the end -- if you drop it on the AddNewDataRow guy it will replace it as the first item in the list -- it is also possible to drag it ''just'' after that item as indicated by a small horizontal line).  This is the guy that writes variable values to columns of the same name in a data table.

Now select your datatable variable for the <code>data var</code> field, and click the <code>set data</code> flag ''on'', indicating that we are writing to the data table, as opposed to reading values from it (note that the text description in the program changes to \"To:\"), and then select cond1, cond2 and batch for <code>var 1, var 2,</code> and <code>var 3</code> respectively.  Leave the <code>row spec</code> at <code>CUR ROW</code>  -- the new row function will set the new row as the current row (each data table contains its own variable indicating the current row -- this is very widely used in the software, as some program elements will set the current row, and others will read/write to that row without having to keep track of which row it is).

Ready for the moment of truth!?  Press the <code>Init</code> button at the bottom of the program editor.  Look at your ''css Console'' window to see if there were any error messages -- this is critical whenever you are programming, because often informative error messages or warnings will show up there.  Usually you will also get a pop-up dialog, but not always..  On Linux and Mac, you can find your css Console window by going to the overall program menu and selecting Window/css Console.  On Windows, the console is floating around somewhere behind your application, and looks like the command prompt window.

Assuming you didn't get any errors, you are now ready to hit the Run button!  Nothing obvious happens!  To see if it did what you expected, click back up on the MyRandomData and select the Data Table view -- you should see 40 rows of data, with the batch, cond1 and cond2 columns filled in as you would expect.

If you do get errors, the can only be in the for loop expressions -- you should get information when you enter those in the first place about whether they are incorrect.  Hopefully you can correct the mistake.  If you're stumped, you can always pull up the data_tutorial_final.proj file in the same directory as this project, which has the final working version of this program, and see what is different.

=== Generating Random Numbers ===

All we need to do to complete our program is generate random numbers for the cycles and sse values, and then set them to the data table.

In the <code>Misc Fun</code> toolbox tab, you'll see a <code>random()</code> item -- drag that to the end of your loop code.  There are two things that need to be set: the <code>result var</code> and the <code>method</code>.  Select cycles for the result var, and then click on the method and choose \"Float\" at the top in the category selector -- this selector is very useful for narrowing down your set of options by different overall categories of methods (functions) available.  You can see that Random has different methods for generating integer (Int) and Boolean random numbers in addition to floating point.  The other categories are standard for all objects, and include File, Display, ObjectMgmt, and UserData functions.  Select the <code>Gauss</code> method from the Float category -- we'll generate Gaussian (normal) random variables for our cycles variable (even though it is an integer, we can generate the numbers using floating point and they'll automatically be converted to integers).

The Gauss function takes one argument: the stdev or standard deviation of the random variable to generate.  We can just enter 5 for that -- you have to click on the stdev line under the Random method call to enter this number into the expr field.  You could enter any kind of fancy expression here (more on that in a moment).

To make this number more realistic, we need to add a mean offset to it -- do this by dragging a <code>var+=</code> item from the <code>Var/Fun</code> toolbox into the end of the loop code, and select cycles for the var.  Now we get to write an interesting expression for the mean offset that we will add to this variable.  The expression is: <code>20 + cond1 * 4 + cond2 * 6 + cond1 * cond2 * 1</code> -- note that you can use the var lookup selector to lookup these variables and enter them into the expression, or just type Ctrl-L to pull up a selector directly while typing in the field.  The Ctrl-L lookup selector is particularly powerful and context sensitive, allowing you to lookup all manner of expression elements (functions, types, methods, members, etc) depending on the current text that you've entered so far.  Give it a try!

This expression basically provides for a main effect of the two independent condition variables, plus a small interaction term.  Feel free to experiment with different expressions later -- some of the subsequent tutorial text depends on this particular equation however.

We want to just duplicate and modify these two lines of code for the sse computation.  You can do this using an extended select (click on the first element, then hold down shift and click on the next one) -- note that you need to first \"close\" the Random method call to not show the arguments, so that what you select will just be overall program elements.  Then, you can either drag these two guys into the loop code, or do context menu Copy, and then context-menu paste on the loop code item.  This is a very powerful way of creating new code by copying existing chunks of code!

Now go into these two new items and select sse for the var instead of cycles, set the stdev to 2, and the var+= expression to: <code>10 + cond1 * 2 + cond2 * 3 + cond1 * cond2 * 1</code>

=== Final Bits ===

The last step is to add an additional <code>data vars</code> item to the end (can just drag the existing one onto the loop code and Copy to put it at the end), configured as before, but with cycles and sse as the two variables to set.

Finally, we need to add one new element to the start of the program.  This will be evident if you are impatient and just did Init and Run -- your data table just keeps growing in size every time you run the program!  We need to start by resetting the rows.  Drag a <code>reset rows</code> item from the <code>Data</code> toolkit on top of the first for loop -- it will go at the start of the program.  As you might expect, you need to select the data table variable for the data var.

Now you are ready to do Init and Run, and then inspect the results in your MyRandomData table.

== Graphing the Data ==

To really see if you've achieved what the above equations seem like they should, you can create a graph of your data.

Select MyRandomData, and in the smaller menu at the top of this middle edit dialog, select View/New Graph View, and leave the default at New Frame.

You will see a graph appear in the right view panel, but the default configuration probably doesn't make a lot of sense.  Select the right-most tab in the middle panel (initially called Frame1), to reveal the graph view control panel, which enables you to configure how the graph view looks.  At the top, change the Style to POINTS instead of LINES.  Then make sure that cycles is selected for the X axis, and sse for the Y1 axis, and turn the on button off for the Z axis variable. You should now see a nice scatterplot showing what looks like a decent correlation between cycles and sse.

== Adding Condition Labels ==

The last step in making our data more useful is to add labels for each of the conditions, and an aggregate label that can be used for plotting.  The best way to do this is to create enumerated values (Dynamic Enums or DynEnums) that convert directly between numbers and string labels. Then, we can write the corresponding labels to new columns in the data table in our rendering loop.

Here are the definitions of the condition values from above:

* '''cond1''' (integer) -- condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)
* '''cond2''' (integer) -- condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)

In the types section, do New Enum Type (button or contect menu) and name it Cond1 -- click New Enum and call the first one LOC (value is 0), and then duplicate that one and call it OBJ (value = 1).  Then duplicate the Cond1 type and rename it Cond2 and change the two enum values to SRC and TRG respectively.

Next, we'll create new columns in the data table to hold these labels.  Back at the [[.data.InputData.MyRandomData]] table, do New Column and create a cond1_lbl column of type String -- duplicate that and rename it cond2_lbl, and finaly make one more duplicate called cond_lbl which will contain both condition labels in a single column.

Then, in the program, create three new variables in the vars section with these same names.  Set the type of the cond1_lbl and cond2_lbl vars to DynEnum, and select the new Cond1 and Cond2 enum types respectively.  Set cond_lbl to be of type String.

Now we'll set the values of these new variables, and apply them to the data table.  At the start of the inner-most loop_code of the for loop (where all the rest of the code is), insert a var= (from Var/Fun) item, and set the result_var to cond1_lbl and the expr to cond1 -- this just assigns the enum based on the corresponding integer value.  Duplicate that item and set it for cond2_lbl = cond2.  Duplicate one more time, and this time the result_var should be cond_lbl and the expr is <code>(String)cond1_lbl + \"_\" + cond2_lbl</code> -- the (String) aspect of this expression is a ''cast'' will extract the string (label) version of the enum to make a composite string of both conditions.

'''Important:''' the css language (which implements these Programs) always tries to convert values to the type of the ''first item in an expression'' -- so you should be very careful to add an explicit ''cast'' expression to the first item in an expression that is appropriate for the entire result (at least the items within a given level of parentheses).    This is particularly important when dealing with floating point expressions that also have integer values in them -- if the first item is an integer then you need to cast it as a (float) to make sure all subsequent math is done in floating point precision.

The last step is to duplicate the existing data vars item (labeled To: MyRandomData...) and change the vars to these new variables (cond1_lbl, cond2_lbl, cond_lbl).

When you Run this version, you can see in the MyRandomData that the labels have been filled in for each condition, making the data more human readable.

Now, we're ready to explore the analysis of the correlation between cycles and sse in the [[.docs.DataAnalysisDoc]] tutorial next!

== Futher Extensions ==

You can extend the program by adding variables for the constants in the random number equations -- just make new variables, and turn on the Ctrl Panel flag so that they appear in the first \"Program Ctrl\" panel of the program edit panel (this presents the \"user\" view of the program, as compared to the programmer view, and it should contain the key parameters that a user might want to manipulate or set).



</body>
</html>
";
  };
  taDoc @[2] {
   name="DataAnalysisDoc";
   auto_open=0;
   text="<html>
<head></head>
<body>
= Data Analysis =

This document describes the process of analyzing the data generated in the [[.docs.DataGenDoc]] program (which must be completed first).

The single most important analysis tool is the Group function, which we introduce first.  Then, we cover various other useful tools including various statistics.

First, we create a new Program to put our analysis functions in: do programs/New, and call the new program: DataAnalProg.  Click on the Edit Program tab so we can start editing it.

== Group Function ==

Drag the <code>group</code> item from the <code>Data Proc</code> toolkit into your <code>prog code</code> in the program.  You can see that this requires a <code>src data var</code> and a <code>dest data var</code> -- the src is the data table to be analyzed, and the dest is where the resulting data goes.  As we learned before, we need to create variables that point to these data tables.

Drag the MyRandomData data table (in data/InputData) into the vars section of your program, and do Add Var To.  This will be our source (src) data.

For the dest data, we can create a new data table directly within the program itself -- this is useful for data that will not generally be used by other programs, and is thus best left \"encapsulated\" within the one program where it is used -- this makes it easier to share the program with other users, etc.  We didn't do this with the MyRandomData table because it is shared among all of our programs in this project.

To create the new data table, do context menu in the objs field, and select New Data Table.  Click on the new data table, and give it an appropraite name like \"grouped_data\".  Note that when you created the new data table, it automatically created a variable in the vars section of the program that points to it -- this is true for any object created in the objs section of a program, because most program functions require a variable to access the object in any case.  Also, when you rename the object, the variable is automatically renamed as well.

Now you can go back to the Group item and select the MyRandomData variable for the src data, and your grouped_data var for the dest data.

Next, click on the Add Column button, and just hit Ok for the dialog that comes up asking for a column name -- it is usually easier just to pick it from a list that we can get when we edit the item.  Click on the new item that appeared below the group_spec, and in the <code>col lookup</code> field, select the cond1 column.  Then select <code>GROUP</code> for the <code>agg op</code> (aggregation operator) -- this means that all the rows for each different value that shows up in the cond1 field will be grouped together in the resulting output data table.

Duplicate this cond1 column and set the name to cond2, so we get grouping by both of our independent condition variables.  Also, Duplicate cond2 and select cond_lbl with an agg op of FIRST -- this will extract the condition labels for each group which are going to be useful for graphing.

Next, duplicate the cond2 guy and enter/lookup cycles, and change the agg op back to MEAN.

Finally, duplicate that cycles item and change it to sse.

We are now ready to Init and Run the program -- go ahead!  To see the results, click on the grouped_data data table in the ''left tree view'' (this is the only way to get the Data Table view that shows the data).  You should see four rows of data, with each unique combination of cond1 and cond2, and the means of the data for each of these condition combinations.

=== Creating a Bar Graph of the Grouped Data ===

To better see the results, we'll create a bar graph.  Do View/New Graph View for the grouped_data table, and leave the default New Frame and hit OK (it is also possible to put multiple graphs on a singe view frame by selecting an existing frame there).  To get this to display as a bar graph, you need to click on the view control tab (rightmost tab in middle panel), and change the graph setting at the top to BAR, then click cond_lbl_first for the X axis, and set a fixed min/max of -.5 and 3.5 (to fit the edges).  Turn off the Z axis, and select sse_mean for Y2.  Lastly, toward the bottom, select FIXED COLOR for the color mode, so that the cycles show up as black bars and sse is red.  This should give a decent display of the quantitative data.

=== Adding SEM Error Bars ===

To be able to visually interpret whether there are significant differences between these results, it would be nice to add error bars that reflect the standard error of the mean (SEM), which provides a rough visual sense of statistical significance (if the error-bars between conditions do not overlap, then the result is likely statistically significant -- of course an actual statistical test is required to know for sure).

To generate SEM data, you just have to go back to the Group spec, and duplicate the cycles and sse items and replace the agg_op in the duplicates with SEM instead of MEAN.  Then Run again.

To add the error bars to the plot, select these new columns in the Err 1 and Err 2 selectors near the bottom of the graph control panel (Err 1 is cycles_sem and 2 is sse_sem).  This is now a plot that gives a good sense of how significant the differences between conditions are.

== Computing Correlations (and other such things) ==

The bar graph and scatter plot both show that the two variables, cycles and sse, are correlated (as we know from the equations we used to generate them).  We can compute the degree of correlation (and a large number of other statistics and mathematical functions) using the math library that is built into Emergent.

The core step is very easy: just drag a <code>math()</code> guy from the <code>Misc Fun</code> toolkit to the end of your program, which provides access to a large range of math functionality.  One key nonobvious step is that you need to select which type of floating-point numbers to operate on: float (single precision -- used extensively in Emergent) or double (less frequently used).  In our case, because sse is float data, we select float -- this means choose taMath_float for the <code>object type</code> (it starts out with the generic taMath type which ony has very limited functionality -- this is the \"parent class\" to the two choices: taMath_float or taMath_double).

Next, you just need to choose the method (function) to call.  All the functions are organized into various categories, selectable at the top.  Browse through these to get a sense of what is available.  Although correlation might seem to be a statistic, it is actually located in the Distance category (where it also belongs), under the name <code>vec_correl</code>.  Once this is selected, you'll see that it takes two arguments of type float_Matrix.

This raises a bit of an issue.  It is easy to get a float_Matrix containing all the data for the sse column, because this is how the data is stored.  However, the cycles column is int data, and therefore we need to interject a small detour to create a float version of that column, which can then be passed to this function.

To do this, we first create a new temporary data table in the objs -- context menu/New Data Table -- call it float_cycles or something to that effect.  Then drag a <code>meth()</code> on top of your existing math function call (so it will go ahead of it), and select the new float_cycles data table for the object, and CopyFrom (under ObjectMgmt category) for the method.  Enter MyRandomData as the object to copy from.  This just gives us a duplicate of the existing data. 

Next, drag another meth() after this copy from, again for float_cycles, and this time select NewColFloat under the Columns category.  Enter something like \"cycles_flt\" for the name of the new float column to create.  There are many ways to copy the int values from the cycles column to this new cycles_flt column.  We will use a particularly useful one: drag a <code>script</code> item from the <code>Ctrl</code> toolkit, and enter the following expression:
* <code>float_cycles[\"cycles_flt\"].CopyFromCol_Robust(float_cycles[\"cycles\"]);</code>

You can use the Ctrl-L lookup to find each element of this expression -- give that a try to get some familiarity with this important tool.  This expression is calling a \"robust\" copy method on the cycles_flt column (columns of a data table can be accessed by the \"array\" operator as shown, using either a name or an actual column index).

Now you can use this same type of expression to enter the two args to the vec_correl function:
* <code>MyRandomData[\"sse\"].ar</code>
* <code>float_cycles[\"cycles_flt\"].ar</code>

Note: '''The .ar at the end indicates the float_Matrix data used to actually store the data for the column.''' -- this is a very important point to remember for using these math functions!

The last thing you need to do is create a new variable to store the results of this correlation computation -- create a new Real var, call it \"r\", and then select that variable for the result var.

Now you can do Init (look for errors) and then Run.  When you then click on the r variable, you can see that it has a value, probably around .5 or so, indicating the presence of a decent correlation.

In an upcoming release of the software, we'll have support for ANOVA and generalized linear model (GLM) statistical analysis so you can determine the statistical signfiicance of results directly within the software.

Also, the taDataAnal object, which is available under Misc Fun/data anal() in the program toolbar, has a number of useful analysis routines that are generally geared toward matrix data, and will be explored in [[.docs.MatrixDataDoc]]. 

Next, we turn to the data base-style operations in [[.docs.DataBaseDoc]].

</body>
</html>
";
  };
  taDoc @[3] {
   name="DataBaseDoc";
   auto_open=0;
   text="<html>
<head></head>
<body>
= Data Base =

Emergent can do several database-style operations on data tables, including Join, Select, and Sort.  These are powerful motifs for manipulating data, which are introduced in this section.

To start, make a new program under programs called DataBaseProg.  Do Edit Program on it, and drag the MyRandomData table into the vars section and do Add Var To.

== Selecting Rows ==

As we saw in the [[.docs.DataAnalysisDoc]], most analysis operations operate on an entire data table at a time.  So, to focus an analysis on only a subset of data, you first need to select the rows that contain the relevant data, and then operate on that new data table.  There are many other instances where you would want to select a subset of data as well.

There is a built-in select rows operation, in the Data Proc section of the toolkit -- drag <code>sel rows</code> into your prog_code.  You see that it has a source (src) data var and a destination (dest) one -- the src will be MyRandomData, but you need to create a new result data table in the objs of this program to hold the results -- do that (you can call it SelectedData or something like that) and set the dest to it.

The rows to select are specified in terms of the values of specific columns of data -- in this case, let's select all the rows for the LOC condition (i.e., cond1_lbl == \"LOC\").  To do this, click Add Column -- you can either enter cond1_lbl directly here for the name, or just click on the new column when it shows up and you can then choose the column from a list.

There are two choices for how to specify the value you want to select by -- either by using a variable in the program, or by entering a value directly here.  We'll do the latter for simplicity.  Just fill in the values of the <code>cmp</code> field: var_type and var_value -- these are fields for a Variant type which is a special object that can represent any of a number of different types of information.  Set the var_type to String and the var_value to LOC (do NOT include double-quotes here!).

You can now do Init (check for errors) and then Run.  

Click on the SelectedData table under objs in the left browser, and you should see that only the LOC rows are present.

If you need to select multiple values of the same column, you can just duplicate the column, and specify a new value to select, and, critically, change the <code>comb op</code> on the overall SelectRows object to OR instead of AND (the default).  Selecting multiple values across multiple columns is similar (e.g., you could select only rows in the LOC and SRC condition in this way using comb_op of AND.

Feel free to experiment with all these options, including the more exotic NOT AND (negates the relationship and then does AND across all the columns) and NOT OR.  We actually won't be using this data for anything later so don't worry about returning to the initial state.

== Selecting Columns ==

There is a similar function for selecting columns (sel cols) which doesn't have any selection criteria -- it just uses a list of columns to select and copies only those column's values to the destination table.

== Sorting ==

You can also sort a data table according to the values in multiple columns by using the sort object from the Data Proc toolkit, or just by calling the Sort method on a data table (which will sort the table itself, instead of sorting to a new data table object, leaving the original in an unsorted state).  The method approach is limited to 6 columns of sorting, whereas there are no limits on the sort object approach.

== Joins ==

Joins provide a means to join together two different data tables, using a common column of values to link rows between the two.  For example. if you happened to have two different types of data for each batch run of a network, you would join them together according to the batch number.  Analogously, you might have different data for the same set of experimental subjects, so subject number would be the join value.

Another common scenario is when you have a table with detailed information about a given element of data in your table (e.g., for each of the different experimental conditions), which you want to then fold into the overall data table.  In effect, this acts like a \"lookup table\" that looks up new values and adds them as appropriate for the condition.  We'll use this technique to add some more information about each of the conditions in our experiment, which then could potentially be used for subsequent analysis.

First, we'll need to construct a new data table in objs that has the information about each of the conditions in the experiment.  Call it CondData, and add a String cond_lbl column (which will be the key that links this with our main data table), plus some additional columns of data:

* float cycle_off -- a cycle offset value that we could use to adjust cycles for other factors not present in the simulation.
* float n_objs -- number of objects in the display in each condition (just making this stuff up!)

Then add 4 rows of data to this table, enter the four combinations of LOC/OBJ SRC/TRG as appear in the MyRandomData cond_lbl column, and make up some numbers for the other data.

Next, drag the join from the Data Proc toolbox into the prog_code, and set the src data to MyRandomData, and the src b data to CondData.  You'll see you need to create a new destination data table -- do that in objs as usual (call it JoinedData or whatever) and then select the col_a and col_b columns to be cond_lbl.  Leave the type as an INNER join.

Go ahead and Init and Run this, and look at the results.  You should see that the JoinedData table has all the columns from the MyRandomData, plus the new ones from CondData, with the values appropriately copied over for the given condition.  If you happened to have mistyped one of the condition labels, you should have received a warning about this (as controlled by the nomatch warn flag, which defaults on).

=== Left vs. Inner Join ===

A Join can also be used to select a subset of data -- for an Inner join, only the matching rows will be included in the result.  To demonstrate this, duplicate the CondData table and remove the last row from the new one (which you can rename as OnlySomeConds or whatever)  -- just select the row number (3) and use the context menu to do delete rows.  Then, in your join program item, change the src_b data to this new table, and re-run.  You'll get error messages about the mismatches (if you intend to use this as a selection tool, then turn nomatch_warn off), and you should see that the resulting table does not include the OBJ_TRG condition (which should have been the condition you removed from the src_b table).

If you set the join type to be LEFT instead of INNER, and Run again, you'll see that now the resulting data table has all the rows, but the last set of rows have 0 values for the new data columns.  This is the key difference between a LEFT and INNER join -- LEFT includes all rows of the first src table (src_a) and fills in values where it finds matches and not otherwise, whereas INNER only includes the matching rows.

One additional thing you can experiment with is having multiple rows per condition in the src_b table -- just duplicate the last row of the OnlySomeConds guy, enter some different values for this new row, and then run again -- you'll see that there are now two rows for each original data point of the last condition, matching the two for that condition in the OnlySomeConds table.  Thus, a join can also be used to replicate rows of data for a variable number of times per each condition or by some other variable -- joins can perform many different functions if you think creatively about them!

Next, we'll explore an even more Swiss-army-knife like system, the DataCalcLoop in [[.docs.DataCalcLoopDoc]].

</body>
</html>
";
  };
  taDoc @[4] {
   name="DataCalcLoopDoc";
   auto_open=0;
   text="<html>
<head></head>
<body>
= Data Calc Loop =

The DataCalcLoop set of functions (available in the last section of the Data Proc program toolbox) provide a framework for looping through the rows of a data table and performing any arbitrary kind of calculations or other functions, and then writing either back to the same data table or to a different data table.  For those familiar with obscure but powerful linux utilities, it resembles the <code>awk</code> tool.

The DataCalcLoop (DCL) can also be used to do abitrarily complex row selection, by deciding on a row-by-row basis what to copy versus not.

One thing to keep in mind about the DCL -- it is slower than the other data base style functions (select rows, join, etc) because it uses script code to iterate through the data table, instead of having the script call a pre-compiled and very fast hard-coded loop.

As usual, the first step is to create a DataCalcLoopProg in programs, and to drag the MyRandomData into its vars.

== Creating a destination data table ==

First, we create a data table to hold the results of our data calc loop computation.  In this case, we're just going to create a plain data table, and then write some program code to create the columns for it, based on our source data table.  So, just do NewDataTable and call it something like DataCalcDest.

Next, we add a <code>meth()</code> call (from the Var/Fun program toolbox) on that DataCalcDest into the prog_code, to copy over the columns from the MyRandomData table.  After setting the object to DataCalcDest, select Copy_NoData (under the Copy category) for the method to call, and select or type MyRandomData for the argument to this method.

Now, we'll add a new column to the destination data table to hold the results of our calculation.  Just duplicate the method call item, and select the method as NewColFloat under the Columns category of functions.  For the col_nm argument, enter \"calc_val\" (include the double quotes!).

== Creating the Data Calc Loop ==

We are ready to drag the <code>calc loop</code> item from Data Proc onto the prog_code, and then set the src data as MyRandomData and the dest data as DataCalcDest.  You can see that it has thee sub-groups: src_cols, dest_cols, and loop_code -- we just add the names of the columns we want to operate on from both the source and destination tables, and then add some code to operate on them one row at a time in the loop_code.

Do Add Src Column and either type in cycles or just select it in the new item that comes up.  Duplicate this one and enter sse -- our computation will involve these two values.

Then do Add Dest Column, and type in calc_val -- it will not be available for selecting because it has yet to be created.

== Copying the Source Data ==

The first thing we want to do in our calculation is to copy over all the data from the source to the destination, and then we'll add the special computed value.

Drag a <code>+dest</code> row item from Data Proc into the loop_code of the DCL (it doesn't require any further configuration), and then add a <code>cpy cols</code> item (which also does not require configuration).

You can now do an incremental test of the program -- Init (you should get a warning about the calc_val not yet existing in the destination data table -- ignore it), and then Run.  If you click on the DataCalcDest now, and view the data table, you'll see it is a copy of MyRandomData, with zeros in the new calc_val column.

If you just wanted to select rows, you could have added an <code>if.cont</code> (if -- continue) expression that evaluated the values of the current source row, and if they were not suitable, continued to the next row without doing the remaining code (i.e., adding a dest row and copying the values).

== Computing the new calc_val ==

Now we'll augment our code with the main point of this exercise: computing a new value and writing it to the destination table.

Drag a <code>var=</code> (from Var/Fun toolbox) onto the loop_code (placing it at the end) and you'll see that you can then select d_calc_val for the result var -- this is a new variable automatically computed by the DCL to contain the value of the calc_val column of the destination table.  You should also have noticed that s_sse and s_cycles were on the list too -- they are similar new variables for the source columns we specified.  A variable is created for each of the src_cols and dest_cols you specify.

For the expr, enter <code>s_sse * s_cycles</code> (you can use Ctrl+L to lookup these variables, or the var_lookup selector).

The last step is to add a <code>=dest row</code> item at the end, which is what actually writes the d_calc_val to the calc_val cell of the destination table.  This is a commonly-forgotten step so don't forget it!

Now when you Init and Run, you should see the calc_val contains the product of the sse and cycle columns!

This provides a very brief overview of all the basic elements of the data calc loop system -- clearly there are many many other possibilities -- any arbitrary code can be put in the loop_code, and you can access information from other rows or data tables, etc.  Note that there is a special <code>src_row</code> variable created that contains the current row number of the source datatable, so if you want to access other rows of data (e.g., the prior row), you can refer to that row number (be sure to avoid accessing data out of range!).

You can also skip the dest data table entirely, and just modify the source table directly -- in this case, use the <code>=src row</code> item to write the data back to the source data table after you have performed your computations.

== Simple Calc Alternative: Calc Columns ==

For the simple kind of calculation that we just performed, it turns out that there is a simpler alternative to the more powerful and flexible data calc loop: you can just enter an expression in a data column and it will automatically fill in that column with the result of that expression!  This is somewhat like entering a formula into a spreadsheet (except it is one formula for the whole column). 

To explore a calc column, select in the left browser the calc_val column of your DataCalcDest table.  Then click on the Calc button in its edit panel, which will enable the calc_expr field to be edited.  Type in <code>sse * cycles<code> here (note that you do not use any prefix, and just specify the name of the column to refer to the current cell value for that column.  

When you click Apply, it will perform the calculation, which you can see by clicking on the data table.  Note that there is a Calc All Rows button at the bottom -- this will force a manual recalculation of the table should there be any doubt about whether it has done the calculation.  There is also an auto_calc flag on the data table -- if you turn this off, then it will ONLY do the calculation when you hit the Calc All Rows button (or call this method from a program).

You can also \"lock in\" the current values by turning OFF the Calc flag on the calc_val column -- the current values will just remain as is.  This can be useful for setting values and cleaning up data -- you can create new columns to compute values, lock them in, and then copy them back to the original column, etc.

That's it for calc stuff for now -- next up is matrix data in [[.docs.MatrixDataDoc]].

</body>
</html>
";
  };
  taDoc @[5] {
   name="MatrixDataDoc";
   auto_open=0;
   text="<html>
<head></head>
<body>
= Matrix Data =

In this final section of the tutorial we explore some functions that can only be used on Matrix data (where the cells of a table contain multiple values).  We create random bit patterns based on prototypes, and then do various forms of analysis on these patterns.

As usual, create a new MatrixDataProg in programs, and click on Edit Program.

== Creating the Prototype Data Table ==

Do New Data Table in the objs (call it ProtoData), and do columns/NewCol and create a String column called Name (we'll format this data as is typical for input data presented to a network), and then do columns/NewColMatrix, specify a float type, with 2 dimensions, each of size 5 (i.e., a 5x5 matrix) -- call this one Input.

Now we'll write some code to add 4 random bit patterns to this prototype data.  Drag a <code>meth()</code> from the Var/Fun toolbox, set the object to ProtoData, and select the AddRows method (under Rows category) -- for the arg set 4 rows.

Duplicate that method call and select the InitValsToRowNo method (under Modify category), and set the arg to \"Name\" -- this will set the name of each prototype to the row number.

Now for the main call -- in the Misc Fun toolbox, drag the <code>data gen()</code> item onto prog_code (adding it to the end), and select the PermutedBinary_MinDist method under the Random section, which will make random bit patterns with a given number of items on (value = 1) with the rest off, ensuring that all the patterns have a minimum distance from each other (if possible).  For the args, set the data to the ProtoData item (use var_lookup or Ctrl+L), enter \"Input\" (incl quotes) for the col_nm, and let's set 6 bits on, with a minimum dist of 10 using the default HAMMING metric specified by the final three args (which you can just leave blank) -- the HAMMING metric counts a 1 for every cell in the matrix that is different, so with 6 bits on and the rest off, the maximum distance is 12.

You can now Init and Run, and check the ProtoData that was generated.  To get a better view of this data, click on View/New Grid View on the ProtoData -- select New Frame.  This allows you to see all the patterns at once, as colored squares.  If you want a better view of it, click on the new middle tab on the far right to bring up the view control for it, and enter 4 for the Rows (instead of the default of 10), and Apply.

Unless you have special powers, it probably won't be obvious whether these patterns do in fact overlap very little as we specified.  To check this, let's compute a distance matrix, which shows how far each pattern is from each other one.  Drag a <code>data anal()</code> from Misc Fun to the end.  Select the DistMatrixTable method (under the Distance category).  We need to create a new data table in objs to hold the results -- call it ProtoDists.  This is then the first arg.  Set view to true (just enter the word true into the expr), set ProtoData for src_data, and the data col nm = \"Input\", name col nm = \"Name\".  For the distance metric to use, type taMath::HAMMING (you can just type taMath:: and then do Ctrl+L to pick from a list of options).  That's it!

After you Init and Run, you should see a new frame with the distance information, which you'll notice has 8 items instead of the expected 4 -- what happened??  We forgot to reset the ProtoData table prior to adding 4 rows to it.  Drag a <code>reset rows</code> from Data to the first line of the prog_code, and select ProtoData, and run again.

Now, you should see that the minimum distance in the distance table is 10, exactly as you requested.  You can play with the parameters at this point to test things further if you want.

== Generating Random Permutations from the Prototypes ==

Next, we replicate these prototypes into a new data table, and then permute the patterns to create random variants of the prototypical patterns.  First, duplicate the ProtoData, and call it ItemData. Also, create a new data table called \"ItemDists\" to hold the distance information for these items.

Drag a <code>data proc()</code> from the Misc Fun toolbox to the end of the code, and choose ReplicateRows from the Copy category -- dest is ItemData, src is ProtoData, and n_repl = 6 (6 items per prototype).

Next, add a <code>data gen()</code> to the end, and select FlipBits under Random -- data is ItemData, col_nm is \"Input\", n_off is 1 and n_on is also 1.  This will flip one bit at random off from those that are on, and vice-versa for one bit that is currently off.

You can Init and Run at this point, and do a Grid View of the ItemData to see what it looks like -- you should be able to perceive the \"family resemblance\" of all the items within a prototype.

To see this structure in the distance matrix, copy the previous DistMatrixTable call to the end of the program, and change the relevant tables to their Item versions (ItemDists, ItemData), and also set the name_col_nm to \"\" (an empty string) -- this will generate a distance matrix without name labels, which is rendered as a single matrix cell and is more appropriate for larger numbers of items.

When you Run it now, you should see the ItemDists matrix has four distinct squares along the diagonal -- these are the 6 items within each prototype family that are very similar to each other, and distant from all the other items.

One flourish you can add to the distance display is to add height information to the grid view -- set the <code>blk hgt</code> field in the view control panel (right-most tab in middle panel) to 1 instead of 0, Apply, and then move the Rotx wheel on the left side of the 3d view -- you should see that the block height now also shows you the distance information.

== Dimensionality Reduction Analysis (Cluster Plot, PCA) ==

The last step in this tutorial is to apply a couple of useful dimensionality reduction techniques to these patterns.  First, we do a cluster plot, and then a principal components analysis (PCA).

Make two new data tables in objs called ItemCluster and ItemPCA.  Then drag a <code>data anal()</code> to the program and select Cluster under HighDim.  The clust_data is ItemCluster, set view to true, the src_data is ItemData, and the columns are \"Input\" and \"Name\" -- leave the metric information blank for the defaults.

When you Run now, you should see a tree-like clustering graph with items from each of the same prototype being clustered together on the right (leaf) side of the graph -- this means that these items are most similar to each other.

Next duplicate this last taDataAnal item and select the PCA2dPrjn method -- most of the args are the same, except you want to set the prjn_data to ItemPCA. When you Run this, you should see a plot with the items clustered together as points within a 2d space -- the X axis represents the projection of the individual patterns onto the first principal component of variance across the item patterns, while the Y axis shows the projection onto the 2nd principal component of variance.  This will provide the greatest separation among the points.  If you change the final two args to this PCA function to 3 and 4, you'll see that projecting onto the smaller components produces a more mixed distribution of points from the different prototypes -- it is picking up on the \"residual\" variation after factoring out the major differences due to the prototype effects.

To actually see what the eigenvectors for these patterns look like, you can create yet another new data table (ItemEigens) and duplicate the last program item, select PCAEigenTable, and set this new ItemEigens as the output pca_data table.  You should recognize blends of the different prototypes in the first few eigenvectors.


</body>
</html>
";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_0";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="MyRandomData";
    desc="randomly generated data";
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      desc="batch number (equivalent to subject number in a typical psych experiment)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] 0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="cond1";
      desc="condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;      };
     };
     String_Data @[2] {
      name="cond1_lbl";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] "LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";      };
     };
     int_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="cond2";
      desc="condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] 0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;      };
     };
     String_Data @[4] {
      name="cond2_lbl";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] "SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";      };
     };
     String_Data @[5] {
      name="cond_lbl";
      desc="both conditions in a single label";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] "LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";      };
     };
     int_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="cycles";
      desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] 20;19;15;18;20;23;14;26;14;27;26;27;26;24;28;20;16;25;23;24;33;25;24;24;26;34;24;25;24;29;31;31;31;32;22;31;30;39;39;32;      };
     };
     float_Data @[7] {
      name="sse";
      desc="summed-squared error (how much error did the network make)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [40] 10.625034;10.150656;8.856576;9.7241659;12.316755;9.7326889;11.256651;10.328391;9.4780741;9.7257805;16.534254;12.428211;11.99096;16.449669;13.521808;17.691784;12.483036;14.391989;15.113239;11.827643;11.670762;12.821155;14.318493;13.980083;15.345995;9.815876;11.138397;14.317153;13.611534;17.335604;15.713932;18.443752;15.848848;14.797788;15.957135;17.086241;20.092911;14.52883;17.183912;15.268249;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program @[0] {
   name="DataGenProg";
   tags=;
   desc="program for generating data";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
    DynEnumType @[0] {
     name="Cond1";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LOC";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="OBJ";
       value=1;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @[1] {
     name="Cond2";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="SRC";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="TRG";
       value=1;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="batch";
     var_type=T_Int;
     int_val=10;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="cond1";
     var_type=T_Int;
     int_val=2;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="cond2";
     var_type=T_Int;
     int_val=2;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[3] {
     name="cycles";
     var_type=T_Int;
     int_val=32;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[4] {
     name="sse";
     var_type=T_Real;
     real_val=15.26824872482482;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[5] {
     name="i";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK;
     reference=0;
     desc=;
    };
    ProgVar @[6] {
     name="MyRandomData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][0]$0$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[7] {
     name="cond1_lbl";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[0].types[0]$1$;
      value=1;
     };
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[8] {
     name="cond2_lbl";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[0].types[1]$2$;
      value=1;
     };
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[9] {
     name="cond_lbl";
     var_type=T_String;
     string_val="OBJ_TRG";
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=.projects[0].programs[0].vars[6]$3$;
    };
    ForLoop @[1] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      ForLoop @[0] {
       desc=;
       flags=;
       loop_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	ForLoop @[0] {
	 desc=;
	 flags=;
	 loop_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  AssignExpr @[0] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[7]$4$;
	   expr {
	    expr="cond1";
	   };
	  };
	  AssignExpr @[1] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[8]$5$;
	   expr {
	    expr="cond2";
	   };
	  };
	  AssignExpr @[2] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[9]$6$;
	   expr {
	    expr="(String)cond1_lbl + \"_\" + cond2_lbl";
	   };
	  };
	  AddNewDataRow @[3] {
	   desc=;
	   flags=;
	   data_var=$3$;
	  };
	  DataVarProg @[4] {
	   desc=;
	   flags=;
	   data_var=$3$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   var_1=.projects[0].programs[0].vars[1]$7$;
	   var_2=.projects[0].programs[0].vars[2]$8$;
	   var_3=.projects[0].programs[0].vars[0]$9$;
	   var_4=NULL;
	  };
	  DataVarProg @[5] {
	   desc=;
	   flags=;
	   data_var=$3$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   var_1=$4$;
	   var_2=$5$;
	   var_3=$6$;
	   var_4=NULL;
	  };
	  RandomCall @[6] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[3]$10$;
	   object_type=Random;
	   method=Random::Gauss;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="stdev";
	     required=0;
	     def_val=;
	     expr {
	      expr="5";
	     };
	    };
	   };
	  };
	  VarIncr @[7] {
	   desc=;
	   flags=;
	   var=$10$;
	   expr {
	    expr="20 + cond1 * 4 + cond2 * 6 + cond1 * cond2 * 1";
	   };
	  };
	  RandomCall @[8] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[4]$11$;
	   object_type=Random;
	   method=Random::Gauss;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="stdev";
	     required=0;
	     def_val=;
	     expr {
	      expr="2";
	     };
	    };
	   };
	  };
	  VarIncr @[9] {
	   desc=;
	   flags=;
	   var=$11$;
	   expr {
	    expr="10 + cond1 * 2 + cond2 * 3 + cond1 * cond2 * 1";
	   };
	  };
	  DataVarProg @[10] {
	   desc=;
	   flags=;
	   data_var=$3$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   var_1=$10$;
	   var_2=$11$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	 };
	 init {
	  expr="batch = 0";
	 };
	 test {
	  expr="batch < 10";
	 };
	 iter {
	  expr="batch++";
	 };
	};
       };
       init {
	expr="cond2 = 0";
       };
       test {
	expr="cond2 < 2";
       };
       iter {
	expr="cond2++";
       };
      };
     };
     init {
      expr="cond1 = 0";
     };
     test {
      expr="cond1 < 2";
     };
     iter {
      expr="cond1++";
     };
    };
   };
  };
  Program @[1] {
   name="DataAnalProg";
   tags=;
   desc="data analysis program";
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="grouped_data";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond1_group";
       desc="condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0;0;1;1;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond2_group";
       desc="condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0;1;0;1;       };
      };
      String_Data @[2] {
       name="cond_lbl_first";
       desc="both conditions in a single label";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] "LOC_SRC";"LOC_TRG";"OBJ_SRC";"OBJ_TRG";       };
      };
      float_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cycles_mean";
       desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 19.6;23.9;26.799999;31.799999;       };
      };
      float_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cycles_sem";
       desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 1.4696939;1.1298968;1.2183778;1.5114379;       };
      };
      float_Data @[5] {
       name="sse_mean";
       desc="summed-squared error (how much error did the network make)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 10.219478;14.24326;13.435506;16.492161;       };
      };
      float_Data @[6] {
       name="sse_sem";
       desc="summed-squared error (how much error did the network make)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.31249163;0.67172688;0.68811679;0.54908848;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[1] {
     name="float_cycles";
     desc="randomly generated data";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="batch";
       desc="batch number (equivalent to subject number in a typical psych experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond1";
       desc="condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;       };
      };
      String_Data @[2] {
       name="cond1_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";       };
      };
      int_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond2";
       desc="condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;       };
      };
      String_Data @[4] {
       name="cond2_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";       };
      };
      String_Data @[5] {
       name="cond_lbl";
       desc="both conditions in a single label";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";       };
      };
      int_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cycles";
       desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 20;19;15;18;20;23;14;26;14;27;26;27;26;24;28;20;16;25;23;24;33;25;24;24;26;34;24;25;24;29;31;31;31;32;22;31;30;39;39;32;       };
      };
      float_Data @[7] {
       name="sse";
       desc="summed-squared error (how much error did the network make)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 10.625034;10.150656;8.856576;9.7241659;12.316755;9.7326889;11.256651;10.328391;9.4780741;9.7257805;16.534254;12.428211;11.99096;16.449669;13.521808;17.691784;12.483036;14.391989;15.113239;11.827643;11.670762;12.821155;14.318493;13.980083;15.345995;9.815876;11.138397;14.317153;13.611534;17.335604;15.713932;18.443752;15.848848;14.797788;15.957135;17.086241;20.092911;14.52883;17.183912;15.268249;       };
      };
      float_Data @[8] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cycles_flt";
       desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 20;19;15;18;20;23;14;26;14;27;26;27;26;24;28;20;16;25;23;24;33;25;24;24;26;34;24;25;24;29;31;31;31;32;22;31;30;39;39;32;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[2] {
     name="data_labeled";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="MyRandomData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$0$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="grouped_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[1].objs[0]$12$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="r";
     var_type=T_Real;
     real_val=0.4739360809326172;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[3] {
     name="float_cycles";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[1].objs[1]$13$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[4] {
     name="data_labeled";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[1].objs[2]$14$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    DataGroupProg @[0] {
     desc=;
     flags=;
     src_data_var=.projects[0].programs[1].vars[0]$15$;
     dest_data_var=.projects[0].programs[1].vars[1]$16$;
     group_spec {
      name="group_spec";
      ops {
       name=;
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="cond1";
	agg {name="Aggregate": op=GROUP: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="cond2";
	agg {name="Aggregate": op=GROUP: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="cond_lbl";
	agg {name="Aggregate": op=FIRST: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="cycles";
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[4] {
	col_name="cycles";
	agg {name="Aggregate": op=SEM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[5] {
	col_name="sse";
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[6] {
	col_name="sse";
	agg {name="Aggregate": op=SEM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[1].vars[3]$17$;
     method=taBase::CopyFrom;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=TAPtr;
       type="taBase*";
       name="cpy_from";
       required=0;
       def_val=;
       expr {
	expr="MyRandomData";
       };
      };
     };
    };
    MethodCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$17$;
     method=DataTable::NewColFloat;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="col_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"cycles_flt\"";
       };
      };
     };
    };
    UserScript @[3] {
     desc=;
     flags=;
     script {
      expr="float_cycles[\"cycles_flt\"].CopyFromCol_Robust(float_cycles[\"cycles\"]);";
     };
    };
    MathCall @[4] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[2]$18$;
     object_type=taMath_float;
     method=taMath_float::vec_correl;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="const float_Matrix*";
       name="vec";
       required=0;
       def_val=;
       expr {
	expr="MyRandomData[\"sse\"].ar";
       };
      };
      ProgArg @[1] {
       arg_type=const_float_Matrix_ptr;
       type="const float_Matrix*";
       name="oth_vec";
       required=0;
       def_val=;
       expr {
	expr="float_cycles[\"cycles_flt\"].ar";
       };
      };
     };
    };
   };
  };
  Program @[2] {
   name="DataBaseProg";
   tags=;
   desc="program for data-base style operations";
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="SelectedData";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="batch";
       desc="batch number (equivalent to subject number in a typical psych experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] 0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond1";
       desc="condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;       };
      };
      String_Data @[2] {
       name="cond1_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] "LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";       };
      };
      int_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond2";
       desc="condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] 0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;       };
      };
      String_Data @[4] {
       name="cond2_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] "SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";       };
      };
      String_Data @[5] {
       name="cond_lbl";
       desc="both conditions in a single label";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] "LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";       };
      };
      int_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cycles";
       desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] 20;19;15;18;20;23;14;26;14;27;26;27;26;24;28;20;16;25;23;24;       };
      };
      float_Data @[7] {
       name="sse";
       desc="summed-squared error (how much error did the network make)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [20] 10.625034;10.150656;8.856576;9.7241659;12.316755;9.7326889;11.256651;10.328391;9.4780741;9.7257805;16.534254;12.428211;11.99096;16.449669;13.521808;17.691784;12.483036;14.391989;15.113239;11.827643;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[1] {
     name="CondData";
     desc=;
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="cond_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] "LOC_SRC";"LOC_TRG";"OBJ_SRC";"OBJ_TRG";       };
      };
      float_Data @[1] {
       name="cycle_off";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 30;20;25;22;       };
      };
      float_Data @[2] {
       name="n_objs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 2;1;3;2;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[2] {
     name="OnlySomeConds";
     desc=;
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="cond_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] "LOC_SRC";"LOC_TRG";"OBJ_SRC";"OBJ_SRC";       };
      };
      float_Data @[1] {
       name="cycle_off";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 30;20;25;22;       };
      };
      float_Data @[2] {
       name="n_objs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 2;1;3;2;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[3] {
     name="JoinedData";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="batch";
       desc="batch number (equivalent to subject number in a typical psych experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 9;3;8;1;5;7;2;0;6;4;3;1;2;0;4;9;8;7;6;5;9;9;8;8;7;7;6;6;5;5;4;4;3;3;2;2;1;1;0;0;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond1";
       desc="condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;       };
      };
      String_Data @[2] {
       name="cond1_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";       };
      };
      int_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond2";
       desc="condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;       };
      };
      String_Data @[4] {
       name="cond2_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";       };
      };
      String_Data @[5] {
       name="cond_lbl";
       desc="both conditions in a single label";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";       };
      };
      int_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cycles";
       desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 27;18;14;19;23;26;15;20;14;20;24;27;26;26;28;24;23;25;16;20;29;29;24;24;25;25;24;24;34;34;26;26;24;24;24;24;25;25;33;33;       };
      };
      float_Data @[7] {
       name="sse";
       desc="summed-squared error (how much error did the network make)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 9.7257805;9.7241659;9.4780741;10.150656;9.7326889;10.328391;8.856576;10.625034;11.256651;12.316755;16.449669;12.428211;11.99096;16.534254;13.521808;11.827643;15.113239;14.391989;12.483036;17.691784;17.335604;17.335604;13.611534;13.611534;14.317153;14.317153;11.138397;11.138397;9.815876;9.815876;15.345995;15.345995;13.980083;13.980083;14.318493;14.318493;12.821155;12.821155;11.670762;11.670762;       };
      };
      float_Data @[8] {
       name="cycle_off";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 30;30;30;30;30;30;30;30;30;30;20;20;20;20;20;20;20;20;20;20;25;22;25;22;25;22;25;22;25;22;25;22;25;22;25;22;25;22;25;22;       };
      };
      float_Data @[9] {
       name="n_objs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 2;2;2;2;2;2;2;2;2;2;1;1;1;1;1;1;1;1;1;1;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="MyRandomData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$0$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="SelectedData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[2].objs[0]$19$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="CondData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[2].objs[1]$20$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[3] {
     name="JoinedData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[2].objs[3]$21$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[4] {
     name="OnlySomeConds";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[2].objs[2]$22$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    DataSelectRowsProg @[0] {
     desc=;
     flags=;
     src_data_var=.projects[0].programs[2].vars[0]$23$;
     dest_data_var=.projects[0].programs[2].vars[1]$24$;
     select_spec {
      name="select_spec";
      ops {
       name=;
       el_typ=DataSelectEl;
       el_def=0;
       DataSelectEl @[0] {
	col_name="cond1_lbl";
	rel=EQUAL;
	use_var=0;
	cmp 9 0="LOC";
	var=NULL;
       };
      };
      comb_op=AND;
     };
    };
    DataJoinProg @[1] {
     desc=;
     flags=;
     src_data_var=$23$;
     dest_data_var=.projects[0].programs[2].vars[3]$25$;
     src_b_data_var=.projects[0].programs[2].vars[4]$26$;
     join_spec {
      name="join_spec";
      col_a {
       col_name="cond_lbl";
      };
      col_b {
       col_name="cond_lbl";
      };
      type=INNER;
      nomatch_warn=1;
     };
    };
   };
  };
  Program @[3] {
   name="DataCalcLoopProg";
   tags=;
   desc="exploration of the data calc loop system";
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="DataCalcDest";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="batch";
       desc="batch number (equivalent to subject number in a typical psych experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;0;1;2;3;4;5;6;7;8;9;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond1";
       desc="condition numbers for condition1: 0 or 1 (0 = LOCation input, 1 = OBJect input)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;       };
      };
      String_Data @[2] {
       name="cond1_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"LOC";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";"OBJ";       };
      };
      int_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cond2";
       desc="condition2: 0 or 1 (0 = SOURCE item, 1 = TARGET item)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;       };
      };
      String_Data @[4] {
       name="cond2_lbl";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"SRC";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";"TRG";       };
      };
      String_Data @[5] {
       name="cond_lbl";
       desc="both conditions in a single label";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] "LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_SRC";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"LOC_TRG";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_SRC";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";"OBJ_TRG";       };
      };
      int_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="cycles";
       desc="number of cycles the network required (i.e., reaction time in a typical experiment)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 20;19;15;18;20;23;14;26;14;27;26;27;26;24;28;20;16;25;23;24;33;25;24;24;26;34;24;25;24;29;31;31;31;32;22;31;30;39;39;32;       };
      };
      float_Data @[7] {
       name="sse";
       desc="summed-squared error (how much error did the network make)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [40] 10.625034;10.150656;8.856576;9.7241659;12.316755;9.7326889;11.256651;10.328391;9.4780741;9.7257805;16.534254;12.428211;11.99096;16.449669;13.521808;17.691784;12.483036;14.391989;15.113239;11.827643;11.670762;12.821155;14.318493;13.980083;15.345995;9.815876;11.138397;14.317153;13.611534;17.335604;15.713932;18.443752;15.848848;14.797788;15.957135;17.086241;20.092911;14.52883;17.183912;15.268249;       };
      };
      float_Data @[8] {
       name="calc_val";
       col_flags=SAVE_ROWS|SAVE_DATA|CALC;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr="sse * cycles";
       };
       ar {
	name=;
	      [40] 212.50069;192.86246;132.84863;175.03499;246.33511;223.85184;157.59311;268.53818;132.69304;262.59607;429.89059;335.56171;311.76495;394.79205;378.61063;353.83569;199.72858;359.79971;347.60449;283.86343;385.13516;320.52887;343.64383;335.522;398.99588;333.73978;267.32153;357.92883;326.67682;502.73251;487.1319;571.75635;491.3143;473.52921;351.05698;529.67346;602.78735;566.62433;670.17261;488.58395;       };
      };
     };
     data_flags=SAVE_ROWS|HAS_CALCS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="MyRandomData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$0$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="DataCalcDest";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[3].objs[0]$27$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[3].vars[1]$28$;
     method=DataTable::Copy_NoData;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_DataTable_ref;
       type="const DataTable&";
       name="cp";
       required=0;
       def_val=;
       expr {
	expr="MyRandomData";
       };
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$28$;
     method=DataTable::NewColFloat;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="col_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"calc_val\"";
       };
      };
     };
    };
    DataCalcLoop @[2] {
     desc=;
     flags=;
     src_data_var=.projects[0].programs[3].vars[0]$29$;
     dest_data_var=$28$;
     src_cols {
      name="src_cols";
      el_typ=DataOpEl;
      el_def=0;
      DataOpEl @[0] {
       col_name="cycles";
      };
      DataOpEl @[1] {
       col_name="sse";
      };
     };
     dest_cols {
      name="dest_cols";
      el_typ=DataOpEl;
      el_def=0;
      DataOpEl @[0] {
       col_name="calc_val";
      };
     };
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      DataCalcAddDestRow @[0] {
       desc=;
       flags=;
       src_data_var=$29$;
       dest_data_var=$28$;
      };
      DataCalcCopyCommonCols @[1] {
       desc=;
       flags=;
       src_data_var=$29$;
       dest_data_var=$28$;
       only_named_cols=0;
      };
      AssignExpr @[2] {
       desc=;
       flags=;
       result_var=.projects[0].programs[3].prog_code[2].dest_col_vars[0]$30$;
       expr {
	expr="s_sse * s_cycles";
       };
      };
      DataCalcSetDestRow @[3] {
       desc=;
       flags=;
       src_data_var=$29$;
       dest_data_var=$28$;
      };
     };
     src_col_vars {
      name=;
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="s_cycles";
       var_type=T_Int;
       int_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|USED;
       reference=0;
       desc=;
      };
      ProgVar @[1] {
       name="s_sse";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|USED;
       reference=0;
       desc=;
      };
     };
     dest_col_vars {
      name=;
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="d_calc_val";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|USED;
       reference=0;
       desc=;
      };
     };
    };
   };
  };
  Program @[4] {
   name="MatrixDataProg";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="ProtoData";
     desc=;
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="Name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] "0";"1";"2";"3";       };
      };
      float_Data @[1] {
       name="Input";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 5;5;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5 5 4] 0;1;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;1;0;1;1;0;0;0;0;0;0;1;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;1;0;0;0;1;1;0;0;1;0;1;0;1;0;0;0;0;0;0;0;0;0;0;1;1;1;0;1;0;0;0;0;0;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[1] {
     name="ItemData";
     desc=;
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="Name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [24] "0";"0";"0";"0";"0";"0";"1";"1";"1";"1";"1";"1";"2";"2";"2";"2";"2";"2";"3";"3";"3";"3";"3";"3";       };
      };
      float_Data @[1] {
       name="Input";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 5;5;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5 5 24] 0;1;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;1;0;1;1;0;0;0;0;0;1;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;1;0;1;0;0;0;1;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;1;1;0;0;0;0;1;0;1;1;0;0;0;0;0;1;0;0;1;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;1;0;0;0;0;0;0;1;1;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;1;0;1;0;0;1;1;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;1;0;1;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;1;0;1;0;1;0;0;0;1;1;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;1;0;1;0;0;1;1;1;0;0;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;0;1;1;1;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;1;0;1;0;1;0;0;0;1;0;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;1;0;1;0;0;0;0;0;0;0;0;0;0;1;0;1;0;1;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;1;1;0;0;1;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;1;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;1;1;1;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;1;1;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;1;1;1;0;1;0;0;0;0;0;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="N_ROWS";
       value 2 0=1;
      };
      UserDataItem @[1] {
       name="AUTO_SCALE";
       value 1 0=1;
      };
     };
     name="ProtoDists";
     desc=;
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="Name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] "0";"1";"2";"3";       };
      };
      float_Data @[1] {
       name="0";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0;10;10;10;       };
      };
      float_Data @[2] {
       name="1";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 10;0;10;10;       };
      };
      float_Data @[3] {
       name="2";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 10;10;0;10;       };
      };
      float_Data @[4] {
       name="3";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 10;10;10;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[3] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="N_ROWS";
       value 2 0=1;
      };
      UserDataItem @[1] {
       name="AUTO_SCALE";
       value 1 0=1;
      };
     };
     name="ItemDists";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="TOP_ZERO";
	 value 1 0=1;
	};
       };
       name="ItemData_DistMatrix";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 24;24;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [24 24 1] 0;4;4;4;4;2;10;10;8;8;8;8;10;10;10;10;10;10;10;10;10;10;8;12;4;0;4;4;4;2;12;12;10;12;12;12;10;10;10;10;10;10;10;10;10;10;8;12;4;4;0;4;4;4;12;10;8;10;10;10;10;10;10;10;10;10;10;8;8;8;6;10;4;4;4;0;2;4;12;10;8;10;10;10;10;10;10;10;10;10;12;12;12;12;10;12;4;4;4;2;0;4;12;10;8;10;10;10;8;8;8;8;8;8;12;12;12;12;10;10;2;2;4;4;4;0;10;12;10;10;10;10;10;10;10;10;10;10;10;10;10;10;8;12;10;12;12;12;12;10;0;4;4;4;4;4;10;8;8;6;8;8;6;8;10;6;8;8;10;12;10;10;10;12;4;0;2;4;4;4;8;10;10;8;10;10;8;8;8;8;10;10;8;10;8;8;8;10;4;2;0;4;4;4;8;8;8;6;8;8;8;8;10;8;10;10;8;12;10;10;10;10;4;4;4;0;4;4;10;10;10;8;10;10;8;8;10;8;10;10;8;12;10;10;10;10;4;4;4;4;0;4;12;12;12;10;12;12;6;6;8;6;10;8;8;12;10;10;10;10;4;4;4;4;4;0;10;8;8;8;10;8;10;10;10;10;10;10;10;10;10;10;8;10;10;8;8;10;12;10;0;4;4;4;4;4;12;12;10;12;12;10;10;10;10;10;8;10;8;10;8;10;12;8;4;0;0;4;2;0;10;12;12;10;10;8;10;10;10;10;8;10;8;10;8;10;12;8;4;0;0;4;2;0;10;12;12;10;10;8;10;10;10;10;8;10;6;8;6;8;10;8;4;4;4;0;4;4;8;10;10;8;8;6;10;10;10;10;8;10;8;10;8;10;12;10;4;2;2;4;0;2;8;10;10;10;8;6;10;10;10;10;8;10;8;10;8;10;12;8;4;0;0;4;2;0;10;12;12;10;10;8;10;10;10;12;12;10;6;8;8;8;6;10;12;10;10;8;8;10;0;2;4;2;4;4;10;10;8;12;12;10;8;8;8;8;6;10;12;12;12;10;10;12;2;0;2;2;4;4;10;10;8;12;12;10;10;8;10;10;8;10;10;12;12;10;10;12;4;2;0;4;4;4;10;10;8;12;12;10;6;8;8;8;6;10;12;10;10;8;10;10;2;2;4;0;4;4;8;8;6;10;10;8;8;10;10;10;10;10;12;10;10;8;8;10;4;4;4;4;0;4;12;12;10;12;10;12;8;10;10;10;8;10;10;8;8;6;6;8;4;4;4;4;4;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[4] {
     name="ItemCluster";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="X_AXIS";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="MAX";
	 value 6 0=14.42077922821045;
	};
       };
       name="X";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [175] 0;0;0;0;0;3.1257772;3.1257772;5.1257772;3.1257772;3.1257772;3.1257772;3.1257772;5.1257772;5.1257772;6.5399909;5.1257772;5.1257772;5.1257772;5.1257772;6.5399909;5.1257772;5.1257772;5.1257772;5.1257772;6.5399909;5.1257772;5.1257772;5.1257772;3.1257772;3.1257772;3.1257772;5.1257772;5.1257772;6.5399909;5.1257772;5.1257772;5.1257772;5.1257772;6.5399909;5.1257772;5.1257772;5.1257772;3.1257772;3.1257772;0;0;0;3.1257772;3.1257772;6.1367817;6.1367817;8.1367817;6.1367817;6.1367817;6.1367817;6.1367817;8.1367817;6.1367817;6.1367817;6.1367817;6.1367817;8.1367817;8.1367817;9.5509949;8.1367817;8.1367817;8.1367817;8.1367817;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;9.5509949;8.1367817;8.1367817;6.1367817;6.1367817;3.1257772;3.1257772;3.1257772;6.1367817;6.1367822;9.1255951;9.1255951;11.125595;9.1255951;9.1255951;9.1255951;9.1255951;11.125595;9.1255951;9.1255951;9.1255951;9.1255951;11.125595;9.1255951;9.1255951;9.1255951;9.1255951;11.125595;9.1255951;9.1255951;9.1255951;9.1255951;11.125595;11.125595;12.539808;11.125595;11.125595;11.125595;11.125595;12.539808;11.125595;11.125595;11.125595;9.1255951;9.1255951;6.1367822;6.1367817;6.1367822;9.1255951;9.1255951;11.125595;9.1255951;9.1255951;9.1255951;9.1255951;11.125595;9.1255951;9.1255951;9.1255951;9.1255951;11.125595;11.125595;12.539808;11.125595;11.125595;11.125595;11.125595;12.539808;11.125595;11.125595;11.125595;11.125595;12.539808;11.125595;11.125595;11.125595;11.125595;12.539808;11.125595;11.125595;11.125595;9.1255951;9.1255951;6.1367822;6.1367817;3.1257772;3.1257772;0;0;0;0;0;       };
      };
      float_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="PLOT_1";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="MAX";
	 value 6 0=23.79999923706055;
	};
	UserDataItem @[2] {
	 name="MIN";
	 value 6 0=0.2000000029802322;
	};
       };
       name="Y";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [175] 7.6166668;7.6166668;7.6166668;7.6166668;2.6666667;2.6666667;0.5;0.5;0.5;0.5;2.6666667;2.5;2.5;1.5;1.5;1.5;1.5;2.5;2.5;2.5;2.5;2.5;2.5;3.5;3.5;3.5;3.5;2.5;2.5;2.6666667;5;5;4.5;4.5;4.5;4.5;5;5.5;5.5;5.5;5.5;5;5;2.6666667;2.6666667;7.6166668;12.566667;12.566667;7.8333335;7.8333335;6.5;6.5;6.5;6.5;7.8333335;7.5;7.5;7.5;7.5;7.8333335;9.5;9.5;8.5;8.5;8.5;8.5;9.5;10.5;10.5;9.5;9.5;9.5;9.5;10.5;10.5;10.5;10.5;10.5;10.5;11.5;11.5;11.5;11.5;10.5;10.5;9.5;9.5;7.8333335;7.8333335;12.566667;17.299999;17.299999;14.6;14.6;12.5;12.5;12.5;12.5;14.6;13.5;13.5;13.5;13.5;14.6;14.5;14.5;14.5;14.5;14.6;15.5;15.5;15.5;15.5;14.6;17;17;16.5;16.5;16.5;16.5;17;17.5;17.5;17.5;17.5;17;17;14.6;14.6;17.299999;20;20;18.5;18.5;18.5;18.5;20;19.5;19.5;19.5;19.5;20;22;22;20.5;20.5;20.5;20.5;22;21.5;21.5;21.5;21.5;22;22.5;22.5;22.5;22.5;22;23.5;23.5;23.5;23.5;22;22;20;20;17.299999;17.299999;12.566667;12.566667;7.6166668;7.6166668;7.6166668;7.6166668;       };
      };
      String_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="PLOT_2";
	 value 1 0=1;
	};
       };
       name="Label";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [175] ;;;;;;;"0";;;;;;;"0";;;;;"0";;;;;"0";;;;;;;;;"0";;;;;"0";;;;;;;;;;;;;"2";;;;;"2";;;;;;;"2";;;;;;;"2";;;;;"2";;;;;"2";;;;;;;;;;;;;;;"1";;;;;"1";;;;;"1";;;;;"1";;;;;;;"1";;;;;"1";;;;;;;;;;;"3";;;;;"3";;;;;;;"3";;;;;"3";;;;;"3";;;;;"3";;;;;;;;;;;;;;;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[5] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="PLOT_STYLE";
       value 9 0="POINTS";
      };
     };
     name="ItemPCA";
     desc=;
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="PLOT_2";
	 value 1 0=1;
	};
       };
       name="Name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [24] "0";"0";"0";"0";"0";"0";"1";"1";"1";"1";"1";"1";"2";"2";"2";"2";"2";"2";"3";"3";"3";"3";"3";"3";       };
      };
      float_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="X_AXIS";
	 value 1 0=1;
	};
       };
       name="x_prjn";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [24] -0.24508342;-0.055133317;0.080080777;0.14336033;0.11473627;-0.2872735;-0.49527052;0.78000599;0.20999052;-0.20469405;-0.13504542;-0.43327627;1.2376177;-0.60301316;-0.60301316;0.36486822;-0.25415975;-0.60301316;-0.37942171;-0.011238756;0.64496535;-0.33161518;-0.37087113;-0.2283015;       };
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="PLOT_1";
	 value 1 0=1;
	};
       };
       name="y_prjn";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [24] -0.25117224;-0.81240624;0.17246984;0.90234572;0.39395204;-0.498797;-0.29284555;0.13025233;0.16395372;-0.2670109;0.19174431;0.089141525;-0.26801163;0.056126736;0.056126736;-0.17321244;0.11016076;0.056126736;-0.081173822;0.013585996;0.019531906;-0.067865476;-0.0015239269;0.48918307;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[6] {
     name="ItemEigens";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="Input_PCAEigens";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 5;5;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5 5 25] 0;0.0057832794;-0.1652265;-0.38529229;-0.027065465;0.16343965;0.038918693;0.081892632;-0.067622714;0.34130692;-0.083841413;0.33035183;0.092654623;0.17083015;-0.27886733;-0.16675211;-0.12331592;0.076855846;-0.20142375;0.34801653;0.3693662;0.025846252;-0.2908648;0;-0.059008505;0;-0.30614361;-0.0044028871;-0.11440807;-0.097973958;-0.10513757;0.28507203;0.3843134;-0.018440036;-0.20287269;0.043740097;-0.24930511;0.36275023;-0.086665623;-0.16831437;-0.18873399;0.22828349;-0.14158873;-0.082404278;-0.19822578;0.16384828;0.19170427;-0.11596587;0;0.37369749;0;0.25859109;-0.38088945;-0.084215507;-0.33617893;0.054778811;-0.031645492;0.118546;-0.20954515;0.010618936;0.0036524332;0.050125163;0.17346862;-0.052073613;0.20830725;0.31727797;0.24706405;-0.38598451;0.34233767;-0.035066646;0.033192199;0.038861822;-0.20976856;0;-0.22675483;0;-0.051772986;0.02307605;0.046327498;-0.24523093;-0.013090753;-0.36379576;-0.046471588;-0.086163267;0.02230691;0.63022983;-0.048028607;0.04050884;0.069132909;0.0022591888;0.032864153;-0.3353188;0.064497001;-0.014942376;-0.024762182;0.060214307;0.5112865;-0.025974235;0;0.041849878;0;-0.2942991;0.047516689;0.0019807999;-0.21317364;-0.52678287;0.063115112;-0.0056197965;-0.18807383;0.04949804;-0.051500924;0.007490111;0.088153489;0.59654707;0.11574449;0.13045748;0.035697658;0.29712281;0.11714913;-0.030512895;-0.0177995;-0.17382465;-0.057446826;0;-0.10742023;0;0.058778796;0.47922015;-0.015358423;-0.12824704;0.23184292;0.24314034;0.023017097;-0.73316079;0.021119745;0.14593092;-0.028359473;-0.12038607;-0.099186257;0.054398555;-0.043018162;-0.028098606;-0.043468688;-0.085065283;-0.00073813309;0.015060578;-0.19219561;-0.00778209;0;-0.02140457;0;-0.20506039;0.087591857;0.19896095;-0.16276665;0.27783021;-0.34126526;-0.21175893;-0.13312869;0.082817227;-0.36098829;-0.059673108;0.074320629;0.27658758;0.054964483;-0.26236254;0.34941366;-0.20486255;-0.05694649;0.11548824;0.058939956;0.27604759;0.27020648;0;0.006668956;0;0.086136155;0.084081888;0.078836799;0.42357275;-0.48580685;-0.11999004;-0.19538172;-0.33423159;-0.0996482;-0.18309401;0.17212667;0.095845029;-0.2714406;-0.060878068;0.042058993;0.13489582;-0.0085532004;-0.07721325;0.050861716;0.065974355;0.38095516;-0.22590028;0;-0.10411362;0;-0.01533362;-0.092696711;-0.17799576;0.4245255;-0.049144514;0.012642929;0.2128773;-0.061404511;-0.13474937;0.19234474;-0.19885479;0.035819404;0.20244496;0.42678249;-0.41314274;-0.11283061;-0.23052338;0.11592597;0.3350682;-0.088824868;-0.013236078;0.047511157;0;-0.18949287;0;-0.047466498;-0.048638213;-0.18437603;-0.19063663;-0.12399807;-0.15179077;0.095647506;-0.034809019;0.11234085;-0.19746302;-0.14331239;0.2870166;-0.42843601;0.37098292;0.00079553621;-0.1763164;0.2692498;-0.20150922;-0.019986449;0.26724526;-0.080296814;0.37597913;0;-0.191668;0;-0.43372923;0.10105871;0.17850381;0.069451623;0.32303521;0.074641705;-0.21481732;0.07510484;0.085471056;-0.050076127;-0.023534754;0.40989763;-0.1966645;0.15296939;0.040204011;-0.14759323;0.16005298;0.24186715;0.10866784;-0.20481828;-0.023658348;-0.43422133;0;-0.11146872;0;0.068927862;-0.15194495;0.099648744;0.034328859;0.12175443;0.46450135;-0.10377508;0.048843805;0.079450011;-0.089345716;-0.15708144;-0.051084094;0.21347967;0.30294847;0.24247175;-0.086366422;-0.041094467;-0.56015736;-0.10039234;-0.075268216;0.34557599;-0.084279768;0;-0.11998199;0;-0.21704246;0.061351899;-0.089810826;0.10270203;-0.14136451;-0.13940398;-0.008388944;0.067765616;0.40710953;0.36018306;0.095858783;0.18241826;-0.096958682;-0.04943068;0.18290021;0.32488382;-0.29263264;-0.37336865;0.077633023;-0.31067938;-0.23644409;0.1103703;0;-0.04448827;0;0.14119428;-0.23264812;0.19589539;-0.33153433;-0.08585377;0.23641846;-0.26992539;0.021842234;-0.32932338;0.24880448;0.12536956;0.10464629;-0.13796155;-0.038795024;-0.31460711;0.26710209;0.23755866;-0.16355257;0.37810841;-0.11361891;-0.075662643;0.043288;0;-0.080651477;0;-0.10338648;0.055147469;-0.1989163;0.13659608;0.31762263;-0.29616401;0.2720755;-0.017551171;-0.54351419;0.035475671;0.18314613;0.015375433;0.11967552;0.031481985;0.26825032;0.23989016;0.28930122;-0.2404875;-0.052946005;-0.055149876;-0.017542066;-0.066064;0;-0.1944301;0;-0.070990928;-0.011355999;0.13464724;0.034048259;-0.037514713;-0.10767055;-0.19563502;-0.014091521;-0.29109532;-0.016850406;-0.25582391;0.065366641;0.054958794;-0.039873902;0.41238517;-0.19004099;-0.2670725;-0.13491584;0.44113234;0.35994986;-0.26895282;-0.026080208;0;0.26802281;0;-0.13204257;0.014694509;0.0073246881;-0.096176654;-0.033391941;0.19589561;0.22760308;-0.081633583;-0.15403195;-0.19541693;0.3190957;0.16140667;-0.0091010444;-0.25097328;0.17554684;-0.36693543;-0.18570273;0.081169903;0.2468251;-0.37138143;0.20812443;0.41013205;0;-0.072982714;0;0.18870632;-0.24001698;-0.37576759;0.10654362;0.094349392;-0.071625382;-0.16806208;-0.26133099;0.10709862;-0.080414377;-0.35050592;0.10769352;0.037897341;-0.09103588;0.13234407;0.069208868;0.3205986;0.082510546;0.13547422;-0.39857724;0.079463869;0.083863415;0;0.39885414;0;-0.1360209;-0.091790862;-0.32714924;0.20891421;0.11105675;0.22971609;-0.53647673;-0.03196276;-0.1532339;0.19780096;0.16833661;0.19144244;0.0964275;-0.061973967;0.02935908;0.0049301218;-0.10089964;0.16399989;-0.32818943;0.25102124;-0.018564681;0.32980087;0;-0.099702001;0;-0.11544882;0.41674557;-0.47800988;-0.22364882;-0.1019796;0.14632934;-0.1354645;0.29986519;-0.040655494;-0.029312635;-0.077518433;-0.31143028;-0.13272257;0.1376002;0.13780174;0.20230152;-0.041049805;0.1569234;0.29990312;0.0060581467;0.26670676;-0.051125072;0;-0.048901431;0;-0.53066528;-0.44519311;0.010763383;0.0093419226;0.0043110223;0.0080181574;0.0087560955;-0.2190598;0.008750678;0.0071258694;-0.2240103;-0.51671153;-0.21903166;-0.2134188;0.0093184672;0.010606912;0.010431349;0.0093172081;0.0087286802;0.010732419;0.0059361891;0.010157308;0;-0.24556392;0;-0.22872829;-0.19187813;-0.0046123159;-0.0040093311;-0.0018503951;-0.0034532698;-0.0037609928;-0.094413154;-0.00376078;-0.003063574;0.52076328;-0.2227181;-0.094409533;0.49611011;-0.0040116142;-0.0045682746;-0.0044835601;-0.0040119486;-0.0037629213;-0.0046166806;-0.0025618677;-0.0043660467;0;0.57086909;0;-0.015067717;-0.012693672;-0.3076694;-0.26739749;-0.12339797;-0.23017494;-0.25080046;-0.0062555564;-0.25080967;-0.20424268;-0.015613099;-0.014647934;-0.0062086;-0.014899325;-0.26743761;-0.30449593;-0.29898465;-0.26743889;-0.25084731;-0.30771703;-0.1707208;-0.29112536;0;-0.017124094;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;-1;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ProtoData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[0]$31$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="ProtoDists";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[2]$32$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="ItemData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[1]$33$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[3] {
     name="ItemDists";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[3]$34$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[4] {
     name="ItemCluster";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[4]$35$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[5] {
     name="ItemPCA";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[5]$36$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[6] {
     name="ItemEigens";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[6]$37$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=.projects[0].programs[4].vars[0]$38$;
    };
    MethodCall @[1] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$38$;
     method=DataTable::AddRows;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n";
       required=0;
       def_val="1";
       expr {
	expr="4";
       };
      };
     };
    };
    MethodCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$38$;
     method=DataTable::InitValsToRowNo;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=Variant;
       type="Variant";
       name="col";
       required=0;
       def_val=;
       expr {
	expr="\"Name\"";
       };
      };
     };
    };
    DataGenCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataGen;
     method=taDataGen::PermutedBinary_MinDist;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="data";
       required=1;
       def_val=;
       expr {
	expr="ProtoData";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Input\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_on";
       required=1;
       def_val=;
       expr {
	expr="6";
       };
      };
      ProgArg @[3] {
       arg_type=float;
       type="float";
       name="dist";
       required=1;
       def_val=;
       expr {
	expr="10";
       };
      };
      ProgArg @[4] {
       arg_type=taMath::DistMetric;
       type="taMath::DistMetric";
       name="metric";
       required=0;
       def_val="taMath::HAMMING";
       expr {
	expr=;
       };
      };
      ProgArg @[5] {
       arg_type=bool;
       type="bool";
       name="norm";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=float;
       type="float";
       name="tol";
       required=0;
       def_val="0.0f";
       expr {
	expr=;
       };
      };
     };
    };
    DataAnalCall @[4] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataAnal;
     method=taDataAnal::DistMatrixTable;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dist_mat";
       required=1;
       def_val=;
       expr {
	expr="ProtoDists";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="view";
       required=1;
       def_val=;
       expr {
	expr="true";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data";
       required=1;
       def_val=;
       expr {
	expr="ProtoData";
       };
      };
      ProgArg @[3] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="data_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Input\"";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Name\"";
       };
      };
      ProgArg @[5] {
       arg_type=taMath::DistMetric;
       type="taMath::DistMetric";
       name="metric";
       required=1;
       def_val=;
       expr {
	expr="taMath::HAMMING";
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="norm";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=float;
       type="float";
       name="tol";
       required=0;
       def_val="0.0f";
       expr {
	expr=;
       };
      };
     };
    };
    DataProcCall @[5] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::ReplicateRows;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=0;
       def_val=;
       expr {
	expr="ItemData";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=0;
       def_val=;
       expr {
	expr="ProtoData";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_repl";
       required=0;
       def_val=;
       expr {
	expr="6";
       };
      };
     };
    };
    DataGenCall @[6] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataGen;
     method=taDataGen::FlipBits;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="ItemData";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="col_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"Input\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_off";
       required=0;
       def_val=;
       expr {
	expr="1";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="n_on";
       required=0;
       def_val=;
       expr {
	expr="1";
       };
      };
     };
    };
    DataAnalCall @[7] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataAnal;
     method=taDataAnal::DistMatrixTable;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dist_mat";
       required=1;
       def_val=;
       expr {
	expr="ItemDists";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="view";
       required=1;
       def_val=;
       expr {
	expr="true";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data";
       required=1;
       def_val=;
       expr {
	expr="ItemData";
       };
      };
      ProgArg @[3] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="data_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Input\"";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"\"";
       };
      };
      ProgArg @[5] {
       arg_type=taMath::DistMetric;
       type="taMath::DistMetric";
       name="metric";
       required=1;
       def_val=;
       expr {
	expr="taMath::HAMMING";
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="norm";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=float;
       type="float";
       name="tol";
       required=0;
       def_val="0.0f";
       expr {
	expr=;
       };
      };
     };
    };
    DataAnalCall @[8] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataAnal;
     method=taDataAnal::Cluster;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="clust_data";
       required=1;
       def_val=;
       expr {
	expr="ItemCluster";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="view";
       required=1;
       def_val=;
       expr {
	expr="true";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data";
       required=1;
       def_val=;
       expr {
	expr="ItemData";
       };
      };
      ProgArg @[3] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="data_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Input\"";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Name\"";
       };
      };
      ProgArg @[5] {
       arg_type=taMath::DistMetric;
       type="taMath::DistMetric";
       name="metric";
       required=0;
       def_val="taMath::EUCLIDIAN";
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="norm";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=float;
       type="float";
       name="tol";
       required=0;
       def_val="0.0f";
       expr {
	expr=;
       };
      };
     };
    };
    DataAnalCall @[9] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataAnal;
     method=taDataAnal::PCA2dPrjn;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="prjn_data";
       required=1;
       def_val=;
       expr {
	expr="ItemPCA";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="view";
       required=1;
       def_val=;
       expr {
	expr="true";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data";
       required=1;
       def_val=;
       expr {
	expr="ItemData";
       };
      };
      ProgArg @[3] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="data_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Input\"";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name_col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Name\"";
       };
      };
      ProgArg @[5] {
       arg_type=int;
       type="int";
       name="x_axis_component";
       required=0;
       def_val="0";
       expr {
	expr="3";
       };
      };
      ProgArg @[6] {
       arg_type=int;
       type="int";
       name="y_axis_component";
       required=0;
       def_val="1";
       expr {
	expr="4";
       };
      };
     };
    };
    DataAnalCall @[10] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taDataAnal;
     method=taDataAnal::PCAEigenTable;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="pca_data";
       required=0;
       def_val=;
       expr {
	expr="ItemEigens";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="view";
       required=0;
       def_val=;
       expr {
	expr="true";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data";
       required=0;
       def_val=;
       expr {
	expr="ItemData";
       };
      };
      ProgArg @[3] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="data_col_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"Input\"";
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$39$;
   name="Browser2";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$39$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="MyRandomData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$0$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[0][0].data[0]$40$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=9: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[0][0].data[1]$41$;
	    m_transform=NULL;
	    name="cond1";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[0][0].data[2]$42$;
	    m_transform=NULL;
	    name="cond1_lbl";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].data.gp[0][0].data[3]$43$;
	    m_transform=NULL;
	    name="cond2";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].data.gp[0][0].data[4]$44$;
	    m_transform=NULL;
	    name="cond2_lbl";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].data.gp[0][0].data[5]$45$;
	    m_transform=NULL;
	    name="cond_lbl";
	    visible=1;
	    fixed_range {fix_min=0: min=14: fix_max=0: max=38: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].data.gp[0][0].data[6]$46$;
	    m_transform=NULL;
	    name="cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=14: fix_max=0: max=39: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].data.gp[0][0].data[7]$47$;
	    m_transform=NULL;
	    name="sse";
	    visible=1;
	    fixed_range {fix_min=0: min=8.85658: fix_max=0: max=20.0929: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=39: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cycles";
	   fixed_range {fix_min=0: min=14: fix_max=0: max=39: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=14: max=39: };
	   range {min=14: max=39: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="cond2";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="sse";
	   fixed_range {fix_min=0: min=8.856576: fix_max=0: max=20.09291: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=8.856576: max=20.09291: };
	   range {min=8.856576: max=20.09291: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="cond_lbl";
	   fixed_range {fix_min=0: min=14: fix_max=0: max=38: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=14: max=38: };
	   range {min=14: max=38: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="cond1";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=.colorspecs[0]$48$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.624621: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.637121;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="grouped_data";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$12$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].programs[1].objs[0].data[0]$49$;
	    m_transform=NULL;
	    name="cond1_group";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].programs[1].objs[0].data[1]$50$;
	    m_transform=NULL;
	    name="cond2_group";
	    visible=1;
	    fixed_range {fix_min=1: min=-0.9: fix_max=1: max=3.9: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].programs[1].objs[0].data[2]$51$;
	    m_transform=NULL;
	    name="cond_lbl_first";
	    visible=1;
	    fixed_range {fix_min=1: min=-0.5: fix_max=1: max=3.5: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].programs[1].objs[0].data[3]$52$;
	    m_transform=NULL;
	    name="cycles_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=19.6: fix_max=0: max=31.8: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].programs[1].objs[0].data[4]$53$;
	    m_transform=NULL;
	    name="cycles_sem";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].programs[1].objs[0].data[5]$54$;
	    m_transform=NULL;
	    name="sse_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=10.2195: fix_max=0: max=16.4922: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].programs[1].objs[0].data[6]$55$;
	    m_transform=NULL;
	    name="sse_sem";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=3: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=BAR;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cond_lbl_first";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=3.5: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=3.5: };
	   range {min=-0.5: max=3.5: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=1;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="cond1_group";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cycles_mean";
	   fixed_range {fix_min=0: min=19.6: fix_max=0: max=31.8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=10.21948: max=31.8: };
	   range {min=10: max=35: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="sse_mean";
	   fixed_range {fix_min=0: min=10.21948: fix_max=0: max=16.49216: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=10.21948: max=16.49216: };
	   range {min=10.21948: max=16.49216: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cycles_sem";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="sse_sem";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$48$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.624621: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.637121;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="ProtoDists";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$32$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].programs[4].objs[2].data[0]$56$;
	    m_transform=NULL;
	    name="Name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].programs[4].objs[2].data[1]$57$;
	    m_transform=NULL;
	    name="0";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].programs[4].objs[2].data[2]$58$;
	    m_transform=NULL;
	    name="1";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].programs[4].objs[2].data[3]$59$;
	    m_transform=NULL;
	    name="2";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].programs[4].objs[2].data[4]$60$;
	    m_transform=NULL;
	    name="3";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=4: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$48$;
	   auto_scale=1;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5175: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[3] {
       m_data=NULL;
       name="ProtoData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$31$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].programs[4].objs[0].data[0]$61$;
	    m_transform=NULL;
	    name="Name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].programs[4].objs[0].data[1]$62$;
	    m_transform=NULL;
	    name="Input";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=4;
	  view_range {min=0: max=3: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=1: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$48$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5175: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[4] {
       m_data=NULL;
       name="ItemDists";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$34$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].programs[4].objs[3].data[0]$63$;
	    m_transform=NULL;
	    name="ItemData_DistMatrix";
	    visible=1;
	    text_width=24;
	    scale_on=1;
	    mat_layout=TOP_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=0: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-12;
	   max=12;
	   range=12;
	   zero=0;
	   spec=$48$;
	   auto_scale=1;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=1;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5174999: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[5] {
       m_data=NULL;
       name="ItemData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$33$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].programs[4].objs[1].data[0]$64$;
	    m_transform=NULL;
	    name="Name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].programs[4].objs[1].data[1]$65$;
	    m_transform=NULL;
	    name="Input";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10;
	  view_range {min=0: max=9: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=1: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$48$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5174999: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[6] {
       m_data=NULL;
       name="ItemCluster";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$35$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].programs[4].objs[4].data[0]$66$;
	    m_transform=NULL;
	    name="X";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].programs[4].objs[4].data[1]$67$;
	    m_transform=NULL;
	    name="Y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].programs[4].objs[4].data[2]$68$;
	    m_transform=NULL;
	    name="Label";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=174: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=1: max=14.42078: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=14.42078: };
	   range {min=0: max=14.42078: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y";
	   fixed_range {fix_min=1: min=0.2: fix_max=1: max=23.8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0.2: max=23.8: };
	   range {min=0.2: max=23.8: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Label";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$48$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.624621: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.637121;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[7] {
       m_data=NULL;
       name="ItemPCA";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$36$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].programs[4].objs[5].data[0]$69$;
	    m_transform=NULL;
	    name="Name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].programs[4].objs[5].data[1]$70$;
	    m_transform=NULL;
	    name="x_prjn";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].programs[4].objs[5].data[2]$71$;
	    m_transform=NULL;
	    name="y_prjn";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=23: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="x_prjn";
	   fixed_range {fix_min=0: min=-0.6030132: fix_max=0: max=1.237618: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.6030132: max=1.237618: };
	   range {min=-0.6030132: max=1.237618: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="y_prjn";
	   fixed_range {fix_min=0: min=-0.8124062: fix_max=0: max=0.9023457: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.8124062: max=0.9023457: };
	   range {min=-0.8124062: max=0.9023457: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Name";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$48$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.62462: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.63712;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[8] {
       m_data=NULL;
       name="ItemEigens";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$37$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].programs[4].objs[6].data[0]$72$;
	    m_transform=NULL;
	    name="Input_PCAEigens";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=4;
	  view_range {min=0: max=3: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=0: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$48$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5174999: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_change_log=0;
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

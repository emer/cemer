// ta_Dump File v2.0
SoProject .projects[0] { 
  Wizard_Group @.wizards = [1] {
    SoWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [6] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  float_Data @[5] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [6] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	};
      };
    };
    DataTable_Group @.gp[2] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  float_Data @[0] { };
	  float_Data @[1] { };
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [0] {
    Program_Group @.gp[0] = [8] { 
      Program @[0] { 
	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	ProgEl_List @.init_code = [5] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[1] { };
	  NetCounterInit @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[4] { };
	};

	ProgEl_List @.prog_code = [7] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetCounterInit @[2] { };
	  MemberAssign @[3] { };
	  MethodCall @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { };
	  NetDataLoop @[4] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[6] { };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  ProgramCall @[1] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { };
	  MethodCall @[3] { };
	  ProgramCall @[4] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[5] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [2] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [6] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [6] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[7] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [1] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [3] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };

  Network_Group @.networks = [1] {
    SoNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
   };

      BaseSpec_Group @.specs = [5] {
	SomLayerSpec @[0] { 
	  NeighborEl_List @.neighborhood = [81] {
	    NeighborEl @[0] { };
	    NeighborEl @[1] { };
	    NeighborEl @[2] { };
	    NeighborEl @[3] { };
	    NeighborEl @[4] { };
	    NeighborEl @[5] { };
	    NeighborEl @[6] { };
	    NeighborEl @[7] { };
	    NeighborEl @[8] { };
	    NeighborEl @[9] { };
	    NeighborEl @[10] { };
	    NeighborEl @[11] { };
	    NeighborEl @[12] { };
	    NeighborEl @[13] { };
	    NeighborEl @[14] { };
	    NeighborEl @[15] { };
	    NeighborEl @[16] { };
	    NeighborEl @[17] { };
	    NeighborEl @[18] { };
	    NeighborEl @[19] { };
	    NeighborEl @[20] { };
	    NeighborEl @[21] { };
	    NeighborEl @[22] { };
	    NeighborEl @[23] { };
	    NeighborEl @[24] { };
	    NeighborEl @[25] { };
	    NeighborEl @[26] { };
	    NeighborEl @[27] { };
	    NeighborEl @[28] { };
	    NeighborEl @[29] { };
	    NeighborEl @[30] { };
	    NeighborEl @[31] { };
	    NeighborEl @[32] { };
	    NeighborEl @[33] { };
	    NeighborEl @[34] { };
	    NeighborEl @[35] { };
	    NeighborEl @[36] { };
	    NeighborEl @[37] { };
	    NeighborEl @[38] { };
	    NeighborEl @[39] { };
	    NeighborEl @[40] { };
	    NeighborEl @[41] { };
	    NeighborEl @[42] { };
	    NeighborEl @[43] { };
	    NeighborEl @[44] { };
	    NeighborEl @[45] { };
	    NeighborEl @[46] { };
	    NeighborEl @[47] { };
	    NeighborEl @[48] { };
	    NeighborEl @[49] { };
	    NeighborEl @[50] { };
	    NeighborEl @[51] { };
	    NeighborEl @[52] { };
	    NeighborEl @[53] { };
	    NeighborEl @[54] { };
	    NeighborEl @[55] { };
	    NeighborEl @[56] { };
	    NeighborEl @[57] { };
	    NeighborEl @[58] { };
	    NeighborEl @[59] { };
	    NeighborEl @[60] { };
	    NeighborEl @[61] { };
	    NeighborEl @[62] { };
	    NeighborEl @[63] { };
	    NeighborEl @[64] { };
	    NeighborEl @[65] { };
	    NeighborEl @[66] { };
	    NeighborEl @[67] { };
	    NeighborEl @[68] { };
	    NeighborEl @[69] { };
	    NeighborEl @[70] { };
	    NeighborEl @[71] { };
	    NeighborEl @[72] { };
	    NeighborEl @[73] { };
	    NeighborEl @[74] { };
	    NeighborEl @[75] { };
	    NeighborEl @[76] { };
	    NeighborEl @[77] { };
	    NeighborEl @[78] { };
	    NeighborEl @[79] { };
	    NeighborEl @[80] { };
	  };
	};
	FullPrjnSpec @[1] { };
	SoftClConSpec @[2] { };
	SomUnitSpec @[3] { };
	HebbConSpec @[4] { };
      };

      Layer_Group @.layers = [2] {
	SoLayer @[0] { 
	  Unit_Group @.units = [2] {
	  };
	};
	SoLayer @[1] { 
	  Projection_Group @.projections = [1] {
	    Projection @[0] { };
	  };

	  Unit_Group @.units = [100] {
	  };
	};
      };
    };
  };
};
SoProject .projects[0] {
 name="Project_0";
 desc="


";
 tags=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name=;
  el_typ=SoWizard;
  el_def=0;
  SoWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="SoWizard_0";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="LayerWizEl";
     n_units=25;
     io_type=160208;
    };
    LayerWizEl @[1] {
     name="LayerWizEl";
     n_units=25;
     io_type=131072;
    };
    LayerWizEl @[2] {
     name="LayerWizEl";
     n_units=25;
     io_type=INPUT;
    };
   };
   connectivity=FEEDFORWARD;
   default_net_type=SoNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="StdInputData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [50] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 50] 0.27524027;0.58572716;-0.4893716;0.80728418;-0.7374478;0.40047589;0.80865574;0.26351234;0.63572544;-0.13226515;0.32226208;0.09458299;-0.65794665;0.49806669;0.8861056;0.010476869;-0.53481573;-0.56576681;0.24970876;-0.12414136;0.058008451;-0.16229801;-0.6134147;-0.18241595;-0.23145054;-0.98476255;-0.36084104;0.20008817;-0.54783231;0.99334139;-0.44651157;0.1478578;-0.26235145;-0.76723671;-0.40710926;-0.67149609;-0.37028623;-0.19771387;-0.31031987;-0.09203162;-0.97085267;0.32836428;-0.32331762;-0.16429421;0.95575523;0.68716156;0.18663159;0.20599018;-0.089604624;0.47501281;0.29221085;-0.32039252;-0.45409334;-0.18990672;-0.98997301;0.83611828;-0.8938421;0.47062573;-0.74665207;-0.2856656;0.88878602;0.52628338;0.50152028;-0.38391691;0.68755144;-0.89840931;0.32899106;-0.18949555;-0.35337529;-0.47028297;-0.72464454;-0.85272181;-0.41851211;0.34450257;0.082036018;0.069228828;-0.79649287;0.2845408;0.47269076;0.64939338;0.81728262;-0.32821393;-0.76087385;-0.39717567;0.80464065;-0.030210437;0.88532722;-0.63484997;-0.53532475;-0.64311022;0.4031055;-0.24410731;0.69150329;-0.098635852;0.33230552;-0.073337063;-0.17373967;-0.080915771;0.094169699;-0.37870619;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="SomUnitSpec_0_ActFun";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="Netin";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1000] -5;-4.9899998;-4.9799995;-4.9699993;-4.9599991;-4.9499989;-4.9399986;-4.9299984;-4.9199982;-4.9099979;-4.8999977;-4.8899975;-4.8799973;-4.869997;-4.8599968;-4.8499966;-4.8399963;-4.8299961;-4.8199959;-4.8099957;-4.7999954;-4.7899952;-4.779995;-4.7699947;-4.7599945;-4.7499943;-4.739994;-4.7299938;-4.7199936;-4.7099934;-4.6999931;-4.6899929;-4.6799927;-4.6699924;-4.6599922;-4.649992;-4.6399918;-4.6299915;-4.6199913;-4.6099911;-4.5999908;-4.5899906;-4.5799904;-4.5699902;-4.5599899;-4.5499897;-4.5399895;-4.5299892;-4.519989;-4.5099888;-4.4999886;-4.4899883;-4.4799881;-4.4699879;-4.4599876;-4.4499874;-4.4399872;-4.429987;-4.4199867;-4.4099865;-4.3999863;-4.389986;-4.3799858;-4.3699856;-4.3599854;-4.3499851;-4.3399849;-4.3299847;-4.3199844;-4.3099842;-4.299984;-4.2899837;-4.2799835;-4.2699833;-4.2599831;-4.2499828;-4.2399826;-4.2299824;-4.2199821;-4.2099819;-4.1999817;-4.1899815;-4.1799812;-4.169981;-4.1599808;-4.1499805;-4.1399803;-4.1299801;-4.1199799;-4.1099796;-4.0999794;-4.0899792;-4.0799789;-4.0699787;-4.0599785;-4.0499783;-4.039978;-4.0299778;-4.0199776;-4.0099773;-3.9999774;-3.9899774;-3.9799774;-3.9699774;-3.9599774;-3.9499774;-3.9399774;-3.9299774;-3.9199774;-3.9099774;-3.8999774;-3.8899775;-3.8799775;-3.8699775;-3.8599775;-3.8499775;-3.8399775;-3.8299775;-3.8199775;-3.8099775;-3.7999775;-3.7899776;-3.7799776;-3.7699776;-3.7599776;-3.7499776;-3.7399776;-3.7299776;-3.7199776;-3.7099776;-3.6999776;-3.6899776;-3.6799777;-3.6699777;-3.6599777;-3.6499777;-3.6399777;-3.6299777;-3.6199777;-3.6099777;-3.5999777;-3.5899777;-3.5799778;-3.5699778;-3.5599778;-3.5499778;-3.5399778;-3.5299778;-3.5199778;-3.5099778;-3.4999778;-3.4899778;-3.4799778;-3.4699779;-3.4599779;-3.4499779;-3.4399779;-3.4299779;-3.4199779;-3.4099779;-3.3999779;-3.3899779;-3.3799779;-3.369978;-3.359978;-3.349978;-3.339978;-3.329978;-3.319978;-3.309978;-3.299978;-3.289978;-3.279978;-3.269978;-3.2599781;-3.2499781;-3.2399781;-3.2299781;-3.2199781;-3.2099781;-3.1999781;-3.1899781;-3.1799781;-3.1699781;-3.1599782;-3.1499782;-3.1399782;-3.1299782;-3.1199782;-3.1099782;-3.0999782;-3.0899782;-3.0799782;-3.0699782;-3.0599782;-3.0499783;-3.0399783;-3.0299783;-3.0199783;-3.0099783;-2.9999783;-2.9899783;-2.9799783;-2.9699783;-2.9599783;-2.9499784;-2.9399784;-2.9299784;-2.9199784;-2.9099784;-2.8999784;-2.8899784;-2.8799784;-2.8699784;-2.8599784;-2.8499784;-2.8399785;-2.8299785;-2.8199785;-2.8099785;-2.7999785;-2.7899785;-2.7799785;-2.7699785;-2.7599785;-2.7499785;-2.7399786;-2.7299786;-2.7199786;-2.7099786;-2.6999786;-2.6899786;-2.6799786;-2.6699786;-2.6599786;-2.6499786;-2.6399786;-2.6299787;-2.6199787;-2.6099787;-2.5999787;-2.5899787;-2.5799787;-2.5699787;-2.5599787;-2.5499787;-2.5399787;-2.5299788;-2.5199788;-2.5099788;-2.4999788;-2.4899788;-2.4799788;-2.4699788;-2.4599788;-2.4499788;-2.4399788;-2.4299788;-2.4199789;-2.4099789;-2.3999789;-2.3899789;-2.3799789;-2.3699789;-2.3599789;-2.3499789;-2.3399789;-2.3299789;-2.319979;-2.309979;-2.299979;-2.289979;-2.279979;-2.269979;-2.259979;-2.249979;-2.239979;-2.229979;-2.219979;-2.2099791;-2.1999791;-2.1899791;-2.1799791;-2.1699791;-2.1599791;-2.1499791;-2.1399791;-2.1299791;-2.1199791;-2.1099792;-2.0999792;-2.0899792;-2.0799792;-2.0699792;-2.0599792;-2.0499792;-2.0399792;-2.0299792;-2.0199792;-2.0099792;-1.9999793;-1.9899793;-1.9799793;-1.9699793;-1.9599793;-1.9499793;-1.9399793;-1.9299793;-1.9199793;-1.9099793;-1.8999794;-1.8899794;-1.8799794;-1.8699794;-1.8599794;-1.8499794;-1.8399794;-1.8299794;-1.8199794;-1.8099794;-1.7999794;-1.7899795;-1.7799795;-1.7699795;-1.7599795;-1.7499795;-1.7399795;-1.7299795;-1.7199795;-1.7099795;-1.6999795;-1.6899796;-1.6799796;-1.6699796;-1.6599796;-1.6499796;-1.6399796;-1.6299796;-1.6199796;-1.6099796;-1.5999796;-1.5899796;-1.5799797;-1.5699797;-1.5599797;-1.5499797;-1.5399797;-1.5299797;-1.5199797;-1.5099797;-1.4999797;-1.4899797;-1.4799798;-1.4699798;-1.4599798;-1.4499798;-1.4399798;-1.4299798;-1.4199798;-1.4099798;-1.3999798;-1.3899798;-1.3799798;-1.3699799;-1.3599799;-1.3499799;-1.3399799;-1.3299799;-1.3199799;-1.3099799;-1.2999799;-1.2899799;-1.2799799;-1.26998;-1.25998;-1.24998;-1.23998;-1.22998;-1.21998;-1.20998;-1.19998;-1.18998;-1.17998;-1.16998;-1.1599801;-1.1499801;-1.1399801;-1.1299801;-1.1199801;-1.1099801;-1.0999801;-1.0899801;-1.0799801;-1.0699801;-1.0599802;-1.0499802;-1.0399802;-1.0299802;-1.0199802;-1.0099802;-0.99998021;-0.98998022;-0.97998023;-0.96998024;-0.95998025;-0.94998026;-0.93998027;-0.92998028;-0.91998029;-0.9099803;-0.89998031;-0.88998032;-0.87998033;-0.86998034;-0.85998034;-0.84998035;-0.83998036;-0.82998037;-0.81998038;-0.80998039;-0.7999804;-0.78998041;-0.77998042;-0.76998043;-0.75998044;-0.74998045;-0.73998046;-0.72998047;-0.71998048;-0.70998049;-0.6999805;-0.68998051;-0.67998052;-0.66998053;-0.65998054;-0.64998055;-0.63998055;-0.62998056;-0.61998057;-0.60998058;-0.59998059;-0.5899806;-0.57998061;-0.56998062;-0.55998063;-0.54998064;-0.53998065;-0.52998066;-0.51998067;-0.50998068;-0.49998069;-0.4899807;-0.47998071;-0.46998072;-0.45998073;-0.44998074;-0.43998075;-0.42998075;-0.41998076;-0.40998077;-0.39998078;-0.38998079;-0.3799808;-0.36998081;-0.35998082;-0.34998083;-0.33998084;-0.32998085;-0.31998086;-0.30998087;-0.29998088;-0.28998089;-0.2799809;-0.26998091;-0.25998092;-0.24998091;-0.23998091;-0.2299809;-0.2199809;-0.20998089;-0.19998088;-0.18998088;-0.17998087;-0.16998087;-0.15998086;-0.14998086;-0.13998085;-0.12998085;-0.11998085;-0.10998085;-0.099980853;-0.089980856;-0.079980858;-0.06998086;-0.059980862;-0.049980864;-0.039980866;-0.029980866;-0.019980866;-0.0099808667;1.9133091e-05;0.010019133;0.020019133;0.030019132;0.040019132;0.05001913;0.060019128;0.070019126;0.080019124;0.090019122;0.10001912;0.11001912;0.12001912;0.13001911;0.14001912;0.15001912;0.16001913;0.17001913;0.18001914;0.19001915;0.20001915;0.21001916;0.22001916;0.23001917;0.24001917;0.25001916;0.26001915;0.27001914;0.28001913;0.29001912;0.30001912;0.31001911;0.3200191;0.33001909;0.34001908;0.35001907;0.36001906;0.37001905;0.38001904;0.39001903;0.40001902;0.41001901;0.420019;0.43001899;0.44001898;0.45001897;0.46001896;0.47001895;0.48001894;0.49001893;0.50001895;0.51001894;0.52001894;0.53001893;0.54001892;0.55001891;0.5600189;0.57001889;0.58001888;0.59001887;0.60001886;0.61001885;0.62001884;0.63001883;0.64001882;0.65001881;0.6600188;0.67001879;0.68001878;0.69001877;0.70001876;0.71001875;0.72001874;0.73001873;0.74001873;0.75001872;0.76001871;0.7700187;0.78001869;0.79001868;0.80001867;0.81001866;0.82001865;0.83001864;0.84001863;0.85001862;0.86001861;0.8700186;0.88001859;0.89001858;0.90001857;0.91001856;0.92001855;0.93001854;0.94001853;0.95001853;0.96001852;0.97001851;0.9800185;0.99001849;1.0000185;1.0100185;1.0200185;1.0300184;1.0400184;1.0500184;1.0600184;1.0700184;1.0800184;1.0900184;1.1000184;1.1100184;1.1200184;1.1300184;1.1400183;1.1500183;1.1600183;1.1700183;1.1800183;1.1900183;1.2000183;1.2100183;1.2200183;1.2300183;1.2400182;1.2500182;1.2600182;1.2700182;1.2800182;1.2900182;1.3000182;1.3100182;1.3200182;1.3300182;1.3400182;1.3500181;1.3600181;1.3700181;1.3800181;1.3900181;1.4000181;1.4100181;1.4200181;1.4300181;1.4400181;1.450018;1.460018;1.470018;1.480018;1.490018;1.500018;1.510018;1.520018;1.530018;1.540018;1.550018;1.5600179;1.5700179;1.5800179;1.5900179;1.6000179;1.6100179;1.6200179;1.6300179;1.6400179;1.6500179;1.6600178;1.6700178;1.6800178;1.6900178;1.7000178;1.7100178;1.7200178;1.7300178;1.7400178;1.7500178;1.7600178;1.7700177;1.7800177;1.7900177;1.8000177;1.8100177;1.8200177;1.8300177;1.8400177;1.8500177;1.8600177;1.8700176;1.8800176;1.8900176;1.9000176;1.9100176;1.9200176;1.9300176;1.9400176;1.9500176;1.9600176;1.9700176;1.9800175;1.9900175;2.0000176;2.0100176;2.0200176;2.0300176;2.0400176;2.0500176;2.0600176;2.0700176;2.0800176;2.0900176;2.1000175;2.1100175;2.1200175;2.1300175;2.1400175;2.1500175;2.1600175;2.1700175;2.1800175;2.1900175;2.2000175;2.2100174;2.2200174;2.2300174;2.2400174;2.2500174;2.2600174;2.2700174;2.2800174;2.2900174;2.3000174;2.3100173;2.3200173;2.3300173;2.3400173;2.3500173;2.3600173;2.3700173;2.3800173;2.3900173;2.4000173;2.4100173;2.4200172;2.4300172;2.4400172;2.4500172;2.4600172;2.4700172;2.4800172;2.4900172;2.5000172;2.5100172;2.5200171;2.5300171;2.5400171;2.5500171;2.5600171;2.5700171;2.5800171;2.5900171;2.6000171;2.6100171;2.6200171;2.630017;2.640017;2.650017;2.660017;2.670017;2.680017;2.690017;2.700017;2.710017;2.720017;2.7300169;2.7400169;2.7500169;2.7600169;2.7700169;2.7800169;2.7900169;2.8000169;2.8100169;2.8200169;2.8300169;2.8400168;2.8500168;2.8600168;2.8700168;2.8800168;2.8900168;2.9000168;2.9100168;2.9200168;2.9300168;2.9400167;2.9500167;2.9600167;2.9700167;2.9800167;2.9900167;3.0000167;3.0100167;3.0200167;3.0300167;3.0400167;3.0500166;3.0600166;3.0700166;3.0800166;3.0900166;3.1000166;3.1100166;3.1200166;3.1300166;3.1400166;3.1500165;3.1600165;3.1700165;3.1800165;3.1900165;3.2000165;3.2100165;3.2200165;3.2300165;3.2400165;3.2500165;3.2600164;3.2700164;3.2800164;3.2900164;3.3000164;3.3100164;3.3200164;3.3300164;3.3400164;3.3500164;3.3600163;3.3700163;3.3800163;3.3900163;3.4000163;3.4100163;3.4200163;3.4300163;3.4400163;3.4500163;3.4600163;3.4700162;3.4800162;3.4900162;3.5000162;3.5100162;3.5200162;3.5300162;3.5400162;3.5500162;3.5600162;3.5700161;3.5800161;3.5900161;3.6000161;3.6100161;3.6200161;3.6300161;3.6400161;3.6500161;3.6600161;3.6700161;3.680016;3.690016;3.700016;3.710016;3.720016;3.730016;3.740016;3.750016;3.760016;3.770016;3.7800159;3.7900159;3.8000159;3.8100159;3.8200159;3.8300159;3.8400159;3.8500159;3.8600159;3.8700159;3.8800159;3.8900158;3.9000158;3.9100158;3.9200158;3.9300158;3.9400158;3.9500158;3.9600158;3.9700158;3.9800158;3.9900157;4.0000157;4.010016;4.0200162;4.0300164;4.0400167;4.0500169;4.0600171;4.0700173;4.0800176;4.0900178;4.100018;4.1100183;4.1200185;4.1300187;4.1400189;4.1500192;4.1600194;4.1700196;4.1800199;4.1900201;4.2000203;4.2100205;4.2200208;4.230021;4.2400212;4.2500215;4.2600217;4.2700219;4.2800221;4.2900224;4.3000226;4.3100228;4.3200231;4.3300233;4.3400235;4.3500237;4.360024;4.3700242;4.3800244;4.3900247;4.4000249;4.4100251;4.4200253;4.4300256;4.4400258;4.450026;4.4600263;4.4700265;4.4800267;4.490027;4.5000272;4.5100274;4.5200276;4.5300279;4.5400281;4.5500283;4.5600286;4.5700288;4.580029;4.5900292;4.6000295;4.6100297;4.6200299;4.6300302;4.6400304;4.6500306;4.6600308;4.6700311;4.6800313;4.6900315;4.7000318;4.710032;4.7200322;4.7300324;4.7400327;4.7500329;4.7600331;4.7700334;4.7800336;4.7900338;4.800034;4.8100343;4.8200345;4.8300347;4.840035;4.8500352;4.8600354;4.8700356;4.8800359;4.8900361;4.9000363;4.9100366;4.9200368;4.930037;4.9400373;4.9500375;4.9600377;4.9700379;4.9800382;4.9900384;      };
     };
     float_Data @[1] {
      name="Act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1000] -5;-4.9899998;-4.9799995;-4.9699993;-4.9599991;-4.9499989;-4.9399986;-4.9299984;-4.9199982;-4.9099979;-4.8999977;-4.8899975;-4.8799973;-4.869997;-4.8599968;-4.8499966;-4.8399963;-4.8299961;-4.8199959;-4.8099957;-4.7999954;-4.7899952;-4.779995;-4.7699947;-4.7599945;-4.7499943;-4.739994;-4.7299938;-4.7199936;-4.7099934;-4.6999931;-4.6899929;-4.6799927;-4.6699924;-4.6599922;-4.649992;-4.6399918;-4.6299915;-4.6199913;-4.6099911;-4.5999908;-4.5899906;-4.5799904;-4.5699902;-4.5599899;-4.5499897;-4.5399895;-4.5299892;-4.519989;-4.5099888;-4.4999886;-4.4899883;-4.4799881;-4.4699879;-4.4599876;-4.4499874;-4.4399872;-4.429987;-4.4199867;-4.4099865;-4.3999863;-4.389986;-4.3799858;-4.3699856;-4.3599854;-4.3499851;-4.3399849;-4.3299847;-4.3199844;-4.3099842;-4.299984;-4.2899837;-4.2799835;-4.2699833;-4.2599831;-4.2499828;-4.2399826;-4.2299824;-4.2199821;-4.2099819;-4.1999817;-4.1899815;-4.1799812;-4.169981;-4.1599808;-4.1499805;-4.1399803;-4.1299801;-4.1199799;-4.1099796;-4.0999794;-4.0899792;-4.0799789;-4.0699787;-4.0599785;-4.0499783;-4.039978;-4.0299778;-4.0199776;-4.0099773;-3.9999774;-3.9899774;-3.9799774;-3.9699774;-3.9599774;-3.9499774;-3.9399774;-3.9299774;-3.9199774;-3.9099774;-3.8999774;-3.8899775;-3.8799775;-3.8699775;-3.8599775;-3.8499775;-3.8399775;-3.8299775;-3.8199775;-3.8099775;-3.7999775;-3.7899776;-3.7799776;-3.7699776;-3.7599776;-3.7499776;-3.7399776;-3.7299776;-3.7199776;-3.7099776;-3.6999776;-3.6899776;-3.6799777;-3.6699777;-3.6599777;-3.6499777;-3.6399777;-3.6299777;-3.6199777;-3.6099777;-3.5999777;-3.5899777;-3.5799778;-3.5699778;-3.5599778;-3.5499778;-3.5399778;-3.5299778;-3.5199778;-3.5099778;-3.4999778;-3.4899778;-3.4799778;-3.4699779;-3.4599779;-3.4499779;-3.4399779;-3.4299779;-3.4199779;-3.4099779;-3.3999779;-3.3899779;-3.3799779;-3.369978;-3.359978;-3.349978;-3.339978;-3.329978;-3.319978;-3.309978;-3.299978;-3.289978;-3.279978;-3.269978;-3.2599781;-3.2499781;-3.2399781;-3.2299781;-3.2199781;-3.2099781;-3.1999781;-3.1899781;-3.1799781;-3.1699781;-3.1599782;-3.1499782;-3.1399782;-3.1299782;-3.1199782;-3.1099782;-3.0999782;-3.0899782;-3.0799782;-3.0699782;-3.0599782;-3.0499783;-3.0399783;-3.0299783;-3.0199783;-3.0099783;-2.9999783;-2.9899783;-2.9799783;-2.9699783;-2.9599783;-2.9499784;-2.9399784;-2.9299784;-2.9199784;-2.9099784;-2.8999784;-2.8899784;-2.8799784;-2.8699784;-2.8599784;-2.8499784;-2.8399785;-2.8299785;-2.8199785;-2.8099785;-2.7999785;-2.7899785;-2.7799785;-2.7699785;-2.7599785;-2.7499785;-2.7399786;-2.7299786;-2.7199786;-2.7099786;-2.6999786;-2.6899786;-2.6799786;-2.6699786;-2.6599786;-2.6499786;-2.6399786;-2.6299787;-2.6199787;-2.6099787;-2.5999787;-2.5899787;-2.5799787;-2.5699787;-2.5599787;-2.5499787;-2.5399787;-2.5299788;-2.5199788;-2.5099788;-2.4999788;-2.4899788;-2.4799788;-2.4699788;-2.4599788;-2.4499788;-2.4399788;-2.4299788;-2.4199789;-2.4099789;-2.3999789;-2.3899789;-2.3799789;-2.3699789;-2.3599789;-2.3499789;-2.3399789;-2.3299789;-2.319979;-2.309979;-2.299979;-2.289979;-2.279979;-2.269979;-2.259979;-2.249979;-2.239979;-2.229979;-2.219979;-2.2099791;-2.1999791;-2.1899791;-2.1799791;-2.1699791;-2.1599791;-2.1499791;-2.1399791;-2.1299791;-2.1199791;-2.1099792;-2.0999792;-2.0899792;-2.0799792;-2.0699792;-2.0599792;-2.0499792;-2.0399792;-2.0299792;-2.0199792;-2.0099792;-1.9999793;-1.9899793;-1.9799793;-1.9699793;-1.9599793;-1.9499793;-1.9399793;-1.9299793;-1.9199793;-1.9099793;-1.8999794;-1.8899794;-1.8799794;-1.8699794;-1.8599794;-1.8499794;-1.8399794;-1.8299794;-1.8199794;-1.8099794;-1.7999794;-1.7899795;-1.7799795;-1.7699795;-1.7599795;-1.7499795;-1.7399795;-1.7299795;-1.7199795;-1.7099795;-1.6999795;-1.6899796;-1.6799796;-1.6699796;-1.6599796;-1.6499796;-1.6399796;-1.6299796;-1.6199796;-1.6099796;-1.5999796;-1.5899796;-1.5799797;-1.5699797;-1.5599797;-1.5499797;-1.5399797;-1.5299797;-1.5199797;-1.5099797;-1.4999797;-1.4899797;-1.4799798;-1.4699798;-1.4599798;-1.4499798;-1.4399798;-1.4299798;-1.4199798;-1.4099798;-1.3999798;-1.3899798;-1.3799798;-1.3699799;-1.3599799;-1.3499799;-1.3399799;-1.3299799;-1.3199799;-1.3099799;-1.2999799;-1.2899799;-1.2799799;-1.26998;-1.25998;-1.24998;-1.23998;-1.22998;-1.21998;-1.20998;-1.19998;-1.18998;-1.17998;-1.16998;-1.1599801;-1.1499801;-1.1399801;-1.1299801;-1.1199801;-1.1099801;-1.0999801;-1.0899801;-1.0799801;-1.0699801;-1.0599802;-1.0499802;-1.0399802;-1.0299802;-1.0199802;-1.0099802;-0.99998021;-0.98998022;-0.97998023;-0.96998024;-0.95998025;-0.94998026;-0.93998027;-0.92998028;-0.91998029;-0.9099803;-0.89998031;-0.88998032;-0.87998033;-0.86998034;-0.85998034;-0.84998035;-0.83998036;-0.82998037;-0.81998038;-0.80998039;-0.7999804;-0.78998041;-0.77998042;-0.76998043;-0.75998044;-0.74998045;-0.73998046;-0.72998047;-0.71998048;-0.70998049;-0.6999805;-0.68998051;-0.67998052;-0.66998053;-0.65998054;-0.64998055;-0.63998055;-0.62998056;-0.61998057;-0.60998058;-0.59998059;-0.5899806;-0.57998061;-0.56998062;-0.55998063;-0.54998064;-0.53998065;-0.52998066;-0.51998067;-0.50998068;-0.49998069;-0.4899807;-0.47998071;-0.46998072;-0.45998073;-0.44998074;-0.43998075;-0.42998075;-0.41998076;-0.40998077;-0.39998078;-0.38998079;-0.3799808;-0.36998081;-0.35998082;-0.34998083;-0.33998084;-0.32998085;-0.31998086;-0.30998087;-0.29998088;-0.28998089;-0.2799809;-0.26998091;-0.25998092;-0.24998091;-0.23998091;-0.2299809;-0.2199809;-0.20998089;-0.19998088;-0.18998088;-0.17998087;-0.16998087;-0.15998086;-0.14998086;-0.13998085;-0.12998085;-0.11998085;-0.10998085;-0.099980853;-0.089980856;-0.079980858;-0.06998086;-0.059980862;-0.049980864;-0.039980866;-0.029980866;-0.019980866;-0.0099808667;1.9133091e-05;0.010019133;0.020019133;0.030019132;0.040019132;0.05001913;0.060019128;0.070019126;0.080019124;0.090019122;0.10001912;0.11001912;0.12001912;0.13001911;0.14001912;0.15001912;0.16001913;0.17001913;0.18001914;0.19001915;0.20001915;0.21001916;0.22001916;0.23001917;0.24001917;0.25001916;0.26001915;0.27001914;0.28001913;0.29001912;0.30001912;0.31001911;0.3200191;0.33001909;0.34001908;0.35001907;0.36001906;0.37001905;0.38001904;0.39001903;0.40001902;0.41001901;0.420019;0.43001899;0.44001898;0.45001897;0.46001896;0.47001895;0.48001894;0.49001893;0.50001895;0.51001894;0.52001894;0.53001893;0.54001892;0.55001891;0.5600189;0.57001889;0.58001888;0.59001887;0.60001886;0.61001885;0.62001884;0.63001883;0.64001882;0.65001881;0.6600188;0.67001879;0.68001878;0.69001877;0.70001876;0.71001875;0.72001874;0.73001873;0.74001873;0.75001872;0.76001871;0.7700187;0.78001869;0.79001868;0.80001867;0.81001866;0.82001865;0.83001864;0.84001863;0.85001862;0.86001861;0.8700186;0.88001859;0.89001858;0.90001857;0.91001856;0.92001855;0.93001854;0.94001853;0.95001853;0.96001852;0.97001851;0.9800185;0.99001849;1.0000185;1.0100185;1.0200185;1.0300184;1.0400184;1.0500184;1.0600184;1.0700184;1.0800184;1.0900184;1.1000184;1.1100184;1.1200184;1.1300184;1.1400183;1.1500183;1.1600183;1.1700183;1.1800183;1.1900183;1.2000183;1.2100183;1.2200183;1.2300183;1.2400182;1.2500182;1.2600182;1.2700182;1.2800182;1.2900182;1.3000182;1.3100182;1.3200182;1.3300182;1.3400182;1.3500181;1.3600181;1.3700181;1.3800181;1.3900181;1.4000181;1.4100181;1.4200181;1.4300181;1.4400181;1.450018;1.460018;1.470018;1.480018;1.490018;1.500018;1.510018;1.520018;1.530018;1.540018;1.550018;1.5600179;1.5700179;1.5800179;1.5900179;1.6000179;1.6100179;1.6200179;1.6300179;1.6400179;1.6500179;1.6600178;1.6700178;1.6800178;1.6900178;1.7000178;1.7100178;1.7200178;1.7300178;1.7400178;1.7500178;1.7600178;1.7700177;1.7800177;1.7900177;1.8000177;1.8100177;1.8200177;1.8300177;1.8400177;1.8500177;1.8600177;1.8700176;1.8800176;1.8900176;1.9000176;1.9100176;1.9200176;1.9300176;1.9400176;1.9500176;1.9600176;1.9700176;1.9800175;1.9900175;2.0000176;2.0100176;2.0200176;2.0300176;2.0400176;2.0500176;2.0600176;2.0700176;2.0800176;2.0900176;2.1000175;2.1100175;2.1200175;2.1300175;2.1400175;2.1500175;2.1600175;2.1700175;2.1800175;2.1900175;2.2000175;2.2100174;2.2200174;2.2300174;2.2400174;2.2500174;2.2600174;2.2700174;2.2800174;2.2900174;2.3000174;2.3100173;2.3200173;2.3300173;2.3400173;2.3500173;2.3600173;2.3700173;2.3800173;2.3900173;2.4000173;2.4100173;2.4200172;2.4300172;2.4400172;2.4500172;2.4600172;2.4700172;2.4800172;2.4900172;2.5000172;2.5100172;2.5200171;2.5300171;2.5400171;2.5500171;2.5600171;2.5700171;2.5800171;2.5900171;2.6000171;2.6100171;2.6200171;2.630017;2.640017;2.650017;2.660017;2.670017;2.680017;2.690017;2.700017;2.710017;2.720017;2.7300169;2.7400169;2.7500169;2.7600169;2.7700169;2.7800169;2.7900169;2.8000169;2.8100169;2.8200169;2.8300169;2.8400168;2.8500168;2.8600168;2.8700168;2.8800168;2.8900168;2.9000168;2.9100168;2.9200168;2.9300168;2.9400167;2.9500167;2.9600167;2.9700167;2.9800167;2.9900167;3.0000167;3.0100167;3.0200167;3.0300167;3.0400167;3.0500166;3.0600166;3.0700166;3.0800166;3.0900166;3.1000166;3.1100166;3.1200166;3.1300166;3.1400166;3.1500165;3.1600165;3.1700165;3.1800165;3.1900165;3.2000165;3.2100165;3.2200165;3.2300165;3.2400165;3.2500165;3.2600164;3.2700164;3.2800164;3.2900164;3.3000164;3.3100164;3.3200164;3.3300164;3.3400164;3.3500164;3.3600163;3.3700163;3.3800163;3.3900163;3.4000163;3.4100163;3.4200163;3.4300163;3.4400163;3.4500163;3.4600163;3.4700162;3.4800162;3.4900162;3.5000162;3.5100162;3.5200162;3.5300162;3.5400162;3.5500162;3.5600162;3.5700161;3.5800161;3.5900161;3.6000161;3.6100161;3.6200161;3.6300161;3.6400161;3.6500161;3.6600161;3.6700161;3.680016;3.690016;3.700016;3.710016;3.720016;3.730016;3.740016;3.750016;3.760016;3.770016;3.7800159;3.7900159;3.8000159;3.8100159;3.8200159;3.8300159;3.8400159;3.8500159;3.8600159;3.8700159;3.8800159;3.8900158;3.9000158;3.9100158;3.9200158;3.9300158;3.9400158;3.9500158;3.9600158;3.9700158;3.9800158;3.9900157;4.0000157;4.010016;4.0200162;4.0300164;4.0400167;4.0500169;4.0600171;4.0700173;4.0800176;4.0900178;4.100018;4.1100183;4.1200185;4.1300187;4.1400189;4.1500192;4.1600194;4.1700196;4.1800199;4.1900201;4.2000203;4.2100205;4.2200208;4.230021;4.2400212;4.2500215;4.2600217;4.2700219;4.2800221;4.2900224;4.3000226;4.3100228;4.3200231;4.3300233;4.3400235;4.3500237;4.360024;4.3700242;4.3800244;4.3900247;4.4000249;4.4100251;4.4200253;4.4300256;4.4400258;4.450026;4.4600263;4.4700265;4.4800267;4.490027;4.5000272;4.5100274;4.5200276;4.5300279;4.5400281;4.5500283;4.5600286;4.5700288;4.580029;4.5900292;4.6000295;4.6100297;4.6200299;4.6300302;4.6400304;4.6500306;4.6600308;4.6700311;4.6800313;4.6900315;4.7000318;4.710032;4.7200322;4.7300324;4.7400327;4.7500329;4.7600331;4.7700334;4.7800336;4.7900338;4.800034;4.8100343;4.8200345;4.8300347;4.840035;4.8500352;4.8600354;4.8700356;4.8800359;4.8900361;4.9000363;4.9100366;4.9200368;4.930037;4.9400373;4.9500375;4.9600377;4.9700379;4.9800382;4.9900384;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program_Group @.gp[0] {
   name="SoAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[0][3]$0$;
   tags=;
   desc="The full set of programs for training a standard self-organizing network";
   Program @[0] {
    name="SoBatch";
    tags=;
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=SoNetwork;
      object_val=.projects[0].networks[0]$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][0]$2$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
     ProgVar @[2] {
      name="max_batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="maximum number of batch runs to perform";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="batch counter";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$3$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$4$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$3$;
      local_ctr_var=$4$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=.projects[0].programs.gp[0][1]$5$;
	targ_ld_init="*SoTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=SoNetwork;
	  type="SoNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$3$;
	local_ctr_var=$4$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="SoTrain";
    tags=;
    desc="A complete training run of a Backpropagation network: iterating over epochs until the network has learned the task";
    flags=;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=SoNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of epochs to run";
     };
     ProgVar @[1] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
     };
     ProgVar @[2] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$6$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
     };
     ProgVar @[3] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="stopping criterion -- when error measure (average sum squared error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$7$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$8$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$9$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[1] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[6]$10$;
      expr {
       expr="network.train_time";
      };
     };
     NetCounterInit @[2] {
      desc="initialize epoch counter ";
      flags=;
      network_var=$9$;
      local_ctr_var=.projects[0].programs.gp[0][1].vars[3]$11$;
      counter=Network::epoch;
      update_after=0;
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[5]$12$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$12$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="this initializes the weights every time user presses Init -- could turn this off for large nets (init is also in prog_code)";
      flags=;
      result_var=NULL;
      obj=$9$;
      method=Network::Init_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$10$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$10$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     NetCounterInit @[2] {
      desc="initialize epoch counter (both our local copy and network's epoch counter)";
      flags=;
      network_var=$9$;
      local_ctr_var=$11$;
      counter=Network::epoch;
      update_after=0;
     };
     MemberAssign @[3] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$9$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     MethodCall @[4] {
      desc="initialize network weights: could also load pre-set weights or something else here";
      flags=;
      result_var=NULL;
      obj=$9$;
      method=Network::Init_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][2]$13$;
	targ_ld_init="*SoEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=SoNetwork;
	  type="SoNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$9$;
	local_ctr_var=$11$;
	counter=Network::epoch;
	update_after=0;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.avg_sse <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$10$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="SoEpoch";
    tags=;
    desc="iterates over all of the items in a data table and calls SoTrial process on them";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=SoNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$14$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$15$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$16$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$17$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$18$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$16$;
      local_ctr_var=$17$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$18$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$18$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$19$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[4] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=$0$;
	targ_ld_init="*SoTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=SoNetwork;
	  type="SoNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       IfElse @[1] {
	desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
	flags=;
	cond {
	 expr="network.Compute_Weights_Test(trial+1)";
	};
	true_code {
	 name=;
	 el_typ=MethodCall;
	 el_def=0;
	 MethodCall @[0] {
	  desc="update the weight values based on changes computed by trial program";
	  flags=;
	  result_var=NULL;
	  obj=$16$;
	  method=Network::Compute_Weights;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$20$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$21$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$22$;
      order=PERMUTED;
      item_idx_list{ 15;9;36;17;43;40;5;20;10;24;38;11;44;13;8;7;19;46;0;12;28;2;32;47;48;41;26;21;49;25;18;4;34;6;31;16;23;29;37;35;1;39;45;30;14;42;27;22;33;3;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[5] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$16$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$16$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[7] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[0][6]$23$;
      targ_ld_init="*SoEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="SoNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$18$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[3] {
    name="SoTrial";
    tags=;
    desc="Self-organizing processing of a single input/output event or external information";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=SoNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][3].args[0]$24$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[1] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[0][4]$25$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="SoNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$24$;
      method=SoNetwork::Trial_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$24$;
      method=LeabraNetwork::Compute_TrialStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[4] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[0][5]$26$;
      targ_ld_init="*SoTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="SoNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[5] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$24$;
      update_var=.projects[0].programs.gp[0][3].vars[0]$27$;
     };
    };
   };
   Program @[4] {
    name="ApplyInputs";
    tags=;
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$2$;
      network=$1$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][4].objs[0]$28$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][4].vars[0]$29$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$29$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$29$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[5] {
    name="SoTrialMonitor";
    tags=;
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=$14$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$14$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][5].objs[0]$30$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].vars[1]$31$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$31$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$31$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].vars[0]$32$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$31$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$32$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$33$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[6] {
    name="SoEpochMonitor";
    tags=;
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=.projects[0].data.gp[1][1]$34$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][6].objs[0]$35$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$15$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][6].vars[2]$36$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[1]$37$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$37$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$37$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$38$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$37$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$36$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$38$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$38$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$38$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="SaveWeights";
    tags=;
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[4]$39$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[3]$40$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[5]$41$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[2]$42$;
      obj=.projects[0].programs.gp[0][7].args[0]$43$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$43$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$44$;
   name="Browser";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=SoProject;
     root_md=NULL;
     m_root=$44$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="Frame2";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  m_data=$1$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=10: y=10: z=2: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$45$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=0;Map=0;	  };
	 };
	};
       };
       camera_pos {x=0.4111154: y=0.9484684: z=1.643028: };
       camera_orient {x=-0.9899709: y=-0.139742: z=-0.02075347: rot=0.306021: };
       camera_focdist=2.160273;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_change_log=0;
 last_change_desc=;
 networks {
  name=;
  el_typ=SoNetwork;
  el_def=0;
  SoNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="batch";
     value 1 0=1;
    };
   };
   name="SoNetwork_0";
   desc=;
   specs {
    name=;
    el_typ=BaseSpec;
    el_def=0;
    SomLayerSpec @[0] {
     name="SomLayerSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=SomLayerSpec;
      el_def=0;
     };
     netin_type=MIN_NETIN_WINS;
     neighborhood {
      name=;
      el_typ=taBase;
      el_def=0;
      NeighborEl @[0] {
       off {x=0: y=-5: };
       act_val=0.188876;
      };
      NeighborEl @[1] {
       off {x=-3: y=-4: };
       act_val=0.188876;
      };
      NeighborEl @[2] {
       off {x=-2: y=-4: };
       act_val=0.225212;
      };
      NeighborEl @[3] {
       off {x=-1: y=-4: };
       act_val=0.252999;
      };
      NeighborEl @[4] {
       off {x=0: y=-4: };
       act_val=0.263597;
      };
      NeighborEl @[5] {
       off {x=1: y=-4: };
       act_val=0.252999;
      };
      NeighborEl @[6] {
       off {x=2: y=-4: };
       act_val=0.225212;
      };
      NeighborEl @[7] {
       off {x=3: y=-4: };
       act_val=0.188876;
      };
      NeighborEl @[8] {
       off {x=-4: y=-3: };
       act_val=0.188876;
      };
      NeighborEl @[9] {
       off {x=-3: y=-3: };
       act_val=0.243117;
      };
      NeighborEl @[10] {
       off {x=-2: y=-3: };
       act_val=0.300637;
      };
      NeighborEl @[11] {
       off {x=-1: y=-3: };
       act_val=0.348509;
      };
      NeighborEl @[12] {
       off {x=0: y=-3: };
       act_val=0.367879;
      };
      NeighborEl @[13] {
       off {x=1: y=-3: };
       act_val=0.348509;
      };
      NeighborEl @[14] {
       off {x=2: y=-3: };
       act_val=0.300637;
      };
      NeighborEl @[15] {
       off {x=3: y=-3: };
       act_val=0.243117;
      };
      NeighborEl @[16] {
       off {x=4: y=-3: };
       act_val=0.188876;
      };
      NeighborEl @[17] {
       off {x=-4: y=-2: };
       act_val=0.225212;
      };
      NeighborEl @[18] {
       off {x=-3: y=-2: };
       act_val=0.300637;
      };
      NeighborEl @[19] {
       off {x=-2: y=-2: };
       act_val=0.389532;
      };
      NeighborEl @[20] {
       off {x=-1: y=-2: };
       act_val=0.474565;
      };
      NeighborEl @[21] {
       off {x=0: y=-2: };
       act_val=0.513417;
      };
      NeighborEl @[22] {
       off {x=1: y=-2: };
       act_val=0.474565;
      };
      NeighborEl @[23] {
       off {x=2: y=-2: };
       act_val=0.389532;
      };
      NeighborEl @[24] {
       off {x=3: y=-2: };
       act_val=0.300637;
      };
      NeighborEl @[25] {
       off {x=4: y=-2: };
       act_val=0.225212;
      };
      NeighborEl @[26] {
       off {x=-4: y=-1: };
       act_val=0.252999;
      };
      NeighborEl @[27] {
       off {x=-3: y=-1: };
       act_val=0.348509;
      };
      NeighborEl @[28] {
       off {x=-2: y=-1: };
       act_val=0.474565;
      };
      NeighborEl @[29] {
       off {x=-1: y=-1: };
       act_val=0.624125;
      };
      NeighborEl @[30] {
       off {x=0: y=-1: };
       act_val=0.716531;
      };
      NeighborEl @[31] {
       off {x=1: y=-1: };
       act_val=0.624125;
      };
      NeighborEl @[32] {
       off {x=2: y=-1: };
       act_val=0.474565;
      };
      NeighborEl @[33] {
       off {x=3: y=-1: };
       act_val=0.348509;
      };
      NeighborEl @[34] {
       off {x=4: y=-1: };
       act_val=0.252999;
      };
      NeighborEl @[35] {
       off {x=-5: y=0: };
       act_val=0.188876;
      };
      NeighborEl @[36] {
       off {x=-4: y=0: };
       act_val=0.263597;
      };
      NeighborEl @[37] {
       off {x=-3: y=0: };
       act_val=0.367879;
      };
      NeighborEl @[38] {
       off {x=-2: y=0: };
       act_val=0.513417;
      };
      NeighborEl @[39] {
       off {x=-1: y=0: };
       act_val=0.716531;
      };
      NeighborEl @[40] {
       off {x=0: y=0: };
       act_val=1;
      };
      NeighborEl @[41] {
       off {x=1: y=0: };
       act_val=0.716531;
      };
      NeighborEl @[42] {
       off {x=2: y=0: };
       act_val=0.513417;
      };
      NeighborEl @[43] {
       off {x=3: y=0: };
       act_val=0.367879;
      };
      NeighborEl @[44] {
       off {x=4: y=0: };
       act_val=0.263597;
      };
      NeighborEl @[45] {
       off {x=5: y=0: };
       act_val=0.188876;
      };
      NeighborEl @[46] {
       off {x=-4: y=1: };
       act_val=0.252999;
      };
      NeighborEl @[47] {
       off {x=-3: y=1: };
       act_val=0.348509;
      };
      NeighborEl @[48] {
       off {x=-2: y=1: };
       act_val=0.474565;
      };
      NeighborEl @[49] {
       off {x=-1: y=1: };
       act_val=0.624125;
      };
      NeighborEl @[50] {
       off {x=0: y=1: };
       act_val=0.716531;
      };
      NeighborEl @[51] {
       off {x=1: y=1: };
       act_val=0.624125;
      };
      NeighborEl @[52] {
       off {x=2: y=1: };
       act_val=0.474565;
      };
      NeighborEl @[53] {
       off {x=3: y=1: };
       act_val=0.348509;
      };
      NeighborEl @[54] {
       off {x=4: y=1: };
       act_val=0.252999;
      };
      NeighborEl @[55] {
       off {x=-4: y=2: };
       act_val=0.225212;
      };
      NeighborEl @[56] {
       off {x=-3: y=2: };
       act_val=0.300637;
      };
      NeighborEl @[57] {
       off {x=-2: y=2: };
       act_val=0.389532;
      };
      NeighborEl @[58] {
       off {x=-1: y=2: };
       act_val=0.474565;
      };
      NeighborEl @[59] {
       off {x=0: y=2: };
       act_val=0.513417;
      };
      NeighborEl @[60] {
       off {x=1: y=2: };
       act_val=0.474565;
      };
      NeighborEl @[61] {
       off {x=2: y=2: };
       act_val=0.389532;
      };
      NeighborEl @[62] {
       off {x=3: y=2: };
       act_val=0.300637;
      };
      NeighborEl @[63] {
       off {x=4: y=2: };
       act_val=0.225212;
      };
      NeighborEl @[64] {
       off {x=-4: y=3: };
       act_val=0.188876;
      };
      NeighborEl @[65] {
       off {x=-3: y=3: };
       act_val=0.243117;
      };
      NeighborEl @[66] {
       off {x=-2: y=3: };
       act_val=0.300637;
      };
      NeighborEl @[67] {
       off {x=-1: y=3: };
       act_val=0.348509;
      };
      NeighborEl @[68] {
       off {x=0: y=3: };
       act_val=0.367879;
      };
      NeighborEl @[69] {
       off {x=1: y=3: };
       act_val=0.348509;
      };
      NeighborEl @[70] {
       off {x=2: y=3: };
       act_val=0.300637;
      };
      NeighborEl @[71] {
       off {x=3: y=3: };
       act_val=0.243117;
      };
      NeighborEl @[72] {
       off {x=4: y=3: };
       act_val=0.188876;
      };
      NeighborEl @[73] {
       off {x=-3: y=4: };
       act_val=0.188876;
      };
      NeighborEl @[74] {
       off {x=-2: y=4: };
       act_val=0.225212;
      };
      NeighborEl @[75] {
       off {x=-1: y=4: };
       act_val=0.252999;
      };
      NeighborEl @[76] {
       off {x=0: y=4: };
       act_val=0.263597;
      };
      NeighborEl @[77] {
       off {x=1: y=4: };
       act_val=0.252999;
      };
      NeighborEl @[78] {
       off {x=2: y=4: };
       act_val=0.225212;
      };
      NeighborEl @[79] {
       off {x=3: y=4: };
       act_val=0.188876;
      };
      NeighborEl @[80] {
       off {x=0: y=5: };
       act_val=0.188876;
      };
     };
     wrap=0;
    };
    FullPrjnSpec @[1] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    SoftClConSpec @[2] {
     name="SoftClConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=SoftClConSpec;
      el_def=0;
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.4: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
     lrate=0.1;
     avg_act_source=LAYER_AVG_ACT;
    };
    SomUnitSpec @[3] {
     name="SomUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=SomUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=NULL;
     bias_spec {type=SoftClConSpec: spec=NULL: };
     sse_tol=0;
    };
    HebbConSpec @[4] {
     name=;
     desc=;
     unique{      };
     children {
      name=;
      el_typ=HebbConSpec;
      el_def=0;
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.5: par=1: };
     wt_limits {type=MIN_MAX: min=-1: max=1: sym=0: };
     lrate=0.1;
     avg_act_source=LAYER_AVG_ACT;
    };
   };
   layers {
    name=;
    el_typ=SoLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    SoLayer @[0] {
     name="Input";
     flags=;
     layer_type=INPUT;
     pos {x=4: y=4: z=0: };
     un_geom {x=2: y=1: n_not_xy=0: n=2: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=2: y=1: n_not_xy=0: n=2: };
     projections {
      name=;
      el_typ=Projection;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=Projection;
      el_def=0;
	    Projection_Group @. = [0] = Projection .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=SoUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=2: y=1: n_not_xy=0: n=2: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=SomUnitSpec: spec=.projects[0].networks[0].specs[3]$46$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     spec {type=SomLayerSpec: spec=.projects[0].networks[0].specs[0]$47$: };
     avg_act=0.1252386;
     sum_act=0.2504773;
    };
    SoLayer @[1] {
     name="Map";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=10: y=10: n_not_xy=0: n=100: };
     projections {
      name=;
      el_typ=Projection;
      el_def=0;
      Projection @[0] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$48$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[1]$49$: };
       con_type=SoCon;
       recvcons_type=SoRecvCons;
       sendcons_type=SoSendCons;
       con_spec {type=SoftClConSpec: spec=.projects[0].networks[0].specs[2]$50$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
      };
     };
     send_prjns {
      name=;
      el_typ=Projection;
      el_def=0;
     };
     units {
      name=;
      el_typ=SoUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=10: n_not_xy=0: n=100: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=SomUnitSpec: spec=$46$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     spec {type=SomLayerSpec: spec=$47$: };
     avg_act=0;
     sum_act=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=7752: sys=1153: tot=3136908121: }: end={usr=3218: sys=738: tot=2191370784: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="epoch_time": start={usr=7752: sys=1153: tot=3136908122: }: end={usr=7454: sys=1092: tot=3136901248: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=102;
   n_cons=200;
   max_size {x=10: y=10: z=2: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
  };
 };
};

// ta_Dump File v3.0 -- code v8.0.0.0 rev9947
LeabraProject .projects["sound_object"] { 
 Doc_Group @.docs = [2] {
  taDoc @["ProjectDocs"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };
  };
  taDoc @["ChangeLog"] { };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_running.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_done.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_done.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_deleted.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_deleted.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_deleted.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_archive.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_archive.control_panel_cells = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.file_list.control_panel_cells = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.cluster_info.control_panel_cells = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] { 
  };
  DataTable_Group @.gp["OutputData"] { 
  };
  DataTable_Group @.gp["AnalysisData"] = [1] { 
   DataTable @["AuditoryProc_1_MelFilters"] { 
    DataTableCols @.data = [2] {
     int_Data @["Bin"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["Filters"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
 };

 Program_TopGroup @.programs = [2] {
  Program @["SoundObjTest"] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [3] {
    taSound @["first_sound"] { };
    taSound @["second_sound"] { };
    DataTable @["RawSound"] { 
     DataTableCols @.data = [2] {
      float_Data @["frame"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["sound"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };

     DataTableCell_List @.control_panel_cells = [0] {
     };
    };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [6] {
    ProgVar @["first_sound"] { };
    ProgVar @["sound_file_name"] { };
    ProgVar @["RawSound"] { };
    ProgVar @["second_sound"] { };
    ProgVar @["play_sound"] { };
    ProgVar @["noise_level"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [12] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @["i"] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    CssExpr @[4] { };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MathCall @[7] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    CssExpr @[8] { };
    ForLoop @[9] { 
     ProgEl_List @.loop_code = [1] {
      CssExpr @[0] { };
     };
    };
    MethodCall @[10] { 
     ProgArg_List @.meth_args = [6] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
     };
    };
    If @[11] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
   };
  };
  Program @["AuditoryProcTest"] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [3] {
    taSound @["input_sound"] { };
    AuditoryProc @["AuditoryProc_1"] { };
    DataTable @["AuditoryOutTable"] { 
     DataTableCols @.data = [4] {
      float_Data @["AuditoryProc_1_dft_pow"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["AuditoryProc_1_mel_fbank"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["AuditoryProc_1_mel_fbank_tavg"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["AuditoryProc_1_mel_fbank_delta"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };

     DataTableCell_List @.control_panel_cells = [0] {
     };
    };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [4] {
    ProgVar @["input_sound"] { };
    ProgVar @["sound_file_name"] { };
    ProgVar @["AuditoryProc_1"] { };
    ProgVar @["AuditoryOutTable"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };

   ProgEl_List @.prog_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["T3Frames"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [3] {
      T3Panel @["RawSound"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["RawSound_Graph"] { 
	 T3DataView_List @.children = [2] {
	  GraphColView @["frame"] { };
	  GraphColView @["sound"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["RawSound_Graph_plot_1"] { };
	  GraphPlotView @["RawSound_Graph_plot_2"] { };
	  GraphPlotView @["RawSound_Graph_plot_3"] { };
	  GraphPlotView @["RawSound_Graph_plot_4"] { };
	  GraphPlotView @["RawSound_Graph_plot_5"] { };
	  GraphPlotView @["RawSound_Graph_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["RawSound_Graph_err_1"] { };
	  GraphPlotView @["RawSound_Graph_err_2"] { };
	  GraphPlotView @["RawSound_Graph_err_3"] { };
	  GraphPlotView @["RawSound_Graph_err_4"] { };
	  GraphPlotView @["RawSound_Graph_err_5"] { };
	  GraphPlotView @["RawSound_Graph_err_6"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["AuditoryProc_1_MelFilters"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["AuditoryProc_1_MelFilters_Graph"] { 
	 T3DataView_List @.children = [2] {
	  GraphColView @["Bin"] { };
	  GraphColView @["Filters"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [26] {
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_1"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_2"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_3"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_4"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_5"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_6"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_7"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_8"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_9"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_10"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_11"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_12"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_13"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_14"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_15"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_16"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_17"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_18"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_19"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_20"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_21"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_22"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_23"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_24"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_25"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_26"] { };
	 };

	 GraphPlotView_List @.errbars = [26] {
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_1"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_2"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_3"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_4"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_5"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_6"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_7"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_8"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_9"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_10"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_11"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_12"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_13"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_14"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_15"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_16"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_17"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_18"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_19"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_20"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_21"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_22"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_23"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_24"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_25"] { };
	  GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_26"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["AuditoryOutTable"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["AuditoryOutTable_Grid"] { 
	 T3DataView_List @.children = [4] {
	  GridColView @["AuditoryProc_1_dft_pow"] { };
	  GridColView @["AuditoryProc_1_mel_fbank"] { };
	  GridColView @["AuditoryProc_1_mel_fbank_tavg"] { };
	  GridColView @["AuditoryProc_1_mel_fbank_delta"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [0] {
 };
};
LeabraProject .projects["sound_object"] {
 name="sound_object";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=1;
 };
 author="Randall C. O'Reilly";
 email="randy.oreilly@colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {
  wiki=;
  page_name=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @["ProjectDocs"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_106";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ProjectDocs";
   desc=;
   web_doc=1;
   wiki="emergent";
   url="AuditoryProc";
   full_url="https://grey.colorado.edu/emergent/index.php/AuditoryProc";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text=;
  };
  taDoc @["ChangeLog"] {
   name="ChangeLog";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>

<li>Mon Aug 29 17:06:09 2016 version: 0.0.1 user: oreilly file_name: <code>sound_object.proj</code> <br>
svn rev: 9949 doc and version updt
</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<li>Mon Aug 29 17:06:09 2016 version: 0.0.1 user: oreilly file_name: <code>sound_object.proj</code> <br>
svn rev: 9949 doc and version updt
</ul>
</body>
</html>
";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_deleted {
    name="jobs_deleted";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["AuditoryProc_1_MelFilters"] {
    name="AuditoryProc_1_MelFilters";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["Bin"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_78";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Bin";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [201] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;      };
     };
     float_Data @["Filters"] {
      name="Filters";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 26;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [1] ;      };
      width=0;
      ar {
       name="ar";
      [26 201] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.5;0.5;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.5;0.5;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.5;0.5;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.5;0.5;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.5;0.5;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.5;0.5;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.5;
0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.66666669;0.33333334;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.33333334;0.66666669;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.5;0.5;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.66666669;0.33333334;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.33333334;0.66666669;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.75;0.25;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.5;
0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.25;0.75;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.66666669;0.33333334;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.33333334;0.66666669;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.75;0.25;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.5;0.5;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.25;
0.75;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.75;0.25;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.5;0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.25;0.75;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.80000001;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.60000002;0.40000001;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.40000001;
0.60000002;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.2;0.80000001;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.75;0.25;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.5;0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.25;0.75;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.83333331;0.16666667;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.66666669;
0.33333334;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.5;0.5;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.33333334;0.66666669;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.16666667;0.83333331;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.80000001;0.2;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.60000002;0.40000001;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.40000001;0.60000002;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0.80000001;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.83333331;0.16666667;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.66666669;0.33333334;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.5;0.5;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.33333334;
0.66666669;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.16666667;0.83333331;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.85714287;0.14285715;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.71428573;0.2857143;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.5714286;0.42857143;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.42857143;0.5714286;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2857143;0.71428573;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.14285715;0.85714287;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.85714287;0.14285715;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.71428573;0.2857143;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.5714286;0.42857143;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.42857143;
0.5714286;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.2857143;0.71428573;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.14285715;0.85714287;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.875;0.125;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.75;0.25;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.625;0.375;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.5;0.5;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.375;0.625;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.25;0.75;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.125;0.875;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.8888889;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.77777779;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.66666669;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.55555558;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.44444445;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.33333334;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.22222222;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.11111111;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [201] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["SoundObjTest"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @["DocLink"] {
     name="DocLink";
     doc=.projects["sound_object"].programs["SoundObjTest"].doc$$;
    };
   };
   name="SoundObjTest";
   short_nm="ndbTst";
   tags=;
   desc="test s for the sound object";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taSound;
    el_def=0;
    taSound @["first_sound"] {
     name="first_sound";
    };
    taSound @["second_sound"] {
     name="second_sound";
    };
    DataTable @["RawSound"] {
     name="RawSound";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @["frame"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1336478;
	 val_type_fixed=0;
	};
       };
       name="frame";
       col_flags=SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=85;
      };
      float_Data @["sound"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1336478;
	 val_type_fixed=0;
	};
       };
       name="sound";
       col_flags=SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=85;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [0]      };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     control_panel_cells {
      name="control_panel_cells";
      el_typ=DataTableCell;
      el_def=0;
     };
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["first_sound"] {
     name="first_sound";
     var_type=T_Object;
     object_type=taSound;
     object_val=.projects["sound_object"].programs["SoundObjTest"].objs["first_sound"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["sound_file_name"] {
     name="sound_file_name";
     var_type=T_String;
     string_val="arctic_a0001.wav";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["RawSound"] {
     name="RawSound";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["sound_object"].programs["SoundObjTest"].objs["RawSound"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["second_sound"] {
     name="second_sound";
     var_type=T_Object;
     object_type=taSound;
     object_val=.projects["sound_object"].programs["SoundObjTest"].objs["second_sound"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["play_sound"] {
     name="play_sound";
     var_type=T_Int;
     int_val=2;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="which sound to play (1 or 2)";
     init_from=NULL;
    };
    ProgVar @["noise_level"] {
     name="noise_level";
     var_type=T_Real;
     real_val=0.05;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["i"] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="first_sound->LoadSound(sound_file_name)";
     pre_compile_code_string="first_sound->LoadSound(sound_file_name)";
     result_var=NULL;
     obj=.projects["sound_object"].programs["SoundObjTest"].vars["first_sound"]$$;
     method=taSound::LoadSound;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="sound_file_name";
       };
      };
     };
     meth_sig="bool LoadSound(taString& fname)";
     meth_desc=" load a sound from given file name (leave file name blank to get a chooser)";
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (play_sound == 1)";
     pre_compile_code_string="if (play_sound == 1)";
     cond {
      expr="play_sound == 1";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="first_sound->PlaySound(\"\")";
       pre_compile_code_string="first_sound->PlaySound(\"\")";
       result_var=NULL;
       obj=$.projects["sound_object"].programs["SoundObjTest"].vars["first_sound"]$;
       method=taSound::PlaySound;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="device_name";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"\"";
	 };
	};
       };
       meth_sig="bool PlaySound(taString& device_name)";
       meth_desc=" play the sound to the given device name (empty for default) -- use ListSoundDevices to find a list of valid device names";
      };
     };
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RawSound->ResetData()";
     pre_compile_code_string="RawSound->ResetData()";
     result_var=NULL;
     obj=.projects["sound_object"].programs["SoundObjTest"].vars["RawSound"]$$;
     method=DataTable::ResetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ResetData()";
     meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
    };
    CssExpr @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RawSound->EnforceRows(first_sound.FrameCount());";
     pre_compile_code_string="RawSound->EnforceRows(first_sound.FrameCount());";
     expr {
      expr="RawSound->EnforceRows(first_sound.FrameCount());";
     };
    };
    MethodCall @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="first_sound->SoundToMatrix(RawSound.sound.AR(), 0)";
     pre_compile_code_string="first_sound->SoundToMatrix(RawSound.sound.AR(), 0)";
     result_var=NULL;
     obj=$.projects["sound_object"].programs["SoundObjTest"].vars["first_sound"]$;
     method=taSound::SoundToMatrix;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float_Matrix_ref;
       type="float_Matrix&";
       name="sound_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="RawSound.sound.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="channel";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="0";
       };
      };
     };
     meth_sig="bool SoundToMatrix(float_Matrix& sound_data, int channel = -1)";
     meth_desc=" convert sound data to floating point Matrix with normalized -1..1 values (unless sound is stored as a float natively, in which case it is not guaranteed to be normalized) -- for use in signal processing routines -- can optionally select a specific channel (formats sound_data as a single-dimensional matrix of frames size), and -1 gets all available channels (formats sound_data as two-dimensional matrix with inner dimension as channels and outer dimension frames";
    };
    MethodCall @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RawSound->InitValsToRowNo(\"frame\")";
     pre_compile_code_string="RawSound->InitValsToRowNo(\"frame\")";
     result_var=NULL;
     obj=$.projects["sound_object"].programs["SoundObjTest"].vars["RawSound"]$;
     method=DataTable::InitValsToRowNo;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"frame\"";
       };
      };
     };
     meth_sig="bool InitValsToRowNo(Variant& col)";
     meth_desc=" initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name";
    };
    MathCall @[7] {
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="taMath_float::vec_norm_max(RawSound.sound.AR(), 1.0)";
     pre_compile_code_string="taMath_float::vec_norm_max(RawSound.sound.AR(), 1.0)";
     result_var=NULL;
     object_type=taMath_float;
     method=taMath_float::vec_norm_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="RawSound.sound.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=float;
       type="float";
       name="max";
       required=0;
       def_val="1.0f";
       prev_expr=;
       expr {
	expr="1.0";
       };
      };
     };
    };
    CssExpr @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RawSound[1][:] += noise_level * rand([RawSound.rows]) - 0.5 * noise_level;";
     pre_compile_code_string="RawSound[1][:] += noise_level * rand([RawSound.rows]) - 0.5 * noise_level;";
     expr {
      expr="RawSound[1][:] += noise_level * rand([RawSound.rows]) - 0.5 * noise_level;";
     };
    };
    ForLoop @[9] {
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<RawSound.rows; i++)";
     pre_compile_code_string="for (i=0; i<RawSound.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      CssExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="RawSound[1][i] += Random::Gauss(noise_level);";
       pre_compile_code_string="RawSound[1][i] += Random::Gauss(noise_level);";
       expr {
	expr="RawSound[1][i] += Random::Gauss(noise_level);";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<RawSound.rows";
     };
     iter {
      expr="i++";
     };
    };
    MethodCall @[10] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="second_sound->SoundFromMatrix(RawSound.sound.AR(), 0, 16000, 16, taSound::SignedInt, )";
     pre_compile_code_string="second_sound->SoundFromMatrix(RawSound.sound.AR(), 0, 16000, 16, taSound::SignedInt, )";
     result_var=NULL;
     obj=.projects["sound_object"].programs["SoundObjTest"].vars["second_sound"]$$;
     method=taSound::SoundFromMatrix;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ref;
       type="float_Matrix&";
       name="sound_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="RawSound.sound.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="channel";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="0";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="sample_rate";
       required=0;
       def_val="44100";
       prev_expr=;
       expr {
	expr="16000";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="sample_size";
       required=0;
       def_val="16";
       prev_expr=;
       expr {
	expr="16";
       };
      };
      ProgArg @[4] {
       arg_type=taSound::SoundSampleType;
       type="taSound::SoundSampleType";
       name="sample_type";
       required=0;
       def_val="taSound::SignedInt";
       prev_expr=;
       expr {
	expr="taSound::SignedInt";
       };
      };
      ProgArg @[5] {
       arg_type=taSound::Endian;
       type="taSound::Endian";
       name="byte_order";
       required=0;
       def_val="taSound::LittleEndian";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="bool SoundFromMatrix(float_Matrix& sound_data, int channel = -1, int sample_rate = 44100, int sample_size = 16, taSound::SoundSampleType sample_type = SignedInt, taSound::Endian byte_order = LittleEndian)";
     meth_desc=" load sound data from floating point Matrix with normalized -1..1 values -- configures a new audio buffer based on size and channels of matrix (for a 2D matrix) -- can optionally select a specific channel from a multi-channel matrix (-1 uses all channels) -- you can also specify all the other parameters of the audio buffer";
    };
    If @[11] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (play_sound == 2)";
     pre_compile_code_string="if (play_sound == 2)";
     cond {
      expr="play_sound == 2";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="second_sound->PlaySound(\"\")";
       pre_compile_code_string="second_sound->PlaySound(\"\")";
       result_var=NULL;
       obj=$.projects["sound_object"].programs["SoundObjTest"].vars["second_sound"]$;
       method=taSound::PlaySound;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="device_name";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"\"";
	 };
	};
       };
       meth_sig="bool PlaySound(taString& device_name)";
       meth_desc=" play the sound to the given device name (empty for default) -- use ListSoundDevices to find a list of valid device names";
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @["AuditoryProcTest"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @["DocLink"] {
     name="DocLink";
     doc=.projects["sound_object"].programs["AuditoryProcTest"].doc$$;
    };
   };
   name="AuditoryProcTest";
   short_nm="dtrPrT";
   tags=;
   desc="test s for the auditory processing system";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taSound;
    el_def=0;
    taSound @["input_sound"] {
     name="input_sound";
    };
    AuditoryProc @["AuditoryProc_1"] {
     name="AuditoryProc_1";
     threads {
      run_time {name="TimeUsedHR_84": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
      sync_time {name="TimeUsedHR_85": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
      total_time {name="TimeUsedHR_86": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
      n_wake_in_sync=0;
      run_time_pct=0;
      sync_time_pct=0;
      wake_in_sync_pct=0;
     };
     data_table=.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryOutTable"]$$;
     save_mode=FIRST_ROW;
     input {win_msec=25: step_msec=12.5: trial_msec=100: border_steps=12: sample_rate=16000: channels=1: channel=0: win_samples=400: step_samples=200: trial_samples=1600: trial_steps=8: total_steps=32: };
     dft {prv_smooth=0: log_pow=1: log_off=0: log_min=-100: cur_smooth=1: };
     mel_fbank {on=1: lo_hz=300: hi_hz=8000: n_filters=26: log_off=0: log_min=-10: lo_mel=401.9727: hi_mel=2840.038: };
     fbank_renorm {on=1: ren_min=-10: ren_max=7: ren_scale=0.05882353: };
     gabor1 {on=1: sz_time=6: sz_freq=6: spc_time=2: spc_freq=2: wvlen=1.5: sig_len=0.6: sig_wd=0.3: sig_hor_len=0.3: sig_hor_wd=0.1: gain=2: n_horiz=4: phase_off=0: circle_edge=1: n_filters=7: };
     gabor2 {on=1: sz_time=12: sz_freq=12: spc_time=4: spc_freq=4: wvlen=1.5: sig_len=0.6: sig_wd=0.3: sig_hor_len=0.3: sig_hor_wd=0.1: gain=2: n_horiz=4: phase_off=0: circle_edge=1: n_filters=7: };
     gabor3 {on=0: sz_time=6: sz_freq=6: spc_time=1651461152: spc_freq=1968385893: wvlen=1.5: sig_len=0.6: sig_wd=0.3: sig_hor_len=0.3: sig_hor_wd=0.1: gain=2: n_horiz=4: phase_off=0: circle_edge=1: n_filters=7: };
     mfcc {on=0: n_coeff=13: };
     gabor_kwta {on=1: gi=2: lay_gi=1.5: gain=80: nvar=0.01: g_bar_l=0.1: };
     gabor1_geom {x=4: y=10: n_not_xy=0: n=40: };
     gabor2_geom {x=2: y=4: n_not_xy=0: n=8: };
     gabor3_geom {x=1: y=1: n_not_xy=0: n=1: };
    };
    DataTable @["AuditoryOutTable"] {
     name="AuditoryOutTable";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @["AuditoryProc_1_dft_pow"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_79";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="AuditoryProc_1_dft_pow";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 8;201;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=0;
       ar {
	name="ar";
       [8 201 1] 3.730284;2.3924012;2.7886057;4.3222923;3.2136199;3.527981;9.2838268;0.65717489;5.058569;3.3868372;
3.0878932;5.9474306;5.0155363;4.0718312;11.803611;2.436003;9.9726238;7.4958138;9.0466518;12.644826;
12.17385;11.958017;22.338264;11.827522;82.592819;71.047783;73.675682;83.435425;94.893997;101.18163;
165.45993;150.08713;67.795105;92.240219;114.50014;134.16112;161.14851;211.96452;204.45224;253.24037;
11.879515;15.821123;11.348898;9.7851734;13.324894;20.186134;18.386698;30.755571;10.991623;7.5606484;
7.0640554;0.95156902;8.57411;15.335015;12.37602;24.988129;226.61856;424.67102;398.2749;342.57376;
472.56509;648.49341;463.73135;148.61922;5.1499152;10.032085;2.1949964;30.749477;4.2109561;0.0075513832;
2.5708745;7.5561609;14.478759;16.032951;5.5369534;23.987732;2.3557954;18.653725;2.2436156;9.9021358;
271.40878;204.80371;84.265793;76.760139;31.594297;34.173534;20.233303;20.497303;37.092999;84.701721;
145.98943;91.678841;81.869995;20.6091;27.321089;16.206549;4.2168684;12.413053;20.279919;3.2417901;
8.1224318;2.4038773;3.4872565;0.28927374;1.9240086;5.167798;8.8041296;0.17608714;3.9949617;1.2051883;
2.4532971;0.51396531;81.367722;60.981075;19.583;12.789352;6.5940752;9.4494267;8.601182;2.7010407;
3.9379475;1.2703077;5.2262049;3.8318305;8.5843754;0.48431808;1.4614156;0.17609186;0.85521764;1.3045533;
1.7074066;1.31871;2.8199267;0.14704154;0.6751706;0.1441669;3.4966466;4.8733292;0.35150602;1.3051175;
2.7979879;0.10252926;2.4541686;0.064646706;4.6321859;2.3121512;12.055375;3.4758172;2.6362998;2.2350912;
1.0573957;3.0357676;1.9665333;0.29870841;2.5332277;0.16406709;1.6196134;0.5162372;0.17955701;0.47930497;
0.70435643;0.13849714;1.7339733;0.14125954;0.70181966;0.51034319;0.092126898;0.17653851;4.4955301;2.5754778;
2.3258195;1.7095358;0.2500098;3.5152159;1.3729596;0.42358315;0.86916304;0.089876227;2.1479177;0.87282699;
3.149188;0.2073338;0.95385534;0.99000871;0.56126964;0.012930118;1.265663;0.30454761;1.5107481;0.20882365;
0.30088726;0.58797979;0.21257722;0.52754235;0.81469357;0.18206577;1.4908032;0.33956391;1.0535275;0.58823073;
0.90498662;0.40241206;3.5615077;0.47853941;0.9021318;0.42384151;0.21265565;0.86202246;0.65693569;0.053893913;
1.1932499;0.056454178;0.89016712;0.06156091;0.024548393;0.18330786;0.54386431;0.0095678372;0.91734242;0.08473637;
0.61569554;0.028434172;0.058489136;0.27026719;0.46846414;0.10983233;0.72885305;0.1425447;0.31840748;0.18768759;
0.30609637;0.3072806;0.41175532;0.0096345413;0.72188282;0.06137507;0.99665248;0.054845028;0.058117047;0.16423136;
0.39664549;0.0063764029;0.61619437;0.040967569;0.74022156;0.057047926;0.099691525;0.20603974;0.1186015;0.038815111;
0.59544027;0.036540117;0.65164238;0.07358598;0.13614331;0.31241721;0.36982352;0.0027129303;0.71567005;0.084065236;
0.34914958;0.037643477;0.035469532;0.047338691;0.35671127;0.0010511243;0.50675422;0.029274831;0.455338;0.021495756;
0.046208866;0.069154695;0.36649865;0.00034517693;0.51639748;0.021629866;0.45299569;0.013205472;0.034435879;0.074265994;
0.17713529;0.024113299;0.48758703;0.0063941963;0.52017051;0.00647048;0.0080207838;0.24543883;0.22794476;0.0074515599;
0.39279017;0.075706087;0.37251425;0.080248587;0.012121546;0.075211935;0.27576634;0.0054875775;0.39450768;0.036459941;
0.33666363;0.011670437;0.014744151;0.077767126;0.27448541;0.0078995191;0.32209128;0.034462862;0.2873567;0.038253173;
0.010832392;0.017092949;0.22968927;0.014202949;0.24460098;0.024576103;0.2270529;0.10749212;0.10972743;0.12879795;
0.20762244;0.0076852618;0.36249134;0.03005133;0.37416843;0.03784924;0.032412041;0.095619731;0.38902307;0.015631063;
0.25964558;0.026282558;0.34247959;0.03319547;0.035613284;0.099935926;0.12439487;0.055413831;0.27194428;0.024825267;
0.29895002;0.049969912;0.060938641;0.042103712;0.20019303;0.0014763455;0.38465512;0.019854739;0.22586979;0.029096179;
0.032004312;0.071234286;0.18232262;0.0013942765;0.23025022;0.020527579;0.18579251;0.0045187813;0.022936666;0.06472896;
0.36821401;0.0056894138;0.23749198;0.02618866;0.21858634;7.6163924e-05;0.019913677;0.063435748;0.16589305;0.017144354;
0.22687593;0.08103063;0.15301642;0.10164086;0.033310249;0.062276565;0.1250682;0.0032522248;0.25206989;0.043317441;
0.55428094;0.0055187978;0.030628541;0.09051919;0.32350159;0.0090080574;0.21666051;0.01561316;0.22545227;0.0034446912;
0.036926165;0.079262033;0.20915405;0.12810822;0.21697268;0.0088390596;0.14896348;0.056162808;0.1257259;0.057343215;
0.33324891;0.010420875;0.55606562;0.077197835;0.15332709;0.062411264;0.048087034;0.043773793;0.40957415;0.01049115;
0.25613973;0.0088571589;0.17160472;0.064160578;0.058980245;0.052102737;0.93692195;0.038960107;0.25317743;0.0057372586;
0.21894887;0.14098483;0.05317051;0.13040055;0.98011124;0.17012678;0.10593545;0.077464484;0.036436439;0.29182348;
0.049095798;0.035151105;1.394008;0.082275607;0.40045315;0.27900642;1.5063;0.22830336;0.063558966;0.040142562;
3.2151563;0.11107929;0.58476967;0.033241071;0.15065613;0.18107769;0.033395991;0.011091704;0.45730567;1.8417901;
0.82341301;0.052742343;0.11240251;0.13700035;0.29621172;0.19556347;1.0339553;0.18252191;0.27472517;0.91394991;
2.211797;0.47523075;0.012913059;0.052045368;1.3827591;0.22717007;0.76518011;0.12511972;0.24678735;0.3678042;
0.042647343;0.018478479;0.73708761;2.0002277;1.3848338;0.0011996616;1.0249565;0.27660716;0.063891105;0.0086799301;
0.49578977;4.383317;4.8958883;0.36339062;1.6106677;0.0011561427;0.1138733;0.091457009;1.9810493;0.6383965;
1.6538088;8.7024355;4.8164062;0.2977581;0.045075156;0.046958625;3.1021466;0.8223542;1.769276;0.56516683;
0.012613215;0.14202437;0.030883245;0.062480316;6.8225212;12.196793;1.6475062;0.078720577;0.41680494;0.21952811;
0.27870145;0.014890525;1.3633418;0.077735342;2.4733467;0.14095606;0.62647712;0.52224714;0.00041776506;0.047958098;
2.4074152;0.095300235;0.45444039;0.56359559;0.26976556;0.25515938;0.0079115722;0.024600863;2.7621009;1.2776606;
0.2016695;0.67742443;0.4185687;0.24531478;0.0032066798;0.059189551;2.982322;5.2777319;4.1575375;0.62901843;
0.66506207;0.21746731;0.02663024;0.033086687;9.5846548;3.3988347;1.2302895;3.9206877;3.9452322;0.27289069;
0.028443275;0.049497336;20.059607;4.6985359;1.5284171;0.045430861;0.066866063;0.1770591;0.0055066943;0.045914084;
25.353245;40.941189;1.7372501;0.42543998;0.31357589;0.083887033;0.029961007;0.045479253;5.0323772;0.45183489;
18.429684;3.9320455;1.2355977;0.074795067;0.010459287;0.023316599;4.005888;0.33305544;0.10070436;2.6638045;
0.92844313;0.049700655;0.0078918962;0.016474718;6.7201438;1.3512861;0.97600311;0.83176768;0.056984037;0.041130636;
0.0039528757;0.033619191;0.38392782;5.9877219;2.9827268;0.38408953;0.67372286;0.041877553;0.016135423;0.023950126;
2.3505678;2.3991392;1.0838338;3.7067454;1.9057809;0.10308428;0.016777266;0.026183464;2.9015689;1.9203339;
0.26747864;0.048197571;0.11384761;0.087780245;0.00945195;0.016064586;2.3271699;6.1148958;0.18419394;0.085656837;
0.17401627;0.081298299;0.015188961;0.021955911;1.6316034;0.88647723;5.9190798;1.3889227;0.5831188;0.11881921;
0.010042727;0.024002951;1.2276144;0.14243665;0.024606034;1.9605889;1.1107149;0.12061076;0.0050107362;0.034165297;
5.635499;2.9448323;1.3983936;0.574175;0.01405289;0.1195548;0.0023675151;0.020057632;0.027651038;5.8747907;
3.389236;0.46042863;0.39210844;0.082743198;0.019310016;0.011978812;4.5825043;1.6728373;2.4641535;4.8785005;
2.6722438;0.11601751;0.010099657;0.014150243;5.6314673;1.3308957;0.62897038;0.15111628;0.27642092;0.055849358;
0.0081972033;0.033256523;2.9386904;14.409926;0.86867195;0.26360887;0.17414786;0.073881388;0.037383407;0.042519558;
7.054883;1.4690769;12.468783;5.0848188;1.5746951;0.12776572;0.0022660631;0.0173428;4.8806119;0.10175559;
0.5915426;4.6884294;3.1220844;0.24996711;0.0028520816;0.0082596093;10.062493;7.44912;2.9468544;1.2452673;
0.31401628;0.19844478;0.004323707;0.0084064119;0.38474244;9.0961256;5.1899853;0.18914437;0.064143777;0.24742582;
0.043516748;0.06975054;5.6270103;1.7089927;1.5627248;4.9293456;3.3236482;0.34706721;1.9272598e-05;0.031975377;
4.8089495;1.2349473;0.76295781;0.69599962;0.56689644;0.30291831;0.032698888;0.043700613;0.76026231;7.1228065;
1.1019979;0.13755018;0.20460287;0.31136727;0.068342805;0.048258215;5.1702871;0.55489886;3.8449752;2.5225778;
0.78302431;0.25050282;0.018113891;0.067560896;4.2668509;0.35862482;2.7442458;6.15908;3.3361404;0.29959396;
0.0062879124;0.059358783;2.5158858;1.8190998;1.5226917;0.40002429;0.43370771;0.098801985;0.030392516;0.0037544717;
0.17849672;2.8526745;1.8215352;0.021884007;0.052088078;0.072501868;0.12161814;0.099399179;0.59173471;0.52555168;
0.59691328;0.50761956;1.1791116;0.13357876;0.015779329;0.0085639693;0.29479587;0.21672361;0.16132249;0.060622524;
0.13282302;0.064822897;0.0056601176;0.03334121;0.082972318;0.28501856;0.14536649;0.00076227257;0.23280315;0.040079191;
0.0022546484;0.012083875;0.12484256;0.061390705;0.065086976;0.049265712;0.01931731;0.051829897;0.020226758;0.049550381;
0.17238691;0.092709452;0.15429652;0.091636851;0.25948414;0.018884696;0.016982868;0.02155054;0.036239374;0.037000544;
0.24093866;0.0022981477;0.1009216;0.01396879;0.012005299;0.011949831;0.0013488808;0.026164006;0.19391465;0.015729534;
0.072765812;0.0036612013;0.01046776;0.0066497782;0.00044526131;0.0055742213;0.096131809;0.013171862;0.091028042;0.0037829585;
0.0099899806;0.015496431;0.00067006238;0.013583363;0.14835671;0.046958644;0.049402826;0.0029915951;0.0078154271;0.018007282;
0.0398148;0.0024117827;0.076038547;0.021551767;0.065839984;0.0030917153;0.009813441;0.015773198;0.019475799;0.022692924;
0.058602393;0.011880341;0.054128367;0.0024908711;0.0087562688;0.014129473;0.0055262344;0.015488764;0.063627064;0.020000147;
0.077879682;0.0025966982;0.0081424974;0.013449967;5.1240542e-05;0.0043835146;0.077595741;0.0054668183;0.057644147;0.0028329501;
0.0074885036;0.013286884;0.003627436;0.0021658055;0.072445139;0.0042752847;0.048196651;0.0031046958;0.0081129977;0.015087469;
0.0034043964;0.010040199;0.051415771;0.0099975886;0.045575008;0.002683226;0.0082064113;0.01444355;0.0038242806;0.013147602;
0.071299791;0.0055208164;0.048267234;0.0028773178;0.0073516015;0.013614407;0.0020187714;0.010322454;0.083592966;0.0073341969;
0.042379908;0.0024601612;0.0065847673;0.01151878;0.0026911325;0.0034794915;0.025607765;0.0040603131;0.043023922;0.0020660341;
0.0073429616;0.012683189;0.0029752357;0.0025051348;0.064072236;0.0050062952;0.035777185;0.0018855571;0.0075259232;0.013760535;
0.0012953714;0.013237458;0.11050405;0.012739542;0.052997742;0.0023678835;0.0076750531;0.013666281;0.0011912298;0.023359798;
0.025927674;0.015918758;0.039386433;0.0024852664;0.0057273344;0.011291697;0.0055589778;0.03440525;0.11676987;0.0058718645;
0.039896738;0.0024552147;0.0065862555;0.012077628;0.00062438252;0.032125078;0.074963436;0.0065554818;0.041481342;0.0026499745;
0.0066906363;0.011986769;0.00099570339;0.041216101;0.034211904;0.0041838842;0.042473424;0.0024256699;0.0065892064;0.011566184;
0.0052460944;0.018714823;0.1518302;0.0054605673;0.04032867;0.0027843521;0.0062059071;0.011639698;0.0018959588;0.011340797;
0.025131328;0.0059448099;0.039012302;0.0024410861;0.006260477;0.011606679;0.0020493385;0.015141129;0.064128548;0.0052032904;
0.03732137;0.0024184263;0.0064202296;0.011852781;0.0024139567;0.023132762;0.12509626;0.0045721163;0.039143853;0.0025126876;
0.0064748027;0.011336122;0.0019140058;0.026378024;0.0087479772;0.0041034105;0.036169432;0.0021959026;0.006101029;0.010835553;
0.0027649319;0.026257198;0.082671553;0.0044189589;0.036477439;0.0023005316;0.0061980188;0.01129286;0.0022064352;0.025941575;
0.094613686;0.0060590575;0.032259595;0.0023036965;0.006024126;0.011068624;0.00083394069;0.010641039;0.0059092855;0.006255961;
0.034121752;0.002177295;0.0059115654;0.010895967;0.0012899154;0.0070078112;0.086386889;0.0045982217;0.036831398;0.0026426199;
0.0057575628;0.010907284;0.00089500885;0.0080103735;0.068448357;0.0053688204;0.032997664;0.002499037;0.0060535963;0.010656998;
0.0029338386;0.025236988;0.010976227;0.0054903156;0.03333912;0.0025721781;0.0059080129;0.010588164;0.00050901453;0.027422335;
0.10300739;0.0048726127;0.031310543;0.002684684;0.005843;0.01054247;0.0026367409;0.019738816;0.052443817;0.0030623171;
0.040717244;0.0030221513;0.0059069199;0.010009847;0.0021335788;0.0048474856;0.021231715;0.006845559;0.02868462;0.0035345927;
0.0063102734;0.010759238;0.0014527519;0.0035160421;0.078671426;0.007988994;0.031407602;0.0037055905;0.0062121991;0.010242683;
0.0010943102;0.001192303;0.022725755;0.0055757314;0.029120566;0.0037142574;0.0057098442;0.010399232;0.0013397797;0.0068177748;
0.026820406;0.0024083164;0.03821345;0.0034189562;0.0042762803;0.0070730611;0.0050172564;0.0048584924;0.06175293;0.0011896108;
0.029152447;0.0031931391;0.00348399;0.01517488;0.0027070404;0.0032779481;0.074495822;0.0057946038;0.021339007;0.0032253189;
0.0053255055;0.013932161;0.029325679;0.0042488733;0.053480167;0.007579755;0.057948183;0.0018718685;0.006084431;0.012493996;
0.026299164;0.030963352;0.062014963;0.027443778;0.0053840089;0.0017476239;0.028613256;0.028027235;0.0027257816;0.00060233672;
0.013780747;0.017338397;0.031120095;0.0015490524;0.0012439984;0.013330272;0.047689289;0.0099121006;0.038608685;0.0075136777;
0.033455625;0.0038079352;0.0050353948;0.014077197;0.00041143291;0.023391813;0.040617216;0.0070300824;0.033727698;0.0015947502;
0.0087225456;0.0029893543;0.0030191955;0.00018908552;0.038023226;0.0033631772;0.026065731;0.0021988251;0.0028961322;0.0091810394;
0.0056745121;0.0011861619;0.03954136;0.0012561772;0.023365811;0.0024772752;0.0055783354;0.0072142016;0.0060688676;0.0022356745;
0.031651802;0.0066859298;0.024728876;0.0018995041;0.0050787246;0.0096446024;0.0040037776;0.00058977312;0.036289085;0.0012894387;
0.023485417;0.002181269;0.0057998472;0.0083045224;0.00073626573;0.001921777;0.023497026;0.0025330144;0.032228932;0.002344802;
0.003681476;0.0080572013;0.0077342517;0.00018835806;0.032200001;0.0030152583;0.027934985;0.0014830359;0.0044778567;0.0096905818;
0.0008332053;0.00045475576;0.032977611;0.0048668971;0.022664521;0.0014009534;0.0033394571;0.0072654979;0.00384243;0.00093991181;
0.026716739;0.0050727893;0.022122972;0.002898037;0.005168614;0.0069267936;0.00031751688;0.0016834623;0.031730011;0.0065858243;
0.020607736;0.0011818283;0.0045463494;0.0074762739;0.0042936089;0.00054763199;0.031851262;0.0018080359;0.024760306;0.0016001419;
0.0042034518;0.010676909;0.0041900696;0.0057738489;0.026225271;0.0051274044;0.025052695;0.002102626;0.0023303158;0.0051373523;
0.00026737977;0.00070548605;0.023206586;0.0043484801;0.029504083;0.0018819215;0.0034475508;0.011908264;0.0079522692;0.0017371979;
0.032146808;0.0038824058;0.028142357;0.0036202841;0.0028835456;0.0080368472;0.00064511289;0.0023383899;0.025338914;0.004456101;
0.024433808;0.0014609249;0.0015084731;0.0097857434;0.0042934064;0.00073159701;0.025762016;0.0022821685;0.021889476;0.0023145217;
0.0020849018;0.0070277569;0.00010069255;0.00011510396;0.031103363;0.0021190038;0.0226357;0.0024432344;0.0018057412;0.011270226;
0.0074552801;0.0045959069;0.020591658;0.0040489365;0.027518438;0.0035825514;0.0019473076;0.0074400236;0.0081151454;0.00022765296;
0.023548046;0.0035424791;0.02271031;0.00198321;0.0034323558;0.0086173909;0.00072939915;0.000776353;0.023034766;0.0035498368;
0.029244166;0.0024591591;0.0078448597;0.01409154;0.00211219;0.0007163462;0.029626947;0.0030311539;0.020610826;0.0076544024;
0.0013933136;0.016272165;0.0017968201;0.00033269543;0.031207226;0.0042144102;0.01401469;0.0007588669;0.0076679573;0.019036232;
0.0011794057;0.0029426322;0.031248407;0.0023700087;0.016281376;0.0003738805;0.00038083148;0.029385021;0.0014086711;0.0016452804;
0.019135159;0.0025823843;0.02580218;0.0082596475;0.0023808477;0.0034891234;0.0043987245;0.0034913886;0.026871676;0.0023400385;
0.048401833;0.0069525847;0.0011383983;0.0043092025;0.0060621547;0.0028897407;0.0323999;0.0053380863;0.039426874;0.0047446042;
0.0057027852;0.016935613;0.00020506686;0.0010279212;0.019513926;0.0019493123;0.024378628;0.0047331355;0.021288356;0.0085762758;
0.0016020476;0.0033334927;0.042113721;0.0015454716;0.032175943;0.0089923088;0.0073432894;0.015060226;0.0020273363;0.006362712;
0.027989091;0.0171319;0.016058115;0.011836361;0.0027043878;0.015636958;0.00098260946;0.00052837015;0.025579507;0.001456487;
0.026489846;0.0067564631;0.0024635887;0.0024913913;0.0012676104;0.0029031169;0.0445254;0.0028513337;0.01876129;0.0046099443;
0.0059022484;0.018628027;0.0026847343;0.00015621778;0.025652191;0.0030185508;0.031258598;0.010109226;0.0073197754;0.02003278;
0.0080059282;0.0020133858;0.014575122;0.0079607349;0.034413468;0.0010274447;0.0050105271;0.011662722;0.0006335245;0.00072452758;
0.043953694;0.0075096055;0.020880813;0.00082000869;0.0048346603;0.0032308595;0.0016122157;0.0046289898;0.047223829;0.0039383052;
0.021831231;0.004305826;0.003681794;0.007547643;0.0021731637;0.0018959556;0.013057922;0.00075796118;0.019526262;3.6849116e-05;
0.0084834164;0.010749361;0.001561458;0.0083897207;0.045252424;0.007438567;0.033660293;0.00028063619;0.0053507248;0.015234182;
0.00092106074;0.0080377655;0.050991077;0.0067069191;0.022343157;0.003200314;0.0071422453;0.0098074153;0.0013537504;0.0014992377;
0.013827726;0.0030562181;0.027655832;0.00024848175;0.0019284736;0.0098425504;0.0058841901;0.00059404835;0.033524141;0.001490151;
0.026751019;0.0025882903;0.0039726938;0.0094891116;0.0012377532;0.0012108476;0.036581811;0.0010666187;0.020004816;0.0030888689;
0.0062089739;0.010565514;0.0023472158;0.0013405464;0.025453787;0.0050337845;0.018716743;0.0015213869;0.0038910836;0.004027612;
0.0020127755;0.0021165209;0.028696673;0.0056742467;0.023171047;0.0035050518;0.0064262068;0.0067113983;0.0014929789;0.00021739562;
0.03148694;0.003031957;0.026668018;0.0019712735;0.0067338664;0.0069726724;0.0018322374;9.8135686e-05;0.025397252;0.0027620399;
0.022784969;0.0016536819;0.0045839865;0.0091320295;0.0019114761;0.0001812355;0.026020156;0.0031936725;0.022955745;0.0023153431;
0.0040767249;0.0063263532;0.0023418644;0.00016667129;0.026850032;0.0036717949;0.023032099;0.0017291437;0.0044202404;0.0069438703;
0.0019678995;0.00050101912;0.027064081;0.0037544668;0.022762377;0.0018154479;0.0047556651;0.0068894536;0.001979273;0.00032277495;
0.02722653;0.0032581503;0.022098975;0.0018945069;0.0047572544;0.007221153;0.0018995738;0.0003015789;0.026540801;0.0032450582;
0.022613773;0.0018510204;0.0048078597;0.0073853736;0.0019110874;0.00029828699;0.02691274;0.0032649348;0.022591116;0.0018582545;
0.0046994751;0.0072503164;0.0018354175;0.00028155308;0.026806017;0.0032696149;0.022434894;0.0018426763;0.0046468517;0.0072327005;
0.0019078103;0.00029580641;0.026740361;0.0033170681;0.022596626;0.001822522;0.0045778211;0.0072432593;0.0018938442;0.00029503947;
0.026845381;0.0032558842;0.022578575;0.0018806191;0.004629062;0.0072719888;0.0018225507;0.00031462891;0.026764449;0.0033271566;
0.022489574;0.0018909288;0.0046336455;0.0072201733;0.0019004672;0.00031678166;0.026637038;0.0032709336;0.02238903;0.001841953;
0.0046593235;0.0073745036;0.0019133423;0.00029242013;0.026821548;0.0032193114;0.022257397;0.0018772895;0.0045801895;0.0072745592;
0.0018727307;0.00032201846;0.026698312;0.0033023858;0.022380669;0.0018411948;0.0045613199;0.0072136167;       };
      };
      float_Data @["AuditoryProc_1_mel_fbank"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_80";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="AuditoryProc_1_mel_fbank";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 8;26;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=0;
       ar {
	name="ar";
       [8 26 1] 0.83626413;0.85437632;0.86709267;0.87641424;0.88719571;0.90331876;0.90119612;0.91378462;0.75617945;0.7632708;
0.74706352;0.72519684;0.75697517;0.783939;0.77657163;0.80982286;0.90866059;0.94471627;0.94093949;0.93163973;
0.95101213;0.96978861;0.95015067;0.88718277;0.73628426;0.7584157;0.68247682;0.80913025;0.68731368;0.71962982;
0.66507959;0.73684162;0.9194088;0.90355569;0.85095894;0.85210991;0.79350471;0.81016296;0.7683112;0.77862656;
0.80404198;0.85352069;0.88533443;0.85504806;0.85020864;0.7695539;0.78644264;0.75260592;0.81178463;0.80790859;
0.78577274;0.71194798;0.73114711;0.70379817;0.71410435;0.62927639;0.81222117;0.79285669;0.75085407;0.72867441;
0.74041855;0.68614173;0.6946013;0.61583459;0.6959433;0.69996291;0.70462584;0.66523391;0.68879306;0.60337794;
0.65882945;0.61785692;0.67844671;0.61302119;0.7202161;0.62819737;0.65826374;0.62564844;0.57165056;0.63146991;
0.68972391;0.64685667;0.68345428;0.64127117;0.65672868;0.66946083;0.63340551;0.60666126;0.60496503;0.57265633;
0.67202115;0.58302981;0.66976386;0.57207733;0.61869651;0.62085837;0.61690885;0.51703751;0.66720456;0.5342961;
0.62467122;0.5273155;0.51162845;0.58183628;0.60608828;0.45888206;0.64100271;0.50777549;0.63930124;0.51302588;
0.53905129;0.57375157;0.5936231;0.38641319;0.62906951;0.47147337;0.61956841;0.45932081;0.49098822;0.54043502;
0.58002251;0.39146742;0.60836536;0.47169226;0.6047104;0.47412279;0.43415859;0.5285719;0.58764923;0.42603707;
0.60053128;0.45941246;0.60065621;0.49287257;0.49023175;0.52373189;0.58827972;0.41438714;0.59846312;0.47441033;
0.59509945;0.46523678;0.47336057;0.5182631;0.60683727;0.48332843;0.60313237;0.47614035;0.58953565;0.49837112;
0.51117188;0.51822037;0.69440991;0.60672826;0.62652379;0.56825727;0.64248818;0.5907923;0.52898717;0.52284187;
0.71273524;0.72333246;0.71633011;0.69881636;0.70540553;0.60576361;0.54308003;0.51667458;0.76857513;0.75471014;
0.72219437;0.69965625;0.68720371;0.61239135;0.52031291;0.50307107;0.83244932;0.8240959;0.77543783;0.72760773;
0.69480544;0.5772357;0.45227787;0.50130028;0.76167673;0.76255733;0.74392807;0.7188099;0.67996895;0.56101125;
0.43649861;0.48077616;0.7952795;0.79556006;0.7733416;0.75141561;0.71280575;0.59627151;0.4593747;0.49362457;
0.77858365;0.76583534;0.75519198;0.74652708;0.71585375;0.62166023;0.50797975;0.52875042;       };
      };
      float_Data @["AuditoryProc_1_mel_fbank_tavg"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_81";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="AuditoryProc_1_mel_fbank_tavg";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 1;2;8;26;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
       ar {
	name="ar";
       [1 2 8 26 1] 0.80947572;0.73165768;0.83626413;0.80947572;0.85437632;0.83626413;0.86709267;0.85437632;0.87641424;0.86709267;
0.88719571;0.87641424;0.90331876;0.88719571;0.90119612;0.90331876;0.77983278;0.74664223;0.75617945;0.77983278;
0.7632708;0.75617945;0.74706352;0.7632708;0.72519684;0.74706352;0.75697517;0.72519684;0.783939;0.75697517;
0.77657163;0.783939;0.90693766;0.90746027;0.90866059;0.90693766;0.94471627;0.90866059;0.94093949;0.94471627;
0.93163973;0.94093949;0.95101213;0.93163973;0.96978861;0.95101213;0.95015067;0.96978861;0.69477588;0.74819928;
0.73628426;0.69477588;0.7584157;0.73628426;0.68247682;0.7584157;0.80913025;0.68247682;0.68731368;0.80913025;
0.71962982;0.68731368;0.66507959;0.71962982;0.91540986;0.93363327;0.9194088;0.91540986;0.90355569;0.9194088;
0.85095894;0.90355569;0.85210991;0.85095894;0.79350471;0.85210991;0.81016296;0.79350471;0.7683112;0.81016296;
0.77466196;0.67327225;0.80404198;0.77466196;0.85352069;0.80404198;0.88533443;0.85352069;0.85504806;0.88533443;
0.85020864;0.85504806;0.7695539;0.85020864;0.78644264;0.7695539;0.85407907;0.87809169;0.81178463;0.85407907;
0.80790859;0.81178463;0.78577274;0.80790859;0.71194798;0.78577274;0.73114711;0.71194798;0.70379817;0.73114711;
0.71410435;0.70379817;0.79418731;0.78713012;0.81222117;0.79418731;0.79285669;0.81222117;0.75085407;0.79285669;
0.72867441;0.75085407;0.74041855;0.72867441;0.68614173;0.74041855;0.6946013;0.68614173;0.74881303;0.81377399;
0.6959433;0.74881303;0.69996291;0.6959433;0.70462584;0.69996291;0.66523391;0.70462584;0.68879306;0.66523391;
0.60337794;0.68879306;0.65882945;0.60337794;0.60496145;0.73477125;0.67844671;0.60496145;0.61302119;0.67844671;
0.7202161;0.61302119;0.62819737;0.7202161;0.65826374;0.62819737;0.62564844;0.65826374;0.57165056;0.62564844;
0.60840505;0.70695126;0.68972391;0.60840505;0.64685667;0.68972391;0.68345428;0.64685667;0.64127117;0.68345428;
0.65672868;0.64127117;0.66946083;0.65672868;0.63340551;0.66946083;0.56100851;0.65764463;0.60496503;0.56100851;
0.57265633;0.60496503;0.67202115;0.57265633;0.58302981;0.67202115;0.66976386;0.58302981;0.57207733;0.66976386;
0.61869651;0.57207733;0.48054796;0.63564563;0.61690885;0.48054796;0.51703751;0.61690885;0.66720456;0.51703751;
0.5342961;0.66720456;0.62467122;0.5342961;0.5273155;0.62467122;0.51162845;0.5273155;0.47243276;0.65836579;
0.60608828;0.47243276;0.45888206;0.60608828;0.64100271;0.45888206;0.50777549;0.64100271;0.63930124;0.50777549;
0.51302588;0.63930124;0.53905129;0.51302588;0.49203897;0.64321691;0.5936231;0.49203897;0.38641319;0.5936231;
0.62906951;0.38641319;0.47147337;0.62906951;0.61956841;0.47147337;0.45932081;0.61956841;0.49098822;0.45932081;
0.44856974;0.58254129;0.58002251;0.44856974;0.39146742;0.58002251;0.60836536;0.39146742;0.47169226;0.60836536;
0.6047104;0.47169226;0.47412279;0.6047104;0.43415859;0.47412279;0.48541564;0.59490734;0.58764923;0.48541564;
0.42603707;0.58764923;0.60053128;0.42603707;0.45941246;0.60053128;0.60065621;0.45941246;0.49287257;0.60065621;
0.49023175;0.49287257;0.5203141;0.6346876;0.58827972;0.5203141;0.41438714;0.58827972;0.59846312;0.41438714;
0.47441033;0.59846312;0.59509945;0.47441033;0.46523678;0.59509945;0.47336057;0.46523678;0.56511569;0.65250814;
0.60683727;0.56511569;0.48332843;0.60683727;0.60313237;0.48332843;0.47614035;0.60313237;0.58953565;0.47614035;
0.49837112;0.58953565;0.51117188;0.49837112;0.67161733;0.68614435;0.69440991;0.67161733;0.60672826;0.69440991;
0.62652379;0.60672826;0.56825727;0.62652379;0.64248818;0.56825727;0.5907923;0.64248818;0.52898717;0.5907923;
0.68509024;0.71357185;0.71273524;0.68509024;0.72333246;0.71273524;0.71633011;0.72333246;0.69881636;0.71633011;
0.70540553;0.69881636;0.60576361;0.70540553;0.54308003;0.60576361;0.75661421;0.75841886;0.76857513;0.75661421;
0.75471014;0.76857513;0.72219437;0.75471014;0.69965625;0.72219437;0.68720371;0.69965625;0.61239135;0.68720371;
0.52031291;0.61239135;0.81247222;0.8295902;0.83244932;0.81247222;0.8240959;0.83244932;0.77543783;0.8240959;
0.72760773;0.77543783;0.69480544;0.72760773;0.5772357;0.69480544;0.45227787;0.5772357;0.75598192;0.74242324;
0.76167673;0.75598192;0.76255733;0.76167673;0.74392807;0.76255733;0.7188099;0.74392807;0.67996895;0.7188099;
0.56101125;0.67996895;0.43649861;0.56101125;0.76957071;0.75883085;0.7952795;0.76957071;0.79556006;0.7952795;
0.7733416;0.79556006;0.75141561;0.7733416;0.71280575;0.75141561;0.59627151;0.71280575;0.4593747;0.59627151;
0.76563239;0.76073587;0.77858365;0.76563239;0.76583534;0.77858365;0.75519198;0.76583534;0.74652708;0.75519198;
0.71585375;0.74652708;0.62166023;0.71585375;0.50797975;0.62166023;       };
      };
      float_Data @["AuditoryProc_1_mel_fbank_delta"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_82";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="AuditoryProc_1_mel_fbank_delta";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 1;5;8;26;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
       ar {
	name="ar";
       [1 5 8 26 1] 0.83626413;0.2112844;0;0.51125687;0;0.85437632;0.15334728;0;0.3098717;0;
0.86709267;0.11281729;0;0.23564076;0;0.87641424;0.085267439;0;0.18058258;0;
0.88719571;0.097321935;0;0.16738158;0;0.90331876;0.13884458;0;0.21200602;0;
0.90119612;0;0.020785211;0.12281021;0;0.91378462;0.11180983;0;0.094742939;0;
0.75617945;0;0.19128744;0.087068304;0;0.7632708;0.066217706;0;0;0.14208736;
0.74706352;0;0.1394687;0;0.083543569;0.72519684;0;0.17943116;0;0.27575046;
0.75697517;0.24114992;0;0.090178393;0;0.783939;0.21237411;0;0.37004766;0;
0.77657163;0;0.068618357;0.16385484;0;0.80982286;0.24953786;0;0.20561695;0;
0.90866059;0.016937498;0;0.011860816;0;0.94471627;0.26500681;0;0.27419797;0;
0.94093949;0;0.036393385;0.24402151;0;0.93163973;0;0.08508487;0;0.11564329;
0.95101213;0.16228545;0;0.091509096;0;0.96978861;0.15808246;0;0.27614325;0;
0.95015067;0;0.16414477;0;0.0085410811;0.88718277;0;0.38638222;0;0.45237237;
0.73628426;0.29332805;0;0;0.10646495;0.7584157;0.18121004;0;0.3889018;0;
0.68247682;0;0.43162081;0;0.34983638;0.80913025;0.55879778;0;0.33649406;0;
0.68731368;0;0.54917705;0.046136994;0;0.71962982;0.24423435;0;0;0.47229671;
0.66507959;0;0.35296118;0;0.18189757;0.73684162;0.41779914;0;0.14684354;0;
0.9194088;0.038451694;0;0;0.12453084;0.90355569;0;0.13683799;0;0.10597881;
0.85095894;0;0.34467804;0;0.40635154;0.85210991;0.011378692;0;0;0.33969769;
0.79350471;0;0.36950362;0;0.36489481;0.81016296;0.14279528;0;0;0.29551145;
0.7683112;0;0.2950387;0;0.20123656;0.77862656;0.093507908;0;0;0.23975417;
0.80404198;0.22708315;0;0.56666762;0;0.85352069;0.3310084;0;0.44089955;0;
0.88533443;0.24135375;0;0.44840506;0;0.85504806;0;0.23246001;0.015043914;0;
0.85020864;0;0.046160311;0;0.25994882;0.7695539;0;0.44645792;0;0.46089947;
0.78644264;0.14448558;0;0;0.38937265;0.75260592;0;0.25282091;0;0.14491899;
0.81178463;0;0.29723185;0;0.39870265;0.80790859;0;0.037314001;0;0.3158673;
0.78577274;0;0.1812396;0;0.20642406;0.71194798;0;0.42470798;0;0.48969337;
0.73114711;0.16106772;0;0;0.3532767;0.70379817;0;0.21475591;0;0.07535661;
0.71410435;0.093432479;0;0;0.14561138;0.62927639;0;0.45895633;0;0.42700562;
0.81222117;0.15278549;0;0.20058231;0;0.79285669;0;0.16222981;0;0.013131413;
0.75085407;0;0.29578763;0;0.38029498;0.72867441;0;0.18153319;0;0.39092088;
0.74041855;0.1050985;0;0;0.094494246;0.68614173;0;0.35181451;0;0.29840651;
0.6946013;0.077997431;0;0;0.31421012;0.61583459;0;0.44061172;0;0.41282555;
0.6959433;0;0.34584829;0;0.54092783;0.69996291;0.038642883;0;0;0.32818326;
0.70462584;0.044551887;0;0.079889081;0;0.66523391;0;0.28259838;0;0.25776932;
0.68879306;0.19067104;0;0;0.13668653;0.60337794;0;0.46066967;0;0.38216674;
0.65882945;0.35671261;0;0;0.23055387;0.61785692;0;0.29064193;0.1264772;0;
0.67844671;0.42358214;0;0;0.36030519;0.61302119;0;0.39549834;0.074585967;0;
0.7202161;0.51736265;0;0.2946291;0;0.62819737;0;0.47921744;0.1317649;0;
0.65826374;0.23116176;0;0;0.38253444;0.62564844;0;0.24593921;0;0.024855774;
0.57165056;0;0.35064039;0;0.46413216;0.63146991;0.37429351;0;0.055012152;0;
0.68972391;0.44848537;0;0;0.14695676;0.64685667;0;0.30004948;0.27772599;0;
0.68345428;0.26792276;0;0;0.058997415;0.64127117;0;0.29668155;0;0.05290018;
0.65672868;0.13388051;0;0;0.21089339;0.66946083;0.11294159;0;0.21990587;0;
0.63340551;0;0.26500487;0;0.18912242;0.60666126;0;0.21100955;0;0.38574776;
0.60496503;0.3053458;0;0;0.34503365;0.57265633;0;0.2441918;0.10432645;0;
0.67202115;0.49840698;0;0.40139875;0;0.58302981;0;0.47087523;0.0939852;0;
0.66976386;0.46447906;0;0;0.022074588;0.57207733;0;0.49414864;0;0.098713189;
0.61869651;0.31796098;0;0;0.3380436;0.62085837;0.02116113;0;0.32787132;0;
0.61690885;0.57691813;0;0;0.15780097;0.51703751;0;0.49967813;0.26734316;0;
0.66720456;0.60026711;0;0.334645;0;0.5342961;0;0.57064676;0.14718397;0;
0.62467122;0.47472128;0;0;0.29840976;0.5273155;0;0.49330074;0;0.065251067;
0.51162845;0;0.135599;0;0.53061068;0.58183628;0.41248298;0;0.35283789;0;
0.60608828;0.57201952;0;0;0.34330419;0.45888206;0;0.59547943;0;0.11933611;
0.64100271;0.64554173;0;0.25878945;0;0.50777549;0;0.57123357;0.32837865;0;
0.63930124;0.56808263;0;0;0.016730083;0.51302588;0;0.55806065;0.049884796;0;
0.53905129;0.20650926;0;0;0.50062406;0.57375157;0.25761101;0;0.37782192;0;
0.5936231;0.5039292;0;0;0.33152312;0.38641319;0;0.67448968;0;0.51367962;
0.62906951;0.70816243;0;0.2617006;0;0.47147337;0;0.61179543;0.45963523;0;
0.61956841;0.59692866;0;0;0.086767159;0.45932081;0;0.61575055;0;0.10835734;
0.49098822;0.24051063;0;0;0.56251675;0.54043502;0.3308655;0;0.44786221;0;
0.58002251;0.56794643;0;0;0.024568897;0.39146742;0;0.65344572;0;0.36347216;
0.60836536;0.68444097;0;0.22083695;0;0.47169226;0;0.57747626;0.44513753;0;
0.6047104;0.57084888;0;0;0.0352608;0.47412279;0;0.56632537;0.023728553;0;
0.43415859;0;0.28553158;0;0.63038504;0.5285719;0.48563194;0;0.35253757;0;
0.58764923;0.50552225;0;0;0.06766963;0.42603707;0;0.61775476;0;0.37256306;
0.60053128;0.63569355;0;0.11411959;0;0.45941246;0;0.58526677;0.25023645;0;
0.60065621;0.58548152;0;0.0012477546;0;0.49287257;0;0.51873016;0.25071242;0;
0.49023175;0;0.025728688;0;0.52477002;0.52373189;0.25093707;0;0.23582058;0;
0.58827972;0.40464008;0;0;0.31697664;0.41438714;0;0.63489336;0;0.51439095;
0.59846312;0.64798152;0;0.092422217;0;0.47441033;0;0.55367661;0.37509057;0;
0.59509945;0.54687393;0;0;0.03254208;0.46523678;0;0.56495762;0;0.084027164;
0.47336057;0.075134121;0;0;0.5490191;0.5182631;0.30988094;0;0.34651765;0;
0.60683727;0.29439116;0;0;0.31352094;0.48332843;0;0.55259037;0;0.44990647;
0.60313237;0.54504907;0;0;0.035725459;0.47614035;0;0.55945587;0;0.067060456;
0.58953565;0.53138614;0;0;0.11969284;0.49837112;0;0.47689041;0.18187544;0;
0.51117188;0.1134811;0;0;0.43934804;0.51822037;0.06584388;0;0.1656184;0;
0.69440991;0.18561853;0;0.076345198;0;0.60672826;0;0.46718287;0;0.39353168;
0.62652379;0.16524436;0;0;0.40435812;0.56825727;0;0.36815444;0;0.27782705;
0.64248818;0.42604902;0;0.1376663;0;0.5907923;0;0.34078634;0.18390681;0;
0.52898717;0;0.38197261;0;0.53161812;0.52284187;0;0.057895154;0;0.40458623;
0.71273524;0.21657717;0;0;0.0082966965;0.72333246;0.095818214;0;0.27663198;0;
0.71633011;0;0.065441117;0.034701284;0;0.69881636;0;0.14903577;0;0.19689104;
0.70540553;0.061818421;0;0;0.098486535;0.60576361;0;0.49910319;0;0.48200685;
0.54308003;0;0.38530982;0;0.6187942;0.51667458;0;0.20889489;0;0.47114861;
0.76857513;0.10683124;0;0.092198782;0;0.75471014;0;0.12176696;0;0.018684929;
0.72219437;0;0.2453728;0;0.3168501;0.69965625;0;0.18392746;0;0.35506293;
0.68720371;0;0.11073598;0;0.25920805;0.61239135;0;0.42795804;0;0.4659971;
0.52031291;0;0.47937939;0;0.62531489;0.50307107;0;0.14706214;0;0.52226323;
0.83244932;0.16650756;0;0.027796425;0;0.8240959;0;0.07709413;0.10413275;0;
0.77543783;0;0.32731539;0;0.36310393;0.72760773;0;0.32354781;0;0.49106354;
0.69480544;0;0.2470009;0;0.44638944;0.5772357;0;0.54037732;0;0.60059434;
0.45227787;0;0.55547225;0;0.70805269;0.50130028;0.32895997;0;0;0.43160963;
0.76167673;0.053879719;0;0.16145013;0;0.76255733;0.0087291216;0;0.061697215;0;
0.74392807;0;0.1570376;0;0.1507334;0.7188099;0;0.20075558;0;0.30433536;
0.67996895;0;0.27975139;0;0.39009187;0.56101125;0;0.54329073;0;0.61210036;
0.43649861;0;0.55459082;0;0.70885402;0.48077616;0.30689147;0;0;0.44516909;
0.7952795;0.2045107;0;0.26712361;0;0.79556006;0.0027977412;0;0.20628214;0;
0.7733416;0;0.18179303;0;0.17991048;0.75141561;0;0.1798303;0;0.30625147;
0.71280575;0;0.27855062;0;0.37708616;0.59627151;0;0.53817928;0;0.60806459;
0.4593747;0;0.57787532;0;0.71705937;0.49362457;0.25512031;0;0;0.50653094;
0.77858365;0.11466233;0;0.15144771;0;0.76583534;0;0.11306868;0.0020254275;0;
0.75519198;0;0.096195221;0;0.18957248;0.74652708;0;0.07973969;0;0.16183513;
0.71585375;0;0.23473287;0;0.28232187;0.62166023;0;0.48504975;0;0.55529237;
0.50797975;0;0.53201151;0;0.67519182;0.52875042;0.17198439;0;0;0.48162305;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [1] 0;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     control_panel_cells {
      name="control_panel_cells";
      el_typ=DataTableCell;
      el_def=0;
     };
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["input_sound"] {
     name="input_sound";
     var_type=T_Object;
     object_type=taSound;
     object_val=.projects["sound_object"].programs["AuditoryProcTest"].objs["input_sound"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["sound_file_name"] {
     name="sound_file_name";
     var_type=T_String;
     string_val="arctic_a0001.wav";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["AuditoryProc_1"] {
     name="AuditoryProc_1";
     var_type=T_Object;
     object_type=AuditoryProc;
     object_val=.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryProc_1"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["AuditoryOutTable"] {
     name="AuditoryOutTable";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryOutTable"]$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="input_sound->LoadSound(sound_file_name)";
     pre_compile_code_string="input_sound->LoadSound(sound_file_name)";
     result_var=NULL;
     obj=.projects["sound_object"].programs["AuditoryProcTest"].vars["input_sound"]$$;
     method=taSound::LoadSound;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="sound_file_name";
       };
      };
     };
     meth_sig="bool LoadSound(taString& fname)";
     meth_desc=" load a sound from given file name (leave file name blank to get a chooser)";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="AuditoryProc_1->Init()";
     pre_compile_code_string="AuditoryProc_1->Init()";
     result_var=NULL;
     obj=.projects["sound_object"].programs["AuditoryProcTest"].vars["AuditoryProc_1"]$$;
     method=AuditoryProc::Init;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool Init()";
     meth_desc=" initialize everything to be ready to start filtering -- calls InitFilters, InitOutMatrix, InitDataTable";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="AuditoryProc_1->LoadSound(input_sound)";
     pre_compile_code_string="AuditoryProc_1->LoadSound(input_sound)";
     result_var=NULL;
     obj=$.projects["sound_object"].programs["AuditoryProcTest"].vars["AuditoryProc_1"]$;
     method=AuditoryProc::LoadSound;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taSound_ptr;
       type="taSound*";
       name="sound";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_sound";
       };
      };
     };
     meth_sig="bool LoadSound(taSound* sound)";
     meth_desc=" load a new sound into the system for subsequent processing -- grabs the sound data into sound_full";
    };
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="AuditoryProc_1->ProcessTrial()";
     pre_compile_code_string="AuditoryProc_1->ProcessTrial()";
     result_var=NULL;
     obj=$.projects["sound_object"].programs["AuditoryProcTest"].vars["AuditoryProc_1"]$;
     method=AuditoryProc::ProcessTrial;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool ProcessTrial()";
     meth_desc=" process a full trial worth of sound -- iterates over steps to fill a trial's worth of sound data";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_46";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 8 0=0.001592357;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 8 0=0.01529312;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 8 0=0.9973461;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 8 0=0.7994902;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABAAAAAfwAAAKMAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["sound_object"]$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"sound_object\"] - sound_object.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_47";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["sound_object"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @["T3Frames"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_48";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="T3Frames";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["RawSound"] {
       name="RawSound";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @["RawSound_Graph"] {
	  name="RawSound_Graph";
	  m_data=$.projects["sound_object"].programs["SoundObjTest"].objs["RawSound"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["frame"] {
	    name="frame";
	    m_data=.projects["sound_object"].programs["SoundObjTest"].objs["RawSound"].data["frame"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=51760: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["sound"] {
	    name="sound";
	    m_data=.projects["sound_object"].programs["SoundObjTest"].objs["RawSound"].data["sound"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-0.551462: fix_max=0: max=0.657895: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=100000;
	  view_range {min=0: max=-1: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="frame";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["RawSound_Graph_plot_1"] {
	    name="RawSound_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="sound";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_plot_2"] {
	    name="RawSound_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_plot_3"] {
	    name="RawSound_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_plot_4"] {
	    name="RawSound_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_plot_5"] {
	    name="RawSound_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_plot_6"] {
	    name="RawSound_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["RawSound_Graph_err_1"] {
	    name="RawSound_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_err_2"] {
	    name="RawSound_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_err_3"] {
	    name="RawSound_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_err_4"] {
	    name="RawSound_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_err_5"] {
	    name="RawSound_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["RawSound_Graph_err_6"] {
	    name="RawSound_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.425: y=0.4130001: z=1.674718: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.664718;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["AuditoryProc_1_MelFilters"] {
       name="AuditoryProc_1_MelFilters";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @["AuditoryProc_1_MelFilters_Graph"] {
	  name="AuditoryProc_1_MelFilters_Graph";
	  m_data=.projects["sound_object"].data.gp["AnalysisData"]["AuditoryProc_1_MelFilters"]$$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["Bin"] {
	    name="Bin";
	    m_data=.projects["sound_object"].data.gp["AnalysisData"]["AuditoryProc_1_MelFilters"].data["Bin"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=200: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Filters"] {
	    name="Filters";
	    m_data=.projects["sound_object"].data.gp["AnalysisData"]["AuditoryProc_1_MelFilters"].data["Filters"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=200: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Bin";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=1: max=125: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=26;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_1"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_2"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_3"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=2;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_4"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=3;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_5"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=4;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_6"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=5;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_7"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=6;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_8"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=7;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_9"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=8;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_10"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=9;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_11"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=10;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_12"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=11;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_13"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=12;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_14"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=13;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_15"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=14;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_16"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=15;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_17"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_17";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=16;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_18"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_18";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=17;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_19"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_19";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=18;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_20"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_20";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=19;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_21"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_21";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=20;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_22"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_22";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=21;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_23"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_23";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=22;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_24"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_24";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=23;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_25"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_25";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=24;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH_DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_plot_26"] {
	    name="AuditoryProc_1_MelFilters_Graph_plot_26";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Filters";
	    is_string=0;
	    is_matrix=1;
	    n_cells=26;
	    matrix_cell=25;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DASH_DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_1"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_2"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_3"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=2;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_4"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=3;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_5"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=4;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_6"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=5;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_7"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=6;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_8"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=7;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_9"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=8;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_10"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=9;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_11"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=10;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_12"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=11;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_13"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=12;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_14"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=13;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_15"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=14;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_16"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=15;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_17"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_17";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=16;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_18"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_18";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=17;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_19"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_19";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=18;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_20"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_20";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=19;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_21"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_21";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=20;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_22"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_22";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=21;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_23"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_23";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=22;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_24"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_24";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=23;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_25"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_25";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=24;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["AuditoryProc_1_MelFilters_Graph_err_26"] {
	    name="AuditoryProc_1_MelFilters_Graph_err_26";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=25;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Bin";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=200: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.4330029: y=0.5149999: z=1.67115: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.66115;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["AuditoryOutTable"] {
       name="AuditoryOutTable";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["AuditoryOutTable_Grid"] {
	  name="AuditoryOutTable_Grid";
	  m_data=$.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryOutTable"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["AuditoryProc_1_dft_pow"] {
	    name="AuditoryProc_1_dft_pow";
	    m_data=.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryOutTable"].data["AuditoryProc_1_dft_pow"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["AuditoryProc_1_mel_fbank"] {
	    name="AuditoryProc_1_mel_fbank";
	    m_data=.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryOutTable"].data["AuditoryProc_1_mel_fbank"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["AuditoryProc_1_mel_fbank_tavg"] {
	    name="AuditoryProc_1_mel_fbank_tavg";
	    m_data=.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryOutTable"].data["AuditoryProc_1_mel_fbank_tavg"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["AuditoryProc_1_mel_fbank_delta"] {
	    name="AuditoryProc_1_mel_fbank_delta";
	    m_data=.projects["sound_object"].programs["AuditoryProcTest"].objs["AuditoryOutTable"].data["AuditoryProc_1_mel_fbank_delta"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=3: max=3: };
	  need_scale_update=0;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=1;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5002197: y=0.45: z=1.368622: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.366122;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_49";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 8 0=0.008496176;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 8 0=0.04352442;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 8 0=0.7357689;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="svn rev: 9949 doc and version updt";
 tree_state{ .;.docs;.ctrl_panels;.param_sets;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs[1];.programs[1].objs;.programs[1].objs[1];.programs[1].functions;.networks; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

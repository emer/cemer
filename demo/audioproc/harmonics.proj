// ta_Dump File v2.0
taPluginBase_List .plugin_deps { 
  taPluginBase_List @.plugin_deps = [1] {
    taPluginDep @[0] { };
  };
};
taPluginBase_List .plugin_deps {
 name=;
 el_typ=taPluginDep;
 el_def=0;
 taPluginDep @[0] {
  name="AudioProc";
  desc="Audio processing for tacss";
  unique_id="audioproc.plugins.brad-aisa.com";
  version="1.0.0.0";
  url=;
 };
};
LeabraProject .projects[0] { 
  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [1] {
	EditMbrItem @[0] { };
      };

      EditMthItem_Group @.mths = [5] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [6] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	};
      };
    };
    DataTable_Group @.gp[2] = [3] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [2] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [3] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [0] {
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [8] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  AssignExpr @[0] { };
	  NetCounterInit @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[4] { };
	  NetDataLoop @[5] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  CodeBlock @[6] { 
	    ProgEl_List @.prog_code = [3] {
	      ProgramCall @[0] { };
	      OtherProgramVar @[1] { };
	      WhileLoop @[2] { 
		ProgEl_List @.loop_code = [4] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  ProgramCall @[2] { };
		  OtherProgramVar @[3] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	  If @[9] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      If @[1] { 
		ProgEl_List @.true_code = [2] {
		  MethodCall @[0] { };
		  MethodCall @[1] { };
		};
	      };
	    };
	  };
	  MethodCall @[10] { };
	  ProgramCall @[11] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [8] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[3] { };
	  If @[4] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  ProgramCall @[6] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[7] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [5] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[9] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [1] { 
      Program @[0] { 
	ProgObjList @.objs = [13] {
	  InputBlockSet @[0] { 
	    SignalProcBlock_List @.blocks = [2] {
	      StimGen @[0] { 
		StimChan_List @.chans = [2] {
		  ToneChan @[0] { };
		  NoiseChan @[1] { };
		};
	      };
	      FileInput @[1] { };
	    };
	  };
	  SignalMonBlock @[1] { };
	  ListenerBlock @[2] { };
	  GammatoneBlock @[3] { };
	  SharpenBlock @[4] { };
	  TemporalWindowBlock @[5] { };
	  SignalMonBlock @[6] { };
	  SignalMonBlock @[7] { };
	  ANBlock @[8] { 
	    ANVal_List @.val_list = [1] {
	      ANVal @[0] { };
	    };
	  };
	  SignalMonBlock @[9] { };
	  TemporalWindowBlock @[10] { };
	  HarmonicSieveBlock @[11] { };
	  SignalMonBlock @[12] { };
	};

	ProgVar_List @.vars = [16] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { };
	  If @[1] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [3] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [4] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [2] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [4] {
	LeabraUnitSpec @[0] { };
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [2] {
	    LeabraLayerSpec @[0] { };
	    LeabraLayerSpec @[1] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { };
	  };
	};
      };

      Layer_Group @.layers = [5] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [400] {
	  };
	};
	LeabraLayer @[1] { 
	  Unit_Group @.units = [400] {
	  };
	};
	LeabraLayer @[2] { 
	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [3] { 
	    };
	    LeabraUnit_Group @.gp[1] = [3] { 
	    };
	    LeabraUnit_Group @.gp[2] = [3] { 
	    };
	    LeabraUnit_Group @.gp[3] = [3] { 
	    };
	    LeabraUnit_Group @.gp[4] = [3] { 
	    };
	    LeabraUnit_Group @.gp[5] = [3] { 
	    };
	    LeabraUnit_Group @.gp[6] = [3] { 
	    };
	    LeabraUnit_Group @.gp[7] = [3] { 
	    };
	    LeabraUnit_Group @.gp[8] = [3] { 
	    };
	    LeabraUnit_Group @.gp[9] = [3] { 
	    };
	    LeabraUnit_Group @.gp[10] = [3] { 
	    };
	    LeabraUnit_Group @.gp[11] = [3] { 
	    };
	    LeabraUnit_Group @.gp[12] = [3] { 
	    };
	    LeabraUnit_Group @.gp[13] = [3] { 
	    };
	    LeabraUnit_Group @.gp[14] = [3] { 
	    };
	    LeabraUnit_Group @.gp[15] = [3] { 
	    };
	    LeabraUnit_Group @.gp[16] = [3] { 
	    };
	    LeabraUnit_Group @.gp[17] = [3] { 
	    };
	    LeabraUnit_Group @.gp[18] = [3] { 
	    };
	    LeabraUnit_Group @.gp[19] = [3] { 
	    };
	    LeabraUnit_Group @.gp[20] = [3] { 
	    };
	    LeabraUnit_Group @.gp[21] = [3] { 
	    };
	    LeabraUnit_Group @.gp[22] = [3] { 
	    };
	    LeabraUnit_Group @.gp[23] = [3] { 
	    };
	    LeabraUnit_Group @.gp[24] = [3] { 
	    };
	    LeabraUnit_Group @.gp[25] = [3] { 
	    };
	    LeabraUnit_Group @.gp[26] = [3] { 
	    };
	    LeabraUnit_Group @.gp[27] = [3] { 
	    };
	    LeabraUnit_Group @.gp[28] = [3] { 
	    };
	    LeabraUnit_Group @.gp[29] = [3] { 
	    };
	    LeabraUnit_Group @.gp[30] = [3] { 
	    };
	    LeabraUnit_Group @.gp[31] = [3] { 
	    };
	    LeabraUnit_Group @.gp[32] = [3] { 
	    };
	    LeabraUnit_Group @.gp[33] = [3] { 
	    };
	    LeabraUnit_Group @.gp[34] = [3] { 
	    };
	    LeabraUnit_Group @.gp[35] = [3] { 
	    };
	    LeabraUnit_Group @.gp[36] = [3] { 
	    };
	    LeabraUnit_Group @.gp[37] = [3] { 
	    };
	    LeabraUnit_Group @.gp[38] = [3] { 
	    };
	    LeabraUnit_Group @.gp[39] = [3] { 
	    };
	    LeabraUnit_Group @.gp[40] = [3] { 
	    };
	    LeabraUnit_Group @.gp[41] = [3] { 
	    };
	    LeabraUnit_Group @.gp[42] = [3] { 
	    };
	    LeabraUnit_Group @.gp[43] = [3] { 
	    };
	    LeabraUnit_Group @.gp[44] = [3] { 
	    };
	    LeabraUnit_Group @.gp[45] = [3] { 
	    };
	    LeabraUnit_Group @.gp[46] = [3] { 
	    };
	    LeabraUnit_Group @.gp[47] = [3] { 
	    };
	    LeabraUnit_Group @.gp[48] = [3] { 
	    };
	    LeabraUnit_Group @.gp[49] = [3] { 
	    };
	    LeabraUnit_Group @.gp[50] = [3] { 
	    };
	    LeabraUnit_Group @.gp[51] = [3] { 
	    };
	    LeabraUnit_Group @.gp[52] = [3] { 
	    };
	    LeabraUnit_Group @.gp[53] = [3] { 
	    };
	    LeabraUnit_Group @.gp[54] = [3] { 
	    };
	    LeabraUnit_Group @.gp[55] = [3] { 
	    };
	    LeabraUnit_Group @.gp[56] = [3] { 
	    };
	    LeabraUnit_Group @.gp[57] = [3] { 
	    };
	    LeabraUnit_Group @.gp[58] = [3] { 
	    };
	    LeabraUnit_Group @.gp[59] = [3] { 
	    };
	    LeabraUnit_Group @.gp[60] = [3] { 
	    };
	    LeabraUnit_Group @.gp[61] = [3] { 
	    };
	    LeabraUnit_Group @.gp[62] = [3] { 
	    };
	    LeabraUnit_Group @.gp[63] = [3] { 
	    };
	    LeabraUnit_Group @.gp[64] = [3] { 
	    };
	    LeabraUnit_Group @.gp[65] = [3] { 
	    };
	    LeabraUnit_Group @.gp[66] = [3] { 
	    };
	    LeabraUnit_Group @.gp[67] = [3] { 
	    };
	    LeabraUnit_Group @.gp[68] = [3] { 
	    };
	    LeabraUnit_Group @.gp[69] = [3] { 
	    };
	    LeabraUnit_Group @.gp[70] = [3] { 
	    };
	    LeabraUnit_Group @.gp[71] = [3] { 
	    };
	    LeabraUnit_Group @.gp[72] = [3] { 
	    };
	    LeabraUnit_Group @.gp[73] = [3] { 
	    };
	    LeabraUnit_Group @.gp[74] = [3] { 
	    };
	    LeabraUnit_Group @.gp[75] = [3] { 
	    };
	    LeabraUnit_Group @.gp[76] = [3] { 
	    };
	    LeabraUnit_Group @.gp[77] = [3] { 
	    };
	    LeabraUnit_Group @.gp[78] = [3] { 
	    };
	    LeabraUnit_Group @.gp[79] = [3] { 
	    };
	  };
	};
	LeabraLayer @[3] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="harmonics";
 desc=;
 tags=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_0";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraAll_Std step prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=.projects[0].programs.gp[0]$0$;
     mbr=Program_Group::step_prog;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Build";
     desc=" Build the network units and Connect them (calls BuildLayers/Units/Prjns and Connect)";
     base=.projects[0].networks[0]$1$;
     mth=Network::Build;
    };
    EditMthItem @[1] {
     label="Train Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][1]$2$;
     mth=Program::Init;
    };
    EditMthItem @[2] {
     label="Run";
     desc=" run the program";
     base=$2$;
     mth=Program::Run;
    };
    EditMthItem @[3] {
     label="Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$2$;
     mth=Program::Step;
    };
    EditMthItem @[4] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$2$;
     mth=Program::Stop;
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="StdInputData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1] ;      };
     };
     float_Data @[1] {
      name="MGN_pri";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;40;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10 40 1] -0.0096768122;0.0025768173;0.0133597;0.025005439;0.032969855;0.031491891;0.01395077;-0.0083596501;-0.017076137;-0.014879419;0.11505576;0.12892631;0.14189346;0.15391508;0.16191664;0.16338027;0.14114468;0.088651597;0.030876361;0.0035331245;0.1837727;0.18472773;0.18801454;0.18762484;0.18866524;0.19741368;0.19664906;0.14915182;0.064503156;0.013469972;0.15827803;0.1438687;0.1368178;0.12307112;0.11399158;0.12548555;0.15774165;0.16419233;0.10073652;0.025614263;0.055826385;0.036048297;0.025953781;0.0095486036;-0.0077584507;-0.0063014557;0.028812176;0.09794794;0.10873599;0.045335911;-0.055959016;-0.071267076;-0.082062051;-0.092076175;-0.10998709;-0.11810593;-0.1134176;-0.035173532;0.05359735;0.051227611;-0.14673796;-0.15115005;-0.16462167;-0.16710956;-0.17240871;-0.18373805;-0.19683744;-0.16221039;-0.061314348;0.021896023;-0.19176224;-0.17909753;-0.18730588;-0.18051176;-0.16144398;-0.17148994;-0.17923886;-0.20123045;-0.1534609;-0.028788242;-0.1347371;-0.10560831;-0.093152277;-0.071744524;-0.03657243;-0.038536794;-0.043696441;-0.11614908;-0.145915;-0.070151031;0.052458487;0.07982628;0.10918666;0.13743886;0.15906404;0.16100319;0.15281159;0.063284114;-0.046810478;-0.067381822;0.22736369;0.22125569;0.23532446;0.24230368;0.22347809;0.21309608;0.20894219;0.19142129;0.089633808;-0.012848919;0.16370299;0.12588845;0.10906137;0.085861512;0.039315641;0.0072014085;-0.016780514;0.079555832;0.16294943;0.045856636;-0.086478017;-0.10231049;-0.12321851;-0.15043113;-0.17662027;-0.20955493;-0.26999444;-0.19925459;0.064477831;0.066505872;-0.19284023;-0.16229925;-0.1553134;-0.16216953;-0.14740852;-0.13078043;-0.17898351;-0.269537;-0.085083775;0.055523824;0.002679216;0.023197751;0.043136984;0.049300306;0.067937136;0.15335277;0.19537175;0.045678765;-0.059591692;0.02328836;0.2060124;0.16863596;0.15215538;0.1438136;0.12760827;0.21677378;0.37017;0.42277965;0.089450926;-0.016882513;0.11827862;0.071110249;0.022300806;0.0042575765;-0.0050232639;0.00072334136;0.13887301;0.41389754;0.17309448;-0.024566025;-0.045797631;-0.027390569;-0.037444368;-0.030641831;0.018062443;-0.045323987;-0.054130752;0.094806589;0.10899933;0.0022230363;-0.02661892;0.03046969;0.073030584;0.10438327;0.16686094;0.11654355;-0.0014458501;-0.11894781;-0.011105151;0.01562834;0.02431377;0.042908665;0.079077065;0.097254649;0.11889339;0.12285013;0.019411586;-0.15116289;-0.073066339;0.0026752509;-0.0040679299;-0.019738322;-0.0066757351;-0.0092242863;-0.035242237;-0.0076858215;-0.039792228;-0.11785;-0.082080752;-0.012756613;-0.02770327;-0.037878148;-0.038213488;-0.042659346;-0.084445469;-0.087871067;-0.074466452;-0.067058735;-0.059503213;-0.018647481;-0.0321275;-0.032748815;-0.041307006;-0.046282277;-0.071791306;-0.095923834;-0.073860645;-0.038963318;-0.033223066;-0.014953242;-0.026394578;-0.029273206;-0.036409616;-0.04052566;-0.051840145;-0.064877398;-0.048465811;-0.026684079;-0.018420963;-0.0074920086;-0.014680842;-0.022547606;-0.028904255;-0.030357461;-0.031896397;-0.030896841;-0.021519298;-0.015200649;-0.0068126707;-0.0029485538;-0.0080320751;-0.014558783;-0.02083749;-0.021086305;-0.016550081;-0.010109916;-0.0065087532;-0.0065987241;-0.00098099536;-0.0012696149;-0.0072245053;-0.0087413965;-0.012175586;-0.012012509;-0.00580539;-0.0011835461;-0.00062613329;-0.0020690202;-0.00043131204;-0.00095873757;-0.0086215418;-0.006690653;-0.0073363264;-0.0083114207;-0.004119039;-0.0010795807;-0.00054121419;-0.0027301051;-0.0015619405;-0.0016732034;-0.0066575678;-0.0043091094;-0.0039870683;-0.0045367167;-0.0042853924;-0.0038827155;-0.0028623047;-0.0060244324;-0.0056339107;-0.0055910861;-0.0054835454;-0.0036740429;-0.0033270933;-0.0052690245;-0.0058203219;-0.010188764;-0.010285592;-0.015937125;-0.015457305;-0.011884114;-0.0070526646;-0.005982921;-0.007403485;-0.01127104;-0.010604635;-0.019644335;-0.019924155;-0.02713679;-0.024414519;-0.017198684;-0.013615765;-0.011536486;-0.013949035;-0.016211361;-0.013038656;-0.020366751;-0.019609569;-0.020680884;-0.015182682;-0.0093577486;-0.02410298;-0.020423695;-0.017004643;-0.013056156;-0.0075360127;0.0050860555;0.0068311645;0.019297307;0.022619223;0.018965336;-0.032293987;-0.027283594;-0.014643396;-0.010893018;-0.0076415953;0.03361835;0.035854176;0.055025171;0.045089904;0.032580622;-0.026616158;-0.029209461;-0.012514588;-0.024922082;-0.026709033;0.016333181;0.016052926;0.024624225;0.0076558483;0.0053668628;-0.011744583;-0.025604786;-0.015429446;-0.033790622;-0.034514457;-0.019066643;-0.02719084;-0.032925453;-0.036412094;-0.025173912;0.038004078;0.020823818;0.022934122;0.028896933;0.020637779;-0.0056664171;-0.017803609;-0.029213546;-0.01227249;-0.01043265;0.10558939;0.097198397;0.087391101;0.12039385;0.098972261;0.035093714;0.03159339;0.025374269;0.045203157;0.025879681;0.10126626;0.12405792;0.082217753;0.11174379;0.11047827;0.04522926;0.057892773;0.064097129;0.053057767;0.037724808;0.024719747;0.056085378;0.014524827;0.017326239;0.038717009;0.018144242;0.033929829;0.040852129;0.012126852;0.018052455;      };
     };
     float_Data @[2] {
      name="MGN_pri_AN";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;40;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10 40 1] 0;0.21917239;0.63161308;0.8042357;0.86969548;0.85951048;0.64408356;0;0;0;0.99777204;0.9927066;0.98621202;0.97913313;0.97400814;0.97304171;0.98662305;0.99835598;0.85503817;0.2815918;0.95887697;0.95818835;0.95580536;0.9560889;0.95533133;0.94889617;0.94946277;0.98203808;0.9784357;0.63398296;0.97637355;0.98510927;0.98891819;0.99512506;0.99805719;0.99417269;0.97671747;0.97250199;0.99999392;0.81028736;0.96220005;0.88864982;0.81357402;0.53494442;0;0;0.83895868;0.99995124;0.99920487;0.93149525;0;0;0;0;0;0;0;0;0.95685041;0.95052916;0;0;0;0;0;0;0;0;0;0.76981449;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.95389807;0.99425954;0.99912447;0.98859751;0.97586727;0.97460705;0.97981668;0.97654074;0;0;0.92634696;0.93097997;0.92030358;0.9150092;0.92929506;0.93715197;0.94028151;0.95331597;0.9986428;0;0.97282755;0.99400741;0.99914718;0.99736851;0.90589815;0.45616445;0;0.99408579;0.97332704;0.93339199;0;0;0;0;0;0;0;0;0.97839749;0.98131114;0;0;0;0;0;0;0;0;0;0.96150577;0.22633632;0.7849853;0.92296427;0.94485784;0.98319536;0.97948217;0.95040756;0.93274915;0;0.78599858;0.94248194;0.9695074;0.9802202;0.98514044;0.99328268;0.93437344;0.82345599;0.79002303;0.99859172;0;0.99680936;0.9869051;0.77465796;0.32308912;0;0.063603967;0.98784554;0.79548615;0.96643895;0;0;0;0;0;0.71740997;0;0;0.99967754;0.99915832;0.1934163;0;0.85200506;0.98886102;0.99979132;0.97071171;0.99734569;0;0;0;0.67660701;0.79710412;0.92202783;0.99377048;0.99991214;0.99660963;0.99520892;0.73731697;0;0;0.22606118;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.36563227;0.44188249;0.73569733;0.77838683;0.73092425;0;0;0;0;0;0.87393135;0.88753724;0.96034008;0.93058324;0.86708635;0;0;0;0;0;0.68913656;0.6842292;0.80033964;0.47292733;0.37902644;0;0;0;0;0;0;0;0;0;0;0.8992964;0.75639862;0.78200614;0.83965367;0.75397998;0;0;0;0;0;0.9996646;0.99990845;0.99794227;0.99610138;0.9999879;0.88307595;0.86023456;0.80792642;0.93100435;0.81286198;0.99998206;0.99474376;0.99566203;0.99860281;0.9988746;0.93110108;0.96668983;0.97781706;0.95547086;0.89783663;0.80132371;0.96278667;0.65566987;0.70577759;0.90293592;0.71866763;0.87591779;0.91312891;0.60366094;0.71725601;      };
     };
     float_Data @[3] {
      name="A1_pitch";
      col_flags=SAVE_ROWS|SAVE_DATA|PAT_4D;
      is_matrix=1;
      cell_geom{ 3;1;10;8;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [3 1 10 8 1] 0.12826529;0.046262093;0.31992528;0.13813861;0.073226623;0.30137572;0.12580574;0.056461085;0.24673557;0.13382946;0.06509646;0.23116998;0.1513719;0.097628564;0.25881997;0.15613258;0.097726785;0.29706812;0.18833669;0.11694873;0.43528709;0.2249523;0.11818169;0.75365871;0.11524979;0.10525364;0.41270235;0.024995167;0.056470085;0.096740663;0.19263032;0.17089483;0.12481293;0.21022111;0.20267132;0.15989447;0.21577196;0.21955304;0.15905087;0.22621012;0.23952602;0.16916275;0.24638979;0.27140853;0.26739496;0.24443068;0.2908628;0.25820112;0.23856796;0.28674573;0.2665185;0.23682244;0.25935861;0.40998042;0.1447787;0.18452898;0.32197654;0.050370965;0.056300495;0.10756442;0.27967378;0.37163448;0.21860686;0.29087639;0.38230851;0.28900504;0.29556593;0.39053118;0.35402387;0.29938078;0.39174211;0.38948438;0.31560308;0.39685851;0.4624635;0.31252828;0.41481769;0.4674212;0.2920343;0.41691461;0.3801569;0.24580801;0.40354952;0.27040166;0.17376024;0.29043508;0.18454759;0.075985923;0.10749106;0.092493802;0.27923077;0.37325227;0.23843938;0.27324295;0.35040912;0.25115898;0.26571956;0.32889298;0.26535994;0.25602892;0.30296716;0.2853449;0.25436601;0.28910553;0.32952324;0.25573164;0.29385155;0.32138556;0.25767231;0.30151749;0.25272366;0.23271167;0.40022659;0.17343444;0.19151227;0.38442805;0.11344728;0.086575583;0.15362312;0.055286907;0.19943459;0.23689581;0.15693618;0.18507896;0.22366589;0.15350388;0.1677876;0.19797495;0.16502818;0.15875357;0.17915039;0.17496465;0.13855544;0.17216684;0.17319393;0.11479732;0.16517697;0.17675458;0.13403928;0.13658784;0.13710788;0.17529647;0.23326877;0.07985457;0.2020427;0.36840802;0.057244696;0.11458831;0.17013171;0.045825798;0.11698115;0.15380247;0.17728914;0.11422757;0.19089164;0.19513145;0.09081836;0.17107156;0.18681179;0.092246398;0.17003235;0.224139;0.071649306;0.20302056;0.19898117;0.033546057;0.21347219;0.12436853;0.031290367;0.23031537;0.11615226;0.085946366;0.22583234;0.09450566;0.17585462;0.22741678;0.056352939;0.12851234;0.17259519;0.041966844;0.058211956;0.2901715;0.10646743;0.061228715;0.32160515;0.11847499;0.039168894;0.33532581;0.10458378;0.04313264;0.34781143;0.11789123;0.027411148;0.39288291;0.10623001;-0.0013543461;0.47131151;0.053029597;-0.002394971;0.51490432;0.051024377;0.020081779;0.45535019;0.047566779;0.10453829;0.28852081;0.034012578;0.10035063;0.15267836;0.02267947;0.032027569;0.47968659;0.076388046;0.053444359;0.4738197;0.098325722;0.019633913;0.44500589;0.064626202;0.023865212;0.44377127;0.075766012;0.041534744;0.47495595;0.074120075;0.014560653;0.56378865;0.029910674;0.0348747;0.72854996;0.046988472;0.049043238;0.78413934;0.049658235;0.05224302;0.36813065;0.019652793;0.075471044;0.11169102;0.02843326;      };
     };
     float_Data @[4] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [5 5 1] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[5] {
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1] 81;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;60;60;60;60;60;60;60;60;60;60;60;60;60;60;60;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="StimGen_Mon";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
       };
      };
      name="Y";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="Temporal_Mon";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[1] {
      name="item";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;40;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="AGC_gain_Mon";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4] 0;1;2;3;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
       };
      };
      name="Y1";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4] 1.0023446;1.0025235;1.0025995;1.0026647;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_2";
	value 1 0=1;
       };
      };
      name="Y2";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4] 0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[0][4]$3$;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][0]$4$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="batch counter";
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="maximum number of batch runs to perform";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$5$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$6$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$5$;
      local_ctr_var=$6$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=$2$;
	targ_ld_init="*LeabraTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$5$;
	local_ctr_var=$6$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrain";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns";
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of epochs to run";
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$7$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     };
     ProgVar @[5] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="save the network's weights at the end of training?  Note: you can also just call SaveWeights program inside training loop to save more frequently";
     };
     ProgVar @[6] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$8$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
     };
     ProgVar @[7] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$9$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$10$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$11$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[7]$12$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[6]$13$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$13$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$11$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$12$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$12$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$11$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$11$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$14$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][2]$15$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$11$;
	local_ctr_var=$14$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$12$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc=;
      flags=;
      cond {
       expr="save_final_wts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[0][9]$16$;
	targ_ld_init="*SaveWeights*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$17$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$18$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
     ProgVar @[5] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call Compute_AvgAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
     ProgVar @[6] {
      name="adapt_rel_abs_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="use the computed rel and abs netin values to adapt the wt_scale.abs and wt_scale.rel params of network conspecs to match target values that are set on the projections -- see conspec rel_net_adapt and layerspec abs_net_adapt parmeters and comments for more information";
     };
     ProgVar @[7] {
      name="ps";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=SignalProcBlock::ProcStatus;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$19$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$20$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$21$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[7]$22$;
      expr {
       expr="SignalProcBlock::PS_OK";
      };
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$19$;
      local_ctr_var=$20$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[2] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$21$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$21$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$23$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=OFF;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][3]$24$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$25$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$26$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$27$;
      order=SEQUENTIAL;
      item_idx_list{ 0;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     CodeBlock @[6] {
      desc="Audioproc loop (replaces Net Data Loop)";
      flags=NON_STD;
      prog_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[1][0]$28$;
	targ_ld_init="*Audioproc*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       OtherProgramVar @[1] {
	desc=;
	flags=;
	other_prog=$28$;
	set_other=0;
	var_1=$22$;
	var_2=NULL;
	var_3=NULL;
	var_4=NULL;
       };
       WhileLoop @[2] {
	desc=;
	flags=;
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$25$;
	  method=DataBlock_Idx::ReadItem;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="-1";
	    };
	   };
	  };
	 };
	 ProgramCall @[1] {
	  desc="run the trial program, passing network and input_data";
	  flags=;
	  target=$24$;
	  targ_ld_init="*LeabraTrial*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	 };
	 ProgramCall @[2] {
	  desc=;
	  flags=;
	  target=$28$;
	  targ_ld_init="*Audioproc*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 OtherProgramVar @[3] {
	  desc=;
	  flags=;
	  other_prog=$28$;
	  set_other=0;
	  var_1=$22$;
	  var_2=NULL;
	  var_3=NULL;
	  var_4=NULL;
	 };
	};
	test {
	 expr="ps == SignalProcBlock::PS_OK";
	};
       };
      };
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$19$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$19$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[9] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$19$;
	method=LeabraNetwork::Compute_AvgAbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="adapt_rel_abs_netin";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$19$;
	  method=LeabraNetwork::Compute_AdaptRelNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$19$;
	  method=LeabraNetwork::Compute_AdaptAbsNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
       };
      };
     };
     MethodCall @[10] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$21$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[11] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[0][8]$29$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$30$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$31$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$30$;
      local_ctr_var=$31$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$30$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=$3$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$30$;
	local_ctr_var=$31$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$30$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$30$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=;
	result_var=NULL;
	obj=$30$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[5] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$30$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[6] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[0][7]$32$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[7] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$30$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$33$;
     };
    };
   };
   Program @[4] {
    name="LeabraSettle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=60;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$34$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$35$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$34$;
      local_ctr_var=$35$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$34$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[0][6]$36$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$34$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$37$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$37$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[0][5]$38$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$34$;
	local_ctr_var=$35$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$34$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$34$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$34$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$34$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$39$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$40$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$40$;
      update_var=.projects[0].programs.gp[0][5].vars[0]$41$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$4$;
      network=$1$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="MGN_pri";
	net_target=LAYER;
	layer_name="MGN_pri";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="MGN_pri_AN";
	net_target=LAYER;
	layer_name="MGN_pri_AN";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="A1_pitch";
	net_target=LAYER;
	layer_name="A1_pitch";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$42$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$43$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$43$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$43$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$43$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=$17$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$17$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$44$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$45$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$46$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$46$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$47$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=.projects[0].data.gp[1][1]$48$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$48$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$49$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$18$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$50$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$51$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$52$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$50$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$52$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$52$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$52$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[9] {
    name="SaveWeights";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$53$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$54$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$55$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$56$;
      obj=.projects[0].programs.gp[0][9].args[0]$57$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$57$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] {
   name="Audioproc";
   el_typ=Program;
   el_def=0;
   step_prog=NULL;
   tags=;
   desc=;
   Program @[0] {
    name="Audioproc";
    tags=;
    desc=;
    flags=;
    objs {
     name=;
     el_typ=SignalMonBlock;
     el_def=0;
     InputBlockSet @[0] {
      name="InputBlockSet_1";
      desc=;
      flags=;
      gain {
       level=1;
       units=UN_SCALE;
      };
      fs {
       fs_val=SF_16000;
       fs_act=16000;
      };
      max_dur {
       duration=0;
       units=UN_CONT;
      };
      blocks {
       name=;
       el_typ=InputBlockBase;
       el_def=0;
       StimGen @[0] {
	name="StimGen_0";
	desc=;
	flags=BF_OFF;
	gain {
	 level=1;
	 units=UN_SCALE;
	};
	fs {
	 fs_val=SF_16000;
	 fs_act=16000;
	};
	max_dur {
	 duration=1;
	 units=UN_TIME_S;
	};
	out_buff {
	 fs {
	  fs_val=SF_16000;
	  fs_act=16000;
	 };
	 fr_dur {
	  duration=1;
	  units=UN_SAMPLES;
	 };
	 stages=10;
	 fields=1;
	};
	pos {x=0: y=0.233238: z=0: };
	chans {
	 name=;
	 el_typ=ToneChan;
	 el_def=0;
	 ToneChan @[0] {
	  name=;
	  chan_flags=;
	  wave_type=WT_SAWTOOTH;
	  freq_mode=FM_ABSOLUTE;
	  freq=220;
	  level {
	   level=1;
	   units=UN_SCALE;
	  };
	  starting_phase {
	   phase=0;
	   units=UN_DEGREES;
	  };
	 };
	 NoiseChan @[1] {
	  name=;
	  chan_flags=CF_OFF;
	  noise_type=NT_WHITE;
	  level {
	   level=1;
	   units=UN_SCALE;
	  };
	 };
	};
       };
       FileInput @[1] {
	name="FileInput_0";
	desc="read audio data from an input file";
	flags=;
	gain {
	 level=5;
	 units=UN_SCALE;
	};
	fs {
	 fs_val=SF_16000;
	 fs_act=16000;
	};
	max_dur {
	 duration=0;
	 units=UN_CONT;
	};
	out_buff {
	 fs {
	  fs_val=SF_CUSTOM;
	  fs_act=16000;
	 };
	 fr_dur {
	  duration=1;
	  units=UN_SAMPLES;
	 };
	 stages=10;
	 fields=1;
	};
	pos {x=0: y=0.233238: z=0: };
	fname="arctic_a0001.wav";
	format=SF_FORMAT_WAV;
	loop=0;
	vals {
	 is_auto=1;
	 act=1;
	};
	chans {
	 is_auto=1;
	 act=1;
	};
	fields {
	 is_auto=1;
	 act=1;
	};
       };
      };
      stages=10;
     };
     SignalMonBlock @[1] {
      name="SignalMonBlock_Input";
      desc=;
      flags=BF_OFF;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[0].blocks[0]$58$;
       buff_index=0;
      };
      mon_flags=MF_ACCUM|MF_RESET_ON_INIT|MF_FOR_PLOT;
      mon_type=MT_VAL;
      mon_data=.projects[0].data.gp[2][0]$59$;
      x_units=UN_SAMPLES;
      item_col="item";
      item_dims=2;
      item_dim0=DIM_VAL;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     ListenerBlock @[2] {
      name="ListenerBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[0]$60$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_16000;
	fs_act=16000;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      head_radius=0.09;
      pos {x=0: y=0: z=0: };
      pos_ear_L {x=-0.09: y=0: z=0: };
      pos_ear_R {x=0.09: y=0: z=0: };
      norm_by_n=0;
      output_mode=OM_Mono;
      speed_sound=344;
      dist_min=0.03;
      dist_atten=16;
     };
     GammatoneBlock @[3] {
      name="GammatoneBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[2]$61$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_16000;
	fs_act=16000;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=2;
      };
      out_buff_env {
       fs {
	fs_val=SF_16000;
	fs_act=16000;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      out_buff_delta_env {
       fs {
	fs_val=SF_AUTO;
	fs_act=0;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      out_vals=OV_ENV;
      chan_spacing=CS_LogLinear;
      ear_q=9.26449;
      min_bw=24.7;
      cf_lo=110;
      cf_hi=3227.854;
      chans_per_oct=8;
      n_chans=40;
     };
     SharpenBlock @[4] {
      name="SharpenBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[3]$62$;
       buff_index=1;
      };
      out_buff {
       fs {
	fs_val=SF_16000;
	fs_act=16000;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      chans_per_oct {
       auto_lookup=1;
       chans_per_oct=8;
      };
      out_fun=OF_STRAIGHT;
      pow_gain=1;
      pow_base=20;
      dog {
       name="DoG1dFilterSpec_0";
       filter_type=FT_DOG;
       half_width=4;
       filter_size=9;
       on_sigma_norm=1;
       off_sigma_norm=2;
      };
     };
     TemporalWindowBlock @[5] {
      name="TemporalWindowBlock_Sharp";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[4]$63$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=10;
       fields=1;
      };
      out_buff_off {
       fs {
	fs_val=SF_AUTO;
	fs_act=0;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      non_lin=NL_NONE;
      l_dur=20;
      u_dur=0;
      out_rate=10;
      ft=FT_MG;
      ot=OT_SINGLE;
      w {
       level=-30;
       units=UN_DBI;
      };
      tpl=5.5;
      tsl=26;
      tpu=2.5;
      tsu=12;
      sigma=1;
      on_sigma=0.5;
      off_sigma=1;
     };
     SignalMonBlock @[6] {
      name="Temporal_Mon";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[5]$64$;
       buff_index=0;
      };
      mon_flags=MF_ACCUM|MF_RESET_ON_INIT|MF_FOR_PLOT;
      mon_type=MT_ITEM;
      mon_data=.projects[0].data.gp[2][1]$65$;
      x_units=UN_SAMPLES;
      item_col="item";
      item_dims=2;
      item_dim0=DIM_VAL;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     SignalMonBlock @[7] {
      name="SignalMonBlock_pri";
      desc=;
      flags=;
      in_block {
       src_block=$64$;
       buff_index=0;
      };
      mon_flags=MF_RESET_ON_INIT;
      mon_type=MT_ITEM;
      mon_data=$4$;
      x_units=UN_SAMPLES;
      item_col="MGN_pri";
      item_dims=2;
      item_dim0=DIM_STAGE_DESC;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     ANBlock @[8] {
      name="ANBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=$64$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=10;
       fields=1;
      };
      in_gain {
       level=1;
       units=UN_SCALE;
      };
      val_list {
       name=;
       el_typ=ANVal;
       el_def=0;
       ANVal @[0] {
	name=;
	val_type=AN_GAUSS;
	cl=-10;
	width=30;
	norm=0.1096567;
	f=1;
       };
      };
     };
     SignalMonBlock @[9] {
      name="SignalMonBlock_AN";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[8]$66$;
       buff_index=0;
      };
      mon_flags=MF_RESET_ON_INIT;
      mon_type=MT_ITEM;
      mon_data=$4$;
      x_units=UN_SAMPLES;
      item_col="MGN_pri_AN";
      item_dims=2;
      item_dim0=DIM_STAGE_DESC;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     TemporalWindowBlock @[10] {
      name="TemporalWindowBlock_Gamma";
      desc=;
      flags=;
      in_block {
       src_block=$62$;
       buff_index=1;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      out_buff_off {
       fs {
	fs_val=SF_AUTO;
	fs_act=0;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      non_lin=NL_NONE;
      l_dur=20;
      u_dur=0;
      out_rate=10;
      ft=FT_MG;
      ot=OT_SINGLE;
      w {
       level=-30;
       units=UN_DBI;
      };
      tpl=5.5;
      tsl=26;
      tpu=2.5;
      tsu=12;
      sigma=1;
      on_sigma=0.5;
      off_sigma=1;
     };
     HarmonicSieveBlock @[11] {
      name="HarmonicSieveBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[10]$67$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=10;
       fields=1;
      };
      chans_per_oct {
       auto_lookup=1;
       chans_per_oct=8;
      };
      out_octs=3;
     };
     SignalMonBlock @[12] {
      name="SignalMonBlock_pitch";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[11]$68$;
       buff_index=0;
      };
      mon_flags=MF_RESET_ON_INIT;
      mon_type=MT_ITEM;
      mon_data=$4$;
      x_units=UN_SAMPLES;
      item_col="A1_pitch";
      item_dims=4;
      item_dim0=DIM_VAL;
      item_dim1=DIM_DUMMY;
      item_dim2=DIM_STAGE_DESC;
      item_dim3=DIM_CHAN;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="InputBlockSet_1";
      var_type=T_Object;
      object_type=InputBlockSet;
      object_val=$60$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="ListenerBlock_0";
      var_type=T_Object;
      object_type=ListenerBlock;
      object_val=$61$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="GammatoneBlock_0";
      var_type=T_Object;
      object_type=GammatoneBlock;
      object_val=$62$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="dur";
      var_type=T_Real;
      real_val=0.01;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="(ms) duration to process";
     };
     ProgVar @[4] {
      name="TemporalWindowBlock_Gamma";
      var_type=T_Object;
      object_type=TemporalWindowBlock;
      object_val=$67$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="SignalMonBlock_pri";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[7]$69$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="SignalMonBlock_pitch";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[12]$70$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="HarmonicSieveBlock_0";
      var_type=T_Object;
      object_type=HarmonicSieveBlock;
      object_val=$68$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="ps";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=SignalProcBlock::ProcStatus;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="SignalMonBlock_Input";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[1]$71$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="Temporal_Mon";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[6]$72$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="FileInput_0";
      var_type=T_Object;
      object_type=FileInput;
      object_val=.projects[0].programs.gp[1][0].objs[0].blocks[1]$73$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="SignalMonBlock_AN";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[9]$74$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[13] {
      name="ANBlock_0";
      var_type=T_Object;
      object_type=ANBlock;
      object_val=$66$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[14] {
      name="SharpenBlock_0";
      var_type=T_Object;
      object_type=SharpenBlock;
      object_val=$63$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[15] {
      name="TemporalWindowBlock_Sharp";
      var_type=T_Object;
      object_type=TemporalWindowBlock;
      object_val=$64$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[0]$75$;
      method=SignalProcBlock::InitConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[1] {
      desc=;
      flags=;
      cond {
       expr="true";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[1][0].vars[11]$76$;
	method=FileInput::OpenFile;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[8]$77$;
      obj=$75$;
      method=InputBlockBase::ProcNext_Duration;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="s";
	required=0;
	def_val=;
	expr {
	 expr="dur";
	};
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$78$;
   name="Browser2";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$78$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="Network_0";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @[0] {
	  m_data=$1$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ net;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=51: y=40: z=2: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$79$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ MGN_pri=0;MGN_pri_AN=0;A1_pitch=0;Hidden=0;Output=0;	  };
	 };
	};
       };
       camera_pos {x=0.5: y=0.3022419: z=1.917677: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=2.335362;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="StimGen_Mon";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$59$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][0].data[0]$80$;
	    m_transform=NULL;
	    name="X";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][0].data[1]$81$;
	    m_transform=NULL;
	    name="Y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$79$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.624621: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.637121;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="AGC_gain_Mon";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=.projects[0].data.gp[2][2]$82$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][2].data[0]$83$;
	    m_transform=NULL;
	    name="X";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][2].data[1]$84$;
	    m_transform=NULL;
	    name="Y1";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[2][2].data[2]$85$;
	    m_transform=NULL;
	    name="Y2";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=3: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=3: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=3: };
	   range {min=0: max=3: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y1";
	   fixed_range {fix_min=0: min=1.002345: fix_max=0: max=1.002665: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=1.002345: max=1.002665: };
	   range {min=1.002345: max=1.002665: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Y2";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$79$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.508989: y=0.445: z=1.720569: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.733069;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=0;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_change_log=0;
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
    };
   };
   name="Network_0";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$86$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=1: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: learn=0.01: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=1: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
      LeabraLayerSpec @[1] {
       name="A1_pitch_LayerSpec";
       desc=;
       unique{ inhib_group;gp_kwta;clamp;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=0: gain=0.2: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcalm {avg_updt=TRIAL: ml_mix=0: sm_mix=1: m_dt=0.03: s_dt=0.1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
     xcalm {avg_updt=TRIAL: ml_mix=0: sm_mix=1: m_dt=0.03: s_dt=0.1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="MGN_pri";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     un_geom {x=10: y=40: n_not_xy=0: n=400: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=10: y=40: n_not_xy=0: n=400: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=40: n_not_xy=0: n=400: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$87$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.03813666: max=0.4227796: max_i=157: };
     acts_p {cmpt=1: avg=0.03813666: max=0.4227796: max_i=157: };
     acts_m {cmpt=1: avg=0.03813666: max=0.4227796: max_i=157: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.0025: pct_c=0.9975: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.0025: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[0]$88$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="MGN_pri_AN";
     flags=;
     layer_type=INPUT;
     pos {x=24: y=0: z=0: };
     un_geom {x=10: y=40: n_not_xy=0: n=400: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=10: y=40: n_not_xy=0: n=400: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=40: n_not_xy=0: n=400: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$87$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.3617096: max=0.95: max_i=10: };
     acts_p {cmpt=1: avg=0.3617096: max=0.95: max_i=10: };
     acts_m {cmpt=1: avg=0.3617096: max=0.95: max_i=10: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=158: pct=0.395: pct_c=0.605: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.275: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$88$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="A1_pitch";
     flags=;
     layer_type=INPUT;
     pos {x=12: y=0: z=1: };
     un_geom {x=3: y=1: n_not_xy=0: n=3: };
     unit_groups=1;
     gp_geom {x=10: y=8: n_not_xy=0: n=80: };
     gp_spc {x=1: y=1: };
     act_geom {x=39: y=15: n_not_xy=0: n=240: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=24: n_not_xy=0: n=240: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03724885: max=0.06398506: max_i=2: };
       i_thrs {cmpt=1: avg=0.1472264: max=0.379888: max_i=2: };
       acts {cmpt=1: avg=0.3177279: max=0.9531836: max_i=2: };
       acts_p {cmpt=1: avg=0.3177279: max=0.9531836: max_i=2: };
       acts_m {cmpt=1: avg=0.3177279: max=0.9531836: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.379888: k1_ithr=0.03089554: ithr_r=2.509264: ithr_diff=0.918672: tie_brk=0: };
       i_val {kwta=0.240291: g_i=0.240291: gp_g_i=0: g_i_orig=0.240291: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=3.486872e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03674472: max=0.06027514: max_i=2: };
       i_thrs {cmpt=1: avg=0.1563705: max=0.3520637: max_i=2: };
       acts {cmpt=1: avg=0.3152437: max=0.945731: max_i=2: };
       acts_p {cmpt=1: avg=0.3152437: max=0.945731: max_i=2: };
       acts_m {cmpt=1: avg=0.3152437: max=0.945731: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3520637: k1_ithr=0.05852393: ithr_r=1.794376: ithr_diff=0.8337689: tie_brk=0: };
       i_val {kwta=0.2346478: g_i=0.2346478: gp_g_i=0: g_i_orig=0.2346478: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=5.203485e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.030668: max=0.04934711: max_i=2: };
       i_thrs {cmpt=1: avg=0.1145012: max=0.2701034: max_i=2: };
       acts {cmpt=1: avg=0.3142041: max=0.9426123: max_i=2: };
       acts_p {cmpt=1: avg=0.3142041: max=0.9426123: max_i=2: };
       acts_m {cmpt=1: avg=0.3142041: max=0.9426123: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2701034: k1_ithr=0.03670012: ithr_r=1.996025: ithr_diff=0.8641257: tie_brk=0: };
       i_val {kwta=0.1767421: g_i=0.1767421: gp_g_i=0: g_i_orig=0.1767421: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0001481175;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02982206: max=0.04475767: max_i=2: };
       i_thrs {cmpt=1: avg=0.115048: max=0.246755: max_i=2: };
       acts {cmpt=1: avg=0.3079151: max=0.9237454: max_i=2: };
       acts_p {cmpt=1: avg=0.3079151: max=0.9237454: max_i=2: };
       acts_m {cmpt=1: avg=0.3079151: max=0.9237454: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.246755: k1_ithr=0.04919444: ithr_r=1.612615: ithr_diff=0.8006344: tie_brk=0: };
       i_val {kwta=0.1677308: g_i=0.1677308: gp_g_i=0: g_i_orig=0.1677308: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0002999902;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03490237: max=0.05800338: max_i=2: };
       i_thrs {cmpt=1: avg=0.1539102: max=0.2882299: max_i=2: };
       acts {cmpt=1: avg=0.3177709: max=0.9533126: max_i=2: };
       acts_p {cmpt=1: avg=0.3177709: max=0.9533126: max_i=2: };
       acts_m {cmpt=1: avg=0.3177709: max=0.9533126: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2882299: k1_ithr=0.08675036: ithr_r=1.200724: ithr_diff=0.6990238: tie_brk=0: };
       i_val {kwta=0.2076381: g_i=0.2076381: gp_g_i=0: g_i_orig=0.2076381: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=5.90682e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03782571: max=0.06564339: max_i=2: };
       i_thrs {cmpt=1: avg=0.1754638: max=0.3456022: max_i=2: };
       acts {cmpt=1: avg=0.3185084: max=0.9555253: max_i=2: };
       acts_p {cmpt=1: avg=0.3185084: max=0.9555253: max_i=2: };
       acts_m {cmpt=1: avg=0.3185084: max=0.9555253: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3456022: k1_ithr=0.09039453: ithr_r=1.341105: ithr_diff=0.7384434: tie_brk=0: };
       i_val {kwta=0.2435191: g_i=0.2435191: gp_g_i=0: g_i_orig=0.2435191: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=2.95639e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05152031: max=0.09350384: max_i=2: };
       i_thrs {cmpt=1: avg=0.2702863: max=0.5529307: max_i=2: };
       acts {cmpt=1: avg=0.3191273: max=0.9573819: max_i=2: };
       acts_p {cmpt=1: avg=0.3191273: max=0.9573819: max_i=2: };
       acts_m {cmpt=1: avg=0.3191273: max=0.9573819: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.5529307: k1_ithr=0.1289641: ithr_r=1.455699: ithr_diff=0.7667627: tie_brk=0: };
       i_val {kwta=0.3833441: g_i=0.3833441: gp_g_i=0: g_i_orig=0.3833441: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=2.44379e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.07311951: max=0.1507317: max_i=2: };
       i_thrs {cmpt=1: avg=0.4483964: max=1.030488: max_i=2: };
       acts {cmpt=1: avg=0.3190188: max=0.9570562: max_i=2: };
       acts_p {cmpt=1: avg=0.3190188: max=0.9570562: max_i=2: };
       acts_m {cmpt=1: avg=0.3190188: max=0.9570562: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=1.030488: k1_ithr=0.1573505: ithr_r=1.879312: ithr_diff=0.8473048: tie_brk=0: };
       i_val {kwta=0.681233: g_i=0.681233: gp_g_i=0: g_i_orig=0.681233: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04221372: max=0.08254047: max_i=2: };
       i_thrs {cmpt=1: avg=0.2166029: max=0.5190536: max_i=2: };
       acts {cmpt=1: avg=0.3179739: max=0.9539216: max_i=2: };
       acts_p {cmpt=1: avg=0.3179739: max=0.9539216: max_i=2: };
       acts_m {cmpt=1: avg=0.3179739: max=0.9539216: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.5190536: k1_ithr=0.06537758: ithr_r=2.071828: ithr_diff=0.8740446: tie_brk=0: };
       i_val {kwta=0.3375832: g_i=0.3375832: gp_g_i=0: g_i_orig=0.3375832: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=6.616116e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.0118804: max=0.01934813: max_i=2: };
       i_thrs {cmpt=1: avg=-0.01089704: max=0.045111: max_i=2: };
       acts {cmpt=1: avg=0.2662023: max=0.7986068: max_i=2: };
       acts_p {cmpt=1: avg=0.2662023: max=0.7986068: max_i=2: };
       acts_m {cmpt=1: avg=0.2662023: max=0.7986068: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.045111: k1_ithr=-0.03890106: ithr_r=0: ithr_diff=1.862341: tie_brk=0: };
       i_val {kwta=0.01150618: g_i=0.01150618: gp_g_i=0: g_i_orig=0.01150618: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.01782256;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03729564: max=0.04526255: max_i=0: };
       i_thrs {cmpt=1: avg=0.1441691: max=0.1889455: max_i=0: };
       acts {cmpt=1: avg=0.6107435: max=0.9340383: max_i=0: };
       acts_p {cmpt=1: avg=0.6107435: max=0.9340383: max_i=0: };
       acts_m {cmpt=1: avg=0.6107435: max=0.9340383: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1889455: k1_ithr=0.1217808: ithr_r=0.4392355: ithr_diff=0.3554711: tie_brk=0: };
       i_val {kwta=0.1620796: g_i=0.1620796: gp_g_i=0: g_i_orig=0.1620796: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0005744696;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04275009: max=0.04843851: max_i=0: };
       i_thrs {cmpt=1: avg=0.1863935: max=0.2153317: max_i=0: };
       acts {cmpt=1: avg=0.6069683: max=0.9136362: max_i=0: };
       acts_p {cmpt=1: avg=0.6069683: max=0.9136362: max_i=0: };
       acts_m {cmpt=1: avg=0.6069683: max=0.9136362: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2153317: k1_ithr=0.1719244: ithr_r=0.225125: ithr_diff=0.2015836: tie_brk=0: };
       i_val {kwta=0.1979688: g_i=0.1979688: gp_g_i=0: g_i_orig=0.1979688: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0002703667;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[12] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04194271: max=0.05086356: max_i=1: };
       i_thrs {cmpt=1: avg=0.197188: max=0.2293296: max_i=1: };
       acts {cmpt=1: avg=0.4874162: max=0.9182336: max_i=1: };
       acts_p {cmpt=1: avg=0.4874162: max=0.9182336: max_i=1: };
       acts_m {cmpt=1: avg=0.4874162: max=0.9182336: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2293296: k1_ithr=0.1811171: ithr_r=0.2360161: ithr_diff=0.210232: tie_brk=0: };
       i_val {kwta=0.2100446: g_i=0.2100446: gp_g_i=0: g_i_orig=0.2100446: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.003108025;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[13] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04385062: max=0.05407432: max_i=1: };
       i_thrs {cmpt=1: avg=0.2174494: max=0.259289: max_i=1: };
       acts {cmpt=1: avg=0.3472711: max=0.9127023: max_i=1: };
       acts_p {cmpt=1: avg=0.3472711: max=0.9127023: max_i=1: };
       acts_m {cmpt=1: avg=0.3472711: max=0.9127023: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.259289: k1_ithr=0.1965297: ithr_r=0.2771301: ithr_diff=0.2420441: tie_brk=0: };
       i_val {kwta=0.2341853: g_i=0.2341853: gp_g_i=0: g_i_orig=0.2341853: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.00129436;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[14] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05351523: max=0.06055586: max_i=1: };
       i_thrs {cmpt=1: avg=0.2925967: max=0.3071128: max_i=1: };
       acts {cmpt=1: avg=0.3435479: max=0.8679672: max_i=1: };
       acts_p {cmpt=1: avg=0.3435479: max=0.8679672: max_i=1: };
       acts_m {cmpt=1: avg=0.3435479: max=0.8679672: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3071128: k1_ithr=0.2853386: ithr_r=0.07353867: ithr_diff=0.07089978: tie_brk=0: };
       i_val {kwta=0.2984031: g_i=0.2984031: gp_g_i=0: g_i_orig=0.2984031: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0006073862;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[15] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05393154: max=0.06451836: max_i=1: };
       i_thrs {cmpt=1: avg=0.2967473: max=0.3362943: max_i=1: };
       acts {cmpt=1: avg=0.2987651: max=0.8938323: max_i=1: };
       acts_p {cmpt=1: avg=0.2987651: max=0.8938323: max_i=1: };
       acts_m {cmpt=1: avg=0.2987651: max=0.8938323: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3362943: k1_ithr=0.2769738: ithr_r=0.1940635: ithr_diff=0.1763944: tie_brk=0: };
       i_val {kwta=0.3125661: g_i=0.3125661: gp_g_i=0: g_i_orig=0.3125661: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=6.186962e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[16] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05441169: max=0.06039038: max_i=2: };
       i_thrs {cmpt=1: avg=0.2959161: max=0.3301186: max_i=1: };
       acts {cmpt=1: avg=0.4270304: max=0.8196017: max_i=2: };
       acts_p {cmpt=1: avg=0.4270304: max=0.8196017: max_i=2: };
       acts_m {cmpt=1: avg=0.4270304: max=0.8196017: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3301186: k1_ithr=0.2788149: ithr_r=0.1689041: ithr_diff=0.1554101: tie_brk=0: };
       i_val {kwta=0.3095971: g_i=0.3095971: gp_g_i=0: g_i_orig=0.3095971: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0006990135;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[17] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.06041077: max=0.08199608: max_i=2: };
       i_thrs {cmpt=1: avg=0.3530807: max=0.5149707: max_i=2: };
       acts {cmpt=1: avg=0.3007904: max=0.9023712: max_i=2: };
       acts_p {cmpt=1: avg=0.3007904: max=0.9023712: max_i=2: };
       acts_m {cmpt=1: avg=0.3007904: max=0.9023712: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.5149707: k1_ithr=0.2721358: ithr_r=0.6378086: ithr_diff=0.4715508: tie_brk=0: };
       i_val {kwta=0.4178367: g_i=0.4178367: gp_g_i=0: g_i_orig=0.4178367: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=7.450581e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[18] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04341895: max=0.06439531: max_i=2: };
       i_thrs {cmpt=1: avg=0.2256421: max=0.3829648: max_i=2: };
       acts {cmpt=1: avg=0.307863: max=0.9235889: max_i=2: };
       acts_p {cmpt=1: avg=0.307863: max=0.9235889: max_i=2: };
       acts_m {cmpt=1: avg=0.307863: max=0.9235889: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3829648: k1_ithr=0.1469808: ithr_r=0.9576415: ithr_diff=0.616203: tie_brk=0: };
       i_val {kwta=0.2885712: g_i=0.2885712: gp_g_i=0: g_i_orig=0.2885712: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=4.434586e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[19] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.01428239: max=0.02151288: max_i=2: };
       i_thrs {cmpt=1: avg=0.007117947: max=0.06134665: max_i=2: };
       acts {cmpt=1: avg=0.2736739: max=0.8210217: max_i=2: };
       acts_p {cmpt=1: avg=0.2736739: max=0.8210217: max_i=2: };
       acts_m {cmpt=1: avg=0.2736739: max=0.8210217: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.06134665: k1_ithr=-0.0199964: ithr_r=0: ithr_diff=1.325958: tie_brk=0: };
       i_val {kwta=0.02880943: g_i=0.02880943: gp_g_i=0: g_i_orig=0.02880943: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.01183754;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[20] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.06153548: max=0.07726484: max_i=1: };
       i_thrs {cmpt=1: avg=0.3349576: max=0.4574517: max_i=1: };
       acts {cmpt=1: avg=0.3614635: max=0.9071191: max_i=1: };
       acts_p {cmpt=1: avg=0.3614635: max=0.9071191: max_i=1: };
       acts_m {cmpt=1: avg=0.3614635: max=0.9071191: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4574517: k1_ithr=0.2737105: ithr_r=0.5136005: ithr_diff=0.4016626: tie_brk=0: };
       i_val {kwta=0.3839552: g_i=0.3839552: gp_g_i=0: g_i_orig=0.3839552: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0001464784;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[21] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.06630478: max=0.07537995: max_i=1: };
       i_thrs {cmpt=1: avg=0.381095: max=0.4734628: max_i=1: };
       acts {cmpt=1: avg=0.277931: max=0.7878527: max_i=1: };
       acts_p {cmpt=1: avg=0.277931: max=0.7878527: max_i=1: };
       acts_m {cmpt=1: avg=0.277931: max=0.7878527: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4734628: k1_ithr=0.3349111: ithr_r=0.3462083: ithr_diff=0.2926348: tie_brk=0: };
       i_val {kwta=0.4180421: g_i=0.4180421: gp_g_i=0: g_i_orig=0.4180421: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=4.708767e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[22] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.07359094: max=0.08358607: max_i=1: };
       i_thrs {cmpt=1: avg=0.4200605: max=0.4857968: max_i=1: };
       acts {cmpt=1: avg=0.3299578: max=0.8756351: max_i=1: };
       acts_p {cmpt=1: avg=0.3299578: max=0.8756351: max_i=1: };
       acts_m {cmpt=1: avg=0.3299578: max=0.8756351: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4857968: k1_ithr=0.3871924: ithr_r=0.2268688: ithr_diff=0.2029747: tie_brk=0: };
       i_val {kwta=0.446355: g_i=0.446355: gp_g_i=0: g_i_orig=0.446355: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=3.814697e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[23] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.07329046: max=0.08391818: max_i=1: };
       i_thrs {cmpt=1: avg=0.4403037: max=0.4876132: max_i=1: };
       acts {cmpt=1: avg=0.47784: max=0.8524034: max_i=1: };
       acts_p {cmpt=1: avg=0.47784: max=0.8524034: max_i=1: };
       acts_m {cmpt=1: avg=0.47784: max=0.8524034: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4876132: k1_ithr=0.4166489: ithr_r=0.1572786: ithr_diff=0.145534: tie_brk=0: };
       i_val {kwta=0.4592275: g_i=0.4592275: gp_g_i=0: g_i_orig=0.4592275: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=4.982948e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[24] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.0793004: max=0.09138715: max_i=2: };
       i_thrs {cmpt=1: avg=0.4874626: max=0.5936953: max_i=2: };
       acts {cmpt=1: avg=0.3775117: max=0.7780783: max_i=2: };
       acts_p {cmpt=1: avg=0.3775117: max=0.7780783: max_i=2: };
       acts_m {cmpt=1: avg=0.3775117: max=0.7780783: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.5936953: k1_ithr=0.4343462: ithr_r=0.3125242: ithr_diff=0.2684021: tie_brk=0: };
       i_val {kwta=0.5299557: g_i=0.5299557: gp_g_i=0: g_i_orig=0.5299557: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=1.502037e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[25] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.08075159: max=0.09217578: max_i=2: };
       i_thrs {cmpt=1: avg=0.4973836: max=0.6011319: max_i=2: };
       acts {cmpt=1: avg=0.4495577: max=0.7600268: max_i=2: };
       acts_p {cmpt=1: avg=0.4495577: max=0.7600268: max_i=2: };
       acts_m {cmpt=1: avg=0.4495577: max=0.7600268: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.6011319: k1_ithr=0.4455095: ithr_r=0.2995958: ithr_diff=0.2588823: tie_brk=0: };
       i_val {kwta=0.5388829: g_i=0.5388829: gp_g_i=0: g_i_orig=0.5388829: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=9.894371e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[26] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.0746195: max=0.09053946: max_i=1: };
       i_thrs {cmpt=1: avg=0.4445529: max=0.525372: max_i=1: };
       acts {cmpt=1: avg=0.3627388: max=0.8966971: max_i=1: };
       acts_p {cmpt=1: avg=0.3627388: max=0.8966971: max_i=1: };
       acts_m {cmpt=1: avg=0.3627388: max=0.8966971: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.525372: k1_ithr=0.4041435: ithr_r=0.2623366: ithr_diff=0.230748: tie_brk=0: };
       i_val {kwta=0.4768806: g_i=0.4768806: gp_g_i=0: g_i_orig=0.4768806: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=2.858043e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[27] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.06131728: max=0.0807099: max_i=1: };
       i_thrs {cmpt=1: avg=0.3598796: max=0.5053244: max_i=1: };
       acts {cmpt=1: avg=0.2971196: max=0.8913589: max_i=1: };
       acts_p {cmpt=1: avg=0.2971196: max=0.8913589: max_i=1: };
       acts_m {cmpt=1: avg=0.2971196: max=0.8913589: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.5053244: k1_ithr=0.2871573: ithr_r=0.5651704: ithr_diff=0.4317367: tie_brk=0: };
       i_val {kwta=0.4180576: g_i=0.4180576: gp_g_i=0: g_i_orig=0.4180576: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=9.834766e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[28] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04324953: max=0.05808702: max_i=1: };
       i_thrs {cmpt=1: avg=0.2243715: max=0.3356526: max_i=1: };
       acts {cmpt=1: avg=0.2993253: max=0.8979758: max_i=1: };
       acts_p {cmpt=1: avg=0.2993253: max=0.8979758: max_i=1: };
       acts_m {cmpt=1: avg=0.2993253: max=0.8979758: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3356526: k1_ithr=0.1687309: ithr_r=0.6877717: ithr_diff=0.497305: tie_brk=0: };
       i_val {kwta=0.2688839: g_i=0.2688839: gp_g_i=0: g_i_orig=0.2688839: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0001100302;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[29] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.01839805: max=0.02149821: max_i=1: };
       i_thrs {cmpt=1: avg=0.0379854: max=0.06123661: max_i=1: };
       acts {cmpt=1: avg=0.08730292: max=0.2618678: max_i=1: };
       acts_p {cmpt=1: avg=0.08730292: max=0.2618678: max_i=1: };
       acts_m {cmpt=1: avg=0.08730292: max=0.2618678: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.06123661: k1_ithr=0.0263598: ithr_r=0.8429049: ithr_diff=0.5695417: tie_brk=0: };
       i_val {kwta=0.04728588: g_i=0.04728588: gp_g_i=0: g_i_orig=0.04728588: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.02628314;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[30] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.06197899: max=0.07465046: max_i=1: };
       i_thrs {cmpt=1: avg=0.3454612: max=0.4598785: max_i=1: };
       acts {cmpt=1: avg=0.3247606: max=0.8684792: max_i=1: };
       acts_p {cmpt=1: avg=0.3247606: max=0.8684792: max_i=1: };
       acts_m {cmpt=1: avg=0.3247606: max=0.8684792: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4598785: k1_ithr=0.2882527: ithr_r=0.4671249: ithr_diff=0.3731982: tie_brk=0: };
       i_val {kwta=0.3912281: g_i=0.3912281: gp_g_i=0: g_i_orig=0.3912281: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0001005828;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[31] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.06092417: max=0.07008182: max_i=1: };
       i_thrs {cmpt=1: avg=0.3374055: max=0.4256137: max_i=1: };
       acts {cmpt=1: avg=0.3459842: max=0.831769: max_i=1: };
       acts_p {cmpt=1: avg=0.3459842: max=0.831769: max_i=1: };
       acts_m {cmpt=1: avg=0.3459842: max=0.831769: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4256137: k1_ithr=0.2933015: ithr_r=0.3723312: ithr_diff=0.310874: tie_brk=0: };
       i_val {kwta=0.3726888: g_i=0.3726888: gp_g_i=0: g_i_orig=0.3726888: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0002130717;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[32] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05989884: max=0.0657786: max_i=1: };
       i_thrs {cmpt=1: avg=0.3299862: max=0.3933395: max_i=1: };
       acts {cmpt=1: avg=0.3472884: max=0.7634066: max_i=1: };
       acts_p {cmpt=1: avg=0.3472884: max=0.7634066: max_i=1: };
       acts_m {cmpt=1: avg=0.3472884: max=0.7634066: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3933395: k1_ithr=0.2983096: ithr_r=0.2765411: ithr_diff=0.2415976: tie_brk=0: };
       i_val {kwta=0.3553275: g_i=0.3553275: gp_g_i=0: g_i_orig=0.3553275: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0003183782;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[33] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05804984: max=0.06729735: max_i=1: };
       i_thrs {cmpt=1: avg=0.3221706: max=0.3544508: max_i=1: };
       acts {cmpt=1: avg=0.3499069: max=0.8854356: max_i=1: };
       acts_p {cmpt=1: avg=0.3499069: max=0.8854356: max_i=1: };
       acts_m {cmpt=1: avg=0.3499069: max=0.8854356: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3544508: k1_ithr=0.3060304: ithr_r=0.1468852: ithr_diff=0.1366069: tie_brk=0: };
       i_val {kwta=0.3350827: g_i=0.3350827: gp_g_i=0: g_i_orig=0.3350827: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0003331751;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[34] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05999278: max=0.06590465: max_i=2: };
       i_thrs {cmpt=1: avg=0.3364974: max=0.3942849: max_i=2: };
       acts {cmpt=1: avg=0.4547226: max=0.7349118: max_i=2: };
       acts_p {cmpt=1: avg=0.4547226: max=0.7349118: max_i=2: };
       acts_m {cmpt=1: avg=0.4547226: max=0.7349118: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3942849: k1_ithr=0.3076037: ithr_r=0.2482616: ithr_diff=0.2198442: tie_brk=0: };
       i_val {kwta=0.3596124: g_i=0.3596124: gp_g_i=0: g_i_orig=0.3596124: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0002458692;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[35] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05980452: max=0.06546713: max_i=1: };
       i_thrs {cmpt=1: avg=0.3354844: max=0.3820784: max_i=2: };
       acts {cmpt=1: avg=0.4768337: max=0.756492: max_i=1: };
       acts_p {cmpt=1: avg=0.4768337: max=0.756492: max_i=1: };
       acts_m {cmpt=1: avg=0.4768337: max=0.756492: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3820784: k1_ithr=0.3121874: ithr_r=0.202022: ithr_diff=0.1829231: tie_brk=0: };
       i_val {kwta=0.354122: g_i=0.354122: gp_g_i=0: g_i_orig=0.354122: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.000223577;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[36] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05588473: max=0.06688765: max_i=1: };
       i_thrs {cmpt=1: avg=0.3059568: max=0.3522763: max_i=1: };
       acts {cmpt=1: avg=0.300228: max=0.8990336: max_i=1: };
       acts_p {cmpt=1: avg=0.300228: max=0.8990336: max_i=1: };
       acts_m {cmpt=1: avg=0.300228: max=0.8990336: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3522763: k1_ithr=0.282797: ithr_r=0.2196864: ithr_diff=0.1972295: tie_brk=0: };
       i_val {kwta=0.3244846: g_i=0.3244846: gp_g_i=0: g_i_orig=0.3244846: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=4.374981e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[37] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05375819: max=0.08004532: max_i=1: };
       i_thrs {cmpt=1: avg=0.3031864: max=0.50034: max_i=1: };
       acts {cmpt=1: avg=0.3082111: max=0.9246332: max_i=1: };
       acts_p {cmpt=1: avg=0.3082111: max=0.9246332: max_i=1: };
       acts_m {cmpt=1: avg=0.3082111: max=0.9246332: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.50034: k1_ithr=0.2046096: ithr_r=0.8941841: ithr_diff=0.5910589: tie_brk=0: };
       i_val {kwta=0.3820478: g_i=0.3820478: gp_g_i=0: g_i_orig=0.3820478: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=7.987022e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[38] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04595917: max=0.07688561: max_i=1: };
       i_thrs {cmpt=1: avg=0.2446938: max=0.4766421: max_i=1: };
       acts {cmpt=1: avg=0.313659: max=0.940977: max_i=1: };
       acts_p {cmpt=1: avg=0.313659: max=0.940977: max_i=1: };
       acts_m {cmpt=1: avg=0.313659: max=0.940977: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4766421: k1_ithr=0.1287197: ithr_r=1.309129: ithr_diff=0.7299448: tie_brk=0: };
       i_val {kwta=0.3374732: g_i=0.3374732: gp_g_i=0: g_i_orig=0.3374732: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=1.066923e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[39] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.01969904: max=0.03072462: max_i=1: };
       i_thrs {cmpt=1: avg=0.04774281: max=0.1304347: max_i=1: };
       acts {cmpt=1: avg=0.3049773: max=0.914932: max_i=1: };
       acts_p {cmpt=1: avg=0.3049773: max=0.914932: max_i=1: };
       acts_m {cmpt=1: avg=0.3049773: max=0.914932: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1304347: k1_ithr=0.006396873: ithr_r=3.015063: ithr_diff=0.9509572: tie_brk=0: };
       i_val {kwta=0.08081957: g_i=0.08081957: gp_g_i=0: g_i_orig=0.08081957: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.001234472;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[40] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03955111: max=0.04737916: max_i=1: };
       i_thrs {cmpt=1: avg=0.1966333: max=0.2553437: max_i=1: };
       acts {cmpt=1: avg=0.2786728: max=0.8212336: max_i=1: };
       acts_p {cmpt=1: avg=0.2786728: max=0.8212336: max_i=1: };
       acts_m {cmpt=1: avg=0.2786728: max=0.8212336: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2553437: k1_ithr=0.1672781: ithr_r=0.422953: ithr_diff=0.3448906: tie_brk=0: };
       i_val {kwta=0.2201175: g_i=0.2201175: gp_g_i=0: g_i_orig=0.2201175: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0007527471;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[41] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03748325: max=0.04473318: max_i=1: };
       i_thrs {cmpt=1: avg=0.1811244: max=0.2354988: max_i=1: };
       acts {cmpt=1: avg=0.2725837: max=0.8135539: max_i=1: };
       acts_p {cmpt=1: avg=0.2725837: max=0.8135539: max_i=1: };
       acts_m {cmpt=1: avg=0.2725837: max=0.8135539: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2354988: k1_ithr=0.1539371: ithr_r=0.4251617: ithr_diff=0.3463359: tie_brk=0: };
       i_val {kwta=0.2028742: g_i=0.2028742: gp_g_i=0: g_i_orig=0.2028742: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.001261115;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[42] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03802465: max=0.04751079: max_i=1: };
       i_thrs {cmpt=1: avg=0.1653954: max=0.1969625: max_i=1: };
       acts {cmpt=1: avg=0.311195: max=0.9316919: max_i=1: };
       acts_p {cmpt=1: avg=0.311195: max=0.9316919: max_i=1: };
       acts_m {cmpt=1: avg=0.311195: max=0.9316919: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1969625: k1_ithr=0.1496118: ithr_r=0.274969: ithr_diff=0.2404043: tie_brk=0: };
       i_val {kwta=0.1780222: g_i=0.1780222: gp_g_i=0: g_i_orig=0.1780222: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0001965165;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[43] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.0366458: max=0.04319376: max_i=1: };
       i_thrs {cmpt=1: avg=0.1564343: max=0.1687256: max_i=1: };
       acts {cmpt=1: avg=0.379353: max=0.9187013: max_i=1: };
       acts_p {cmpt=1: avg=0.379353: max=0.9187013: max_i=1: };
       acts_m {cmpt=1: avg=0.379353: max=0.9187013: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1687256: k1_ithr=0.1502887: ithr_r=0.1157157: ithr_diff=0.1092716: tie_brk=0: };
       i_val {kwta=0.1613508: g_i=0.1613508: gp_g_i=0: g_i_orig=0.1613508: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.005890906;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[44] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03471817: max=0.04180464: max_i=1: };
       i_thrs {cmpt=1: avg=0.1419581: max=0.1597909: max_i=2: };
       acts {cmpt=1: avg=0.4638766: max=0.9237648: max_i=1: };
       acts_p {cmpt=1: avg=0.4638766: max=0.9237648: max_i=1: };
       acts_m {cmpt=1: avg=0.4638766: max=0.9237648: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1597909: k1_ithr=0.1330417: ithr_r=0.1832034: ithr_diff=0.1674012: tie_brk=0: };
       i_val {kwta=0.1490912: g_i=0.1490912: gp_g_i=0: g_i_orig=0.1490912: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.008150518;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[45] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03242596: max=0.04013459: max_i=1: };
       i_thrs {cmpt=1: avg=0.1283644: max=0.1651319: max_i=2: };
       acts {cmpt=1: avg=0.5486895: max=0.9164726: max_i=1: };
       acts_p {cmpt=1: avg=0.5486895: max=0.9164726: max_i=1: };
       acts_m {cmpt=1: avg=0.5486895: max=0.9164726: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1651319: k1_ithr=0.1099807: ithr_r=0.4064393: ithr_diff=0.3339825: tie_brk=0: };
       i_val {kwta=0.1430714: g_i=0.1430714: gp_g_i=0: g_i_orig=0.1430714: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.004915714;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[46] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02891177: max=0.03393438: max_i=1: };
       i_thrs {cmpt=1: avg=0.1038675: max=0.1056618: max_i=2: };
       acts {cmpt=1: avg=0.3424594: max=0.9112948: max_i=1: };
       acts_p {cmpt=1: avg=0.3424594: max=0.9112948: max_i=1: };
       acts_m {cmpt=1: avg=0.3424594: max=0.9112948: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1056618: k1_ithr=0.1029704: ithr_r=0.02580266: ithr_diff=0.02547256: tie_brk=0: };
       i_val {kwta=0.1045852: g_i=0.1045852: gp_g_i=0: g_i_orig=0.1045852: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.008197643;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[47] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.0346935: max=0.05305029: max_i=1: };
       i_thrs {cmpt=1: avg=0.1442099: max=0.2499032: max_i=1: };
       acts {cmpt=1: avg=0.3180302: max=0.950125: max_i=1: };
       acts_p {cmpt=1: avg=0.3180302: max=0.950125: max_i=1: };
       acts_m {cmpt=1: avg=0.3180302: max=0.950125: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2499032: k1_ithr=0.0913633: ithr_r=1.00623: ithr_diff=0.6344053: tie_brk=0: };
       i_val {kwta=0.1864872: g_i=0.1864872: gp_g_i=0: g_i_orig=0.1864872: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0002222664;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[48] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04184636: max=0.07368161: max_i=1: };
       i_thrs {cmpt=1: avg=0.2138477: max=0.4526121: max_i=1: };
       acts {cmpt=1: avg=0.315322: max=0.9459661: max_i=1: };
       acts_p {cmpt=1: avg=0.315322: max=0.9459661: max_i=1: };
       acts_m {cmpt=1: avg=0.315322: max=0.9459661: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4526121: k1_ithr=0.09446557: ithr_r=1.5668: ithr_diff=0.791288: tie_brk=0: };
       i_val {kwta=0.3093535: g_i=0.3093535: gp_g_i=0: g_i_orig=0.3093535: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=1.490116e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[49] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02203639: max=0.03402634: max_i=1: };
       i_thrs {cmpt=1: avg=0.06527292: max=0.1551976: max_i=1: };
       acts {cmpt=1: avg=0.3064136: max=0.9192399: max_i=1: };
       acts_p {cmpt=1: avg=0.3064136: max=0.9192399: max_i=1: };
       acts_m {cmpt=1: avg=0.3064136: max=0.9192399: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1551976: k1_ithr=0.02031059: ithr_r=2.033557: ithr_diff=0.8691308: tie_brk=0: };
       i_val {kwta=0.1012428: g_i=0.1012428: gp_g_i=0: g_i_orig=0.1012428: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0008494854;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[50] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02987152: max=0.03545783: max_i=2: };
       i_thrs {cmpt=1: avg=0.1240364: max=0.1659337: max_i=2: };
       acts {cmpt=1: avg=0.2671223: max=0.7737461: max_i=2: };
       acts_p {cmpt=1: avg=0.2671223: max=0.7737461: max_i=2: };
       acts_m {cmpt=1: avg=0.2671223: max=0.7737461: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1659337: k1_ithr=0.1030877: ithr_r=0.4760082: ithr_diff=0.3787416: tie_brk=0: };
       i_val {kwta=0.1407953: g_i=0.1407953: gp_g_i=0: g_i_orig=0.1407953: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.004003525;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[51] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03335005: max=0.03902629: max_i=2: };
       i_thrs {cmpt=1: avg=0.1501254: max=0.1926972: max_i=2: };
       acts {cmpt=1: avg=0.4802595: max=0.7679805: max_i=2: };
       acts_p {cmpt=1: avg=0.4802595: max=0.7679805: max_i=2: };
       acts_m {cmpt=1: avg=0.4802595: max=0.7679805: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1926972: k1_ithr=0.1288394: ithr_r=0.4025531: ithr_diff=0.3313892: tie_brk=0: };
       i_val {kwta=0.1671541: g_i=0.1671541: gp_g_i=0: g_i_orig=0.1671541: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.004312396;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[52] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03264204: max=0.0424001: max_i=1: };
       i_thrs {cmpt=1: avg=0.1243509: max=0.1802177: max_i=2: };
       acts {cmpt=1: avg=0.5919379: max=0.9316058: max_i=1: };
       acts_p {cmpt=1: avg=0.5919379: max=0.9316058: max_i=1: };
       acts_m {cmpt=1: avg=0.5919379: max=0.9316058: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1802177: k1_ithr=0.09641745: ithr_r=0.6254784: ithr_diff=0.4649946: tie_brk=0: };
       i_val {kwta=0.1466976: g_i=0.1466976: gp_g_i=0: g_i_orig=0.1466976: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.001758873;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[53] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03445299: max=0.0448278: max_i=2: };
       i_thrs {cmpt=1: avg=0.1432089: max=0.2362085: max_i=2: };
       acts {cmpt=1: avg=0.5296571: max=0.9036452: max_i=2: };
       acts_p {cmpt=1: avg=0.5296571: max=0.9036452: max_i=2: };
       acts_m {cmpt=1: avg=0.5296571: max=0.9036452: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2362085: k1_ithr=0.09670908: ithr_r=0.8930076: ithr_diff=0.5905775: tie_brk=0: };
       i_val {kwta=0.1804087: g_i=0.1804087: gp_g_i=0: g_i_orig=0.1804087: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.003558874;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[54] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03350056: max=0.04637558: max_i=1: };
       i_thrs {cmpt=1: avg=0.1368255: max=0.2045308: max_i=1: };
       acts {cmpt=1: avg=0.5940977: max=0.9387376: max_i=1: };
       acts_p {cmpt=1: avg=0.5940977: max=0.9387376: max_i=1: };
       acts_m {cmpt=1: avg=0.5940977: max=0.9387376: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2045308: k1_ithr=0.1029729: ithr_r=0.6862531: ithr_diff=0.4965411: tie_brk=0: };
       i_val {kwta=0.1639076: g_i=0.1639076: gp_g_i=0: g_i_orig=0.1639076: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.001373649;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[55] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02667149: max=0.04843154: max_i=1: };
       i_thrs {cmpt=1: avg=0.0856934: max=0.2202083: max_i=1: };
       acts {cmpt=1: avg=0.3203137: max=0.9609412: max_i=1: };
       acts_p {cmpt=1: avg=0.3203137: max=0.9609412: max_i=1: };
       acts_m {cmpt=1: avg=0.3203137: max=0.9609412: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2202083: k1_ithr=0.01843595: ithr_r=2.480272: ithr_diff=0.9162795: tie_brk=0: };
       i_val {kwta=0.1394994: g_i=0.1394994: gp_g_i=0: g_i_orig=0.1394994: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0001183152;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[56] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02722804: max=0.05345595: max_i=1: };
       i_thrs {cmpt=1: avg=0.08887902: max=0.2454731: max_i=1: };
       acts {cmpt=1: avg=0.322012: max=0.9660359: max_i=1: };
       acts_p {cmpt=1: avg=0.322012: max=0.9660359: max_i=1: };
       acts_m {cmpt=1: avg=0.322012: max=0.9660359: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2454731: k1_ithr=0.01058198: ithr_r=3.144035: ithr_diff=0.9568915: tie_brk=0: };
       i_val {kwta=0.1515166: g_i=0.1515166: gp_g_i=0: g_i_orig=0.1515166: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=7.653236e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[57] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02867405: max=0.04993176: max_i=1: };
       i_thrs {cmpt=1: avg=0.1031422: max=0.2387486: max_i=1: };
       acts {cmpt=1: avg=0.3188123: max=0.9564371: max_i=1: };
       acts_p {cmpt=1: avg=0.3188123: max=0.9564371: max_i=1: };
       acts_m {cmpt=1: avg=0.3188123: max=0.9564371: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2387486: k1_ithr=0.03533903: ithr_r=1.910423: ithr_diff=0.8519822: tie_brk=0: };
       i_val {kwta=0.1573848: g_i=0.1573848: gp_g_i=0: g_i_orig=0.1573848: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0001155138;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[58] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03064162: max=0.04548336: max_i=1: };
       i_thrs {cmpt=1: avg=0.1298122: max=0.2411252: max_i=1: };
       acts {cmpt=1: avg=0.3229757: max=0.920977: max_i=1: };
       acts_p {cmpt=1: avg=0.3229757: max=0.920977: max_i=1: };
       acts_m {cmpt=1: avg=0.3229757: max=0.920977: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.2411252: k1_ithr=0.07415567: ithr_r=1.17915: ithr_diff=0.69246: tie_brk=0: };
       i_val {kwta=0.1743374: g_i=0.1743374: gp_g_i=0: g_i_orig=0.1743374: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.001506478;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[59] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02287163: max=0.03451904: max_i=1: };
       i_thrs {cmpt=1: avg=0.07153719: max=0.1588928: max_i=1: };
       acts {cmpt=1: avg=0.3060347: max=0.9155726: max_i=1: };
       acts_p {cmpt=1: avg=0.3060347: max=0.9155726: max_i=1: };
       acts_m {cmpt=1: avg=0.3060347: max=0.9155726: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1588928: k1_ithr=0.02785938: ithr_r=1.74106: ithr_diff=0.8246655: tie_brk=0: };
       i_val {kwta=0.1064794: g_i=0.1064794: gp_g_i=0: g_i_orig=0.1064794: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.0008782148;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[60] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03032339: max=0.0580343: max_i=1: };
       i_thrs {cmpt=1: avg=0.1274255: max=0.3352573: max_i=1: };
       acts {cmpt=1: avg=0.3173248: max=0.9519745: max_i=1: };
       acts_p {cmpt=1: avg=0.3173248: max=0.9519745: max_i=1: };
       acts_m {cmpt=1: avg=0.3173248: max=0.9519745: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3352573: k1_ithr=0.02350955: ithr_r=2.657492: ithr_diff=0.9298761: tie_brk=0: };
       i_val {kwta=0.2105582: g_i=0.2105582: gp_g_i=0: g_i_orig=0.2105582: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=5.966425e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[61] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03342059: max=0.06432103: max_i=1: };
       i_thrs {cmpt=1: avg=0.1506545: max=0.3824078: max_i=1: };
       acts {cmpt=1: avg=0.3175463: max=0.9526388: max_i=1: };
       acts_p {cmpt=1: avg=0.3175463: max=0.9526388: max_i=1: };
       acts_m {cmpt=1: avg=0.3175463: max=0.9526388: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3824078: k1_ithr=0.03477778: ithr_r=2.397509: ithr_diff=0.9090558: tie_brk=0: };
       i_val {kwta=0.2433558: g_i=0.2433558: gp_g_i=0: g_i_orig=0.2433558: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=3.510714e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[62] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03455713: max=0.07492085: max_i=1: };
       i_thrs {cmpt=1: avg=0.1395393: max=0.4029887: max_i=1: };
       acts {cmpt=1: avg=0.3228318: max=0.9684955: max_i=1: };
       acts_p {cmpt=1: avg=0.3228318: max=0.9684955: max_i=1: };
       acts_m {cmpt=1: avg=0.3228318: max=0.9684955: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4029887: k1_ithr=0.007814514: ithr_r=3.942926: ithr_diff=0.9806086: tie_brk=0: };
       i_val {kwta=0.244919: g_i=0.244919: gp_g_i=0: g_i_orig=0.244919: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=1.442432e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[63] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03536991: max=0.07390494: max_i=1: };
       i_thrs {cmpt=1: avg=0.1544177: max=0.4217172: max_i=1: };
       acts {cmpt=1: avg=0.3211415: max=0.9634243: max_i=1: };
       acts_p {cmpt=1: avg=0.3211415: max=0.9634243: max_i=1: };
       acts_m {cmpt=1: avg=0.3211415: max=0.9634243: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4217172: k1_ithr=0.02076791: ithr_r=3.010926: ithr_diff=0.950754: tie_brk=0: };
       i_val {kwta=0.2613375: g_i=0.2613375: gp_g_i=0: g_i_orig=0.2613375: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=1.472235e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[64] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03607736: max=0.08150385: max_i=1: };
       i_thrs {cmpt=1: avg=0.1632621: max=0.4893244: max_i=1: };
       acts {cmpt=1: avg=0.32154: max=0.96462: max_i=1: };
       acts_p {cmpt=1: avg=0.32154: max=0.96462: max_i=1: };
       acts_m {cmpt=1: avg=0.32154: max=0.96462: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.4893244: k1_ithr=0.0002308767: ithr_r=7.658897: ithr_diff=0.9995282: tie_brk=0: };
       i_val {kwta=0.293687: g_i=0.293687: gp_g_i=0: g_i_orig=0.293687: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=8.046627e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[65] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03634172: max=0.09869011: max_i=1: };
       i_thrs {cmpt=1: avg=0.1614934: max=0.6069673: max_i=1: };
       acts {cmpt=1: avg=0.3236261: max=0.9708783: max_i=1: };
       acts_p {cmpt=1: avg=0.3236261: max=0.9708783: max_i=1: };
       acts_m {cmpt=1: avg=0.3236261: max=0.9708783: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.6069673: k1_ithr=-0.06124357: ithr_r=0: ithr_diff=1.100901: tie_brk=0: };
       i_val {kwta=0.339683: g_i=0.339683: gp_g_i=0: g_i_orig=0.339683: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=2.264977e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[66] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04012149: max=0.1106386: max_i=1: };
       i_thrs {cmpt=1: avg=0.1817669: max=0.6723566: max_i=1: };
       acts {cmpt=1: avg=0.324257: max=0.9727709: max_i=1: };
       acts_p {cmpt=1: avg=0.324257: max=0.9727709: max_i=1: };
       acts_m {cmpt=1: avg=0.324257: max=0.9727709: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.6723566: k1_ithr=-0.06352795: ithr_r=0: ithr_diff=1.094486: tie_brk=0: };
       i_val {kwta=0.3780028: g_i=0.3780028: gp_g_i=0: g_i_orig=0.3780028: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=9.536743e-07;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[67] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03486658: max=0.09107004: max_i=1: };
       i_thrs {cmpt=1: avg=0.1614994: max=0.5830253: max_i=1: };
       acts {cmpt=1: avg=0.3222002: max=0.9666006: max_i=1: };
       acts_p {cmpt=1: avg=0.3222002: max=0.9666006: max_i=1: };
       acts_m {cmpt=1: avg=0.3222002: max=0.9666006: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.5830253: k1_ithr=-0.04926358: ithr_r=0: ithr_diff=1.084496: tie_brk=0: };
       i_val {kwta=0.3301098: g_i=0.3301098: gp_g_i=0: g_i_orig=0.3301098: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=3.695488e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[68] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.02847145: max=0.05770416: max_i=1: };
       i_thrs {cmpt=1: avg=0.1135359: max=0.3327813: max_i=1: };
       acts {cmpt=1: avg=0.3185067: max=0.9555201: max_i=1: };
       acts_p {cmpt=1: avg=0.3185067: max=0.9555201: max_i=1: };
       acts_m {cmpt=1: avg=0.3185067: max=0.9555201: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.3327813: k1_ithr=0.003913162: ithr_r=4.44314: ithr_diff=0.988241: tie_brk=0: };
       i_val {kwta=0.201234: g_i=0.201234: gp_g_i=0: g_i_orig=0.201234: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=5.859137e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[69] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.01838056: max=0.03053567: max_i=1: };
       i_thrs {cmpt=1: avg=0.03785424: max=0.1290176: max_i=1: };
       acts {cmpt=1: avg=0.3083663: max=0.9250987: max_i=1: };
       acts_p {cmpt=1: avg=0.3083663: max=0.9250987: max_i=1: };
       acts_m {cmpt=1: avg=0.3083663: max=0.9250987: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.1290176: k1_ithr=-0.007727422: ithr_r=0: ithr_diff=1.059894: tie_brk=0: };
       i_val {kwta=0.07431956: g_i=0.07431956: gp_g_i=0: g_i_orig=0.07431956: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.001045704;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[70] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03920681: max=0.09593732: max_i=1: };
       i_thrs {cmpt=1: avg=0.1940511: max=0.61953: max_i=1: };
       acts {cmpt=1: avg=0.3214998: max=0.9644995: max_i=1: };
       acts_p {cmpt=1: avg=0.3214998: max=0.9644995: max_i=1: };
       acts_m {cmpt=1: avg=0.3214998: max=0.9644995: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.61953: k1_ithr=-0.01868829: ithr_r=0: ithr_diff=1.030165: tie_brk=0: };
       i_val {kwta=0.3642427: g_i=0.3642427: gp_g_i=0: g_i_orig=0.3642427: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=2.264977e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[71] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04170598: max=0.09476394: max_i=1: };
       i_thrs {cmpt=1: avg=0.2127949: max=0.6107296: max_i=1: };
       acts {cmpt=1: avg=0.3205586: max=0.9616758: max_i=1: };
       acts_p {cmpt=1: avg=0.3205586: max=0.9616758: max_i=1: };
       acts_m {cmpt=1: avg=0.3205586: max=0.9616758: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.6107296: k1_ithr=0.01382757: ithr_r=3.78799: ithr_diff=0.9773589: tie_brk=0: };
       i_val {kwta=0.3719688: g_i=0.3719688: gp_g_i=0: g_i_orig=0.3719688: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=2.264977e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[72] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03848184: max=0.0923292: max_i=1: };
       i_thrs {cmpt=1: avg=0.164633: max=0.5675089: max_i=1: };
       acts {cmpt=1: avg=0.322823: max=0.968469: max_i=1: };
       acts_p {cmpt=1: avg=0.322823: max=0.968469: max_i=1: };
       acts_m {cmpt=1: avg=0.322823: max=0.968469: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.5675089: k1_ithr=-0.03680491: ithr_r=0: ithr_diff=1.064853: tie_brk=0: };
       i_val {kwta=0.3257834: g_i=0.3257834: gp_g_i=0: g_i_orig=0.3257834: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=3.516674e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[73] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.03813126: max=0.09446755: max_i=1: };
       i_thrs {cmpt=1: avg=0.1717013: max=0.565657: max_i=1: };
       acts {cmpt=1: avg=0.3231787: max=0.9695362: max_i=1: };
       acts_p {cmpt=1: avg=0.3231787: max=0.9695362: max_i=1: };
       acts_m {cmpt=1: avg=0.3231787: max=0.9695362: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.565657: k1_ithr=-0.02527658: ithr_r=0: ithr_diff=1.044685: tie_brk=0: };
       i_val {kwta=0.3292836: g_i=0.3292836: gp_g_i=0: g_i_orig=0.3292836: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=2.980232e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[74] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04054683: max=0.09850953: max_i=1: };
       i_thrs {cmpt=1: avg=0.1953054: max=0.612434: max_i=1: };
       acts {cmpt=1: avg=0.3223847: max=0.967154: max_i=1: };
       acts_p {cmpt=1: avg=0.3223847: max=0.967154: max_i=1: };
       acts_m {cmpt=1: avg=0.3223847: max=0.967154: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.612434: k1_ithr=-0.01325888: ithr_r=0: ithr_diff=1.021649: tie_brk=0: };
       i_val {kwta=0.3621568: g_i=0.3621568: gp_g_i=0: g_i_orig=0.3621568: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=1.907349e-06;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[75] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.04195906: max=0.1169829: max_i=1: };
       i_thrs {cmpt=1: avg=0.20413: max=0.7456831: max_i=1: };
       acts {cmpt=1: avg=0.3236482: max=0.9709445: max_i=1: };
       acts_p {cmpt=1: avg=0.3236482: max=0.9709445: max_i=1: };
       acts_m {cmpt=1: avg=0.3236482: max=0.9709445: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.7456831: k1_ithr=-0.0666465: ithr_r=0: ithr_diff=1.089376: tie_brk=0: };
       i_val {kwta=0.4207513: g_i=0.4207513: gp_g_i=0: g_i_orig=0.4207513: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=4.768372e-07;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[76] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05633271: max=0.1526255: max_i=1: };
       i_thrs {cmpt=1: avg=0.3052066: max=0.992825: max_i=1: };
       acts {cmpt=1: avg=0.323622: max=0.970866: max_i=1: };
       acts_p {cmpt=1: avg=0.323622: max=0.970866: max_i=1: };
       acts_m {cmpt=1: avg=0.323622: max=0.970866: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.992825: k1_ithr=-0.03860262: ithr_r=0: ithr_diff=1.038882: tie_brk=0: };
       i_val {kwta=0.580254: g_i=0.580254: gp_g_i=0: g_i_orig=0.580254: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[77] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.05885606: max=0.1568279: max_i=1: };
       i_thrs {cmpt=1: avg=0.3414204: max=1.076209: max_i=1: };
       acts {cmpt=1: avg=0.3224038: max=0.9672115: max_i=1: };
       acts_p {cmpt=1: avg=0.3224038: max=0.9672115: max_i=1: };
       acts_m {cmpt=1: avg=0.3224038: max=0.9672115: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=1.076209: k1_ithr=-0.02597389: ithr_r=0: ithr_diff=1.024135: tie_brk=0: };
       i_val {kwta=0.6353359: g_i=0.6353359: gp_g_i=0: g_i_orig=0.6353359: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[78] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.0293351: max=0.07362613: max_i=1: };
       i_thrs {cmpt=1: avg=0.1200132: max=0.452196: max_i=1: };
       acts {cmpt=1: avg=0.3217476: max=0.9652427: max_i=1: };
       acts_p {cmpt=1: avg=0.3217476: max=0.9652427: max_i=1: };
       acts_m {cmpt=1: avg=0.3217476: max=0.9652427: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.452196: k1_ithr=-0.04607814: ithr_r=0: ithr_diff=1.101899: tie_brk=0: };
       i_val {kwta=0.2528864: g_i=0.2528864: gp_g_i=0: g_i_orig=0.2528864: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=1.555681e-05;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[79] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0.01437302: max=0.0223382: max_i=1: };
       i_thrs {cmpt=1: avg=0.007797664: max=0.06753654: max_i=1: };
       acts {cmpt=1: avg=0.2863513: max=0.8590538: max_i=1: };
       acts_p {cmpt=1: avg=0.2863513: max=0.8590538: max_i=1: };
       acts_m {cmpt=1: avg=0.2863513: max=0.8590538: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=0.06753654: k1_ithr=-0.02207177: ithr_r=0: ithr_diff=1.326812: tie_brk=0: };
       i_val {kwta=0.03169321: g_i=0.03169321: gp_g_i=0: g_i_orig=0.03169321: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0.006600559;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$87$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=10.11949: max=0.1568279: max_i=77: };
     i_thrs {cmpt=1: avg=49.50919: max=1.076209: max_i=77: };
     acts {cmpt=1: avg=0.3492557: max=0.9727709: max_i=66: };
     acts_p {cmpt=1: avg=0.3492557: max=0.9727709: max_i=66: };
     acts_m {cmpt=1: avg=0.3492557: max=0.9727709: max_i=66: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=80: pct=0.3333333: pct_c=0.6666666: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.681233: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.3333333: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.02628314;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[1]$89$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[3] {
     name="Hidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[4]$90$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$91$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[3]$92$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[4].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$87$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     i_thrs {cmpt=1: avg=-0.09999999: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1591123: i_kwta_pt=-0.299045: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$93$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[4] {
     name="Output";
     flags=;
     layer_type=TARGET;
     pos {x=0: y=10: z=1: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[3]$94$;
       spec {type=FullPrjnSpec: spec=$91$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$92$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[3].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$87$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     i_thrs {cmpt=1: avg=-0.09999999: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.04: pct_c=0.96: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.02651872: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$88$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=MANUAL_POS;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=60;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=82;
   cur_cnt_err=0;
   train_time {name="TimeUsed_0": start={usr=1651: sys=298: tot=3483257014: }: end={usr=8263: sys=154: tot=1729631666: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="TimeUsed_1": start={usr=1651: sys=298: tot=3483257014: }: end={usr=8263: sys=154: tot=1729631666: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="TimeUsed_3": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="TimeUsed_4": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="TimeUsed_5": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="TimeUsed_6": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="TimeUsed_7": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    log_timing=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=1090;
   n_cons=1250;
   max_size {x=51: y=40: z=2: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=PLUS_PHASE;
   nothing_phase=0;
   phase_no=1;
   phase_max=2;
   ct_cycle=120;
   cycle_max=60;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=1;
    m_sum=41;
    m_nrm=0.02439024;
    do_s=0;
   };
   minus_cycles=60;
   avg_cycles=0;
   avg_cycles_sum=1950;
   avg_cycles_n=82;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0.01376147;
   send_pct_n=15;
   send_pct_tot=1090;
   avg_send_pct=0;
   avg_send_pct_sum=65.63804;
   avg_send_pct_n=3945;
   maxda_stopcrit=0.005;
   maxda=0.02628314;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=82;
  };
 };
};

// ta_Dump File v2.0
taPluginBase_List .plugin_deps { 
  taPluginBase_List @.plugin_deps = [1] {
    taPluginDep @[0] { };
  };
};
taPluginBase_List .plugin_deps {
 name=;
 el_typ=taPluginDep;
 el_def=0;
 taPluginDep @[0] {
  name="AudioProc";
  desc="Audio processing for tacss";
  unique_id="audioproc.plugins.brad-aisa.com";
  version="1.0.0.0";
  url=;
 };
};
LeabraProject .projects[0] { 
  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [1] {
	EditMbrItem @[0] { };
      };

      EditMthItem_Group @.mths = [5] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [7] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	};
      };
    };
    DataTable_Group @.gp[2] = [3] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [2] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [3] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [0] {
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [8] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  AssignExpr @[0] { };
	  NetCounterInit @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[4] { };
	  NetDataLoop @[5] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  CodeBlock @[6] { 
	    ProgEl_List @.prog_code = [3] {
	      ProgramCall @[0] { };
	      OtherProgramVar @[1] { };
	      WhileLoop @[2] { 
		ProgEl_List @.loop_code = [4] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  ProgramCall @[2] { };
		  OtherProgramVar @[3] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	  If @[9] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      If @[1] { 
		ProgEl_List @.true_code = [2] {
		  MethodCall @[0] { };
		  MethodCall @[1] { };
		};
	      };
	    };
	  };
	  MethodCall @[10] { };
	  ProgramCall @[11] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [8] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[3] { };
	  If @[4] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  ProgramCall @[6] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[7] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [6] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	      LayerWriterEl @[5] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[9] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [1] { 
      Program @[0] { 
	ProgObjList @.objs = [15] {
	  InputBlockSet @[0] { 
	    SignalProcBlock_List @.blocks = [2] {
	      StimGen @[0] { 
		StimChan_List @.chans = [2] {
		  ToneChan @[0] { };
		  NoiseChan @[1] { };
		};
	      };
	      FileInput @[1] { };
	    };
	  };
	  SignalMonBlock @[1] { };
	  ListenerBlock @[2] { };
	  GammatoneBlock @[3] { };
	  TemporalWindowBlock @[4] { };
	  SignalMonBlock @[5] { };
	  AGCBlock @[6] { };
	  SignalMonBlock @[7] { };
	  SignalMonBlock @[8] { };
	  HarmonicSieveBlock @[9] { };
	  SignalMonBlock @[10] { };
	  LogLinearBlock @[11] { };
	  SignalMonBlock @[12] { };
	  ANBlock @[13] { 
	    ANVal_List @.val_list = [1] {
	      ANVal @[0] { };
	    };
	  };
	  SignalMonBlock @[14] { };
	};

	ProgVar_List @.vars = [18] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { };
	  If @[1] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [3] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [1] {
		    ScaleRange @[0] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [2] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [4] {
	LeabraUnitSpec @[0] { };
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { };
	  };
	};
      };

      Layer_Group @.layers = [6] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [400] {
	  };
	};
	LeabraLayer @[1] { 
	  Unit_Group @.units = [400] {
	  };
	};
	LeabraLayer @[2] { 
	  Unit_Group @.units = [400] {
	  };
	};
	LeabraLayer @[3] { 
	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [3] { 
	    };
	    LeabraUnit_Group @.gp[1] = [3] { 
	    };
	    LeabraUnit_Group @.gp[2] = [3] { 
	    };
	    LeabraUnit_Group @.gp[3] = [3] { 
	    };
	    LeabraUnit_Group @.gp[4] = [3] { 
	    };
	    LeabraUnit_Group @.gp[5] = [3] { 
	    };
	    LeabraUnit_Group @.gp[6] = [3] { 
	    };
	    LeabraUnit_Group @.gp[7] = [3] { 
	    };
	    LeabraUnit_Group @.gp[8] = [3] { 
	    };
	    LeabraUnit_Group @.gp[9] = [3] { 
	    };
	    LeabraUnit_Group @.gp[10] = [3] { 
	    };
	    LeabraUnit_Group @.gp[11] = [3] { 
	    };
	    LeabraUnit_Group @.gp[12] = [3] { 
	    };
	    LeabraUnit_Group @.gp[13] = [3] { 
	    };
	    LeabraUnit_Group @.gp[14] = [3] { 
	    };
	    LeabraUnit_Group @.gp[15] = [3] { 
	    };
	    LeabraUnit_Group @.gp[16] = [3] { 
	    };
	    LeabraUnit_Group @.gp[17] = [3] { 
	    };
	    LeabraUnit_Group @.gp[18] = [3] { 
	    };
	    LeabraUnit_Group @.gp[19] = [3] { 
	    };
	    LeabraUnit_Group @.gp[20] = [3] { 
	    };
	    LeabraUnit_Group @.gp[21] = [3] { 
	    };
	    LeabraUnit_Group @.gp[22] = [3] { 
	    };
	    LeabraUnit_Group @.gp[23] = [3] { 
	    };
	    LeabraUnit_Group @.gp[24] = [3] { 
	    };
	    LeabraUnit_Group @.gp[25] = [3] { 
	    };
	    LeabraUnit_Group @.gp[26] = [3] { 
	    };
	    LeabraUnit_Group @.gp[27] = [3] { 
	    };
	    LeabraUnit_Group @.gp[28] = [3] { 
	    };
	    LeabraUnit_Group @.gp[29] = [3] { 
	    };
	    LeabraUnit_Group @.gp[30] = [3] { 
	    };
	    LeabraUnit_Group @.gp[31] = [3] { 
	    };
	    LeabraUnit_Group @.gp[32] = [3] { 
	    };
	    LeabraUnit_Group @.gp[33] = [3] { 
	    };
	    LeabraUnit_Group @.gp[34] = [3] { 
	    };
	    LeabraUnit_Group @.gp[35] = [3] { 
	    };
	    LeabraUnit_Group @.gp[36] = [3] { 
	    };
	    LeabraUnit_Group @.gp[37] = [3] { 
	    };
	    LeabraUnit_Group @.gp[38] = [3] { 
	    };
	    LeabraUnit_Group @.gp[39] = [3] { 
	    };
	    LeabraUnit_Group @.gp[40] = [3] { 
	    };
	    LeabraUnit_Group @.gp[41] = [3] { 
	    };
	    LeabraUnit_Group @.gp[42] = [3] { 
	    };
	    LeabraUnit_Group @.gp[43] = [3] { 
	    };
	    LeabraUnit_Group @.gp[44] = [3] { 
	    };
	    LeabraUnit_Group @.gp[45] = [3] { 
	    };
	    LeabraUnit_Group @.gp[46] = [3] { 
	    };
	    LeabraUnit_Group @.gp[47] = [3] { 
	    };
	    LeabraUnit_Group @.gp[48] = [3] { 
	    };
	    LeabraUnit_Group @.gp[49] = [3] { 
	    };
	    LeabraUnit_Group @.gp[50] = [3] { 
	    };
	    LeabraUnit_Group @.gp[51] = [3] { 
	    };
	    LeabraUnit_Group @.gp[52] = [3] { 
	    };
	    LeabraUnit_Group @.gp[53] = [3] { 
	    };
	    LeabraUnit_Group @.gp[54] = [3] { 
	    };
	    LeabraUnit_Group @.gp[55] = [3] { 
	    };
	    LeabraUnit_Group @.gp[56] = [3] { 
	    };
	    LeabraUnit_Group @.gp[57] = [3] { 
	    };
	    LeabraUnit_Group @.gp[58] = [3] { 
	    };
	    LeabraUnit_Group @.gp[59] = [3] { 
	    };
	    LeabraUnit_Group @.gp[60] = [3] { 
	    };
	    LeabraUnit_Group @.gp[61] = [3] { 
	    };
	    LeabraUnit_Group @.gp[62] = [3] { 
	    };
	    LeabraUnit_Group @.gp[63] = [3] { 
	    };
	    LeabraUnit_Group @.gp[64] = [3] { 
	    };
	    LeabraUnit_Group @.gp[65] = [3] { 
	    };
	    LeabraUnit_Group @.gp[66] = [3] { 
	    };
	    LeabraUnit_Group @.gp[67] = [3] { 
	    };
	    LeabraUnit_Group @.gp[68] = [3] { 
	    };
	    LeabraUnit_Group @.gp[69] = [3] { 
	    };
	    LeabraUnit_Group @.gp[70] = [3] { 
	    };
	    LeabraUnit_Group @.gp[71] = [3] { 
	    };
	    LeabraUnit_Group @.gp[72] = [3] { 
	    };
	    LeabraUnit_Group @.gp[73] = [3] { 
	    };
	    LeabraUnit_Group @.gp[74] = [3] { 
	    };
	    LeabraUnit_Group @.gp[75] = [3] { 
	    };
	    LeabraUnit_Group @.gp[76] = [3] { 
	    };
	    LeabraUnit_Group @.gp[77] = [3] { 
	    };
	    LeabraUnit_Group @.gp[78] = [3] { 
	    };
	    LeabraUnit_Group @.gp[79] = [3] { 
	    };
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[5] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="harmonics";
 desc=;
 tags=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_0";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraAll_Std step prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=.projects[0].programs.gp[0]$0$;
     mbr=Program_Group::step_prog;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Build";
     desc=" Build the network units and Connect them (calls BuildLayers/Units/Prjns and Connect)";
     base=.projects[0].networks[0]$1$;
     mth=Network::Build;
    };
    EditMthItem @[1] {
     label="Train Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][1]$2$;
     mth=Program::Init;
    };
    EditMthItem @[2] {
     label="Run";
     desc=" run the program";
     base=$2$;
     mth=Program::Run;
    };
    EditMthItem @[3] {
     label="Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$2$;
     mth=Program::Step;
    };
    EditMthItem @[4] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$2$;
     mth=Program::Stop;
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="StdInputData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1] ;      };
     };
     float_Data @[1] {
      name="MGN_pri";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;40;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10 40 1] 0.09539102;0.030310337;0.0019037655;0.0015928448;0.0010289926;0.0013500553;0.0052507832;0.010773751;0.015810521;0.040196151;0.12747869;0.037817735;0.0034042769;0.0022239422;0.0016896536;0.0023102921;0.0069161933;0.017972197;0.035922628;0.074204475;0.16010602;0.047521755;0.0053508952;0.002343029;0.0015355363;0.0022961609;0.0086194361;0.026843615;0.061545696;0.11572252;0.185681;0.059242737;0.0069007883;0.002066486;0.0014009746;0.001272816;0.0071464977;0.027292937;0.069143675;0.12805624;0.19136925;0.069413662;0.0076545668;0.0014369152;0.0013176643;0.00074548263;0.0043016397;0.017480047;0.047872595;0.091193691;0.1654582;0.073361345;0.0080088433;0.0012609372;0.0013985506;0.00095179776;0.002373535;0.0083040344;0.023962572;0.043474477;0.11094536;0.068349324;0.0075766263;0.0014040531;0.0011113373;0.00083780295;0.00088139781;0.0036003841;0.013063401;0.018600564;0.064605564;0.056557484;0.0057804696;0.0013248655;0.00080376206;0.00082626054;0.0010374287;0.0026645027;0.0081761563;0.011183872;0.09085992;0.043625072;0.0053559109;0.0017631196;0.0010431139;0.00071963866;0.0011252743;0.0027252152;0.0053921831;0.009150167;0.14448652;0.050434172;0.0076694987;0.0023941426;0.0013156834;0.0010724149;0.0016977463;0.0033209969;0.0074491198;0.012377442;0.23982011;0.071760111;0.0083470913;0.0022486362;0.0015964098;0.0011561691;0.0013651577;0.0035785788;0.0096492637;0.016119383;0.32040143;0.089145191;0.0070603839;0.0029940982;0.0023925055;0.001305853;0.0016046063;0.0023436435;0.0059810183;0.0090550901;0.30145171;0.098981559;0.006669438;0.0040027206;0.0025977371;0.0010900137;0.001174163;0.00098982977;0.003407439;0.01227109;0.18027842;0.08700148;0.0070369248;0.0032873582;0.0031848862;0.001006922;0.0013300579;0.00088187394;0.003593365;0.014256916;0.17173877;0.059738938;0.0061686006;0.0046463795;0.0033439603;0.0010381073;0.0017519182;0.0026555199;0.0093866987;0.017259153;0.26815379;0.038854286;0.0057092491;0.0042173765;0.0034488251;0.00079194346;0.0017536716;0.0028801213;0.01026983;0.015649023;0.31373328;0.04950304;0.0045744632;0.0041960138;0.0030787354;0.00066864386;0.0014936542;0.0016420392;0.0065783542;0.0098192235;0.22007756;0.047763329;0.0042975703;0.0039808573;0.0024229479;0.00063797797;0.0016668307;0.0015629386;0.006214086;0.01367854;0.11526367;0.033562578;0.0036722019;0.0042513814;0.0020032502;0.00049273099;0.0013113236;0.00057525386;0.0032677019;0.010959149;0.08115916;0.027389163;0.0038049365;0.0041345172;0.0019332004;0.00036794328;0.0011712798;0.0008963783;0.004195896;0.0089244619;0.050646145;0.027000852;0.0028850245;0.0039410228;0.0019409925;0.00035314949;0.0010760685;0.00068667682;0.0039086081;0.0088202525;0.029001014;0.015961137;0.0031235679;0.0037899902;0.0018156474;0.00025742396;0.00095306465;0.00049622654;0.0026188486;0.00523671;0.016633773;0.0085691204;0.0026774856;0.0036963639;0.0016832938;0.00020388034;0.00083585986;0.00033087569;0.0021933157;0.0049130931;0.014135174;0.0067041288;0.0023618178;0.0038237341;0.001644165;0.00026516573;0.00093854911;0.00036455013;0.0019648015;0.0037470839;0.013107635;0.0085576447;0.0019807604;0.0038579027;0.001570035;0.00028916253;0.00099489489;0.00037639492;0.0021907273;0.0043655541;0.012075703;0.0087164436;0.0019803604;0.0040373979;0.0015344658;0.00029629213;0.0009965318;0.00046100255;0.0024977922;0.0047207358;0.015271293;0.0087645296;0.0026029577;0.0042343643;0.0013708693;0.00033453046;0.0012783306;0.00036918165;0.0023001921;0.005621952;0.011113884;0.0092333341;0.0032614314;0.0042209332;0.0011554104;0.00034798356;0.0013105876;0.00032915946;0.0020835889;0.0041455785;0.013886292;0.010467855;0.0036923843;0.0029995944;0.00081243203;0.00030557791;0.0010677952;0.00028596775;0.0017662492;0.0031790852;0.014467557;0.013471235;0.0023357393;0.0021545596;0.00055268948;0.00029426519;0.001035625;0.00029335721;0.0016014318;0.003276394;0.03277595;0.02959156;0.0033691158;0.0027641377;0.00036849585;0.00029306905;0.0010466332;0.00024438204;0.0012877858;0.002277588;0.074639291;0.031032134;0.0037281041;0.0025313222;0.00045357452;0.00029415922;0.00093811558;0.00023420244;0.0011978972;0.0018515965;0.048062883;0.02577867;0.0029256702;0.0026917311;0.0004450093;0.00030143387;0.00086429127;0.00021844365;0.0010087515;0.0015360474;0.018174844;0.013779645;0.0022496195;0.003248173;0.00054971187;0.00029905461;0.00086054852;0.00019722365;0.0008461494;0.0013807704;0.0089928797;0.0089107929;0.0026236956;0.0032375827;0.00071738986;0.00035415633;0.000755788;0.0002119586;0.00092629954;0.0020938499;0.009918387;0.011521215;0.0022573767;0.0028317543;0.0008763111;0.0004030579;0.0008672566;0.00021324329;0.0010175027;0.0025088659;0.035200085;0.036375664;0.0028691271;0.0028602132;0.000824872;0.00039620133;0.00081474986;0.00015040507;0.00077509094;0.0022260901;0.078972995;0.062993743;0.003546464;0.0039423364;0.00091914751;0.00053045736;0.00096375658;0.00011705978;0.0010057534;0.0040996675;0.041933402;0.032050911;0.0028589417;0.0035865982;0.00065733847;0.00060259568;0.00079494383;0.00010891702;0.00071112043;0.0027755937;0.041760881;0.034494381;0.0035716253;0.0043607103;0.00058562175;0.00047093391;0.00073933322;0.00010868895;0.00053537043;0.0021747313;      };
     };
     float_Data @[2] {
      name="MGN_pri_llb";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;40;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10 40 1] 0.78049427;0.67677039;0.4263958;0.41063997;0.37148547;0.39643684;0.51970929;0.585123;0.61997354;0.70445347;0.80672973;0.69679219;0.47898152;0.44083789;0.41635743;0.44504419;0.54463488;0.6314218;0.69422811;0.75992131;0.82734853;0.71745825;0.51989853;0.4455575;0.40770379;0.44448909;0.56455404;0.66772175;0.74294263;0.80012709;0.84075683;0.73740458;0.54291362;0.43419394;0.39940587;0.39110646;0.54759872;0.66922373;0.75347489;0.80929023;0.84348696;0.75173998;0.55229318;0.40131867;0.39385891;0.34270477;0.5016697;0.62890959;0.72021121;0.77857441;0.83032364;0.75674462;0.55638671;0.38949826;0.3992492;0.36481044;0.44787002;0.5615651;0.65759587;0.7115472;0.79416132;0.75034189;0.55136716;0.39922538;0.37845078;0.35326818;0.35824013;0.48595253;0.60270482;0.63473302;0.74523646;0.7332077;0.52688533;0.39397296;0.34913445;0.35201302;0.37298727;0.45871663;0.5603075;0.58870512;0.77609116;0.70971727;0.51998329;0.41982922;0.37271869;0.3395125;0.38034141;0.46075511;0.52264404;0.57054609;0.81806093;0.72284001;0.55246943;0.44751009;0.3937228;0.37560591;0.4175528;0.47864416;0.55188161;0.59787983;0.86390638;0.75474793;0.56012946;0.44183704;0.41122136;0.38240972;0.39782572;0.48540294;0.57529604;0.62177932;0.89011651;0.77437609;0.54498225;0.46774259;0.44782731;0.39342496;0.41244769;0.44710732;0.53202122;0.56960106;0.88460064;0.78384608;0.53982824;0.49401119;0.4552736;0.37707862;0.38418937;0.3691217;0.48111558;0.59709907;0.83808517;0.77217364;0.54468113;0.47619697;0.47371081;0.3699044;0.39546898;0.35867295;0.48592257;0.61067039;0.83369446;0.73815924;0.53276521;0.50750273;0.47812065;0.37266409;0.42039466;0.45841107;0.57279998;0.6279608;0.87401026;0.69923878;0.52576363;0.49873766;0.48091444;0.34817493;0.42048514;0.46575716;0.58093542;0.61909992;0.88821369;0.72115391;0.50571388;0.49827823;0.47064385;0.33286253;0.4059647;0.41491809;0.54063421;0.57693118;0.85613352;0.71791697;0.50006443;0.49351564;0.44897127;0.3286148;0.41588998;0.41045117;0.53547996;0.60692334;0.79761618;0.68599218;0.48583603;0.49946427;0.43176112;0.30524063;0.39418551;0.32001734;0.4773269;0.58686858;0.76587558;0.66760117;0.48904872;0.49694231;0.42854062;0.27881798;0.38396692;0.36014894;0.49994823;0.56828636;0.72321075;0.6663093;0.46400753;0.49260569;0.42890453;0.275105;0.37629589;0.33603665;0.49353102;0.56722361;0.67276639;0.6187439;0.47119531;0.48907015;0.42286447;0.24649882;0.36531308;0.30664659;0.45729938;0.52005225;0.62246996;0.56246734;0.45725283;0.48680687;0.41601625;0.22540013;0.3534404;0.26997676;0.44125581;0.51428074;0.60774297;0.54026026;0.44590268;0.4898721;0.41388822;0.24917977;0.36392447;0.27874598;0.43130115;0.48976788;0.60091448;0.5623461;0.42998299;0.49067703;0.40971407;0.25701824;0.36919951;0.28163901;0.441149;0.50358993;0.59349531;0.56400967;0.42996469;0.49479166;0.4076407;0.25922203;0.36934829;0.29998478;0.45301732;0.51066709;0.61473769;0.56450742;0.45469865;0.4991014;0.39744043;0.2702044;0.39187995;0.2798883;0.4455606;0.52647489;0.5859856;0.56922197;0.47510305;0.49881396;0.38196969;0.27377167;0.39413473;0.26950622;0.43661222;0.49891195;0.60613573;0.580576;0.48633194;0.46790853;0.3501052;0.26201406;0.3755976;0.25677928;0.42166224;0.47489467;0.60984594;0.6033988;0.44489813;0.43797016;0.31524983;0.25860086;0.37282979;0.25908756;0.41279903;0.4776226;0.68383759;0.67459893;0.47804216;0.46051207;0.27857304;0.25823236;0.37378645;0.24256103;0.39307722;0.44472238;0.75829846;0.67889977;0.487203;0.45255122;0.29736805;0.25856829;0.36388269;0.23871143;0.38653052;0.42598721;0.71847391;0.66211826;0.46527329;0.45811042;0.29564309;0.26077858;0.35646677;0.23240893;0.37098145;0.40908268;0.63048667;0.60544688;0.44149908;0.47511199;0.31476107;0.26006165;0.35607412;0.22316305;0.35507789;0.39944038;0.56682581;0.56600487;0.45541665;0.47481653;0.33884859;0.27536258;0.34432927;0.22968221;0.36326626;0.43711206;0.57568878;0.5892511;0.44181049;0.46269873;0.35695338;0.28706518;0.35677668;0.23022898;0.37176302;0.45347288;0.69029349;0.69327456;0.46350756;0.4636035;0.3514801;0.28551278;0.35112599;0.19864289;0.34714153;0.44265318;0.76340491;0.74295926;0.48268375;0.49263582;0.3612715;0.31191579;0.36632243;0.17596483;0.37071213;0.49790439;0.70613027;0.68182236;0.46318579;0.48407936;0.33093897;0.32345238;0.34889936;0.16944154;0.33934793;0.46261421;0.70575732;0.68846989;0.48332343;0.50176162;0.32048646;0.30114698;0.34233764;0.16925184;0.31366277;0.44054124;      };
     };
     float_Data @[3] {
      name="MGN_pri_AN";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;40;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [10 40 1] 0.47321197;0.24917737;0.029125014;0.025139438;0.017399864;0.022005612;0.068447158;0.12101863;0.16134505;0.30211505;0.53608853;0.28683716;0.047345642;0.03331206;0.026520243;0.034637198;0.085371539;0.17677514;0.28182837;0.42439544;0.58480877;0.32906848;0.068563074;0.034802351;0.024457812;0.034459442;0.10153527;0.23328203;0.3851487;0.52029395;0.6156832;0.37263811;0.084090069;0.031318147;0.022627458;0.020930845;0.087619588;0.23587084;0.40935278;0.54219598;0.62186569;0.40533212;0.09128993;0.023037136;0.021479247;0.01325503;0.058196533;0.17329279;0.33492962;0.46861988;0.59172642;0.41696337;0.094602711;0.0206168;0.022594213;0.016337493;0.035555817;0.098947421;0.21634752;0.31666371;0.50598681;0.40210125;0.090555146;0.022589173;0.01858077;0.014649004;0.015354167;0.050457172;0.14015129;0.18144868;0.39037651;0.36326849;0.072972484;0.021502271;0.014087084;0.01447609;0.01764808;0.039304417;0.097876221;0.12472453;0.46268827;0.3128747;0.068615057;0.027394406;0.017603436;0.012860128;0.018914647;0.040050048;0.070265546;0.10690451;0.5630095;0.34057423;0.091430403;0.035437521;0.021451807;0.018089231;0.026818113;0.047199778;0.090962686;0.13466184;0.66674542;0.41231102;0.097725421;0.033622317;0.025276585;0.019286657;0.022294393;0.050204974;0.11133683;0.16370456;0.72013253;0.45859751;0.085632294;0.042710088;0.035541762;0.021391861;0.025568265;0.035305589;0.076378845;0.10604139;0.70933694;0.48123944;0.081836745;0.054295305;0.038075175;0.01834207;0.019612469;0.017016118;0.048278287;0.13379079;0.60959685;0.45335284;0.085406192;0.046154406;0.045114994;0.017142251;0.021806533;0.015417111;0.050443381;0.14962259;0.59952039;0.37433332;0.076884225;0.061342712;0.046974264;0.017594375;0.027539406;0.039193802;0.10898796;0.17199178;0.68793833;0.29166564;0.072247356;0.056672804;0.048189644;0.013959722;0.027562678;0.041937552;0.11680708;0.16021344;0.71643609;0.33694857;0.060361311;0.056437474;0.043863449;0.012074401;0.024062611;0.026165839;0.082419984;0.11289943;0.64996421;0.33004162;0.057357609;0.054051548;0.035920136;0.011597525;0.026404627;0.025095057;0.07875441;0.14510314;0.5142749;0.26610494;0.050403602;0.057046875;0.030617319;0.0092880949;0.021545244;0.010688573;0.04663432;0.12281254;0.43841562;0.23307501;0.051900424;0.055758409;0.029712917;0.0072221942;0.01957145;0.015633684;0.057297312;0.10485087;0.34137404;0.23086542;0.041267857;0.053606622;0.029813794;0.0069710608;0.018207261;0.012443338;0.054059099;0.10389718;0.24205546;0.15975411;0.044086013;0.051910546;0.028181558;0.0053059217;0.016415227;0.0094131194;0.038793895;0.068657391;0.1646143;0.099722318;0.038777225;0.050851561;0.026435815;0.0043372894;0.014672885;0.006638404;0.033441488;0.065198041;0.14608194;0.08214891;0.034913819;0.052290756;0.025915079;0.0054435008;0.016201369;0.0072172401;0.030486541;0.052241195;0.13809286;0.099617884;0.030114722;0.052675035;0.024922518;0.0058664316;0.017028613;0.0074189906;0.033408359;0.059215154;0.129832;0.1010595;0.030109601;0.054681312;0.024443358;0.0059911134;0.017052535;0.0088351173;0.03728975;0.063115343;0.1546589;0.10149443;0.037873536;0.056859773;0.022213912;0.006652826;0.021083562;0.0072962455;0.03480335;0.072706364;0.12190227;0.1056969;0.045694288;0.056711972;0.019206911;0.0068830126;0.02153497;0.0066086799;0.032030158;0.056762319;0.14416771;0.11645157;0.050631952;0.042775266;0.014217107;0.0061528678;0.018087814;0.0058530648;0.027867187;0.045607138;0.1486183;0.14095609;0.034590334;0.03243681;0.010215291;0.0059557068;0.017621892;0.0059834304;0.02565244;0.046760678;0.26208511;0.24529779;0.04694055;0.039960455;0.0072053559;0.0059347982;0.017781584;0.0051100934;0.02132209;0.034534037;0.42059419;0.25302136;0.051035423;0.037129447;0.0086178277;0.0059538544;0.016194982;0.004925603;0.020049313;0.029014295;0.33122492;0.22379869;0.041751314;0.039085262;0.0084774941;0.0060807629;0.0150989;0.0046377629;0.017317332;0.024775648;0.17547248;0.14335372;0.033517059;0.045698032;0.010167959;0.0060393079;0.015042951;0.0042455262;0.014901903;0.02263478;0.10354217;0.10281292;0.038125504;0.045574483;0.012779465;0.0069881976;0.013460563;0.0045184786;0.016100967;0.032179266;0.11171043;0.12529786;0.033614036;0.040773604;0.015168526;0.0078125987;0.015143207;0.0045421496;0.017445482;0.037447076;0.27424663;0.27997935;0.041078378;0.041114662;0.014403278;0.0076979152;0.014355103;0.0033580589;0.013823827;0.03387782;0.43258491;0.38518649;0.048974723;0.0536213;0.015800392;0.0098966938;0.01657241;0.0027028606;0.017273389;0.056246661;0.30551967;0.25836086;0.040956859;0.049602531;0.011856098;0.011042967;0.014055775;0.0025392049;0.012840084;0.040741879;0.30476046;0.27077594;0.049261536;0.058244895;0.010736303;0.0089333588;0.013209014;0.0025345976;0.010062384;0.033220463;      };
     };
     float_Data @[4] {
      name="A1_pitch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 3;1;10;8;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [3 1 10 8 1] -0.054123066;0.0086048879;-0.015978571;-0.054603476;-0.041231286;-0.0052793827;-0.0042353021;-0.003405585;-0.0012095249;0.00031338364;0.00018829189;-0.0005072857;-0.0005998257;-0.0003011995;-0.00066160259;-0.00083628675;-0.00048824603;-6.8354791e-05;-0.003537816;-0.00016013155;-0.00035300315;-0.014146375;-0.00034574227;-0.00028421945;-0.036637254;-0.00052548427;-0.0018093509;-0.074852653;-0.0063469904;-0.005603591;-0.046399578;-0.061176553;-0.029129904;-0.052294619;-0.042182833;-0.011048196;-0.0038678332;-0.0038077415;-0.0014602337;0.0012409609;0.00060431298;0.00029114867;-0.00078948017;-0.00090142468;-0.00040948667;-0.00036252147;-0.00041843046;2.8353119e-05;-0.0019422416;-0.00019020124;-0.00015792067;-0.0095711928;-0.00091107411;-0.00022095362;-0.027428159;-0.0024813358;-0.001307047;-0.05086679;-0.0049140151;-0.002701398;-0.034271497;-0.14452653;-0.036288816;-0.037510604;-0.045695718;-0.015118215;-0.0021139113;-0.0029309527;-0.00082412024;0.0019799266;0.00087227894;0.0008199967;-0.0005669294;-0.0012002434;-0.00018921413;4.927472e-05;-0.00031267444;0.00010690086;-0.00043273164;-4.4713321e-05;7.2834839e-05;-0.0047844094;-0.0009106457;-0.00011229236;-0.014811999;-0.0028117513;-0.00072384154;-0.02588371;-0.0036804604;-0.0010167632;0.00035946257;-0.17159386;-0.023153827;-0.0030990848;-0.031262562;-0.0040078787;-0.0012000622;-0.0016807639;0.00042254291;0.0017715229;0.00031912822;0.00027575128;-0.0002799845;-0.0013410458;-0.00020432269;3.3372417e-05;-0.00026905653;0.00015505451;-0.00031609013;-0.00027432269;0.00013867993;-0.0031474312;-0.0013284221;-0.00012335982;-0.0092057036;-0.0039429241;-0.00052519242;-0.011109375;-0.0046339235;-6.9307571e-05;-0.023211755;-0.16044545;0.003745846;0.029070215;-0.0044939648;0.017940084;-0.00094932021;-0.00092565018;0.00068759051;0.00080979295;-0.00079130265;-0.00048807781;0.00023426994;-0.0013167118;-0.00035378133;-1.4902675e-05;-0.00022670827;0.00017300024;-0.00026245214;-0.00041066032;0.00011801513;-0.0030814796;-0.0013086597;-0.00013857886;-0.0085205035;-0.0041017532;-0.00053287006;-0.0074608885;-0.0058356356;-2.3093657e-05;-0.094481885;-0.14027014;0.027313702;0.032416098;0.012813175;0.035050616;-0.00070444262;-0.00048675964;0.0010295652;0.00064644404;-0.0011874029;-0.0008404993;0.00016275562;-0.001449144;-0.00068506342;-0.00012102669;-0.00014997374;0.00017038957;-0.00052482792;-0.00057749834;-5.3144176e-05;-0.0026193087;-0.0012017956;-0.00019504243;-0.0058895601;-0.0040225126;-0.00082426309;-0.0029137989;-0.0059323283;-0.0004496004;-0.091243684;-0.078563392;0.05768925;0.0039001871;0.012824502;0.039456829;-0.00066010188;5.5438257e-05;0.0011813204;0.00064172456;-0.00072810333;-0.00039737439;0.0001829985;-0.0013538022;-0.00079234573;-0.00022208935;-9.8929071e-05;0.00016300337;-0.00033886617;-0.00055735919;-0.00012268565;-0.001321648;-0.00086916698;-0.00019372696;-0.0021691301;-0.0035432901;-0.00096934917;-0.0027514827;-0.0066785449;-0.00087051559;-0.020653347;-0.034574337;0.05002965;-0.026857072;0.0032420084;0.025633788;-0.0018980057;-2.5443209e-05;0.0011911958;0.0011526669;-0.00021519873;1.1687982e-05;-0.00014841993;-0.0012214824;-0.00083077268;-0.00036375868;-7.0382361e-05;9.8726552e-05;-0.00036318757;-0.00059525599;-0.00028264377;-0.00050124968;-0.00067082536;-0.0001846041;-0.00040107121;-0.0031299915;-0.0012052446;-0.0061426;-0.0075690807;-0.0023871684;      };
     };
     float_Data @[5] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [5 5 1] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[6] {
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1] 59;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] 2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] 15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [59] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="StimGen_Mon";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
       };
      };
      name="Y";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="Temporal_Mon";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
     };
     float_Data @[1] {
      name="item";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;40;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="AGC_gain_Mon";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [60] 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
       };
      };
      name="Y1";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [60] 1.0044945;1.008989;1.0134832;1.0179771;1.022471;1.0269645;1.0312083;1.0314925;1.0315679;1.0315901;1.0315964;1.0315958;1.0315949;1.0315945;1.0315943;1.0315937;1.0315932;1.0315925;1.0315919;1.0315977;1.0316228;1.0317018;1.0317876;1.0319532;1.0324386;1.0342078;1.0387008;1.0431937;1.0476863;1.0506749;1.0523217;1.0524737;1.05252;1.0525476;1.0525734;1.0526143;1.0526755;1.0527391;1.0527992;1.0528502;1.0528896;1.0529158;1.0529412;1.0529659;1.0530078;1.0530875;1.0531768;1.0532807;1.053408;1.0535942;1.05392;1.0545646;1.0562737;1.0607657;1.0652575;1.0697492;1.0742407;1.0787319;1.0791779;1.0792818;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_2";
	value 1 0=1;
       };
      };
      name="Y2";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [60] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[0][4]$3$;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][0]$4$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="batch counter";
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="maximum number of batch runs to perform";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$5$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$6$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$5$;
      local_ctr_var=$6$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=$2$;
	targ_ld_init="*LeabraTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$5$;
	local_ctr_var=$6$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrain";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns";
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of epochs to run";
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$7$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     };
     ProgVar @[5] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="save the network's weights at the end of training?  Note: you can also just call SaveWeights program inside training loop to save more frequently";
     };
     ProgVar @[6] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$8$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
     };
     ProgVar @[7] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$9$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$10$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$11$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[7]$12$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[6]$13$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$13$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$11$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$12$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$12$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$11$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$11$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$14$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][2]$15$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$11$;
	local_ctr_var=$14$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$12$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc=;
      flags=;
      cond {
       expr="save_final_wts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[0][9]$16$;
	targ_ld_init="*SaveWeights*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$17$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$18$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
     ProgVar @[5] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call Compute_AvgAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
     ProgVar @[6] {
      name="adapt_rel_abs_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="use the computed rel and abs netin values to adapt the wt_scale.abs and wt_scale.rel params of network conspecs to match target values that are set on the projections -- see conspec rel_net_adapt and layerspec abs_net_adapt parmeters and comments for more information";
     };
     ProgVar @[7] {
      name="ps";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=SignalProcBlock::ProcStatus;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$19$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$20$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$21$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[7]$22$;
      expr {
       expr="SignalProcBlock::PS_OK";
      };
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$19$;
      local_ctr_var=$20$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[2] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$21$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$21$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$23$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=OFF;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][3]$24$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$25$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$26$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$27$;
      order=SEQUENTIAL;
      item_idx_list{ 0;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     CodeBlock @[6] {
      desc="Audioproc loop (replaces Net Data Loop)";
      flags=NON_STD;
      prog_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[1][0]$28$;
	targ_ld_init="*Audioproc*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       OtherProgramVar @[1] {
	desc=;
	flags=;
	other_prog=$28$;
	set_other=0;
	var_1=$22$;
	var_2=NULL;
	var_3=NULL;
	var_4=NULL;
       };
       WhileLoop @[2] {
	desc=;
	flags=;
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$25$;
	  method=DataBlock_Idx::ReadItem;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="-1";
	    };
	   };
	  };
	 };
	 ProgramCall @[1] {
	  desc="run the trial program, passing network and input_data";
	  flags=;
	  target=$24$;
	  targ_ld_init="*LeabraTrial*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	 };
	 ProgramCall @[2] {
	  desc=;
	  flags=;
	  target=$28$;
	  targ_ld_init="*Audioproc*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 OtherProgramVar @[3] {
	  desc=;
	  flags=;
	  other_prog=$28$;
	  set_other=0;
	  var_1=$22$;
	  var_2=NULL;
	  var_3=NULL;
	  var_4=NULL;
	 };
	};
	test {
	 expr="ps == SignalProcBlock::PS_OK";
	};
       };
      };
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$19$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$19$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[9] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$19$;
	method=LeabraNetwork::Compute_AvgAbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="adapt_rel_abs_netin";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$19$;
	  method=LeabraNetwork::Compute_AdaptRelNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$19$;
	  method=LeabraNetwork::Compute_AdaptAbsNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
       };
      };
     };
     MethodCall @[10] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$21$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[11] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[0][8]$29$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$30$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$31$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$30$;
      local_ctr_var=$31$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$30$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=$3$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$30$;
	local_ctr_var=$31$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$30$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$30$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=;
	result_var=NULL;
	obj=$30$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[5] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$30$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[6] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[0][7]$32$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[7] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$30$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$33$;
     };
    };
   };
   Program @[4] {
    name="LeabraSettle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$34$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$35$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$34$;
      local_ctr_var=$35$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$34$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[0][6]$36$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$34$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$37$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$37$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[0][5]$38$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$34$;
	local_ctr_var=$35$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$34$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$34$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$34$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$34$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$39$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$40$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$40$;
      update_var=.projects[0].programs.gp[0][5].vars[0]$41$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$4$;
      network=$1$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="MGN_pri";
	net_target=LAYER;
	layer_name="MGN_pri";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="MGN_pri_llb";
	net_target=LAYER;
	layer_name="MGN_pri_llb";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="MGN_pri_AN";
	net_target=LAYER;
	layer_name="MGN_pri_AN";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="A1_pitch";
	net_target=LAYER;
	layer_name="A1_pitch";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	chan_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[5] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$4$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$42$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$43$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$43$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$43$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$43$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=$17$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$17$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$44$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$45$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$46$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$46$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$47$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=.projects[0].data.gp[1][1]$48$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$48$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$49$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$18$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$50$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$51$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$52$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$50$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$52$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$52$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$52$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[9] {
    name="SaveWeights";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$53$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$54$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$55$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$56$;
      obj=.projects[0].programs.gp[0][9].args[0]$57$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$57$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] {
   name="Audioproc";
   el_typ=Program;
   el_def=0;
   step_prog=NULL;
   tags=;
   desc=;
   Program @[0] {
    name="Audioproc";
    tags=;
    desc=;
    flags=;
    objs {
     name=;
     el_typ=SignalMonBlock;
     el_def=0;
     InputBlockSet @[0] {
      name="InputBlockSet_1";
      desc=;
      flags=;
      gain {
       level=1;
       units=UN_SCALE;
      };
      fs {
       fs_val=SF_16000;
       fs_act=16000;
      };
      max_dur {
       duration=0;
       units=UN_CONT;
      };
      blocks {
       name=;
       el_typ=InputBlockBase;
       el_def=0;
       StimGen @[0] {
	name="StimGen_0";
	desc=;
	flags=BF_OFF;
	gain {
	 level=1;
	 units=UN_SCALE;
	};
	fs {
	 fs_val=SF_16000;
	 fs_act=16000;
	};
	max_dur {
	 duration=1;
	 units=UN_TIME_S;
	};
	out_buff {
	 fs {
	  fs_val=SF_16000;
	  fs_act=16000;
	 };
	 fr_dur {
	  duration=1;
	  units=UN_SAMPLES;
	 };
	 stages=10;
	 fields=1;
	};
	pos {x=0: y=0.233238: z=0: };
	chans {
	 name=;
	 el_typ=ToneChan;
	 el_def=0;
	 ToneChan @[0] {
	  name=;
	  chan_flags=;
	  wave_type=WT_SQUARE;
	  freq_mode=FM_ABSOLUTE;
	  freq=220;
	  level {
	   level=1;
	   units=UN_SCALE;
	  };
	  starting_phase {
	   phase=0;
	   units=UN_DEGREES;
	  };
	 };
	 NoiseChan @[1] {
	  name=;
	  chan_flags=;
	  noise_type=NT_WHITE;
	  level {
	   level=1;
	   units=UN_SCALE;
	  };
	 };
	};
       };
       FileInput @[1] {
	name="FileInput_0";
	desc="read audio data from an input file";
	flags=;
	gain {
	 level=5;
	 units=UN_SCALE;
	};
	fs {
	 fs_val=SF_16000;
	 fs_act=16000;
	};
	max_dur {
	 duration=0;
	 units=UN_CONT;
	};
	out_buff {
	 fs {
	  fs_val=SF_CUSTOM;
	  fs_act=16000;
	 };
	 fr_dur {
	  duration=1;
	  units=UN_SAMPLES;
	 };
	 stages=10;
	 fields=1;
	};
	pos {x=0: y=0.233238: z=0: };
	fname="arctic_a0001.wav";
	format=SF_FORMAT_WAV;
	loop=0;
	vals {
	 is_auto=1;
	 act=1;
	};
	chans {
	 is_auto=1;
	 act=1;
	};
	fields {
	 is_auto=1;
	 act=1;
	};
       };
      };
      stages=10;
     };
     SignalMonBlock @[1] {
      name="SignalMonBlock_Input";
      desc=;
      flags=BF_OFF;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[0].blocks[0]$58$;
       buff_index=0;
      };
      mon_flags=MF_ACCUM|MF_RESET_ON_INIT|MF_FOR_PLOT;
      mon_type=MT_VAL;
      mon_data=.projects[0].data.gp[2][0]$59$;
      x_units=UN_SAMPLES;
      item_col="item";
      item_dims=2;
      item_dim0=DIM_VAL;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     ListenerBlock @[2] {
      name="ListenerBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[0]$60$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_16000;
	fs_act=16000;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      head_radius=0.09;
      pos {x=0: y=0: z=0: };
      pos_ear_L {x=-0.09: y=0: z=0: };
      pos_ear_R {x=0.09: y=0: z=0: };
      norm_by_n=0;
      output_mode=OM_Mono;
      speed_sound=344;
      dist_min=0.03;
      dist_atten=16;
     };
     GammatoneBlock @[3] {
      name="GammatoneBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[2]$61$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_16000;
	fs_act=16000;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=2;
      };
      out_buff_env {
       fs {
	fs_val=SF_16000;
	fs_act=16000;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      out_buff_delta_env {
       fs {
	fs_val=SF_AUTO;
	fs_act=0;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      out_vals=OV_ENV;
      chan_spacing=CS_LogLinear;
      ear_q=9.26449;
      min_bw=24.7;
      cf_lo=110;
      cf_hi=3227.854;
      chans_per_oct=8;
      n_chans=40;
     };
     TemporalWindowBlock @[4] {
      name="TemporalWindowBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[3]$62$;
       buff_index=1;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      out_buff_off {
       fs {
	fs_val=SF_AUTO;
	fs_act=0;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      non_lin=NL_NONE;
      l_dur=20;
      u_dur=0;
      out_rate=10;
      ft=FT_MG;
      ot=OT_SINGLE;
      w {
       level=-30;
       units=UN_DBI;
      };
      tpl=5.5;
      tsl=26;
      tpu=2.5;
      tsu=12;
      sigma=1;
      on_sigma=0.5;
      off_sigma=1;
     };
     SignalMonBlock @[5] {
      name="Temporal_Mon";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[4]$63$;
       buff_index=0;
      };
      mon_flags=MF_ACCUM|MF_RESET_ON_INIT|MF_FOR_PLOT;
      mon_type=MT_ITEM;
      mon_data=.projects[0].data.gp[2][1]$64$;
      x_units=UN_SAMPLES;
      item_col="item";
      item_dims=2;
      item_dim0=DIM_VAL;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     AGCBlock @[6] {
      name="AGCBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=$63$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=10;
       fields=1;
      };
      out_buff_gain {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=1;
       fields=1;
      };
      agc_flags=AF_AGC_ON;
      gain_units=UN_SCALE;
      init_gain=1;
      gain_thresh=1e-05;
      gain_limits {min=0.1: max=100: };
      agc_tc_attack {
       duration=100;
       units=UN_TIME_MS;
      };
      agc_tc_decay {
       duration=120;
       units=UN_TIME_MS;
      };
     };
     SignalMonBlock @[7] {
      name="AGC_gain_Mon";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[6]$65$;
       buff_index=1;
      };
      mon_flags=MF_ACCUM|MF_RESET_ON_INIT|MF_FOR_PLOT;
      mon_type=MT_VAL;
      mon_data=.projects[0].data.gp[2][2]$66$;
      x_units=UN_SAMPLES;
      item_col="item";
      item_dims=2;
      item_dim0=DIM_VAL;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     SignalMonBlock @[8] {
      name="SignalMonBlock_pri";
      desc=;
      flags=;
      in_block {
       src_block=$65$;
       buff_index=0;
      };
      mon_flags=MF_RESET_ON_INIT;
      mon_type=MT_ITEM;
      mon_data=$4$;
      x_units=UN_SAMPLES;
      item_col="MGN_pri";
      item_dims=2;
      item_dim0=DIM_STAGE_DESC;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     HarmonicSieveBlock @[9] {
      name="HarmonicSieveBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=$65$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=10;
       fields=1;
      };
      chans_per_oct {
       auto_lookup=1;
       chans_per_oct=8;
      };
      out_octs=3;
     };
     SignalMonBlock @[10] {
      name="SignalMonBlock_pitch";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[9]$67$;
       buff_index=0;
      };
      mon_flags=MF_RESET_ON_INIT;
      mon_type=MT_ITEM;
      mon_data=$4$;
      x_units=UN_SAMPLES;
      item_col="A1_pitch";
      item_dims=4;
      item_dim0=DIM_VAL;
      item_dim1=DIM_DUMMY;
      item_dim2=DIM_STAGE_DESC;
      item_dim3=DIM_CHAN;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     LogLinearBlock @[11] {
      name="LogLinearBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=$63$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=10;
       fields=1;
      };
      in_gain {
       level=1;
       units=UN_SCALE;
      };
      zero_level=-48;
      width=48;
     };
     SignalMonBlock @[12] {
      name="LogLInear_Mon";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[11]$68$;
       buff_index=0;
      };
      mon_flags=MF_RESET_ON_INIT;
      mon_type=MT_ITEM;
      mon_data=$4$;
      x_units=UN_SAMPLES;
      item_col="MGN_pri_llb";
      item_dims=2;
      item_dim0=DIM_STAGE_DESC;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
     ANBlock @[13] {
      name="ANBlock_0";
      desc=;
      flags=;
      in_block {
       src_block=$63$;
       buff_index=0;
      };
      out_buff {
       fs {
	fs_val=SF_CUSTOM;
	fs_act=100;
       };
       fr_dur {
	duration=1;
	units=UN_SAMPLES;
       };
       stages=10;
       fields=1;
      };
      in_gain {
       level=1;
       units=UN_SCALE;
      };
      val_list {
       name=;
       el_typ=ANVal;
       el_def=0;
       ANVal @[0] {
	name=;
	val_type=AN_EXP;
	cl=-10;
	width=30;
	norm=0.6666667;
	f=0.3;
       };
      };
     };
     SignalMonBlock @[14] {
      name="SignalMonBlock_AN";
      desc=;
      flags=;
      in_block {
       src_block=.projects[0].programs.gp[1][0].objs[13]$69$;
       buff_index=0;
      };
      mon_flags=MF_RESET_ON_INIT;
      mon_type=MT_ITEM;
      mon_data=$4$;
      x_units=UN_SAMPLES;
      item_col="MGN_pri_AN";
      item_dims=2;
      item_dim0=DIM_STAGE_DESC;
      item_dim1=DIM_CHAN;
      item_dim2=DIM_OFF;
      item_dim3=DIM_OFF;
      item_dim4=DIM_OFF;
      item_dim5=DIM_OFF;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="InputBlockSet_1";
      var_type=T_Object;
      object_type=InputBlockSet;
      object_val=$60$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="ListenerBlock_0";
      var_type=T_Object;
      object_type=ListenerBlock;
      object_val=$61$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="GammatoneBlock_0";
      var_type=T_Object;
      object_type=GammatoneBlock;
      object_val=$62$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="dur";
      var_type=T_Real;
      real_val=0.01;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="(ms) duration to process";
     };
     ProgVar @[4] {
      name="TemporalWindowBlock_0";
      var_type=T_Object;
      object_type=TemporalWindowBlock;
      object_val=$63$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="SignalMonBlock_pri";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[8]$70$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="SignalMonBlock_pitch";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[10]$71$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="HarmonicSieveBlock_0";
      var_type=T_Object;
      object_type=HarmonicSieveBlock;
      object_val=$67$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="ps";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=SignalProcBlock::ProcStatus;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="SignalMonBlock_Input";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[1]$72$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="AGCBlock_0";
      var_type=T_Object;
      object_type=AGCBlock;
      object_val=$65$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="Temporal_Mon";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[5]$73$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="AGC_gain_Mon";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[7]$74$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[13] {
      name="FileInput_0";
      var_type=T_Object;
      object_type=FileInput;
      object_val=.projects[0].programs.gp[1][0].objs[0].blocks[1]$75$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[14] {
      name="LogLinearBlock_0";
      var_type=T_Object;
      object_type=LogLinearBlock;
      object_val=$68$;
      objs_ptr=1;
      flags=NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[15] {
      name="LogLInear_Mon";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[12]$76$;
      objs_ptr=1;
      flags=NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[16] {
      name="SignalMonBlock_AN";
      var_type=T_Object;
      object_type=SignalMonBlock;
      object_val=.projects[0].programs.gp[1][0].objs[14]$77$;
      objs_ptr=1;
      flags=NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[17] {
      name="ANBlock_0";
      var_type=T_Object;
      object_type=ANBlock;
      object_val=$69$;
      objs_ptr=1;
      flags=NULL_CHECK;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[0]$78$;
      method=SignalProcBlock::InitConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[1] {
      desc=;
      flags=;
      cond {
       expr="true";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[1][0].vars[13]$79$;
	method=FileInput::OpenFile;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[8]$80$;
      obj=$78$;
      method=InputBlockBase::ProcNext_Duration;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="s";
	required=0;
	def_val=;
	expr {
	 expr="dur";
	};
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$81$;
   name="Browser2";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$81$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="Network_0";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @[0] {
	  m_data=$1$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=51: y=40: z=2: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$82$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ MGN_pri=0;MGN_pri_llb=0;MGN_pri_AN=0;A1_pitch=0;Hidden=0;Output=0;	  };
	 };
	};
       };
       camera_pos {x=0.5: y=0.3022419: z=1.917677: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=2.335362;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="StimGen_Mon";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$59$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][0].data[0]$83$;
	    m_transform=NULL;
	    name="X";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][0].data[1]$84$;
	    m_transform=NULL;
	    name="Y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$82$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.624621: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.637121;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="AGC_gain_Mon";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$66$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][2].data[0]$85$;
	    m_transform=NULL;
	    name="X";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][2].data[1]$86$;
	    m_transform=NULL;
	    name="Y1";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[2][2].data[2]$87$;
	    m_transform=NULL;
	    name="Y2";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y1";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Y2";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$82$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.508989: y=0.445: z=1.720569: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.733069;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=0;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_change_log=0;
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
    };
   };
   name="Network_0";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$88$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=1: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: learn=0.01: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=1: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=1;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcalm {avg_updt=TRIAL: ml_mix=0: sm_mix=1: m_dt=0.03: s_dt=0.1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=1;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
     xcalm {avg_updt=TRIAL: ml_mix=0: sm_mix=1: m_dt=0.03: s_dt=0.1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="MGN_pri";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     un_geom {x=10: y=40: n_not_xy=0: n=400: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=10: y=40: n_not_xy=0: n=400: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=40: n_not_xy=0: n=400: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$89$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.01850808: max=0.3204014: max_i=110: };
     acts_p {cmpt=1: avg=0.01108687: max=0.2043631: max_i=39: };
     acts_m {cmpt=1: avg=0.01850808: max=0.3204014: max_i=110: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.0025: pct_c=0.9975: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.075: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[0]$90$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="MGN_pri_llb";
     flags=;
     layer_type=INPUT;
     pos {x=12: y=0: z=0: };
     un_geom {x=10: y=40: n_not_xy=0: n=400: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=10: y=40: n_not_xy=0: n=400: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=40: n_not_xy=0: n=400: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$89$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.4900257: max=0.8901165: max_i=110: };
     acts_p {cmpt=1: avg=0.4755968: max=0.8516102: max_i=39: };
     acts_m {cmpt=1: avg=0.4900257: max=0.8901165: max_i=110: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=151: pct=0.3775: pct_c=0.6225: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.9975: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$90$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="MGN_pri_AN";
     flags=;
     layer_type=INPUT;
     pos {x=24: y=0: z=0: };
     un_geom {x=10: y=40: n_not_xy=0: n=400: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=10: y=40: n_not_xy=0: n=400: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=40: n_not_xy=0: n=400: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$89$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.1095558: max=0.7201325: max_i=110: };
     acts_p {cmpt=1: avg=0.08654514: max=0.6400217: max_i=39: };
     acts_m {cmpt=1: avg=0.1095558: max=0.7201325: max_i=110: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=18: pct=0.045: pct_c=0.955: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.495: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$90$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[3] {
     name="A1_pitch";
     flags=;
     layer_type=INPUT;
     pos {x=12: y=0: z=1: };
     un_geom {x=3: y=1: n_not_xy=0: n=3: };
     unit_groups=1;
     gp_geom {x=10: y=8: n_not_xy=0: n=80: };
     gp_spc {x=1: y=1: };
     act_geom {x=39: y=15: n_not_xy=0: n=240: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=24: n_not_xy=0: n=240: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.002868296: max=0.008604888: max_i=1: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0.002868296: max=0.008604888: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0.0001672252: max=0.0003133836: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0001672252: max=0.0003133836: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0.0001672252: max=0.0003133836: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=0: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[12] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0.0007121409: max=0.001240961: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[13] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0007121409: max=0.001240961: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0.0007121409: max=0.001240961: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[14] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=9.45104e-06: max=2.835312e-05: max_i=2: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[15] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=9.45104e-06: max=2.835312e-05: max_i=2: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=9.45104e-06: max=2.835312e-05: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[16] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[17] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[18] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[19] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=2: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[20] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[21] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[22] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0.001224067: max=0.001979927: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[23] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.001224067: max=0.001979927: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0.001224067: max=0.001979927: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[24] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=5.205853e-05: max=0.0001069009: max_i=2: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[25] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=5.205853e-05: max=0.0001069009: max_i=2: };
       acts_p {cmpt=1: avg=2.427828e-05: max=7.283484e-05: max_i=2: };
       acts_m {cmpt=1: avg=5.205853e-05: max=0.0001069009: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[26] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=2.427828e-05: max=7.283484e-05: max_i=2: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=2.427828e-05: max=7.283484e-05: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[27] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[28] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[29] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=4: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[30] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0001198209: max=0.0003594626: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0.0001198209: max=0.0003594626: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[31] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0.0001408476: max=0.0004225429: max_i=2: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[32] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0001408476: max=0.0004225429: max_i=2: };
       acts_p {cmpt=1: avg=0.0007888008: max=0.001771523: max_i=0: };
       acts_m {cmpt=1: avg=0.0001408476: max=0.0004225429: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[33] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0007888008: max=0.001771523: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0.0007888008: max=0.001771523: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[34] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=6.280898e-05: max=0.0001550545: max_i=2: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[35] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=6.280898e-05: max=0.0001550545: max_i=2: };
       acts_p {cmpt=1: avg=4.622664e-05: max=0.0001386799: max_i=2: };
       acts_m {cmpt=1: avg=6.280898e-05: max=0.0001550545: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[36] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=4.622664e-05: max=0.0001386799: max_i=2: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=4.622664e-05: max=0.0001386799: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[37] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[38] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[39] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=6: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[40] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.001248615: max=0.003745846: max_i=2: };
       acts_p {cmpt=1: avg=0.0156701: max=0.02907022: max_i=0: };
       acts_m {cmpt=1: avg=0.001248615: max=0.003745846: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[41] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0156701: max=0.02907022: max_i=0: };
       acts_p {cmpt=1: avg=0.0002291968: max=0.0006875905: max_i=2: };
       acts_m {cmpt=1: avg=0.0156701: max=0.02907022: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[42] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0002291968: max=0.0006875905: max_i=2: };
       acts_p {cmpt=1: avg=0.000269931: max=0.000809793: max_i=0: };
       acts_m {cmpt=1: avg=0.0002291968: max=0.0006875905: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[43] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.000269931: max=0.000809793: max_i=0: };
       acts_p {cmpt=1: avg=7.808998e-05: max=0.0002342699: max_i=0: };
       acts_m {cmpt=1: avg=0.000269931: max=0.000809793: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[44] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=7.808998e-05: max=0.0002342699: max_i=0: };
       acts_p {cmpt=1: avg=5.766675e-05: max=0.0001730002: max_i=2: };
       acts_m {cmpt=1: avg=7.808998e-05: max=0.0002342699: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[45] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=5.766675e-05: max=0.0001730002: max_i=2: };
       acts_p {cmpt=1: avg=3.933838e-05: max=0.0001180151: max_i=2: };
       acts_m {cmpt=1: avg=5.766675e-05: max=0.0001730002: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[46] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=3.933838e-05: max=0.0001180151: max_i=2: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=3.933838e-05: max=0.0001180151: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[47] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[48] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[49] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=8: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[50] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.009104568: max=0.0273137: max_i=2: };
       acts_p {cmpt=1: avg=0.02675996: max=0.03505062: max_i=2: };
       acts_m {cmpt=1: avg=0.009104568: max=0.0273137: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[51] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.02675996: max=0.03505062: max_i=2: };
       acts_p {cmpt=1: avg=0.0003431884: max=0.001029565: max_i=2: };
       acts_m {cmpt=1: avg=0.02675996: max=0.03505062: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[52] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0003431884: max=0.001029565: max_i=2: };
       acts_p {cmpt=1: avg=0.0002154813: max=0.000646444: max_i=0: };
       acts_m {cmpt=1: avg=0.0003431884: max=0.001029565: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[53] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0002154813: max=0.000646444: max_i=0: };
       acts_p {cmpt=1: avg=5.425187e-05: max=0.0001627556: max_i=0: };
       acts_m {cmpt=1: avg=0.0002154813: max=0.000646444: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[54] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=5.425187e-05: max=0.0001627556: max_i=0: };
       acts_p {cmpt=1: avg=5.679652e-05: max=0.0001703896: max_i=2: };
       acts_m {cmpt=1: avg=5.425187e-05: max=0.0001627556: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[55] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=5.679652e-05: max=0.0001703896: max_i=2: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=5.679652e-05: max=0.0001703896: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[56] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[57] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[58] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[59] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=10: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[60] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.01922975: max=0.05768925: max_i=2: };
       acts_p {cmpt=1: avg=0.01872717: max=0.03945683: max_i=2: };
       acts_m {cmpt=1: avg=0.01922975: max=0.05768925: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[61] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.01872717: max=0.03945683: max_i=2: };
       acts_p {cmpt=1: avg=0.0004122529: max=0.00118132: max_i=2: };
       acts_m {cmpt=1: avg=0.01872717: max=0.03945683: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[62] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0004122529: max=0.00118132: max_i=2: };
       acts_p {cmpt=1: avg=0.0002139082: max=0.0006417246: max_i=0: };
       acts_m {cmpt=1: avg=0.0004122529: max=0.00118132: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[63] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0002139082: max=0.0006417246: max_i=0: };
       acts_p {cmpt=1: avg=6.09995e-05: max=0.0001829985: max_i=0: };
       acts_m {cmpt=1: avg=0.0002139082: max=0.0006417246: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[64] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=6.09995e-05: max=0.0001829985: max_i=0: };
       acts_p {cmpt=1: avg=5.433445e-05: max=0.0001630034: max_i=2: };
       acts_m {cmpt=1: avg=6.09995e-05: max=0.0001829985: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[65] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=5.433445e-05: max=0.0001630034: max_i=2: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=5.433445e-05: max=0.0001630034: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[66] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[67] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[68] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[69] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=12: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[70] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.01667655: max=0.05002965: max_i=2: };
       acts_p {cmpt=1: avg=0.009625265: max=0.02563379: max_i=2: };
       acts_m {cmpt=1: avg=0.01667655: max=0.05002965: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[71] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=4: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.009625265: max=0.02563379: max_i=2: };
       acts_p {cmpt=1: avg=0.0003970653: max=0.001191196: max_i=2: };
       acts_m {cmpt=1: avg=0.009625265: max=0.02563379: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[72] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=8: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0003970653: max=0.001191196: max_i=2: };
       acts_p {cmpt=1: avg=0.0003881183: max=0.001152667: max_i=0: };
       acts_m {cmpt=1: avg=0.0003970653: max=0.001191196: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[73] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=12: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0.0003881183: max=0.001152667: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0.0003881183: max=0.001152667: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[74] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=16: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=3.290885e-05: max=9.872655e-05: max_i=2: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[75] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=20: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=3.290885e-05: max=9.872655e-05: max_i=2: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=3.290885e-05: max=9.872655e-05: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[76] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=24: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[77] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=28: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[78] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=32: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
      LeabraUnit_Group @.gp[79] {
       name=;
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=36: y=14: z=0: };
       unique_geom=0;
       geom {x=3: y=1: n_not_xy=0: n=3: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=0: max_i=0: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$89$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.001577019: max=0.05768925: max_i=60: };
     acts_p {cmpt=1: avg=0.0009614241: max=0.03945683: max_i=60: };
     acts_m {cmpt=1: avg=0.001577019: max=0.05768925: max_i=60: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.004166667: pct_c=0.9958333: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.01666667: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$90$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[4] {
     name="Hidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[5]$91$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$92$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[3]$93$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[5].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$89$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     i_thrs {cmpt=1: avg=-0.09999999: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1785554: i_kwta_pt=-0.2892247: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$94$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[5] {
     name="Output";
     flags=;
     layer_type=TARGET;
     pos {x=0: y=10: z=1: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[4]$95$;
       spec {type=FullPrjnSpec: spec=$92$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$93$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[4].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$89$: };
     ext_flag=TARG;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     i_thrs {cmpt=1: avg=-0.09999999: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.04: pct_c=0.96: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.02975923: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$90$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=MANUAL_POS;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=15;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=60;
   cur_cnt_err=0;
   train_time {name="TimeUsed_0": start={usr=6404: sys=583: tot=3424842798: }: end={usr=3988: sys=381: tot=3424828283: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="TimeUsed_1": start={usr=6404: sys=583: tot=3424842798: }: end={usr=3988: sys=381: tot=3424828282: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="TimeUsed_3": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="TimeUsed_4": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="TimeUsed_5": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="TimeUsed_6": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="TimeUsed_7": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    log_timing=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=1490;
   n_cons=1250;
   max_size {x=51: y=40: z=2: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=2;
   ct_cycle=15;
   cycle_max=60;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=0;
    m_nrm=0;
    do_s=0;
   };
   minus_cycles=15;
   avg_cycles=0;
   avg_cycles_sum=900;
   avg_cycles_n=60;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=1490;
   avg_send_pct=0;
   avg_send_pct_sum=56.5517;
   avg_send_pct_n=1785;
   maxda_stopcrit=0.005;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=60;
  };
 };
};

// ta_Dump File v3.0 -- code v7.8.2.0 rev8566
LeabraProject .projects["layer_positioning"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [2] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
   };

   EditMthItem_Group @.mths = [0] {
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_done.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_archive.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] { 
  };
  DataTable_Group @.gp["OutputData"] { 
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
  DataTable_Group @.gp["config"] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["PositionLayersFromTable"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   ProgObjList @.objs = [2] {
    DataTable @["LayerLayout"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["user_pinned"] { };
     };

     DataTableCols @.data = [9] {
      String_Data @["LayerName"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      String_Data @["LayerGroup"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      String_Data @["LayoutGroup"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["X_Abs"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Y_Abs"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Z_Abs"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["X_Rel"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Y_Rel"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Z_Rel"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @["LayerLayout_previous"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["user_pinned"] { };
     };

     DataTableCols @.data = [9] {
      String_Data @["LayerName"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      String_Data @["LayerGroup"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      String_Data @["LayoutGroup"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["X_Abs"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Y_Abs"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Z_Abs"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["X_Rel"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Y_Rel"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["NARROW"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      int_Data @["Z_Rel"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgType_List @.types = [2] {
    DynEnumType @["ActionType"] { 
     DynEnumItem_List @.enums = [2] {
      DynEnumItem @["GetCurrentPos"] { };
      DynEnumItem @["SetPositions"] { };
     };
    };
    DynEnumType @["UseGroup"] { 
     DynEnumItem_List @.enums = [3] {
      DynEnumItem @["IgnoreGroup"] { };
      DynEnumItem @["LayerGroup"] { };
      DynEnumItem @["LayoutGroup"] { };
     };
    };
   };

   ProgVar_List @.args = [3] {
    ProgVar @["action"] { };
    ProgVar @["use_group"] { };
    ProgVar @["network"] { };
   };

   ProgVar_List @.vars = [2] {
    ProgVar @["LayerLayout"] { };
    ProgVar @["LayerLayout_previous"] { };
   };

   Function_List @.functions = [2] {
    Function @["GetCurrent"] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [7] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [4] {
	ProgVar @["leaf"] { };
	ProgVar @["current_layer"] { };
	ProgVar @["net_layers"] { };
	ProgVar @["layer_group"] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      AssignExpr @[3] { };
      Comment @[4] { };
      ForeachLoop @[5] { 
       ProgEl_List @.loop_code = [5] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
	CssExpr @[1] { };
	CssExpr @[2] { };
	CssExpr @[3] { };
	CssExpr @[4] { };
       };
      };
      ForLoop @[6] { 
       ProgEl_List @.loop_code = [10] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
	AssignExpr @[1] { };
	CssExpr @[2] { };
	If @[3] { 
	 ProgEl_List @.true_code = [1] {
	  CssExpr @[0] { };
	 };
	};
	CssExpr @[4] { };
	CssExpr @[5] { };
	CssExpr @[6] { };
	CssExpr @[7] { };
	CssExpr @[8] { };
	CssExpr @[9] { };
       };
      };
     };
    };
    Function @["SetPos"] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [3] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [9] {
	ProgVar @["row"] { };
	ProgVar @["current_layer"] { };
	ProgVar @["layer_name"] { };
	ProgVar @["layer_group"] { };
	ProgVar @["group_name"] { };
	ProgVar @["lgrow"] { };
	ProgVar @["lg_x"] { };
	ProgVar @["lg_y"] { };
	ProgVar @["lg_z"] { };
       };
      };
      ForLoop @[1] { 
       ProgEl_List @.loop_code = [4] {
	AssignExpr @[0] { };
	IfContinue @[1] { };
	AssignExpr @[2] { };
	If @[3] { 
	 ProgEl_List @.true_code = [1] {
	  Switch @[0] { 
	   ProgEl_List @.cases = [3] {
	    CaseBlock @[0] { 
	     ProgEl_List @.prog_code = [1] {
	      MethodCall @[0] { 
	       ProgArg_List @.meth_args = [3] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
	       };
	      };
	     };
	    };
	    CaseBlock @[1] { 
	     ProgEl_List @.prog_code = [4] {
	      AssignExpr @[0] { };
	      If @[1] { 
	       ProgEl_List @.true_code = [4] {
		MethodCall @[0] { 
		 ProgArg_List @.meth_args = [4] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		 };
		};
		AssignExpr @[1] { };
		AssignExpr @[2] { };
		AssignExpr @[3] { };
	       };
	      };
	      Else @[2] { 
	       ProgEl_List @.else_code = [3] {
		AssignExpr @[0] { };
		AssignExpr @[1] { };
		AssignExpr @[2] { };
	       };
	      };
	      MethodCall @[3] { 
	       ProgArg_List @.meth_args = [3] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
	       };
	      };
	     };
	    };
	    CaseBlock @[2] { 
	     ProgEl_List @.prog_code = [4] {
	      AssignExpr @[0] { };
	      If @[1] { 
	       ProgEl_List @.true_code = [4] {
		MethodCall @[0] { 
		 ProgArg_List @.meth_args = [4] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		 };
		};
		AssignExpr @[1] { };
		AssignExpr @[2] { };
		AssignExpr @[3] { };
	       };
	      };
	      Else @[2] { 
	       ProgEl_List @.else_code = [3] {
		AssignExpr @[0] { };
		AssignExpr @[1] { };
		AssignExpr @[2] { };
	       };
	      };
	      MethodCall @[3] { 
	       ProgArg_List @.meth_args = [3] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
	       };
	      };
	     };
	    };
	   };
	  };
	 };
	};
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [1] {
    Switch @[0] { 
     ProgEl_List @.cases = [2] {
      CaseBlock @[0] { 
       ProgEl_List @.prog_code = [1] {
	FunctionCall @[0] { 
	 ProgArg_List @.fun_args = [0] {
	 };
	};
       };
      };
      CaseBlock @[1] { 
       ProgEl_List @.prog_code = [1] {
	FunctionCall @[0] { 
	 ProgArg_List @.fun_args = [0] {
	 };
	};
       };
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [3] {
      T3Panel @["Network_0"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["Network_0_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [12] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [0] {
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["TestTrialOutputData"] { 
       T3DataView_List @.root_view.children = [0] {
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @["Network_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [4] {
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [2] {
      LeabraBiasSpec @["LeabraBiasSpec_0"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @["TopDownCons"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @["notInAGroup"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [1] {
     };
    };
    Layer_Group @.gp["OutputGroup"] = [2] { 
     LeabraLayer @["Output"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_Hidden"] { };
      };

      Unit_Group @.units = [25] {
      };
     };
     LeabraLayer @["Output_2"] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [1] {
      };
     };
    };
    Layer_Group @.gp["HiddenGroup"] = [3] { 
     LeabraLayer @["Hidden"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_Input"] { };
       LeabraPrjn @["Fm_Output"] { };
      };

      Unit_Group @.units = [25] {
      };
     };
     LeabraLayer @["Hidden_2"] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [25] {
      };
     };
     LeabraLayer @["Hidden_3"] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [1] {
      };
     };
    };
    Layer_Group @.gp["InputGroup"] = [1] { 
     LeabraLayer @["Input"] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [25] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [5] {
    LeabraNetTiming @[0] { };
    LeabraNetTiming @[1] { };
    LeabraNetTiming @[2] { };
    LeabraNetTiming @[3] { };
    LeabraNetTiming @[4] { };
   };
  };
 };
};
LeabraProject .projects["layer_positioning"] {
 name="layer_positioning";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=;
 email=;
 license {
  owner="Regents of the University of Colorado";
  license=NO_LIC;
  org="CCNLab at the University of Colorado Boulder";
  year="2011";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraConSpec_0_lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects["layer_positioning"].networks["Network_0"].specs["LeabraConSpec_0"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[1] {
     label="cycle_qtr";
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.projects["layer_positioning"].networks["Network_0"].times$$;
     mbr=LeabraTimes::cycle_qtr;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_nodes=0;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["config"] {
   name="config";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["PositionLayersFromTable"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="PositionLayersFromTable";
   short_nm="PstLyr";
   tags="Network, Layer, Position";
   desc="positions network layers according to a data table with positions -- can use either absolute or group-relative coordinates, including non-structural groups";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
    DataTable @["LayerLayout"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_896";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["user_pinned"] {
       name="user_pinned";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="LayerLayout";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @["LayerName"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_969";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1671598;
	 val_type_fixed=0;
	};
       };
       name="LayerName";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=113;
       ar {
	name="ar";
       [10] ;;;"notInAGroup";"Output";"Output_2";"Hidden";"Hidden_2";"Hidden_3";"Input";
       };
      };
      String_Data @["LayerGroup"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_85";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1656805;
	 val_type_fixed=0;
	};
       };
       name="LayerGroup";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=112;
       ar {
	name="ar";
       [10] "OutputGroup";"HiddenGroup";"InputGroup";;"OutputGroup";"OutputGroup";"HiddenGroup";"HiddenGroup";"HiddenGroup";"InputGroup";
       };
      };
      String_Data @["LayoutGroup"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_88";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1671598;
	 val_type_fixed=0;
	};
       };
       name="LayoutGroup";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=113;
       ar {
	name="ar";
       [10] "Out";"Hid";"In";;"Out";"Hid";"Out";"Out";"Hid";"In";
       };
      };
      int_Data @["X_Abs"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_966";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="X_Abs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 0;0;5;20;0;25;0;10;20;5;
       };
      };
      int_Data @["Y_Abs"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="Y_Abs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 0;0;2;5;0;0;0;5;0;2;
       };
      };
      int_Data @["Z_Abs"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="Z_Abs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 1;2;3;0;1;1;2;2;2;3;
       };
      };
      int_Data @["X_Rel"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="X_Rel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 0;0;0;20;0;25;0;10;20;0;
       };
      };
      int_Data @["Y_Rel"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="Y_Rel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 0;0;0;5;0;0;0;5;0;0;
       };
      };
      int_Data @["Z_Rel"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_90";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1005917;
	 val_type_fixed=0;
	};
       };
       name="Z_Rel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=68;
       ar {
	name="ar";
       [10] 0;0;0;0;0;0;0;0;0;0;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [10] 0;1;2;3;4;5;6;7;8;9;
     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
    };
    DataTable @["LayerLayout_previous"] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["user_pinned"] {
       name="user_pinned";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="LayerLayout_previous";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @["LayerName"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1671598;
	 val_type_fixed=0;
	};
       };
       name="LayerName";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=113;
       ar {
	name="ar";
       [10] ;;;"notInAGroup";"Output";"Output_2";"Hidden";"Hidden_2";"Hidden_3";"Input";
       };
      };
      String_Data @["LayerGroup"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1656805;
	 val_type_fixed=0;
	};
       };
       name="LayerGroup";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=112;
       ar {
	name="ar";
       [10] "OutputGroup";"HiddenGroup";"InputGroup";;"OutputGroup";"OutputGroup";"HiddenGroup";"HiddenGroup";"HiddenGroup";"InputGroup";
       };
      };
      String_Data @["LayoutGroup"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1671598;
	 val_type_fixed=0;
	};
       };
       name="LayoutGroup";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=113;
       ar {
	name="ar";
       [10] ;;;;;;;;;;
       };
      };
      int_Data @["X_Abs"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="X_Abs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 5;0;0;20;0;25;0;10;20;5;
       };
      };
      int_Data @["Y_Abs"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="Y_Abs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 2;0;0;5;0;0;0;5;0;2;
       };
      };
      int_Data @["Z_Abs"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="Z_Abs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 3;0;0;0;1;1;2;2;2;3;
       };
      };
      int_Data @["X_Rel"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="X_Rel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 0;0;0;20;0;25;0;10;20;0;
       };
      };
      int_Data @["Y_Rel"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["NARROW"] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1065089;
	 val_type_fixed=0;
	};
       };
       name="Y_Rel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=72;
       ar {
	name="ar";
       [10] 0;0;0;5;0;0;0;5;0;0;
       };
      };
      int_Data @["Z_Rel"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1005917;
	 val_type_fixed=0;
	};
       };
       name="Z_Rel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=68;
       ar {
	name="ar";
       [10] 0;0;0;0;0;0;0;0;0;0;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name=;
     [10] 0;1;2;3;4;5;6;7;8;9;
     };
     last_sort_spec {
      name=;
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @["ActionType"] {
     name="ActionType";
     desc=;
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @["GetCurrentPos"] {
       name="GetCurrentPos";
       value=0;
       desc="get current layer positions into table";
      };
      DynEnumItem @["SetPositions"] {
       name="SetPositions";
       value=1;
       desc="set layer positions based on table";
      };
     };
     bits=0;
    };
    DynEnumType @["UseGroup"] {
     name="UseGroup";
     desc=;
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @["IgnoreGroup"] {
       name="IgnoreGroup";
       value=0;
       desc="ignore any group information, and just use absolute positions";
      };
      DynEnumItem @["LayerGroup"] {
       name="LayerGroup";
       value=1;
       desc="use layer-group relative positions -- X_Rel etc in table";
      };
      DynEnumItem @["LayoutGroup"] {
       name="LayoutGroup";
       value=2;
       desc="use layout groups which are out side the structure of the model -- uses relative positions relative to these layout group offsets";
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["action"] {
     name="action";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects["layer_positioning"].programs["PositionLayersFromTable"].types["ActionType"]$$;
      value=1;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["use_group"] {
     name="use_group";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects["layer_positioning"].programs["PositionLayersFromTable"].types["UseGroup"]$$;
      value=0;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["network"] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["layer_positioning"].networks["Network_0"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["LayerLayout"] {
     name="LayerLayout";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["layer_positioning"].programs["PositionLayersFromTable"].objs["LayerLayout"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["LayerLayout_previous"] {
     name="LayerLayout_previous";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["layer_positioning"].programs["PositionLayersFromTable"].objs["LayerLayout_previous"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @["GetCurrent"] {
     desc=;
     flags=0;
     orig_prog_code=;
     name="GetCurrent";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="ProgVar_List_1";
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name="ProgEl_List_62";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @["leaf"] {
	 name="leaf";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["current_layer"] {
	 name="current_layer";
	 var_type=T_Object;
	 object_type=Layer;
	 object_val=NULL;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc="current_layer = NULL (Layer)";
	 init_from=NULL;
	};
	ProgVar @["net_layers"] {
	 name="net_layers";
	 var_type=T_Object;
	 object_type=Layer_Group;
	 object_val=NULL;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["layer_group"] {
	 name="layer_group";
	 var_type=T_Object;
	 object_type=Layer_Group;
	 object_val=NULL;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="LayerLayout_previous->CopyFrom(LayerLayout)";
       result_var=NULL;
       obj=.projects["layer_positioning"].programs["PositionLayersFromTable"].vars["LayerLayout_previous"]$$;
       method=taBase::CopyFrom;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taBase_ptr;
	 type="taBase*";
	 name="cpy_from";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="LayerLayout";
	 };
	};
       };
       meth_sig="bool CopyFrom(taBase* cpy_from)";
       meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
      };
      MethodCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="LayerLayout.RemoveAllUserData()";
       result_var=NULL;
       obj=.projects["layer_positioning"].programs["PositionLayersFromTable"].vars["LayerLayout"]$$;
       method=DataTable::RemoveAllRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void RemoveAllRows()";
       meth_desc=" remove all of the rows of data, but keep the column structure";
      };
      AssignExpr @[3] {
       desc="all of the layers";
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="layer_group = network.layers";
       result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["GetCurrent"].fun_code[0].local_vars["net_layers"]$$;
       expr {
	expr="network.layers";
       };
      };
      Comment @[4] {
       desc="first get all the layer groups";
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="// first get all the layer groups";
      };
      ForeachLoop @[5] {
       desc=;
       flags=0;
       orig_prog_code="foreach(layer_group in net_layers.gp)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout.AddBlankRow()";
	 result_var=NULL;
	 obj=$.projects["layer_positioning"].programs["PositionLayersFromTable"].vars["LayerLayout"]$;
	 method=DataTable::AddBlankRow;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="int AddBlankRow()";
	 meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	};
	CssExpr @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"LayerName\"][i] = current_layer.name";
	 expr {
	  expr="LayerLayout[\"LayerGroup\"][-1] = layer_group.name;";
	 };
	};
	CssExpr @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"X_Abs\"][-1] = layer_group.pos.x;";
	 };
	};
	CssExpr @[3] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"Y_Abs\"][-1] = layer_group.pos.y;";
	 };
	};
	CssExpr @[4] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"Z_Abs\"][-1] = layer_group.pos.z;";
	 };
	};
       };
       el_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["GetCurrent"].fun_code[0].local_vars["layer_group"]$$;
       in {
	expr="net_layers.gp";
       };
      };
      ForLoop @[6] {
       desc=;
       flags=0;
       orig_prog_code="for (i=0; i <layer_group.size; i++0";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout.AddBlankRow()";
	 result_var=NULL;
	 obj=$.projects["layer_positioning"].programs["PositionLayersFromTable"].vars["LayerLayout"]$;
	 method=DataTable::AddBlankRow;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="int AddBlankRow()";
	 meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	};
	AssignExpr @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="current_layer =layer_group.SafeEl(i)";
	 result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$$;
	 expr {
	  expr="net_layers.Leaf(leaf)";
	 };
	};
	CssExpr @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"LayerName\"][i] = current_layer.name";
	 expr {
	  expr="LayerLayout[\"LayerName\"][-1] = current_layer.name;";
	 };
	};
	If @[3] {
	 desc=;
	 flags=0;
	 orig_prog_code="if (current_layer.GetOwner()";
	 cond {
	  expr="current_layer.InLayerSubGroup()";
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  CssExpr @[0] {
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   orig_prog_code="LayerLayout[\"LayerGroup\"][leaf] =current_layer.GetOwner().name";
	   expr {
	    expr="LayerLayout[\"LayerGroup\"][-1] = current_layer.GetOwner().name;";
	   };
	  };
	 };
	};
	CssExpr @[4] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"X_Abs\"][-1] = current_layer.pos_abs.x;";
	 };
	};
	CssExpr @[5] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"Y_Abs\"][-1] = current_layer.pos_abs.y;";
	 };
	};
	CssExpr @[6] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"Z_Abs\"][-1] = current_layer.pos_abs.z;";
	 };
	};
	CssExpr @[7] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"X_Rel\"][-1] = current_layer.pos.x;";
	 };
	};
	CssExpr @[8] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"Y_Rel\"][-1] = current_layer.pos.y;";
	 };
	};
	CssExpr @[9] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="LayerLayout[\"X_Abs\"][i] = current_layer.pos.x";
	 expr {
	  expr="LayerLayout[\"Z_Rel\"][-1] = current_layer.pos.z;";
	 };
	};
       };
       init {
	expr="leaf=0";
       };
       test {
	expr="leaf <net_layers.leaves";
       };
       iter {
	expr="leaf++";
       };
      };
     };
    };
    Function @["SetPos"] {
     desc=;
     flags=0;
     orig_prog_code=;
     name="SetPos";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="ProgVar_List_1";
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name="ProgEl_List_66";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @["row"] {
	 name="row";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["current_layer"] {
	 name="current_layer";
	 var_type=T_Object;
	 object_type=Layer;
	 object_val=NULL;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["layer_name"] {
	 name="layer_name";
	 var_type=T_String;
	 string_val=;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["layer_group"] {
	 name="layer_group";
	 var_type=T_Object;
	 object_type=Layer_Group;
	 object_val=NULL;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["group_name"] {
	 name="group_name";
	 var_type=T_String;
	 string_val=;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["lgrow"] {
	 name="lgrow";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["lg_x"] {
	 name="lg_x";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["lg_y"] {
	 name="lg_y";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["lg_z"] {
	 name="lg_z";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      ForLoop @[1] {
       desc=;
       flags=0;
       orig_prog_code="for (i=0 i";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="layer_name = pos";
	 result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["layer_name"]$$;
	 expr {
	  expr="LayerLayout[\"LayerName\"][row]";
	 };
	};
	IfContinue @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="if(layer_name.empty()) continue";
	 cond {
	  expr="layer_name.empty()";
	 };
	};
	AssignExpr @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="current_layer =";
	 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
	 expr {
	  expr="network.FindLayer(layer_name)";
	 };
	};
	If @[3] {
	 desc=;
	 flags=0;
	 orig_prog_code="if (current_layer)";
	 cond {
	  expr="current_layer";
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  Switch @[0] {
	   desc=;
	   flags=0;
	   orig_prog_code="switch(";
	   switch_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].args["use_group"]$$;
	   cases {
	    name="cases";
	    el_typ=CaseBlock;
	    el_def=0;
	    CaseBlock @[0] {
	     desc=;
	     flags=0;
	     orig_prog_code=;
	     prog_code {
	      name="prog_code";
	      el_typ=ProgCode;
	      el_def=0;
	      MethodCall @[0] {
	       desc=;
	       flags=CAN_REVERT_TO_CODE;
	       orig_prog_code="current_layer.SetAbsPos(layer_layout[\"X_Abs\"][row])";
	       result_var=NULL;
	       obj=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
	       method=Layer::SetAbsPos;
	       meth_args {
		name="meth_args";
		el_typ=ProgArg;
		el_def=0;
		ProgArg @[0] {
		 arg_type=int;
		 type="int";
		 name="x";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="LayerLayout[\"X_Abs\"][row]";
		 };
		};
		ProgArg @[1] {
		 arg_type=int;
		 type="int";
		 name="y";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="LayerLayout[\"Y_Abs\"][row]";
		 };
		};
		ProgArg @[2] {
		 arg_type=int;
		 type="int";
		 name="z";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="LayerLayout[\"Z_Abs\"][row]";
		 };
		};
	       };
	       meth_sig="void SetAbsPos(int x, int y, int z)";
	       meth_desc=" set absolute position of layer, regardless of whether it is in a layer group or not - always relative to network 0,0,0";
	      };
	     };
	     case_val {
	      expr="IgnoreGroup";
	     };
	    };
	    CaseBlock @[1] {
	     desc=;
	     flags=0;
	     orig_prog_code=;
	     prog_code {
	      name="prog_code";
	      el_typ=ProgCode;
	      el_def=0;
	      AssignExpr @[0] {
	       desc=;
	       flags=CAN_REVERT_TO_CODE;
	       orig_prog_code="group_name = LayerLayout[\"LayerGroup\"][row]";
	       result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["group_name"]$$;
	       expr {
		expr="LayerLayout[\"LayerGroup\"][row]";
	       };
	      };
	      If @[1] {
	       desc=;
	       flags=0;
	       orig_prog_code="if(group_name.nonempty())";
	       cond {
		expr="group_name.nonempty()";
	       };
	       true_code {
		name="true_code";
		el_typ=ProgCode;
		el_def=0;
		MethodCall @[0] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lgrow = LayerLayout.FindVal()";
		 result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lgrow"]$$;
		 obj=$.projects["layer_positioning"].programs["PositionLayersFromTable"].vars["LayerLayout"]$;
		 method=DataTable::FindVal;
		 meth_args {
		  name="meth_args";
		  el_typ=ProgArg;
		  el_def=0;
		  ProgArg @[0] {
		   arg_type=const_Variant_ref;
		   type="Variant&";
		   name="val";
		   required=1;
		   def_val=;
		   prev_expr=;
		   expr {
		    expr="group_name";
		   };
		  };
		  ProgArg @[1] {
		   arg_type=const_Variant_ref;
		   type="Variant&";
		   name="col";
		   required=1;
		   def_val=;
		   prev_expr=;
		   expr {
		    expr="\"LayerGroup\"";
		   };
		  };
		  ProgArg @[2] {
		   arg_type=int;
		   type="int";
		   name="st_row";
		   required=0;
		   def_val="0";
		   prev_expr=;
		   expr {
		    expr="0";
		   };
		  };
		  ProgArg @[3] {
		   arg_type=bool;
		   type="bool";
		   name="not_found_err";
		   required=0;
		   def_val="false";
		   prev_expr=;
		   expr {
		    expr="true";
		   };
		  };
		 };
		 meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
		 meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
		};
		AssignExpr @[1] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		 result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$$;
		 expr {
		  expr="LayerLayout[\"X_Abs\"][lgrow]";
		 };
		};
		AssignExpr @[2] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		 result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$$;
		 expr {
		  expr="LayerLayout[\"Y_Abs\"][lgrow]";
		 };
		};
		AssignExpr @[3] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		 result_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$$;
		 expr {
		  expr="LayerLayout[\"Z_Abs\"][lgrow]";
		 };
		};
	       };
	      };
	      Else @[2] {
	       desc=;
	       flags=0;
	       orig_prog_code="else";
	       else_code {
		name="else_code";
		el_typ=ProgCode;
		el_def=0;
		AssignExpr @[0] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = 0";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$;
		 expr {
		  expr="0";
		 };
		};
		AssignExpr @[1] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_y = 0";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$;
		 expr {
		  expr="0";
		 };
		};
		AssignExpr @[2] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_z = 0";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$;
		 expr {
		  expr="0";
		 };
		};
	       };
	      };
	      MethodCall @[3] {
	       desc=;
	       flags=CAN_REVERT_TO_CODE;
	       orig_prog_code="current_layer.SetAbsPos(layer_layout[\"X_Abs\"][row])";
	       result_var=NULL;
	       obj=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
	       method=Layer::SetAbsPos;
	       meth_args {
		name="meth_args";
		el_typ=ProgArg;
		el_def=0;
		ProgArg @[0] {
		 arg_type=int;
		 type="int";
		 name="x";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="lg_x + LayerLayout[\"X_Rel\"][row]";
		 };
		};
		ProgArg @[1] {
		 arg_type=int;
		 type="int";
		 name="y";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="lg_y + LayerLayout[\"Y_Rel\"][row]";
		 };
		};
		ProgArg @[2] {
		 arg_type=int;
		 type="int";
		 name="z";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="lg_z + LayerLayout[\"Z_Rel\"][row]";
		 };
		};
	       };
	       meth_sig="void SetAbsPos(int x, int y, int z)";
	       meth_desc=" set absolute position of layer, regardless of whether it is in a layer group or not - always relative to network 0,0,0";
	      };
	     };
	     case_val {
	      expr="LayerGroup";
	     };
	    };
	    CaseBlock @[2] {
	     desc=;
	     flags=0;
	     orig_prog_code=;
	     prog_code {
	      name="prog_code";
	      el_typ=ProgCode;
	      el_def=0;
	      AssignExpr @[0] {
	       desc=;
	       flags=CAN_REVERT_TO_CODE;
	       orig_prog_code="group_name = LayerLayout[\"LayerGroup\"][row]";
	       result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["group_name"]$;
	       expr {
		expr="LayerLayout[\"LayoutGroup\"][row]";
	       };
	      };
	      If @[1] {
	       desc=;
	       flags=0;
	       orig_prog_code="if(group_name.nonempty())";
	       cond {
		expr="group_name.nonempty()";
	       };
	       true_code {
		name="true_code";
		el_typ=ProgCode;
		el_def=0;
		MethodCall @[0] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lgrow = LayerLayout.FindVal()";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lgrow"]$;
		 obj=$.projects["layer_positioning"].programs["PositionLayersFromTable"].vars["LayerLayout"]$;
		 method=DataTable::FindVal;
		 meth_args {
		  name="meth_args";
		  el_typ=ProgArg;
		  el_def=0;
		  ProgArg @[0] {
		   arg_type=const_Variant_ref;
		   type="Variant&";
		   name="val";
		   required=1;
		   def_val=;
		   prev_expr=;
		   expr {
		    expr="group_name";
		   };
		  };
		  ProgArg @[1] {
		   arg_type=const_Variant_ref;
		   type="Variant&";
		   name="col";
		   required=1;
		   def_val=;
		   prev_expr=;
		   expr {
		    expr="\"LayoutGroup\"";
		   };
		  };
		  ProgArg @[2] {
		   arg_type=int;
		   type="int";
		   name="st_row";
		   required=0;
		   def_val="0";
		   prev_expr=;
		   expr {
		    expr="0";
		   };
		  };
		  ProgArg @[3] {
		   arg_type=bool;
		   type="bool";
		   name="not_found_err";
		   required=0;
		   def_val="false";
		   prev_expr=;
		   expr {
		    expr="true";
		   };
		  };
		 };
		 meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
		 meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
		};
		AssignExpr @[1] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$;
		 expr {
		  expr="LayerLayout[\"X_Abs\"][lgrow]";
		 };
		};
		AssignExpr @[2] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$;
		 expr {
		  expr="LayerLayout[\"Y_Abs\"][lgrow]";
		 };
		};
		AssignExpr @[3] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$;
		 expr {
		  expr="LayerLayout[\"Z_Abs\"][lgrow]";
		 };
		};
	       };
	      };
	      Else @[2] {
	       desc=;
	       flags=0;
	       orig_prog_code="else";
	       else_code {
		name="else_code";
		el_typ=ProgCode;
		el_def=0;
		AssignExpr @[0] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_x = 0";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$;
		 expr {
		  expr="0";
		 };
		};
		AssignExpr @[1] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_y = 0";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$;
		 expr {
		  expr="0";
		 };
		};
		AssignExpr @[2] {
		 desc=;
		 flags=CAN_REVERT_TO_CODE;
		 orig_prog_code="lg_z = 0";
		 result_var=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$;
		 expr {
		  expr="0";
		 };
		};
	       };
	      };
	      MethodCall @[3] {
	       desc=;
	       flags=CAN_REVERT_TO_CODE;
	       orig_prog_code="current_layer.SetAbsPos(layer_layout[\"X_Abs\"][row])";
	       result_var=NULL;
	       obj=$.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
	       method=Layer::SetAbsPos;
	       meth_args {
		name="meth_args";
		el_typ=ProgArg;
		el_def=0;
		ProgArg @[0] {
		 arg_type=int;
		 type="int";
		 name="x";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="lg_x + LayerLayout[\"X_Rel\"][row]";
		 };
		};
		ProgArg @[1] {
		 arg_type=int;
		 type="int";
		 name="y";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="lg_y + LayerLayout[\"Y_Rel\"][row]";
		 };
		};
		ProgArg @[2] {
		 arg_type=int;
		 type="int";
		 name="z";
		 required=1;
		 def_val=;
		 prev_expr=;
		 expr {
		  expr="lg_z + LayerLayout[\"Z_Rel\"][row]";
		 };
		};
	       };
	       meth_sig="void SetAbsPos(int x, int y, int z)";
	       meth_desc=" set absolute position of layer, regardless of whether it is in a layer group or not - always relative to network 0,0,0";
	      };
	     };
	     case_val {
	      expr="LayoutGroup";
	     };
	    };
	   };
	  };
	 };
	};
       };
       init {
	expr="row = 0";
       };
       test {
	expr="row <LayerLayout.rows";
       };
       iter {
	expr="row++";
       };
      };
      MethodCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="network_0.Build()";
       result_var=NULL;
       obj=.projects["layer_positioning"].programs["PositionLayersFromTable"].args["network"]$$;
       method=LeabraNetwork::Build;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void Build()";
       meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    Switch @[0] {
     desc=;
     flags=0;
     orig_prog_code="switch(action)";
     switch_var=.projects["layer_positioning"].programs["PositionLayersFromTable"].args["action"]$$;
     cases {
      name="cases";
      el_typ=CaseBlock;
      el_def=0;
      CaseBlock @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	FunctionCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="fun GetCurrent()";
	 result_var=NULL;
	 fun=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["GetCurrent"]$$;
	 fun_args {
	  name="fun_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	};
       };
       case_val {
	expr="GetCurrentPos";
       };
      };
      CaseBlock @[1] {
       desc=;
       flags=0;
       orig_prog_code=;
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	FunctionCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 orig_prog_code="fun SetPos()";
	 result_var=NULL;
	 fun=.projects["layer_positioning"].programs["PositionLayersFromTable"].functions["SetPos"]$$;
	 fun_args {
	  name="fun_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	};
       };
       case_val {
	expr="SetPositions";
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_91";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 8 0=0.001591512;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 8 0=0.9724138;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 8 0=0.7994902;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABfgAAAqgAAAKoAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["layer_positioning"]$$;
   visible=1;
   win_name=".projects[\"LayerPositioningDemo\"] - layer_positioning.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_92";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["layer_positioning"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_93";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["Network_0"] {
       name="Network_0";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["Network_0_View"] {
	  name="Network_0_View";
	  m_data=$.projects["layer_positioning"].networks["Network_0"]$;
taTransform @*(.m_transform) {scale={x=3.049699: y=3.049699: z=3.049699: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=3.72529e-9: y=-4.444084e-9: z=-9.55366e-9: }: };
	  main_xform {scale={x=3.049699: y=3.049699: z=3.049699: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=3.72529e-9: y=-4.444084e-9: z=-9.55366e-9: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7: z=0.7: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0: y=1: z=-1: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[2][0].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=26: y=10: z=3.25: };
	  max_size2d {x=5: y=48: z=1: };
	  eff_max_size {x=26: y=10: z=3.25: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="bias.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[6] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="act_q0";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    var_name="act_q1";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    var_name="act_q2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    var_name="act_q3";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    var_name="act_q4";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ notInAGroup=-1;Output=-1;Output_2=-1;Hidden=-1;Hidden_2=-1;Hidden_3=-1;Input=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.524849: y=2.769116: z=5.071563: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=5.846347;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       name="EpochOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.465: y=0.5129999: z=1.637373: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.147373;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["TestTrialOutputData"] {
       name="TestTrialOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5: y=0.44875: z=1.270144: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.276394;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_94";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 8 0=0.008496176;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 8 0=0.0403183;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 8 0=0.7357689;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["Network_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_7";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="Network_0";
   desc=;
   specs {
    name="specs";
    el_typ=LeabraLayerSpec;
    el_def=0;
    LeabraLayerSpec @["HiddenLayer"] {
     name="HiddenLayer";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       name="Input_Output";
       is_used=1;
       desc=;
       unique{ lay_inhib;kwta;       };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       avg_act {init=0.1: fixed=0: tau=100: adjust=1: dt=0.01: };
       inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       lstats {
	cos_diff_avg_tau=100;
	hog_thr=0.3;
	dead_thr=0.01;
	cos_diff_avg_dt=0.01;
       };
       lay_lrate=1;
       lay_gp_inhib {on=0: gp_g=0.5: };
      };
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.1: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["layer_positioning"].networks["Network_0"].specs["LeabraConSpec_0"].children["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     v_m_init {name="v_m_init": type=NONE: mean=0.4: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=2: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: dt=0.1: lrn_fact=0.02368421: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.3: i=0.25: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_0"] {
       name="LeabraBiasSpec_0";
       is_used=1;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.02;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       ignore_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: dwt_norm=0: };
       fast_wts {on=0: nofast_lrate=2: decay_tau=6000: wt_tau=200: fast_lrate=10: decay_dt=0.0001666667: wt_dt=0.005: slow_lrate=0.1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
      LeabraConSpec @["TopDownCons"] {
       name="TopDownCons";
       is_used=1;
       desc="top-down connections from output layers down to hidden etc typically need to be weaker than bottom-up";
       unique{ wt_scale;wt_sig;       };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=0.2: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.02;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       ignore_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: dwt_norm=0: };
       fast_wts {on=0: nofast_lrate=2: decay_tau=6000: wt_tau=200: fast_lrate=10: decay_dt=0.0001666667: wt_dt=0.005: slow_lrate=0.1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.02;
     use_lrate_sched=1;
     cur_lrate=0.04;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=6000: wt_tau=200: fast_lrate=10: decay_dt=0.0001666667: wt_dt=0.005: slow_lrate=0.1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] {
     name="FullPrjnSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=26: y=10: z=4: };
    max_disp_size2d {x=5: y=48: };
    LeabraLayer @["notInAGroup"] {
     name="notInAGroup";
     desc=;
     flags=ABS_POS;
     layer_type=HIDDEN;
     pos {x=20: y=5: z=0: };
     pos_abs {x=20: y=5: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=1: n_not_xy=0: n=1: };
     disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["layer_positioning"].networks["Network_0"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1;
     acts_p_avg=0.1;
     acts_p_avg_eff=0.1;
     spec {type=LeabraLayerSpec: spec=.projects["layer_positioning"].networks["Network_0"].specs["HiddenLayer"]$$: };
    };
    Layer_Group @.gp["OutputGroup"] {
     name="OutputGroup";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=1: };
     pos2d {x=0: y=20: };
     max_disp_size {x=26: y=5: z=1: };
     max_disp_size2d {x=5: y=5: };
     LeabraLayer @["Output"] {
      name="Output";
      desc=;
      flags=ABS_POS;
      layer_type=TARGET;
      pos {x=0: y=0: z=0: };
      pos_abs {x=0: y=0: z=1: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=20: };
      disp_scale=1;
      un_geom {x=5: y=5: n_not_xy=0: n=25: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=5: y=5: n_not_xy=0: n=25: };
      disp_geom {x=5: y=5: n_not_xy=0: n=25: };
      scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_Hidden"] {
	name="Fm_Hidden";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["layer_positioning"].networks["Network_0"].layers.gp["HiddenGroup"]["Hidden"]$$;
	spec {type=FullPrjnSpec: spec=.projects["layer_positioning"].networks["Network_0"].specs["FullPrjnSpec_0"]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["layer_positioning"].networks["Network_0"].layers.gp["HiddenGroup"]["Hidden"].projections["Fm_Output"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
      dist {
       fm_input=2;
       fm_output=0;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.1;
      acts_p_avg=0.1;
      acts_p_avg_eff=0.1;
      spec {type=LeabraLayerSpec: spec=.projects["layer_positioning"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$$: };
     };
     LeabraLayer @["Output_2"] {
      name="Output_2";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=25: y=0: z=0: };
      pos_abs {x=25: y=0: z=1: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=20: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=0;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.1;
      acts_p_avg=0.1;
      acts_p_avg_eff=0.1;
      spec {type=LeabraLayerSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["HiddenLayer"]$: };
     };
    };
    Layer_Group @.gp["HiddenGroup"] {
     name="HiddenGroup";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=2: };
     pos2d {x=0: y=20: };
     max_disp_size {x=21: y=10: z=1: };
     max_disp_size2d {x=5: y=21: };
     LeabraLayer @["Hidden"] {
      name="Hidden";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=0: };
      pos_abs {x=0: y=0: z=2: };
      pos2d {x=0: y=13: };
      pos2d_abs {x=0: y=33: };
      disp_scale=1;
      un_geom {x=5: y=5: n_not_xy=0: n=25: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=5: y=5: n_not_xy=0: n=25: };
      disp_geom {x=5: y=5: n_not_xy=0: n=25: };
      scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_Input"] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["layer_positioning"].networks["Network_0"].layers.gp["InputGroup"]["Input"]$$;
	spec {type=FullPrjnSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Fm_Output"] {
	name="Fm_Output";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["layer_positioning"].networks["Network_0"].layers.gp["OutputGroup"]["Output"]$$;
	spec {type=FullPrjnSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.projects["layer_positioning"].networks["Network_0"].specs["LeabraConSpec_0"].children["TopDownCons"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["layer_positioning"].networks["Network_0"].layers.gp["OutputGroup"]["Output"].projections["Fm_Hidden"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
      dist {
       fm_input=1;
       fm_output=1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.1;
      acts_p_avg=0.1;
      acts_p_avg_eff=0.1;
      spec {type=LeabraLayerSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["HiddenLayer"]$: };
     };
     LeabraLayer @["Hidden_2"] {
      name="Hidden_2";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=10: y=5: z=0: };
      pos_abs {x=10: y=5: z=2: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=20: };
      disp_scale=1;
      un_geom {x=5: y=5: n_not_xy=0: n=25: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=5: y=5: n_not_xy=0: n=25: };
      disp_geom {x=5: y=5: n_not_xy=0: n=25: };
      scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=0;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.1;
      acts_p_avg=0.1;
      acts_p_avg_eff=0.1;
      spec {type=LeabraLayerSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["HiddenLayer"]$: };
     };
     LeabraLayer @["Hidden_3"] {
      name="Hidden_3";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=20: y=0: z=0: };
      pos_abs {x=20: y=0: z=2: };
      pos2d {x=0: y=20: };
      pos2d_abs {x=0: y=40: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=0;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
      dist {
       fm_input=-1;
       fm_output=-1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.1;
      acts_p_avg=0.1;
      acts_p_avg_eff=0.1;
      spec {type=LeabraLayerSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["HiddenLayer"]$: };
     };
    };
    Layer_Group @.gp["InputGroup"] {
     name="InputGroup";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=5: y=2: z=3: };
     pos2d {x=0: y=43: };
     max_disp_size {x=5: y=5: z=1: };
     max_disp_size2d {x=5: y=5: };
     LeabraLayer @["Input"] {
      name="Input";
      desc=;
      flags=ABS_POS;
      layer_type=INPUT;
      pos {x=0: y=0: z=0: };
      pos_abs {x=5: y=2: z=3: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=43: };
      disp_scale=1;
      un_geom {x=5: y=5: n_not_xy=0: n=25: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=5: y=5: n_not_xy=0: n=25: };
      disp_geom {x=5: y=5: n_not_xy=0: n=25: };
      scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["layer_positioning"].networks["Network_0"].layers.gp["HiddenGroup"]["Hidden"].projections["Fm_Input"];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
      dist {
       fm_input=0;
       fm_output=2;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.1;
      acts_p_avg=0.1;
      acts_p_avg_eff=0.1;
      spec {type=LeabraLayerSpec: spec=$.projects["layer_positioning"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=MANUAL_POS|ABS_POS|BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=2.298735696848069e-314;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
    LeabraNetTiming @[0] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[1] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[2] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[3] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[4] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=103;
   n_cons=1875;
   max_prjns=2;
   max_disp_size {x=26: y=10: z=4: };
   max_disp_size2d {x=5: y=48: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=1;
    trial_decay=1;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};

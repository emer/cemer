// ta_Dump File v3.0 -- code v7.8.2.0 rev8589
LeabraProject .projects["projection_sampler"] { 
 Doc_Group @.docs = [1] {
  taDoc @["ProjectionSpecDocs"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [1] {
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_done.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_archive.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] { 
  };
  DataTable_Group @.gp["OutputData"] { 
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [0] {
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [6] {
      T3Panel @["GaussRF"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_GaussRF_root_view_children_0"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [2] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Tessel"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_Tessel_root_view_children_0"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [2] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["TiledRF"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_TiledRF_root_view_children_0"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [3] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Random"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_Random_root_view_children_0"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [2] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["RandomLarge"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_RandomLarge_root_view_children_0"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [2] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["GpRndTessel"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["GpRndTessel_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [2] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [6] {
  LeabraNetwork @["GaussRF"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [8] {
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    GaussRFPrjnSpec @["GaussRF_HalfOvlp4x4"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    GaussRFPrjnSpec @["GaussRF_NoOvlp4x4"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    GaussRFPrjnSpec @["GaussRF_SelfPrjn"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjn"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @["Sender"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [144] {
     };
    };
    LeabraLayer @["HalfOvlp4x4"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [25] {
     };
    };
    LeabraLayer @["NoOvlp4x4"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [9] {
     };
    };
    LeabraLayer @["Self"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Self"] { };
     };

     Unit_Group @.units = [100] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [5] {
    LeabraNetTiming @[0] { };
    LeabraNetTiming @[1] { };
    LeabraNetTiming @[2] { };
    LeabraNetTiming @[3] { };
    LeabraNetTiming @[4] { };
   };
  };
  LeabraNetwork @["Tessel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [8] {
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    TesselPrjnSpec @["Tessel_EllipseHalfOvlp"] { 
     BaseSpec_Group @.children = [0] {
     };

     TessEl_List @.send_offs = [13] {
      TessEl @[0] { };
      TessEl @[1] { };
      TessEl @[2] { };
      TessEl @[3] { };
      TessEl @[4] { };
      TessEl @[5] { };
      TessEl @[6] { };
      TessEl @[7] { };
      TessEl @[8] { };
      TessEl @[9] { };
      TessEl @[10] { };
      TessEl @[11] { };
      TessEl @[12] { };
     };
    };
    TesselPrjnSpec @["Tessel_Grouped_4x4HalfOvlp"] { 
     BaseSpec_Group @.children = [0] {
     };

     TessEl_List @.send_offs = [16] {
      TessEl @[0] { };
      TessEl @[1] { };
      TessEl @[2] { };
      TessEl @[3] { };
      TessEl @[4] { };
      TessEl @[5] { };
      TessEl @[6] { };
      TessEl @[7] { };
      TessEl @[8] { };
      TessEl @[9] { };
      TessEl @[10] { };
      TessEl @[11] { };
      TessEl @[12] { };
      TessEl @[13] { };
      TessEl @[14] { };
      TessEl @[15] { };
     };
    };
    TesselPrjnSpec @["Tessel_EllipseSelf"] { 
     BaseSpec_Group @.children = [0] {
     };

     TessEl_List @.send_offs = [49] {
      TessEl @[0] { };
      TessEl @[1] { };
      TessEl @[2] { };
      TessEl @[3] { };
      TessEl @[4] { };
      TessEl @[5] { };
      TessEl @[6] { };
      TessEl @[7] { };
      TessEl @[8] { };
      TessEl @[9] { };
      TessEl @[10] { };
      TessEl @[11] { };
      TessEl @[12] { };
      TessEl @[13] { };
      TessEl @[14] { };
      TessEl @[15] { };
      TessEl @[16] { };
      TessEl @[17] { };
      TessEl @[18] { };
      TessEl @[19] { };
      TessEl @[20] { };
      TessEl @[21] { };
      TessEl @[22] { };
      TessEl @[23] { };
      TessEl @[24] { };
      TessEl @[25] { };
      TessEl @[26] { };
      TessEl @[27] { };
      TessEl @[28] { };
      TessEl @[29] { };
      TessEl @[30] { };
      TessEl @[31] { };
      TessEl @[32] { };
      TessEl @[33] { };
      TessEl @[34] { };
      TessEl @[35] { };
      TessEl @[36] { };
      TessEl @[37] { };
      TessEl @[38] { };
      TessEl @[39] { };
      TessEl @[40] { };
      TessEl @[41] { };
      TessEl @[42] { };
      TessEl @[43] { };
      TessEl @[44] { };
      TessEl @[45] { };
      TessEl @[46] { };
      TessEl @[47] { };
      TessEl @[48] { };
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjn"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @["Sender"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [144] {
     };
    };
    LeabraLayer @["EllipseHalfOvlp"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [16] {
     };
    };
    LeabraLayer @["Grouped_4x4HalfOvlp"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [100] {
     };
    };
    LeabraLayer @["Self"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Self"] { };
     };

     Unit_Group @.units = [100] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [5] {
    LeabraNetTiming @[0] { };
    LeabraNetTiming @[1] { };
    LeabraNetTiming @[2] { };
    LeabraNetTiming @[3] { };
    LeabraNetTiming @[4] { };
   };
  };
  LeabraNetwork @["TiledRF"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [10] {
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjn"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    TiledRFPrjnSpec @["TiledRF_4x4HalfOvlp"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    TiledNovlpPrjnSpec @["TiledNovlp"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    GpMapConvergePrjnSpec @["GpMapConverge"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    TiledGpMapConvergePrjnSpec @["TiledGpMapConverge"] { 
     BaseSpec_Group @.children = [1] {
      TiledGpMapConvergePrjnSpec @["TiledGpMapConverge_Recip"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    TiledGpRFPrjnSpec @["TiledGpRF"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [6] {
    LeabraLayer @["Sender"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [144] {
     };
    };
    LeabraLayer @["Tiled_4x4HalfOvlp"] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @["Fm_Sender"] { };
      LeabraPrjn @["Fm_TiledGpMapConverge"] { };
     };

     Unit_Group @.units = [900] {
     };
    };
    LeabraLayer @["Tiled_NoOvlp"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [36] {
     };
    };
    LeabraLayer @["GpMapConverge"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Tiled_4x4HalfOvlp"] { };
     };

     Unit_Group @.units = [36] {
     };
    };
    LeabraLayer @["TiledGpMapConverge"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Tiled_4x4HalfOvlp"] { };
     };

     Unit_Group @.units = [144] {
     };
    };
    LeabraLayer @["TiledGpRF"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Tiled_4x4HalfOvlp"] { };
     };

     Unit_Group @.units = [144] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [5] {
    LeabraNetTiming @[0] { };
    LeabraNetTiming @[1] { };
    LeabraNetTiming @[2] { };
    LeabraNetTiming @[3] { };
    LeabraNetTiming @[4] { };
   };
  };
  LeabraNetwork @["Random"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [8] {
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjn"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    UniformRndPrjnSpec @["UniformRnd_p25"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    UniformRndPrjnSpec @["UniformRnd_p05"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    PolarRndPrjnSpec @["PolarRnd_p05"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @["Sender"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [144] {
     };
    };
    LeabraLayer @["UniformRandom_p25"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [36] {
     };
    };
    LeabraLayer @["UniformRandom_p05"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [36] {
     };
    };
    LeabraLayer @["PolarRandom_p05"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [36] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [5] {
    LeabraNetTiming @[0] { };
    LeabraNetTiming @[1] { };
    LeabraNetTiming @[2] { };
    LeabraNetTiming @[3] { };
    LeabraNetTiming @[4] { };
   };
  };
  LeabraNetwork @["RandomLarge"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [8] {
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjn"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    UniformRndPrjnSpec @["UniformRnd_p25"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    UniformRndPrjnSpec @["UniformRnd_p05"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    PolarRndPrjnSpec @["PolarRnd_p05"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @["Sender"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [0] {
     };
    };
    LeabraLayer @["UniformRandom_p25"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [0] {
     };
    };
    LeabraLayer @["UniformRandom_p05"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [0] {
     };
    };
    LeabraLayer @["PolarRandom_p05"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [0] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [0] {
   };
  };
  LeabraNetwork @["GpRndTessel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [9] {
    LeabraUnitSpec @["LeabraUnitSpec_5"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_5"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @["LeabraLayerSpec_5"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    GpRndTesselPrjnSpec @["GpRndTessel_Full"] { 
     BaseSpec_Group @.children = [0] {
     };

     GpTessEl_List @.send_gp_offs = [4] {
      GpTessEl @[0] { };
      GpTessEl @[1] { };
      GpTessEl @[2] { };
      GpTessEl @[3] { };
     };
    };
    GpRndTesselPrjnSpec @["GpRndTessel_p25"] { 
     BaseSpec_Group @.children = [0] {
     };

     GpTessEl_List @.send_gp_offs = [4] {
      GpTessEl @[0] { };
      GpTessEl @[1] { };
      GpTessEl @[2] { };
      GpTessEl @[3] { };
     };
    };
    GpRndTesselPrjnSpec @["GpRndTessel_Self_p25"] { 
     BaseSpec_Group @.children = [0] {
     };

     GpTessEl_List @.send_gp_offs = [1] {
      GpTessEl @[0] { };
     };
    };
    FullPrjnSpec @["FullPrjnSpec_5"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_5"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    GpMapConvergePrjnSpec @["GpAggregatePrjnSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @["Sender"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [225] {
     };
    };
    LeabraLayer @["GpRndTessel_full"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [16] {
     };
    };
    LeabraLayer @["GpRndTessel_p25"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [16] {
     };
    };
    LeabraLayer @["GpAggregate"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Sender"] { };
     };

     Unit_Group @.units = [25] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [5] {
    LeabraNetTiming @[0] { };
    LeabraNetTiming @[1] { };
    LeabraNetTiming @[2] { };
    LeabraNetTiming @[3] { };
    LeabraNetTiming @[4] { };
   };
  };
 };
};
LeabraProject .projects["projection_sampler"] {
 name="projection_sampler";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=;
 email=;
 license {
  owner="Regents of the University of Colorado";
  license=NO_LIC;
  org="CCNLab at the University of Colorado Boulder";
  year="2011";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @["ProjectionSpecDocs"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ProjectionSpecDocs";
   desc=;
   web_doc=1;
   wiki="emergent";
   url="ProjectionSpec";
   full_url="http://grey.colorado.edu/emergent/index.php/ProjectionSpec";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\"><title>ProjectionSpec - emergent</title>
<meta name=\"generator\" content=\"MediaWiki 1.22.14\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"ProjectionSpec\" href=\"/emergent/index.php?title=Special:ExportRDF/ProjectionSpec&amp;xmlmime=rdf\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<link rel=\"stylesheet\" href=\"https://grey.colorado.edu/emergent/load.php?debug=false&amp;lang=en&amp;modules=ext.rtlcite%7Cmediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins-jquery/ext.headertabs.jquery-large.css\"><meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"https://grey.colorado.edu/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*\">
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}.mw-editsection{display:none}
/* cache key: pdpwiki:resourceloader:filter:minify-css:7:d901f157ec9fff8ddab15d03002ebefd */</style>

<script src=\"https://grey.colorado.edu/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*\"></script><script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=20141215T005424Z\"></script>
<script>if(window.mw){
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"ProjectionSpec\",\"wgTitle\":\"ProjectionSpec\",\"wgCurRevisionId\":4508,\"wgRevisionId\":4508,\"wgArticleId\":301,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"ProjectionSpec\",\"wgIsProbablyEditable\":false,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":false,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"htTabIndexes\":[],\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgWikiEditorEnabledModules\":{\"toolbar\":true,\"dialogs\":true,\"hidesig\":true,\"templateEditor\":false,\"templates\":false,\"preview\":true,\"previewDialog\":false,\"publish\":false,\"toc\":false},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});
}</script><script>if(window.mw){
mw.loader.implement(\"user.options\",function(){mw.user.options.set({\"ccmeonemails\":0,\"cols\":80,\"date\":\"default\",\"diffonly\":0,\"disablemail\":0,\"disablesuggest\":0,\"editfont\":\"default\",\"editondblclick\":0,\"editsection\":false,\"editsectiononrightclick\":0,\"enotifminoredits\":0,\"enotifrevealaddr\":0,\"enotifusertalkpages\":1,\"enotifwatchlistpages\":0,\"extendwatchlist\":0,\"fancysig\":0,\"forceeditsummary\":0,\"gender\":\"unknown\",\"hideminor\":0,\"hidepatrolled\":0,\"imagesize\":2,\"justify\":0,\"math\":0,\"minordefault\":0,\"newpageshidepatrolled\":0,\"nocache\":0,\"noconvertlink\":0,\"norollbackdiff\":0,\"numberheadings\":0,\"previewonfirst\":0,\"previewontop\":1,\"rcdays\":7,\"rclimit\":50,\"rememberpassword\":0,\"rows\":25,\"searchlimit\":20,\"showhiddencats\":0,\"shownumberswatching\":1,\"showtoc\":1,\"showtoolbar\":1,\"skin\":\"vector\",\"stubthreshold\":0,\"thumbsize\":2,\"underline\":2,\"uselivepreview\":0,\"usenewrc\":0,\"vector-simplesearch\":1,\"watchcreations\":0,\"watchdefault\":0,\"watchdeletion\":0,\"watchlistdays\":3,\"watchlisthideanons\":0,\"watchlisthidebots\"
:0,\"watchlisthideliu\":0,\"watchlisthideminor\":0,\"watchlisthideown\":0,\"watchlisthidepatrolled\":0,\"watchmoves\":0,\"wllimit\":250,\"useeditwarning\":1,\"prefershttps\":1,\"vector-collapsiblenav\":1,\"vector-collapsibletabs\":1,\"vector-editwarning\":1,\"vector-expandablesearch\":1,\"vector-footercleanup\":1,\"usebetatoolbar\":1,\"usebetatoolbar-cgd\":1,\"wikieditor-preview\":1,\"upwiz_deflicense\":\"default\",\"upwiz_def3rdparty\":\"default\",\"upwiz_deflicensetype\":\"default\",\"language\":\"en\",\"variant-gan\":\"gan\",\"variant-iu\":\"iu\",\"variant-kk\":\"kk\",\"variant-ku\":\"ku\",\"variant-shi\":\"shi\",\"variant-sr\":\"sr\",\"variant-tg\":\"tg\",\"variant-uz\":\"uz\",\"variant-zh\":\"zh\",\"searchNs0\":true,\"searchNs1\":false,\"searchNs2\":false,\"searchNs3\":false,\"searchNs4\":false,\"searchNs5\":false,\"searchNs6\":false,\"searchNs7\":false,\"searchNs8\":false,\"searchNs9\":false,\"searchNs10\":false,\"searchNs11\":false,\"searchNs12\":false,\"searchNs13\":false,\"searchNs14\":false,\"searchNs15\":false,\"searchNs102\":false,\"searchNs103\":false,\"searchNs106\":false,\"searchNs107\":false
,\"searchNs108\":false,\"searchNs109\":false,\"searchNs500\":false,\"searchNs501\":false,\"extensionDrafts_enable\":true,\"variant\":\"en\"});},{},{});mw.loader.implement(\"user.tokens\",function(){mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":false,\"watchToken\":false});},{},{});
/* cache key: pdpwiki:resourceloader:filter:minify-js:7:29a96f854efc7725dc408d12e26e7835 */
}</script>
<script>if(window.mw){
mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"mediawiki.legacy.ajax\",\"skins.vector.js\"]);
}</script><script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=ext.jquery.qtip%7Cext.smw%7Cext.smw.style%2Ctooltip%2Ctooltips%7Cext.smw.tooltip.styles&amp;skin=vector&amp;version=20150419T081543Z&amp;*\"></script><script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery.async%2Cclient%2Ccookie%2CdelayedBind%2CmwExtension%7Cmediawiki.legacy.ajax%2Cwikibits%7Cmediawiki.notify%2Cutil%7Cmediawiki.page.startup%7Cskins.vector.js&amp;skin=vector&amp;version=20150419T081544Z&amp;*\"></script>
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/vector/csshover.min.htc\")}</style><![endif]--><script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=ext.Drafts%2Ccite%2Cheadertabs%7Cjquery.autoEllipsis%2CcheckboxShiftClick%2Chidpi%2ChighlightText%2CmakeCollapsible%2Cmw-jump%2Cplaceholder%2Csuggestions%2CtabIndex%7Cmediawiki.action.view.postEdit%7Cmediawiki.api%2Ccldr%2Chidpi%2CjqueryMsg%2Clanguage%2CsearchSuggest%2Cuser%7Cmediawiki.language.data%2Cinit%7Cmediawiki.libs.pluralruleparser%7Cmediawiki.page.ready%7Cskins.vector.collapsibleNav&amp;skin=vector&amp;version=20150809T180531Z&amp;*\"></script><script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery.ui.core%2Ctabs%2Cwidget&amp;skin=vector&amp;version=20150208T001329Z&amp;*\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-ProjectionSpec skin-vector action-view vector-animateLayout\">
		<div id=\"mw-page-base\" class=\"noprint\"><a href=\"http://grey.colorado.edu/emergent\"><img src=\"http://grey.colorado.edu/mediawiki/sites/emergent/images/6/6b/emergent_small.png\"></a></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>
			<div id=\"mw-js-message\" style=\"display:none;\"></div>
						<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\"><span dir=\"auto\">ProjectionSpec</span></h1>
			<div id=\"bodyContent\">
								<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-navigation\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><div style=\"width: 50%;padding-left: 15px; border:2px solid #000000;\">Reference info for type <strong>ProjectionSpec</strong>: <a href=\"http://grey.colorado.edu/gendoc/emergent/ProjectionSpec.html\">Wiki</a> | <a href=\"ta:.Type.ProjectionSpec\">Emergent Help Browser</a></div> <div style=\"width: 50%;padding-left: 15px; border:2px solid #000000;\">Reference info for type <strong>Projection</strong>: <a href=\"http://grey.colorado.edu/gendoc/emergent/Projection.html\">Wiki</a> | <a href=\"ta:.Type.Projection\">Emergent Help Browser</a></div>
<p>The ProjectionSpec is connected to one or more Projections to specify a pattern of connectivity.  The simplest case is a FullPrjnSpec, which specifies full connectivity, but there are many other types.  For now, the best documentation is just the reference information for each type of  -- click on that link and then on its children to find specific types.  There is also more detailed info below on some specs that require more of an explanation.
</p>
<div id=\"toc\" class=\"toc\"><div id=\"toctitle\"><h2>Contents</h2><span class=\"toctoggle\">&nbsp;[<a href=\"#\" class=\"internal\" id=\"togglelink\">hide</a>]&nbsp;</span></div>
<ul>
<li class=\"toclevel-1 tocsection-1\"><a href=\"#Specific_Projection_Types\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Specific Projection Types</span></a></li>
<li class=\"toclevel-1 tocsection-2\"><a href=\"#Projection_Spec_Choice_Guide\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Projection Spec Choice Guide</span></a>
<ul>
<li class=\"toclevel-2 tocsection-3\"><a href=\"#Receptive_Fields\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Receptive Fields</span></a>
<ul>
<li class=\"toclevel-3 tocsection-4\"><a href=\"#No_Recv_Unit_Groups\"><span class=\"tocnumber\">2.1.1</span> <span class=\"toctext\">No Recv Unit Groups</span></a></li>
<li class=\"toclevel-3 tocsection-5\"><a href=\"#Recv_Unit_Groups\"><span class=\"tocnumber\">2.1.2</span> <span class=\"toctext\">Recv Unit Groups</span></a></li>
</ul>
</li>
<li class=\"toclevel-2 tocsection-6\"><a href=\"#Various_Flavors_of_Random\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Various Flavors of Random</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class=\"mw-headline\" id=\"Specific_Projection_Types\">Specific Projection Types</span></h2>
<ul>
<li> <a href=\"/emergent/index.php/TesselPrjnSpec\" title=\"TesselPrjnSpec\">TesselPrjnSpec</a> -- connects two layers using tesselations (repeated patterns) of connectivity
</li>
<li> <a href=\"/emergent/index.php/ScriptPrjnSpec\" title=\"ScriptPrjnSpec\">ScriptPrjnSpec</a>  -- allows you to define any arbitrary patterns of connectivity by writing <a href=\"/emergent/index.php/css\" title=\"css\" class=\"mw-redirect\">css</a> script code.
</li>
</ul>
<h2><span class=\"mw-headline\" id=\"Projection_Spec_Choice_Guide\">Projection Spec Choice Guide</span></h2>
<p>Choosing the right projection spec can be difficult given the large number of options.  This guide attempts to help..
</p><p>See the <a href=\"/emergent/index.php/demo\" title=\"demo\" class=\"mw-redirect\">demo</a> project: <code>demo/network_misc/projection_sampler.proj</code> for networks that demonstrate the use of the most popular of the following projection specs -- allows for interactive exploration as well.
</p><p>First, some things are easy, like full connectivity (<a href=\"/emergent/index.php/FullPrjnSpec\" title=\"FullPrjnSpec\">FullPrjnSpec</a>) and one-to-one connectivity (<a href=\"/emergent/index.php/OneToOnePrjnSpec\" title=\"OneToOnePrjnSpec\">OneToOnePrjnSpec</a>), and the variant of that for unit groups, which connects entire unit groups to each other (<a href=\"/emergent/index.php/GpOneToOnePrjnSpec\" title=\"GpOneToOnePrjnSpec\">GpOneToOnePrjnSpec</a>).
</p><p>It is when you need a more complex pattern of partial connectivity that things get a bit more difficult.  The following sections consider options for various general categories of connectivity.
</p><p>If everything else fails, the <a href=\"/emergent/index.php/ScriptPrjnSpec\" title=\"ScriptPrjnSpec\">ScriptPrjnSpec</a> allows you to do anything, but requires programming.  The <a href=\"/emergent/index.php/TesselPrjnSpec\" title=\"TesselPrjnSpec\">TesselPrjnSpec</a> is the most flexible non-programming prjn spec, but it takes some effort to figure out.
</p>
<h3><span class=\"mw-headline\" id=\"Receptive_Fields\">Receptive Fields</span></h3>
<p>A major category of connectivity is when you want receiving units to have a \"receptive field\" (RF) window of connections from the sending layer -- i.e., a spatially contiguous subset of sending units, typically in the shape of a square or a circle.  The position of this window onto the sending layer moves with the position of the receiving unit, resulting in a <b>topographic</b> pattern of connectivity.  This seems to be the default connectivity pattern in the brain.
</p><p>One major subdivision in these specs is whether they depend on having the receiving units organized into unit groups, where each such group shares a common pattern of connectivity.  This is analogous to the hypercolumn or minicolumn in the brain.
</p><p>The following list is organized in rough order of complexity, with simplest first -- use the simplest one that fits your needs, and you may need to experiment a bit to find the right one.
</p>
<h4><span class=\"mw-headline\" id=\"No_Recv_Unit_Groups\">No Recv Unit Groups</span></h4>
<ul>
<li> <a href=\"/emergent/index.php/GaussRFPrjnSpec\" title=\"GaussRFPrjnSpec\">GaussRFPrjnSpec</a> -- this is perhaps the simplest RF prjn spec -- it creates a square RF window of a specified width, and that window moves a fixed amount for every increment in receiving unit position, allowing for overlapping and non-overlapping connections, and it (optionally) initializes the weights to a gaussian function of the distance from the center of the receptive field.  This is useful for self-projections too where you want to introduce some topography into the receiving layer, such that neighboring units tend to represent similar things (as in the Kohonen-style self-organizing map).
</li>
</ul>
<ul>
<li> <a href=\"/emergent/index.php/TesselPrjnSpec\" title=\"TesselPrjnSpec\">TesselPrjnSpec</a> -- allows more complex prjn patterns (ellipses, or any arbitrary shape), and does not use unit groups -- can also set gaussian weights
</li>
</ul>
<h4><span class=\"mw-headline\" id=\"Recv_Unit_Groups\">Recv Unit Groups</span></h4>
<ul>
<li> <a href=\"/emergent/index.php/TiledNovlpPrjnSpec\" title=\"TiledNovlpPrjnSpec\">TiledNovlpPrjnSpec</a> -- this is a fully automatic projection (no parameters) that connects unit groups with <b>non-overlapping</b> RF windows.
</li>
</ul>
<ul>
<li> <a href=\"/emergent/index.php/TiledRFPrjnSpec\" title=\"TiledRFPrjnSpec\">TiledRFPrjnSpec</a> -- a complex but very powerful spec for unit-group-based overlapping windows -- it automatically uses the relative sizes of the layers to compute the receptive field window sizes, etc, and can optionally apply to subsets of unit groups.
</li>
</ul>
<ul>
<li> <a href=\"/emergent/index.php/GpRndTesselPrjnSpec\" title=\"GpRndTesselPrjnSpec\">GpRndTesselPrjnSpec</a> -- does the same thing as TesselPrjnSpec but instead of operating on the level of individual units, it <b>operates on unit groups in both sending and receiving layers</b>, and then allows partial random connectivity (or not -- can also do full) for those connected groups -- compare to <a href=\"/emergent/index.php/RndGpOneToOnePrjnSpec\" title=\"RndGpOneToOnePrjnSpec\">RndGpOneToOnePrjnSpec</a>)
</li>
</ul>
<h3><span class=\"mw-headline\" id=\"Various_Flavors_of_Random\">Various Flavors of Random</span></h3>
<ul>
<li> <a href=\"/emergent/index.php/UniformRndPrjnSpec\" title=\"UniformRndPrjnSpec\">UniformRndPrjnSpec</a> -- no spatial constraints at all -- just randomly connects units with given probability.  
</li>
</ul>
<ul>
<li> <a href=\"/emergent/index.php/PolarRndPrjnSpec\" title=\"PolarRndPrjnSpec\">PolarRndPrjnSpec</a> -- introduces a polar coordinate system of distance and angle away from a given sending unit location, and probability of connection is function of these coordinates -- creates a random topographic connection (see also Receptive Fields section above).
</li>
</ul>
<ul>
<li> <a href=\"/emergent/index.php/RndGpOneToOnePrjnSpec\" title=\"RndGpOneToOnePrjnSpec\">RndGpOneToOnePrjnSpec</a> -- does one-to-one group-wise connectivity between sending and receiving layer (<b>both</b> must have unit groups) and then has partial random connectivity within those group-wise connections.
</li>
</ul>
<ul>
<li> <a href=\"/emergent/index.php/GpRndTesselPrjnSpec\" title=\"GpRndTesselPrjnSpec\">GpRndTesselPrjnSpec</a> -- does the same thing as TesselPrjnSpec but instead of operating on the level of individual units, it <b>operates on unit groups in both sending and receiving layers</b>, and then allows partial random connectivity (or not -- can also do full) for those connected groups -- compare to <a href=\"/emergent/index.php/RndGpOneToOnePrjnSpec\" title=\"RndGpOneToOnePrjnSpec\">RndGpOneToOnePrjnSpec</a>)
</li>
</ul>

<!-- 
NewPP limit report
CPU time usage: 0.038 seconds
Real time usage: 0.043 seconds
Preprocessor visited node count: 42/1000000
Preprocessor generated node count: 84/1000000
Post?expand include size: 226/2097152 bytes
Template argument size: 24/2097152 bytes
Highest expansion depth: 3/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:301-0!*!0!!en!*!* and timestamp 20150907151954
 -->
</div>								<div class=\"printfooter\">
				Retrieved from \"<a href=\"https://grey.colorado.edu/emergent/index.php?title=ProjectionSpec&amp;oldid=4508\">https://grey.colorado.edu/emergent/index.php?title=ProjectionSpec&amp;oldid=4508</a>\"				</div>
												<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>												<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>
			<div id=\"mw-head\">
				<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
	<h3 id=\"p-personal-label\">Personal tools</h3>
	<ul>
<li id=\"pt-createaccount\"><a href=\"/emergent/index.php?title=Special:UserLogin&amp;returnto=ProjectionSpec&amp;type=signup\">Create account</a></li><li id=\"pt-login\"><a href=\"/emergent/index.php?title=Special:UserLogin&amp;returnto=ProjectionSpec\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>	</ul>
</div>
				<div id=\"left-navigation\">
					<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
	<h3 id=\"p-namespaces-label\">Namespaces</h3>
	<ul>
					<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/ProjectionSpec\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
					<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:ProjectionSpec&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\">Discussion</a></span></li>
			</ul>
</div>
<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
	<h3 id=\"mw-vector-current-variant\">
		</h3>
	<h3 id=\"p-variants-label\" tabindex=\"0\"><span>Variants</span><a href=\"#\" tabindex=\"-1\"></a></h3>
	<div class=\"menu\">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id=\"right-navigation\">
					<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
	<h3 id=\"p-views-label\">Views</h3>
	<ul>
					<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/ProjectionSpec\">Read</a></span></li>
					<li id=\"ca-viewsource\"><span><a href=\"/emergent/index.php?title=ProjectionSpec&amp;action=edit\" title=\"This page is protected.
You can view its source [e]\" accesskey=\"e\">View source</a></span></li>
					<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=ProjectionSpec&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
			</ul>
</div>
<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">
	<h3 id=\"p-cactions-label\" tabindex=\"0\"><span>Actions</span><a href=\"#\" tabindex=\"-1\"></a></h3>
	<div class=\"menu\">
		<ul>
					</ul>
	</div>
</div>
<div id=\"p-search\" role=\"search\">
	<h3><label for=\"searchInput\">Search</label></h3>
	<form action=\"/emergent/index.php\" id=\"searchform\">
				<div id=\"simpleSearch\">
						<input name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\">						<button type=\"submit\" name=\"button\" title=\"Search the pages for this text\" id=\"searchButton\"><img src=\"/emergent/skins/vector/images/search-ltr.png?303\" alt=\"Search\" width=\"12\" height=\"13\"></button>								<input type=\"hidden\" name=\"title\" value=\"Special:Search\">
		</div>
	</form>
</div>
				</div>
			</div>
			<div id=\"mw-panel\">
					<div id=\"p-logo\" role=\"banner\"><a style=\"background-image: url(/mediawiki/sites//emergent/logo.png);\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
				<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
	<h3 id=\"p-navigation-label\">Navigation</h3>
	<div class=\"body\">
		<ul>
			<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li>
			<li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li>
			<li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li>
			<li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li>
			<li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li>
			<li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>
		</ul>
	</div>
</div>
<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
	<h3 id=\"p-tb-label\">Tools</h3>
	<div class=\"body\">
		<ul>
			<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/ProjectionSpec\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li>
			<li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/ProjectionSpec\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li>
			<li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li>
			<li id=\"t-permalink\"><a href=\"/emergent/index.php?title=ProjectionSpec&amp;oldid=4508\" title=\"Permanent link to this revision of the page\">Permanent link</a></li>
			<li id=\"t-info\"><a href=\"/emergent/index.php?title=ProjectionSpec&amp;action=info\">Page information</a></li>
			<li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/ProjectionSpec\" rel=\"smw-browse\">Browse properties</a></li>
		</ul>
	</div>
</div>
<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
	<h3 id=\"p-coll-print_export-label\">Print/export</h3>
	<div class=\"body\">
		<ul>
			<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=ProjectionSpec\">Create a book</a></li>
			<li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=ProjectionSpec&amp;oldid=4508&amp;writer=rl\">Download as PDF</a></li>
			<li id=\"t-print\"><a href=\"/emergent/index.php?title=ProjectionSpec&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 13 August 2009, at 11:09.</li>
											<li id=\"footer-info-viewcount\">This page has been accessed 2,113 times.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
					<li id=\"footer-poweredbyico\">
						<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/skins/common/images/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" width=\"88\" height=\"31\"></a>
						<a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>
					</li>
				</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({\"site\":\"loading\",\"user\":\"ready\",\"user.groups\":\"ready\"});
}</script>
<script>if(window.mw){
mw.loader.load([\"mediawiki.action.view.postEdit\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"ext.headertabs\",\"ext.Drafts\",\"ext.cite\",\"skins.vector.collapsibleNav\"],null,true);
}</script>
<script src=\"https://grey.colorado.edu/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*\"></script>
<!-- Served in 0.117 secs. -->
	

</body></html>";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_nodes=0;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=1;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_46";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 8 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 8 0=0.7994902;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABAAAAAfwAAAKMAQAAAAcBAAAAAQA=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["projection_sampler"]$$;
   visible=1;
   win_name=".projects[\"projection_sampler\"] - projection_sampler.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_47";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["projection_sampler"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_48";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["GaussRF"] {
       name="GaussRF";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_GaussRF_root_view_children_0"] {
	  name="projects_Project_0_viewers_Browser2_frames_T3Frames_frames_GaussRF_root_view_children_0";
	  m_data=.projects["projection_sampler"].networks["GaussRF"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ r.wt;	  };
	  unit_src_path=".layers[1].units[17]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=12: y=12: z=2.333333: };
	  max_size2d {x=22: y=24: z=1: };
	  eff_max_size {x=12: y=12: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Sender=0;HalfOvlp4x4=0;NoOvlp4x4=0;Self=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.424: y=0.7857856: z=1.554389: };
	 orient {x=-1.000018: y=0: z=0: rot=0.1339975: };
	 focal_dist=1.905099;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Tessel"] {
       name="Tessel";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_Tessel_root_view_children_0"] {
	  name="projects_Project_0_viewers_Browser2_frames_T3Frames_frames_Tessel_root_view_children_0";
	  m_data=.projects["projection_sampler"].networks["Tessel"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ r.wt;	  };
	  unit_src_path=".layers[2].units[32]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=16: y=16: z=2.333333: };
	  max_size2d {x=28: y=24: z=1: };
	  eff_max_size {x=16: y=16: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Sender=0;EllipseHalfOvlp=0;Grouped_4x4HalfOvlp=0;Self=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.434: y=0.7928977: z=1.361687: };
	 orient {x=-1.000004: y=0: z=0: rot=0.1979993: };
	 focal_dist=1.729205;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["TiledRF"] {
       name="TiledRF";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_TiledRF_root_view_children_0"] {
	  name="projects_Project_0_viewers_Browser2_frames_T3Frames_frames_TiledRF_root_view_children_0";
	  m_data=.projects["projection_sampler"].networks["TiledRF"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ r.wt;	  };
	  unit_src_path=".layers[5].units[73]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=44: y=34: z=2.333333: };
	  max_size2d {x=52: y=62: z=1: };
	  eff_max_size {x=44: y=34: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Sender=0;Tiled_4x4HalfOvlp=0;Tiled_NoOvlp=0;GpMapConverge=-1;TiledGpMapConverge=-1;TiledGpRF=-1;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.7544793: z=1.458035: };
	 orient {x=-1.000003: y=0: z=0: rot=0.1939993: };
	 focal_dist=1.860519;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Random"] {
       name="Random";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_Random_root_view_children_0"] {
	  name="projects_Project_0_viewers_Browser2_frames_T3Frames_frames_Random_root_view_children_0";
	  m_data=.projects["projection_sampler"].networks["Random"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ r.wt;	  };
	  unit_src_path=".layers[3].units[10]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=14: y=14: z=1.5: };
	  max_size2d {x=22: y=20: z=1: };
	  eff_max_size {x=14: y=14: z=1.5: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Sender=0;UniformRandom_p25=0;UniformRandom_p05=0;PolarRandom_p05=-1;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.7605507: z=1.583142: };
	 orient {x=-1.000004: y=0: z=0: rot=0.1639994: };
	 focal_dist=1.97795;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["RandomLarge"] {
       name="RandomLarge";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_Project_0_viewers_Browser2_frames_T3Frames_frames_RandomLarge_root_view_children_0"] {
	  name="projects_Project_0_viewers_Browser2_frames_T3Frames_frames_RandomLarge_root_view_children_0";
	  m_data=.projects["projection_sampler"].networks["RandomLarge"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ r.wt;	  };
	  unit_src_path=".layers[1].units[79]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=38: y=36: z=1.5: };
	  max_size2d {x=36: y=36: z=1: };
	  eff_max_size {x=38: y=36: z=1.5: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Sender=0;UniformRandom_p25=0;UniformRandom_p05=0;PolarRandom_p05=-1;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.7855068: z=1.460079: };
	 orient {x=-1.000002: y=0: z=0: rot=0.2359995: };
	 focal_dist=1.877551;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["GpRndTessel"] {
       name="GpRndTessel";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["GpRndTessel_View"] {
	  name="GpRndTessel_View";
	  m_data=.projects["projection_sampler"].networks["GpRndTessel"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7: z=0.7: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0: y=1: z=-1: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ r.wt;	  };
	  unit_src_path=".layers[3].units[6]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=21: y=17: z=1.5: };
	  max_size2d {x=19: y=24: z=1: };
	  eff_max_size {x=21: y=17: z=1.5: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Sender=-1;GpRndTessel_full=-1;GpRndTessel_p25=-1;GpAggregate=-1;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.6969911: z=1.358199: };
	 orient {x=-1.000003: y=0: z=0: rot=0.1519996: };
	 focal_dist=1.748597;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_49";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 8 0=0.008496176;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 8 0=0.0403183;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 8 0=0.7357689;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["GaussRF"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="GaussRF";
   desc="Demo's GaussRFPrjnSpec for both receptive field prjns and also self-projections";
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["projection_sampler"].networks["GaussRF"].specs["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0;
      t_r=6;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      eff_spk_thr=0.25;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="v_m_init": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=4: net_tau=1.428571: fast_cyc=0: vm_dt=0.25: net_dt=0.7000002: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: dt=0.1: lrn_fact=0.03214286: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.15: i=0.15: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.1;
      spike_gain=0.01;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=0: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] {
     name="LeabraBiasSpec_0";
     is_used=1;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     dwt_thresh=0.1;
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] {
     name="LeabraLayerSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.2: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    GaussRFPrjnSpec @["GaussRF_HalfOvlp4x4"] {
     name="GaussRF_HalfOvlp4x4";
     is_used=1;
     desc="half-overlapping (move = 1/2 width) 4x4 rf's -- half overlap is a good idea in general for smoothly covering space";
     unique{      };
     children {
      name="children";
      el_typ=GaussRFPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=1;
     set_scale=0;
     add_rnd_var=1;
     rf_width {x=4: y=4: };
     rf_move {x=2: y=2: };
     gauss_sigma=1;
     wrap=0;
     trg_recv_geom {x=5: y=5: };
     trg_send_geom {x=12: y=12: };
    };
    GaussRFPrjnSpec @["GaussRF_NoOvlp4x4"] {
     name="GaussRF_NoOvlp4x4";
     is_used=1;
     desc="no overlap (move = width) with 4x4 gaussian rf's";
     unique{      };
     children {
      name="children";
      el_typ=GaussRFPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=1;
     set_scale=0;
     add_rnd_var=0;
     rf_width {x=4: y=4: };
     rf_move {x=4: y=4: };
     gauss_sigma=1;
     wrap=0;
     trg_recv_geom {x=2: y=2: };
     trg_send_geom {x=12: y=12: };
    };
    GaussRFPrjnSpec @["GaussRF_SelfPrjn"] {
     name="GaussRF_SelfPrjn";
     is_used=1;
     desc="self-projection within Self layer -- good idea to use wrap for this in general, and odd rf width values";
     unique{      };
     children {
      name="children";
      el_typ=GaussRFPrjnSpec;
      el_def=0;
     };
     self_con=1;
     init_wts=1;
     set_scale=0;
     add_rnd_var=0;
     rf_width {x=7: y=7: };
     rf_move {x=1: y=1: };
     gauss_sigma=2;
     wrap=1;
     trg_recv_geom {x=4: y=4: };
     trg_send_geom {x=10: y=10: };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjn"] {
     name="FullPrjn";
     is_used=0;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=12: y=12: z=3: };
    max_disp_size2d {x=22: y=24: };
    LeabraLayer @["Sender"] {
     name="Sender";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=12: y=12: n_not_xy=0: n=144: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=12: y=12: n_not_xy=0: n=144: };
     scaled_disp_geom {x=12: y=12: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["GaussRF"].layers["HalfOvlp4x4"].projections["Fm_Sender"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projection_sampler"].networks["GaussRF"].layers["NoOvlp4x4"].projections["Fm_Sender"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["projection_sampler"].networks["GaussRF"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.projects["projection_sampler"].networks["GaussRF"].specs["LeabraLayerSpec_0"]$$: };
    };
    LeabraLayer @["HalfOvlp4x4"] {
     name="HalfOvlp4x4";
     desc="receives a half-overlapping 4x4 gaussian RF from Sender";
     flags=0;
     layer_type=HIDDEN;
     pos {x=1: y=6: z=1: };
     pos_abs {x=1: y=6: z=1: };
     pos2d {x=0: y=14: };
     pos2d_abs {x=0: y=14: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projection_sampler"].networks["GaussRF"].layers["Sender"]$$;
       spec {type=GaussRFPrjnSpec: spec=.projects["projection_sampler"].networks["GaussRF"].specs["GaussRF_HalfOvlp4x4"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["projection_sampler"].networks["GaussRF"].specs["LeabraConSpec_0"]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["NoOvlp4x4"] {
     name="NoOvlp4x4";
     desc="receives a non-overlapping 4x4 prjn from sender";
     flags=0;
     layer_type=HIDDEN;
     pos {x=8: y=6: z=1: };
     pos_abs {x=8: y=6: z=1: };
     pos2d {x=7: y=14: };
     pos2d_abs {x=7: y=14: };
     disp_scale=1;
     un_geom {x=3: y=3: n_not_xy=0: n=9: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=3: y=3: n_not_xy=0: n=9: };
     disp_geom {x=3: y=3: n_not_xy=0: n=9: };
     scaled_disp_geom {x=3: y=3: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["GaussRF"].layers["Sender"]$;
       spec {type=GaussRFPrjnSpec: spec=.projects["projection_sampler"].networks["GaussRF"].specs["GaussRF_NoOvlp4x4"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["Self"] {
     name="Self";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=12: y=14: };
     pos2d_abs {x=12: y=14: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Self"] {
       name="Fm_Self";
       off=0;
       disp=1;
       from_type=SELF;
       from=.projects["projection_sampler"].networks["GaussRF"].layers["Self"]$$;
       spec {type=GaussRFPrjnSpec: spec=.projects["projection_sampler"].networks["GaussRF"].specs["GaussRF_SelfPrjn"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["GaussRF"].layers["Self"].projections["Fm_Self"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["GaussRF"].specs["LeabraLayerSpec_0"]$: };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=1.004950033390163e-147;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
    LeabraNetTiming @[0] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[1] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[2] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[3] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[4] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=278;
   n_cons=5444;
   max_prjns=1;
   max_disp_size {x=12: y=12: z=3: };
   max_disp_size2d {x=22: y=24: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=0;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
  LeabraNetwork @["Tessel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="Tessel";
   desc="Demo's TesselPrjnSpec for both receptive field prjns and also self-projections";
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["projection_sampler"].networks["Tessel"].specs["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0;
      t_r=6;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      eff_spk_thr=0.25;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="v_m_init": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=4: net_tau=1.428571: fast_cyc=0: vm_dt=0.25: net_dt=0.7000002: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: dt=0.1: lrn_fact=0.03214286: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.15: i=0.15: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.1;
      spike_gain=0.01;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=0: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] {
     name="LeabraBiasSpec_0";
     is_used=1;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     dwt_thresh=0.1;
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] {
     name="LeabraLayerSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.2: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    TesselPrjnSpec @["Tessel_EllipseHalfOvlp"] {
     name="Tessel_EllipseHalfOvlp";
     is_used=1;
     desc="small 5x5 ellipse with half-ovlp roughly see last_cmds for how created -- send_scale is like rf_move in GaussRF.  send_off just adds a starting offset to keep it all in frame.  note that last sender row/col is not connected..";
     unique{      };
     children {
      name="children";
      el_typ=TesselPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=1;
     set_scale=0;
     add_rnd_var=0;
     recv_off {x=0: y=0: };
     recv_n {x=-1: y=-1: };
     recv_skip {x=1: y=1: };
     recv_group {x=1: y=1: };
     wrap=0;
     send_scale {x=2: y=2: };
     send_off {x=2: y=2: };
     send_offs {
      name="send_offs";
      el_typ=TessEl;
      el_def=0;
      TessEl @[0] {
       send_off {x=0: y=-2: };
       wt_val=0.3678795;
      };
      TessEl @[1] {
       send_off {x=-1: y=-1: };
       wt_val=0.4930687;
      };
      TessEl @[2] {
       send_off {x=0: y=-1: };
       wt_val=0.6065307;
      };
      TessEl @[3] {
       send_off {x=1: y=-1: };
       wt_val=0.4930687;
      };
      TessEl @[4] {
       send_off {x=-2: y=0: };
       wt_val=0.3678795;
      };
      TessEl @[5] {
       send_off {x=-1: y=0: };
       wt_val=0.6065307;
      };
      TessEl @[6] {
       send_off {x=0: y=0: };
       wt_val=1;
      };
      TessEl @[7] {
       send_off {x=1: y=0: };
       wt_val=0.6065307;
      };
      TessEl @[8] {
       send_off {x=2: y=0: };
       wt_val=0.3678795;
      };
      TessEl @[9] {
       send_off {x=-1: y=1: };
       wt_val=0.4930687;
      };
      TessEl @[10] {
       send_off {x=0: y=1: };
       wt_val=0.6065307;
      };
      TessEl @[11] {
       send_off {x=1: y=1: };
       wt_val=0.4930687;
      };
      TessEl @[12] {
       send_off {x=0: y=2: };
       wt_val=0.3678795;
      };
     };
     last_make_cmd="MakeEllipse( half_width=2, half_height=2, ctr_x=0, ctr_y=0)";
     last_weights_cmd="WeightsFromGausDist(scale=1, sigma=1)";
    };
    TesselPrjnSpec @["Tessel_Grouped_4x4HalfOvlp"] {
     name="Tessel_Grouped_4x4HalfOvlp";
     is_used=1;
     desc="has 2x2 grouped recv layer and 4x4 half-overlap rectangular RF -- note that you generally need to divide send_scale by the group values to achieve smooth coverage - so original 2 scale for half ovlp, divided by 2 group = 1 = scale used";
     unique{      };
     children {
      name="children";
      el_typ=TesselPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     recv_off {x=0: y=0: };
     recv_n {x=-1: y=-1: };
     recv_skip {x=1: y=1: };
     recv_group {x=2: y=2: };
     wrap=0;
     send_scale {x=1: y=1: };
     send_off {x=2: y=2: };
     send_offs {
      name="send_offs";
      el_typ=TessEl;
      el_def=0;
      TessEl @[0] {
       send_off {x=-2: y=-2: };
       wt_val=0.2431167;
      };
      TessEl @[1] {
       send_off {x=-1: y=-2: };
       wt_val=0.3269219;
      };
      TessEl @[2] {
       send_off {x=0: y=-2: };
       wt_val=0.3678795;
      };
      TessEl @[3] {
       send_off {x=1: y=-2: };
       wt_val=0.3269219;
      };
      TessEl @[4] {
       send_off {x=-2: y=-1: };
       wt_val=0.3269219;
      };
      TessEl @[5] {
       send_off {x=-1: y=-1: };
       wt_val=0.4930687;
      };
      TessEl @[6] {
       send_off {x=0: y=-1: };
       wt_val=0.6065307;
      };
      TessEl @[7] {
       send_off {x=1: y=-1: };
       wt_val=0.4930687;
      };
      TessEl @[8] {
       send_off {x=-2: y=0: };
       wt_val=0.3678795;
      };
      TessEl @[9] {
       send_off {x=-1: y=0: };
       wt_val=0.6065307;
      };
      TessEl @[10] {
       send_off {x=0: y=0: };
       wt_val=1;
      };
      TessEl @[11] {
       send_off {x=1: y=0: };
       wt_val=0.6065307;
      };
      TessEl @[12] {
       send_off {x=-2: y=1: };
       wt_val=0.3269219;
      };
      TessEl @[13] {
       send_off {x=-1: y=1: };
       wt_val=0.4930687;
      };
      TessEl @[14] {
       send_off {x=0: y=1: };
       wt_val=0.6065307;
      };
      TessEl @[15] {
       send_off {x=1: y=1: };
       wt_val=0.4930687;
      };
     };
     last_make_cmd="MakeRectangle(width=4, height=4, left=-2, bottom=-2)";
     last_weights_cmd="WeightsFromGausDist(scale=1, sigma=1)";
    };
    TesselPrjnSpec @["Tessel_EllipseSelf"] {
     name="Tessel_EllipseSelf";
     is_used=1;
     desc="larger ellipse with no offset, for self projection";
     unique{      };
     children {
      name="children";
      el_typ=TesselPrjnSpec;
      el_def=0;
     };
     self_con=1;
     init_wts=1;
     set_scale=0;
     add_rnd_var=0;
     recv_off {x=0: y=0: };
     recv_n {x=-1: y=-1: };
     recv_skip {x=1: y=1: };
     recv_group {x=1: y=1: };
     wrap=1;
     send_scale {x=1: y=1: };
     send_off {x=0: y=0: };
     send_offs {
      name="send_offs";
      el_typ=TessEl;
      el_def=0;
      TessEl @[0] {
       send_off {x=0: y=-4: };
       wt_val=0.2493522;
      };
      TessEl @[1] {
       send_off {x=-2: y=-3: };
       wt_val=0.2859531;
      };
      TessEl @[2] {
       send_off {x=-1: y=-3: };
       wt_val=0.3335331;
      };
      TessEl @[3] {
       send_off {x=0: y=-3: };
       wt_val=0.3528661;
      };
      TessEl @[4] {
       send_off {x=1: y=-3: };
       wt_val=0.3335331;
      };
      TessEl @[5] {
       send_off {x=2: y=-3: };
       wt_val=0.2859531;
      };
      TessEl @[6] {
       send_off {x=-3: y=-2: };
       wt_val=0.2859531;
      };
      TessEl @[7] {
       send_off {x=-2: y=-2: };
       wt_val=0.3745265;
      };
      TessEl @[8] {
       send_off {x=-1: y=-2: };
       wt_val=0.4600535;
      };
      TessEl @[9] {
       send_off {x=0: y=-2: };
       wt_val=0.4993518;
      };
      TessEl @[10] {
       send_off {x=1: y=-2: };
       wt_val=0.4600535;
      };
      TessEl @[11] {
       send_off {x=2: y=-2: };
       wt_val=0.3745265;
      };
      TessEl @[12] {
       send_off {x=3: y=-2: };
       wt_val=0.2859531;
      };
      TessEl @[13] {
       send_off {x=-3: y=-1: };
       wt_val=0.3335331;
      };
      TessEl @[14] {
       send_off {x=-2: y=-1: };
       wt_val=0.4600535;
      };
      TessEl @[15] {
       send_off {x=-1: y=-1: };
       wt_val=0.6119857;
      };
      TessEl @[16] {
       send_off {x=0: y=-1: };
       wt_val=0.7066483;
      };
      TessEl @[17] {
       send_off {x=1: y=-1: };
       wt_val=0.6119857;
      };
      TessEl @[18] {
       send_off {x=2: y=-1: };
       wt_val=0.4600535;
      };
      TessEl @[19] {
       send_off {x=3: y=-1: };
       wt_val=0.3335331;
      };
      TessEl @[20] {
       send_off {x=-4: y=0: };
       wt_val=0.2493522;
      };
      TessEl @[21] {
       send_off {x=-3: y=0: };
       wt_val=0.3528661;
      };
      TessEl @[22] {
       send_off {x=-2: y=0: };
       wt_val=0.4993518;
      };
      TessEl @[23] {
       send_off {x=-1: y=0: };
       wt_val=0.7066483;
      };
      TessEl @[24] {
       send_off {x=0: y=0: };
       wt_val=1;
      };
      TessEl @[25] {
       send_off {x=1: y=0: };
       wt_val=0.7066483;
      };
      TessEl @[26] {
       send_off {x=2: y=0: };
       wt_val=0.4993518;
      };
      TessEl @[27] {
       send_off {x=3: y=0: };
       wt_val=0.3528661;
      };
      TessEl @[28] {
       send_off {x=4: y=0: };
       wt_val=0.2493522;
      };
      TessEl @[29] {
       send_off {x=-3: y=1: };
       wt_val=0.3335331;
      };
      TessEl @[30] {
       send_off {x=-2: y=1: };
       wt_val=0.4600535;
      };
      TessEl @[31] {
       send_off {x=-1: y=1: };
       wt_val=0.6119857;
      };
      TessEl @[32] {
       send_off {x=0: y=1: };
       wt_val=0.7066483;
      };
      TessEl @[33] {
       send_off {x=1: y=1: };
       wt_val=0.6119857;
      };
      TessEl @[34] {
       send_off {x=2: y=1: };
       wt_val=0.4600535;
      };
      TessEl @[35] {
       send_off {x=3: y=1: };
       wt_val=0.3335331;
      };
      TessEl @[36] {
       send_off {x=-3: y=2: };
       wt_val=0.2859531;
      };
      TessEl @[37] {
       send_off {x=-2: y=2: };
       wt_val=0.3745265;
      };
      TessEl @[38] {
       send_off {x=-1: y=2: };
       wt_val=0.4600535;
      };
      TessEl @[39] {
       send_off {x=0: y=2: };
       wt_val=0.4993518;
      };
      TessEl @[40] {
       send_off {x=1: y=2: };
       wt_val=0.4600535;
      };
      TessEl @[41] {
       send_off {x=2: y=2: };
       wt_val=0.3745265;
      };
      TessEl @[42] {
       send_off {x=3: y=2: };
       wt_val=0.2859531;
      };
      TessEl @[43] {
       send_off {x=-2: y=3: };
       wt_val=0.2859531;
      };
      TessEl @[44] {
       send_off {x=-1: y=3: };
       wt_val=0.3335331;
      };
      TessEl @[45] {
       send_off {x=0: y=3: };
       wt_val=0.3528661;
      };
      TessEl @[46] {
       send_off {x=1: y=3: };
       wt_val=0.3335331;
      };
      TessEl @[47] {
       send_off {x=2: y=3: };
       wt_val=0.2859531;
      };
      TessEl @[48] {
       send_off {x=0: y=4: };
       wt_val=0.2493522;
      };
     };
     last_make_cmd="MakeEllipse( half_width=4, half_height=4, ctr_x=0, ctr_y=0)";
     last_weights_cmd="WeightsFromGausDist(scale=1, sigma=1.2)";
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjn"] {
     name="FullPrjn";
     is_used=0;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=16: y=16: z=3: };
    max_disp_size2d {x=28: y=24: };
    LeabraLayer @["Sender"] {
     name="Sender";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=12: y=12: n_not_xy=0: n=144: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=12: y=12: n_not_xy=0: n=144: };
     scaled_disp_geom {x=12: y=12: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["Tessel"].layers["EllipseHalfOvlp"].projections["Fm_Sender"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projection_sampler"].networks["Tessel"].layers["Grouped_4x4HalfOvlp"].projections["Fm_Sender"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["projection_sampler"].networks["Tessel"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.projects["projection_sampler"].networks["Tessel"].specs["LeabraLayerSpec_0"]$$: };
    };
    LeabraLayer @["EllipseHalfOvlp"] {
     name="EllipseHalfOvlp";
     desc="receives an ellipse (actually circle) with half-overlap (roughly speaking)";
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=6: z=1: };
     pos_abs {x=0: y=6: z=1: };
     pos2d {x=0: y=14: };
     pos2d_abs {x=0: y=14: };
     disp_scale=1;
     un_geom {x=4: y=4: n_not_xy=0: n=16: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=4: n_not_xy=0: n=16: };
     disp_geom {x=4: y=4: n_not_xy=0: n=16: };
     scaled_disp_geom {x=4: y=4: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projection_sampler"].networks["Tessel"].layers["Sender"]$$;
       spec {type=TesselPrjnSpec: spec=.projects["projection_sampler"].networks["Tessel"].specs["Tessel_EllipseHalfOvlp"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["projection_sampler"].networks["Tessel"].specs["LeabraConSpec_0"]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["Grouped_4x4HalfOvlp"] {
     name="Grouped_4x4HalfOvlp";
     desc="grouped 2x2 recv units with 4x4 RF fm input";
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=6: z=1: };
     pos_abs {x=6: y=6: z=1: };
     pos2d {x=6: y=14: };
     pos2d_abs {x=6: y=14: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["Tessel"].layers["Sender"]$;
       spec {type=TesselPrjnSpec: spec=.projects["projection_sampler"].networks["Tessel"].specs["Tessel_Grouped_4x4HalfOvlp"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["Self"] {
     name="Self";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=2: y=0: z=2: };
     pos_abs {x=2: y=0: z=2: };
     pos2d {x=18: y=14: };
     pos2d_abs {x=18: y=14: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Self"] {
       name="Fm_Self";
       off=0;
       disp=1;
       from_type=SELF;
       from=.projects["projection_sampler"].networks["Tessel"].layers["Self"]$$;
       spec {type=TesselPrjnSpec: spec=.projects["projection_sampler"].networks["Tessel"].specs["Tessel_EllipseSelf"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["Tessel"].layers["Self"].projections["Fm_Self"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["Tessel"].specs["LeabraLayerSpec_0"]$: };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=2.121995790985035e-312;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
    LeabraNetTiming @[0] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[1] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[2] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[3] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[4] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=360;
   n_cons=6708;
   max_prjns=1;
   max_disp_size {x=16: y=16: z=3: };
   max_disp_size2d {x=28: y=24: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=0;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
  LeabraNetwork @["TiledRF"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="TiledRF";
   desc="Demo's TiledRFPrjnSpec for receptive field prjns";
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0;
      t_r=6;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      eff_spk_thr=0.25;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="v_m_init": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=4: net_tau=1.428571: fast_cyc=0: vm_dt=0.25: net_dt=0.7000002: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: dt=0.1: lrn_fact=0.03214286: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.15: i=0.15: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.1;
      spike_gain=0.01;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=0: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] {
     name="LeabraBiasSpec_0";
     is_used=1;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     dwt_thresh=0.1;
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] {
     name="LeabraLayerSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.2: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjn"] {
     name="FullPrjn";
     is_used=0;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
    TiledRFPrjnSpec @["TiledRF_4x4HalfOvlp"] {
     name="TiledRF_4x4HalfOvlp";
     is_used=1;
     desc="If you set the layer geom up correctly, it just works with all default params.. otherwise..";
     unique{      };
     children {
      name="children";
      el_typ=TiledRFPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     recv_gp_border {x=0: y=0: };
     recv_gp_ex_st {x=-1: y=-1: };
     recv_gp_ex_n {x=0: y=0: };
     send_border {x=0: y=0: };
     send_adj_rfsz {x=0: y=0: };
     send_adj_sndloc {x=0: y=0: };
     rf_width_mult=1;
     ru_geo {x=5: y=5: };
     recv_gp_ed {x=5: y=5: };
     recv_gp_ex_ed {x=-1: y=-1: };
     su_act_geom {x=12: y=12: };
     n_recv_gps {x=5: y=5: };
     n_send_units {x=12: y=12: };
     rf_ovlp {x=2: y=2: };
     rf_move {x=2: y=2: };
     rf_width {x=4: y=4: };
    };
    TiledNovlpPrjnSpec @["TiledNovlp"] {
     name="TiledNovlp";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=TiledNovlpPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     reciprocal=0;
     ru_geo {x=3: y=3: };
     su_act_geom {x=12: y=12: };
     rf_width {x=4: y=4: };
    };
    GpMapConvergePrjnSpec @["GpMapConverge"] {
     name="GpMapConverge";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=GpMapConvergePrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
    TiledGpMapConvergePrjnSpec @["TiledGpMapConverge"] {
     name="TiledGpMapConverge";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=TiledGpMapConvergePrjnSpec;
      el_def=0;
      TiledGpMapConvergePrjnSpec @["TiledGpMapConverge_Recip"] {
       name="TiledGpMapConverge_Recip";
       is_used=1;
       desc=;
       unique{ reciprocal;       };
       children {
	name="children";
	el_typ=TiledGpMapConvergePrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       set_scale=0;
       add_rnd_var=0;
       send_tile_size {x=4: y=4: };
       send_tile_skip {x=2: y=2: };
       wrap=1;
       reciprocal=1;
       trg_recv_geom {x=0: y=0: };
       trg_send_geom {x=0: y=0: };
      };
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     send_tile_size {x=4: y=4: };
     send_tile_skip {x=2: y=2: };
     wrap=1;
     reciprocal=0;
     trg_recv_geom {x=3: y=3: };
     trg_send_geom {x=6: y=6: };
    };
    TiledGpRFPrjnSpec @["TiledGpRF"] {
     name="TiledGpRF";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=TiledGpRFPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=1;
     set_scale=0;
     add_rnd_var=0;
     send_gp_size {x=4: y=4: };
     send_gp_skip {x=2: y=2: };
     send_gp_start {x=-1: y=-1: };
     wrap=1;
     reciprocal=0;
     share_cons=0;
     wts_type=GAUSSIAN;
     full_gauss {on=0: sigma=0.6: wrap_wts=1: ctr_mv=1: };
     gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=1: };
     full_send=BY_UNIT;
     full_recv=BY_UNIT;
     full_sig {on=1: gain=0.02: ctr_mv=0.5: };
     gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
     wt_range {min=0.1: max=0.9: range=0.8: scale=1.25: };
     trg_recv_geom {x=0: y=0: };
     trg_send_geom {x=0: y=0: };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=44: y=34: z=3: };
    max_disp_size2d {x=52: y=62: };
    LeabraLayer @["Sender"] {
     name="Sender";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=0: z=0: };
     pos_abs {x=6: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=12: y=12: n_not_xy=0: n=144: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=12: y=12: n_not_xy=0: n=144: };
     scaled_disp_geom {x=12: y=12: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["TiledRF"].layers["Tiled_4x4HalfOvlp"].projections["Fm_Sender"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projection_sampler"].networks["TiledRF"].layers["Tiled_NoOvlp"].projections["Fm_Sender"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["LeabraLayerSpec_0"]$$: };
    };
    LeabraLayer @["Tiled_4x4HalfOvlp"] {
     name="Tiled_4x4HalfOvlp";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=28: };
     pos2d_abs {x=0: y=28: };
     disp_scale=1;
     un_geom {x=6: y=6: n_not_xy=0: n=36: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=5: y=5: n_not_xy=0: n=25: };
     gp_spc {x=1: y=1: };
     flat_geom {x=30: y=30: n_not_xy=0: n=900: };
     disp_geom {x=34: y=34: n_not_xy=0: n=1225: };
     scaled_disp_geom {x=34: y=34: n_not_xy=0: n=1: };
     n_recv_prjns=2;
     n_send_prjns=3;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projection_sampler"].networks["TiledRF"].layers["Sender"]$$;
       spec {type=TiledRFPrjnSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["TiledRF_4x4HalfOvlp"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["LeabraConSpec_0"]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_TiledGpMapConverge"] {
       name="Fm_TiledGpMapConverge";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projection_sampler"].networks["TiledRF"].layers["TiledGpMapConverge"]$$;
       spec {type=TiledGpMapConvergePrjnSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["TiledGpMapConverge"].children["TiledGpMapConverge_Recip"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraConSpec_0"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["TiledRF"].layers["GpMapConverge"].projections["Fm_Tiled_4x4HalfOvlp"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projection_sampler"].networks["TiledRF"].layers["TiledGpMapConverge"].projections["Fm_Tiled_4x4HalfOvlp"];
      Projection_Group @. = [2] = LeabraPrjn .projects["projection_sampler"].networks["TiledRF"].layers["TiledGpRF"].projections["Fm_Tiled_4x4HalfOvlp"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["Tiled_NoOvlp"] {
     name="Tiled_NoOvlp";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=36: y=0: z=1: };
     pos_abs {x=36: y=0: z=1: };
     pos2d {x=36: y=14: };
     pos2d_abs {x=36: y=14: };
     disp_scale=1;
     un_geom {x=2: y=2: n_not_xy=0: n=4: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=1: y=1: };
     flat_geom {x=6: y=6: n_not_xy=0: n=36: };
     disp_geom {x=8: y=8: n_not_xy=0: n=81: };
     scaled_disp_geom {x=8: y=8: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["TiledRF"].layers["Sender"]$;
       spec {type=TiledNovlpPrjnSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["TiledNovlp"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["GpMapConverge"] {
     name="GpMapConverge";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=3: y=-1: z=2: };
     pos_abs {x=3: y=0: z=2: };
     pos2d {x=46: y=14: };
     pos2d_abs {x=46: y=14: };
     disp_scale=1;
     un_geom {x=6: y=6: n_not_xy=0: n=36: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=6: y=6: n_not_xy=0: n=36: };
     disp_geom {x=6: y=6: n_not_xy=0: n=36: };
     scaled_disp_geom {x=6: y=6: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Tiled_4x4HalfOvlp"] {
       name="Fm_Tiled_4x4HalfOvlp";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projection_sampler"].networks["TiledRF"].layers["Tiled_4x4HalfOvlp"]$$;
       spec {type=GpMapConvergePrjnSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["GpMapConverge"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["TiledGpMapConverge"] {
     name="TiledGpMapConverge";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=11: y=-1: z=2: };
     pos_abs {x=11: y=0: z=2: };
     pos2d {x=0: y=12: };
     pos2d_abs {x=0: y=12: };
     disp_scale=1;
     un_geom {x=4: y=4: n_not_xy=0: n=16: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=14: y=14: n_not_xy=0: n=225: };
     scaled_disp_geom {x=14: y=14: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Tiled_4x4HalfOvlp"] {
       name="Fm_Tiled_4x4HalfOvlp";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["TiledRF"].layers["Tiled_4x4HalfOvlp"]$;
       spec {type=TiledGpMapConvergePrjnSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["TiledGpMapConverge"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["TiledRF"].layers["Tiled_4x4HalfOvlp"].projections["Fm_TiledGpMapConverge"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["TiledGpRF"] {
     name="TiledGpRF";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=27: y=0: z=2: };
     pos_abs {x=27: y=0: z=2: };
     pos2d {x=16: y=12: };
     pos2d_abs {x=16: y=12: };
     disp_scale=1;
     un_geom {x=4: y=4: n_not_xy=0: n=16: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=14: y=14: n_not_xy=0: n=225: };
     scaled_disp_geom {x=14: y=14: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Tiled_4x4HalfOvlp"] {
       name="Fm_Tiled_4x4HalfOvlp";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["TiledRF"].layers["Tiled_4x4HalfOvlp"]$;
       spec {type=TiledGpRFPrjnSpec: spec=.projects["projection_sampler"].networks["TiledRF"].specs["TiledGpRF"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["TiledRF"].specs["LeabraLayerSpec_0"]$: };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=1.625974598210277e-260;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
    LeabraNetTiming @[0] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[1] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[2] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[3] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[4] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=1404;
   n_cons=214020;
   max_prjns=2;
   max_disp_size {x=44: y=34: z=3: };
   max_disp_size2d {x=52: y=62: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=0;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
  LeabraNetwork @["Random"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="Random";
   desc="Demo's various random projections";
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["projection_sampler"].networks["Random"].specs["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0;
      t_r=6;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      eff_spk_thr=0.25;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="v_m_init": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=4: net_tau=1.428571: fast_cyc=0: vm_dt=0.25: net_dt=0.7000002: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: dt=0.1: lrn_fact=0.03214286: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.15: i=0.15: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.1;
      spike_gain=0.01;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=0: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] {
     name="LeabraBiasSpec_0";
     is_used=1;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     dwt_thresh=0.1;
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] {
     name="LeabraLayerSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.2: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjn"] {
     name="FullPrjn";
     is_used=0;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
    UniformRndPrjnSpec @["UniformRnd_p25"] {
     name="UniformRnd_p25";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=UniformRndPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     p_con=0.25;
     sym_self=1;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1000148040;
     };
    };
    UniformRndPrjnSpec @["UniformRnd_p05"] {
     name="UniformRnd_p05";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=UniformRndPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     p_con=0.05;
     sym_self=1;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1008633855;
     };
    };
    PolarRndPrjnSpec @["PolarRnd_p05"] {
     name="PolarRnd_p05";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=PolarRndPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     p_con=0.05;
     rnd_dist {name="rnd_dist": type=GAUSSIAN: mean=0: var=0.25: par=1: };
     rnd_angle {name="rnd_angle": type=UNIFORM: mean=0.5: var=0.5: par=1: };
     dist_type=XY_DIST_CENTER_NORM;
     wrap=1;
     max_retries=1000;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1017380772;
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=14: y=14: z=2: };
    max_disp_size2d {x=22: y=20: };
    LeabraLayer @["Sender"] {
     name="Sender";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=12: y=12: n_not_xy=0: n=144: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=12: y=12: n_not_xy=0: n=144: };
     scaled_disp_geom {x=12: y=12: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=3;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["Random"].layers["UniformRandom_p25"].projections["Fm_Sender"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projection_sampler"].networks["Random"].layers["UniformRandom_p05"].projections["Fm_Sender"];
      Projection_Group @. = [2] = LeabraPrjn .projects["projection_sampler"].networks["Random"].layers["PolarRandom_p05"].projections["Fm_Sender"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["projection_sampler"].networks["Random"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.projects["projection_sampler"].networks["Random"].specs["LeabraLayerSpec_0"]$$: };
    };
    LeabraLayer @["UniformRandom_p25"] {
     name="UniformRandom_p25";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=14: };
     pos2d_abs {x=0: y=14: };
     disp_scale=1;
     un_geom {x=6: y=6: n_not_xy=0: n=36: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=6: y=6: n_not_xy=0: n=36: };
     disp_geom {x=6: y=6: n_not_xy=0: n=36: };
     scaled_disp_geom {x=6: y=6: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projection_sampler"].networks["Random"].layers["Sender"]$$;
       spec {type=UniformRndPrjnSpec: spec=.projects["projection_sampler"].networks["Random"].specs["UniformRnd_p25"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["projection_sampler"].networks["Random"].specs["LeabraConSpec_0"]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["UniformRandom_p05"] {
     name="UniformRandom_p05";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=8: y=0: z=1: };
     pos_abs {x=8: y=0: z=1: };
     pos2d {x=8: y=14: };
     pos2d_abs {x=8: y=14: };
     disp_scale=1;
     un_geom {x=6: y=6: n_not_xy=0: n=36: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=6: y=6: n_not_xy=0: n=36: };
     disp_geom {x=6: y=6: n_not_xy=0: n=36: };
     scaled_disp_geom {x=6: y=6: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["Random"].layers["Sender"]$;
       spec {type=UniformRndPrjnSpec: spec=.projects["projection_sampler"].networks["Random"].specs["UniformRnd_p05"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["PolarRandom_p05"] {
     name="PolarRandom_p05";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=4: y=8: z=1: };
     pos_abs {x=4: y=8: z=1: };
     pos2d {x=16: y=14: };
     pos2d_abs {x=16: y=14: };
     disp_scale=1;
     un_geom {x=6: y=6: n_not_xy=0: n=36: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=6: y=6: n_not_xy=0: n=36: };
     disp_geom {x=6: y=6: n_not_xy=0: n=36: };
     scaled_disp_geom {x=6: y=6: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["Random"].layers["Sender"]$;
       spec {type=PolarRndPrjnSpec: spec=.projects["projection_sampler"].networks["Random"].specs["PolarRnd_p05"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["Random"].specs["LeabraLayerSpec_0"]$: };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=3.209734060534516e+21;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
    LeabraNetTiming @[0] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[1] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[2] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[3] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[4] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=252;
   n_cons=1800;
   max_prjns=1;
   max_disp_size {x=14: y=14: z=2: };
   max_disp_size2d {x=22: y=20: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=0;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
  LeabraNetwork @["RandomLarge"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="RandomLarge";
   desc="Demo's various random projections for very large nets";
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0;
      t_r=6;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      eff_spk_thr=0.25;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="v_m_init": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=4: net_tau=1.428571: fast_cyc=0: vm_dt=0.25: net_dt=0.7000002: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: dt=0.1: lrn_fact=0.03214286: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.15: i=0.15: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.1;
      spike_gain=0.01;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=0: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_0"] {
     name="LeabraBiasSpec_0";
     is_used=1;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     dwt_thresh=0.1;
    };
    LeabraLayerSpec @["LeabraLayerSpec_0"] {
     name="LeabraLayerSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.2: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjn"] {
     name="FullPrjn";
     is_used=0;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
    UniformRndPrjnSpec @["UniformRnd_p25"] {
     name="UniformRnd_p25";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=UniformRndPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     p_con=0.25;
     sym_self=1;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1140446848;
     };
    };
    UniformRndPrjnSpec @["UniformRnd_p05"] {
     name="UniformRnd_p05";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=UniformRndPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     p_con=0.05;
     sym_self=1;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1148758595;
     };
    };
    PolarRndPrjnSpec @["PolarRnd_p05"] {
     name="PolarRnd_p05";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=PolarRndPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     p_con=0.05;
     rnd_dist {name="rnd_dist": type=GAUSSIAN: mean=0: var=0.25: par=1: };
     rnd_angle {name="rnd_angle": type=UNIFORM: mean=0.5: var=0.5: par=1: };
     dist_type=XY_DIST_CENTER_NORM;
     wrap=0;
     max_retries=1000;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1157418478;
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=38: y=36: z=2: };
    max_disp_size2d {x=36: y=36: };
    LeabraLayer @["Sender"] {
     name="Sender";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=36: y=36: n_not_xy=0: n=1296: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=36: y=36: n_not_xy=0: n=1296: };
     disp_geom {x=36: y=36: n_not_xy=0: n=1296: };
     scaled_disp_geom {x=36: y=36: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["RandomLarge"].layers["UniformRandom_p25"].projections["Fm_Sender"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projection_sampler"].networks["RandomLarge"].layers["UniformRandom_p05"].projections["Fm_Sender"];
      Projection_Group @. = [2] = LeabraPrjn .projects["projection_sampler"].networks["RandomLarge"].layers["PolarRandom_p05"].projections["Fm_Sender"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0;
     acts_p_avg=0;
     acts_p_avg_eff=1;
     spec {type=LeabraLayerSpec: spec=.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraLayerSpec_0"]$$: };
    };
    LeabraLayer @["UniformRandom_p25"] {
     name="UniformRandom_p25";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=3: };
     pos2d_abs {x=0: y=3: };
     disp_scale=1;
     un_geom {x=24: y=24: n_not_xy=0: n=576: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=24: y=24: n_not_xy=0: n=576: };
     disp_geom {x=24: y=24: n_not_xy=0: n=576: };
     scaled_disp_geom {x=24: y=24: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projection_sampler"].networks["RandomLarge"].layers["Sender"]$$;
       spec {type=UniformRndPrjnSpec: spec=.projects["projection_sampler"].networks["RandomLarge"].specs["UniformRnd_p25"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraConSpec_0"]$$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=0;
       dir_fixed=0;
       direction=DIR_UNKNOWN;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0;
     acts_p_avg=0;
     acts_p_avg_eff=1;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["UniformRandom_p05"] {
     name="UniformRandom_p05";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=26: y=0: z=1: };
     pos_abs {x=26: y=0: z=1: };
     pos2d {x=0: y=6: };
     pos2d_abs {x=0: y=6: };
     disp_scale=1;
     un_geom {x=12: y=12: n_not_xy=0: n=144: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=12: y=12: n_not_xy=0: n=144: };
     scaled_disp_geom {x=12: y=12: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["RandomLarge"].layers["Sender"]$;
       spec {type=UniformRndPrjnSpec: spec=.projects["projection_sampler"].networks["RandomLarge"].specs["UniformRnd_p05"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=0;
       dir_fixed=0;
       direction=DIR_UNKNOWN;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0;
     acts_p_avg=0;
     acts_p_avg_eff=1;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraLayerSpec_0"]$: };
    };
    LeabraLayer @["PolarRandom_p05"] {
     name="PolarRandom_p05";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=26: y=16: z=1: };
     pos_abs {x=26: y=16: z=1: };
     pos2d {x=0: y=9: };
     pos2d_abs {x=0: y=9: };
     disp_scale=1;
     un_geom {x=12: y=12: n_not_xy=0: n=144: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=12: n_not_xy=0: n=144: };
     disp_geom {x=12: y=12: n_not_xy=0: n=144: };
     scaled_disp_geom {x=12: y=12: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["RandomLarge"].layers["Sender"]$;
       spec {type=PolarRndPrjnSpec: spec=.projects["projection_sampler"].networks["RandomLarge"].specs["PolarRnd_p05"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=0;
       dir_fixed=0;
       direction=DIR_UNKNOWN;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0;
     acts_p_avg=0;
     acts_p_avg_eff=1;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["RandomLarge"].specs["LeabraLayerSpec_0"]$: };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=NO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=1.075851866021369e-311;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=2160;
   n_cons=0;
   max_prjns=1;
   max_disp_size {x=38: y=36: z=2: };
   max_disp_size2d {x=36: y=36: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=0;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
  LeabraNetwork @["GpRndTessel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="GpRndTessel";
   desc="demonstrates the group-based random tessel prjn";
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_5"] {
     name="LeabraUnitSpec_5";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraBiasSpec_5"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0;
      t_r=6;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      eff_spk_thr=0.25;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="v_m_init": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=4: net_tau=1.428571: fast_cyc=0: vm_dt=0.25: net_dt=0.7000002: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: dt=0.1: lrn_fact=0.03214286: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.15: i=0.15: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.1;
      spike_gain=0.01;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=1: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraBiasSpec @["LeabraBiasSpec_5"] {
     name="LeabraBiasSpec_5";
     is_used=1;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     dwt_thresh=0.1;
    };
    LeabraLayerSpec @["LeabraLayerSpec_5"] {
     name="LeabraLayerSpec_5";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.2: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    GpRndTesselPrjnSpec @["GpRndTessel_Full"] {
     name="GpRndTessel_Full";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=GpRndTesselPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     recv_gp_off {x=0: y=0: };
     recv_gp_n {x=-1: y=-1: };
     recv_gp_skip {x=1: y=1: };
     recv_gp_group {x=1: y=1: };
     send_gp_scale {x=1: y=1: };
     send_gp_border {x=0: y=0: };
     send_gp_offs {
      name="send_gp_offs";
      el_typ=GpTessEl;
      el_def=0;
      GpTessEl @[0] {
       send_gp_off {x=0: y=0: };
       p_con=1;
      };
      GpTessEl @[1] {
       send_gp_off {x=1: y=0: };
       p_con=1;
      };
      GpTessEl @[2] {
       send_gp_off {x=0: y=1: };
       p_con=1;
      };
      GpTessEl @[3] {
       send_gp_off {x=1: y=1: };
       p_con=1;
      };
     };
     wrap=1;
     def_p_con=1;
     sym_self=1;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1262555550;
     };
     last_make_cmd=;
    };
    GpRndTesselPrjnSpec @["GpRndTessel_p25"] {
     name="GpRndTessel_p25";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=GpRndTesselPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     recv_gp_off {x=0: y=0: };
     recv_gp_n {x=-1: y=-1: };
     recv_gp_skip {x=1: y=1: };
     recv_gp_group {x=1: y=1: };
     send_gp_scale {x=1: y=1: };
     send_gp_border {x=0: y=0: };
     send_gp_offs {
      name="send_gp_offs";
      el_typ=GpTessEl;
      el_def=0;
      GpTessEl @[0] {
       send_gp_off {x=0: y=0: };
       p_con=0.25;
      };
      GpTessEl @[1] {
       send_gp_off {x=1: y=0: };
       p_con=0.25;
      };
      GpTessEl @[2] {
       send_gp_off {x=0: y=1: };
       p_con=0.25;
      };
      GpTessEl @[3] {
       send_gp_off {x=1: y=1: };
       p_con=0.25;
      };
     };
     wrap=1;
     def_p_con=0.25;
     sym_self=1;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1271041365;
     };
     last_make_cmd=;
    };
    GpRndTesselPrjnSpec @["GpRndTessel_Self_p25"] {
     name="GpRndTessel_Self_p25";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=GpRndTesselPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     recv_gp_off {x=0: y=0: };
     recv_gp_n {x=-1: y=-1: };
     recv_gp_skip {x=1: y=1: };
     recv_gp_group {x=1: y=1: };
     send_gp_scale {x=1: y=1: };
     send_gp_border {x=0: y=0: };
     send_gp_offs {
      name="send_gp_offs";
      el_typ=GpTessEl;
      el_def=0;
      GpTessEl @[0] {
       send_gp_off {x=0: y=0: };
       p_con=0.25;
      };
     };
     wrap=1;
     def_p_con=0.25;
     sym_self=1;
     same_seed=0;
     rndm_seed {
      name="rndm_seed";
      rnd_seed=1279614214;
     };
     last_make_cmd=;
    };
    FullPrjnSpec @["FullPrjnSpec_5"] {
     name="FullPrjnSpec_5";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
    LeabraConSpec @["LeabraConSpec_5"] {
     name="LeabraConSpec_5";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.01;
     use_lrate_sched=1;
     cur_lrate=0.01;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=600: wt_tau=20: fast_lrate=5: decay_dt=0.001666667: wt_dt=0.05: slow_lrate=0.2: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    GpMapConvergePrjnSpec @["GpAggregatePrjnSpec_0"] {
     name="GpAggregatePrjnSpec_0";
     is_used=0;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=GpMapConvergePrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=21: y=17: z=2: };
    max_disp_size2d {x=19: y=24: };
    LeabraLayer @["Sender"] {
     name="Sender";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=1: y=1: };
     flat_geom {x=15: y=15: n_not_xy=0: n=225: };
     disp_geom {x=17: y=17: n_not_xy=0: n=324: };
     scaled_disp_geom {x=17: y=17: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=4;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=SELF;
       from=.projects["projection_sampler"].networks["GpRndTessel"].layers["Sender"]$$;
       spec {type=GpRndTesselPrjnSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["GpRndTessel_Self_p25"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraConSpec_5"]$$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projection_sampler"].networks["GpRndTessel"].layers["GpRndTessel_full"].projections["Fm_Sender"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projection_sampler"].networks["GpRndTessel"].layers["GpRndTessel_p25"].projections["Fm_Sender"];
      Projection_Group @. = [2] = LeabraPrjn .projects["projection_sampler"].networks["GpRndTessel"].layers["Sender"].projections["Fm_Sender"];
      Projection_Group @. = [3] = LeabraPrjn .projects["projection_sampler"].networks["GpRndTessel"].layers["GpAggregate"].projections["Fm_Sender"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraUnitSpec_5"]$$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraLayerSpec_5"]$$: };
    };
    LeabraLayer @["GpRndTessel_full"] {
     name="GpRndTessel_full";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=1: y=0: z=1: };
     pos_abs {x=1: y=0: z=1: };
     pos2d {x=0: y=19: };
     pos2d_abs {x=0: y=19: };
     disp_scale=1;
     un_geom {x=2: y=2: n_not_xy=0: n=4: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=2: y=2: n_not_xy=0: n=4: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=4: n_not_xy=0: n=16: };
     disp_geom {x=5: y=5: n_not_xy=0: n=36: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["GpRndTessel"].layers["Sender"]$;
       spec {type=GpRndTesselPrjnSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["GpRndTessel_Full"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraConSpec_5"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraUnitSpec_5"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraLayerSpec_5"]$: };
    };
    LeabraLayer @["GpRndTessel_p25"] {
     name="GpRndTessel_p25";
     desc="p_con = .25";
     flags=0;
     layer_type=HIDDEN;
     pos {x=9: y=0: z=1: };
     pos_abs {x=9: y=0: z=1: };
     pos2d {x=7: y=19: };
     pos2d_abs {x=7: y=19: };
     disp_scale=1;
     un_geom {x=2: y=2: n_not_xy=0: n=4: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=2: y=2: n_not_xy=0: n=4: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=4: n_not_xy=0: n=16: };
     disp_geom {x=5: y=5: n_not_xy=0: n=36: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["GpRndTessel"].layers["Sender"]$;
       spec {type=GpRndTesselPrjnSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["GpRndTessel_p25"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraConSpec_5"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraUnitSpec_5"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraLayerSpec_5"]$: };
    };
    LeabraLayer @["GpAggregate"] {
     name="GpAggregate";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=16: y=0: z=1: };
     pos_abs {x=16: y=0: z=1: };
     pos2d {x=14: y=19: };
     pos2d_abs {x=14: y=19: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=1;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=36: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Sender"] {
       name="Fm_Sender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projection_sampler"].networks["GpRndTessel"].layers["Sender"]$;
       spec {type=FullPrjnSpec: spec=.projects["projection_sampler"].networks["GpRndTessel"].specs["FullPrjnSpec_5"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraConSpec_5"]$: };
       recv_idx=0;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraUnitSpec_5"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.projects["projection_sampler"].networks["GpRndTessel"].specs["LeabraLayerSpec_5"]$: };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="TimeUsedHR_18": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="TimeUsedHR_19": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="TimeUsedHR_20": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=1.964077274749999e-152;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
    LeabraNetTiming @[0] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[1] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[2] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[3] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[4] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=282;
   n_cons=8959;
   max_prjns=1;
   max_disp_size {x=21: y=17: z=2: };
   max_disp_size2d {x=19: y=24: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=0;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};

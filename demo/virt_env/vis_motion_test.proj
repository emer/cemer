// ta_Dump File v3.0 -- code v8.0.0.0 rev9957
LeabraProject .projects["vis_motion_test"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_running.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_done.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_done.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_deleted.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_deleted.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_deleted.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_archive.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_archive.control_panel_cells = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.file_list.control_panel_cells = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.cluster_info.control_panel_cells = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] { 
  };
  DataTable_Group @.gp["OutputData"] { 
  };
  DataTable_Group @.gp["AnalysisData"] = [2] { 
   DataTable @["V1reg_GridV1Stencils"] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @["N_ROWS"] { };
     UserDataItem @["BLOCK_HEIGHT"] { };
     UserDataItem @["BLOCK_SPACE"] { };
    };

    DataTableCols @.data = [2] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["WIDTH"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Stencil"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["V1reg_V1Motion_GridFilters"] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @["N_ROWS"] { };
     UserDataItem @["SCALE_MIN"] { };
     UserDataItem @["SCALE_MAX"] { };
     UserDataItem @["BLOCK_HEIGHT"] { };
    };

    DataTableCols @.data = [2] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Filter"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["MotionTest"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [4] {
    DataTable @["MotionOutput"] { 
     DataTableCols @.data = [19] {
      float_Data @["V1reg_image_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["IMAGE"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1reg_v1s_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1reg_v1pi_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1reg_v1m_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1reg_v1m_max_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1reg_v1m_hist_r_m0"] { };
      float_Data @["V1reg_v1m_hist_r_m1"] { };
      float_Data @["V1reg_v1m_hist_r_m2"] { };
      float_Data @["V1reg_v1m_hist_r_m3"] { };
      float_Data @["V1reg_v1m_hist_r_m4"] { };
      float_Data @["V1reg_v1m_hist_r_m5"] { };
      float_Data @["V1reg_v1m_hist_r_m6"] { };
      float_Data @["V1reg_v1m_hist_r_m7"] { };
      float_Data @["V1reg_v1m_hist_r_m8"] { };
      float_Data @["V1reg_v1m_hist_r_m9"] { };
      float_Data @["V1reg_v1s_sg_r"] { };
      float_Data @["V1reg_v1pi_sg_r"] { };
      float_Data @["V1reg_v1m_sg_r"] { };
      float_Data @["V1reg_v1m_max_sg_r"] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };

     DataTableCell_List @.control_panel_cells = [0] {
     };
    };
    DataTable @["CanvasView"] { 
     DataTableCols @.data = [1] {
      float_Data @["canvas"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
	UserDataItem @["IMAGE"] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };

     DataTableCell_List @.control_panel_cells = [0] {
     };
    };
    V1RetinaProc @["V1Retina_motion"] { 
     VisRegionSpecBaseList @.regions = [1] {
      V1RegionSpec @["V1reg"] { };
     };
    };
    taCanvas @["Canvas"] { };
   };

   ProgType_List @.types = [1] {
    DynEnumType @["StimType"] { 
     DynEnumItem_List @.enums = [3] {
      DynEnumItem @["LINE"] { };
      DynEnumItem @["BALL"] { };
      DynEnumItem @["MOTHER"] { };
     };
    };
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [19] {
    ProgVar @["MotionOutput"] { };
    ProgVar @["V1Retina_motion"] { };
    ProgVar @["Canvas"] { };
    ProgVar @["stim_type"] { };
    ProgVar @["canvas_size"] { };
    ProgVar @["bg_color"] { };
    ProgVar @["line_width"] { };
    ProgVar @["line_color"] { };
    ProgVar @["start_x"] { };
    ProgVar @["start_y"] { };
    ProgVar @["size"] { };
    ProgVar @["half_size"] { };
    ProgVar @["rot_angle"] { };
    ProgVar @["vel_x"] { };
    ProgVar @["vel_y"] { };
    ProgVar @["cur_x"] { };
    ProgVar @["cur_y"] { };
    ProgVar @["n_steps"] { };
    ProgVar @["CanvasView"] { };
   };

   Function_List @.functions = [6] {
    Function @["InitCanvas"] { 
     ProgVar_List @.args = [1] {
      ProgVar @["canv"] { };
     };

     ProgEl_List @.fun_code = [5] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Function @["ViewCanvas"] { 
     ProgVar_List @.args = [2] {
      ProgVar @["canv"] { };
      ProgVar @["col_nm"] { };
     };

     ProgEl_List @.fun_code = [5] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
     };
    };
    Function @["DrawLine"] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [7] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [5] {
	ProgVar @["sx"] { };
	ProgVar @["sy"] { };
	ProgVar @["rad_ang"] { };
	ProgVar @["ex"] { };
	ProgVar @["ey"] { };
       };
      };
      MathCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      AssignExpr @[4] { };
      AssignExpr @[5] { };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
     };
    };
    Function @["DrawBall"] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [2] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [7] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
       };
      };
     };
    };
    Function @["DrawMother"] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [2] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [7] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
       };
      };
     };
    };
    Function @["DrawStim"] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [2] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      Switch @[1] { 
       ProgEl_List @.cases = [3] {
	CaseBlock @[0] { 
	 ProgEl_List @.prog_code = [1] {
	  FunctionCall @[0] { 
	   ProgArg_List @.fun_args = [0] {
	   };
	  };
	 };
	};
	CaseBlock @[1] { 
	 ProgEl_List @.prog_code = [1] {
	  FunctionCall @[0] { 
	   ProgArg_List @.fun_args = [0] {
	   };
	  };
	 };
	};
	CaseBlock @[2] { 
	 ProgEl_List @.prog_code = [1] {
	  FunctionCall @[0] { 
	   ProgArg_List @.fun_args = [0] {
	   };
	  };
	 };
	};
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [5] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[4] { };
   };

   ProgEl_List @.prog_code = [5] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @["st"] { };
     };
    };
    AssignExpr @[1] { };
    AssignExpr @[2] { };
    ForLoop @[3] { 
     ProgEl_List @.loop_code = [9] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      FunctionCall @[1] { 
       ProgArg_List @.fun_args = [0] {
       };
      };
      FunctionCall @[2] { 
       ProgArg_List @.fun_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [11] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
	ProgArg @[9] { };
	ProgArg @[10] { };
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      StopStepPoint @[6] { };
      VarIncr @[7] { };
      VarIncr @[8] { };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["T3Frames"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [4] {
      T3Panel @["MotionOutput"] { 
       T3DataView_List @.root_view.children = [4] {
	GridTableView @["MotionOutput_Grid"] { 
	 T3DataView_List @.children = [19] {
	  GridColView @["V1reg_image_r"] { };
	  GridColView @["V1reg_v1s_r"] { };
	  GridColView @["V1reg_v1pi_r"] { };
	  GridColView @["V1reg_v1m_r"] { };
	  GridColView @["V1reg_v1m_max_r"] { };
	  GridColView @["V1reg_v1m_hist_r_m0"] { };
	  GridColView @["V1reg_v1m_hist_r_m1"] { };
	  GridColView @["V1reg_v1m_hist_r_m2"] { };
	  GridColView @["V1reg_v1m_hist_r_m3"] { };
	  GridColView @["V1reg_v1m_hist_r_m4"] { };
	  GridColView @["V1reg_v1m_hist_r_m5"] { };
	  GridColView @["V1reg_v1m_hist_r_m6"] { };
	  GridColView @["V1reg_v1m_hist_r_m7"] { };
	  GridColView @["V1reg_v1m_hist_r_m8"] { };
	  GridColView @["V1reg_v1m_hist_r_m9"] { };
	  GridColView @["V1reg_v1s_sg_r"] { };
	  GridColView @["V1reg_v1pi_sg_r"] { };
	  GridColView @["V1reg_v1m_sg_r"] { };
	  GridColView @["V1reg_v1m_max_sg_r"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GridTableView @["MotionOutput_Grid_1"] { 
	 T3DataView_List @.children = [19] {
	  GridColView @["V1reg_image_r"] { };
	  GridColView @["V1reg_v1s_r"] { };
	  GridColView @["V1reg_v1pi_r"] { };
	  GridColView @["V1reg_v1m_r"] { };
	  GridColView @["V1reg_v1m_max_r"] { };
	  GridColView @["V1reg_v1m_hist_r_m0"] { };
	  GridColView @["V1reg_v1m_hist_r_m1"] { };
	  GridColView @["V1reg_v1m_hist_r_m2"] { };
	  GridColView @["V1reg_v1m_hist_r_m3"] { };
	  GridColView @["V1reg_v1m_hist_r_m4"] { };
	  GridColView @["V1reg_v1m_hist_r_m5"] { };
	  GridColView @["V1reg_v1m_hist_r_m6"] { };
	  GridColView @["V1reg_v1m_hist_r_m7"] { };
	  GridColView @["V1reg_v1m_hist_r_m8"] { };
	  GridColView @["V1reg_v1m_hist_r_m9"] { };
	  GridColView @["V1reg_v1s_sg_r"] { };
	  GridColView @["V1reg_v1pi_sg_r"] { };
	  GridColView @["V1reg_v1m_sg_r"] { };
	  GridColView @["V1reg_v1m_max_sg_r"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GridTableView @["MotionOutput_Grid_2"] { 
	 T3DataView_List @.children = [19] {
	  GridColView @["V1reg_image_r"] { };
	  GridColView @["V1reg_v1s_r"] { };
	  GridColView @["V1reg_v1pi_r"] { };
	  GridColView @["V1reg_v1m_r"] { };
	  GridColView @["V1reg_v1m_max_r"] { };
	  GridColView @["V1reg_v1m_hist_r_m0"] { };
	  GridColView @["V1reg_v1m_hist_r_m1"] { };
	  GridColView @["V1reg_v1m_hist_r_m2"] { };
	  GridColView @["V1reg_v1m_hist_r_m3"] { };
	  GridColView @["V1reg_v1m_hist_r_m4"] { };
	  GridColView @["V1reg_v1m_hist_r_m5"] { };
	  GridColView @["V1reg_v1m_hist_r_m6"] { };
	  GridColView @["V1reg_v1m_hist_r_m7"] { };
	  GridColView @["V1reg_v1m_hist_r_m8"] { };
	  GridColView @["V1reg_v1m_hist_r_m9"] { };
	  GridColView @["V1reg_v1s_sg_r"] { };
	  GridColView @["V1reg_v1pi_sg_r"] { };
	  GridColView @["V1reg_v1m_sg_r"] { };
	  GridColView @["V1reg_v1m_max_sg_r"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GridTableView @["MotionOutput_Grid_3"] { 
	 T3DataView_List @.children = [19] {
	  GridColView @["V1reg_image_r"] { };
	  GridColView @["V1reg_v1s_r"] { };
	  GridColView @["V1reg_v1pi_r"] { };
	  GridColView @["V1reg_v1m_r"] { };
	  GridColView @["V1reg_v1m_max_r"] { };
	  GridColView @["V1reg_v1m_hist_r_m0"] { };
	  GridColView @["V1reg_v1m_hist_r_m1"] { };
	  GridColView @["V1reg_v1m_hist_r_m2"] { };
	  GridColView @["V1reg_v1m_hist_r_m3"] { };
	  GridColView @["V1reg_v1m_hist_r_m4"] { };
	  GridColView @["V1reg_v1m_hist_r_m5"] { };
	  GridColView @["V1reg_v1m_hist_r_m6"] { };
	  GridColView @["V1reg_v1m_hist_r_m7"] { };
	  GridColView @["V1reg_v1m_hist_r_m8"] { };
	  GridColView @["V1reg_v1m_hist_r_m9"] { };
	  GridColView @["V1reg_v1s_sg_r"] { };
	  GridColView @["V1reg_v1pi_sg_r"] { };
	  GridColView @["V1reg_v1m_sg_r"] { };
	  GridColView @["V1reg_v1m_max_sg_r"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["V1reg_V1Motion_GridFilters"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["V1reg_V1Motion_GridFilters_Grid"] { 
	 T3DataView_List @.children = [2] {
	  GridColView @["Name"] { };
	  GridColView @["Filter"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["V1reg_GridV1Stencils"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["V1reg_GridV1Stencils_Grid"] { 
	 T3DataView_List @.children = [2] {
	  GridColView @["Name"] { };
	  GridColView @["Stencil"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["CanvasView"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["CanvasView_Grid"] { 
	 T3DataView_List @.children = [1] {
	  GridColView @["canvas"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [0] {
 };
};
LeabraProject .projects["vis_motion_test"] {
 name="vis_motion_test";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {
  wiki=;
  page_name=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_deleted {
    name="jobs_deleted";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["V1reg_GridV1Stencils"] {
    UserDataItem_List @*(.user_data_) {
     name="UserDataItem_List_394";
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @["N_ROWS"] {
      name="N_ROWS";
      value 2 0=4;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_HEIGHT"] {
      name="BLOCK_HEIGHT";
      value 8 0=0;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_SPACE"] {
      name="BLOCK_SPACE";
      value 8 0=4;
      val_type_fixed=0;
     };
    };
    name="V1reg_GridV1Stencils";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_99";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["WIDTH"] {
	name="WIDTH";
	value 2 0=24;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 8 0=0.1572327;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [25] "V1m ang:0";"V1m ang:0";"V1m ang:45";"V1m ang:45";"V1m ang:90";"V1m ang:90";"V1m ang:135";"V1m ang:135";"V1C SubGp Ctrs: 0";"V1C SubGp Ctrs: 45";
"V1C SubGp Ctrs: 90";"V1C SubGp Ctrs: 135";"Spat Integ RF";"V1C Len Sum Ang: 0";"V1C Len Sum Ang: 45";"V1C Len Sum Ang: 90";"V1C Len Sum Ang: 135";"V1C End Stop Ang: 0 Dir: 0";"V1C End Stop Ang: 0 Dir: 1";"V1C End Stop Ang: 45 Dir: 0";
"V1C End Stop Ang: 45 Dir: 1";"V1C End Stop Ang: 90 Dir: 0";"V1C End Stop Ang: 90 Dir: 1";"V1C End Stop Ang: 135 Dir: 0";"V1C End Stop Ang: 135 Dir: 1";      };
     };
     float_Data @["Stencil"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_100";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 8 0=0.1572327;
	val_type_fixed=0;
       };
      };
      name="Stencil";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 20;20;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [20 20 25] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.89999998;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.80000001;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.69999999;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.60000002;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.40000001;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.30000001;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.30000001;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.40000001;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.60000002;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.69999999;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.80000001;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.89999998;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.89999998;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.69999999;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.60000002;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.5;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.30000001;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.30000001;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.5;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.60000002;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.69999999;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.89999998;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;0.89999998;0.80000001;0.69999999;0.60000002;0.5;0.40000001;0.30000001;0.2;0.1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.1;0.2;0.30000001;0.40000001;0.5;0.60000002;0.69999999;0.80000001;0.89999998;
-0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.30000001;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.5;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.60000002;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.69999999;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.89999998;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.89999998;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.69999999;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.60000002;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.5;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.30000001;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;1;1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-1;-1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;1;1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-1;-1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;1;-1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;1;-1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;1;-1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;1;-1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.22313017;0.36787942;0.47236657;0.47236657;0.36787942;
0.22313017;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.36787942;0.60653073;0.77880073;0.77880073;0.60653073;
0.36787942;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.47236657;0.77880073;1;1;0.77880073;
0.47236657;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.47236657;0.77880073;1;1;0.77880073;
0.47236657;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.36787942;0.60653073;0.77880073;0.77880073;0.60653073;
0.36787942;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.22313017;0.36787942;0.47236657;0.47236657;0.36787942;
0.22313017;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0.5;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0.5;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.5;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;-1;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;-1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;-1;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;-1;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;-1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;-1;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.5;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [25] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["V1reg_V1Motion_GridFilters"] {
    UserDataItem_List @*(.user_data_) {
     name="UserDataItem_List_99";
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @["N_ROWS"] {
      name="N_ROWS";
      value 2 0=4;
      val_type_fixed=0;
     };
     UserDataItem @["SCALE_MIN"] {
      name="SCALE_MIN";
      value 8 0=-0.07035333;
      val_type_fixed=0;
     };
     UserDataItem @["SCALE_MAX"] {
      name="SCALE_MAX";
      value 8 0=0.07035333;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_HEIGHT"] {
      name="BLOCK_HEIGHT";
      value 8 0=0;
      val_type_fixed=0;
     };
    };
    name="V1reg_V1Motion_GridFilters";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_101";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 8 0=0.1572327;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [2] "X-T Angle: 30";"X-T Angle: 60";      };
     };
     float_Data @["Filter"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_102";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 8 0=0.1572327;
	val_type_fixed=0;
       };
      };
      name="Filter";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [10 10 2] -0.017094059;-0.0095941452;-0.0025664915;0.0034921151;0.0065609412;0.0064898566;0.0045993435;0.0022931045;0.00049836899;-0.00066122907;
-0.019810542;-0.019902365;-0.015887206;-0.0092841629;-0.0012095973;0.0048714494;0.0070679933;0.0063077058;0.0040907934;0.0017826108;
-0.0019183635;-0.014279931;-0.021350745;-0.023267176;-0.019871293;-0.011029587;0.00090757059;0.0060012517;0.007289913;0.0059238849;
0.02914463;0.011862005;-0.0060305614;-0.020215487;-0.030959936;-0.034885049;-0.027991582;-0.010112046;0.0027303342;0.0068249023;
0.039969627;0.038858879;0.026316958;0.0069162794;-0.013855244;-0.035788171;-0.050903551;-0.043925855;-0.022759272;-0.0040488644;
0.018126216;0.03502275;0.042779818;0.03802821;0.022322966;0.0014924374;-0.030610794;-0.052496392;-0.049058113;-0.029519944;
-0.011878934;0.0039059184;0.02422172;0.039715849;0.044246968;0.035763968;0.017374925;-0.0077633979;-0.036832064;-0.040881108;
-0.022797607;-0.018668696;-0.0084072622;0.0097401645;0.030086977;0.043349728;0.044216473;0.032164425;0.01176819;-0.013294567;
-0.013740928;-0.019981399;-0.022977125;-0.019823769;-0.0061129988;0.015854891;0.035339471;0.045649588;0.042648137;0.02743748;
-4.1572029e-08;-0.0072230217;-0.016099095;-0.025302028;-0.031208787;-0.026119515;1.4532583e-07;0.021881608;0.039623708;0.046436835;
-0.013493123;-0.0071600266;-0.0004702071;0.029144794;0.039969582;0.018125996;-0.033739042;-0.065835826;-0.028162582;4.2421416e-08;
-0.0080373157;-0.0076341317;-0.0037149854;0.011862239;0.038858969;0.035022609;0.0039056623;-0.05721689;-0.043462962;-0.0095370803;
-0.0020869642;-0.0059151496;-0.0053914869;-0.003613194;0.026317157;0.042779803;0.024221495;-0.025011158;-0.048512366;-0.020633025;
0.0034920468;-0.003079538;-0.0052343486;-0.010790708;0.006916529;0.038028348;0.039715733;0.0097398944;-0.037287876;-0.028889516;
0.0065609016;-0.00033163046;-0.003694742;-0.013658571;-0.013178001;0.022323204;0.044246998;0.030086759;-0.0095036449;-0.029451063;
0.0064898455;0.0048713814;-0.0016166716;-0.0121324;-0.026833713;0.0014927057;0.035764143;0.043349639;0.015854618;-0.019430917;
0.0045993514;0.0070679602;0.00090747961;-0.0077328854;-0.030317694;-0.028680651;0.017375194;0.044216547;0.035339281;-1.5794789e-07;
0.0022931201;0.0063077002;0.0060011926;-0.0026343844;-0.024671167;-0.046383936;-0.0098753646;0.032164644;0.045649543;0.021881338;
0.0004983836;0.0040908065;0.0072898865;0.0027302545;-0.013985214;-0.047423076;-0.051261485;0.011768481;0.042648263;0.039623544;
-0.00031624557;0.0017826274;0.0059238849;0.006824851;-0.0030764551;-0.035285011;-0.070353329;-0.023262084;0.027437735;0.046436835;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [2] 0;1;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["MotionTest"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_392";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserData_DocLink @["DocLink"] {
     name="DocLink";
     doc=.projects["vis_motion_test"].programs["MotionTest"].doc$$;
    };
   };
   name="MotionTest";
   short_nm="MtnTst";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=OBJS_UPDT_GUI;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @["MotionOutput"] {
     name="MotionOutput";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @["V1reg_image_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_92";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["IMAGE"] {
	 name="IMAGE";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="V1reg_image_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 64;64;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=0;
      };
      float_Data @["V1reg_v1s_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_93";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="V1reg_v1s_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1pi_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_94";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="V1reg_v1pi_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;1;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_95";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="V1reg_v1m_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;4;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_max_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_96";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
       };
       name="V1reg_v1m_max_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;1;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m0"] {
       name="V1reg_v1m_hist_r_m0";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m1"] {
       name="V1reg_v1m_hist_r_m1";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m2"] {
       name="V1reg_v1m_hist_r_m2";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m3"] {
       name="V1reg_v1m_hist_r_m3";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m4"] {
       name="V1reg_v1m_hist_r_m4";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m5"] {
       name="V1reg_v1m_hist_r_m5";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m6"] {
       name="V1reg_v1m_hist_r_m6";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m7"] {
       name="V1reg_v1m_hist_r_m7";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m8"] {
       name="V1reg_v1m_hist_r_m8";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_hist_r_m9"] {
       name="V1reg_v1m_hist_r_m9";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;32;32;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1s_sg_r"] {
       name="V1reg_v1s_sg_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;16;16;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1pi_sg_r"] {
       name="V1reg_v1pi_sg_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;1;16;16;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_sg_r"] {
       name="V1reg_v1m_sg_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;4;16;16;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1reg_v1m_max_sg_r"] {
       name="V1reg_v1m_max_sg_r";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;1;16;16;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [0]      };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     control_panel_cells {
      name="control_panel_cells";
      el_typ=DataTableCell;
      el_def=0;
     };
    };
    DataTable @["CanvasView"] {
     name="CanvasView";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @["canvas"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_99";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 8 0=0.1572327;
	 val_type_fixed=0;
	};
	UserDataItem @["IMAGE"] {
	 name="IMAGE";
	 value 1 0=1;
	 val_type_fixed=0;
	};
       };
       name="canvas";
       col_flags=SAVE_DATA;
       is_matrix=1;
       cell_geom{ 128;128;3;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [3] ;;;       };
       width=0;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [0]      };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     control_panel_cells {
      name="control_panel_cells";
      el_typ=DataTableCell;
      el_def=0;
     };
    };
    V1RetinaProc @["V1Retina_motion"] {
     name="V1Retina_motion";
     edge_mode=WRAP;
     fade_width=-1;
     regions {
      name="regions";
      el_typ=V1RegionSpec;
      el_def=0;
      V1RegionSpec @["V1reg"] {
       name="V1reg";
       threads {
	run_time {name="TimeUsedHR_87": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
	sync_time {name="TimeUsedHR_88": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
	total_time {name="TimeUsedHR_89": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
	n_wake_in_sync=0;
	run_time_pct=0;
	sync_time_pct=0;
	wake_in_sync_pct=2.865238627856695e+161;
       };
       data_table=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"]$$;
       save_mode=FIRST_ROW;
       image_save=SAVE_DATA|ONLY_GUI;
       region {ocularity=MONOCULAR: region=FOVEA: res=HI_RES: color=MONOCHROME: edge_mode=WRAP: renorm_thr=1e-5: };
       input_size {retina_size={x=64: y=64: }: border={x=0: y=0: }: input_size={x=64: y=64: }: };
       input_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       motion_frames=10;
       v1s_specs {on=1: wt=1: gain=2: size=6: spacing=2: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_2 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_3 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_renorm=NO_RENORM;
       v1s_kwta {on=1: gi=2: lay_gi=1.5: gain=80: nvar=0.01: g_bar_l=0.1: };
       v1s_neigh_inhib {on=1: inhib_d=1: inhib_g=0.6: tot_ni_len=3: };
       v1s_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       v1s_save=SAVE_DATA|ONLY_GUI|SAVE_DEBUG;
       v1s_img_geom {x=32: y=32: n_not_xy=0: n=1024: };
       v1s_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1s_motion {on=1: wt=1: gain=3: size=10: spacing=1: wvlen=6: sig_len=2: sig_wd=0.3: phase_off=1.5708: circle_edge=0: n_angles=2: r_only=1: };
       v1m_renorm=NO_RENORM;
       v1m_kwta {on=1: gi=3: lay_gi=10: gain=10: nvar=0.01: g_bar_l=0.1: };
       v1m_feat_geom {x=4: y=4: n_not_xy=0: n=16: };
       square_group {on=1: sg_rf=2: sg_spc=2: v1s_color=0: sg_half=1: sg_border=0: };
       sg_save=SAVE_DATA;
       v1sg_img_geom {x=16: y=16: n_not_xy=0: n=256: };
       v1sg_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1c_specs {on=0: end_stop=1: add_v1s=1: len_sum_len=1: es_thr=0.2: len_sum_width=3: len_sum_norm=0.3333333: };
       v1c_kwta {on=0: gi=2: lay_gi=1.5: gain=80: nvar=0.01: g_bar_l=0.1: };
       v1c_save=SAVE_DATA;
       v1c_img_geom {x=8: y=8: n_not_xy=0: n=64: };
       v1c_feat_geom {x=4: y=5: n_not_xy=0: n=20: };
       si_specs {on=0: v1s=0: v1pi=0: v1c=0: spat_rf={x=6: y=6: }: sig=0.8: sum_rf=0: spat_half={x=3: y=3: }: spat_spacing={x=3: y=3: }: spat_border={x=0: y=0: }: };
       si_renorm=NO_RENORM;
       si_kwta {on=1: gi=1.5: lay_gi=1.5: gain=80: nvar=0.01: g_bar_l=0.1: };
       si_save=SAVE_DATA;
       si_v1s_geom {x=5: y=5: n_not_xy=0: n=25: };
       si_v1c_geom {x=2: y=2: n_not_xy=0: n=4: };
       opt_filters=0;
       opt_save=SAVE_DATA;
       n_colors=1;
       n_polarities=2;
       n_polclr=2;
       v1m_out_polarities=1;
      };
     };
    };
    taCanvas @["Canvas"] {
     name="Canvas";
     coord_type=NORMALIZED;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @["StimType"] {
     name="StimType";
     desc=;
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @["LINE"] {
       name="LINE";
       value=0;
       desc=;
      };
      DynEnumItem @["BALL"] {
       name="BALL";
       value=1;
       desc=;
      };
      DynEnumItem @["MOTHER"] {
       name="MOTHER";
       value=2;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["MotionOutput"] {
     name="MotionOutput";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"]$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["V1Retina_motion"] {
     name="V1Retina_motion";
     var_type=T_Object;
     object_type=V1RetinaProc;
     object_val=.projects["vis_motion_test"].programs["MotionTest"].objs["V1Retina_motion"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["Canvas"] {
     name="Canvas";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=.projects["vis_motion_test"].programs["MotionTest"].objs["Canvas"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["stim_type"] {
     name="stim_type";
     var_type=T_DynEnum;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.projects["vis_motion_test"].programs["MotionTest"].types["StimType"]$$;
      value=1;
     };
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["canvas_size"] {
     name="canvas_size";
     var_type=T_Int;
     int_val=128;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["bg_color"] {
     name="bg_color";
     var_type=T_String;
     string_val="black";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["line_width"] {
     name="line_width";
     var_type=T_Real;
     real_val=0.02;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["line_color"] {
     name="line_color";
     var_type=T_String;
     string_val="black";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["start_x"] {
     name="start_x";
     var_type=T_Real;
     real_val=0.3;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["start_y"] {
     name="start_y";
     var_type=T_Real;
     real_val=0.3;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["size"] {
     name="size";
     var_type=T_Real;
     real_val=0.5;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["half_size"] {
     name="half_size";
     var_type=T_Real;
     real_val=0.2;
     flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["rot_angle"] {
     name="rot_angle";
     var_type=T_Real;
     real_val=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["vel_x"] {
     name="vel_x";
     var_type=T_Real;
     real_val=0.02;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["vel_y"] {
     name="vel_y";
     var_type=T_Real;
     real_val=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["cur_x"] {
     name="cur_x";
     var_type=T_Real;
     real_val=0.6000000000000002;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["cur_y"] {
     name="cur_y";
     var_type=T_Real;
     real_val=0.3;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["n_steps"] {
     name="n_steps";
     var_type=T_Int;
     int_val=15;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["CanvasView"] {
     name="CanvasView";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["vis_motion_test"].programs["MotionTest"].objs["CanvasView"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @["InitCanvas"] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCanvas(taCanvas* canv) returns: int";
     pre_compile_code_string="InitCanvas(taCanvas* canv) returns: int";
     name="InitCanvas";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="ProgVar_List_1";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["canv"] {
       name="canv";
       var_type=T_Object;
       object_type=taCanvas;
       object_val=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="ProgEl_List_710";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       pre_compile_code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="canv->InitCanvas()";
       pre_compile_code_string="canv->InitCanvas()";
       result_var=NULL;
       obj=.projects["vis_motion_test"].programs["MotionTest"].functions["InitCanvas"].args["canv"]$$;
       method=taCanvas::InitCanvas;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void InitCanvas()";
       meth_desc=" initialize the canvas -- MUST be called prior to drawing!";
      };
      MethodCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="canv->EraseName(bg_color)";
       pre_compile_code_string="canv->EraseName(bg_color)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].functions["InitCanvas"].args["canv"]$;
       method=taCanvas::EraseName;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="bg_color";
	 };
	};
       };
       meth_sig="void EraseName(taString& name)";
       meth_desc=" erase image to given color name";
      };
      MethodCall @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="canv->PenWidth(line_width)";
       pre_compile_code_string="canv->PenWidth(line_width)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].functions["InitCanvas"].args["canv"]$;
       method=taCanvas::PenWidth;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="width";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="line_width";
	 };
	};
       };
       meth_sig="void PenWidth(float width)";
       meth_desc=" ";
      };
      MethodCall @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="canv->PenColorName(line_color)";
       pre_compile_code_string="canv->PenColorName(line_color)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].functions["InitCanvas"].args["canv"]$;
       method=taCanvas::PenColorName;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="line_color";
	 };
	};
       };
       meth_sig="void PenColorName(taString& name)";
       meth_desc=" ";
      };
     };
    };
    Function @["ViewCanvas"] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ViewCanvas(taCanvas*& canv, String col_nm) returns: int";
     pre_compile_code_string="ViewCanvas(taCanvas*& canv, String col_nm) returns: int";
     name="ViewCanvas";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="ProgVar_List_1";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["canv"] {
       name="canv";
       var_type=T_Object;
       object_type=taCanvas;
       object_val=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=1;
       desc=;
       init_from=NULL;
      };
      ProgVar @["col_nm"] {
       name="col_nm";
       var_type=T_String;
       string_val=;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="ProgEl_List_710";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       pre_compile_code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="canv->ConfigDataColName(CanvasView, col_nm, taBase::VT_FLOAT, true)";
       pre_compile_code_string="canv->ConfigDataColName(CanvasView, col_nm, taBase::VT_FLOAT, true)";
       result_var=NULL;
       obj=.projects["vis_motion_test"].programs["MotionTest"].functions["ViewCanvas"].args["canv"]$$;
       method=taImage::ConfigDataColName;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CanvasView";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_nm";
	 };
	};
	ProgArg @[2] {
	 arg_type=taBase::ValType;
	 type="taBase::ValType";
	 name="val_type";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taBase::VT_FLOAT";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="rgb";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="bool ConfigDataColName(DataTable* dt, taString& col_nm, taBase::ValType val_type, bool rgb = true)";
       meth_desc=" configure data column with given name (if it doesn't exist, it is created) to represent current image -- if rgb is false, then a greyscale image is configured (2d)";
      };
      MethodCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="CanvasView->EnforceRows(1)";
       pre_compile_code_string="CanvasView->EnforceRows(1)";
       result_var=NULL;
       obj=.projects["vis_motion_test"].programs["MotionTest"].vars["CanvasView"]$$;
       method=DataTable::EnforceRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="1";
	 };
	};
       };
       meth_sig="void EnforceRows(int n_rows)";
       meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
      };
      MethodCall @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="canv->ImageToDataCellName(CanvasView, col_nm, 0)";
       pre_compile_code_string="canv->ImageToDataCellName(CanvasView, col_nm, 0)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].functions["ViewCanvas"].args["canv"]$;
       method=taImage::ImageToDataCellName;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CanvasView";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_nm";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
       };
       meth_sig="bool ImageToDataCellName(DataTable* dt, taString& col_nm, int row)";
       meth_desc=" set image to datatable cell indexed by col name and row number -- uses cell dimensionality and type -- only amount that fits in cell is copied. row = -1 = last row";
      };
      MethodCall @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="CanvasView->UpdateAllViews()";
       pre_compile_code_string="CanvasView->UpdateAllViews()";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["CanvasView"]$;
       method=taBase::UpdateAllViews;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void UpdateAllViews()";
       meth_desc=" called after data changes, to update views";
      };
     };
    };
    Function @["DrawLine"] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DrawLine() returns: int";
     pre_compile_code_string="DrawLine() returns: int";
     name="DrawLine";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="ProgVar_List_1";
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name="ProgEl_List_56";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (5 vars)";
       pre_compile_code_string="LocalVars (5 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @["sx"] {
	 name="sx";
	 var_type=T_Real;
	 real_val=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["sy"] {
	 name="sy";
	 var_type=T_Real;
	 real_val=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["rad_ang"] {
	 name="rad_ang";
	 var_type=T_Real;
	 real_val=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["ex"] {
	 name="ex";
	 var_type=T_Real;
	 real_val=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["ey"] {
	 name="ey";
	 var_type=T_Real;
	 real_val=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      MathCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="rad_ang = taMath_float::deg_to_rad(rot_angle)";
       pre_compile_code_string="rad_ang = taMath_float::deg_to_rad(rot_angle)";
       result_var=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawLine"].fun_code[0].local_vars["rad_ang"]$$;
       object_type=taMath_float;
       method=taMath_float::deg_to_rad;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="deg";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="rot_angle";
	 };
	};
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="sx = cur_x + half_size * cos(rad_ang)";
       pre_compile_code_string="sx = cur_x + half_size * cos(rad_ang)";
       result_var=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawLine"].fun_code[0].local_vars["sx"]$$;
       expr {
	expr="cur_x + half_size * cos(rad_ang)";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="sy = cur_y + half_size * sin(rad_ang)";
       pre_compile_code_string="sy = cur_y + half_size * sin(rad_ang)";
       result_var=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawLine"].fun_code[0].local_vars["sy"]$$;
       expr {
	expr="cur_y + half_size * sin(rad_ang)";
       };
      };
      AssignExpr @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ex = cur_x - half_size * cos(rad_ang)";
       pre_compile_code_string="ex = cur_x - half_size * cos(rad_ang)";
       result_var=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawLine"].fun_code[0].local_vars["ex"]$$;
       expr {
	expr="cur_x - half_size * cos(rad_ang)";
       };
      };
      AssignExpr @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ey = cur_y - half_size * sin(rad_ang)";
       pre_compile_code_string="ey = cur_y - half_size * sin(rad_ang)";
       result_var=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawLine"].fun_code[0].local_vars["ey"]$$;
       expr {
	expr="cur_y - half_size * sin(rad_ang)";
       };
      };
      MethodCall @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Canvas->Line(sx, sy, ex, ey)";
       pre_compile_code_string="Canvas->Line(sx, sy, ex, ey)";
       result_var=NULL;
       obj=.projects["vis_motion_test"].programs["MotionTest"].vars["Canvas"]$$;
       method=taCanvas::Line;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="x1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="sx";
	 };
	};
	ProgArg @[1] {
	 arg_type=float;
	 type="float";
	 name="y1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="sy";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="x2";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ex";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="y2";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ey";
	 };
	};
       };
       meth_sig="void Line(float x1, float y1, float x2, float y2)";
       meth_desc=" ";
      };
     };
    };
    Function @["DrawBall"] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DrawBall() returns: int";
     pre_compile_code_string="DrawBall() returns: int";
     name="DrawBall";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="ProgVar_List_1";
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name="ProgEl_List_57";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       pre_compile_code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Canvas->DrawSvgFile(\"ball.svg\", cur_x - half_size, cur_y - half_size, size, size, true, rot_angle)";
       pre_compile_code_string="Canvas->DrawSvgFile(\"ball.svg\", cur_x - half_size, cur_y - half_size, size, size, true, rot_angle)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["Canvas"]$;
       method=taCanvas::DrawSvgFile;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="file_name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"ball.svg\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=float;
	 type="float";
	 name="l";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="cur_x - half_size";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="b";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="cur_y - half_size";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="wd";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr="size";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="ht";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr="size";
	 };
	};
	ProgArg @[5] {
	 arg_type=bool;
	 type="bool";
	 name="auto_invert";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[6] {
	 arg_type=float;
	 type="float";
	 name="rotate";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="rot_angle";
	 };
	};
       };
       meth_sig="bool DrawSvgFile(taString& file_name, float l = 0, float b = 0, float wd = -1, float ht = -1, bool auto_invert = true, float rotate = 0)";
       meth_desc=" draw an SVG (scalable vector graphics) file onto the canvas -- in specified rectangle -- -1 = use full size -- returns false if not parsable -- auto_invert = add svg code to flip the image into our rendering convention where the bottom-left is 0,0 coordinate, instead of 0,0 being upper-left, rotate = optional global rotation transform, in degrees -- only works if doing auto_invert too";
      };
     };
    };
    Function @["DrawMother"] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DrawMother() returns: int";
     pre_compile_code_string="DrawMother() returns: int";
     name="DrawMother";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name=;
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       pre_compile_code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Canvas->DrawSvgFile(\"mother.svg\", cur_x - half_size, cur_y - half_size, size, size, true, rot_angle)";
       pre_compile_code_string="Canvas->DrawSvgFile(\"mother.svg\", cur_x - half_size, cur_y - half_size, size, size, true, rot_angle)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["Canvas"]$;
       method=taCanvas::DrawSvgFile;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="file_name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"mother.svg\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=float;
	 type="float";
	 name="l";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="cur_x - half_size";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="b";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="cur_y - half_size";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="wd";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr="size";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="ht";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr="size";
	 };
	};
	ProgArg @[5] {
	 arg_type=bool;
	 type="bool";
	 name="auto_invert";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[6] {
	 arg_type=float;
	 type="float";
	 name="rotate";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="rot_angle";
	 };
	};
       };
       meth_sig="bool DrawSvgFile(taString& file_name, float l = 0, float b = 0, float wd = -1, float ht = -1, bool auto_invert = true, float rotate = 0)";
       meth_desc=" draw an SVG (scalable vector graphics) file onto the canvas -- in specified rectangle -- -1 = use full size -- returns false if not parsable -- auto_invert = add svg code to flip the image into our rendering convention where the bottom-left is 0,0 coordinate, instead of 0,0 being upper-left, rotate = optional global rotation transform, in degrees -- only works if doing auto_invert too";
      };
     };
    };
    Function @["DrawStim"] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DrawStim() returns: int";
     pre_compile_code_string="DrawStim() returns: int";
     name="DrawStim";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="ProgVar_List_1";
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name="ProgEl_List_58";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       pre_compile_code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      Switch @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="switch(stim_type)";
       pre_compile_code_string="switch(stim_type)";
       switch_var=.projects["vis_motion_test"].programs["MotionTest"].vars["stim_type"]$$;
       cases {
	name="cases";
	el_typ=CaseBlock;
	el_def=0;
	CaseBlock @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: LINE";
	 pre_compile_code_string="case: LINE";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  FunctionCall @[0] {
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="DrawLine()";
	   pre_compile_code_string="DrawLine()";
	   result_var=NULL;
	   fun=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawLine"]$$;
	   fun_args {
	    name="fun_args";
	    el_typ=ProgArg;
	    el_def=0;
	   };
	  };
	 };
	 case_val {
	  expr="LINE";
	 };
	 is_default=0;
	};
	CaseBlock @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: BALL";
	 pre_compile_code_string="case: BALL";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  FunctionCall @[0] {
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="DrawBall()";
	   pre_compile_code_string="DrawBall()";
	   result_var=NULL;
	   fun=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawBall"]$$;
	   fun_args {
	    name="fun_args";
	    el_typ=ProgArg;
	    el_def=0;
	   };
	  };
	 };
	 case_val {
	  expr="BALL";
	 };
	 is_default=0;
	};
	CaseBlock @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: MOTHER";
	 pre_compile_code_string="case: MOTHER";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  FunctionCall @[0] {
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="DrawMother()";
	   pre_compile_code_string="DrawMother()";
	   result_var=NULL;
	   fun=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawMother"]$$;
	   fun_args {
	    name="fun_args";
	    el_typ=ProgArg;
	    el_def=0;
	   };
	  };
	 };
	 case_val {
	  expr="MOTHER";
	 };
	 is_default=0;
	};
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Canvas->SetImageSize(canvas_size, canvas_size)";
     pre_compile_code_string="Canvas->SetImageSize(canvas_size, canvas_size)";
     result_var=NULL;
     obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["Canvas"]$;
     method=taImage::SetImageSize;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_size";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="height";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_size";
       };
      };
     };
     meth_sig="bool SetImageSize(int width, int height)";
     meth_desc=" set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format";
    };
    FunctionCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCanvas(Canvas)";
     pre_compile_code_string="InitCanvas(Canvas)";
     result_var=NULL;
     fun=.projects["vis_motion_test"].programs["MotionTest"].functions["InitCanvas"]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taCanvas;
       type="taCanvas*";
       name="canv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Canvas";
       };
      };
     };
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="V1Retina_motion->Init()";
     pre_compile_code_string="V1Retina_motion->Init()";
     result_var=NULL;
     obj=.projects["vis_motion_test"].programs["MotionTest"].vars["V1Retina_motion"]$$;
     method=RetinaProc::Init;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool Init()";
     meth_desc=" initialize the filters, data table, etc -- call this in the init_code of any Program that is using this object";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CanvasView->EnforceRows(1)";
     pre_compile_code_string="CanvasView->EnforceRows(1)";
     result_var=NULL;
     obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["CanvasView"]$;
     method=DataTable::EnforceRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
     meth_sig="void EnforceRows(int n_rows)";
     meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
    };
    AssignExpr @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="half_size = .5 * size";
     pre_compile_code_string="half_size = .5 * size";
     result_var=.projects["vis_motion_test"].programs["MotionTest"].vars["half_size"]$$;
     expr {
      expr=".5 * size";
     };
    };
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["st"] {
       name="st";
       var_type=T_Int;
       int_val=0;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_x = start_x";
     pre_compile_code_string="cur_x = start_x";
     result_var=.projects["vis_motion_test"].programs["MotionTest"].vars["cur_x"]$$;
     expr {
      expr="start_x";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_y = start_y";
     pre_compile_code_string="cur_y = start_y";
     result_var=.projects["vis_motion_test"].programs["MotionTest"].vars["cur_y"]$$;
     expr {
      expr="start_y";
     };
    };
    ForLoop @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (st =0; st < n_steps; st++)";
     pre_compile_code_string="for (st =0; st < n_steps; st++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Canvas->EraseName(bg_color)";
       pre_compile_code_string="Canvas->EraseName(bg_color)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["Canvas"]$;
       method=taCanvas::EraseName;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="bg_color";
	 };
	};
       };
       meth_sig="void EraseName(taString& name)";
       meth_desc=" erase image to given color name";
      };
      FunctionCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="DrawStim()";
       pre_compile_code_string="DrawStim()";
       result_var=NULL;
       fun=.projects["vis_motion_test"].programs["MotionTest"].functions["DrawStim"]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
       };
      };
      FunctionCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ViewCanvas(Canvas, \"canvas\")";
       pre_compile_code_string="ViewCanvas(Canvas, \"canvas\")";
       result_var=NULL;
       fun=.projects["vis_motion_test"].programs["MotionTest"].functions["ViewCanvas"]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taCanvas;
	 type="taCanvas*";
	 name="canv";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Canvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taString;
	 type="String";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"canvas\"";
	 };
	};
       };
      };
      MethodCall @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="V1Retina_motion->LookAtImage(Canvas, NULL, , , , , , , , , )";
       pre_compile_code_string="V1Retina_motion->LookAtImage(Canvas, NULL, , , , , , , , , )";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["V1Retina_motion"]$;
       method=RetinaProc::LookAtImage;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="right_eye_image";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Canvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="left_eye_image";
	 required=0;
	 def_val="__null";
	 prev_expr=;
	 expr {
	  expr="NULL";
	 };
	};
	ProgArg @[2] {
	 arg_type=VisRegionParams::Region;
	 type="VisRegionParams::Region";
	 name="region";
	 required=0;
	 def_val="VisRegionParams::FOVEA";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="box_ll_x";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="box_ll_y";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[5] {
	 arg_type=float;
	 type="float";
	 name="box_ur_x";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[6] {
	 arg_type=float;
	 type="float";
	 name="box_ur_y";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[7] {
	 arg_type=float;
	 type="float";
	 name="move_x";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[8] {
	 arg_type=float;
	 type="float";
	 name="move_y";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[9] {
	 arg_type=float;
	 type="float";
	 name="scale";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[10] {
	 arg_type=float;
	 type="float";
	 name="rotate";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool LookAtImage(taImage* right_eye_image, taImage* left_eye_image = __null, VisRegionParams::Region region = VisRegionParams::FOVEA, float box_ll_x = 0.0f, float box_ll_y = 0.0f, float box_ur_x = 1.0f, float box_ur_y = 1.0f, float move_x = 0.0f, float move_y = 0.0f, float scale = 1.0f, float rotate = 0.0f)";
       meth_desc=" transform image/s in image format, with region of retina centered and scaled to fit the box coordinates given in 0-1 normalized units (ll=lower-left, ur=upper-right); additional scale, rotate, and move params applied after foveation scaling and offsets";
      };
      MethodCall @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="V1Retina_motion->FilterImageData(false)";
       pre_compile_code_string="V1Retina_motion->FilterImageData(false)";
       result_var=NULL;
       obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["V1Retina_motion"]$;
       method=RetinaProc::FilterImageData;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=bool;
	 type="bool";
	 name="motion_only";
	 required=0;
	 def_val="false";
	 prev_expr="Canvas";
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="bool FilterImageData(bool motion_only = false)";
       meth_desc=" filter retinal image data -- operates on images that were generated from prior Transform or LookAt calls -- must call one of those first -- if motion_only = true, then only process up to level of motion, for faster processing of initial frames of motion sequence";
      };
      MethodCall @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="MotionOutput->UpdateAllViews()";
       pre_compile_code_string="MotionOutput->UpdateAllViews()";
       result_var=NULL;
       obj=.projects["vis_motion_test"].programs["MotionTest"].vars["MotionOutput"]$$;
       method=taBase::UpdateAllViews;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void UpdateAllViews()";
       meth_desc=" called after data changes, to update views";
      };
      StopStepPoint @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Stop_Step Point";
       pre_compile_code_string="Stop_Step Point";
       cond {
	expr=;
       };
      };
      VarIncr @[7] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_x += vel_x";
       pre_compile_code_string="cur_x += vel_x";
       var=$.projects["vis_motion_test"].programs["MotionTest"].vars["cur_x"]$;
       expr {
	expr="vel_x";
       };
      };
      VarIncr @[8] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_y += vel_y";
       pre_compile_code_string="cur_y += vel_y";
       var=$.projects["vis_motion_test"].programs["MotionTest"].vars["cur_y"]$;
       expr {
	expr="vel_y";
       };
      };
     };
     init {
      expr="st =0";
     };
     test {
      expr="st < n_steps";
     };
     iter {
      expr="st++";
     };
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MotionOutput->UpdateAllViews()";
     pre_compile_code_string="MotionOutput->UpdateAllViews()";
     result_var=NULL;
     obj=$.projects["vis_motion_test"].programs["MotionTest"].vars["MotionOutput"]$;
     method=taBase::UpdateAllViews;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void UpdateAllViews()";
     meth_desc=" called after data changes, to update views";
    };
   };
   step_prog=.projects["vis_motion_test"].programs["MotionTest"]$$;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_46";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 8 0=0.001352265;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 8 0=0.008987418;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 8 0=0.9983097;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 8 0=0.7992811;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABAAAAAfwAAAKMAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["vis_motion_test"]$$;
   cur_font_size=0;
   visible=1;
   win_name=".projects[\"vis_motion_test\"] - vis_motion_test.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_47";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=0;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["vis_motion_test"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     cur_font_size=0;
     visible=1;
    };
    T3PanelViewer @["T3Frames"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_48";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="T3Frames";
     m_data=NULL;
     cur_font_size=0;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["MotionOutput"] {
       name="MotionOutput";
       m_data=NULL;
       cur_font_size=0;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=0;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["MotionOutput_Grid"] {
	  name="MotionOutput_Grid";
	  m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"]$;
	  cur_font_size=-1638617840;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1reg_image_r"] {
	    name="V1reg_image_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_image_r"]$$;
	    cur_font_size=1953719668;
	    m_transform=NULL;
	    visible=1;
	    text_width=32;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_r"] {
	    name="V1reg_v1s_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_r"]$$;
	    cur_font_size=-1638175920;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_r"] {
	    name="V1reg_v1pi_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_r"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_r"] {
	    name="V1reg_v1m_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_r"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_r"] {
	    name="V1reg_v1m_max_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_r"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m0"] {
	    name="V1reg_v1m_hist_r_m0";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m0"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m1"] {
	    name="V1reg_v1m_hist_r_m1";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m1"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m2"] {
	    name="V1reg_v1m_hist_r_m2";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m2"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m3"] {
	    name="V1reg_v1m_hist_r_m3";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m3"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m4"] {
	    name="V1reg_v1m_hist_r_m4";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m4"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m5"] {
	    name="V1reg_v1m_hist_r_m5";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m5"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m6"] {
	    name="V1reg_v1m_hist_r_m6";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m6"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m7"] {
	    name="V1reg_v1m_hist_r_m7";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m7"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m8"] {
	    name="V1reg_v1m_hist_r_m8";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m8"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m9"] {
	    name="V1reg_v1m_hist_r_m9";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m9"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_sg_r"] {
	    name="V1reg_v1s_sg_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_sg_r"]$$;
	    cur_font_size=1065353216;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_sg_r"] {
	    name="V1reg_v1pi_sg_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_sg_r"]$$;
	    cur_font_size=-133822984;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_sg_r"] {
	    name="V1reg_v1m_sg_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_sg_r"]$$;
	    cur_font_size=-140741592;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_sg_r"] {
	    name="V1reg_v1m_max_sg_r";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_sg_r"]$$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=0: max=0: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	 GridTableView @["MotionOutput_Grid_1"] {
	  name="MotionOutput_Grid_1";
	  m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"]$;
	  cur_font_size=56;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.1277: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1reg_image_r"] {
	    name="V1reg_image_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_image_r"]$;
	    cur_font_size=96;
	    m_transform=NULL;
	    visible=1;
	    text_width=32;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_r"] {
	    name="V1reg_v1s_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_r"]$;
	    cur_font_size=-1638167856;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_r"] {
	    name="V1reg_v1pi_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_r"] {
	    name="V1reg_v1m_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_r"] {
	    name="V1reg_v1m_max_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m0"] {
	    name="V1reg_v1m_hist_r_m0";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m0"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m1"] {
	    name="V1reg_v1m_hist_r_m1";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m1"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m2"] {
	    name="V1reg_v1m_hist_r_m2";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m2"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m3"] {
	    name="V1reg_v1m_hist_r_m3";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m3"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m4"] {
	    name="V1reg_v1m_hist_r_m4";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m4"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m5"] {
	    name="V1reg_v1m_hist_r_m5";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m5"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m6"] {
	    name="V1reg_v1m_hist_r_m6";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m6"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m7"] {
	    name="V1reg_v1m_hist_r_m7";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m7"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m8"] {
	    name="V1reg_v1m_hist_r_m8";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m8"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m9"] {
	    name="V1reg_v1m_hist_r_m9";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m9"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_sg_r"] {
	    name="V1reg_v1s_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_sg_r"]$;
	    cur_font_size=1065353216;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_sg_r"] {
	    name="V1reg_v1pi_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_sg_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_sg_r"] {
	    name="V1reg_v1m_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_sg_r"]$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_sg_r"] {
	    name="V1reg_v1m_max_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_sg_r"]$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.1277: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=1: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	 GridTableView @["MotionOutput_Grid_2"] {
	  name="MotionOutput_Grid_2";
	  m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"]$;
	  cur_font_size=538976288;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=1.2: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1reg_image_r"] {
	    name="V1reg_image_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_image_r"]$;
	    cur_font_size=96;
	    m_transform=NULL;
	    visible=1;
	    text_width=32;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_r"] {
	    name="V1reg_v1s_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_r"]$;
	    cur_font_size=-1638159664;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_r"] {
	    name="V1reg_v1pi_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_r"] {
	    name="V1reg_v1m_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_r"] {
	    name="V1reg_v1m_max_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m0"] {
	    name="V1reg_v1m_hist_r_m0";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m0"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m1"] {
	    name="V1reg_v1m_hist_r_m1";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m1"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m2"] {
	    name="V1reg_v1m_hist_r_m2";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m2"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m3"] {
	    name="V1reg_v1m_hist_r_m3";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m3"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m4"] {
	    name="V1reg_v1m_hist_r_m4";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m4"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m5"] {
	    name="V1reg_v1m_hist_r_m5";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m5"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m6"] {
	    name="V1reg_v1m_hist_r_m6";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m6"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m7"] {
	    name="V1reg_v1m_hist_r_m7";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m7"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m8"] {
	    name="V1reg_v1m_hist_r_m8";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m8"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m9"] {
	    name="V1reg_v1m_hist_r_m9";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m9"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_sg_r"] {
	    name="V1reg_v1s_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_sg_r"]$;
	    cur_font_size=1065353216;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_sg_r"] {
	    name="V1reg_v1pi_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_sg_r"]$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_sg_r"] {
	    name="V1reg_v1m_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_sg_r"]$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_sg_r"] {
	    name="V1reg_v1m_max_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_sg_r"]$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=1.2: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=3: max=3: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	 GridTableView @["MotionOutput_Grid_3"] {
	  name="MotionOutput_Grid_3";
	  m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"]$;
	  cur_font_size=151665533;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.124414: y=1.2: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1reg_image_r"] {
	    name="V1reg_image_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_image_r"]$;
	    cur_font_size=96;
	    m_transform=NULL;
	    visible=1;
	    text_width=32;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_r"] {
	    name="V1reg_v1s_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_r"]$;
	    cur_font_size=-1638151744;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_r"] {
	    name="V1reg_v1pi_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_r"] {
	    name="V1reg_v1m_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_r"] {
	    name="V1reg_v1m_max_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m0"] {
	    name="V1reg_v1m_hist_r_m0";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m0"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m1"] {
	    name="V1reg_v1m_hist_r_m1";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m1"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m2"] {
	    name="V1reg_v1m_hist_r_m2";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m2"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m3"] {
	    name="V1reg_v1m_hist_r_m3";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m3"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m4"] {
	    name="V1reg_v1m_hist_r_m4";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m4"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m5"] {
	    name="V1reg_v1m_hist_r_m5";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m5"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m6"] {
	    name="V1reg_v1m_hist_r_m6";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m6"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m7"] {
	    name="V1reg_v1m_hist_r_m7";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m7"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m8"] {
	    name="V1reg_v1m_hist_r_m8";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m8"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_hist_r_m9"] {
	    name="V1reg_v1m_hist_r_m9";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_hist_r_m9"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1s_sg_r"] {
	    name="V1reg_v1s_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1s_sg_r"]$;
	    cur_font_size=1065353216;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1pi_sg_r"] {
	    name="V1reg_v1pi_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1pi_sg_r"]$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_sg_r"] {
	    name="V1reg_v1m_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_sg_r"]$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1reg_v1m_max_sg_r"] {
	    name="V1reg_v1m_max_sg_r";
	    m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["MotionOutput"].data["V1reg_v1m_max_sg_r"]$;
	    cur_font_size=1;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.124414: y=1.2: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=17: max=17: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=0: g=0: b=0: a=1: };
       text_color {r=1: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.06385: y=1.05: z=2.843403: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.849653;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=1;
	 pos {x=0.5038512: y=0.4840013: z=1.269071: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.275321;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=1;
	 pos {x=1.623851: y=0.4840013: z=1.269071: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.275321;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=1;
	 pos {x=0.4838499: y=1.664001: z=1.269071: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.275321;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=1;
	 pos {x=1.623851: y=1.664001: z=1.269071: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.275321;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["V1reg_V1Motion_GridFilters"] {
       name="V1reg_V1Motion_GridFilters";
       m_data=NULL;
       cur_font_size=0;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=0;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["V1reg_V1Motion_GridFilters_Grid"] {
	  name="V1reg_V1Motion_GridFilters_Grid";
	  m_data=.projects["vis_motion_test"].data.gp["AnalysisData"]["V1reg_V1Motion_GridFilters"]$$;
	  cur_font_size=41;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Name"] {
	    name="Name";
	    m_data=.projects["vis_motion_test"].data.gp["AnalysisData"]["V1reg_V1Motion_GridFilters"].data["Name"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Filter"] {
	    name="Filter";
	    m_data=.projects["vis_motion_test"].data.gp["AnalysisData"]["V1reg_V1Motion_GridFilters"].data["Filter"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=4;
	  view_range {min=0: max=1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-0.07035333;
	   max=0.07035333;
	   last_min=-1;
	   last_max=1;
	   range=0.07035333;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.45: z=1.361874: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.359374;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["V1reg_GridV1Stencils"] {
       name="V1reg_GridV1Stencils";
       m_data=NULL;
       cur_font_size=0;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=0;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["V1reg_GridV1Stencils_Grid"] {
	  name="V1reg_GridV1Stencils_Grid";
	  m_data=.projects["vis_motion_test"].data.gp["AnalysisData"]["V1reg_GridV1Stencils"]$$;
	  cur_font_size=1667592307;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Name"] {
	    name="Name";
	    m_data=.projects["vis_motion_test"].data.gp["AnalysisData"]["V1reg_GridV1Stencils"].data["Name"]$$;
	    cur_font_size=256;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Stencil"] {
	    name="Stencil";
	    m_data=.projects["vis_motion_test"].data.gp["AnalysisData"]["V1reg_GridV1Stencils"].data["Stencil"]$$;
	    cur_font_size=0;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=4;
	  view_range {min=0: max=3: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=4;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=0: g=0: b=0: a=1: };
       text_color {r=1: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.52625: y=0.4495: z=1.393306: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.390806;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["CanvasView"] {
       name="CanvasView";
       m_data=NULL;
       cur_font_size=0;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=0;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["CanvasView_Grid"] {
	  name="CanvasView_Grid";
	  m_data=$.projects["vis_motion_test"].programs["MotionTest"].objs["CanvasView"]$;
	  cur_font_size=543257697;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["canvas"] {
	    name="canvas";
	    m_data=.projects["vis_motion_test"].programs["MotionTest"].objs["CanvasView"].data["canvas"]$$;
	    cur_font_size=83;
	    m_transform=NULL;
	    visible=1;
	    text_width=64;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=0: max=0: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.455: z=1.355138: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.352638;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_49";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 8 0=0.005991612;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 8 0=0.02772143;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 8 0=0.7543439;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=0;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 tree_state{ .;.docs;.wizards;.ctrl_panels;.param_sets;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.networks; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

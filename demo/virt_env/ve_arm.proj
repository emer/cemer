// ta_Dump File v2.0
LeabraProject .projects[0] { 
  Doc_Group @.docs = [1] {
    taDoc @[0] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [11] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
	LayerWizEl @[3] { };
	LayerWizEl @[4] { };
	LayerWizEl @[5] { };
	LayerWizEl @[6] { };
	LayerWizEl @[7] { };
	LayerWizEl @[8] { };
	LayerWizEl @[9] { };
	LayerWizEl @[10] { };
      };
    };
  };

  SelectEdit_Group @.edits = [3] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [13] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
	EditMbrItem @[11] { };
	EditMbrItem @[12] { };
      };

      EditMthItem_Group @.mths = [8] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
	EditMthItem @[6] { };
	EditMthItem @[7] { };
      };
    };
    SelectEdit @[1] { 
      EditMbrItem_Group @.mbrs = [0] {
	EditMbrItem_Group @.gp[0] = [6] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	};
	EditMbrItem_Group @.gp[1] { };
	EditMbrItem_Group @.gp[2] { };
	EditMbrItem_Group @.gp[3] { };
	EditMbrItem_Group @.gp[4] = [0] { 
	  EditMbrItem_Group @.gp[0] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	  EditMbrItem_Group @.gp[1] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	  EditMbrItem_Group @.gp[2] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	};
      };

      EditMthItem_Group @.mths = [3] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
      };
    };
    SelectEdit @[2] { 
      EditMbrItem_Group @.mbrs = [11] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [10] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [7] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  double_Data @[10] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  double_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  double_Data @[10] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  double_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	};
      };
    };
    DataTable_Group @.gp[2] { };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [6] {
    Program @[0] { 
      ProgObjList @.objs = [5] {
	VEWorld @[0] { 
	  VEObject_Group @.objects = [2] {
	    VEObject @[0] { 
	      VEBody_Group @.bodies = [9] {
		VEBody @[0] { };
		VEBody @[1] { };
		VEBody @[2] { };
		VEBody @[3] { };
		VEBody @[4] { };
		VECamera @[5] { };
		VECamera @[6] { };
		VEBody @[7] { };
		VEBody @[8] { };
	      };

	      VEJoint_Group @.joints = [3] {
		VELambdaArmJoint @[0] { };
		VELambdaArmJoint @[1] { };
		VEJoint @[2] { };
	      };
	    };
	    VEObject @[1] { 
	      VEBody_Group @.bodies = [1] {
		VEBody @[0] { };
	      };
	    };
	  };

	  VESpace_Group @.spaces = [1] {
	    VESpace @[0] { 
	      VEStatic_Group @.static_els = [2] {
		VEStatic @[0] { };
		VEStatic @[1] { };
	      };
	    };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [20] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	    float_Data @[3] { };
	    float_Data @[4] { };
	    float_Data @[5] { };
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	    float_Data @[10] { };
	    float_Data @[11] { };
	    float_Data @[12] { };
	    float_Data @[13] { };
	    float_Data @[14] { };
	    float_Data @[15] { };
	    float_Data @[16] { };
	    float_Data @[17] { };
	    float_Data @[18] { };
	    float_Data @[19] { };
	  };
	};
	DataTable @[2] { 
	  DataTableCols @.data = [29] {
	    float_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	    float_Data @[3] { };
	    float_Data @[4] { };
	    float_Data @[5] { };
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	    float_Data @[10] { };
	    float_Data @[11] { };
	    float_Data @[12] { };
	    float_Data @[13] { };
	    float_Data @[14] { };
	    float_Data @[15] { };
	    float_Data @[16] { };
	    float_Data @[17] { };
	    float_Data @[18] { };
	    float_Data @[19] { };
	    float_Data @[20] { };
	    float_Data @[21] { };
	    float_Data @[22] { };
	    float_Data @[23] { };
	    float_Data @[24] { };
	    float_Data @[25] { };
	    float_Data @[26] { };
	    float_Data @[27] { };
	    float_Data @[28] { };
	  };
	};
	NetMonitor @[3] { 
	  NetMonItem_List @.items = [20] {
	    NetMonItem @[0] { };
	    NetMonItem @[1] { };
	    NetMonItem @[2] { };
	    NetMonItem @[3] { };
	    NetMonItem @[4] { };
	    NetMonItem @[5] { };
	    NetMonItem @[6] { };
	    NetMonItem @[7] { };
	    NetMonItem @[8] { };
	    NetMonItem @[9] { };
	    NetMonItem @[10] { };
	    NetMonItem @[11] { };
	    NetMonItem @[12] { };
	    NetMonItem @[13] { };
	    NetMonItem @[14] { };
	    NetMonItem @[15] { };
	    NetMonItem @[16] { };
	    NetMonItem @[17] { };
	    NetMonItem @[18] { };
	    NetMonItem @[19] { };
	  };
	};
	NetMonitor @[4] { 
	  NetMonItem_List @.items = [29] {
	    NetMonItem @[0] { };
	    NetMonItem @[1] { };
	    NetMonItem @[2] { };
	    NetMonItem @[3] { };
	    NetMonItem @[4] { };
	    NetMonItem @[5] { };
	    NetMonItem @[6] { };
	    NetMonItem @[7] { };
	    NetMonItem @[8] { };
	    NetMonItem @[9] { };
	    NetMonItem @[10] { };
	    NetMonItem @[11] { };
	    NetMonItem @[12] { };
	    NetMonItem @[13] { };
	    NetMonItem @[14] { };
	    NetMonItem @[15] { };
	    NetMonItem @[16] { };
	    NetMonItem @[17] { };
	    NetMonItem @[18] { };
	    NetMonItem @[19] { };
	    NetMonItem @[20] { };
	    NetMonItem @[21] { };
	    NetMonItem @[22] { };
	    NetMonItem @[23] { };
	    NetMonItem @[24] { };
	    NetMonItem @[25] { };
	    NetMonItem @[26] { };
	    NetMonItem @[27] { };
	    NetMonItem @[28] { };
	  };
	};
      };

      ProgVar_List @.args = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
      };

      ProgVar_List @.vars = [40] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
	ProgVar @[16] { };
	ProgVar @[17] { };
	ProgVar @[18] { };
	ProgVar @[19] { };
	ProgVar @[20] { };
	ProgVar @[21] { };
	ProgVar @[22] { };
	ProgVar @[23] { };
	ProgVar @[24] { };
	ProgVar @[25] { };
	ProgVar @[26] { };
	ProgVar @[27] { };
	ProgVar @[28] { };
	ProgVar @[29] { };
	ProgVar @[30] { };
	ProgVar @[31] { };
	ProgVar @[32] { };
	ProgVar @[33] { };
	ProgVar @[34] { };
	ProgVar @[35] { };
	ProgVar @[36] { };
	ProgVar @[37] { };
	ProgVar @[38] { };
	ProgVar @[39] { };
      };

      ProgEl_List @.init_code = [14] {
	MethodCall @[0] { };
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	ResetDataRows @[3] { };
	ResetDataRows @[4] { };
	AssignExpr @[5] { };
	AssignExpr @[6] { };
	AssignExpr @[7] { };
	AssignExpr @[8] { };
	AssignExpr @[9] { };
	AssignExpr @[10] { };
	AssignExpr @[11] { };
	AssignExpr @[12] { };
	AssignExpr @[13] { };
      };

      ProgEl_List @.prog_code = [29] {
	If @[0] { 
	  ProgEl_List @.true_code = [3] {
	    Comment @[0] { };
	    RandomCall @[1] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    RandomCall @[2] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	  };
	};
	Comment @[1] { };
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	AssignExpr @[4] { };
	AssignExpr @[5] { };
	ResetDataRows @[6] { };
	ForLoop @[7] { 
	  ProgEl_List @.loop_code = [5] {
	    If @[0] { 
	      ProgEl_List @.true_code = [4] {
		IfElse @[0] { 
		  ProgEl_List @.true_code = [2] {
		    VarIncr @[0] { };
		    AssignExpr @[1] { };
		  };

		  ProgEl_List @.false_code = [2] {
		    VarIncr @[0] { };
		    AssignExpr @[1] { };
		  };
		};
		IfElse @[1] { 
		  ProgEl_List @.true_code = [2] {
		    VarIncr @[0] { };
		    AssignExpr @[1] { };
		  };

		  ProgEl_List @.false_code = [2] {
		    VarIncr @[0] { };
		    AssignExpr @[1] { };
		  };
		};
		MethodCall @[2] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
		MethodCall @[3] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
	      };
	    };
	    MethodCall @[1] { };
	    If @[2] { 
	      ProgEl_List @.true_code = [6] {
		AddNewDataRow @[0] { };
		MethodCall @[1] { };
		MethodCall @[2] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
		MethodCall @[3] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
		MethodCall @[4] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
		DoneWritingDataRow @[5] { };
	      };
	    };
	    If @[3] { 
	      ProgEl_List @.true_code = [2] {
		AssignExpr @[0] { };
		IfBreak @[1] { };
	      };
	    };
	    StopStepPoint @[4] { };
	  };
	};
	Comment @[8] { };
	AssignExpr @[9] { };
	AssignExpr @[10] { };
	AssignExpr @[11] { };
	AssignExpr @[12] { };
	AssignExpr @[13] { };
	MathCall @[14] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	Comment @[15] { };
	AssignExpr @[16] { };
	AssignExpr @[17] { };
	AssignExpr @[18] { };
	AddNewDataRow @[19] { };
	MethodCall @[20] { };
	MethodCall @[21] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[22] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[23] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[24] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[25] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[26] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[27] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	DoneWritingDataRow @[28] { };
      };
    };
    Program @[1] { 
      ProgVar_List @.args = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
      };

      ProgVar_List @.vars = [9] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
      };

      ProgEl_List @.prog_code = [7] {
	OtherProgramVar @[0] { };
	If @[1] { 
	  ProgEl_List @.true_code = [2] {
	    RandomCall @[0] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    RandomCall @[1] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	  };
	};
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	MemberAssign @[4] { };
	MemberAssign @[5] { };
	MethodCall @[6] { };
      };
    };
    Program @[2] { 
      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [17] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
	ProgVar @[16] { };
      };

      ProgEl_List @.prog_code = [16] {
	OtherProgramVar @[0] { };
	OtherProgramVar @[1] { };
	Comment @[2] { };
	AssignExpr @[3] { };
	AssignExpr @[4] { };
	AssignExpr @[5] { };
	AssignExpr @[6] { };
	AssignExpr @[7] { };
	AssignExpr @[8] { };
	Comment @[9] { };
	MethodCall @[10] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[11] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[12] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[13] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[14] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[15] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
      };
    };
    Program @[3] { 
      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [15] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
      };

      ProgEl_List @.prog_code = [15] {
	Comment @[0] { };
	OtherProgramVar @[1] { };
	OtherProgramVar @[2] { };
	OtherProgramVar @[3] { };
	AssignExpr @[4] { };
	AssignExpr @[5] { };
	OtherProgramVar @[6] { };
	Comment @[7] { };
	MethodCall @[8] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[9] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[10] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[11] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[12] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[13] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	DoneWritingDataRow @[14] { };
      };
    };
    Program @[4] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [11] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
      };

      ProgEl_List @.init_code = [1] {
	AssignExpr @[0] { };
      };

      ProgEl_List @.prog_code = [7] {
	OtherProgramVar @[0] { };
	If @[1] { 
	  ProgEl_List @.true_code = [1] {
	    IfElse @[0] { 
	      ProgEl_List @.true_code = [1] {
		AssignExpr @[0] { };
	      };

	      ProgEl_List @.false_code = [2] {
		If @[0] { 
		  ProgEl_List @.true_code = [1] {
		    VarIncr @[0] { };
		  };
		};
		If @[1] { 
		  ProgEl_List @.true_code = [1] {
		    VarIncr @[0] { };
		  };
		};
	      };
	    };
	  };
	};
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	Comment @[4] { };
	MethodCall @[5] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	DoneWritingDataRow @[6] { };
      };
    };
    Program @[5] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [8] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
      };

      ProgEl_List @.prog_code = [30] {
	IfReturn @[0] { };
	Comment @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	RegisterArgs @[4] { };
	Comment @[5] { };
	PrintExpr @[6] { };
	MethodCall @[7] { };
	MiscCall @[8] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MiscCall @[9] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	ProgVarFmArg @[10] { };
	ProgVarFmArg @[11] { };
	Comment @[12] { };
	ProgVarFmArg @[13] { };
	ProgVarFmArg @[14] { };
	ProgVarFmArg @[15] { };
	ProgVarFmArg @[16] { };
	MemberFmArg @[17] { };
	MemberFmArg @[18] { };
	MemberFmArg @[19] { };
	Comment @[20] { };
	MethodCall @[21] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MiscCall @[22] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[23] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[24] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[25] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[26] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	OtherProgramVar @[27] { };
	PrintExpr @[28] { };
	ProgramCall @[29] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program_Group @.gp[0] = [11] { 
      Program @[0] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [8] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [9] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { };
	  MethodCall @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	  If @[9] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      If @[1] { 
		ProgEl_List @.true_code = [2] {
		  MethodCall @[0] { };
		  MethodCall @[1] { };
		};
	      };
	    };
	  };
	  MethodCall @[10] { };
	  ProgramCall @[11] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  IfElse @[2] { 
	    ProgEl_List @.true_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      ProgramCall @[1] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[2] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[1] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[4] { };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [11] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  IfElse @[2] { 
	    ProgEl_List @.true_code = [4] {
	      AssignExpr @[0] { };
	      AssignExpr @[1] { };
	      ProgramCall @[2] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[3] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      ProgramCall @[0] { };
	    };
	  };
	  MethodCall @[4] { };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[6] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[7] { };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[9] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[10] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [10] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	      LayerWriterEl @[5] { };
	      LayerWriterEl @[6] { };
	      LayerWriterEl @[7] { };
	      LayerWriterEl @[8] { };
	      LayerWriterEl @[9] { };
	    };
	  };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [7] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	      LayerWriterEl @[5] { };
	      LayerWriterEl @[6] { };
	    };
	  };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[9] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[10] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [6] { 
      Program @[0] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  If @[0] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      PrintVar @[1] { };
	    };
	  };
	  NetCounterInit @[1] { };
	  MemberAssign @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	  MethodCall @[9] { };
	  ProgramCall @[10] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[11] { };
	};
      };
      Program @[1] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  IfElse @[2] { 
	    ProgEl_List @.true_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      ProgramCall @[1] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[2] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[1] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[4] { };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [11] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  IfElse @[2] { 
	    ProgEl_List @.true_code = [4] {
	      AssignExpr @[0] { };
	      AssignExpr @[1] { };
	      ProgramCall @[2] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[3] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      ProgramCall @[0] { };
	    };
	  };
	  MethodCall @[4] { };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[6] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[7] { };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[9] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[10] { };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [5] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [6] {
		VEWorldView @[0] { 
		  T3DataView_List @.children = [3] {
		    VESpaceView @[0] { 
		      T3DataView_List @.children = [2] {
			VEStaticView @[0] { };
			VEStaticView @[1] { };
		      };
		    };
		    VEObjectView @[1] { 
		      T3DataView_List @.children = [9] {
			VEBodyView @[0] { };
			VEBodyView @[1] { };
			VEBodyView @[2] { };
			VEBodyView @[3] { };
			VEBodyView @[4] { };
			VEBodyView @[5] { };
			VEBodyView @[6] { };
			VEBodyView @[7] { };
			VEBodyView @[8] { };
		      };
		    };
		    VEObjectView @[2] { 
		      T3DataView_List @.children = [1] {
			VEBodyView @[0] { };
		      };
		    };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		  };
		};
		GraphTableView @[2] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		  };
		};
		GraphTableView @[3] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		  };
		};
		GraphTableView @[4] { 
		  T3DataView_List @.children = [29] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		    GraphColView @[20] { };
		    GraphColView @[21] { };
		    GraphColView @[22] { };
		    GraphColView @[23] { };
		    GraphColView @[24] { };
		    GraphColView @[25] { };
		    GraphColView @[26] { };
		    GraphColView @[27] { };
		    GraphColView @[28] { };
		  };
		};
		GraphTableView @[5] { 
		  T3DataView_List @.children = [29] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		    GraphColView @[20] { };
		    GraphColView @[21] { };
		    GraphColView @[22] { };
		    GraphColView @[23] { };
		    GraphColView @[24] { };
		    GraphColView @[25] { };
		    GraphColView @[26] { };
		    GraphColView @[27] { };
		    GraphColView @[28] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [6] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		    ScaleRange @[5] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [3] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[4] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };

  Network_Group @.networks = [2] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [7] {
	LeabraUnitSpec @[0] { };
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { };
	  };
	};
	ScalarValLayerSpec @[4] { };
	ScalarValLayerSpec @[5] { };
	TwoDValLayerSpec @[6] { };
      };

      Layer_Group @.layers = [11] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[1] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[2] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[3] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[4] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[5] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[6] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @[7] { 
	  Projection_Group @.projections = [6] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	    LeabraPrjn @[5] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @[8] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[9] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[10] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
      };
    };
    LeabraNetwork @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [7] {
	LeabraUnitSpec @[0] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraUnitSpec @[0] { };
	  };
	};
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { 
	      Schedule @.lrate_sched = [2] {
		SchedItem @[0] { };
		SchedItem @[1] { };
	      };
	    };
	  };

	  Schedule @.lrate_sched = [2] {
	    SchedItem @[0] { };
	    SchedItem @[1] { };
	  };
	};
	ScalarValLayerSpec @[4] { };
	ScalarValLayerSpec @[5] { };
	TwoDValLayerSpec @[6] { };
	BaseSpec_Group @.gp[0] = [2] { 
	  LeabraUnitSpec @[0] { 
	    BaseSpec_Group @.children = [1] {
	      LeabraUnitSpec @[0] { };
	    };
	  };
	  LeabraUnitSpec @[1] { };
	};
	BaseSpec_Group @.gp[1] = [2] { 
	  LeabraConSpec @[0] { 
	    BaseSpec_Group @.children = [2] {
	      PVConSpec @[0] { 
		BaseSpec_Group @.children = [3] {
		  PVrConSpec @[0] { };
		  PVConSpec @[1] { 
		    BaseSpec_Group @.children = [1] {
		      PVConSpec @[0] { };
		    };
		  };
		  PVConSpec @[2] { };
		};
	      };
	      LeabraBiasSpec @[1] { 
		BaseSpec_Group @.children = [1] {
		  LeabraBiasSpec @[0] { };
		};
	      };
	    };
	  };
	  MarkerConSpec @[1] { };
	};
	BaseSpec_Group @.gp[2] = [6] { 
	  ExtRewLayerSpec @[0] { };
	  PVrLayerSpec @[1] { };
	  PViLayerSpec @[2] { };
	  LVeLayerSpec @[3] { 
	    BaseSpec_Group @.children = [1] {
	      LViLayerSpec @[0] { };
	    };
	  };
	  NVLayerSpec @[4] { };
	  PVLVDaLayerSpec @[5] { };
	};
	BaseSpec_Group @.gp[3] = [2] { 
	  FullPrjnSpec @[0] { };
	  OneToOnePrjnSpec @[1] { };
	};
      };

      Layer_Group @.layers = [18] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [6] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	    LeabraPrjn @[5] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[3] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[5] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[6] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[7] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @[8] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[9] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[10] { 
	  Projection_Group @.projections = [7] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	    LeabraPrjn @[5] { };
	    LeabraPrjn @[6] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @[11] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[12] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[13] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[14] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[15] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[16] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[17] { 
	  Unit_Group @.units = [110] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_1";
 desc=;
 tags=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   auto_open=1;
   text="<html>
<head></head>
<body>
== Virtual Environment, Arm Reach Model ==

This project demonstrates the virtual environment features of emergent, with a robot with an arm that is driven by a network to reach for a given target.  It is setup currently to learn via reinforcement learning, in the RLNet, which does an OK but not great job.

To run it, go to the Control panel and do Test Init, and Test Run.

</body>
</html>
";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=11;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="VisTarget_Cur";
     n_units=110;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="VisHand_Cur";
     n_units=110;
     io_type=INPUT;
    };
    LayerWizEl @[2] {
     name="SomaShoulderAngle_Cur";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[3] {
     name="SomaElbowAngle_Cur";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[4] {
     name="MotorShoulderForce";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[5] {
     name="MotorElbowForce";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[6] {
     name="VisFwdHidden";
     n_units=49;
     io_type=HIDDEN;
    };
    LayerWizEl @[7] {
     name="SomaFwdHidden";
     n_units=49;
     io_type=HIDDEN;
    };
    LayerWizEl @[8] {
     name="VisHand_Pred";
     n_units=110;
     io_type=OUTPUT;
    };
    LayerWizEl @[9] {
     name="SomaShoulderAngle_Pred";
     n_units=12;
     io_type=OUTPUT;
    };
    LayerWizEl @[10] {
     name="SomaElbowAngle_Pred";
     n_units=12;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="Control";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraCycle update_net_view";
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     base=.projects[0].programs.gp[0][5].vars[0]$0$;
     mbr=ProgVar::bool_val;
    };
    EditMbrItem @[1] {
     label="LeabraAll_Std step prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=.projects[0].programs.gp[0]$1$;
     mbr=Program_Group::step_prog;
    };
    EditMbrItem @[2] {
     label="LeabraUnitSpec_0 noise";
     desc=" distribution parameters for random added noise<br>  type:  type of random variable to generate<br>    UNIFORM:  uniform with var = range on either side of the mean<br>    BINOMIAL:  binomial with var = p, par = n<br>    POISSON:  poisson with lambda = var<br>    GAMMA:  gamma with var and par = stages<br>    GAUSSIAN:  normal with var<br>    NONE:  just the mean<br>  mean:  mean of random distribution<br>  var:  'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)<br>  par:  extra parameter for distribution (depends on each one)";
     base=.projects[0].networks[1].specs[0]$2$;
     mbr=LeabraUnitSpec::noise;
    };
    EditMbrItem @[3] {
     label="LeabraUnitSpec_0 da mod";
     desc=" da modulation of activations (for da-based learning, and other effects)<br>  on:  whether to actually modulate activations by da values<br>  mod:  how to apply DA modulation<br>    PLUS CONT:  da modulates plus-phase activations (only) in a continuous manner<br>    PLUS POST:  da modulates plus-phase activations (only), at the end of the plus phase<br>  gain:  gain multiplier of da values";
     base=$2$;
     mbr=LeabraUnitSpec::da_mod;
    };
    EditMbrItem @[4] {
     label="LeabraTrain network";
     desc="network to train";
     base=.projects[0].programs.gp[0][1].args[0]$3$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[5] {
     label="LeabraTrain input_data";
     desc="datatable with training patterns";
     base=.projects[0].programs.gp[0][1].args[1]$4$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[6] {
     label="RLModelRew rew_dist ~ hr_init";
     desc="initial threshold on distance to get a reward at start of training";
     base=.projects[0].programs[4].vars[7]$5$;
     mbr=ProgVar::real_val;
    };
    EditMbrItem @[7] {
     label="RLModelRew rew_dist ~ hr_incr";
     desc="how much to decrease the distance threshold when network is doing well (see avg_rew_thr) -- should be a POSITIVE number";
     base=.projects[0].programs[4].vars[8]$6$;
     mbr=ProgVar::real_val;
    };
    EditMbrItem @[8] {
     label="RLModelRew avg_rew_dec_thr";
     desc="threshold on network avg_rew for decreasing the reward threshold (makes the task harder -- when doing well)";
     base=.projects[0].programs[4].vars[9]$7$;
     mbr=ProgVar::real_val;
    };
    EditMbrItem @[9] {
     label="RLModelRew avg_rew_inc_thr";
     desc="threshold on network avg_rew for increasing the reward threshold (makes task easier -- when doing poorly)";
     base=.projects[0].programs[4].vars[10]$8$;
     mbr=ProgVar::real_val;
    };
    EditMbrItem @[10] {
     label="ForceScalarVal inhib";
     desc=" how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer<br>  type:  how to compute inhibition (g_i)<br>    KWTA INHIB:  between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)<br>    KWTA AVG INHIB:  average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)<br>    KWTA KV2K:  average of top k vs avg of next k (2k) -- avoids long 'tail' of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB<br>    KWTA COMP COST:  competitor cost kwta function: inhibition is i_kwta_pt below the k'th unit's threshold inhibition value if there are no strong competitors (>comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility<br>    AVG MAX PT INHIB:  put inhib value at i_kwta_pt between avg and max values for layer<br>    MAX INHIB:  put inhib value at i_kwta_pt below max guy in layer<br>    UNIT INHIB:  unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)<br>  kwta pt: [Default: 0.25;0.6;0.2]  [Default: .25 for KWTA_INHIB and KWTA_KV2K, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)<br>  min i:  minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation<br>  comp thr:  [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k'th inhibition and those above this threshold are counted as competitors <br>  comp gain:  Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level<br>  gp pt:  [Default: .2] for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB";
     base=.projects[0].networks[1].specs[5]$9$;
     mbr=LeabraLayerSpec::inhib;
    };
    EditMbrItem @[11] {
     label="LeabraEpochTest network";
     desc="network to operate on";
     base=.projects[0].programs.gp[1][0].args[0]$10$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[12] {
     label="LeabraEpochTest input_data";
     desc="table of patterns to present to the network, one row at a time";
     base=.projects[0].programs.gp[1][0].vars[0]$11$;
     mbr=ProgVar::object_val;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][1]$12$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program";
     base=$12$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$12$;
     mth=Program::Step;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$12$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Test Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[1][0]$13$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Test Run";
     desc=" run the program";
     base=$13$;
     mth=Program::Run;
    };
    EditMthItem @[6] {
     label="Test Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$13$;
     mth=Program::Step;
    };
    EditMthItem @[7] {
     label="Test Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$13$;
     mth=Program::Stop;
    };
   };
  };
  SelectEdit @[1] {
   name="VEInfo";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem_Group @.gp[0] {
     name="VE Arm";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="VEArmWorld stepsize";
      desc=" how big of a step to take";
      base=.projects[0].programs[0].objs[0]$14$;
      mbr=VEWorld::stepsize;
     };
     EditMbrItem @[1] {
      label="VEArmWorld ode params";
      desc=" parameters for tuning the ODE engine<br>  erp: [Default: 0.2]  (0-1, .1-.8 useful range) error reduction parameter: how much of the joint error is reduced at the next time step<br>  cfm: [Default: 1e-05]  (0-1, 1e-9 - 1 useful range) constraint force mixing parameter: how 'soft' is the constraint (0 = hard, 1 = soft)<br>  max cor vel: [Default: 1e+06]  maximum correcting velocity for contacts (how quickly they can pop things out of contact)<br>  contact depth: [Default: 0.001]  depth of the surface layer arond all geometry objects -- allows things to go this deep into a surface before actual contact is made -- increased value can help prevent jittering<br>  max col pts: [Default: 4]  maximum number of collision points to get (must be less than 64, which is a hard maximum)";
      base=$14$;
      mbr=VEWorld::ode_params;
     };
     EditMbrItem @[2] {
      label="VEArmWorld updt display";
      desc=" if true, will update any attached display after each time step";
      base=$14$;
      mbr=VEWorld::updt_display;
     };
     EditMbrItem @[3] {
      label="Arm max_ve_steps";
      desc=" integer value (also for enum types)";
      base=.projects[0].programs[0].vars[22]$15$;
      mbr=ProgVar::int_val;
     };
     EditMbrItem @[4] {
      label="Arm hand_vel_thr";
      desc="threshold for stopping movement in hand velocity";
      base=.projects[0].programs[0].vars[20]$16$;
      mbr=ProgVar::real_val;
     };
     EditMbrItem @[5] {
      label="Arm co_contract_pct";
      desc="how much to co-contract the muscles for the movement";
      base=.projects[0].programs[0].vars[8]$17$;
      mbr=ProgVar::real_val;
     };
    };
    EditMbrItem_Group @.gp[1] {
     name="Shoulder";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp[2] {
     name="Elbow";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp[3] {
     name="Joints";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp[0] {
      name="Elbow";
      el_typ=EditMbrItem;
      el_def=0;
     };
     EditMbrItem_Group @.gp[1] {
      name="Shoulder";
      el_typ=EditMbrItem;
      el_def=0;
     };
    };
    EditMbrItem_Group @.gp[4] {
     name="Limbs";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp[0] {
      name="Humerus";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Humerus cur pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=.projects[0].programs[0].objs[0].objects[0].bodies[1]$18$;
       mbr=VEBody::cur_pos;
      };
      EditMbrItem @[1] {
       label="Humerus cur lin vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$18$;
       mbr=VEBody::cur_lin_vel;
      };
      EditMbrItem @[2] {
       label="Humerus cur ang vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$18$;
       mbr=VEBody::cur_ang_vel;
      };
     };
     EditMbrItem_Group @.gp[1] {
      name="Ulna";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Ulna cur pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=.projects[0].programs[0].objs[0].objects[0].bodies[2]$19$;
       mbr=VEBody::cur_pos;
      };
      EditMbrItem @[1] {
       label="Ulna cur lin vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$19$;
       mbr=VEBody::cur_lin_vel;
      };
      EditMbrItem @[2] {
       label="Ulna cur ang vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$19$;
       mbr=VEBody::cur_ang_vel;
      };
     };
     EditMbrItem_Group @.gp[2] {
      name="Hand";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Hand cur pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=.projects[0].programs[0].objs[0].objects[0].bodies[3]$20$;
       mbr=VEBody::cur_pos;
      };
      EditMbrItem @[1] {
       label="Hand cur lin vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$20$;
       mbr=VEBody::cur_lin_vel;
      };
      EditMbrItem @[2] {
       label="Hand cur ang vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$20$;
       mbr=VEBody::cur_ang_vel;
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Arm Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs[0]$21$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Arm Run";
     desc=" run the program";
     base=$21$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Arm Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$21$;
     mth=Program::Step;
    };
   };
  };
  SelectEdit @[2] {
   name="PVLV";
   auto_edit=0;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="pvr lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[0]$22$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[1] {
     label="pvi lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0]$23$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[2] {
     label="lve lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[1]$24$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[3] {
     label="lvi lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[1].children[0]$25$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[4] {
     label="nv lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[2]$26$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[5] {
     label="pve rew";
     desc=" misc reward computation specifications<br>  err val: [Default: 0]  reward value for errors (when network does not respond correctly)<br>  norew val: [Default: 0.5]  reward value when no feedback information is present<br>  rew val: [Default: 1]  reward value for correct responses (positive rewards)";
     base=.projects[0].networks[1].specs.gp[2][0]$27$;
     mbr=ExtRewLayerSpec::rew;
    };
    EditMbrItem @[6] {
     label="pvi pv";
     desc=" misc parameters for the PV computation<br>  min pvi: [Default: 0.4]  minimum pvi value -- PVi is not allowed to go below this value for the purposes of computing the PV delta value: pvd = PVe - MAX(PVi,min_pvi)";
     base=.projects[0].networks[1].specs.gp[2][2]$28$;
     mbr=PViLayerSpec::pv;
    };
    EditMbrItem @[7] {
     label="lve lv";
     desc=" misc parameters controlling the LV computation (note: only the LVe instance of these parameters are used)<br>  min lvi: [Default: 0.1]  minimum lvi value -- LVi is not allowed to go below this value for the purposes of computing the LV delta value: lvd = LVe - MAX(LVi,min_lvi)";
     base=.projects[0].networks[1].specs.gp[2][3]$29$;
     mbr=LVeLayerSpec::lv;
    };
    EditMbrItem @[8] {
     label="pvr pv detect";
     desc=" primary reward value detection spec: detect if a primary reward is expected based on PVr value<br>  thr min: [Default: 0.2]  minimum threshold on PVr value, below which PV is considered present (i.e., punishment) -- PVr learns a 0 for all punishment-valence cases, regardless of value<br>  thr max: [Default: 0.8]  maximum threshold on PVr value, above which PV is considered present (i.e., reward) -- PVr learns a 1 for all reward-valence cases, regardless of value";
     base=.projects[0].networks[1].specs.gp[2][1]$30$;
     mbr=PVrLayerSpec::pv_detect;
    };
    EditMbrItem @[9] {
     label="nv nv";
     desc=" novelty value specs<br>  da gain: [Default: 1]  gain for novelty value dopamine signal<br>  val thr: [Default: 0.1]  threshold for value (training value is 0) -- value is zero below this threshold";
     base=.projects[0].networks[1].specs.gp[2][4]$31$;
     mbr=NVLayerSpec::nv;
    };
    EditMbrItem @[10] {
     label="vta da";
     desc=" parameters for the pvlv da computation<br>  da gain: [Default: 0.2:2]  multiplier for dopamine values<br>  tonic da: [Default: 0]  set a tonic 'dopamine' (DA) level (offset to add to da values)";
     base=.projects[0].networks[1].specs.gp[2][5]$32$;
     mbr=PVLVDaLayerSpec::da;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="FwdModelInputData";
    desc="input data for training the forward model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     float_Data @[1] {
      name="VisTarget_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;0.29996836;0.77919096;      };
     };
     float_Data @[2] {
      name="VisHand_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.2913582;0.87495255;0.14300607;0.21583211;0.58462107;0.79349178;0.98479307;0.26735812;0.30717656;0.13950633;0.97514111;0.48687437;0.81176335;0.85604668;0.42062116;1.0069065;0.61100793;0.97552675;0.93118048;0.40312698;0.18759434;0.094972849;0.21260889;0.32889456;0.50332618;0.91284275;0.36039627;0.26519847;0.46872967;0.53922659;0.88798529;0.74717164;0.36941895;0.95190042;0.70288056;0.94129753;0.35149208;0.18372838;0.45005098;0.8218056;0.92449623;0.59689969;0.20815668;0.26470551;0.15294173;0.23641798;0.35021922;0.33534116;0.47152388;0.72415042;0.28636697;0.95040369;0.90161246;0.72237778;0.84596854;0.43107343;0.25187498;0.73124319;0.19208045;0.22392671;0.11889856;0.33629709;0.63596034;0.98527676;0.25005403;0.48901263;0.63238621;0.59923989;0.60287374;0.58003128;0.36496869;0.97630048;0.68824553;0.80442035;0.30082136;0.21094991;0.55377924;0.57407784;0.65927225;0.62955827;0.45414415;0.92416662;0.90962577;0.70486146;0.76760441;0.45792952;0.86024791;0.73809457;0.81809467;0.84991944;0.9874391;0.34309092;0.11572144;0.25821203;0.3915295;0.21401338;0.83479977;0.44990078;0.75950146;0.89662355;0.41804457;0.96644455;0.92231125;0.013616805;0.20610541;0.87926352;0.95040715;0.56892377;0.58553892;0.89807028;0.60895604;0.92728615;0.12631455;0.17717469;0.77872568;0.46581897;0.87417996;0.38499641;0.14193828;0.80257159;0.19476414;0.30105269;0.25761133;0.10995078;0.76943141;0.85212344;0.14867459;0.77757406;0.94133115;0.30463472;0.36418808;0.16518216;0.34616339;0.1950783;0.98610377;0.387312;0.3966873;0.14490932;0.6100921;0.72945279;0.40852323;0.55155587;0.75018692;0.91539836;0.67124683;0.75789738;0.50295788;1.0152828;0.96820986;0.22741225;0.90338004;0.39903316;0.14400822;0.37763962;0.4147546;0.97888136;0.843476;0.70449185;0.74721402;0.7405526;0.31770271;0.3318688;0.38004658;0.57915765;0.85201657;0.77552754;0.51232123;0.7120778;0.33417907;0.23252212;0.51970822;0.7091825;0.2631022;0.52456778;0.2364465;0.91073674;0.95403636;0.21006389;0.42719442;0.82530195;0.6341837;0.63706684;0.21826875;0.78109562;0.33640367;0.71276242;0.14013866;0.65343213;0.9284392;0.080763988;0.26771516;0.62559122;0.5486294;0.54983175;0.4775387;0.91826707;0.25439814;0.47146216;0.9436087;0.26862538;      };
     };
     float_Data @[3] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.63765699;0.93092597;0.3274062;0.16805318;0.94230026;0.24097067;0.46214041;0.68976861;0.4965421;0.088460632;1.0000039;0.80131847;0.4689368;0.79187584;0.29894209;0.36488414;0.61490774;0.46177092;0.90238875;0.44784608;0.22041033;0.85337692;0.90955627;0.69175696;0.37578481;0.76392108;0.36173862;0.025935547;0.62945777;0.89457077;0.87472719;0.53194553;0.66580981;0.13888459;0.13888572;0.65502214;0.29915932;0.86709315;0.18165693;0.15550077;0.5133726;0.34526828;1.7315317e-05;0.2893863;0.45049468;0.18883947;0.92367446;0.87966472;0.0313011;0.4211973;0.58392501;0.022082523;0.7816686;0.24352029;0.4118169;0.43249938;0.97024703;0.011788817;0.019362653;0.83463365;0.8346346;0.97037894;0.35826209;0.78577954;0.054581374;0.92990309;0.88700736;0.20449722;0.97546232;0.2636672;0.41627175;0.45835876;0.26244992;0.63740617;0.084084153;0.055184115;0.82896942;0.603248;0.24079406;0.24079472;0.72151816;0.46123058;0.32834044;0.32714182;0.83882952;0.31814277;0.63568145;0.81499755;0.049338214;0.47076836;0.17317376;0.68255079;0.52745605;0.76100558;-2.8803363e-06;0.60673517;0.16528483;0.49108204;0.66963917;0.045085039;      };
     };
     float_Data @[4] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.4004091;0.58726615;0.63622415;0.080152906;0.81449789;0.12442461;0.03285446;0.058957823;0.25333425;0.40910727;0.60380924;0.74027455;0.46728665;0.95721787;0.95721757;0.11457594;0.31766978;0.20458406;0.90023637;0.61203504;0.30030683;0.72352856;0.61436528;0.95799762;0.74723983;0.073226601;0.091508374;0.60749602;0.56619304;0.68312848;0.56023818;0.13900432;0.76594156;0.8269189;0.87100506;0.22198501;0.53712803;0.84973967;0.90910017;0.77167201;0.4390043;0.11024544;0.7405355;0.30964381;0.05005182;0.10539518;0.54257697;0.96760261;0.62380928;0.21115702;0.31981161;0.16061655;0.16055851;0.20591691;0.47041881;0.39478388;0.534778;0.71900386;0.55774921;0.15050414;0.70670295;0.7261191;0.32276899;0.2782383;0.38158521;0.90126818;0.90126836;0.1117807;0.91631567;0.70405322;0.91249329;0.1437403;0.61806518;0.071599431;0.2366706;0.48683023;0.61112523;0.27655014;0.41093487;0.54641646;0.90911269;0.86314023;0.25430307;0.76333475;0.90669817;0.76598924;0.76598877;0.030028742;0.29778057;0.59928519;0.78826165;0.44542894;0.68625224;0.4498114;0.2770505;0.69679081;0.93679905;0.45565182;0.78083158;0.36587867;      };
     };
     float_Data @[5] {
      name="MotorShoulderForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.91300499;0.33919537;0.1861335;0.94766623;0.27578467;0.4297837;0.67204177;0.88954282;0.09080483;0.99153006;0.82181036;0.50610381;0.76201826;0.28539088;0.37882495;0.614048;0.49271229;0.93439049;0.45316017;0.24738321;0.83017629;0.92796725;0.71734285;0.37134606;0.76649839;0.37053227;0.042790774;0.60615158;0.86165988;0.85033083;0.56339389;0.64652812;0.13300335;0.1702407;0.64484066;0.32569653;0.8632614;0.1741201;0.12501332;0.52319902;0.37309623;0.007607074;0.27483922;0.43165135;0.20409876;0.89229852;0.85939348;0.037852522;0.42278537;0.5492171;0.034969009;0.74431562;0.25250572;0.38236141;0.46102983;0.95083231;0.0097128786;0.048370268;0.82400525;0.8417843;0.95932829;0.37600058;0.79429549;0.081574157;0.93798941;0.86466986;0.2178691;0.99459875;0.2613326;0.39191821;0.47937334;0.28753528;0.62710702;0.093661465;0.032391008;0.83106858;0.63646996;0.27180251;0.25427499;0.71716219;0.44820249;0.32920095;0.31126517;0.85221046;0.3222245;0.65196991;0.8009789;0.07000982;0.50653023;0.15970995;0.66415423;0.54353207;0.73826331;0.015205073;0.58366656;0.16118908;0.49851727;0.63420725;0.06138486;0.61151838;      };
     };
     float_Data @[6] {
      name="MotorElbowForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.59059155;0.64970648;0.057657056;0.82981753;0.11986698;0.024636058;0.049107779;0.80991507;0.43368649;0.61345655;0.78131962;0.46330985;0.97554487;0.95322108;0.092386618;0.30270198;0.19673198;0.92196572;0.5913471;0.31177223;0.75150907;0.58906275;0.97712582;0.72992027;0.051582705;0.095943108;0.62740338;0.55766082;0.69329011;0.53976071;0.10650892;0.78680766;0.84852362;0.89896494;0.20544282;0.57046372;0.86503315;0.93785107;0.7603479;0.40104374;0.071381673;0.75633818;0.29233426;0.02422717;0.11510983;0.55823046;0.98871392;0.60223675;0.18065795;0.32777867;0.15122189;0.16657965;0.21308118;0.46887681;0.35971731;0.5529713;0.75797886;0.53899336;0.13020267;0.72830051;0.75105435;0.31353578;0.27285331;0.39049244;0.93516403;0.90193361;0.074977599;0.94157648;0.69061428;0.92562503;0.12128096;0.64181918;0.049337707;0.25973397;0.50576878;0.63330734;0.26308542;0.42809609;0.55939889;0.93795097;0.84086359;0.23181905;0.7852928;0.94001418;0.7645905;0.76034671;0.0079148719;0.33001506;0.611054;0.82822627;0.42156759;0.7028963;0.41842505;0.29303324;0.72306484;0.95481247;0.44256061;0.8120681;0.35600993;0.41043425;      };
     };
     float_Data @[7] {
      name="VisHand_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.14300607;0.21583211;0.58462107;0.79349178;0.98479307;0.26735812;0.30717656;0.13950633;0.97514111;0.48687437;0.81176335;0.85604668;0.42062116;1.0069065;0.26506007;0.1888289;0.93118048;0.40312698;0.18759434;0.094972849;0.21260889;0.32889456;0.50332618;0.91284275;0.36039627;0.26519847;0.46872967;0.53922659;0.88798529;0.74717164;0.36941895;0.95190042;0.70288056;0.94129753;0.35149208;0.18372838;0.45005098;0.8218056;0.92449623;0.59689969;0.20815668;0.26470551;0.15294173;0.23641798;0.35021922;0.33534116;0.47152388;0.72415042;0.28636697;0.95040369;0.90161246;0.72237778;0.84596854;0.43107343;0.25187498;0.73124319;0.19208045;0.22392671;0.11889856;0.33629709;0.63596034;0.98527676;0.25005403;0.48901263;0.63238621;0.59923989;0.60287374;0.58003128;0.36496869;0.97630048;0.68824553;0.80442035;0.30082136;0.21094991;0.55377924;0.57407784;0.65927225;0.62955827;0.45414415;0.92416662;0.90962577;0.70486146;0.76760441;0.45792952;0.86024791;0.73809457;0.81809467;0.84991944;0.9874391;0.34309092;0.11572144;0.25821203;0.3915295;0.21401338;0.83479977;0.44990078;0.75950146;0.89662355;0.41804457;0.96644455;0.92231125;0.013616805;0.20610541;0.87926352;0.95040715;0.56892377;0.58553892;0.89807028;0.60895604;0.92728615;0.12631455;0.17717469;0.77872568;0.46581897;0.87417996;0.38499641;0.14193828;0.80257159;0.19476414;0.30105269;0.25761133;0.10995078;0.76943141;0.85212344;0.14867459;0.77757406;0.94133115;0.30463472;0.36418808;0.16518216;0.34616339;0.1950783;0.98610377;0.387312;0.3966873;0.14490932;0.6100921;0.72945279;0.40852323;0.55155587;0.75018692;0.91539836;0.67124683;0.75789738;0.50295788;1.0152828;0.96820986;0.22741225;0.90338004;0.39903316;0.14400822;0.37763962;0.4147546;0.97888136;0.843476;0.70449185;0.74721402;0.7405526;0.31770271;0.3318688;0.38004658;0.57915765;0.85201657;0.77552754;0.51232123;0.7120778;0.33417907;0.23252212;0.51970822;0.7091825;0.2631022;0.52456778;0.2364465;0.91073674;0.95403636;0.21006389;0.42719442;0.82530195;0.6341837;0.63706684;0.21826875;0.78109562;0.33640367;0.71276242;0.14013866;0.65343213;0.9284392;0.080763988;0.26771516;0.62559122;0.5486294;0.54983175;0.4775387;0.91826707;0.25439814;0.47146216;0.9436087;0.26862538;0.2913582;0.87495255;      };
     };
     float_Data @[8] {
      name="SomaShoulderAngle_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.93092597;0.3274062;0.16805318;0.94230026;0.24097067;0.46214041;0.68976861;0.89601701;0.088460632;1.0000039;0.80131847;0.4689368;0.79187584;0.29894209;0.36488414;0.61490774;0.46177092;0.90238875;0.44784608;0.22041033;0.85337692;0.90955627;0.69175696;0.37578481;0.76392108;0.36173862;0.025935547;0.62945777;0.89457077;0.87472719;0.53194553;0.66580981;0.13888459;0.13888572;0.65502214;0.29915932;0.86709315;0.18165693;0.15550077;0.5133726;0.34526828;1.7315317e-05;0.2893863;0.45049468;0.18883947;0.92367446;0.87966472;0.0313011;0.4211973;0.58392501;0.022082523;0.7816686;0.24352029;0.4118169;0.43249938;0.97024703;0.011788817;0.019362653;0.83463365;0.8346346;0.97037894;0.35826209;0.78577954;0.054581374;0.92990309;0.88700736;0.20449722;0.97546232;0.2636672;0.41627175;0.45835876;0.26244992;0.63740617;0.084084153;0.055184115;0.82896942;0.603248;0.24079406;0.24079472;0.72151816;0.46123058;0.32834044;0.32714182;0.83882952;0.31814277;0.63568145;0.81499755;0.049338214;0.47076836;0.17317376;0.68255079;0.52745605;0.76100558;-2.8803363e-06;0.60673517;0.16528483;0.49108204;0.66963917;0.045085039;0.63765699;      };
     };
     float_Data @[9] {
      name="SomaElbowAngle_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.58726615;0.63622415;0.080152906;0.81449789;0.12442461;0.03285446;0.058957823;0.78658551;0.40910727;0.60380924;0.74027455;0.46728665;0.95721787;0.95721757;0.11457594;0.31766978;0.20458406;0.90023637;0.61203504;0.30030683;0.72352856;0.61436528;0.95799762;0.74723983;0.073226601;0.091508374;0.60749602;0.56619304;0.68312848;0.56023818;0.13900432;0.76594156;0.8269189;0.87100506;0.22198501;0.53712803;0.84973967;0.90910017;0.77167201;0.4390043;0.11024544;0.7405355;0.30964381;0.05005182;0.10539518;0.54257697;0.96760261;0.62380928;0.21115702;0.31981161;0.16061655;0.16055851;0.20591691;0.47041881;0.39478388;0.534778;0.71900386;0.55774921;0.15050414;0.70670295;0.7261191;0.32276899;0.2782383;0.38158521;0.90126818;0.90126836;0.1117807;0.91631567;0.70405322;0.91249329;0.1437403;0.61806518;0.071599431;0.2366706;0.48683023;0.61112523;0.27655014;0.41093487;0.54641646;0.90911269;0.86314023;0.25430307;0.76333475;0.90669817;0.76598924;0.76598877;0.030028742;0.29778057;0.59928519;0.78826165;0.44542894;0.68625224;0.4498114;0.2770505;0.69679081;0.93679905;0.45565182;0.78083158;0.36587867;0.4004091;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="RLModelInputData";
    desc="input data for training the RL model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     float_Data @[1] {
      name="VisTarget_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.47035617;0.75368422;0.72943705;0.83544266;0.75717771;0.46370724;0.18009283;0.56184739;0.46368411;0.51607531;0.085597731;0.60014266;0.93820524;0.36053678;0.77062309;0.7170645;0.12975076;0.38792738;0.49197716;0.59271902;0.032303721;0.54225111;0.71061844;0.7800324;0.70779288;0.39002806;0.77978486;0.42647889;0.65123677;0.61352503;0.37099192;0.45881164;0.58266914;0.46968186;0.73536879;0.32713595;0.50539893;0.98109454;0.55539042;0.58366108;0.7023561;0.87254477;0.3150759;0.54547662;0.67555171;0.69433916;0.43739545;0.89642614;0.20238101;0.40466249;0.40638456;0.47288576;0.6398921;0.69512987;0.16642304;0.44089204;0.37890354;0.84739566;0.4544805;0.88566607;0.7494536;0.5001663;0.32405773;0.51323092;0.64547873;0.59063995;0.7957707;0.47946244;0.96638888;0.32239008;0.66542214;0.60769647;0.711999;0.43228823;0.83774936;0.5533945;0.76701534;0.40393671;0.36149621;0.68498933;0.54289192;0.60388803;0.63877201;0.35389131;0.44540355;0.66720748;0.14852688;0.70210022;0.53335083;0.64011788;0.16892028;0.46791455;0.49205604;0.65965623;0.72277814;0.53651625;0.7256518;0.37172037;0.31520417;0.85694844;0.42318469;0.59366012;0.21198468;0.67097402;0.20511946;0.39601415;0.099368848;0.70422935;0.54249036;0.71936744;0.67689681;0.6117174;0.42612571;0.61294514;0.31127587;0.59182793;0.60609812;0.46062922;0.72303349;0.71267039;0.90271288;0.66188353;0.24550124;0.65473992;0.66431379;0.93738419;0.40195602;0.63227701;0.74673641;0.71301913;0.49916708;0.92643237;0.7280637;0.38055778;0.39301357;0.45402834;0.56915718;0.53618252;0.63248372;0.7815575;0.52325636;0.51617473;0.66209692;0.60851455;0.74332511;0.78165805;0.65622264;0.62580591;0.29094926;0.40602547;0.64641118;0.33700565;0.3082726;0.90411121;0.59756744;0.56375813;0.62062371;0.85384011;0.59607577;0.86573851;0.45652893;0.8061676;0.29262054;0.87099296;0.60146707;0.82206792;0.20995142;0.73738742;0.30606884;0.3867999;0.85328168;0.3344194;0.39381295;0.77164513;0.89437735;0.60870862;0.47100952;0.52149117;0.55743057;0.81523222;0.34670317;0.5203048;0.54382783;0.58270752;0.47153965;0.79183394;0.56674802;0.51537073;0.054040093;0.4131926;0.038674194;0.4292576;0.53984952;0.5306226;0.68245184;0.46682531;0.38811493;0.9203285;0.41279697;0.74789113;      };
     };
     float_Data @[2] {
      name="VisHand_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.98657721;0.34101382;0.57831049;0.90520215;0.57826376;0.90517879;0.73582655;0.48573411;0.19067213;0.58708113;0.48049247;0.60902745;0.19494571;0.5769158;0.75322938;0.46754509;0.55816203;0.8714478;0.17281647;0.57603866;0.48220119;0.60797751;0.19447072;0.5760318;0.62311125;0.86292791;0.73761702;0.494216;0.50641662;0.62627411;0.56503057;0.87355775;0.48742643;0.62002528;0.48743039;0.62002289;0.70246857;0.49520671;0.36033934;0.70587623;0.36034176;0.70587075;0.36034185;0.70587075;0.36034188;0.70587075;0.36034191;0.70587075;0.36034191;0.70587075;0.36034191;0.70587075;0.36034188;0.70587075;0.36034191;0.70587075;0.36034191;0.70587075;0.36034188;0.70587075;0.36034191;0.70587075;0.36034191;0.70587075;0.36034191;0.70587075;0.36034188;0.70587075;0.36034191;0.70587075;0.89869678;0.59535867;0.89869654;0.59535903;0.23728302;0.58889836;0.87203175;0.6509496;0.83357668;0.67940509;0.33356601;0.71526617;0.33356655;0.7152642;0.3335669;0.71526402;0.33356726;0.71526378;0.89980519;0.57553428;0.89980501;0.57553458;0.89980471;0.57553512;0.28948843;0.66430384;0.34642085;0.71902353;0.3464224;0.71901709;0.21041903;0.43957704;0.85256755;0.68496406;0.79299593;0.71305501;0.23612519;0.59877628;0.1938082;0.19961207;0.83398885;0.72410172;0.2095037;0.51292968;0.1965367;0.21774802;0.58570391;0.8832435;0.26375422;0.6252467;0.8743701;0.64423388;0.55916774;1.0093764;0.21389779;0.54233479;0.41092286;0.60689437;0.61535341;0.90047842;0.23544827;0.56534475;0.30752608;0.18334338;0.47680935;0.75857973;0.20781049;0.47434035;0.35593951;0.71218449;0.88551193;0.62584209;0.27082008;0.63848543;0.35667592;0.72535807;0.28263256;0.65452999;0.48174331;0.77025449;0.2345528;0.57579583;0.25908154;0.62071341;0.19665807;0.21872957;0.42642608;0.65789634;0.22821002;0.5528053;0.20294854;0.47545883;0.86107224;0.67166042;0.26262617;0.62813169;0.40554929;0.99929106;0.18146777;0.29031032;0.25971282;0.8782717;0.17543058;0.28227374;0.43544579;0.6736325;0.19106668;0.3935177;0.43476352;0.75530058;0.20687947;0.48423064;0.27321205;0.37616336;0.42511436;0.74681646;0.20311862;0.2321827;0.8948949;0.58563471;0.89488947;0.58563352;0.92811024;0.077653065;0.85016769;0.66339403;0.85413665;0.66048509;0.45163411;0.75930274;      };
     };
     float_Data @[3] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.2178771;0.42137602;0.42137575;0.013305206;0.70290166;0.30872151;0.69979233;0.0023914285;0.40234995;0.72563225;0.30566883;0.70051426;0.36637285;0.021716189;0.28196588;0.40038359;0.30421126;0.30421126;0.01621726;0.49769557;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.49769568;0.18785036;0.18785037;0.64825386;0.21217968;0.21213113;0.53126144;0.53126091;0.53126049;0.53125995;0.17267299;0.17267311;0.17267342;0.57892954;0.51690328;0.51690328;0.73262513;0.22860141;0.22522879;0.6478858;0.91281646;0.25362444;0.70100534;0.89702785;0.39859495;0.61154151;0.20809731;0.61264676;0.68652868;0.41445816;0.40339407;0.65553743;0.89653122;0.38837156;0.71836686;0.50424874;0.20147957;0.60201555;0.5063535;0.58718246;0.39012402;0.65413481;0.61761451;0.89618707;0.40316832;0.66720957;0.72299778;0.22244515;0.61263585;0.65615439;0.8517614;0.6801694;0.8617118;0.39639762;0.7767933;0.42930606;0.71506059;0.71506125;0.43597004;0.88206017;0.17617309;0.17617334;-7.325711e-07;0.20759276;0.20759264;0.413726;      };
     };
     float_Data @[4] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.034482758;0.46081975;0.46088502;0.77890217;0.60922778;0.88348746;0.62411082;0.76001084;0.53003234;0.58500856;0.8848663;0.62392139;0.5076524;0.77193278;0.86472112;0.52382493;0.87181914;0.87181914;0.82284331;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.71501899;0.39083436;0.39083487;0.68365532;0.40562469;0.4647142;0.68069971;0.68070024;0.6807009;0.68070138;0.40614116;0.40614149;0.40614149;0.68806422;0.68806475;0.68806475;0.72125006;0.41420877;0.50525916;0.67422098;0.67650914;0.40644798;0.68869168;0.68869168;0.49727577;0.69174093;0.4071205;0.054195043;0.67904246;0.85881114;0.44583178;0.69808799;0.84387231;0.70413673;0.70413625;0.70413589;0.39707255;0.68927455;0.68927491;0.68927538;0.68927574;0.68927556;0.68927592;0.68927604;0.81198692;0.69535255;0.69535238;0.40941688;0.68764561;0.16006227;0.68118346;0.33897454;0.6686976;0.79795724;0.69829106;0.69829071;0.69829035;0.83809572;0.7053538;0.70535314;0.41098568;0.41098568;0.27395681;0.44576076;0.43968618;0.69839662;      };
     };
     float_Data @[5] {
      name="MotorElbowForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] -0.73469126;-0.60151935;0.20184834;-0.48843822;0.48594826;0.13401362;-0.38050148;0.48811355;0.28011894;-0.41765282;0.89781833;0.089683339;-0.86163032;0.33843315;0.11588536;0.84703922;-0.4322457;0.35043433;0.64192826;-0.22558181;-0.66848999;0.82946682;-0.022540553;0.50963497;0.600959;-0.90989804;-0.043371368;-0.79434448;-0.98404121;0.62802809;0.81581569;-0.49091306;0.97907567;-0.072904132;-0.82864767;-0.55000192;0.46971512;-0.59208679;-0.54537368;0.096817248;-0.45785889;-0.90135747;0.87465531;0.85663986;0.89224154;-0.12027332;-0.47391951;-0.68255836;0.95434546;0.49101153;-0.50469005;-0.83671427;0.76754683;-0.57895017;0.11945336;0.39258355;-0.59352791;-0.24481332;0.018050764;-0.99382603;-0.35690859;0.26967862;-0.22808613;-0.77872318;0.83556592;0.092091642;0.61840111;-0.50033665;0.013712303;-0.49442145;-0.28825286;-0.39384967;-0.33434546;-0.86959803;0.056412239;-0.85636848;0.9980666;-0.44892493;-0.020048987;0.53062081;-0.70407444;-0.15912402;0.9393791;0.72548652;0.94637257;0.74011981;-0.71793795;-0.87050468;-0.88583416;0.68270022;-0.79229909;-0.56759483;-0.99372041;-0.19247654;-0.62906557;0.71824396;0.027107283;-0.36480534;0.9920463;-0.75794393;      };
     };
     float_Data @[6] {
      name="PVe";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;0;1;1;0;1;1;0;1;1;1;1;0;1;0;1;0;1;0;0;1;0;0;1;0;1;0;0;0;1;1;0;1;0;1;0;0;0;1;1;1;1;1;0;1;1;0;0;1;0;0;0;1;1;0;0;0;1;0;1;0;1;1;0;1;0;0;1;1;1;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="pvlv_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     double_Data @[10] {
      name="trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     double_Data @[6] {
      name="rew_dist_thr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[10] {
      name="avg_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="TestTrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 500;500;500;500;500;500;500;500;500;500;500;500;500;500;500;500;500;500;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] ;;;;;;;;;;;;;;;;;;      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] ;;;;;;;;;;;;;;;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 0.25;0.25;0.60778552;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.56535733;0.25;0.25;0.25;0.25;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;      };
     };
     float_Data @[9] {
      name="pvlv_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 0.5023765;0.77388167;0.48626664;0.56184447;0.91647869;0.38438663;0.14740275;0.23022005;0.85843807;0.83910912;0.7332719;0.63101101;0.83370012;0.51740056;0.66769266;0.91749495;0.90784729;0.83603996;      };
     };
     double_Data @[10] {
      name="trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [18] 0.1860425174236298;0.1664827018976212;0.03067661635577679;0.02736171707510948;0.09445962309837341;0.1117876023054123;0.2136980295181274;0.2626288235187531;0.1929779946804047;0.01812156289815903;0.165648028254509;0.1205370277166367;0.1083725318312645;0.3385975956916809;0.2739498615264893;0.1988638490438461;0.1779686510562897;0.1712606400251389;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="TestEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     double_Data @[6] {
      name="rew_dist_thr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[10] {
      name="avg_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=$21$;
  tags=;
  desc=;
  Program @[0] {
   name="Arm";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=VEWorld;
    el_def=0;
    VEWorld @[0] {
     name="VEArmWorld";
     desc=;
     space_type=HASH_SPACE;
     hash_levels {min=-3: max=10: };
     step_type=STD_STEP;
     stepsize=0.02;
     quick_iters=20;
     gravity {x=0: y=0: z=0: };
     updt_display=1;
     ode_params {
      erp=0.2;
      cfm=1e-05;
      max_cor_vel=1000000;
      contact_depth=0.001;
      max_col_pts=4;
     };
     objects {
      name=;
      el_typ=VEObject;
      el_def=0;
      VEObject @[0] {
       name="LeftArmDude";
       desc=;
       bodies {
	name=;
	el_typ=VEBody;
	el_def=0;
	VEBody @[0] {
	 name="Torso";
	 desc=;
	 flags=FIXED;
	 init_pos {x=0: y=0: z=0: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=-3.104832e-07: y=9.799488e-07: z=6.587439e-07: };
	 cur_rot {x=0: y=0: z=1: rot=0: };
	 cur_lin_vel {x=-2.420731e-06: y=6.299405e-13: z=9.011223e-07: };
	 cur_ang_vel {x=1.479966e-07: y=-1.547085e-06: z=2.450553e-07: };
	 shape=BOX;
	 mass=1;
	 radius=0.5;
	 length=1;
	 long_axis=LONG_X;
	 box {x=0.45: y=0.1: z=0.02: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=0: g=1: b=0: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
	VEBody @[1] {
	 name="Humerus";
	 desc=;
	 flags=;
	 init_pos {x=0.42: y=0.1: z=0.03: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0.3883244: y=0.100001: z=0.1288472: };
	 cur_rot {x=-1.725709e-07: y=-1.000001: z=3.42192e-07: rot=0.6204504: };
	 cur_lin_vel {x=-0.01629883: y=5.840147e-08: z=0.02269943: };
	 cur_ang_vel {x=4.277048e-07: y=-0.1643099: z=4.473267e-07: };
	 shape=CAPSULE;
	 mass=2.1;
	 radius=0.03;
	 length=0.34;
	 long_axis=LONG_X;
	 box {x=0.34: y=0.02: z=0.01: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=0.2: g=0.2: b=0.4901961: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
	VEBody @[2] {
	 name="Ulna";
	 desc=;
	 flags=;
	 init_pos {x=0.77: y=0.1: z=0.03: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0.4649488: y=0.100001: z=0.4165496: };
	 cur_rot {x=3.515012e-08: y=-0.9999999: z=1.31728e-07: rot=2.044459: };
	 cur_lin_vel {x=-0.06360979: y=-7.501569e-08: z=0.03519129: };
	 cur_ang_vel {x=4.830723e-07: y=-0.1643099: z=5.189025e-07: };
	 shape=CAPSULE;
	 mass=1.65;
	 radius=0.02;
	 length=0.34;
	 long_axis=LONG_X;
	 box {x=0.34: y=0.02: z=0.01: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=0: g=0: b=1: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
	VEBody @[3] {
	 name="Hand";
	 desc=;
	 flags=;
	 init_pos {x=0.98: y=0.1: z=0.03: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0.3691507: y=0.1000009: z=0.603444: };
	 cur_rot {x=1.317043e-07: y=-1: z=-3.513593e-08: rot=2.044459: };
	 cur_lin_vel {x=-0.09429009: y=-2.825991e-07: z=0.01938289: };
	 cur_ang_vel {x=4.824396e-07: y=-0.164311: z=5.186114e-07: };
	 shape=SPHERE;
	 mass=0.05;
	 radius=0.025;
	 length=1;
	 long_axis=LONG_X;
	 box {x=1: y=1: z=1: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=1: g=0: b=1: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
	VEBody @[4] {
	 name="Head";
	 desc=;
	 flags=FIXED;
	 init_pos {x=0: y=0.3: z=0: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0: y=0.3: z=0: };
	 cur_rot {x=0: y=0: z=1: rot=0: };
	 cur_lin_vel {x=0: y=0: z=0: };
	 cur_ang_vel {x=0: y=0: z=0: };
	 shape=CAPSULE;
	 mass=1;
	 radius=0.1;
	 length=0.25;
	 long_axis=LONG_Y;
	 box {x=1: y=1: z=1: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=1: g=0.8: b=0.4: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
	VECamera @[5] {
	 name="LeftEye";
	 desc=;
	 flags=FIXED;
	 init_pos {x=0.04: y=0.3: z=0.1: };
	 init_rot {x=0: y=0.8: z=0.2: rot=3.14159: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0.04: y=0.3: z=0.1: };
	 cur_rot {x=1.225472e-14: y=0.9701425: z=0.2425356: rot=3.14159: };
	 cur_lin_vel {x=0: y=0: z=0: };
	 cur_ang_vel {x=-7.766982e-19: y=-7.430493e-14: z=2.972206e-13: };
	 shape=CYLINDER;
	 mass=0.01;
	 radius=0.01;
	 length=0.01;
	 long_axis=LONG_Z;
	 box {x=1: y=1: z=1: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color=1;
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	 img_size {x=320: y=240: };
	 view_dist {
	  near=0.1;
	  focal=1;
	  far=10;
	 };
	 field_of_view=120;
	 antialias_scale=2;
	 light {
	  on=1;
	  intensity=0.2;
	  color {r=1: g=1: b=1: a=1: };
	 };
	 dir_norm {x=-2.459487e-06: y=-0.4705882: z=0.8823529: };
	};
	VECamera @[6] {
	 name="RightEye";
	 desc=;
	 flags=FIXED;
	 init_pos {x=-0.04: y=0.3: z=0.1: };
	 init_rot {x=0: y=0.8: z=0.2: rot=3.14159: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=-0.04: y=0.3: z=0.1: };
	 cur_rot {x=1.225472e-14: y=0.9701425: z=0.2425356: rot=3.14159: };
	 cur_lin_vel {x=0: y=0: z=0: };
	 cur_ang_vel {x=-7.766982e-19: y=-7.430493e-14: z=2.972206e-13: };
	 shape=CYLINDER;
	 mass=0.01;
	 radius=0.01;
	 length=0.01;
	 long_axis=LONG_Z;
	 box {x=1: y=1: z=1: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color=1;
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	 img_size {x=320: y=240: };
	 view_dist {
	  near=0.1;
	  focal=1;
	  far=10;
	 };
	 field_of_view=120;
	 antialias_scale=2;
	 light {
	  on=0;
	  intensity=0.2;
	  color {r=1: g=1: b=1: a=1: };
	 };
	 dir_norm {x=-2.459487e-06: y=-0.4705882: z=0.8823529: };
	};
	VEBody @[7] {
	 name="Pectoralis";
	 desc=;
	 flags=;
	 init_pos {x=0.3: y=0.15: z=0.05: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0.3: y=0.15: z=0.05: };
	 cur_rot {x=0: y=0: z=1: rot=0: };
	 cur_lin_vel {x=0: y=0: z=0: };
	 cur_ang_vel {x=0: y=0: z=0: };
	 shape=CYLINDER;
	 mass=0.15;
	 radius=0.01;
	 length=0.1108813;
	 long_axis=LONG_X;
	 box {x=0.27: y=0.02: z=0.01: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=1: g=0.1176471: b=0.2039216: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
	VEBody @[8] {
	 name="Deltoid";
	 desc=;
	 flags=;
	 init_pos {x=0.3: y=0.15: z=-0.05: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0.3: y=0.15: z=-0.05: };
	 cur_rot {x=0: y=0: z=1: rot=0: };
	 cur_lin_vel {x=0: y=0: z=0: };
	 cur_ang_vel {x=0: y=0: z=0: };
	 shape=CYLINDER;
	 mass=0.15;
	 radius=0.01;
	 length=0.08911873;
	 long_axis=LONG_X;
	 box {x=0.27: y=0.02: z=0.01: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=1: g=0.1176471: b=0.2039216: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
       };
       joints {
	name=;
	el_typ=VELambdaArmJoint;
	el_def=0;
	VELambdaArmJoint @[0] {
	 name="Shoulder";
	 desc=;
	 flags=FEEDBACK|USE_STOPS|USE_MOTOR;
	 body1=.projects[0].programs[0].objs[0].objects[0].bodies[0]$33$;
	 body2=$18$;
	 joint_type=HINGE;
	 anchor {x=0.25: y=0: z=0.03: };
	 axis {x=0: y=1: z=0: };
	 axis2 {x=1: y=0: z=0: };
	 stops {
	  lo=-0.78;
	  hi=2.8;
	  def=1;
	  bounce=0.1;
	  def_force=0;
	 };
	 stops2 {
	  lo=-3.1415;
	  hi=3.1415;
	  def=0;
	  bounce=0;
	  def_force=0;
	 };
	 motor {
	  vel=0;
	  f_max=0.7081912;
	 };
	 motor2 {
	  vel=0;
	  f_max=0;
	 };
	 ode_params {
	  erp=0.2;
	  cfm=1e-05;
	  no_stop_cfm=1e-05;
	  fudge=1;
	 };
	 suspension {
	  erp=0.2;
	  cfm=1e-05;
	 };
	 pos=0.6204505;
	 vel=0.1643084;
	 pos2=0;
	 vel2=0;
	 cur_force1 {x=-1.22844: y=5.881218e-05: z=0.9632069: };
	 cur_torque1 {x=0.09630237: y=-0.9833754: z=0.1228695: };
	 cur_force2 {x=1.22844: y=-5.881218e-05: z=-0.9632069: };
	 cur_torque2 {x=1.079612e-05: y=0.4513244: z=-2.595973e-06: };
	 flexor {
	  name="Pectoralis";
	  lambda_norm=0.6;
	  lambda=0.094;
	  co_contract_pct=0.4;
	  extra_force=0;
	  muscle_type=FLEXOR;
	  moment_arm=0.04;
	  len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	  co_contract_len=0.04;
	  rest_len=0.1002793;
	  step_size=0.02;
	  vel_damp=0.06;
	  reflex_delay=0.025;
	  reflex_delay_idx=1;
	  m_rec_grad=50;
	  m_mag=14.9;
	  ca_dt=0.015;
	  ca_dt_cmp=1.333333;
	  fv1=0.82;
	  fv2=0.5;
	  fv3=0.43;
	  fv4=0.58;
	  passive_k=0;
	  len=0.1108813;
	  dlen=-0.00458993;
	  act=0.01660588;
	  m_act_force=19.28049;
	  m_force=19.26357;
	  force=19.68591;
	  torque=0.7874365;
	  muscle_obj=.projects[0].programs[0].objs[0].objects[0].bodies[7]$34$;
	 };
	 extensor {
	  name="Deltoid";
	  lambda_norm=0.4;
	  lambda=0.074;
	  co_contract_pct=0.4;
	  extra_force=0;
	  muscle_type=EXTENSOR;
	  moment_arm=-0.04;
	  len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	  co_contract_len=0.04;
	  rest_len=0.09972067;
	  step_size=0.02;
	  vel_damp=0.06;
	  reflex_delay=0.025;
	  reflex_delay_idx=1;
	  m_rec_grad=50;
	  m_mag=14.9;
	  ca_dt=0.015;
	  ca_dt_cmp=1.333333;
	  fv1=0.82;
	  fv2=0.5;
	  fv3=0.43;
	  fv4=0.58;
	  passive_k=0;
	  len=0.08911873;
	  dlen=0.004589558;
	  act=0.01539411;
	  m_act_force=17.27103;
	  m_force=17.28693;
	  force=17.70478;
	  torque=-0.7081912;
	  muscle_obj=.projects[0].programs[0].objs[0].objects[0].bodies[8]$35$;
	 };
	 targ_norm_angle=0.4;
	 targ_angle=0.6520001;
	 cur_norm_angle=0.3911873;
	 co_contract_pct=0.4;
	};
	VELambdaArmJoint @[1] {
	 name="Elbow";
	 desc=;
	 flags=FEEDBACK|USE_STOPS|USE_MOTOR;
	 body1=$18$;
	 body2=$19$;
	 joint_type=HINGE;
	 anchor {x=0.18: y=0: z=0.025: };
	 axis {x=0: y=1: z=0: };
	 axis2 {x=1: y=0: z=0: };
	 stops {
	  lo=-0.1;
	  hi=2.8;
	  def=1;
	  bounce=0.1;
	  def_force=0;
	 };
	 stops2 {
	  lo=-3.1415;
	  hi=3.1415;
	  def=0;
	  bounce=0;
	  def_force=0;
	 };
	 motor {
	  vel=0;
	  f_max=0.3000178;
	 };
	 motor2 {
	  vel=0;
	  f_max=0;
	 };
	 ode_params {
	  erp=0.2;
	  cfm=1e-05;
	  no_stop_cfm=1e-05;
	  fudge=1;
	 };
	 suspension {
	  erp=0.2;
	  cfm=1e-05;
	 };
	 pos=1.424009;
	 vel=-1.490116e-08;
	 pos2=0;
	 vel2=0;
	 cur_force1 {x=-0.941483: y=3.529207e-05: z=0.5399482: };
	 cur_torque1 {x=-1.054096e-05: y=-0.1843494: z=2.80857e-06: };
	 cur_force2 {x=0.941483: y=-3.529207e-05: z=-0.5399482: };
	 cur_torque2 {x=3.790214e-07: y=-0.1281381: z=-1.026946e-07: };
	 flexor {
	  name="Bicep";
	  lambda_norm=0.4999998;
	  lambda=0.309;
	  co_contract_pct=0.4;
	  extra_force=0;
	  muscle_type=FLEXOR;
	  moment_arm=0.02;
	  len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	  co_contract_len=0.04;
	  rest_len=0.3358621;
	  step_size=0.02;
	  vel_damp=0.06;
	  reflex_delay=0.025;
	  reflex_delay_idx=1;
	  m_rec_grad=50;
	  m_mag=14.9;
	  ca_dt=0.015;
	  ca_dt_cmp=1.333333;
	  fv1=0.82;
	  fv2=0.5;
	  fv3=0.43;
	  fv4=0.58;
	  passive_k=0;
	  len=0.3227032;
	  dlen=0;
	  act=0.0137032;
	  m_act_force=14.66293;
	  m_force=14.66293;
	  force=15.00089;
	  torque=0.3000178;
	  muscle_obj=NULL;
	 };
	 extensor {
	  name="Tricep";
	  lambda_norm=0.4999998;
	  lambda=0.309;
	  co_contract_pct=0.4;
	  extra_force=0;
	  muscle_type=EXTENSOR;
	  moment_arm=-0.02;
	  len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	  co_contract_len=0.04;
	  rest_len=0.3141379;
	  step_size=0.02;
	  vel_damp=0.06;
	  reflex_delay=0.025;
	  reflex_delay_idx=1;
	  m_rec_grad=50;
	  m_mag=14.9;
	  ca_dt=0.015;
	  ca_dt_cmp=1.333333;
	  fv1=0.82;
	  fv2=0.5;
	  fv3=0.43;
	  fv4=0.58;
	  passive_k=0;
	  len=0.3272968;
	  dlen=0;
	  act=0.01829684;
	  m_act_force=22.29607;
	  m_force=22.29607;
	  force=22.80997;
	  torque=-0.4561994;
	  muscle_obj=NULL;
	 };
	 targ_norm_angle=0.5;
	 targ_angle=1.35;
	 cur_norm_angle=0.5255203;
	 co_contract_pct=0.4;
	};
	VEJoint @[2] {
	 name="Wrist";
	 desc=;
	 flags=FEEDBACK|USE_STOPS;
	 body1=$19$;
	 body2=$20$;
	 joint_type=FIXED;
	 anchor {x=0.15: y=0: z=0: };
	 axis {x=0: y=1: z=0: };
	 axis2 {x=1: y=0: z=0: };
	 stops {
	  lo=-3.1415;
	  hi=3.1415;
	  def=0;
	  bounce=0;
	  def_force=0;
	 };
	 stops2 {
	  lo=-3.1415;
	  hi=3.1415;
	  def=0;
	  bounce=0;
	  def_force=0;
	 };
	 motor {
	  vel=0;
	  f_max=0;
	 };
	 motor2 {
	  vel=0;
	  f_max=0;
	 };
	 ode_params {
	  erp=0.2;
	  cfm=1e-05;
	  no_stop_cfm=1e-05;
	  fudge=1;
	 };
	 suspension {
	  erp=0.2;
	  cfm=1e-05;
	 };
	 pos=0;
	 vel=0;
	 pos2=0;
	 vel2=0;
	 cur_force1 {x=-0.04084086: y=1.3004e-06: z=0.009546553: };
	 cur_torque1 {x=-2.441997e-07: y=-0.006754429: z=-1.255284e-07: };
	 cur_force2 {x=0.04084086: y=-1.3004e-06: z=-0.009546553: };
	 cur_torque2 {x=3.526696e-10: y=1.789382e-05: z=-3.850993e-11: };
	};
       };
       space_type=SIMPLE_SPACE;
       hash_levels {min=1: max=4: };
      };
      VEObject @[1] {
       name="Target";
       desc=;
       bodies {
	name=;
	el_typ=VEBody;
	el_def=0;
	VEBody @[0] {
	 name="TargetBody";
	 desc=;
	 flags=FIXED;
	 init_pos {x=0.2630444: y=0.05: z=0.7244876: };
	 init_rot {x=0: y=0: z=1: rot=0: };
	 init_lin_vel {x=0: y=0: z=0: };
	 init_ang_vel {x=0: y=0: z=0: };
	 cur_pos {x=0.2630444: y=0.05: z=0.7244876: };
	 cur_rot {x=0: y=0: z=1: rot=0: };
	 cur_lin_vel {x=0: y=0: z=0: };
	 cur_ang_vel {x=0: y=0: z=0: };
	 shape=SPHERE;
	 mass=1;
	 radius=0.02;
	 length=0.1;
	 long_axis=LONG_Y;
	 box {x=1: y=1: z=1: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname="Banana.iv";
	 set_color=1;
	 color {r=1: g=1: b=0: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0.5;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
       };
       joints {
	name=;
	el_typ=VEJoint;
	el_def=0;
       };
       space_type=SIMPLE_SPACE;
       hash_levels {min=1: max=4: };
      };
     };
     spaces {
      name=;
      el_typ=VESpace;
      el_def=0;
      VESpace @[0] {
       name="RoomSpace";
       desc=;
       static_els {
	name=;
	el_typ=VEStatic;
	el_def=0;
	VEStatic @[0] {
	 name="Ground";
	 desc=;
	 flags=;
	 pos {x=0: y=0: z=0: };
	 rot {x=0: y=0: z=1: rot=0: };
	 shape=PLANE;
	 radius=0.2;
	 length=1;
	 long_axis=LONG_X;
	 box {x=1: y=1: z=1: };
	 plane_norm=NORM_Y;
	 plane_height=0;
	 plane_vis_size {x=3: y=3: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=0.4: g=0.4: b=0.4: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
	VEStatic @[1] {
	 name="BackWall";
	 desc=;
	 flags=;
	 pos {x=0: y=1.5: z=-1.5: };
	 rot {x=0: y=0: z=1: rot=0: };
	 shape=BOX;
	 radius=0.2;
	 length=1;
	 long_axis=LONG_X;
	 box {x=3: y=3: z=0.01: };
	 plane_norm=NORM_Y;
	 plane_height=2.28735e-14;
	 plane_vis_size {x=100: y=100: };
	 obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	 obj_fname=;
	 set_color=1;
	 color {r=0.7019608: g=0.7019608: b=0.7019608: a=1: };
	 texture=NULL;
	 surface {
	  friction=1e+22;
	  bounce=0;
	  bounce_vel=0.01;
	 };
	 softness {
	  erp=0.2;
	  cfm=1e-05;
	 };
	};
       };
       space_type=HASH_SPACE;
       hash_levels {min=-3: max=10: };
      };
     };
     textures {
      name=;
      el_typ=VETexture;
      el_def=0;
     };
     camera_0=NULL;
     camera_1=NULL;
     bg_color {r=0.8: g=0.8: b=0.8: a=1: };
     sun_light {
      on=1;
      intensity=0.5;
      color {r=1: g=1: b=1: a=1: };
     };
     light_0=NULL;
     light_1=NULL;
    };
    DataTable @[1] {
     name="ArmOutputData";
     desc=;
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="Reach_Name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] "1";"2";"3";"4";"5";"6";"7";"8";"9";"10";"11";"12";"13";"14";"15";"16";"17";"18";       };
      };
      float_Data @[1] {
       name="Reach_No";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;       };
      };
      float_Data @[2] {
       name="Hand_cur_pos_x";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.37168261;0.37161297;0.6063816;-0.20589854;0.22593376;-0.19953091;0.63231176;0.34166142;-0.23250347;0.22847974;-0.20023865;0.43843579;0.60904938;0.26456076;0.35189554;0.23626538;0.23627128;0.55667818;       };
      };
      float_Data @[3] {
       name="Hand_cur_pos_y";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.10000102;0.10000098;0.10000101;0.10000097;0.10000101;0.10000098;0.10000099;0.10000096;0.10000098;0.10000101;0.10000097;0.100001;0.10000103;0.10000095;0.10000098;0.10000099;0.10000098;0.10000103;       };
      };
      float_Data @[4] {
       name="Hand_cur_pos_z";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.64214432;0.64211899;0.18702151;0.29698306;0.32079479;0.28595367;0.16728641;0.60552084;0.28500196;0.3196556;0.28499448;0.59627676;0.19622436;0.3395074;0.60781014;0.3327274;0.33272484;0.19729929;       };
      };
      float_Data @[5] {
       name="Target_cur_pos_x";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.21083069;0.59686124;0.6381948;-0.2216617;0.20088932;-0.36245939;0.90792578;0.6582284;-0.29667139;0.24304597;-0.44186747;0.56882143;0.56461138;0.67187947;0.48034278;0.062777959;0.37817699;0.60569948;       };
      };
      float_Data @[6] {
       name="Target_cur_pos_y";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;       };
      };
      float_Data @[7] {
       name="Target_cur_pos_z";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.47774741;0.5664553;0.16312234;0.26960441;0.21994174;0.31115478;0.051182408;0.43801498;0.080901213;0.30310011;0.24834247;0.50633514;0.083180457;0.12272958;0.32567465;0.15781063;0.16960482;0.01494249;       };
      };
      float_Data @[8] {
       name="Hand_cur_lin_vel_x";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] -2.5106769e-05;8.1353892e-07;-8.0173078e-05;8.8057132e-05;1.2997443e-06;7.7896926e-05;-8.5882501e-05;-3.7673253e-06;9.2343267e-05;1.7878875e-06;7.7909688e-05;-3.9378072e-05;-6.5342523e-05;2.1932698e-07;3.5794477e-05;7.354765e-05;8.2537775e-07;-8.4993808e-05;       };
      };
      float_Data @[9] {
       name="Hand_cur_lin_vel_y";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] -2.261452e-07;-2.7648233e-07;-1.0940756e-06;3.3449308e-07;-7.048514e-07;2.9430626e-07;-7.8310291e-07;7.6583137e-07;-6.2359405e-08;-2.1553012e-07;-5.1701065e-08;-5.7092768e-07;-5.1082077e-07;2.4790108e-07;-1.7042333e-07;-4.0312582e-07;-2.3065459e-07;-1.1708261e-06;       };
      };
      float_Data @[10] {
       name="Hand_cur_lin_vel_z";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] -2.7746501e-05;-1.6412015e-06;-1.993403e-05;-4.3692304e-05;-8.3970983e-05;-3.7269103e-05;-2.1186897e-05;-9.579648e-05;-1.9658906e-05;-8.6250511e-05;-3.5058685e-05;-8.9491223e-05;-2.9504299e-05;-9.0315356e-05;-7.5365097e-05;-3.4136439e-05;-4.9570775e-07;-3.2927972e-05;       };
      };
      float_Data @[11] {
       name="Should_pos";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.72852612;0.72852516;-0.73236734;1.7363877;0.32522297;1.7252564;-0.77143866;0.66041279;1.8177633;0.31429434;1.7278409;0.53161478;-0.70225602;0.22943783;0.65337324;0.30907631;0.30907631;-0.72194219;       };
      };
      float_Data @[12] {
       name="Should_vel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] -3.3120807e-06;-3.0917854e-06;-1.8508879e-06;-3.778772e-07;-1.1203629e-06;3.3309107e-08;-2.9930652e-07;-3.101145e-07;-3.5505041e-06;-7.9534607e-07;-6.3811513e-08;4.6834475e-06;-5.9726594e-06;2.4941119e-06;-5.6424142e-08;-6.0418165e-07;-5.7951104e-07;-2.2957224e-06;       };
      };
      float_Data @[13] {
       name="Should_force_in";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.40000001;0.40000001;0;0.70000005;0.30000001;0.69999999;0;0.40000001;0.69999999;0.30000001;0.69999999;0.40000001;0;0.30000001;0.40000004;0.30000001;0.30000001;0;       };
      };
      float_Data @[14] {
       name="Elbow_pos";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 1.2363772;1.2365665;2.1588163;1.6667604;2.4621136;1.7099214;2.1040316;1.4370937;1.5965247;2.4661124;1.709372;1.3721919;2.1386051;2.4076912;1.4190922;2.4282756;2.4282756;2.2862456;       };
      };
      float_Data @[15] {
       name="Elbow_vel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 2.3697503e-06;2.6052571e-06;1.2971261e-06;-5.9014883e-07;1.0139711e-06;-1.5164684e-06;2.489915e-06;-1.8513629e-06;9.1056154e-07;9.765954e-07;-1.4900862e-06;-5.1242569e-07;1.4733523e-06;2.1106139e-06;-1.4691336e-06;1.7592678e-06;1.7363016e-06;-1.3397596e-06;       };
      };
      float_Data @[16] {
       name="Elbow_force_in";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.5;0.5;0.80000007;0.60000002;0.90000004;0.60000002;0.80000001;0.5;0.60000002;0.90000004;0.60000002;0.5;0.80000001;0.90000004;0.5;0.90000004;0.90000004;0.80000001;       };
      };
      float_Data @[17] {
       name="n_steps";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 135;21;131;197;124;127;199;128;101;130;128;100;109;83;106;109;21;92;       };
      };
      float_Data @[18] {
       name="angle_err";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.030278131;0.030245364;0.017201552;0.0060646832;0.012617037;0.012159228;0.021190301;0.01619114;0.020311862;0.010401279;0.01221782;0.020639777;0.02489171;0.026656523;0.012104243;0.016196072;0.016196072;0.019530281;       };
      };
      float_Data @[19] {
       name="trg_dist";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [18] 0.18604252;0.1664827;0.030676616;0.027361717;0.094459623;0.1117876;0.21369803;0.26262882;0.19297799;0.018121563;0.16564803;0.12053703;0.10837253;0.3385976;0.27394986;0.19886385;0.17796865;0.17126064;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[2] {
     name="ReachOutputData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="time";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[1] {
       name="Hand_cur_pos_x";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[2] {
       name="Hand_cur_pos_y";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[3] {
       name="Hand_cur_pos_z";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[4] {
       name="Target_cur_pos_x";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[5] {
       name="Target_cur_pos_y";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[6] {
       name="Target_cur_pos_z";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[7] {
       name="Hand_cur_lin_vel_x";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[8] {
       name="Hand_cur_lin_vel_y";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[9] {
       name="Hand_cur_lin_vel_z";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[10] {
       name="Should_pos";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[11] {
       name="Should_vel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[12] {
       name="Should_flexor_len";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[13] {
       name="Should_flexor_dlen";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[14] {
       name="Should_flexor_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[15] {
       name="Should_flexor_m_act_force";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[16] {
       name="Should_flexor_m_force";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[17] {
       name="Should_flexor_force";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[18] {
       name="Should_extensor_len";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[19] {
       name="Should_extensor_dlen";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[20] {
       name="Should_extensor_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[21] {
       name="Should_extensor_m_act_force";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[22] {
       name="Should_extensor_m_force";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[23] {
       name="Should_extensor_force";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[24] {
       name="should_cur_trg";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[25] {
       name="Elbow_pos";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[26] {
       name="Elbow_vel";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[27] {
       name="Elbow_force_in";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
      float_Data @[28] {
       name="elbow_cur_trg";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [0]        };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    NetMonitor @[3] {
     name="ArmMonitor";
     items {
      name=;
      el_typ=NetMonItem;
      el_def=0;
      NetMonItem @[0] {
       name="Reach_Name";
       computed=1;
       object_type=VEBody;
       object=NULL;
       variable="cur_pos.x";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_STRING;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[1] {
       name="Reach_No";
       computed=1;
       object_type=VEBody;
       object=NULL;
       variable="cur_pos.x";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[2] {
       name="Hand_cur_pos_x";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_pos.x";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[3] {
       name="Hand_cur_pos_y";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_pos.y";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[4] {
       name="Hand_cur_pos_z";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_pos.z";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[5] {
       name="Target_cur_pos_x";
       computed=0;
       object_type=VEBody;
       object=.projects[0].programs[0].objs[0].objects[1].bodies[0]$36$;
       variable="cur_pos.x";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[6] {
       name="Target_cur_pos_y";
       computed=0;
       object_type=VEBody;
       object=$36$;
       variable="cur_pos.y";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[7] {
       name="Target_cur_pos_z";
       computed=0;
       object_type=VEBody;
       object=$36$;
       variable="cur_pos.z";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[8] {
       name="Hand_cur_lin_vel_x";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_lin_vel.x";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[9] {
       name="Hand_cur_lin_vel_y";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_lin_vel.y";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[10] {
       name="Hand_cur_lin_vel_z";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_lin_vel.z";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[11] {
       name="Should_pos";
       computed=0;
       object_type=VEJoint;
       object=.projects[0].programs[0].objs[0].objects[0].joints[0]$37$;
       variable="pos";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[12] {
       name="Should_vel";
       computed=0;
       object_type=VEJoint;
       object=$37$;
       variable="vel";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[13] {
       name="Should_force_in";
       computed=1;
       object_type=VEJoint;
       object=NULL;
       variable="vel";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[14] {
       name="Elbow_pos";
       computed=0;
       object_type=VEJoint;
       object=.projects[0].programs[0].objs[0].objects[0].joints[1]$38$;
       variable="pos";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[15] {
       name="Elbow_vel";
       computed=0;
       object_type=VEJoint;
       object=$38$;
       variable="vel";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[16] {
       name="Elbow_force_in";
       computed=1;
       object_type=VEJoint;
       object=NULL;
       variable="vel";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[17] {
       name="n_steps";
       computed=1;
       object_type=VEJoint;
       object=NULL;
       variable="vel";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[18] {
       name="angle_err";
       computed=1;
       object_type=VEJoint;
       object=NULL;
       variable="vel";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[19] {
       name="trg_dist";
       computed=1;
       object_type=VEJoint;
       object=NULL;
       variable="vel";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
     };
     network=.projects[0].networks[0]$39$;
     data=.projects[0].programs[0].objs[1]$40$;
     rmv_orphan_cols=1;
    };
    NetMonitor @[4] {
     name="ReachMonitor";
     items {
      name=;
      el_typ=NetMonItem;
      el_def=0;
      NetMonItem @[0] {
       name="time";
       computed=1;
       object_type=VEBody;
       object=NULL;
       variable="cur_pos.x";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[1] {
       name="Hand_cur_pos_x";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_pos.x";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[2] {
       name="Hand_cur_pos_y";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_pos.y";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[3] {
       name="Hand_cur_pos_z";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_pos.z";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[4] {
       name="Target_cur_pos_x";
       computed=0;
       object_type=VEBody;
       object=$36$;
       variable="cur_pos.x";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[5] {
       name="Target_cur_pos_y";
       computed=0;
       object_type=VEBody;
       object=$36$;
       variable="cur_pos.y";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[6] {
       name="Target_cur_pos_z";
       computed=0;
       object_type=VEBody;
       object=$36$;
       variable="cur_pos.z";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[7] {
       name="Hand_cur_lin_vel_x";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_lin_vel.x";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[8] {
       name="Hand_cur_lin_vel_y";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_lin_vel.y";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[9] {
       name="Hand_cur_lin_vel_z";
       computed=0;
       object_type=VEBody;
       object=$20$;
       variable="cur_lin_vel.z";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[10] {
       name="Should_pos";
       computed=0;
       object_type=VEJoint;
       object=$37$;
       variable="pos";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[11] {
       name="Should_vel";
       computed=0;
       object_type=VEJoint;
       object=$37$;
       variable="vel";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[12] {
       name="Should_flexor_len";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="flexor.len";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[13] {
       name="Should_flexor_dlen";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="flexor.dlen";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[14] {
       name="Should_flexor_act";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="flexor.act";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[15] {
       name="Should_flexor_m_act_force";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="flexor.m_act_force";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[16] {
       name="Should_flexor_m_force";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="flexor.m_force";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[17] {
       name="Should_flexor_force";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="flexor.force";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[18] {
       name="Should_extensor_len";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="extensor.len";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[19] {
       name="Should_extensor_dlen";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="extensor.dlen";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[20] {
       name="Should_extensor_act";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="extensor.act";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[21] {
       name="Should_extensor_m_act_force";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="extensor.m_act_force";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[22] {
       name="Should_extensor_m_force";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="extensor.m_force";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[23] {
       name="Should_extensor_force";
       computed=0;
       object_type=VELambdaArmJoint;
       object=$37$;
       variable="extensor.force";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[24] {
       name="should_cur_trg";
       computed=1;
       object_type=VELambdaArmJoint;
       object=NULL;
       variable="extensor.force";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[25] {
       name="Elbow_pos";
       computed=0;
       object_type=VEJoint;
       object=$38$;
       variable="pos";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[26] {
       name="Elbow_vel";
       computed=0;
       object_type=VEJoint;
       object=$38$;
       variable="vel";
       var_label=;
       name_style=AUTO_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[27] {
       name="Elbow_force_in";
       computed=1;
       object_type=VEJoint;
       object=NULL;
       variable="vel";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
      NetMonItem @[28] {
       name="elbow_cur_trg";
       computed=1;
       object_type=VELambdaArmJoint;
       object=NULL;
       variable="extensor.force";
       var_label=;
       name_style=MY_NAME;
       max_name_len=6;
       val_type=VT_FLOAT;
       matrix=0;
       matrix_geom{        };
       data_agg=0;
       data_src=NULL;
       agg_col {
	col_name=;
       };
       agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       select_rows=0;
       select_spec {
	col_name=;
	rel=EQUAL;
	use_var=0;
	cmp 0 1;
	var=NULL;
       };
       pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
      };
     };
     network=$39$;
     data=.projects[0].programs[0].objs[2]$41$;
     rmv_orphan_cols=1;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="gen_rnd_angles";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="generate a new random angles";
    };
    ProgVar @[1] {
     name="shoulder_trg_angle_norm";
     var_type=T_Real;
     real_val=0.4000000059604645;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="normalized 0..1 angle value";
    };
    ProgVar @[2] {
     name="elbow_trg_angle_norm";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="normalized 0..1 angle value";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="VEArmWorld";
     var_type=T_Object;
     object_type=VEWorld;
     object_val=$14$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="Shoulder";
     var_type=T_Object;
     object_type=VELambdaArmJoint;
     object_val=$37$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="Elbow";
     var_type=T_Object;
     object_type=VELambdaArmJoint;
     object_val=$38$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[3] {
     name="Hand";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$20$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[4] {
     name="Torso";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$33$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[5] {
     name="Humerus";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$18$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[6] {
     name="Ulna";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$19$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[7] {
     name="TargetBody";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$36$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[8] {
     name="co_contract_pct";
     var_type=T_Real;
     real_val=0.4;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="how much to co-contract the muscles for the movement";
    };
    ProgVar @[9] {
     name="angle_inc";
     var_type=T_Real;
     real_val=0.02;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="increment in angle control to provide";
    };
    ProgVar @[10] {
     name="angle_updt_interval";
     var_type=T_Int;
     int_val=5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="how frequently to provide new angle commands";
    };
    ProgVar @[11] {
     name="reach_mon_on";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="whether to monitor at the reach level";
    };
    ProgVar @[12] {
     name="shoulder_cur_trg_angle";
     var_type=T_Real;
     real_val=0.4000000059604645;
     objs_ptr=0;
     flags=CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc="current target angle: is incremented linearly to produce the control trajectory";
    };
    ProgVar @[13] {
     name="shoulder_pos_dir";
     var_type=T_Bool;
     bool_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="positive angle direction (else neg)";
    };
    ProgVar @[14] {
     name="shoulder_angle_err";
     var_type=T_Real;
     real_val=0.01621725969016552;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc="angle err relative to target";
    };
    ProgVar @[15] {
     name="elbow_cur_trg_angle";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[16] {
     name="elbow_pos_dir";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[17] {
     name="elbow_angle_err";
     var_type=T_Real;
     real_val=0.02284330129623413;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc="angle err relative to target";
    };
    ProgVar @[18] {
     name="angle_err";
     var_type=T_Real;
     real_val=0.01953028049319983;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc="total angular error across both joints";
    };
    ProgVar @[19] {
     name="hand_vel";
     var_type=T_Real;
     real_val=0.09626170992851257;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[20] {
     name="hand_vel_thr";
     var_type=T_Real;
     real_val=0.0001;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="threshold for stopping movement in hand velocity";
    };
    ProgVar @[21] {
     name="ve_step";
     var_type=T_Int;
     int_val=115;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[22] {
     name="max_ve_steps";
     var_type=T_Int;
     int_val=500;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="maximum number of ve steps to take per movement";
    };
    ProgVar @[23] {
     name="min_ve_steps";
     var_type=T_Int;
     int_val=20;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="minimum number of ve steps to take per movement";
    };
    ProgVar @[24] {
     name="ArmOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$40$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[25] {
     name="ArmMonitor";
     var_type=T_Object;
     object_type=NetMonitor;
     object_val=.projects[0].programs[0].objs[3]$42$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[26] {
     name="ReachMonitor";
     var_type=T_Object;
     object_type=NetMonitor;
     object_val=.projects[0].programs[0].objs[4]$43$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[27] {
     name="ReachOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$41$;
     objs_ptr=1;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[28] {
     name="arm_tot_len";
     var_type=T_Real;
     real_val=0.7450000075250864;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="total length of the arm, for target range computations";
    };
    ProgVar @[29] {
     name="shoulder_x_pos";
     var_type=T_Real;
     real_val=0.2549999940395355;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[30] {
     name="shoulder_z_pos";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[31] {
     name="hand_max_x";
     var_type=T_Real;
     real_val=1.000000001564622;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[32] {
     name="hand_min_z";
     var_type=T_Real;
     real_val=-0.3400000035762787;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[33] {
     name="hand_min_x";
     var_type=T_Real;
     real_val=-0.4900000134855509;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[34] {
     name="hand_max_z";
     var_type=T_Real;
     real_val=0.7450000075250864;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[35] {
     name="hand_pos_x_norm";
     var_type=T_Real;
     real_val=0.7024685764023395;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[36] {
     name="hand_pos_z_norm";
     var_type=T_Real;
     real_val=0.4952067141031751;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[37] {
     name="targ_pos_x_norm";
     var_type=T_Real;
     real_val=0.7353687798644625;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[38] {
     name="targ_pos_z_norm";
     var_type=T_Real;
     real_val=0.3271359358897369;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[39] {
     name="trg_dist";
     var_type=T_Real;
     real_val=0.1712606400251389;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="distance from target";
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[0]$44$;
     method=VEWorld::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc="update the monitor items and data schema based on current settings of the NetMonitor object";
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[25]$45$;
     method=NetMonitor::UpdateMonitors;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[2] {
     desc="update the monitor items and data schema based on current settings of the NetMonitor object";
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[26]$46$;
     method=NetMonitor::UpdateMonitors;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    ResetDataRows @[3] {
     desc=;
     flags=;
     data_var=.projects[0].programs[0].vars[24]$47$;
    };
    ResetDataRows @[4] {
     desc=;
     flags=;
     data_var=.projects[0].programs[0].vars[27]$48$;
    };
    AssignExpr @[5] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[12]$49$;
     expr {
      expr="Shoulder.cur_norm_angle";
     };
    };
    AssignExpr @[6] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[15]$50$;
     expr {
      expr="Elbow.cur_norm_angle";
     };
    };
    AssignExpr @[7] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[28]$51$;
     expr {
      expr="Humerus.length + Ulna.length + Hand.radius+.04";
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[29]$52$;
     expr {
      expr="Torso.cur_pos.x + .5 * Torso.box.x + .03";
     };
    };
    AssignExpr @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[30]$53$;
     expr {
      expr="Torso.cur_pos.z";
     };
    };
    AssignExpr @[10] {
     desc="assume reaching out in front of plane";
     flags=;
     result_var=.projects[0].programs[0].vars[31]$54$;
     expr {
      expr="shoulder_x_pos + arm_tot_len";
     };
    };
    AssignExpr @[11] {
     desc="can stick hand through torso now..";
     flags=;
     result_var=.projects[0].programs[0].vars[32]$55$;
     expr {
      expr="shoulder_z_pos - Ulna.length";
     };
    };
    AssignExpr @[12] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[33]$56$;
     expr {
      expr="shoulder_x_pos - arm_tot_len";
     };
    };
    AssignExpr @[13] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[34]$57$;
     expr {
      expr="shoulder_z_pos + arm_tot_len";
     };
    };
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    If @[0] {
     desc=;
     flags=;
     cond {
      expr="gen_rnd_angles";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      Comment @[0] {
       desc="= Generate Random Forces =";
       flags=;
      };
      RandomCall @[1] {
       desc=;
       flags=;
       result_var=.projects[0].programs[0].args[1]$58$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=0;
	 def_val=;
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=0;
	 def_val=;
	 expr {
	  expr="1.0";
	 };
	};
       };
      };
      RandomCall @[2] {
       desc=;
       flags=;
       result_var=.projects[0].programs[0].args[2]$59$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=0;
	 def_val=;
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=0;
	 def_val=;
	 expr {
	  expr="1.0";
	 };
	};
       };
      };
     };
    };
    Comment @[1] {
     desc="= Run the World =";
     flags=;
    };
    AssignExpr @[2] {
     desc=;
     flags=;
     result_var=$49$;
     expr {
      expr="Shoulder.cur_norm_angle";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=;
     result_var=$50$;
     expr {
      expr="Elbow.cur_norm_angle";
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[13]$60$;
     expr {
      expr="(shoulder_trg_angle_norm > shoulder_cur_trg_angle)";
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[16]$61$;
     expr {
      expr="(elbow_trg_angle_norm > elbow_cur_trg_angle)";
     };
    };
    ResetDataRows @[6] {
     desc=;
     flags=;
     data_var=$48$;
    };
    ForLoop @[7] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      If @[0] {
       desc=;
       flags=;
       cond {
	expr="ve_step % angle_updt_interval == 0";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	IfElse @[0] {
	 desc=;
	 flags=;
	 cond {
	  expr="shoulder_pos_dir";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$49$;
	   expr {
	    expr="angle_inc";
	   };
	  };
	  AssignExpr @[1] {
	   desc=;
	   flags=;
	   result_var=$49$;
	   expr {
	    expr="MIN(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	   };
	  };
	 };
	 false_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$49$;
	   expr {
	    expr="-angle_inc";
	   };
	  };
	  AssignExpr @[1] {
	   desc=;
	   flags=;
	   result_var=$49$;
	   expr {
	    expr="MAX(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	   };
	  };
	 };
	};
	IfElse @[1] {
	 desc=;
	 flags=;
	 cond {
	  expr="elbow_pos_dir";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$50$;
	   expr {
	    expr="angle_inc";
	   };
	  };
	  AssignExpr @[1] {
	   desc=;
	   flags=;
	   result_var=$50$;
	   expr {
	    expr="MIN(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	   };
	  };
	 };
	 false_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$50$;
	   expr {
	    expr="-angle_inc";
	   };
	  };
	  AssignExpr @[1] {
	   desc=;
	   flags=;
	   result_var=$50$;
	   expr {
	    expr="MAX(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	   };
	  };
	 };
	};
	MethodCall @[2] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=.projects[0].programs[0].vars[1]$62$;
	 method=VELambdaArmJoint::SetTargNormAngle;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=float;
	   type="float";
	   name="trg_norm_angle";
	   required=0;
	   def_val=;
	   expr {
	    expr="shoulder_cur_trg_angle";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=float;
	   type="float";
	   name="co_contract";
	   required=0;
	   def_val=;
	   expr {
	    expr="co_contract_pct";
	   };
	  };
	 };
	};
	MethodCall @[3] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=.projects[0].programs[0].vars[2]$63$;
	 method=VELambdaArmJoint::SetTargNormAngle;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=float;
	   type="float";
	   name="trg_norm_angle";
	   required=0;
	   def_val=;
	   expr {
	    expr="elbow_cur_trg_angle";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=float;
	   type="float";
	   name="co_contract";
	   required=0;
	   def_val=;
	   expr {
	    expr="co_contract_pct";
	   };
	  };
	 };
	};
       };
      };
      MethodCall @[1] {
       desc=;
       flags=;
       result_var=NULL;
       obj=$44$;
       method=VEWorld::Step;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      If @[2] {
       desc=;
       flags=;
       cond {
	expr="reach_mon_on";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AddNewDataRow @[0] {
	 desc=;
	 flags=;
	 data_var=$48$;
	};
	MethodCall @[1] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$46$;
	 method=NetMonitor::GetMonVals;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	 };
	};
	MethodCall @[2] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$48$;
	 method=DataBlock::SetDataByName;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Variant_ref;
	   type="const Variant&";
	   name="data";
	   required=0;
	   def_val=;
	   expr {
	    expr="ve_step";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="const taString&";
	   name="ch_nm";
	   required=0;
	   def_val="\"\"";
	   expr {
	    expr="\"time\"";
	   };
	  };
	 };
	};
	MethodCall @[3] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$48$;
	 method=DataBlock::SetDataByName;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Variant_ref;
	   type="const Variant&";
	   name="data";
	   required=0;
	   def_val=;
	   expr {
	    expr="shoulder_cur_trg_angle";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="const taString&";
	   name="ch_nm";
	   required=0;
	   def_val="\"\"";
	   expr {
	    expr="\"should_cur_trg\"";
	   };
	  };
	 };
	};
	MethodCall @[4] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$48$;
	 method=DataBlock::SetDataByName;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Variant_ref;
	   type="const Variant&";
	   name="data";
	   required=0;
	   def_val=;
	   expr {
	    expr="elbow_cur_trg_angle";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="const taString&";
	   name="ch_nm";
	   required=0;
	   def_val="\"\"";
	   expr {
	    expr="\"elbow_cur_trg\"";
	   };
	  };
	 };
	};
	DoneWritingDataRow @[5] {
	 desc=;
	 flags=;
	 data_var=$47$;
	};
       };
      };
      If @[3] {
       desc=;
       flags=;
       cond {
	expr="ve_step > min_ve_steps";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[0].vars[19]$64$;
	 expr {
	  expr="Hand.cur_lin_vel.Mag()";
	 };
	};
	IfBreak @[1] {
	 desc=;
	 flags=;
	 cond {
	  expr="hand_vel < hand_vel_thr";
	 };
	};
       };
      };
      StopStepPoint @[4] {
       desc=;
       flags=;
      };
     };
     init {
      expr="ve_step = 0";
     };
     test {
      expr="ve_step < max_ve_steps";
     };
     iter {
      expr="ve_step++";
     };
    };
    Comment @[8] {
     desc="= Compute Distance to Target =";
     flags=;
    };
    AssignExpr @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[35]$65$;
     expr {
      expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
     };
    };
    AssignExpr @[10] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[36]$66$;
     expr {
      expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
     };
    };
    AssignExpr @[11] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[37]$67$;
     expr {
      expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
     };
    };
    AssignExpr @[12] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[38]$68$;
     expr {
      expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
     };
    };
    AssignExpr @[13] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[39]$69$;
     expr {
      expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
     };
    };
    MathCall @[14] {
     desc=;
     flags=;
     result_var=$69$;
     object_type=taMath_float;
     method=taMath_float::euc_dist;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float;
       type="float";
       name="x1";
       required=0;
       def_val=;
       expr {
	expr="targ_pos_x_norm";
       };
      };
      ProgArg @[1] {
       arg_type=float;
       type="float";
       name="y1";
       required=0;
       def_val=;
       expr {
	expr="targ_pos_z_norm";
       };
      };
      ProgArg @[2] {
       arg_type=float;
       type="float";
       name="x2";
       required=0;
       def_val=;
       expr {
	expr="hand_pos_x_norm";
       };
      };
      ProgArg @[3] {
       arg_type=float;
       type="float";
       name="y2";
       required=0;
       def_val=;
       expr {
	expr="hand_pos_z_norm";
       };
      };
     };
    };
    Comment @[15] {
     desc="= Read Out the State =";
     flags=;
    };
    AssignExpr @[16] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[14]$70$;
     expr {
      expr="fabs(Shoulder.cur_norm_angle - shoulder_trg_angle_norm)";
     };
    };
    AssignExpr @[17] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[17]$71$;
     expr {
      expr="fabs(Elbow.cur_norm_angle - elbow_trg_angle_norm)";
     };
    };
    AssignExpr @[18] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[18]$72$;
     expr {
      expr=".5 * (shoulder_angle_err + elbow_angle_err)";
     };
    };
    AddNewDataRow @[19] {
     desc=;
     flags=;
     data_var=$47$;
    };
    MethodCall @[20] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$45$;
     method=NetMonitor::GetMonVals;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MethodCall @[21] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$47$;
     method=DataBlock::SetDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="shoulder_cur_trg_angle";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"Should_force_in\"";
       };
      };
     };
    };
    MethodCall @[22] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$47$;
     method=DataBlock::SetDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="elbow_cur_trg_angle";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"Elbow_force_in\"";
       };
      };
     };
    };
    MethodCall @[23] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$47$;
     method=DataBlock::SetDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="ve_step";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"n_steps\"";
       };
      };
     };
    };
    MethodCall @[24] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$47$;
     method=DataBlock::SetDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="angle_err";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"angle_err\"";
       };
      };
     };
    };
    MethodCall @[25] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$47$;
     method=DataBlock::SetDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="trg_dist";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"trg_dist\"";
       };
      };
     };
    };
    MethodCall @[26] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$47$;
     method=DataBlock::SetDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="ArmOutputData.rows";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"Reach_No\"";
       };
      };
     };
    };
    MethodCall @[27] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$47$;
     method=DataBlock::SetDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="ArmOutputData.rows";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"Reach_Name\"";
       };
      };
     };
    };
    DoneWritingDataRow @[28] {
     desc=;
     flags=;
     data_var=$47$;
    };
   };
  };
  Program @[1] {
   name="SetTarget";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="gen_rnd_targ";
     var_type=T_Bool;
     bool_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="generate a new random target location";
    };
    ProgVar @[1] {
     name="targ_angle";
     var_type=T_Real;
     real_val=1.559693176571037;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="target angle from shoulder joint";
    };
    ProgVar @[2] {
     name="targ_dist";
     var_type=T_Real;
     real_val=0.7245322729241559;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="target distance from shoulder joint";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="TargetBody";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$36$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="arm_tot_len";
     var_type=T_Real;
     real_val=0.7450000075250864;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="total length of the arm, for target range computations";
    };
    ProgVar @[2] {
     name="targ_x";
     var_type=T_Real;
     real_val=0.2630444194194166;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc="location of target";
    };
    ProgVar @[3] {
     name="targ_z";
     var_type=T_Real;
     real_val=0.7244876132336225;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc="location of target";
    };
    ProgVar @[4] {
     name="shoulder_x_pos";
     var_type=T_Real;
     real_val=0.2549999940395355;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[5] {
     name="shoulder_z_pos";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[6] {
     name="rnd_angle_min";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="minimum angle for rnd gen";
    };
    ProgVar @[7] {
     name="rnd_angle_max";
     var_type=T_Real;
     real_val=3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="maximum angle for rnd gen";
    };
    ProgVar @[8] {
     name="rnd_dist_min";
     var_type=T_Real;
     real_val=0.2;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="minimum radial distance for rnd gen";
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    OtherProgramVar @[0] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[1].vars[1]$73$;
     var_2=.projects[0].programs[1].vars[4]$74$;
     var_3=.projects[0].programs[1].vars[5]$75$;
     var_4=NULL;
    };
    If @[1] {
     desc=;
     flags=;
     cond {
      expr="gen_rnd_targ";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      RandomCall @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].args[1]$76$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=0;
	 def_val=;
	 expr {
	  expr="rnd_angle_min";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=0;
	 def_val=;
	 expr {
	  expr="rnd_angle_max";
	 };
	};
       };
      };
      RandomCall @[1] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].args[2]$77$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=0;
	 def_val=;
	 expr {
	  expr="rnd_dist_min";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=0;
	 def_val=;
	 expr {
	  expr="arm_tot_len";
	 };
	};
       };
      };
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[2]$78$;
     expr {
      expr="shoulder_x_pos + targ_dist * cos(targ_angle)";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[3]$79$;
     expr {
      expr="shoulder_z_pos + targ_dist * sin(targ_angle)";
     };
    };
    MemberAssign @[4] {
     desc=;
     flags=;
     obj=.projects[0].programs[1].vars[0]$80$;
     path="init_pos.x";
     expr {
      expr="targ_x";
     };
     update_after=0;
    };
    MemberAssign @[5] {
     desc=;
     flags=;
     obj=$80$;
     path="init_pos.z";
     expr {
      expr="targ_z";
     };
     update_after=0;
    };
    MethodCall @[6] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$80$;
     method=VEBody::SetValsToODE;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
  };
  Program @[2] {
   name="GetCurInputs";
   tags=;
   desc="get input data for forward model: current status inputs -- before running Arm";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][1]$81$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="TargetBody";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$36$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="Hand";
     var_type=T_Object;
     object_type=VEBody;
     object_val=$20$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="Shoulder";
     var_type=T_Object;
     object_type=VELambdaArmJoint;
     object_val=$37$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[3] {
     name="Elbow";
     var_type=T_Object;
     object_type=VELambdaArmJoint;
     object_val=$38$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[4] {
     name="arm_tot_len";
     var_type=T_Real;
     real_val=0.7450000075250864;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="total length of the arm, for target range computations";
    };
    ProgVar @[5] {
     name="shoulder_x_pos";
     var_type=T_Real;
     real_val=0.2549999940395355;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[6] {
     name="shoulder_z_pos";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[7] {
     name="hand_max_x";
     var_type=T_Real;
     real_val=1.000000001564622;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[8] {
     name="hand_min_x";
     var_type=T_Real;
     real_val=-0.4900000134855509;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[9] {
     name="hand_max_z";
     var_type=T_Real;
     real_val=0.7450000075250864;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[10] {
     name="hand_min_z";
     var_type=T_Real;
     real_val=-0.3400000035762787;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[11] {
     name="hand_pos_x_norm";
     var_type=T_Real;
     real_val=0.7024685764023395;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[12] {
     name="hand_pos_z_norm";
     var_type=T_Real;
     real_val=0.4952067141031751;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[13] {
     name="targ_pos_x_norm";
     var_type=T_Real;
     real_val=0.5053989414655429;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[14] {
     name="targ_pos_z_norm";
     var_type=T_Real;
     real_val=0.9810945579682153;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[15] {
     name="shoulder_ang_norm";
     var_type=T_Real;
     real_val=0.01621725969016552;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized angle";
    };
    ProgVar @[16] {
     name="elbow_ang_norm";
     var_type=T_Real;
     real_val=0.8228433132171631;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized angle";
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    OtherProgramVar @[0] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[2].vars[4]$82$;
     var_2=.projects[0].programs[2].vars[5]$83$;
     var_3=.projects[0].programs[2].vars[6]$84$;
     var_4=NULL;
    };
    OtherProgramVar @[1] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[2].vars[7]$85$;
     var_2=.projects[0].programs[2].vars[9]$86$;
     var_3=.projects[0].programs[2].vars[8]$87$;
     var_4=.projects[0].programs[2].vars[10]$88$;
    };
    Comment @[2] {
     desc="= get all the data  -- compute here b/c this is BEFORE Arm is run =";
     flags=;
    };
    AssignExpr @[3] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[11]$89$;
     expr {
      expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[12]$90$;
     expr {
      expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[13]$91$;
     expr {
      expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
     };
    };
    AssignExpr @[6] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[14]$92$;
     expr {
      expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
     };
    };
    AssignExpr @[7] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[15]$93$;
     expr {
      expr="Shoulder.cur_norm_angle";
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[16]$94$;
     expr {
      expr="Elbow.cur_norm_angle";
     };
    };
    Comment @[9] {
     desc="= write to the data table -- assumes row added and set as target =";
     flags=;
    };
    MethodCall @[10] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[2].args[0]$95$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="hand_pos_x_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"VisHand_Cur\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    MethodCall @[11] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$95$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="hand_pos_z_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"VisHand_Cur\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="1";
       };
      };
     };
    };
    MethodCall @[12] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$95$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="targ_pos_x_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"VisTarget_Cur\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    MethodCall @[13] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$95$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="targ_pos_z_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"VisTarget_Cur\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="1";
       };
      };
     };
    };
    MethodCall @[14] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$95$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="shoulder_ang_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"SomaShoulderAngle_Cur\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    MethodCall @[15] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$95$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="elbow_ang_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"SomaElbowAngle_Cur\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
   };
  };
  Program @[3] {
   name="FwdModelPredTargs";
   tags=;
   desc="get input data for forward mode: targets for predictions (after running Arm)";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$81$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="Shoulder";
     var_type=T_Object;
     object_type=VELambdaArmJoint;
     object_val=$37$;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[1] {
     name="Elbow";
     var_type=T_Object;
     object_type=VELambdaArmJoint;
     object_val=$38$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="arm_tot_len";
     var_type=T_Real;
     real_val=0.7450000075250864;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="total length of the arm, for target range computations";
    };
    ProgVar @[3] {
     name="shoulder_x_pos";
     var_type=T_Real;
     real_val=0.2549999940395355;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[4] {
     name="shoulder_z_pos";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="position of shoulder joint";
    };
    ProgVar @[5] {
     name="hand_max_x";
     var_type=T_Real;
     real_val=1.000000001564622;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[6] {
     name="hand_min_x";
     var_type=T_Real;
     real_val=-0.4900000134855509;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[7] {
     name="hand_max_z";
     var_type=T_Real;
     real_val=0.7450000075250864;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[8] {
     name="hand_min_z";
     var_type=T_Real;
     real_val=-0.3400000035762787;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="computed max hand pos";
    };
    ProgVar @[9] {
     name="hand_pos_x_norm";
     var_type=T_Real;
     real_val=0.2650600601491646;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[10] {
     name="hand_pos_z_norm";
     var_type=T_Real;
     real_val=0.1888288998291029;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[11] {
     name="shoulder_trg_angle_norm";
     var_type=T_Real;
     real_val=0.8895427902249091;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized 0..1 motor control value";
    };
    ProgVar @[12] {
     name="elbow_trg_angle_norm";
     var_type=T_Real;
     real_val=0.8099150540956135;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[13] {
     name="shoulder_ang_norm";
     var_type=T_Real;
     real_val=0.8960170149803162;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized angle";
    };
    ProgVar @[14] {
     name="elbow_ang_norm";
     var_type=T_Real;
     real_val=0.7865855097770691;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized angle";
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    Comment @[0] {
     desc="== get all the data in normalized form ==";
     flags=;
    };
    OtherProgramVar @[1] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[3].vars[2]$96$;
     var_2=.projects[0].programs[3].vars[3]$97$;
     var_3=.projects[0].programs[3].vars[4]$98$;
     var_4=NULL;
    };
    OtherProgramVar @[2] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[3].vars[5]$99$;
     var_2=.projects[0].programs[3].vars[7]$100$;
     var_3=.projects[0].programs[3].vars[6]$101$;
     var_4=.projects[0].programs[3].vars[8]$102$;
    };
    OtherProgramVar @[3] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[3].vars[9]$103$;
     var_2=.projects[0].programs[3].vars[10]$104$;
     var_3=NULL;
     var_4=NULL;
    };
    AssignExpr @[4] {
     desc=;
     flags=;
     result_var=.projects[0].programs[3].vars[13]$105$;
     expr {
      expr="Shoulder.cur_norm_angle";
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=;
     result_var=.projects[0].programs[3].vars[14]$106$;
     expr {
      expr="Elbow.cur_norm_angle";
     };
    };
    OtherProgramVar @[6] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[3].vars[11]$107$;
     var_2=.projects[0].programs[3].vars[12]$108$;
     var_3=NULL;
     var_4=NULL;
    };
    Comment @[7] {
     desc="== write to the data table -- assumes row added and set as target ==";
     flags=;
    };
    MethodCall @[8] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[3].args[0]$109$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="hand_pos_x_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"VisHand_Pred\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    MethodCall @[9] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$109$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="hand_pos_z_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"VisHand_Pred\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="1";
       };
      };
     };
    };
    MethodCall @[10] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$109$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="shoulder_ang_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"SomaShoulderAngle_Pred\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    MethodCall @[11] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$109$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="elbow_ang_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"SomaElbowAngle_Pred\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    MethodCall @[12] {
     desc="this must be done here because random forces generated after grabbing cur inputs";
     flags=;
     result_var=NULL;
     obj=$109$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="shoulder_trg_angle_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"MotorShoulderForce\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    MethodCall @[13] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$109$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="elbow_trg_angle_norm";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"MotorElbowForce\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    DoneWritingDataRow @[14] {
     desc=;
     flags=;
     data_var=$109$;
    };
   };
  };
  Program @[4] {
   name="RLModelRew";
   tags=;
   desc="get input data for RL model: reward value (after running Arm)";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects[0].networks[1]$110$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="network to train";
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$81$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="hand_pos_x_norm";
     var_type=T_Real;
     real_val=0.4843373904274137;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[1] {
     name="hand_pos_z_norm";
     var_type=T_Real;
     real_val=0.44499555240696;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[2] {
     name="targ_pos_x_norm";
     var_type=T_Real;
     real_val=0.4565640764335486;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[3] {
     name="targ_pos_z_norm";
     var_type=T_Real;
     real_val=0.3165455440575745;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="normalized pos";
    };
    ProgVar @[4] {
     name="trg_dist";
     var_type=T_Real;
     real_val=0.1712606400251389;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="distance from target";
    };
    ProgVar @[5] {
     name="rew_val";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="reward value";
    };
    ProgVar @[6] {
     name="rew_dist_thr";
     var_type=T_Real;
     real_val=0.41;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc="threshold on distance to get a reward: updated as a function of network performance";
    };
    ProgVar @[7] {
     name="rew_dist_thr_init";
     var_type=T_Real;
     real_val=0.4;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="initial threshold on distance to get a reward at start of training";
    };
    ProgVar @[8] {
     name="rew_dist_thr_incr";
     var_type=T_Real;
     real_val=0.01;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="how much to change the distance threshold when network is doing well or poorly (see avg_rew_*_thr)";
    };
    ProgVar @[9] {
     name="avg_rew_dec_thr";
     var_type=T_Real;
     real_val=0.8;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="threshold on network avg_rew for decreasing the reward threshold (makes the task harder -- when doing well)";
    };
    ProgVar @[10] {
     name="avg_rew_inc_thr";
     var_type=T_Real;
     real_val=0.2;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="threshold on network avg_rew for increasing the reward threshold (makes task easier -- when doing poorly)";
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc=;
     flags=;
     result_var=.projects[0].programs[4].vars[6]$111$;
     expr {
      expr="rew_dist_thr_init";
     };
    };
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    OtherProgramVar @[0] {
     desc=;
     flags=;
     other_prog=$21$;
     set_other=0;
     var_1=.projects[0].programs[4].vars[4]$112$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    If @[1] {
     desc="on first trial of new epoch, update the reward threshold based on performance";
     flags=;
     cond {
      expr="network.trial == 0";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      IfElse @[0] {
       desc=;
       flags=;
       cond {
	expr="network.epoch == 0";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=$111$;
	 expr {
	  expr="rew_dist_thr_init";
	 };
	};
       };
       false_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	If @[0] {
	 desc=;
	 flags=;
	 cond {
	  expr="network.avg_ext_rew >= avg_rew_dec_thr";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$111$;
	   expr {
	    expr="-rew_dist_thr_incr";
	   };
	  };
	 };
	};
	If @[1] {
	 desc=;
	 flags=;
	 cond {
	  expr="network.avg_ext_rew <= avg_rew_inc_thr";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$111$;
	   expr {
	    expr="rew_dist_thr_incr";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    AssignExpr @[2] {
     desc="by threshold";
     flags=;
     result_var=.projects[0].programs[4].vars[5]$113$;
     expr {
      expr="trg_dist < rew_dist_thr ? 1.0 : 0.0";
     };
    };
    AssignExpr @[3] {
     desc="just inverse distance for now..";
     flags=OFF;
     result_var=$113$;
     expr {
      expr="rew_val > 0.0 ? rew_val : 0.0";
     };
    };
    Comment @[4] {
     desc="== write to the data table -- assumes row added and set as target ==";
     flags=;
    };
    MethodCall @[5] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[4].args[1]$114$;
     method=DataBlock::SetMatrixCellDataByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="data";
       required=0;
       def_val=;
       expr {
	expr="rew_val";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ch_nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"PVe\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="cell";
       required=0;
       def_val=;
       expr {
	expr="0";
       };
      };
     };
    };
    DoneWritingDataRow @[6] {
     desc=;
     flags=;
     data_var=$114$;
    };
   };
  };
  Program @[5] {
   name="LeabraStartup";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
   flags=STARTUP_RUN;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$110$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$81$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects[0].programs.gp[0][0]$115$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="set this to point to your batch process";
    };
    ProgVar @[1] {
     name="tag";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="log file directory";
    };
    ProgVar @[3] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="name of log file";
    };
    ProgVar @[4] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][1]$116$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[5] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][0]$117$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[6] {
     name="LeabraUnitSpec_0";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$2$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[7] {
     name="ForceScalarVal";
     var_type=T_Object;
     object_type=ScalarValLayerSpec;
     object_val=$9$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=;
    };
    MiscCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    RegisterArgs @[4] {
     desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
     flags=;
    };
    Comment @[5] {
     desc="Initialize and set variables from args";
     flags=;
    };
    PrintExpr @[6] {
     desc=;
     flags=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
    };
    MethodCall @[7] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[5].vars[0]$118$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MiscCall @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[5].vars[1]$119$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[5].vars[2]$120$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    ProgVarFmArg @[10] {
     desc=;
     flags=;
     prog=$12$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[11] {
     desc=;
     flags=;
     prog=$115$;
     var_name="max_batch";
     arg_name="batches";
    };
    Comment @[12] {
     desc="Custom Params";
     flags=;
    };
    ProgVarFmArg @[13] {
     desc=;
     flags=;
     prog=.projects[0].programs[4]$121$;
     var_name="rew_dist_thr_init";
     arg_name="rew_dist_thr_init";
    };
    ProgVarFmArg @[14] {
     desc=;
     flags=;
     prog=$121$;
     var_name="rew_dist_thr_incr";
     arg_name="rew_dist_thr_incr";
    };
    ProgVarFmArg @[15] {
     desc=;
     flags=;
     prog=$121$;
     var_name="avg_rew_dec_thr";
     arg_name="avg_rew_dec_thr";
    };
    ProgVarFmArg @[16] {
     desc=;
     flags=;
     prog=$121$;
     var_name="avg_rew_inc_thr";
     arg_name="avg_rew_inc_thr";
    };
    MemberFmArg @[17] {
     desc=;
     flags=;
     obj=.projects[0].programs[5].vars[6]$122$;
     path="noise.var";
     arg_name="noise_var";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[18] {
     desc=;
     flags=;
     obj=$122$;
     path="da_mod.gain";
     arg_name="da_mod_gain";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[19] {
     desc=;
     flags=;
     obj=.projects[0].programs[5].vars[7]$123$;
     path="inhib.kwta_pt";
     arg_name="kwta_pt";
     update_after=1;
     quiet=0;
    };
    Comment @[20] {
     desc="Set log files";
     flags=;
    };
    MethodCall @[21] {
     desc="save args to file: last arg is to include dmem proc number";
     flags=;
     result_var=.projects[0].programs[5].vars[3]$124$;
     obj=.projects[0].programs[5].vars[4]$125$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".args\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MiscCall @[22] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::FullArgStringToFile;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
     };
    };
    MethodCall @[23] {
     desc="last arg is to include dmem proc number";
     flags=;
     result_var=$124$;
     obj=$125$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[24] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=;
     result_var=NULL;
     obj=$125$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[25] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     result_var=$124$;
     obj=.projects[0].programs[5].vars[5]$126$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[26] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     result_var=NULL;
     obj=$126$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="false";
       };
      };
     };
    };
    OtherProgramVar @[27] {
     desc=;
     flags=;
     other_prog=.projects[0].programs.gp[0][10]$127$;
     set_other=1;
     var_1=$119$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     desc=;
     flags=;
     expr {
      expr="\"Running: \" << batch.name";
     };
    };
    ProgramCall @[29] {
     desc=;
     flags=;
     target=$115$;
     targ_ld_init="*LeabraBatch*";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[0][3]$128$;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="batch counter";
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of batch runs to perform";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$129$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$130$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$129$;
      local_ctr_var=$130$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=$12$;
	targ_ld_init="*LeabraTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$129$;
	local_ctr_var=$130$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrain";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns";
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of epochs to run";
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$131$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     };
     ProgVar @[5] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="save the network's weights at the end of training?  Note: you can also just call SaveWeights program inside training loop to save more frequently";
     };
     ProgVar @[6] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$132$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
     };
     ProgVar @[7] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[1].train_time$133$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$134$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=$3$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[7]$135$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[6]$136$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$136$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$3$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$135$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$135$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$3$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$3$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$137$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][2]$138$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$3$;
	local_ctr_var=$137$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$135$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc=;
      flags=;
      cond {
       expr="save_final_wts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=$127$;
	targ_ld_init="*SaveWeights*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trials_per_epoch";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how many trials to create per epoch?";
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$117$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[1].epoch_time$139$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=49;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
     ProgVar @[6] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call Compute_AvgAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
     ProgVar @[7] {
      name="adapt_rel_abs_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="use the computed rel and abs netin values to adapt the wt_scale.abs and wt_scale.rel params of network conspecs to match target values that are set on the projections -- see conspec rel_net_adapt and layerspec abs_net_adapt parmeters and comments for more information";
     };
     ProgVar @[8] {
      name="ArmOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$40$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$140$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$141$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[4]$142$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$140$;
      local_ctr_var=$141$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$142$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$142$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[3]$143$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[8]$144$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc="set to target number of rows -- will iterate over";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].args[1]$145$;
      method=DataTable::EnforceRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val=;
	expr {
	 expr="trials_per_epoch";
	};
       };
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=$128$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      data_var=$145$;
      index_var=.projects[0].programs.gp[0][2].vars[5]$146$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$147$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$140$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$140$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[9] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$140$;
	method=LeabraNetwork::Compute_AvgAbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="adapt_rel_abs_netin";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$140$;
	  method=LeabraNetwork::Compute_AdaptRelNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$140$;
	  method=LeabraNetwork::Compute_AdaptAbsNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
       };
      };
     };
     MethodCall @[10] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$142$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[11] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[0][9]$148$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$149$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$150$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$149$;
      local_ctr_var=$150$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$149$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[2] {
      desc=;
      flags=NON_STD;
      cond {
       expr="network.name.contains(\"FwdModel\")";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="capture current arm configuration prior to running Arm";
	flags=;
	target=.projects[0].programs[2]$151$;
	targ_ld_init="*GetCurInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       ProgramCall @[1] {
	desc="run the arm to generate target predictions -- random forces generated now";
	flags=;
	target=$21$;
	targ_ld_init="*Arm*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="gen_rnd_angles";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="shoulder_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=double;
	  type="double";
	  name="elbow_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	};
       };
       ProgramCall @[2] {
	desc="capture prediction targets (actual outputs of motor system) after running arm";
	flags=;
	target=.projects[0].programs[3]$152$;
	targ_ld_init="*FwdModelPredTargs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="set new random target location";
	flags=;
	target=.projects[0].programs[1]$153$;
	targ_ld_init="*SetTarget*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="gen_rnd_targ";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="targ_angle";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=double;
	  type="double";
	  name="targ_dist";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	};
       };
       ProgramCall @[1] {
	desc="capture current arm configuration prior to running Arm";
	flags=;
	target=$151$;
	targ_ld_init="*GetCurInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=.projects[0].programs.gp[0][4]$154$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$149$;
	local_ctr_var=$150$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$149$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$149$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=;
	result_var=NULL;
	obj=$149$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[6] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$149$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[0][8]$155$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$149$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$156$;
     };
    };
   };
   Program @[4] {
    name="LeabraSettle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
     ProgVar @[3] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects[0].networks[1].layers[8]$157$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects[0].networks[1].layers[9]$158$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$159$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$160$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$159$;
      local_ctr_var=$160$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$159$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[2] {
      desc="at start of plus phase -- run arm and set reward inputs";
      flags=NON_STD;
      cond {
       expr="network.name.contains(\"RL\") && network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[4]$161$;
	expr {
	 expr="network.layers.MotorShoulderForce";
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[3]$162$;
	expr {
	 expr="network.layers.MotorElbowForce";
	};
       };
       ProgramCall @[2] {
	desc="run the arm using forces from the network force layers";
	flags=;
	target=$21$;
	targ_ld_init="*Arm*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="gen_rnd_angles";
	  required=1;
	  def_val=;
	  expr {
	   expr="false";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="shoulder_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="MotorShoulderForce.units[0].act_m";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=double;
	  type="double";
	  name="elbow_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="MotorElbowForce.units[0].act_m";
	  };
	 };
	};
       };
       ProgramCall @[3] {
	desc="get reward value based on action";
	flags=;
	target=$121$;
	targ_ld_init="*RLModelRew*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[3] {
      desc=;
      flags=NON_STD;
      cond {
       expr="network.name.contains(\"FwdModel\")";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	flags=;
	target=.projects[0].programs.gp[0][6]$163$;
	targ_ld_init="*ApplyInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	flags=;
	target=.projects[0].programs.gp[0][7]$164$;
	targ_ld_init="*ApplyInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$159$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[5] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$165$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$165$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[6] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[0][5]$166$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$159$;
	local_ctr_var=$160$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$159$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[8] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$159$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[9] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$159$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[10] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$159$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$167$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$168$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$168$;
      update_var=$0$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs_FwdModel";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=.projects[0].data.gp[0][0]$169$;
      network=$39$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	chan_name="MotorShoulderForce";
	net_target=LAYER;
	layer_name="MotorShoulderForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[5] {
	chan_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[6] {
	chan_name="VisHand_Pred";
	net_target=LAYER;
	layer_name="VisHand_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[7] {
	chan_name="SomaShoulderAngle_Pred";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[8] {
	chan_name="SomaElbowAngle_Pred";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[9] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$39$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$169$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
     ProgVar @[2] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$170$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[2]$171$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$171$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$171$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$171$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="ApplyInputs_RLModel";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$81$;
      network=$110$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="PVe";
	net_target=LAYER;
	layer_name="PVe";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	chan_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[5] {
	chan_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[6] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$110$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
     ProgVar @[2] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][7].objs[0]$172$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[2]$173$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$173$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$173$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$173$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[8] {
    name="LeabraTrialMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="pvlv_pvi";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="pvlv_pvi";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="trg_dist";
	computed=0;
	object_type=ProgVar;
	object=$112$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$110$;
      data=$117$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$117$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$174$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$175$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$175$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$175$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$176$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$175$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$176$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].args[0]$177$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[9] {
    name="LeabraEpochMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_trg_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$117$;
	agg_col {
	 col_name="trg_dist";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="rew_dist_thr";
	computed=0;
	object_type=ProgVar;
	object=$111$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="avg_pvi";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$117$;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$110$;
      data=$116$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$116$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][9].objs[0]$178$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$139$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$179$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][9].vars[1]$180$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$180$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$180$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][9].vars[0]$181$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$180$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$179$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$181$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$181$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$181$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[10] {
    name="SaveWeights";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][10].vars[4]$182$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][10].vars[3]$183$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][10].vars[5]$184$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][10].vars[2]$185$;
      obj=.projects[0].programs.gp[0][10].args[0]$186$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$186$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[1][2]$187$;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @[0] {
    name="LeabraEpochTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=18;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][2]$188$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$139$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=18;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
     ProgVar @[6] {
      name="load_weights";
      var_type=T_String;
      string_val="ve_arm_curbest.wts.gz";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="file name of weights to load";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$10$;
      local_ctr_var=.projects[0].programs.gp[1][0].vars[2]$189$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[4]$190$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     If @[0] {
      desc=;
      flags=;
      cond {
       expr="load_weights.nonempty()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$10$;
	method=Network::LoadWeights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="load_weights";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="quiet";
	  required=0;
	  def_val="false";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       PrintVar @[1] {
	desc=;
	flags=;
	message="Loaded weights:";
	print_var=.projects[0].programs.gp[1][0].vars[6]$191$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
       };
      };
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$10$;
      local_ctr_var=$189$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[2] {
      desc="set to testing mode";
      flags=NEW_EL;
      obj=$10$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$190$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$190$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[3]$192$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=.projects[0].programs.gp[1][1]$193$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      data_var=$11$;
      index_var=.projects[0].programs.gp[1][0].vars[5]$194$;
      order_var=.projects[0].programs.gp[1][0].vars[1]$195$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$10$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$10$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$190$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[10] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[1][5]$196$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MemberAssign @[11] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$10$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
   };
   Program @[1] {
    name="LeabraTrialTest";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[1][1].args[0]$197$;
      local_ctr_var=.projects[0].programs.gp[1][1].vars[0]$198$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$197$;
      local_ctr_var=$198$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$197$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[2] {
      desc=;
      flags=NON_STD;
      cond {
       expr="network.name.contains(\"FwdModel\")";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="capture current arm configuration prior to running Arm";
	flags=;
	target=$151$;
	targ_ld_init="*GetCurInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       ProgramCall @[1] {
	desc="run the arm to generate target predictions -- random forces generated now";
	flags=;
	target=$21$;
	targ_ld_init="*Arm*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="gen_rnd_angles";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="shoulder_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=double;
	  type="double";
	  name="elbow_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	};
       };
       ProgramCall @[2] {
	desc="capture prediction targets (actual outputs of motor system) after running arm";
	flags=;
	target=$152$;
	targ_ld_init="*FwdModelPredTargs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="set new random target location";
	flags=;
	target=$153$;
	targ_ld_init="*SetTarget*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="gen_rnd_targ";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="targ_angle";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=double;
	  type="double";
	  name="targ_dist";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	};
       };
       ProgramCall @[1] {
	desc="capture current arm configuration prior to running Arm";
	flags=;
	target=$151$;
	targ_ld_init="*GetCurInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=$187$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$197$;
	local_ctr_var=$198$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$197$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$197$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=;
	result_var=NULL;
	obj=$197$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[6] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$197$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[1][4]$199$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$197$;
      update_var=.projects[0].programs.gp[1][1].vars[1]$200$;
     };
    };
   };
   Program @[2] {
    name="LeabraSettleTest";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$81$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
     ProgVar @[3] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$157$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$158$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[1][2].args[0]$201$;
      local_ctr_var=.projects[0].programs.gp[1][2].vars[0]$202$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$201$;
      local_ctr_var=$202$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$201$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[2] {
      desc="at start of plus phase -- run arm and set reward inputs";
      flags=NON_STD;
      cond {
       expr="network.name.contains(\"RL\") && network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][2].vars[4]$203$;
	expr {
	 expr="network.layers.MotorShoulderForce";
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][2].vars[3]$204$;
	expr {
	 expr="network.layers.MotorElbowForce";
	};
       };
       ProgramCall @[2] {
	desc="run the arm using forces from the network force layers";
	flags=;
	target=$21$;
	targ_ld_init="*Arm*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="gen_rnd_angles";
	  required=1;
	  def_val=;
	  expr {
	   expr="false";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="shoulder_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="MotorShoulderForce.units[0].act_m";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=double;
	  type="double";
	  name="elbow_trg_angle_norm";
	  required=1;
	  def_val=;
	  expr {
	   expr="MotorElbowForce.units[0].act_m";
	  };
	 };
	};
       };
       ProgramCall @[3] {
	desc="get reward value based on action";
	flags=;
	target=$121$;
	targ_ld_init="*RLModelRew*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[3] {
      desc=;
      flags=NON_STD;
      cond {
       expr="network.name.contains(\"FwdModel\")";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	flags=;
	target=$163$;
	targ_ld_init="*ApplyInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	flags=;
	target=$164$;
	targ_ld_init="*ApplyInputs*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$201$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[5] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[1][2].vars[1]$205$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$205$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[6] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[1][3]$206$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$201$;
	local_ctr_var=$202$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$201$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[8] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$201$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[9] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$201$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[10] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$201$;
      update_var=.projects[0].programs.gp[1][2].vars[2]$207$;
     };
    };
   };
   Program @[3] {
    name="LeabraCycleTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$110$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][3].args[0]$208$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$208$;
      update_var=.projects[0].programs.gp[1][3].vars[0]$209$;
     };
    };
   };
   Program @[4] {
    name="LeabraTrialMonitorTest";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="pvlv_pvi";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="pvlv_pvi";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="trg_dist";
	computed=0;
	object_type=ProgVar;
	object=$112$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$110$;
      data=$188$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$188$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][4].objs[0]$210$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].vars[1]$211$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$211$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$211$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].vars[0]$212$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$211$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$212$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].args[0]$213$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[5] {
    name="LeabraEpochMonitorTest";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_trg_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$117$;
	agg_col {
	 col_name="trg_dist";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="rew_dist_thr";
	computed=0;
	object_type=ProgVar;
	object=$111$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$110$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="avg_pvi";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$117$;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$110$;
      data=.projects[0].data.gp[1][3]$214$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$110$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$214$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][5].objs[0]$215$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$139$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[1][5].vars[2]$216$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[1]$217$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$217$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$217$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[0]$218$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$217$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$216$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$218$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$218$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$218$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$219$;
   name="Browser3";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$219$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="VEArmWorld";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 VEWorldView @[0] {
	  m_data=$14$;
	  m_transform=NULL;
	  children {
	   name=;
	   el_typ=T3DataView;
	   el_def=0;
	   VESpaceView @[0] {
	    m_data=.projects[0].programs[0].objs[0].spaces[0]$220$;
	    m_transform=NULL;
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	     VEStaticView @[0] {
	      m_data=.projects[0].programs[0].objs[0].spaces[0].static_els[0]$221$;
	      m_transform=NULL;
	      name="Ground";
	     };
	     VEStaticView @[1] {
	      m_data=.projects[0].programs[0].objs[0].spaces[0].static_els[1]$222$;
	      m_transform=NULL;
	      name="BackWall";
	     };
	    };
	    name="RoomSpace";
	   };
	   VEObjectView @[1] {
	    m_data=.projects[0].programs[0].objs[0].objects[0]$223$;
	    m_transform=NULL;
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @[0] {
	      m_data=$33$;
	      m_transform=NULL;
	      name="Torso";
	     };
	     VEBodyView @[1] {
	      m_data=$18$;
	      m_transform=NULL;
	      name="Humerus";
	     };
	     VEBodyView @[2] {
	      m_data=$19$;
	      m_transform=NULL;
	      name="Ulna";
	     };
	     VEBodyView @[3] {
	      m_data=$20$;
	      m_transform=NULL;
	      name="Hand";
	     };
	     VEBodyView @[4] {
	      m_data=.projects[0].programs[0].objs[0].objects[0].bodies[4]$224$;
	      m_transform=NULL;
	      name="Head";
	     };
	     VEBodyView @[5] {
	      m_data=.projects[0].programs[0].objs[0].objects[0].bodies[5]$225$;
	      m_transform=NULL;
	      name="LeftEye";
	     };
	     VEBodyView @[6] {
	      m_data=.projects[0].programs[0].objs[0].objects[0].bodies[6]$226$;
	      m_transform=NULL;
	      name="RightEye";
	     };
	     VEBodyView @[7] {
	      m_data=$34$;
	      m_transform=NULL;
	      name="Pectoralis";
	     };
	     VEBodyView @[8] {
	      m_data=$35$;
	      m_transform=NULL;
	      name="Deltoid";
	     };
	    };
	    name="LeftArmDude";
	   };
	   VEObjectView @[2] {
	    m_data=.projects[0].programs[0].objs[0].objects[1]$227$;
	    m_transform=NULL;
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @[0] {
	      m_data=$36$;
	      m_transform=NULL;
	      name="TargetBody";
	     };
	    };
	    name="Target";
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  display_on=1;
	  drag_objs=0;
	 };
	 GraphTableView @[1] {
	  m_data=$40$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].programs[0].objs[1].data[0]$228$;
	    m_transform=NULL;
	    name="Reach_Name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].programs[0].objs[1].data[1]$229$;
	    m_transform=NULL;
	    name="Reach_No";
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=68: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].programs[0].objs[1].data[2]$230$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].programs[0].objs[1].data[3]$231$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].programs[0].objs[1].data[4]$232$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].programs[0].objs[1].data[5]$233$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].programs[0].objs[1].data[6]$234$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].programs[0].objs[1].data[7]$235$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].programs[0].objs[1].data[8]$236$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].programs[0].objs[1].data[9]$237$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].programs[0].objs[1].data[10]$238$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=.projects[0].programs[0].objs[1].data[11]$239$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=.projects[0].programs[0].objs[1].data[12]$240$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=.projects[0].programs[0].objs[1].data[13]$241$;
	    m_transform=NULL;
	    name="Should_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=.projects[0].programs[0].objs[1].data[14]$242$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=.projects[0].programs[0].objs[1].data[15]$243$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=.projects[0].programs[0].objs[1].data[16]$244$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=.projects[0].programs[0].objs[1].data[17]$245$;
	    m_transform=NULL;
	    name="n_steps";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=.projects[0].programs[0].objs[1].data[18]$246$;
	    m_transform=NULL;
	    name="angle_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=.projects[0].programs[0].objs[1].data[19]$247$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=17: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Target_cur_pos_x";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Target_cur_pos_z";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=6: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=1: max=6: };
	   range {min=1: max=6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=18: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=1: max=18: };
	   range {min=1: max=18: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=.colorspecs[0]$248$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[2] {
	  m_data=$40$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$228$;
	    m_transform=NULL;
	    name="Reach_Name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$229$;
	    m_transform=NULL;
	    name="Reach_No";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$230$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$231$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$232$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$233$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$234$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$235$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$236$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=$237$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=$238$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=$239$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=$240$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=$241$;
	    m_transform=NULL;
	    name="Should_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=$242$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=$243$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=$244$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=$245$;
	    m_transform=NULL;
	    name="n_steps";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=$246$;
	    m_transform=NULL;
	    name="angle_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=$247$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=17: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Hand_cur_pos_z";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=18: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=1: max=18: };
	   range {min=1: max=18: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[3] {
	  m_data=$40$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$228$;
	    m_transform=NULL;
	    name="Reach_Name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$229$;
	    m_transform=NULL;
	    name="Reach_No";
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=2: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$230$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$231$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$232$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$233$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$234$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$235$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$236$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=$237$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=$238$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=$239$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=$240$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=$241$;
	    m_transform=NULL;
	    name="Should_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=$242$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=$243$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=$244$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=$245$;
	    m_transform=NULL;
	    name="n_steps";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=$246$;
	    m_transform=NULL;
	    name="angle_err";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0292521: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=$247$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.8: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=17: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=17: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=17: };
	   range {min=0: max=17: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=1;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="trg_dist";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=0.8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0.8: };
	   range {min=0: max=0.8: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="angle_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0.03027813: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0.03027813: };
	   range {min=0: max=0.03027813: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="n_steps";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=500: };
	   range {min=0: max=500: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=2: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=1: max=2: };
	   range {min=1: max=2: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[4] {
	  m_data=$41$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].programs[0].objs[2].data[0]$249$;
	    m_transform=NULL;
	    name="time";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=999: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].programs[0].objs[2].data[1]$250$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].programs[0].objs[2].data[2]$251$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].programs[0].objs[2].data[3]$252$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].programs[0].objs[2].data[4]$253$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].programs[0].objs[2].data[5]$254$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].programs[0].objs[2].data[6]$255$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].programs[0].objs[2].data[7]$256$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].programs[0].objs[2].data[8]$257$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].programs[0].objs[2].data[9]$258$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].programs[0].objs[2].data[10]$259$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=.projects[0].programs[0].objs[2].data[11]$260$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=.projects[0].programs[0].objs[2].data[12]$261$;
	    m_transform=NULL;
	    name="Should_flexor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0.103447: fix_max=0: max=0.150032: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=.projects[0].programs[0].objs[2].data[13]$262$;
	    m_transform=NULL;
	    name="Should_flexor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=.projects[0].programs[0].objs[2].data[14]$263$;
	    m_transform=NULL;
	    name="Should_flexor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0583177: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=.projects[0].programs[0].objs[2].data[15]$264$;
	    m_transform=NULL;
	    name="Should_flexor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=.projects[0].programs[0].objs[2].data[16]$265$;
	    m_transform=NULL;
	    name="Should_flexor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=.projects[0].programs[0].objs[2].data[17]$266$;
	    m_transform=NULL;
	    name="Should_flexor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=13.2941: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=.projects[0].programs[0].objs[2].data[18]$267$;
	    m_transform=NULL;
	    name="Should_extensor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0.0499678: fix_max=0: max=0.0965525: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=.projects[0].programs[0].objs[2].data[19]$268$;
	    m_transform=NULL;
	    name="Should_extensor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    m_data=.projects[0].programs[0].objs[2].data[20]$269$;
	    m_transform=NULL;
	    name="Should_extensor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0465601: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    m_data=.projects[0].programs[0].objs[2].data[21]$270$;
	    m_transform=NULL;
	    name="Should_extensor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    m_data=.projects[0].programs[0].objs[2].data[22]$271$;
	    m_transform=NULL;
	    name="Should_extensor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    m_data=.projects[0].programs[0].objs[2].data[23]$272$;
	    m_transform=NULL;
	    name="Should_extensor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=10.4362: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    m_data=.projects[0].programs[0].objs[2].data[24]$273$;
	    m_transform=NULL;
	    name="should_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0.000951253: fix_max=0: max=0.23532: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    m_data=.projects[0].programs[0].objs[2].data[25]$274$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    m_data=.projects[0].programs[0].objs[2].data[26]$275$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    m_data=.projects[0].programs[0].objs[2].data[27]$276$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    m_data=.projects[0].programs[0].objs[2].data[28]$277$;
	    m_transform=NULL;
	    name="elbow_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0.365413: fix_max=0: max=0.535126: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=10;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Should_flexor_len";
	   fixed_range {fix_min=0: min=0.103447: fix_max=0: max=0.150032: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0.0009512525: max=0.5351256: };
	   range {min=0: max=0.6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Should_extensor_len";
	   fixed_range {fix_min=0: min=0.0499678: fix_max=0: max=0.0965525: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0.0009512525: max=0.5351256: };
	   range {min=0: max=0.6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Should_flexor_force";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Should_extensor_force";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=1;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="should_cur_trg";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="elbow_cur_trg";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[5] {
	  m_data=$41$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$249$;
	    m_transform=NULL;
	    name="time";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$250$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$251$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$252$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$253$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$254$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$255$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$256$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$257$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=$258$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=$259$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=$260$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=$261$;
	    m_transform=NULL;
	    name="Should_flexor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=$262$;
	    m_transform=NULL;
	    name="Should_flexor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=$263$;
	    m_transform=NULL;
	    name="Should_flexor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=$264$;
	    m_transform=NULL;
	    name="Should_flexor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=$265$;
	    m_transform=NULL;
	    name="Should_flexor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=$266$;
	    m_transform=NULL;
	    name="Should_flexor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=$267$;
	    m_transform=NULL;
	    name="Should_extensor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=$268$;
	    m_transform=NULL;
	    name="Should_extensor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    m_data=$269$;
	    m_transform=NULL;
	    name="Should_extensor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    m_data=$270$;
	    m_transform=NULL;
	    name="Should_extensor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    m_data=$271$;
	    m_transform=NULL;
	    name="Should_extensor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    m_data=$272$;
	    m_transform=NULL;
	    name="Should_extensor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    m_data=$273$;
	    m_transform=NULL;
	    name="should_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    m_data=$274$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    m_data=$275$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    m_data=$276$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    m_data=$277$;
	    m_transform=NULL;
	    name="elbow_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=1;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=10;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Hand_cur_pos_z";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=0.05162345: y=1.50916: z=2.097296: };
       camera_orient {x=-1.000001: y=0: z=0: rot=0.4103194: };
       camera_focdist=1.763533;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="FwdModelNet";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @[0] {
	  m_data=$39$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=52: y=10: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ VisTarget_Cur=0;VisHand_Cur=0;SomaShoulderAngle_Cur=0;SomaElbowAngle_Cur=0;MotorShoulderForce=0;MotorElbowForce=0;VisFwdHidden=0;SomaFwdHidden=0;VisHand_Pred=0;SomaShoulderAngle_Pred=0;SomaElbowAngle_Pred=0;	  };
	 };
	};
       };
       camera_pos {x=0.4875: y=0.662193: z=1.52499: };
       camera_orient {x=-1: y=0: z=0: rot=0.170966: };
       camera_focdist=1.93174;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="EpochOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$116$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[1][1].data[0]$278$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[1][1].data[1]$279$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[1][1].data[2]$280$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.444586: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].data.gp[1][1].data[3]$281$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=100: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].data.gp[1][1].data[4]$282$;
	    m_transform=NULL;
	    name="avg_trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].data.gp[1][1].data[5]$283$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].data.gp[1][1].data[6]$284$;
	    m_transform=NULL;
	    name="rew_dist_thr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].data.gp[1][1].data[7]$285$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].data.gp[1][1].data[8]$286$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].data.gp[1][1].data[9]$287$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].data.gp[1][1].data[10]$288$;
	    m_transform=NULL;
	    name="avg_pvi";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=500;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=10: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=10: };
	   range {min=0: max=10: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="avg_sse";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0.444586: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0.5636492: };
	   range {min=0: max=0.6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_ext_rew";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_pvi";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="rew_dist_thr";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_trg_dist";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.465: y=0.445: z=1.686163: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=2.196163;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[3] {
       m_data=NULL;
       name="RLNet";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @[0] {
	  m_data=$110$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=1;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=38: y=10: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.001;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ RewTarg=0;PVe=0;PVr=0;PVi=0;LVe=0;LVi=0;NV=0;DA=0;MotorElbowForce=0;MotorShoulderForce=0;RLHidden=0;SomaElbowAngle_Cur=0;SomaElbowAngle_Pred=0;SomaShoulderAngle_Cur=0;SomaShoulderAngle_Pred=0;VisHand_Cur=0;VisHand_Pred=0;VisTarget_Cur=0;	  };
	 };
	};
       };
       camera_pos {x=0.4989164: y=0.8137509: z=1.577247: };
       camera_orient {x=-1: y=0: z=0: rot=0.2393518: };
       camera_focdist=2.044936;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[4] {
       m_data=NULL;
       name="TrialOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$117$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[1][0].data[0]$289$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[1][0].data[1]$290$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[1][0].data[2]$291$;
	    m_transform=NULL;
	    name="trial";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].data.gp[1][0].data[3]$292$;
	    m_transform=NULL;
	    name="trial_name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].data.gp[1][0].data[4]$293$;
	    m_transform=NULL;
	    name="group_name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].data.gp[1][0].data[5]$294$;
	    m_transform=NULL;
	    name="phase_no";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].data.gp[1][0].data[6]$295$;
	    m_transform=NULL;
	    name="minus_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].data.gp[1][0].data[7]$296$;
	    m_transform=NULL;
	    name="sse";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].data.gp[1][0].data[8]$297$;
	    m_transform=NULL;
	    name="ext_rew";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].data.gp[1][0].data[9]$298$;
	    m_transform=NULL;
	    name="pvlv_pvi";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].data.gp[1][0].data[10]$299$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="trial";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=83: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=83: };
	   range {min=0: max=83: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=5: };
	   range {min=0: max=5: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="ext_rew";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="pvlv_pvi";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="trg_dist";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$248$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.528036: y=0.445: z=1.482394: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.972394;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_change_log=0;
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
    };
   };
   name="FwdModelNet";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$300$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: learn=0.01: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_2";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_4";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_4";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
     xcal_c {s_dt=0.2: m_dt=0.1: };
     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
    ScalarValLayerSpec @[4] {
     name="NormScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @[5] {
     name="ForceScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    TwoDValLayerSpec @[6] {
     name="VisTwoDVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="VisTarget_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.3,0.75";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [11 10] ;;;;;;;;;;;"-0.5,-0.5";"-0.3,-0.5";"-0.1,-0.5";"0.1,-0.5";"0.3,-0.5";"0.5,-0.5";"0.7,-0.5";"0.9,-0.5";"1.1,-0.5";"1.3,-0.5";"1.5,-0.5";"-0.5,-0.25";"-0.3,-0.25";"-0.1,-0.25";"0.1,-0.25";"0.3,-0.25";"0.5,-0.25";"0.7,-0.25";"0.9,-0.25";"1.1,-0.25";"1.3,-0.25";"1.5,-0.25";"-0.5,0";"-0.3,0";"-0.1,0";"0.1,0";"0.3,0";"0.5,0";"0.7,0";"0.9,0";"1.1,0";"1.3,0";"1.5,0";"-0.5,0.25";"-0.3,0.25";"-0.1,0.25";"0.1,0.25";"0.3,0.25";"0.5,0.25";"0.7,0.25";"0.9,0.25";"1.1,0.25";"1.3,0.25";"1.5,0.25";"-0.5,0.5";"-0.3,0.5";"-0.1,0.5";"0.1,0.5";"0.3,0.5";"0.5,0.5";"0.7,0.5";"0.9,0.5";"1.1,0.5";"1.3,0.5";"1.5,0.5";"-0.5,0.75";"-0.3,0.75";"-0.1,0.75";"0.1,0.75";"0.3,0.75";"0.5,0.75";"0.7,0.75";"0.9,0.75";"1.1,0.75";"1.3,0.75";"1.5,0.75";"-0.5,1";"-0.3,1";"-0.1,1";"0.1,1";"0.3,1";"0.5,1";"0.7,1";"0.9,1";"1.1,1";"1.3,1";"1.5,1";"-0.5,1.25";"-0.3,1.25";"-0.1,1.25";"0.1,1.25";"0.3,1.25";"0.5,1.25";"0.7,1.25";"0.9,1.25";"1.1,1.25";"1.3,1.25";"1.5,1.25";"-0.5,1.5";"-0.3,1.5";"-0.1,1.5";"0.1,1.5";"0.3,1.5";"0.5,1.5";"0.7,1.5";"0.9,1.5";"1.1,1.5";"1.3,1.5";"1.5,1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.04402543: max=0.95: max_i=70: };
     acts_m {cmpt=1: avg=0.04402543: max=0.95: max_i=70: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=.projects[0].networks[0].specs[6]$302$: };
     hard_clamped=0;
     ravg_l_avg=7.513472e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="VisHand_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=13: y=0: z=0: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5,1";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [11 10] ;;;;;;;;;;;"-0.5,-0.5";"-0.3,-0.5";"-0.1,-0.5";"0.1,-0.5";"0.3,-0.5";"0.5,-0.5";"0.7,-0.5";"0.9,-0.5";"1.1,-0.5";"1.3,-0.5";"1.5,-0.5";"-0.5,-0.25";"-0.3,-0.25";"-0.1,-0.25";"0.1,-0.25";"0.3,-0.25";"0.5,-0.25";"0.7,-0.25";"0.9,-0.25";"1.1,-0.25";"1.3,-0.25";"1.5,-0.25";"-0.5,0";"-0.3,0";"-0.1,0";"0.1,0";"0.3,0";"0.5,0";"0.7,0";"0.9,0";"1.1,0";"1.3,0";"1.5,0";"-0.5,0.25";"-0.3,0.25";"-0.1,0.25";"0.1,0.25";"0.3,0.25";"0.5,0.25";"0.7,0.25";"0.9,0.25";"1.1,0.25";"1.3,0.25";"1.5,0.25";"-0.5,0.5";"-0.3,0.5";"-0.1,0.5";"0.1,0.5";"0.3,0.5";"0.5,0.5";"0.7,0.5";"0.9,0.5";"1.1,0.5";"1.3,0.5";"1.5,0.5";"-0.5,0.75";"-0.3,0.75";"-0.1,0.75";"0.1,0.75";"0.3,0.75";"0.5,0.75";"0.7,0.75";"0.9,0.75";"1.1,0.75";"1.3,0.75";"1.5,0.75";"-0.5,1";"-0.3,1";"-0.1,1";"0.1,1";"0.3,1";"0.5,1";"0.7,1";"0.9,1";"1.1,1";"1.3,1";"1.5,1";"-0.5,1.25";"-0.3,1.25";"-0.1,1.25";"0.1,1.25";"0.3,1.25";"0.5,1.25";"0.7,1.25";"0.9,1.25";"1.1,1.25";"1.3,1.25";"1.5,1.25";"-0.5,1.5";"-0.3,1.5";"-0.1,1.5";"0.1,1.5";"0.3,1.5";"0.5,1.5";"0.7,1.5";"0.9,1.5";"1.1,1.5";"1.3,1.5";"1.5,1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.04535331: max=0.8093998: max_i=73: };
     acts_m {cmpt=1: avg=0.04535331: max=0.8093998: max_i=73: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$302$: };
     hard_clamped=0;
     ravg_l_avg=7.513472e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="SomaShoulderAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=0: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.7";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2145505: max=0.95: max_i=6: };
     acts_m {cmpt=1: avg=0.2145505: max=0.95: max_i=6: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=.projects[0].networks[0].specs[4]$303$: };
     hard_clamped=0;
     ravg_l_avg=2.237259e-21;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[3] {
     name="SomaElbowAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=3: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2087851: max=0.9348717: max_i=4: };
     acts_m {cmpt=1: avg=0.2087851: max=0.9348717: max_i=4: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$303$: };
     hard_clamped=0;
     ravg_l_avg=8.598187e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[4] {
     name="MotorShoulderForce";
     flags=;
     layer_type=INPUT;
     pos {x=40: y=0: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[7].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.9";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2149551: max=0.95: max_i=7: };
     acts_m {cmpt=1: avg=0.2149551: max=0.95: max_i=7: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$303$: };
     hard_clamped=0;
     ravg_l_avg=7.215596e-18;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[5] {
     name="MotorElbowForce";
     flags=;
     layer_type=INPUT;
     pos {x=40: y=3: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[2];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[7].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.9";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2149825: max=0.95: max_i=4: };
     acts_m {cmpt=1: avg=0.2149825: max=0.95: max_i=4: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$303$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[6] {
     name="VisFwdHidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=15: y=2: z=1: };
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$304$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[3]$306$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[4]$307$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[5]$308$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[8]$309$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[8].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=7: y=7: n_not_xy=0: n=49: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [7 7] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.1128842: max=0.9000936: max_i=26: };
     acts_m {cmpt=1: avg=0.1138886: max=0.8953648: max_i=26: };
     phase_dif_ratio=1.008897;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=7: pct=0.1428571: pct_c=0.8571429: adth_k=1: k_ithr=3.114638: k1_ithr=2.296104: ithr_r=0.3048993: ithr_diff=0.2628023: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1428571: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$310$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[7] {
     name="SomaFwdHidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=26: y=2: z=1: };
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[2]$311$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[3]$312$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=$307$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=$308$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_SomaShoulderAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[9]$313$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[5] {
       name="Fm_SomaElbowAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[10]$314$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[9].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[10].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=7: y=7: n_not_xy=0: n=49: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [7 7] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.1321326: max=0.7275203: max_i=3: };
     acts_m {cmpt=1: avg=0.1337615: max=0.766053: max_i=47: };
     phase_dif_ratio=1.012327;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=7: pct=0.1428571: pct_c=0.8571429: adth_k=1: k_ithr=3.185106: k1_ithr=2.839275: ithr_r=0.1149369: ithr_diff=0.1085776: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1428571: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$310$: };
     hard_clamped=0;
     ravg_l_avg=0.06578948;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[8] {
     name="VisHand_Pred";
     flags=;
     layer_type=TARGET;
     pos {x=12: y=0: z=2: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_VisFwdHidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[6]$315$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.3,0.25";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [11 10] ;;;;;;;;;;;"-0.5,-0.5";"-0.3,-0.5";"-0.1,-0.5";"0.1,-0.5";"0.3,-0.5";"0.5,-0.5";"0.7,-0.5";"0.9,-0.5";"1.1,-0.5";"1.3,-0.5";"1.5,-0.5";"-0.5,-0.25";"-0.3,-0.25";"-0.1,-0.25";"0.1,-0.25";"0.3,-0.25";"0.5,-0.25";"0.7,-0.25";"0.9,-0.25";"1.1,-0.25";"1.3,-0.25";"1.5,-0.25";"-0.5,0";"-0.3,0";"-0.1,0";"0.1,0";"0.3,0";"0.5,0";"0.7,0";"0.9,0";"1.1,0";"1.3,0";"1.5,0";"-0.5,0.25";"-0.3,0.25";"-0.1,0.25";"0.1,0.25";"0.3,0.25";"0.5,0.25";"0.7,0.25";"0.9,0.25";"1.1,0.25";"1.3,0.25";"1.5,0.25";"-0.5,0.5";"-0.3,0.5";"-0.1,0.5";"0.1,0.5";"0.3,0.5";"0.5,0.5";"0.7,0.5";"0.9,0.5";"1.1,0.5";"1.3,0.5";"1.5,0.5";"-0.5,0.75";"-0.3,0.75";"-0.1,0.75";"0.1,0.75";"0.3,0.75";"0.5,0.75";"0.7,0.75";"0.9,0.75";"1.1,0.75";"1.3,0.75";"1.5,0.75";"-0.5,1";"-0.3,1";"-0.1,1";"0.1,1";"0.3,1";"0.5,1";"0.7,1";"0.9,1";"1.1,1";"1.3,1";"1.5,1";"-0.5,1.25";"-0.3,1.25";"-0.1,1.25";"0.1,1.25";"0.3,1.25";"0.5,1.25";"0.7,1.25";"0.9,1.25";"1.1,1.25";"1.3,1.25";"1.5,1.25";"-0.5,1.5";"-0.3,1.5";"-0.1,1.5";"0.1,1.5";"0.3,1.5";"0.5,1.5";"0.7,1.5";"0.9,1.5";"1.1,1.5";"1.3,1.5";"1.5,1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.04582347: max=0.9318894: max_i=82: };
     acts_m {cmpt=1: avg=0.05677634: max=0.6074832: max_i=80: };
     phase_dif_ratio=1.239023;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0.8726317: k1_ithr=0.6567149: ithr_r=0.2842636: ithr_diff=0.2474318: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$302$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[9] {
     name="SomaShoulderAngle_Pred";
     flags=;
     layer_type=TARGET;
     pos {x=25: y=0: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaFwdHidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[7]$316$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[4];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.9";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2160855: max=0.95: max_i=7: };
     acts_m {cmpt=1: avg=0.3206348: max=0.7615786: max_i=7: };
     phase_dif_ratio=1.483833;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.40055: k1_ithr=1.7375: ithr_r=0.3232506: ithr_diff=0.2762075: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$303$: };
     hard_clamped=0;
     ravg_l_avg=1.0901e-17;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[10] {
     name="SomaElbowAngle_Pred";
     flags=;
     layer_type=TARGET;
     pos {x=25: y=3: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaFwdHidden";
       from_type=CUSTOM;
       from=$316$;
       spec {type=FullPrjnSpec: spec=$305$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$306$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[5];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$301$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.7";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2143648: max=0.95: max_i=4: };
     acts_m {cmpt=1: avg=0.2089386: max=0.8931341: max_i=4: };
     phase_dif_ratio=0.9746873;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.251969: k1_ithr=1.657264: ithr_r=0.3066365: ithr_diff=0.2640819: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$303$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="TimeUsed_8": start={usr=73696: sys=8235: tot=3610943480: }: end={usr=33965: sys=4126: tot=3554750557: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="TimeUsed_9": start={usr=92470: sys=9158: tot=3610963218: }: end={usr=92469: sys=9158: tot=3610963216: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="TimeUsed_11": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="TimeUsed_12": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="TimeUsed_13": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="TimeUsed_14": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="TimeUsed_15": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    log_timing=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=500;
   n_cons=22050;
   max_size {x=52: y=10: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=2;
   ct_cycle=32;
   time_inc=1;
   cycle_max=60;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=5;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=0;
    m_nrm=0;
    do_s=0;
   };
   minus_cycles=0;
   avg_cycles=0;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=0;
   avg_send_pct=0;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
  LeabraNetwork @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
    };
   };
   name="RLNet";
   desc="Model that learns from reinforcement learning (PVLV)";
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @[0] {
       name="MotorUnits";
       desc=;
       unique{        };
       children {
	name=;
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=LeabraCon;
       bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[1].specs[3].children[0]$317$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=NO_AH: };
       spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
       depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
       syn_delay {
	on=0;
	delay=4;
       };
       opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
       dt {vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
       g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
       da_mod {on=1: mod=PLUS_CONT: gain=1: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       noise_type=NETIN_NOISE;
       noise {name="": type=GAUSSIAN: mean=0: var=0.01: par=1: };
       noise_adapt {trial_fixed=1: mode=PVLV_PVI: min_pct=0.5: min_pct_c=0.5: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=1;
	cur_val=0;
       };
      };
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=$317$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=NO_AH: };
     spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     da_mod {on=1: mod=PLUS_CONT: gain=1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NETIN_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.01: par=1: };
     noise_adapt {trial_fixed=1: mode=PVLV_PVI: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_2";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_4";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_4";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=CTLEABRA_XCAL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.02;
       cur_lrate=0.02;
       lrs_value=EXT_REW_STAT;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=0;
	default_val=1;
	interpolate=0;
	cur_val=1;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=70;
	 step=-0.01285714;
	};
	SchedItem @[1] {
	 start_ctr=70;
	 start_val=0.1;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=CTLEABRA_XCAL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.02;
     cur_lrate=0.02;
     lrs_value=EXT_REW_STAT;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=0;
      default_val=1;
      interpolate=0;
      cur_val=1;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=70;
       step=-0.01285714;
      };
      SchedItem @[1] {
       start_ctr=70;
       start_val=0.1;
       duration=1;
       step=1;
      };
     };
     wt_sig {gain=6: off=1: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
     xcal_c {s_dt=0.2: m_dt=0.1: };
     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
    ScalarValLayerSpec @[4] {
     name="NormScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @[5] {
     name="ForceScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.8;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=0: max=1: range=1: scale=1: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=0: max=1: range=1: scale=1: };
    };
    TwoDValLayerSpec @[6] {
     name="VisTwoDVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    BaseSpec_Group @.gp[0] {
     name="PFC_BG_Units";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @[0] {
      name="PVUnits";
      desc=;
      unique{ g_bar;act;act_fun;dt;opt_thresh;      };
      children {
       name=;
       el_typ=LeabraUnitSpec;
       el_def=0;
       LeabraUnitSpec @[0] {
	name="LVUnits";
	desc=;
	unique{ 	};
	children {
	 name=;
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_con_type=LeabraCon;
	bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[1].specs.gp[1][0].children[1]$318$: };
	sse_tol=0.5;
	act_fun=NOISY_LINEAR;
	act {thr=0.17: gain=220: nvar=0.01: avg_dt=0: avg_init=0.15: i_thr=STD: };
	spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
	depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
	syn_delay {
	 on=0;
	 delay=4;
	};
	opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=1: range=1: scale=1: };
	v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
	dt {vm=0.05: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: };
	g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
	e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
	hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
	acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
	da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
	maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
	noise_type=NO_NOISE;
	noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
	noise_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=1;
	 cur_val=0;
	};
       };
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=$318$: };
      sse_tol=0.5;
      act_fun=NOISY_LINEAR;
      act {thr=0.17: gain=220: nvar=0.01: avg_dt=0: avg_init=0.15: i_thr=STD: };
      spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
      depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
      syn_delay {
       on=0;
       delay=4;
      };
      opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.05: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
     };
     LeabraUnitSpec @[1] {
      name="DaUnits";
      desc=;
      unique{ act_range;clamp_range;act;      };
      children {
       name=;
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=-2: max=2: range=4: scale=0.25: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[1].specs.gp[1][0].children[1].children[0]$319$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.25: gain=600: nvar=0.005: avg_dt=0: avg_init=0.15: i_thr=STD: };
      spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
      depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
      syn_delay {
       on=0;
       delay=4;
      };
      opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
      clamp_range {min=-2: max=2: range=4: scale=0.25: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
     };
    };
    BaseSpec_Group @.gp[1] {
     name="PFC_BG_Cons";
     el_typ=LeabraConSpec;
     el_def=0;
     LeabraConSpec @[0] {
      name="LearnCons";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=PVConSpec;
       el_def=0;
       PVConSpec @[0] {
	name="PVi";
	desc=;
	unique{ lmix;rnd;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	};
	children {
	 name=;
	 el_typ=PVrConSpec;
	 el_def=0;
	 PVrConSpec @[0] {
	  name="PVr";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVrConSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  wt_sig {gain=1: off=1: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  wt_dec_mult=0.01;
	 };
	 PVConSpec @[1] {
	  name="LVe";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	   PVConSpec @[0] {
	    name="LVi";
	    desc=;
	    unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	    };
	    children {
	     name=;
	     el_typ=PVConSpec;
	     el_def=0;
	    };
	    rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	    learn_rule=CTLEABRA_XCAL;
	    inhib=0;
	    wt_scale {abs=1: rel=1: };
	    wt_scale_init {init=0: abs=1: rel=1: };
	    lrate=0.001;
	    cur_lrate=0.001;
	    lrs_value=NO_LRS;
	    lrate_sched {
	     name=;
	     el_typ=SchedItem;
	     el_def=0;
	     last_ctr=-1;
	     default_val=1;
	     interpolate=0;
	     cur_val=0;
	    };
	    wt_sig {gain=1: off=1: };
	    lmix {hebb=0: err=1: err_sb=0: };
	    xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	    xcal_c {s_dt=0.2: m_dt=0.1: };
	    xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	    savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	    rel_net_adapt {
	     on=0;
	     trg_fm_input=0.85;
	     trg_fm_output=0.15;
	     trg_lateral=0;
	     trg_sum=1;
	     tol_lg=0.05;
	     tol_sm=0.2;
	     rel_lrate=0.2;
	    };
	   };
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0.05;
	  cur_lrate=0.05;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  wt_sig {gain=1: off=1: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	 };
	 PVConSpec @[2] {
	  name="NV";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0.0005;
	  cur_lrate=0.0005;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  wt_sig {gain=1: off=1: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	 };
	};
	rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=NO_LRS;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=0;
	 cur_val=0;
	};
	wt_sig {gain=1: off=1: };
	lmix {hebb=0: err=1: err_sb=0: };
	xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	xcal_c {s_dt=0.2: m_dt=0.1: };
	xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraBiasSpec @[1] {
	name="BgBias";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	};
	children {
	 name=;
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	 LeabraBiasSpec @[0] {
	  name="FixedBias";
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	  };
	  children {
	   name=;
	   el_typ=LeabraBiasSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0;
	  cur_lrate=0;
	  lrs_value=EPOCH;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=1;
	  };
	  wt_sig {gain=6: off=1: };
	  lmix {hebb=0.001: err=0.999: err_sb=1: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  dwt_thresh=0.1;
	 };
	};
	rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=0;
	 cur_val=1;
	};
	wt_sig {gain=6: off=1: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	xcal_c {s_dt=0.2: m_dt=0.1: };
	xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
      };
      rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: };
      wt_scale_init {init=0: abs=1: rel=1: };
      lrate=0.02;
      cur_lrate=0.01;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=0;
       cur_val=0;
      };
      wt_sig {gain=6: off=1: };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
      xcal_c {s_dt=0.2: m_dt=0.1: };
      xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     MarkerConSpec @[1] {
      name="MarkerCons";
      desc=;
      unique{ rnd;wt_limits;wt_scale;lrate;      };
      children {
       name=;
       el_typ=MarkerConSpec;
       el_def=0;
      };
      rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=0: };
      wt_scale_init {init=0: abs=1: rel=1: };
      lrate=0;
      cur_lrate=0;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=0;
       cur_val=1;
      };
      wt_sig {gain=6: off=1: };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
      xcal_c {s_dt=0.2: m_dt=0.1: };
      xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
    };
    BaseSpec_Group @.gp[2] {
     name="PFC_BG_Layers";
     el_typ=ExtRewLayerSpec;
     el_def=0;
     ExtRewLayerSpec @[0] {
      name="PVeLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=ExtRewLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
      val_range {min=0: max=1: range=1: scale=1: };
      rew_type=EXT_REW;
      avg_rew {sub_avg=0: avg_dt=0.005: };
      out_err {err_tol=0.5: graded=0: no_off_err=0: scalar_val_max=1: };
      rew {err_val=0: norew_val=0.5: rew_val=1: };
     };
     PVrLayerSpec @[1] {
      name="PVrLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PVrLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv_detect {thr_min=0.2: thr_max=0.8: };
     };
     PViLayerSpec @[2] {
      name="PViLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PViLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv {min_pvi=0.4: prior_discount=1: er_reset_prior=1: };
     };
     LVeLayerSpec @[3] {
      name="LVeLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=LViLayerSpec;
       el_def=0;
       LViLayerSpec @[0] {
	name="LViLayer";
	desc=;
	unique{ ct_inhib_mod;inhib_group;inhib;decay;ct_inhib_mod;	};
	children {
	 name=;
	 el_typ=LViLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 min_i=0;
	 comp_thr=0.5;
	 comp_gain=2;
	 gp_pt=0.2;
	};
	kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	clamp {hard=1: gain=0.2: };
	decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
	ct_inhib_mod {
	 use_sin=1;
	 burst_i=0;
	 trough_i=0;
	 use_fin=0;
	 inhib_i=0;
	};
	net_rescale {on=0: max_net=0.6: net_extra=0.2: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
	unit_range {min=0: max=1: range=1: scale=1: };
	bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
	val_range {min=0: max=1: range=1: scale=1: };
	lv {min_lvi=0.1: prior_discount=1: er_reset_prior=1: };
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      lv {min_lvi=0.1: prior_discount=1: er_reset_prior=1: };
     };
     NVLayerSpec @[4] {
      name="NVLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=NVLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=1: };
      val_range {min=0: max=1: range=1: scale=1: };
      nv {
       da_gain=1;
       val_thr=0.1;
       prior_discount=1;
       er_reset_prior=1;
      };
     };
     PVLVDaLayerSpec @[5] {
      name="DALayer";
      desc=;
      unique{ decay;kwta;inhib_group;inhib;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PVLVDaLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_INHIB;
       kwta_pt=0.25;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      da {da_gain=1: tonic_da=0: };
     };
    };
    BaseSpec_Group @.gp[3] {
     name="PFC_BG_Prjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjn";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
     };
     OneToOnePrjnSpec @[1] {
      name="OneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="RewTarg";
     flags=;
     layer_type=INPUT;
     pos {x=12: y=4: z=0: };
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.0622335: max=0.0622335: max_i=0: };
     i_thrs {cmpt=1: avg=-0.1: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0.9899507: max=0.9899507: max_i=0: };
     acts_p {cmpt=1: avg=0.9894638: max=0.9894638: max_i=0: };
     acts_m {cmpt=1: avg=0.9899507: max=0.9899507: max_i=0: };
     phase_dif_ratio=0.9976009;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=1: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.0001313686;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[1].specs[1]$320$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="PVe";
     flags=;
     layer_type=TARGET;
     pos {x=0: y=0: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_RewTarg";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[0]$321$;
       spec {type=OneToOnePrjnSpec: spec=.projects[0].networks[1].specs.gp[3][1]$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=.projects[0].networks[1].specs.gp[1][1]$323$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=$157$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=$158$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_SomaElbowAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[12]$324$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_SomaShoulderAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[14]$325$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[5] {
       name="Fm_VisHand_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[16]$326$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[2].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[3].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs.gp[0][0]$327$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5";
     sse=0.25;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
     acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=3: };
     acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.9: gp_g_i=0: g_i_orig=0.9: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ExtRewLayerSpec: spec=$27$: };
     hard_clamped=1;
     ravg_l_avg=0.02325581;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0.5;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="PVr";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=4: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVe";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[1]$328$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[11]$329$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[1].specs.gp[3][0]$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$22$: };
       recv_idx=1;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[13]$331$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$22$: };
       recv_idx=2;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[15]$332$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$22$: };
       recv_idx=3;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[17]$333$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$22$: };
       recv_idx=4;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[4].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[5].projections[0];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[7].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$327$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.3563492: max=0.6896552: max_i=3: };
     i_thrs {cmpt=1: avg=15.02475: max=28.5207: max_i=3: };
     acts {cmpt=1: avg=0.3775765: max=0.7753778: max_i=3: };
     acts_p {cmpt=1: avg=0.3879848: max=0.7743227: max_i=3: };
     acts_m {cmpt=1: avg=0.3775765: max=0.7753778: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=28.5207: k1_ithr=10.5261: ithr_r=0.9967727: ithr_diff=0.6309314: tie_brk=0: };
     i_val {kwta=26.72124: g_i=26.72124: gp_g_i=0: g_i_orig=26.72124: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=PVrLayerSpec: spec=$30$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[3] {
     name="PVi";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=2: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVe";
       from_type=CUSTOM;
       from=$328$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$329$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$23$: };
       recv_idx=1;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$331$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$23$: };
       recv_idx=2;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$332$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$23$: };
       recv_idx=3;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$333$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$23$: };
       recv_idx=4;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$327$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.02460888: max=0.07012516: max_i=3: };
     i_thrs {cmpt=1: avg=1.257519: max=2.810195: max_i=3: };
     acts {cmpt=1: avg=0.220386: max=0.7991241: max_i=3: };
     acts_p {cmpt=1: avg=0.2400723: max=0.7778344: max_i=3: };
     acts_m {cmpt=1: avg=0.220386: max=0.7991241: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.810195: k1_ithr=0.7399604: ithr_r=1.334412: ithr_diff=0.7366871: tie_brk=0: };
     i_val {kwta=2.603171: g_i=2.603171: gp_g_i=0: g_i_orig=2.603171: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=PViLayerSpec: spec=$28$: };
     hard_clamped=0;
     ravg_l_avg=0.2543678;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[4] {
     name="LVe";
     flags=;
     layer_type=HIDDEN;
     pos {x=6: y=0: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[2]$334$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$329$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=1;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$331$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=2;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$332$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=3;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$333$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=4;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs.gp[0][0].children[0]$335$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.03134733: max=0.07887957: max_i=3: };
     i_thrs {cmpt=1: avg=1.537165: max=3.173503: max_i=3: };
     acts {cmpt=1: avg=0.2352487: max=0.7861787: max_i=3: };
     acts_p {cmpt=1: avg=0.2447777: max=0.7783322: max_i=3: };
     acts_m {cmpt=1: avg=0.2352487: max=0.7861787: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=3.173503: k1_ithr=0.9917187: ithr_r=1.163152: ithr_diff=0.6875003: tie_brk=0: };
     i_val {kwta=2.955324: g_i=2.955324: gp_g_i=0: g_i_orig=2.955324: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LVeLayerSpec: spec=$29$: };
     hard_clamped=0;
     ravg_l_avg=2.869696e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[5] {
     name="LVi";
     flags=;
     layer_type=HIDDEN;
     pos {x=6: y=2: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=$334$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$329$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$331$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=2;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$332$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=3;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$333$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=4;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$335$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.01311146: max=0.02966599: max_i=3: };
     i_thrs {cmpt=1: avg=0.7803757: max=1.145: max_i=2: };
     acts {cmpt=1: avg=0.4167064: max=0.7117084: max_i=2: };
     acts_p {cmpt=1: avg=0.2868935: max=0.7453664: max_i=3: };
     acts_m {cmpt=1: avg=0.4167064: max=0.7117084: max_i=2: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.145: k1_ithr=0.6588342: ithr_r=0.5526881: ithr_diff=0.4245991: tie_brk=0: };
     i_val {kwta=1.096383: g_i=1.096383: gp_g_i=0: g_i_orig=1.096383: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LViLayerSpec: spec=.projects[0].networks[1].specs.gp[2][3].children[0]$336$: };
     hard_clamped=0;
     ravg_l_avg=0.15;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[6] {
     name="NV";
     flags=;
     layer_type=HIDDEN;
     pos {x=6: y=4: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$329$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$331$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$332$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$333$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=3;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[4];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$327$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.1370361: max=0.4995306: max_i=1: };
     i_thrs {cmpt=1: avg=5.923249: max=20.63053: max_i=1: };
     acts {cmpt=1: avg=0.2185541: max=0.8692376: max_i=1: };
     acts_p {cmpt=1: avg=0.2197323: max=0.8751341: max_i=1: };
     acts_m {cmpt=1: avg=0.2185541: max=0.8692376: max_i=1: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=20.63053: k1_ithr=1.020824: ithr_r=3.006162: ithr_diff=0.9505187: tie_brk=0: };
     i_val {kwta=18.66956: g_i=18.66956: gp_g_i=0: g_i_orig=18.66956: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=NVLayerSpec: spec=$31$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[7] {
     name="DA";
     flags=;
     layer_type=HIDDEN;
     pos {x=12: y=0: z=0: };
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVi";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[3]$337$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_LVe";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[4]$338$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_LVi";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[5]$339$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=$334$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_NV";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[6]$340$;
       spec {type=OneToOnePrjnSpec: spec=$322$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[8].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[9].projections[1];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[10].projections[6];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs.gp[0][1]$341$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0.16396: max=0.16396: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=0;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=1: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=PVLVDaLayerSpec: spec=$32$: };
     hard_clamped=0;
     ravg_l_avg=0.015;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[8] {
     name="MotorElbowForce";
     flags=;
     layer_type=OUTPUT;
     pos {x=26: y=9: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_RLHidden";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[10]$342$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[1].specs[2]$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[1].specs[3]$344$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[7]$345$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[5];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs[0].children[0]$346$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";"0.9";"1";     };
     netin {cmpt=1: avg=0.1881711: max=0.3318761: max_i=6: };
     i_thrs {cmpt=1: avg=1.335971: max=2.395676: max_i=6: };
     acts {cmpt=1: avg=0.07223119: max=0.8667743: max_i=6: };
     acts_p {cmpt=1: avg=0.07010668: max=0.8412801: max_i=9: };
     acts_m {cmpt=1: avg=0.07223119: max=0.8667743: max_i=6: };
     phase_dif_ratio=0.9928311;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=2.395676: k1_ithr=1.239634: ithr_r=0.6588495: ithr_diff=0.4825537: tie_brk=0: };
     i_val {kwta=2.164468: g_i=2.164468: gp_g_i=0: g_i_orig=2.164468: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08333334: i_kwta_pt=0.8: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$9$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[9] {
     name="MotorShoulderForce";
     flags=;
     layer_type=OUTPUT;
     pos {x=26: y=6: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_RLHidden";
       from_type=CUSTOM;
       from=$342$;
       spec {type=FullPrjnSpec: spec=$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$344$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$345$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[4];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[1].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$346$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.4";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";"0.9";"1";     };
     netin {cmpt=1: avg=0.1841688: max=0.3432924: max_i=5: };
     i_thrs {cmpt=1: avg=1.305578: max=2.493781: max_i=5: };
     acts {cmpt=1: avg=0.06904875: max=0.828585: max_i=5: };
     acts_p {cmpt=1: avg=0.07337598: max=0.8805118: max_i=1: };
     acts_m {cmpt=1: avg=0.06904875: max=0.828585: max_i=5: };
     phase_dif_ratio=0.9962981;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=2.493781: k1_ithr=1.19756: ithr_r=0.7335144: ithr_diff=0.5197816: tie_brk=0: };
     i_val {kwta=2.234537: g_i=2.234537: gp_g_i=0: g_i_orig=2.234537: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08333334: i_kwta_pt=0.8: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$9$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[10] {
     name="RLHidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=8: y=0: z=1: };
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$333$;
       spec {type=FullPrjnSpec: spec=$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$344$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$332$;
       spec {type=FullPrjnSpec: spec=$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$344$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$331$;
       spec {type=FullPrjnSpec: spec=$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$344$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$329$;
       spec {type=FullPrjnSpec: spec=$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$344$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=$158$;
       spec {type=FullPrjnSpec: spec=$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$344$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[5] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=$157$;
       spec {type=FullPrjnSpec: spec=$343$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$344$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[6] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$345$;
       spec {type=FullPrjnSpec: spec=$330$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$323$: };
       recv_idx=6;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[9].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[8].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=7: y=7: n_not_xy=0: n=49: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.167589: max=0.2508491: max_i=42: };
     i_thrs {cmpt=1: avg=1.162901: max=1.78858: max_i=42: };
     acts {cmpt=1: avg=0.1097919: max=0.9331158: max_i=42: };
     acts_p {cmpt=1: avg=0.1081859: max=0.9433072: max_i=9: };
     acts_m {cmpt=1: avg=0.1097919: max=0.9331158: max_i=42: };
     phase_dif_ratio=0.9925425;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=7: pct=0.1428571: pct_c=0.8571429: adth_k=1: k_ithr=1.604091: k1_ithr=1.089369: ithr_r=0.3869583: ithr_diff=0.3208806: tie_brk=0: };
     i_val {kwta=1.398202: g_i=1.398202: gp_g_i=0: g_i_orig=1.398202: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1428571: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=3.166497e-08;
     spec {type=LeabraLayerSpec: spec=$320$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[11] {
     name="SomaElbowAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=3: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[3];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[1];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[1];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[1];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[1];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.9";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.2099024: max=0.9232931: max_i=8: };
     acts_p {cmpt=1: avg=0.2149342: max=0.95: max_i=8: };
     acts_m {cmpt=1: avg=0.2099024: max=0.9232931: max_i=8: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=.projects[0].networks[1].specs[4]$347$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[12] {
     name="SomaElbowAngle_Pred";
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=6: z=1: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.2353046: max=0.3001999: max_i=4: };
     i_thrs {cmpt=1: avg=1.699318: max=2.178182: max_i=4: };
     acts {cmpt=1: avg=0.2105052: max=0.9129162: max_i=4: };
     acts_p {cmpt=1: avg=0.2105052: max=0.9129162: max_i=4: };
     acts_m {cmpt=1: avg=0.2270163: max=0.8653816: max_i=4: };
     phase_dif_ratio=1.078436;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.088846: k1_ithr=1.569475: ithr_r=0.285871: ithr_diff=0.2486405: tie_brk=0: };
     i_val {kwta=1.881098: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$347$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[13] {
     name="SomaShoulderAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=0: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[2];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[2];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[2];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[2];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[2];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.210421: max=0.9147463: max_i=4: };
     acts_p {cmpt=1: avg=0.2162307: max=0.95: max_i=5: };
     acts_m {cmpt=1: avg=0.210421: max=0.9147463: max_i=4: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$347$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[14] {
     name="SomaShoulderAngle_Pred";
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=9: z=1: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[4];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.2362774: max=0.304078: max_i=5: };
     i_thrs {cmpt=1: avg=1.705543: max=2.20583: max_i=5: };
     acts {cmpt=1: avg=0.2150649: max=0.948966: max_i=4: };
     acts_p {cmpt=1: avg=0.2150649: max=0.948966: max_i=4: };
     acts_m {cmpt=1: avg=0.224658: max=0.8710293: max_i=5: };
     phase_dif_ratio=1.044605;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.113612: k1_ithr=1.569521: ithr_r=0.2976281: ithr_diff=0.2574225: tie_brk=0: };
     i_val {kwta=1.895975: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$347$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[15] {
     name="VisHand_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=13: y=0: z=2: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[3];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[3];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[3];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[3];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.3,0.75";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.04408704: max=0.95: max_i=61: };
     acts_p {cmpt=1: avg=0.04873128: max=0.8505972: max_i=60: };
     acts_m {cmpt=1: avg=0.04408704: max=0.95: max_i=61: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=.projects[0].networks[1].specs[6]$348$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[16] {
     name="VisHand_Pred";
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=20: y=6: z=1: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[5];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.9,0.25";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.1106858: max=0.1428737: max_i=51: };
     i_thrs {cmpt=1: avg=0.7798139: max=1.02634: max_i=51: };
     acts {cmpt=1: avg=0.04698165: max=0.9139487: max_i=51: };
     acts_p {cmpt=1: avg=0.04698165: max=0.9139487: max_i=51: };
     acts_m {cmpt=1: avg=0.05990579: max=0.7300268: max_i=51: };
     phase_dif_ratio=1.275089;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0.9875029: k1_ithr=0.761307: ithr_r=0.2601427: ithr_diff=0.2290585: tie_brk=0: };
     i_val {kwta=0.8970246: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$348$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[17] {
     name="VisTarget_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=2: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[4];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[4];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[4];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[4];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$2$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5,0.5";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.04406118: max=0.95: max_i=82: };
     acts_p {cmpt=1: avg=0.04696263: max=0.9231071: max_i=50: };
     acts_m {cmpt=1: avg=0.04406118: max=0.95: max_i=82: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$348$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TEST;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=500;
   group=0;
   trial=18;
   tick=0;
   cycle=0;
   time=1310;
   group_name=;
   trial_name=;
   output_name="0.5_0.5_0.4";
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0.25;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=5.423143;
   avg_sse_n=19;
   cur_cnt_err=19;
   train_time {name="": start={usr=92991: sys=9202: tot=3610966128: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="": start={usr=446: sys=66: tot=3641539471: }: end={usr=95309: sys=9375: tot=3610968639: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    log_timing=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=477;
   n_cons=19303;
   max_size {x=38: y=10: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   learn_rule=CTLEABRA_XCAL;
   phase_order=MINUS_PLUS;
   no_plus_test=0;
   sequence_init=DO_NOTHING;
   phase=PLUS_PHASE;
   nothing_phase=0;
   phase_no=1;
   phase_max=2;
   ct_cycle=50;
   time_inc=1;
   cycle_max=50;
   min_cycles=0;
   min_cycles_phase2=0;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=5;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=4;
    m_nrm=0;
    do_s=0;
   };
   minus_cycles=50;
   avg_cycles=0;
   avg_cycles_sum=950;
   avg_cycles_n=19;
   minus_output_name="0.5_0.5_0.4";
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=307;
   avg_send_pct=0;
   avg_send_pct_sum=18.02935;
   avg_send_pct_n=1310;
   maxda_stopcrit=-1;
   maxda=0.0001313686;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=-1.1;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0.9319055;
   pvlv_lve=0.8521757;
   pvlv_lvi=0.6247272;
   pv_detected=0;
   avg_ext_rew_sum=18;
   avg_ext_rew_n=18;
   off_errs=1;
   on_errs=1;
   norm_err=0.25;
   avg_norm_err=1;
   avg_norm_err_sum=5.329859;
   avg_norm_err_n=19;
  };
 };
};

// ta_Dump File v2.0
LeabraProject .projects[0] { 
  Doc_Group @.docs = [2] {
    taDoc @[0] { };
    taDoc @[1] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [11] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
	LayerWizEl @[3] { };
	LayerWizEl @[4] { };
	LayerWizEl @[5] { };
	LayerWizEl @[6] { };
	LayerWizEl @[7] { };
	LayerWizEl @[8] { };
	LayerWizEl @[9] { };
	LayerWizEl @[10] { };
      };
    };
  };

  SelectEdit_Group @.edits = [3] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [7] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem_Group @.gp[0] = [7] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	  EditMbrItem @[6] { };
	};
      };

      EditMthItem_Group @.mths = [8] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
	EditMthItem @[6] { };
	EditMthItem @[7] { };
      };
    };
    SelectEdit @[1] { 
      EditMbrItem_Group @.mbrs = [0] {
	EditMbrItem_Group @.gp[0] = [6] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	};
	EditMbrItem_Group @.gp[1] { };
	EditMbrItem_Group @.gp[2] { };
	EditMbrItem_Group @.gp[3] { };
	EditMbrItem_Group @.gp[4] = [0] { 
	  EditMbrItem_Group @.gp[0] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	  EditMbrItem_Group @.gp[1] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	  EditMbrItem_Group @.gp[2] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	};
      };

      EditMthItem_Group @.mths = [3] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
      };
    };
    SelectEdit @[2] { 
      EditMbrItem_Group @.mbrs = [11] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [10] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [7] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  double_Data @[10] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  double_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  double_Data @[10] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  double_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	};
      };
    };
    DataTable_Group @.gp[2] { };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [1] {
    Program @[0] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [8] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
      };

      ProgEl_List @.prog_code = [30] {
	IfReturn @[0] { };
	Comment @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	RegisterArgs @[4] { };
	Comment @[5] { };
	PrintExpr @[6] { };
	MethodCall @[7] { };
	MiscCall @[8] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MiscCall @[9] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	ProgVarFmArg @[10] { };
	ProgVarFmArg @[11] { };
	Comment @[12] { };
	ProgVarFmArg @[13] { };
	ProgVarFmArg @[14] { };
	ProgVarFmArg @[15] { };
	ProgVarFmArg @[16] { };
	MemberFmArg @[17] { };
	MemberFmArg @[18] { };
	MemberFmArg @[19] { };
	Comment @[20] { };
	MethodCall @[21] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MiscCall @[22] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[23] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[24] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[25] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[26] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	OtherProgramVar @[27] { };
	PrintExpr @[28] { };
	ProgramCall @[29] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program_Group @.gp[0] = [7] { 
      Program @[0] { 
	ProgObjList @.objs = [7] {
	  VEWorld @[0] { 
	    VEObject_Group @.objects = [2] {
	      VEObject @[0] { 
		VEBody_Group @.bodies = [9] {
		  VEBody @[0] { };
		  VEBody @[1] { };
		  VEBody @[2] { };
		  VEBody @[3] { };
		  VEBody @[4] { };
		  VECamera @[5] { };
		  VECamera @[6] { };
		  VEBody @[7] { };
		  VEBody @[8] { };
		};

		VEJoint_Group @.joints = [5] {
		  VEMuscleJoint @[0] { };
		  VEMuscleJoint @[1] { };
		  VEJoint @[2] { };
		  VEJoint @[3] { };
		  VEJoint @[4] { };
		};
	      };
	      VEObject @[1] { 
		VEBody_Group @.bodies = [1] {
		  VEBody @[0] { };
		};
	      };
	    };

	    VESpace_Group @.spaces = [1] {
	      VESpace @[0] { 
		VEStatic_Group @.static_els = [2] {
		  VEStatic @[0] { };
		  VEStatic @[1] { };
		};
	      };
	    };
	  };
	  DataTable @[1] { 
	    DataTableCols @.data = [20] {
	      String_Data @[0] { };
	      float_Data @[1] { };
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	      float_Data @[5] { };
	      float_Data @[6] { };
	      float_Data @[7] { };
	      float_Data @[8] { };
	      float_Data @[9] { };
	      float_Data @[10] { };
	      float_Data @[11] { };
	      float_Data @[12] { };
	      float_Data @[13] { };
	      float_Data @[14] { };
	      float_Data @[15] { };
	      float_Data @[16] { };
	      float_Data @[17] { };
	      float_Data @[18] { };
	      float_Data @[19] { };
	    };
	  };
	  DataTable @[2] { 
	    DataTableCols @.data = [29] {
	      float_Data @[0] { };
	      float_Data @[1] { };
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	      float_Data @[5] { };
	      float_Data @[6] { };
	      float_Data @[7] { };
	      float_Data @[8] { };
	      float_Data @[9] { };
	      float_Data @[10] { };
	      float_Data @[11] { };
	      float_Data @[12] { };
	      float_Data @[13] { };
	      float_Data @[14] { };
	      float_Data @[15] { };
	      float_Data @[16] { };
	      float_Data @[17] { };
	      float_Data @[18] { };
	      float_Data @[19] { };
	      float_Data @[20] { };
	      float_Data @[21] { };
	      float_Data @[22] { };
	      float_Data @[23] { };
	      float_Data @[24] { };
	      float_Data @[25] { };
	      float_Data @[26] { };
	      float_Data @[27] { };
	      float_Data @[28] { };
	    };
	  };
	  NetMonitor @[3] { 
	    NetMonItem_List @.items = [20] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	      NetMonItem @[16] { };
	      NetMonItem @[17] { };
	      NetMonItem @[18] { };
	      NetMonItem @[19] { };
	    };
	  };
	  NetMonitor @[4] { 
	    NetMonItem_List @.items = [29] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	      NetMonItem @[16] { };
	      NetMonItem @[17] { };
	      NetMonItem @[18] { };
	      NetMonItem @[19] { };
	      NetMonItem @[20] { };
	      NetMonItem @[21] { };
	      NetMonItem @[22] { };
	      NetMonItem @[23] { };
	      NetMonItem @[24] { };
	      NetMonItem @[25] { };
	      NetMonItem @[26] { };
	      NetMonItem @[27] { };
	      NetMonItem @[28] { };
	    };
	  };
	  taImage @[5] { };
	  taImage @[6] { };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [43] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	  ProgVar @[20] { };
	  ProgVar @[21] { };
	  ProgVar @[22] { };
	  ProgVar @[23] { };
	  ProgVar @[24] { };
	  ProgVar @[25] { };
	  ProgVar @[26] { };
	  ProgVar @[27] { };
	  ProgVar @[28] { };
	  ProgVar @[29] { };
	  ProgVar @[30] { };
	  ProgVar @[31] { };
	  ProgVar @[32] { };
	  ProgVar @[33] { };
	  ProgVar @[34] { };
	  ProgVar @[35] { };
	  ProgVar @[36] { };
	  ProgVar @[37] { };
	  ProgVar @[38] { };
	  ProgVar @[39] { };
	  ProgVar @[40] { };
	  ProgVar @[41] { };
	  ProgVar @[42] { };
	};

	ProgEl_List @.init_code = [14] {
	  MethodCall @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  ResetDataRows @[3] { };
	  ResetDataRows @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  AssignExpr @[9] { };
	  AssignExpr @[10] { };
	  AssignExpr @[11] { };
	  AssignExpr @[12] { };
	  AssignExpr @[13] { };
	};

	ProgEl_List @.prog_code = [31] {
	  If @[0] { 
	    ProgEl_List @.true_code = [3] {
	      Comment @[0] { };
	      RandomCall @[1] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      RandomCall @[2] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  Comment @[1] { };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  ResetDataRows @[6] { };
	  ForLoop @[7] { 
	    ProgEl_List @.loop_code = [5] {
	      If @[0] { 
		ProgEl_List @.true_code = [4] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };

		    ProgEl_List @.false_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };
		  };
		  IfElse @[1] { 
		    ProgEl_List @.true_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };

		    ProgEl_List @.false_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };
		  };
		  MethodCall @[2] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};
	      };
	      MethodCall @[1] { };
	      If @[2] { 
		ProgEl_List @.true_code = [6] {
		  AddNewDataRow @[0] { };
		  MethodCall @[1] { };
		  MethodCall @[2] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[4] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  DoneWritingDataRow @[5] { };
		};
	      };
	      If @[3] { 
		ProgEl_List @.true_code = [2] {
		  AssignExpr @[0] { };
		  IfBreak @[1] { };
		};
	      };
	      StopStepPoint @[4] { };
	    };
	  };
	  Comment @[8] { };
	  AssignExpr @[9] { };
	  AssignExpr @[10] { };
	  AssignExpr @[11] { };
	  AssignExpr @[12] { };
	  AssignExpr @[13] { };
	  MathCall @[14] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  Comment @[15] { };
	  AssignExpr @[16] { };
	  AssignExpr @[17] { };
	  AssignExpr @[18] { };
	  AddNewDataRow @[19] { };
	  MethodCall @[20] { };
	  MethodCall @[21] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[22] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[23] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[24] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[25] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[26] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[27] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  DoneWritingDataRow @[28] { };
	  Comment @[29] { };
	  If @[30] { 
	    ProgEl_List @.true_code = [3] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [9] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	};

	ProgEl_List @.prog_code = [7] {
	  OtherProgramVar @[0] { };
	  If @[1] { 
	    ProgEl_List @.true_code = [2] {
	      RandomCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      RandomCall @[1] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  MemberAssign @[4] { };
	  MemberAssign @[5] { };
	  MethodCall @[6] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [17] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	};

	ProgEl_List @.prog_code = [16] {
	  OtherProgramVar @[0] { };
	  OtherProgramVar @[1] { };
	  Comment @[2] { };
	  AssignExpr @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  Comment @[9] { };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[11] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[14] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[15] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [15] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	};

	ProgEl_List @.prog_code = [15] {
	  Comment @[0] { };
	  OtherProgramVar @[1] { };
	  OtherProgramVar @[2] { };
	  OtherProgramVar @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  OtherProgramVar @[6] { };
	  Comment @[7] { };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[11] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  DoneWritingDataRow @[14] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	ProgEl_List @.init_code = [1] {
	  AssignExpr @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  OtherProgramVar @[0] { };
	  If @[1] { 
	    ProgEl_List @.true_code = [1] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [1] {
		  AssignExpr @[0] { };
		};

		ProgEl_List @.false_code = [2] {
		  If @[0] { 
		    ProgEl_List @.true_code = [1] {
		      VarIncr @[0] { };
		    };
		  };
		  If @[1] { 
		    ProgEl_List @.true_code = [1] {
		      VarIncr @[0] { };
		    };
		  };
		};
	      };
	    };
	  };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  Comment @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  DoneWritingDataRow @[6] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  AssignExpr @[0] { };
	  Switch @[1] { 
	    ProgEl_List @.cases = [2] {
	      CaseBlock @[0] { 
		ProgEl_List @.prog_code = [3] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  ProgramCall @[2] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	      CaseBlock @[1] { 
		ProgEl_List @.prog_code = [2] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	    };
	  };
	};
      };
      Program @[6] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.prog_code = [2] {
	  AssignExpr @[0] { };
	  Switch @[1] { 
	    ProgEl_List @.cases = [2] {
	      CaseBlock @[0] { 
		ProgEl_List @.prog_code = [1] {
		  ProgramCall @[0] { };
		};
	      };
	      CaseBlock @[1] { 
		ProgEl_List @.prog_code = [2] {
		  If @[0] { 
		    ProgEl_List @.true_code = [4] {
		      AssignExpr @[0] { };
		      AssignExpr @[1] { };
		      ProgramCall @[2] { 
			ProgArg_List @.prog_args = [3] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			};
		      };
		      ProgramCall @[3] { 
			ProgArg_List @.prog_args = [2] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			};
		      };
		    };
		  };
		  ProgramCall @[1] { };
		};
	      };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [11] { 
      Program @[0] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [8] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [9] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { };
	  MethodCall @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	  If @[9] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      If @[1] { 
		ProgEl_List @.true_code = [2] {
		  MethodCall @[0] { };
		  MethodCall @[1] { };
		};
	      };
	    };
	  };
	  MethodCall @[10] { };
	  ProgramCall @[11] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[4] { };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [10] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	      LayerWriterEl @[5] { };
	      LayerWriterEl @[6] { };
	      LayerWriterEl @[7] { };
	      LayerWriterEl @[8] { };
	      LayerWriterEl @[9] { };
	    };
	  };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [7] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	      LayerWriterEl @[5] { };
	      LayerWriterEl @[6] { };
	    };
	  };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[9] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[10] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[2] = [6] { 
      Program @[0] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  If @[0] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      PrintVar @[1] { };
	    };
	  };
	  NetCounterInit @[1] { };
	  MemberAssign @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	  MethodCall @[9] { };
	  ProgramCall @[10] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[11] { };
	};
      };
      Program @[1] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[4] { };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [5] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [6] {
		VEWorldView @[0] { 
		  T3DataView_List @.children = [3] {
		    VESpaceView @[0] { 
		      T3DataView_List @.children = [2] {
			VEStaticView @[0] { };
			VEStaticView @[1] { };
		      };
		    };
		    VEObjectView @[1] { 
		      T3DataView_List @.children = [9] {
			VEBodyView @[0] { };
			VEBodyView @[1] { };
			VEBodyView @[2] { };
			VEBodyView @[3] { };
			VEBodyView @[4] { };
			VEBodyView @[5] { };
			VEBodyView @[6] { };
			VEBodyView @[7] { };
			VEBodyView @[8] { };
		      };
		    };
		    VEObjectView @[2] { 
		      T3DataView_List @.children = [1] {
			VEBodyView @[0] { };
		      };
		    };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		  };
		};
		GraphTableView @[2] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		  };
		};
		GraphTableView @[3] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		  };
		};
		GraphTableView @[4] { 
		  T3DataView_List @.children = [29] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		    GraphColView @[20] { };
		    GraphColView @[21] { };
		    GraphColView @[22] { };
		    GraphColView @[23] { };
		    GraphColView @[24] { };
		    GraphColView @[25] { };
		    GraphColView @[26] { };
		    GraphColView @[27] { };
		    GraphColView @[28] { };
		  };
		};
		GraphTableView @[5] { 
		  T3DataView_List @.children = [29] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		    GraphColView @[14] { };
		    GraphColView @[15] { };
		    GraphColView @[16] { };
		    GraphColView @[17] { };
		    GraphColView @[18] { };
		    GraphColView @[19] { };
		    GraphColView @[20] { };
		    GraphColView @[21] { };
		    GraphColView @[22] { };
		    GraphColView @[23] { };
		    GraphColView @[24] { };
		    GraphColView @[25] { };
		    GraphColView @[26] { };
		    GraphColView @[27] { };
		    GraphColView @[28] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [6] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		    ScaleRange @[5] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [3] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[4] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };

  Network_Group @.networks = [2] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [7] {
	LeabraUnitSpec @[0] { };
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { };
	  };
	};
	ScalarValLayerSpec @[4] { };
	ScalarValLayerSpec @[5] { };
	TwoDValLayerSpec @[6] { };
      };

      Layer_Group @.layers = [11] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[1] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[2] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[3] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[4] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[5] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[6] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @[7] { 
	  Projection_Group @.projections = [6] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	    LeabraPrjn @[5] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @[8] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[9] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[10] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
      };
    };
    LeabraNetwork @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [7] {
	LeabraUnitSpec @[0] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraUnitSpec @[0] { };
	  };
	};
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { 
	      Schedule @.lrate_sched = [2] {
		SchedItem @[0] { };
		SchedItem @[1] { };
	      };
	    };
	  };

	  Schedule @.lrate_sched = [2] {
	    SchedItem @[0] { };
	    SchedItem @[1] { };
	  };
	};
	ScalarValLayerSpec @[4] { };
	ScalarValLayerSpec @[5] { };
	TwoDValLayerSpec @[6] { };
	BaseSpec_Group @.gp[0] = [2] { 
	  LeabraUnitSpec @[0] { 
	    BaseSpec_Group @.children = [1] {
	      LeabraUnitSpec @[0] { };
	    };
	  };
	  LeabraUnitSpec @[1] { };
	};
	BaseSpec_Group @.gp[1] = [2] { 
	  LeabraConSpec @[0] { 
	    BaseSpec_Group @.children = [2] {
	      PVConSpec @[0] { 
		BaseSpec_Group @.children = [3] {
		  PVrConSpec @[0] { };
		  PVConSpec @[1] { 
		    BaseSpec_Group @.children = [1] {
		      PVConSpec @[0] { };
		    };
		  };
		  PVConSpec @[2] { };
		};
	      };
	      LeabraBiasSpec @[1] { 
		BaseSpec_Group @.children = [1] {
		  LeabraBiasSpec @[0] { };
		};
	      };
	    };
	  };
	  MarkerConSpec @[1] { };
	};
	BaseSpec_Group @.gp[2] = [6] { 
	  ExtRewLayerSpec @[0] { };
	  PVrLayerSpec @[1] { };
	  PViLayerSpec @[2] { };
	  LVeLayerSpec @[3] { 
	    BaseSpec_Group @.children = [1] {
	      LViLayerSpec @[0] { };
	    };
	  };
	  NVLayerSpec @[4] { };
	  PVLVDaLayerSpec @[5] { };
	};
	BaseSpec_Group @.gp[3] = [2] { 
	  FullPrjnSpec @[0] { };
	  OneToOnePrjnSpec @[1] { };
	};
      };

      Layer_Group @.layers = [18] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [6] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	    LeabraPrjn @[5] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[3] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[5] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[6] { 
	  Projection_Group @.projections = [4] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @[7] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	  };

	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @[8] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[9] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[10] { 
	  Projection_Group @.projections = [7] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	    LeabraPrjn @[3] { };
	    LeabraPrjn @[4] { };
	    LeabraPrjn @[5] { };
	    LeabraPrjn @[6] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @[11] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[12] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[13] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[14] { 
	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[15] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[16] { 
	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @[17] { 
	  Unit_Group @.units = [110] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="EmerRobot_Arm";
 desc="arm-only version of emer the robot model";
 tags="robot, arm, motor learning, reinforcement learning, forward model";
 version {
  major=0;
  minor=1;
  step=1;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ChangeLog";
   auto_open=0;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>

<li>Tue Apr  7 23:42:10 2009 0.1.1. oreilly <code>EmerRobot_Arm.proj</code><br>
  lambda arm muscle code in place, with minimal rl and forward model learning, and all programs cleaned up, docs added.


</ul>
</body>
</html>
";
  };
  taDoc @[1] {
   name="ProjectDocs";
   auto_open=1;
   text="<html>
<head></head>
<body>
= Emer Robot (Arm) =

This project demonstrates how to use the virtual environment (VE) code to simulate a simple robot with a two-joint arm, which learns to reach to a target location (sort of).

The focus of this project so far is on building a clean infrastructure for the modeling work, including a robust VE model and numerous programs in RobotProgs for interfacing between the robot and the networks.  We are not so much interested in the details of individual reach movements, but rather on the learning and higher-level coordination of such movements.  Thus, each reach is considred to be a ballistic event that occurs within the \"Trial\" level of processing, although it is possible to have subsequent trials include corrective reaches or something like that. 

The models contain both joint-level and simluated visual information about the body and world, including current joint angles (somatosensory) and current hand location (visual), and they use scalar value layer specs to represent graded joint angle information.

There networks are:

* [[.T3Tab.FwdModelNet]] -- a forward model that currently is ''only'' a forward model (does not train an \"inverse\" model to control the robot to reach the target), which learns to predict the arm location based on random motor commands.

* [[.T3Tab.RLNet]] -- a reinforcement-learning model using the PVLV dopamine-based RL system to learn to reach the target, based on reward signals that are based on how close the hand got to the target.  Due to the strongly nonlinear properties of the Leabra unit functions, and kwta inhibitory competition, etc, the system does not do a very good job of learning based on graded distance information, and instead learns a set of \"good enough\" reaches that get close but not right on the target.  In general, we think this form of learning is much better for more discrete trial-and-error learning, e.g., for deciding which larger-scale motor plan to execute, rather than learning the fine details of motor control itself.

== Arm Model: Lambda Equilibrium Point (EP) Controller ==

The arm control signals are target final joint angles, which then determine the \"set points\" of muscles that are modeled based on the Gribble, Ostry, Sanguineti, and Labossiere, 1998 version of the Lambda model. There are flexor and extensor muscles for each joint, and each muscle has an equilibrium point (EP) at which no force is generated, based on the muscle spindle fiber reflex system. To move the arm from one joint angle to another, the system generates a smooth trajectory of EP values between the current and target joint angles, and this causes forces to be generated that move the arm.  In addition to joint angles, one can specify the degree of co-contraction (0-1), whereby the muscle set point is reduced by a fixed amount on both sides, causing a constant contraction force at the EP from both muscles, which serves to stabilize the arm.  See co_contract_pct in the EmerRobot program -- it defaults to .4, which produces very stable movements with little oscillation at the end of the reach.  Lower values are \"lower effort\" but result in more oscillations.

The detailed parameters for each muscle can be found under the [[.programs.EmerRobot.objs.VEEmerWorld]] object in the [[.programs.EmerRobot]] program -- just double-click on that World guy and everything will open up below it in the left hand browser, and you'll see the Shoulder and Elbow joints, and their associated flexor and extensor muscles.  All of the parameters are from Gribble et al, 1998 except the muscle recruitment gradient (m_rec_grad) parameter, which needed to be higher to produce faster reaches.  Note that this muscle model is quite realistic in many respects, including temporal delays in the reflex action, and time constants for the build-up of Calcium that actually activates the muscle contraction, etc.  

== Simple Demo of the Model ==

To see the model in action, go to the [[.PanelTab.ControlPanel]] and do Test Init, Test Run -- this will load weights into the RLNet and use that to control the arm to reach for the target -- it is not great as explained above, but much better than chance..

</body>
</html>
";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=11;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="VisTarget_Cur";
     n_units=110;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="VisHand_Cur";
     n_units=110;
     io_type=INPUT;
    };
    LayerWizEl @[2] {
     name="SomaShoulderAngle_Cur";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[3] {
     name="SomaElbowAngle_Cur";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[4] {
     name="MotorShoulderForce";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[5] {
     name="MotorElbowForce";
     n_units=12;
     io_type=INPUT;
    };
    LayerWizEl @[6] {
     name="VisFwdHidden";
     n_units=49;
     io_type=HIDDEN;
    };
    LayerWizEl @[7] {
     name="SomaFwdHidden";
     n_units=49;
     io_type=HIDDEN;
    };
    LayerWizEl @[8] {
     name="VisHand_Pred";
     n_units=110;
     io_type=OUTPUT;
    };
    LayerWizEl @[9] {
     name="SomaShoulderAngle_Pred";
     n_units=12;
     io_type=OUTPUT;
    };
    LayerWizEl @[10] {
     name="SomaElbowAngle_Pred";
     n_units=12;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc="main control panel for the system";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraTrain network";
     desc="network to train";
     base=.projects[0].programs.gp[1][1].args[0]$0$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[1] {
     label="LeabraTrain input_data";
     desc="datatable with training patterns";
     base=.projects[0].programs.gp[1][1].args[1]$1$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[2] {
     label="LeabraCycle update_net_view";
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     base=.projects[0].programs.gp[1][5].vars[0]$2$;
     mbr=ProgVar::bool_val;
    };
    EditMbrItem @[3] {
     label="LeabraAll_Std step prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=.projects[0].programs.gp[1]$3$;
     mbr=Program_Group::step_prog;
    };
    EditMbrItem @[4] {
     label="LeabraEpochTest network";
     desc="network to operate on";
     base=.projects[0].programs.gp[2][0].args[0]$4$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[5] {
     label="LeabraEpochTest input_data";
     desc="table of patterns to present to the network, one row at a time";
     base=.projects[0].programs.gp[2][0].vars[0]$5$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[6] {
     label="LeabraAll_Test step prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=.projects[0].programs.gp[2]$6$;
     mbr=Program_Group::step_prog;
    };
    EditMbrItem_Group @.gp[0] {
     name="RLNet Params";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="LeabraUnitSpec_0 noise";
      desc=" distribution parameters for random added noise<br>  type:  type of random variable to generate<br>    UNIFORM:  uniform with var = range on either side of the mean<br>    BINOMIAL:  binomial with var = p, par = n<br>    POISSON:  poisson with lambda = var<br>    GAMMA:  gamma with var and par = stages<br>    GAUSSIAN:  normal with var<br>    NONE:  just the mean<br>  mean:  mean of random distribution<br>  var:  'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)<br>  par:  extra parameter for distribution (depends on each one)";
      base=.projects[0].networks[1].specs[0]$7$;
      mbr=LeabraUnitSpec::noise;
     };
     EditMbrItem @[1] {
      label="LeabraUnitSpec_0 da mod";
      desc=" da modulation of activations (for da-based learning, and other effects)<br>  on:  whether to actually modulate activations by da values<br>  mod:  how to apply DA modulation<br>    PLUS CONT:  da modulates plus-phase activations (only) in a continuous manner<br>    PLUS POST:  da modulates plus-phase activations (only), at the end of the plus phase<br>  gain:  gain multiplier of da values";
      base=$7$;
      mbr=LeabraUnitSpec::da_mod;
     };
     EditMbrItem @[2] {
      label="RLModelRew rew_dist ~ hr_init";
      desc="initial threshold on distance to get a reward at start of training";
      base=.projects[0].programs.gp[0][4].vars[3]$8$;
      mbr=ProgVar::real_val;
     };
     EditMbrItem @[3] {
      label="RLModelRew rew_dist ~ hr_incr";
      desc="how much to decrease the distance threshold when network is doing well (see avg_rew_thr) -- should be a POSITIVE number";
      base=.projects[0].programs.gp[0][4].vars[4]$9$;
      mbr=ProgVar::real_val;
     };
     EditMbrItem @[4] {
      label="RLModelRew avg_rew_dec_thr";
      desc="threshold on network avg_rew for decreasing the reward threshold (makes the task harder -- when doing well)";
      base=.projects[0].programs.gp[0][4].vars[5]$10$;
      mbr=ProgVar::real_val;
     };
     EditMbrItem @[5] {
      label="RLModelRew avg_rew_inc_thr";
      desc="threshold on network avg_rew for increasing the reward threshold (makes task easier -- when doing poorly)";
      base=.projects[0].programs.gp[0][4].vars[6]$11$;
      mbr=ProgVar::real_val;
     };
     EditMbrItem @[6] {
      label="ForceScalarVal inhib";
      desc=" how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer<br>  type:  how to compute inhibition (g_i)<br>    KWTA INHIB:  between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)<br>    KWTA AVG INHIB:  average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)<br>    KWTA KV2K:  average of top k vs avg of next k (2k) -- avoids long 'tail' of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB<br>    KWTA COMP COST:  competitor cost kwta function: inhibition is i_kwta_pt below the k'th unit's threshold inhibition value if there are no strong competitors (>comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility<br>    AVG MAX PT INHIB:  put inhib value at i_kwta_pt between avg and max values for layer<br>    MAX INHIB:  put inhib value at i_kwta_pt below max guy in layer<br>    UNIT INHIB:  unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)<br>  kwta pt: [Default: 0.25;0.6;0.2]  [Default: .25 for KWTA_INHIB and KWTA_KV2K, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)<br>  min i:  minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation<br>  comp thr:  [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k'th inhibition and those above this threshold are counted as competitors <br>  comp gain:  Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level<br>  gp pt:  [Default: .2] for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB";
      base=.projects[0].networks[1].specs[5]$12$;
      mbr=LeabraLayerSpec::inhib;
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[1][1]$13$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program";
     base=$13$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$13$;
     mth=Program::Step;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$13$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Test Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[2][0]$14$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Test Run";
     desc=" run the program";
     base=$14$;
     mth=Program::Run;
    };
    EditMthItem @[6] {
     label="Test Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$14$;
     mth=Program::Step;
    };
    EditMthItem @[7] {
     label="Test Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$14$;
     mth=Program::Stop;
    };
   };
  };
  SelectEdit @[1] {
   name="VEInfo";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem_Group @.gp[0] {
     name="VE Arm";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="VEArmWorld stepsize";
      desc=" how big of a step to take";
      base=.projects[0].programs.gp[0][0].objs[0]$15$;
      mbr=VEWorld::stepsize;
     };
     EditMbrItem @[1] {
      label="VEArmWorld ode params";
      desc=" parameters for tuning the ODE engine<br>  erp: [Default: 0.2]  (0-1, .1-.8 useful range) error reduction parameter: how much of the joint error is reduced at the next time step<br>  cfm: [Default: 1e-05]  (0-1, 1e-9 - 1 useful range) constraint force mixing parameter: how 'soft' is the constraint (0 = hard, 1 = soft)<br>  max cor vel: [Default: 1e+06]  maximum correcting velocity for contacts (how quickly they can pop things out of contact)<br>  contact depth: [Default: 0.001]  depth of the surface layer arond all geometry objects -- allows things to go this deep into a surface before actual contact is made -- increased value can help prevent jittering<br>  max col pts: [Default: 4]  maximum number of collision points to get (must be less than 64, which is a hard maximum)";
      base=$15$;
      mbr=VEWorld::ode_params;
     };
     EditMbrItem @[2] {
      label="VEArmWorld updt display";
      desc=" if true, will update any attached display after each time step";
      base=$15$;
      mbr=VEWorld::updt_display;
     };
     EditMbrItem @[3] {
      label="Arm max_ve_steps";
      desc=" integer value (also for enum types)";
      base=.projects[0].programs.gp[0][0].vars[12]$16$;
      mbr=ProgVar::int_val;
     };
     EditMbrItem @[4] {
      label="Arm hand_vel_thr";
      desc="threshold for stopping movement in hand velocity";
      base=.projects[0].programs.gp[0][0].vars[24]$17$;
      mbr=ProgVar::real_val;
     };
     EditMbrItem @[5] {
      label="Arm co_contract_pct";
      desc="how much to co-contract the muscles for the movement";
      base=.projects[0].programs.gp[0][0].vars[8]$18$;
      mbr=ProgVar::real_val;
     };
    };
    EditMbrItem_Group @.gp[1] {
     name="Shoulder";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp[2] {
     name="Elbow";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp[3] {
     name="Joints";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp[0] {
      name="Elbow";
      el_typ=EditMbrItem;
      el_def=0;
     };
     EditMbrItem_Group @.gp[1] {
      name="Shoulder";
      el_typ=EditMbrItem;
      el_def=0;
     };
    };
    EditMbrItem_Group @.gp[4] {
     name="Limbs";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp[0] {
      name="Humerus";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Humerus cur pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[1]$19$;
       mbr=VEBody::cur_pos;
      };
      EditMbrItem @[1] {
       label="Humerus cur lin vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$19$;
       mbr=VEBody::cur_lin_vel;
      };
      EditMbrItem @[2] {
       label="Humerus cur ang vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$19$;
       mbr=VEBody::cur_ang_vel;
      };
     };
     EditMbrItem_Group @.gp[1] {
      name="Ulna";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Ulna cur pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[2]$20$;
       mbr=VEBody::cur_pos;
      };
      EditMbrItem @[1] {
       label="Ulna cur lin vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$20$;
       mbr=VEBody::cur_lin_vel;
      };
      EditMbrItem @[2] {
       label="Ulna cur ang vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$20$;
       mbr=VEBody::cur_ang_vel;
      };
     };
     EditMbrItem_Group @.gp[2] {
      name="Hand";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Hand cur pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[3]$21$;
       mbr=VEBody::cur_pos;
      };
      EditMbrItem @[1] {
       label="Hand cur lin vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$21$;
       mbr=VEBody::cur_lin_vel;
      };
      EditMbrItem @[2] {
       label="Hand cur ang vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       base=$21$;
       mbr=VEBody::cur_ang_vel;
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Arm Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][0]$22$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Arm Run";
     desc=" run the program";
     base=$22$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Arm Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$22$;
     mth=Program::Step;
    };
   };
  };
  SelectEdit @[2] {
   name="PVLV";
   auto_edit=0;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="pvr lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[0]$23$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[1] {
     label="pvi lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0]$24$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[2] {
     label="lve lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[1]$25$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[3] {
     label="lvi lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[1].children[0]$26$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[4] {
     label="nv lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[1].specs.gp[1][0].children[0].children[2]$27$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[5] {
     label="pve rew";
     desc=" misc reward computation specifications<br>  err val: [Default: 0]  reward value for errors (when network does not respond correctly)<br>  norew val: [Default: 0.5]  reward value when no feedback information is present<br>  rew val: [Default: 1]  reward value for correct responses (positive rewards)";
     base=.projects[0].networks[1].specs.gp[2][0]$28$;
     mbr=ExtRewLayerSpec::rew;
    };
    EditMbrItem @[6] {
     label="pvi pv";
     desc=" misc parameters for the PV computation<br>  min pvi: [Default: 0.4]  minimum pvi value -- PVi is not allowed to go below this value for the purposes of computing the PV delta value: pvd = PVe - MAX(PVi,min_pvi)";
     base=.projects[0].networks[1].specs.gp[2][2]$29$;
     mbr=PViLayerSpec::pv;
    };
    EditMbrItem @[7] {
     label="lve lv";
     desc=" misc parameters controlling the LV computation (note: only the LVe instance of these parameters are used)<br>  min lvi: [Default: 0.1]  minimum lvi value -- LVi is not allowed to go below this value for the purposes of computing the LV delta value: lvd = LVe - MAX(LVi,min_lvi)";
     base=.projects[0].networks[1].specs.gp[2][3]$30$;
     mbr=LVeLayerSpec::lv;
    };
    EditMbrItem @[8] {
     label="pvr pv detect";
     desc=" primary reward value detection spec: detect if a primary reward is expected based on PVr value<br>  thr min: [Default: 0.2]  minimum threshold on PVr value, below which PV is considered present (i.e., punishment) -- PVr learns a 0 for all punishment-valence cases, regardless of value<br>  thr max: [Default: 0.8]  maximum threshold on PVr value, above which PV is considered present (i.e., reward) -- PVr learns a 1 for all reward-valence cases, regardless of value";
     base=.projects[0].networks[1].specs.gp[2][1]$31$;
     mbr=PVrLayerSpec::pv_detect;
    };
    EditMbrItem @[9] {
     label="nv nv";
     desc=" novelty value specs<br>  da gain: [Default: 1]  gain for novelty value dopamine signal<br>  val thr: [Default: 0.1]  threshold for value (training value is 0) -- value is zero below this threshold";
     base=.projects[0].networks[1].specs.gp[2][4]$32$;
     mbr=NVLayerSpec::nv;
    };
    EditMbrItem @[10] {
     label="vta da";
     desc=" parameters for the pvlv da computation<br>  da gain: [Default: 0.2:2]  multiplier for dopamine values<br>  tonic da: [Default: 0]  set a tonic 'dopamine' (DA) level (offset to add to da values)";
     base=.projects[0].networks[1].specs.gp[2][5]$33$;
     mbr=PVLVDaLayerSpec::da;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="FwdModelInputData";
    desc="input data for training the forward model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     float_Data @[1] {
      name="VisTarget_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;      };
     };
     float_Data @[2] {
      name="VisHand_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.51096886;1.0057883;0.98583239;0.3451024;0.44195947;0.65126932;0.38861054;0.48832265;0.66205519;0.53255314;0.6596058;0.92258739;0.95375198;0.45181084;0.36383644;0.24425653;0.61100787;0.97552675;0.93118048;0.40312693;0.11928414;0.34118894;0.9586153;0.4367142;0.75255936;0.63351345;0.24052298;0.43413293;0.39201331;0.67528093;0.5410893;0.73877692;0.31896567;0.7229318;0.068093747;0.43243209;0.40452397;0.68079478;0.97379756;0.19044572;0.85874432;0.49126884;0.48163995;0.95218903;0.88519216;-0.068391003;0.3751882;0.74437666;0.95216393;0.30389342;0.6970439;0.81935495;0.33170971;0.26718122;0.98218679;0.28160131;0.54452336;0.85651392;0.81826943;0.46205655;0.34804788;0.21560074;0.28006718;0.86589748;0.6611374;0.90024334;0.97526175;0.27605537;0.39124697;0.53117371;0.47819534;0.54073048;0.59838259;0.48595592;0.35130996;0.36739612;0.5287981;0.76502192;0.30706015;0.44300655;0.7092272;0.94864357;0.34805217;0.98352641;0.030797562;0.38978413;0.81786662;0.83963251;0.25918132;0.76147586;0.71592993;0.66539508;0.39644489;0.63703686;0.9389835;0.62636024;0.39096233;0.48032311;0.32935658;0.97441483;0.76055068;0.87796301;0.84824944;0.41036087;0.50842828;1.0139002;0.84102994;0.72123355;0.5778082;0.68729031;0.29931307;0.18306667;0.26868653;0.46602589;0.49766716;0.96234369;0.63614589;0.64010441;0.64369768;0.65791285;0.2391618;0.46822801;0.89684182;0.35061622;0.93383086;0.24119882;0.24600235;0.24585356;0.5058946;0.64491332;0.88982457;0.39749727;0.21341392;0.14141205;0.55723369;0.80791354;0.85786039;-0.11404549;0.21654943;0.32500115;0.25272369;0.66723716;0.34969652;0.22677732;0.8558079;0.43460101;0.38645953;0.99704599;0.95774937;0.56762618;0.12542969;0.69740433;0.4112727;0.55433714;0.72453099;0.49169356;0.8735885;-0.09030807;0.89773095;0.38663048;0.083248667;0.70317793;0.34648946;0.63766944;0.3536399;0.79801697;0.97525668;0.31574252;0.26485482;0.25541425;0.53608727;1.0131906;0.90539497;0.65301037;0.14797363;0.66124892;0.48879674;0.55789983;0.2972132;0.69384331;0.067379393;0.5239287;0.36603716;0.24352379;0.65098757;0.67542326;0.4055177;0.95881212;0.94788855;0.26166767;0.5681352;0.9579919;0.92348158;0.64649618;0.82683045;0.82272071;0.24098451;0.87004811;0.93054515;0.1736328;      };
     };
     float_Data @[3] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.57998103;0.22518763;0.38028118;0.47049239;0.058510389;0.41968873;0.14982431;0.82348925;0.4965421;0.088460602;0.87170714;0.14852306;0.14852871;0.70538491;0.45231146;0.31832713;0.54974592;0.88984936;0.43775126;0.11211802;0.077095099;0.5191406;0.036686327;0.4903608;0.071024418;0.31165045;0.79462916;0.13776471;0.39860865;0.02980607;0.86130315;0.64547497;0.39408389;0.1111737;0.45000878;0.28046104;0.030960269;0.6472742;0.34580439;0.6262033;0.51993692;0.71466446;0.96298558;0.38772517;0.62709665;0.17550565;0.43952128;0.29198238;0.47021601;0.74641091;0.38882509;0.013759866;0.64819831;0.2553384;0.25188237;0.89702308;0.65656531;0.51962101;0.17491531;0.18716566;0.68794841;0.021919759;0.021969657;0.84924096;0.29387057;0.041062959;0.95246172;0.35475335;0.0082387114;0.80125797;0.62289637;0.84672827;0.035637967;0.68312114;0.27241889;0.78934944;0.41126227;0.01622382;0.016224485;0.04242802;0.93279421;0.50713933;0.53233218;0.12239111;0.83190405;0.61745018;0.24927789;0.7509743;0.26901615;0.57132906;0.87046993;0.82484913;0.19932453;0.58660209;0.049780622;0.48004273;0.27400658;0.36886147;0.70018834;0.0023305418;      };
     };
     float_Data @[4] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.19668387;0.02117639;0.82606035;0.94943124;0.85155845;0.35256702;0.31129858;0.95226562;0.25333425;0.40910709;0.56112671;0.29789189;0.65184355;0.77293807;0.77293777;0.72485203;0.65744293;0.41880628;0.77448899;0.13568404;0.5591225;0.3821584;0.030640706;0.68023801;0.34301764;0.50444424;0.9175784;0.16560508;0.55878872;0.65083313;0.91615731;0.40155777;0.40192395;0.22222605;0.91675037;0.95783311;0.95783252;0.95783126;0.69382095;0.87146533;0.06200251;0.1006135;0.29789931;0.19242719;0.53846252;0.67196208;0.81761771;0.14965834;0.95798683;0.052095149;0.2761603;0.60793012;0.038589478;0.39336422;0.77301818;0.83252227;0.80506855;0.35738292;0.78342998;0.75829691;0.75829542;0.5083366;0.389137;0.78110611;0.84348899;0.52016443;0.67931211;0.62773645;0.039899629;0.74687517;0.637299;0.9245373;0.58648014;0.1218732;0.13280872;0.35560825;0.91185743;0.79286349;0.052526277;0.50296277;0.043978229;0.77604836;0.59352189;0.23540485;0.81388474;0.074177809;0.29583311;0.45923567;0.94064236;0.66646582;0.36800423;0.95477158;0.73311329;0.33258;0.34826711;0.34826729;0.21957879;0.21667665;0.31901348;0.36364707;      };
     };
     float_Data @[5] {
      name="MotorShoulderForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.24357438;0.35429925;0.47382393;0.055935245;0.42502031;0.17021513;0.83672357;0.48577076;0.09080483;0.89008445;0.17965175;0.16782473;0.70577246;0.46330741;0.32852945;0.51846647;0.88337022;0.43204433;0.11665879;0.056507301;0.51559621;0.019900462;0.51081628;0.07677675;0.30179051;0.79092532;0.15122773;0.39710256;0.019407135;0.8729803;0.65361613;0.41346136;0.12016647;0.43633068;0.2882933;0.011766178;0.6568988;0.34425628;0.6460731;0.51356232;0.68320054;0.94369459;0.40789983;0.62600064;0.17727923;0.40565076;0.29901046;0.44552279;0.75045019;0.41935867;0.0083638988;0.63332725;0.26158589;0.22853248;0.90312248;0.66341096;0.52372926;0.19329761;0.22073123;0.68058914;0.045036659;0.035535209;0.84672761;0.2839438;0.056387201;0.94379252;0.36901349;0.032305136;0.81490099;0.65307456;0.8180753;0.044336386;0.64861327;0.27043495;0.79647917;0.39451793;0.012139625;0.021184931;0.066545464;0.93148702;0.50233346;0.55708158;0.14569671;0.84671801;0.63822722;0.27489194;0.75094491;0.26900652;0.58232939;0.84869421;0.80573171;0.19670925;0.59522933;0.064474724;0.49141636;0.29005995;0.36832175;0.67797649;0.039749444;0.56626338;      };
     };
     float_Data @[6] {
      name="MotorElbowForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.029047899;0.84847653;0.96682566;0.84430641;0.34201056;0.31409979;0.97372288;0.23113051;0.43368649;0.58344293;0.29420042;0.6729731;0.80640244;0.76142597;0.70602936;0.65222567;0.38303342;0.79286551;0.11090475;0.57986915;0.36261871;0.018711248;0.70158541;0.32821575;0.50022084;0.94872755;0.14414093;0.536717;0.65726662;0.93182808;0.37786913;0.41052893;0.24415851;0.94116014;0.99381036;0.93887287;0.9390353;0.67667967;0.8996973;0.039504025;0.10362258;0.26918381;0.18173558;0.51937199;0.69853139;0.85146743;0.1264759;0.9806394;0.029567888;0.31525078;0.64761537;0.0073662223;0.4268018;0.79467279;0.87073499;0.78312659;0.33241615;0.79563743;0.72460854;0.74313259;0.50166869;0.37619519;0.80859137;0.86631054;0.49487001;0.70486844;0.61449647;0.020879801;0.76290947;0.62820095;0.94206434;0.56813341;0.10066778;0.1374016;0.36819014;0.93367016;0.78872091;0.030822;0.52546477;0.023157002;0.79597127;0.5695563;0.22560678;0.84576905;0.051884502;0.33510715;0.47740871;0.96671987;0.64252442;0.33831713;0.97712648;0.71555424;0.29666898;0.35793853;0.35852194;0.22860298;0.20211278;0.31843811;0.37341881;0.17890175;      };
     };
     float_Data @[7] {
      name="VisHand_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.98583239;0.3451024;0.44195947;0.65126932;0.38861054;0.48832265;0.66205519;0.53255314;0.6596058;0.92258739;0.95375198;0.45181084;0.36383644;0.24425653;0.61100787;0.97552675;0.93118048;0.40312693;0.11928414;0.34118894;0.9586153;0.4367142;0.75255936;0.63351345;0.24052298;0.43413293;0.39201331;0.67528093;0.5410893;0.73877692;0.31896567;0.7229318;0.068093747;0.43243209;0.40452397;0.68079478;0.97379756;0.19044572;0.85874432;0.49126884;0.48163995;0.95218903;0.88519216;-0.068391003;0.3751882;0.74437666;0.95216393;0.30389342;0.6970439;0.81935495;0.33170971;0.26718122;0.98218679;0.28160131;0.54452336;0.85651392;0.81826943;0.46205655;0.34804788;0.21560074;0.28006718;0.86589748;0.6611374;0.90024334;0.97526175;0.27605537;0.39124697;0.53117371;0.47819534;0.54073048;0.59838259;0.48595592;0.35130996;0.36739612;0.5287981;0.76502192;0.30706015;0.44300655;0.7092272;0.94864357;0.34805217;0.98352641;0.030797562;0.38978413;0.81786662;0.83963251;0.25918132;0.76147586;0.71592993;0.66539508;0.39644489;0.63703686;0.9389835;0.62636024;0.39096233;0.48032311;0.32935658;0.97441483;0.76055068;0.87796301;0.84824944;0.41036087;0.50842828;1.0139002;0.84102994;0.72123355;0.5778082;0.68729031;0.29931307;0.18306667;0.26868653;0.46602589;0.49766716;0.96234369;0.63614589;0.64010441;0.64369768;0.65791285;0.2391618;0.46822801;0.89684182;0.35061622;0.93383086;0.24119882;0.24600235;0.24585356;0.5058946;0.64491332;0.88982457;0.39749727;0.21341392;0.14141205;0.55723369;0.80791354;0.85786039;-0.11404549;0.21654943;0.32500115;0.25272369;0.66723716;0.34969652;0.22677732;0.8558079;0.43460101;0.38645953;0.99704599;0.95774937;0.56762618;0.12542969;0.69740433;0.4112727;0.55433714;0.72453099;0.49169356;0.8735885;-0.09030807;0.89773095;0.38663048;0.083248667;0.70317793;0.34648946;0.63766944;0.3536399;0.79801697;0.97525668;0.31574252;0.26485482;0.25541425;0.53608727;1.0131906;0.90539497;0.65301037;0.14797363;0.66124892;0.48879674;0.55789983;0.2972132;0.69384331;0.067379393;0.5239287;0.36603716;0.24352379;0.65098757;0.67542326;0.4055177;0.95881212;0.94788855;0.26166767;0.5681352;0.9579919;0.92348158;0.64649618;0.82683045;0.82272071;0.24098451;0.87004811;0.93054515;0.1736328;0.51096886;1.0057883;      };
     };
     float_Data @[8] {
      name="SomaShoulderAngle_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.22518763;0.38028118;0.47049239;0.058510389;0.41968873;0.14982431;0.82348925;0.4965421;0.088460602;0.87170714;0.14852306;0.14852871;0.70538491;0.45231146;0.31832713;0.54974592;0.88984936;0.43775126;0.11211802;0.077095099;0.5191406;0.036686327;0.4903608;0.071024418;0.31165045;0.79462916;0.13776471;0.39860865;0.02980607;0.86130315;0.64547497;0.39408389;0.1111737;0.45000878;0.28046104;0.030960269;0.6472742;0.34580439;0.6262033;0.51993692;0.71466446;0.96298558;0.38772517;0.62709665;0.17550565;0.43952128;0.29198238;0.47021601;0.74641091;0.38882509;0.013759866;0.64819831;0.2553384;0.25188237;0.89702308;0.65656531;0.51962101;0.17491531;0.18716566;0.68794841;0.021919759;0.021969657;0.84924096;0.29387057;0.041062959;0.95246172;0.35475335;0.0082387114;0.80125797;0.62289637;0.84672827;0.035637967;0.68312114;0.27241889;0.78934944;0.41126227;0.01622382;0.016224485;0.04242802;0.93279421;0.50713933;0.53233218;0.12239111;0.83190405;0.61745018;0.24927789;0.7509743;0.26901615;0.57132906;0.87046993;0.82484913;0.19932453;0.58660209;0.049780622;0.48004273;0.27400658;0.36886147;0.70018834;0.0023305418;0.57998103;      };
     };
     float_Data @[9] {
      name="SomaElbowAngle_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.02117639;0.82606035;0.94943124;0.85155845;0.35256702;0.31129858;0.95226562;0.25333425;0.40910709;0.56112671;0.29789189;0.65184355;0.77293807;0.77293777;0.72485203;0.65744293;0.41880628;0.77448899;0.13568404;0.5591225;0.3821584;0.030640706;0.68023801;0.34301764;0.50444424;0.9175784;0.16560508;0.55878872;0.65083313;0.91615731;0.40155777;0.40192395;0.22222605;0.91675037;0.95783311;0.95783252;0.95783126;0.69382095;0.87146533;0.06200251;0.1006135;0.29789931;0.19242719;0.53846252;0.67196208;0.81761771;0.14965834;0.95798683;0.052095149;0.2761603;0.60793012;0.038589478;0.39336422;0.77301818;0.83252227;0.80506855;0.35738292;0.78342998;0.75829691;0.75829542;0.5083366;0.389137;0.78110611;0.84348899;0.52016443;0.67931211;0.62773645;0.039899629;0.74687517;0.637299;0.9245373;0.58648014;0.1218732;0.13280872;0.35560825;0.91185743;0.79286349;0.052526277;0.50296277;0.043978229;0.77604836;0.59352189;0.23540485;0.81388474;0.074177809;0.29583311;0.45923567;0.94064236;0.66646582;0.36800423;0.95477158;0.73311329;0.33258;0.34826711;0.34826729;0.21957879;0.21667665;0.31901348;0.36364707;0.19668387;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="RLModelInputData";
    desc="input data for training the RL model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     float_Data @[1] {
      name="VisTarget_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.0084972251;0.42742443;0.4992061;0.72554076;0.77195233;0.41890037;0.78196299;0.49107638;0.21586487;0.39528811;0.6521942;0.54322934;0.97903454;0.43708602;0.045720246;0.51503485;0.47817624;0.70463967;0.49772447;0.71296477;0.60778433;0.64681005;0.71934026;0.58966595;0.79901439;0.58302975;0.52670878;0.5502829;0.43069813;0.54253346;0.27082026;0.35971704;0.21654698;0.56890118;0.70115757;0.45509249;0.39451179;0.48913383;0.47954291;0.69090319;0.32900596;0.46344078;0.70766759;0.34491467;0.13939345;0.40563747;0.3858037;0.71735358;0.44169739;0.64447278;0.50754553;0.59203756;0.48050973;0.63338065;0.77886117;0.59791517;0.091613717;0.40050849;0.75918335;0.6613887;0.84292543;0.43195537;0.28327048;0.80643857;0.29031208;0.42740357;0.71619719;0.71555191;0.70098227;0.8946014;0.33941782;0.36718646;0.86938417;0.53296858;0.14904813;0.54617268;0.29805905;0.6004653;0.31074718;0.78649575;0.69274437;0.71394455;0.13338436;0.39230883;0.24575023;0.7903834;0.85947496;0.57462418;0.089883305;0.463222;0.76026547;0.82442641;0.31901503;0.70351589;0.095793664;0.47392753;0.71101421;0.82828283;0.16079357;0.56227905;0.69472742;0.56102902;0.52965206;0.89086002;0.40497333;0.62369734;0.13101219;0.60754985;0.47877103;0.56176007;0.84533465;0.66553694;0.95285153;0.41757053;0.11130316;0.66289794;0.44492826;0.65525883;0.6829592;0.4056769;0.3813017;0.84187198;0.77833796;0.47757989;0.089899048;0.55066752;0.65039754;0.89657187;0.4525345;0.9727754;0.53978848;0.51087707;0.23003018;0.8006987;0.82589293;0.55546147;0.029849129;0.50600797;0.36660802;0.62531126;0.38703439;0.65215921;0.21864557;0.684228;0.1564426;0.52825242;0.79193348;0.51737225;0.67799109;0.55979717;0.53780758;0.91694939;0.5807485;0.84894258;0.54391754;0.77857322;0.23172879;0.40306747;0.33897769;0.39647293;0.77458817;0.53619748;0.49014667;0.70407319;0.79518622;0.77184051;0.82288653;0.69102275;0.61557227;0.49724102;0.53132433;0.52128363;0.22717114;0.77282768;0.38270304;0.94642013;0.35441852;0.96607757;0.026684562;0.49065483;0.25141105;0.68175566;0.18910734;0.38774285;0.099350005;0.448374;0.42873064;0.71162313;0.30912998;0.77243304;0.13926129;0.54223633;0.97973651;0.34668508;0.66049445;0.36277974;0.38148889;0.8521719;0.092834078;0.65938795;      };
     };
     float_Data @[2] {
      name="VisHand_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [2 1 100] 0.98657721;0.34101382;0.20831288;0.65765351;0.62393475;0.86144274;0.73799676;0.49385718;0.50645936;0.62628865;0.19194734;0.56364179;0.48272955;0.6117059;0.70515323;0.49509379;0.70232397;0.49527246;0.5736689;0.87031978;0.57366902;0.87031263;0.48478392;0.6193186;0.48478794;0.6193164;0.57594961;0.87037474;0.48432139;0.61902714;0.48432595;0.61902457;0.19491315;0.57324833;0.19491744;0.57324594;0.7523433;0.46791059;0.5102303;0.62567735;0.56349808;0.87412792;0.17274985;0.57618403;0.75364655;0.46659949;0.18932961;0.59519649;0.61618924;0.86521256;0.61618704;0.86520749;0.47634351;0.61500132;0.58180207;0.86926425;0.48287538;0.61831158;0.19512381;0.57401133;0.62393022;0.86252868;0.73764086;0.49415949;0.56229061;0.87015098;0.17362989;0.57887363;0.59688705;0.87169343;0.59688503;0.87168765;0.17804925;0.5940901;0.7536884;0.46708563;0.189362;0.59530532;0.18936667;0.59530234;0.75312883;0.46833989;0.55833763;0.87138724;0.17284527;0.57613766;0.59556401;0.87219393;0.48141363;0.61723924;0.19529904;0.5748626;0.62414867;0.86243069;0.62413538;0.8624295;0.18507308;0.61417323;0.61093354;0.86589402;0.18223669;0.60606992;0.47916052;0.60714877;0.5773682;0.87009501;0.48396164;0.61887479;0.19496766;0.57343256;0.48207039;0.61127788;0.19469115;0.57598257;0.753169;0.46753994;0.18938544;0.59517688;0.47953093;0.60756075;0.70653272;0.49502143;0.5725224;0.8703984;0.48504406;0.61945409;0.19481491;0.57285279;0.62340033;0.86276931;0.62339193;0.86276567;0.47477245;0.6141991;0.58286148;0.86909026;0.48262808;0.61816877;0.19515865;0.57414615;0.48202801;0.61123228;0.57639778;0.87063843;0.17597111;0.58675534;0.17597587;0.58675379;0.7538178;0.46624377;0.55782557;0.87149668;0.55782574;0.87149078;0.55782598;0.87149078;0.55782628;0.87149101;0.17277311;0.57587934;0.48221004;0.60798019;0.70669836;0.49448633;0.57246739;0.87042272;0.57246751;0.8704167;0.57246763;0.8704167;0.48506141;0.61945868;0.48506626;0.61945593;0.70238084;0.49572223;0.57369536;0.87031591;0.57369542;0.87030905;0.17561552;0.58552843;0.17562027;0.585527;0.1756206;0.58552712;0.17562088;0.58552724;0.60030037;0.87038428;0.1787515;0.59628189;0.17875597;0.59628016;0.75364774;0.46732888;0.7535798;0.46735492;0.55807883;0.87142378;      };
     };
     float_Data @[3] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.2178771;0.67570716;0.36479545;0.021481249;0.28191885;0.70602304;0.30673131;0.016394459;0.016270371;0.39331642;0.39331642;0.30758256;0.30758256;0.39223343;0.30809122;0.30809122;0.70056152;0.70056152;0.0023788414;0.27664503;0.40165296;0.72568476;0.0017085556;0.70318562;0.37075949;0.37075976;0.31766087;0.38848999;0.30979532;0.7001633;0.36574951;0.021669935;0.39907017;0.72418427;0.3838363;0.38383657;0.71659714;0.0021579713;0.70313168;0.70313168;0.0030630464;0.40220571;0.72558135;0.38481992;0.31136304;0.69979036;0.36559129;0.36559954;0.70584804;0.37326849;0.71009523;0.30980945;0.39130759;0.30852625;0.70046139;0.3074868;0.70026916;0.0023633244;0.70312327;0.30945048;0.016485265;0.3939563;0.30728114;0.70075536;0.36613685;0.36614138;0.31960166;0.38784531;0.31007811;0.70009601;0.30752662;0.39223117;0.72013932;0.72013891;0.0014574835;0.40257481;0.40257481;0.40257481;0.40257481;0.72571188;0.3056567;0.015961209;0.39400357;0.39400372;0.39400372;0.30725875;0.30725875;0.016738949;0.39330018;0.39330018;0.72075105;0.72075069;0.72075027;0.72074997;0.38130507;0.71546364;0.71546334;0.0023594783;0.002359445;0.40237647;      };
     };
     float_Data @[4] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 0.034482758;0.57881641;0.50949466;0.7715385;0.86470139;0.62814718;0.88075465;0.81911349;0.82300991;0.52552146;0.52552128;0.87240338;0.87240338;0.52436143;0.87268937;0.87268937;0.6266619;0.6266619;0.76126903;0.86506277;0.52348125;0.58477885;0.75973761;0.60068989;0.50897062;0.50897062;0.87621278;0.52334756;0.87335056;0.62648797;0.50769186;0.77192503;0.5306353;0.58447415;0.51084;0.51084;0.58122903;0.75947088;0.60066247;0.60066259;0.7598384;0.53006816;0.58499044;0.51078504;0.8743943;0.62618589;0.50768727;0.50768745;0.57782674;0.51154369;0.57937908;0.88540894;0.52415377;0.8728267;0.62662572;0.88116139;0.62433857;0.76010936;0.6008032;0.88500035;0.81719613;0.5259105;0.87227464;0.62677139;0.50769645;0.50769663;0.8768549;0.5230968;0.87348503;0.62645245;0.88120753;0.52370715;0.58299232;0.58299285;0.75961244;0.53007096;0.53007066;0.53007019;0.53006983;0.58504128;0.88486451;0.81725729;0.52589506;0.52589488;0.5258947;0.872271;0.872271;0.82267761;0.52551538;0.5255152;0.58325392;0.58325446;0.58325493;0.58325541;0.51095998;0.58081239;0.58081269;0.75943422;0.75952381;0.53010237;      };
     };
     float_Data @[5] {
      name="MotorElbowForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] -0.73469126;-0.60151935;0.20184834;-0.48843822;0.48594826;0.13401362;-0.38050148;0.48811355;0.28011894;-0.41765282;0.89781833;0.089683339;-0.86163032;0.33843315;0.11588536;0.84703922;-0.4322457;0.35043433;0.64192826;-0.22558181;-0.66848999;0.82946682;-0.022540553;0.50963497;0.600959;-0.90989804;-0.043371368;-0.79434448;-0.98404121;0.62802809;0.81581569;-0.49091306;0.97907567;-0.072904132;-0.82864767;-0.55000192;0.46971512;-0.59208679;-0.54537368;0.096817248;-0.45785889;-0.90135747;0.87465531;0.85663986;0.89224154;-0.12027332;-0.47391951;-0.68255836;0.95434546;0.49101153;-0.50469005;-0.83671427;0.76754683;-0.57895017;0.11945336;0.39258355;-0.59352791;-0.24481332;0.018050764;-0.99382603;-0.35690859;0.26967862;-0.22808613;-0.77872318;0.83556592;0.092091642;0.61840111;-0.50033665;0.013712303;-0.49442145;-0.28825286;-0.39384967;-0.33434546;-0.86959803;0.056412239;-0.85636848;0.9980666;-0.44892493;-0.020048987;0.53062081;-0.70407444;-0.15912402;0.9393791;0.72548652;0.94637257;0.74011981;-0.71793795;-0.87050468;-0.88583416;0.68270022;-0.79229909;-0.56759483;-0.99372041;-0.19247654;-0.62906557;0.71824396;0.027107283;-0.36480534;0.9920463;-0.75794393;      };
     };
     float_Data @[6] {
      name="PVe";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1 1 100] 1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;0;1;1;1;1;1;1;1;1;1;1;1;1;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="pvlv_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     double_Data @[10] {
      name="trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     double_Data @[6] {
      name="rew_dist_thr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[10] {
      name="avg_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="TestTrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="pvlv_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     double_Data @[10] {
      name="trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="TestEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     double_Data @[6] {
      name="rew_dist_thr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[10] {
      name="avg_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=$22$;
  tags=;
  desc=;
  Program @[0] {
   name="LeabraStartup";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
   flags=STARTUP_RUN;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects[0].networks[1]$34$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][1]$35$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects[0].programs.gp[1][0]$36$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="set this to point to your batch process";
    };
    ProgVar @[1] {
     name="tag";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="log file directory";
    };
    ProgVar @[3] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="name of log file";
    };
    ProgVar @[4] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][1]$37$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[5] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][0]$38$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[6] {
     name="LeabraUnitSpec_0";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$7$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[7] {
     name="ForceScalarVal";
     var_type=T_Object;
     object_type=ScalarValLayerSpec;
     object_val=$12$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=;
    };
    MiscCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    RegisterArgs @[4] {
     desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
     flags=;
    };
    Comment @[5] {
     desc="Initialize and set variables from args";
     flags=;
    };
    PrintExpr @[6] {
     desc=;
     flags=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
    };
    MethodCall @[7] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[0]$39$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MiscCall @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[1]$40$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[2]$41$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    ProgVarFmArg @[10] {
     desc=;
     flags=;
     prog=$13$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[11] {
     desc=;
     flags=;
     prog=$36$;
     var_name="max_batch";
     arg_name="batches";
    };
    Comment @[12] {
     desc="Custom Params";
     flags=;
    };
    ProgVarFmArg @[13] {
     desc=;
     flags=;
     prog=.projects[0].programs.gp[0][4]$42$;
     var_name="rew_dist_thr_init";
     arg_name="rew_dist_thr_init";
    };
    ProgVarFmArg @[14] {
     desc=;
     flags=;
     prog=$42$;
     var_name="rew_dist_thr_incr";
     arg_name="rew_dist_thr_incr";
    };
    ProgVarFmArg @[15] {
     desc=;
     flags=;
     prog=$42$;
     var_name="avg_rew_dec_thr";
     arg_name="avg_rew_dec_thr";
    };
    ProgVarFmArg @[16] {
     desc=;
     flags=;
     prog=$42$;
     var_name="avg_rew_inc_thr";
     arg_name="avg_rew_inc_thr";
    };
    MemberFmArg @[17] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[6]$43$;
     path="noise.var";
     arg_name="noise_var";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[18] {
     desc=;
     flags=;
     obj=$43$;
     path="da_mod.gain";
     arg_name="da_mod_gain";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[19] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[7]$44$;
     path="inhib.kwta_pt";
     arg_name="kwta_pt";
     update_after=1;
     quiet=0;
    };
    Comment @[20] {
     desc="Set log files";
     flags=;
    };
    MethodCall @[21] {
     desc="save args to file: last arg is to include dmem proc number";
     flags=;
     result_var=.projects[0].programs[0].vars[3]$45$;
     obj=.projects[0].programs[0].vars[4]$46$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".args\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MiscCall @[22] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::FullArgStringToFile;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
     };
    };
    MethodCall @[23] {
     desc="last arg is to include dmem proc number";
     flags=;
     result_var=$45$;
     obj=$46$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[24] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=;
     result_var=NULL;
     obj=$46$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[25] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     result_var=$45$;
     obj=.projects[0].programs[0].vars[5]$47$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[26] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     result_var=NULL;
     obj=$47$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="false";
       };
      };
     };
    };
    OtherProgramVar @[27] {
     desc=;
     flags=;
     other_prog=.projects[0].programs.gp[1][10]$48$;
     set_other=1;
     var_1=$40$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     desc=;
     flags=;
     expr {
      expr="\"Running: \" << batch.name";
     };
    };
    ProgramCall @[29] {
     desc=;
     flags=;
     target=$36$;
     targ_ld_init="*LeabraBatch*";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[0] {
   name="RobotProgs";
   el_typ=Program;
   el_def=0;
   step_prog=NULL;
   tags=;
   desc=;
   Program @[0] {
    name="EmerRobot";
    tags=;
    desc="main code for controlling Emer the robot, including the virtual environment objects for emer etc.";
    flags=;
    objs {
     name=;
     el_typ=VEWorld;
     el_def=0;
     VEWorld @[0] {
      name="VEEmerWorld";
      desc=;
      space_type=HASH_SPACE;
      hash_levels {min=-3: max=10: };
      step_type=STD_STEP;
      stepsize=0.02;
      quick_iters=20;
      gravity {x=0: y=0: z=0: };
      updt_display=1;
      ode_params {
       erp=0.2;
       cfm=1e-05;
       max_cor_vel=1000000;
       contact_depth=0.001;
       max_col_pts=4;
      };
      objects {
       name=;
       el_typ=VEObject;
       el_def=0;
       VEObject @[0] {
	name="Emer";
	desc="emer the robot";
	bodies {
	 name=;
	 el_typ=VEBody;
	 el_def=0;
	 VEBody @[0] {
	  name="Torso";
	  desc=;
	  flags=FIXED;
	  init_pos {x=0: y=0.1: z=0: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0: y=0.1: z=0: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=-1.738567e-06: y=1.750733e-11: z=4.953906e-07: };
	  cur_ang_vel {x=6.145879e-08: y=-6.60967e-07: z=1.864068e-07: };
	  shape=BOX;
	  mass=1;
	  radius=0.5;
	  length=1;
	  long_axis=LONG_X;
	  box {x=0.45: y=0.1: z=0.02: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0: g=1: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	 VEBody @[1] {
	  name="Humerus";
	  desc=;
	  flags=;
	  init_pos {x=0.42: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.42: y=0.2: z=0.03: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=-0.1124848: y=1.061222e-07: z=0.06586304: };
	  cur_ang_vel {x=4.739774e-07: y=-0.7663196: z=1.121114e-07: };
	  shape=CAPSULE;
	  mass=2.1;
	  radius=0.03;
	  length=0.34;
	  long_axis=LONG_X;
	  box {x=0.34: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.2: g=0.2: b=0.4901961: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	 VEBody @[2] {
	  name="Ulna";
	  desc=;
	  flags=;
	  init_pos {x=0.77: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.77: y=0.2: z=0.03: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=-0.3074127: y=1.944388e-07: z=0.00511859: };
	  cur_ang_vel {x=1.442515e-07: y=-0.7663174: z=3.486429e-07: };
	  shape=CAPSULE;
	  mass=1.65;
	  radius=0.02;
	  length=0.34;
	  long_axis=LONG_X;
	  box {x=0.34: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0: g=0: b=1: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	 VEBody @[3] {
	  name="Hand";
	  desc=;
	  flags=;
	  init_pos {x=0.98: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.98: y=0.2: z=0.03: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=-0.3671291: y=-1.890959e-07: z=-0.144412: };
	  cur_ang_vel {x=1.442078e-07: y=-0.7663181: z=3.485494e-07: };
	  shape=SPHERE;
	  mass=0.05;
	  radius=0.025;
	  length=1;
	  long_axis=LONG_X;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0: b=1: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	 VEBody @[4] {
	  name="Head";
	  desc=;
	  flags=FIXED;
	  init_pos {x=0: y=0.35: z=0: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0: y=0.35: z=0: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=-1.151785e-22: y=5.021424e-24: z=-7.514467e-27: };
	  cur_ang_vel {x=2.261275e-17: y=-5.230402e-18: z=-8.351662e-19: };
	  shape=CAPSULE;
	  mass=1;
	  radius=0.1;
	  length=0.25;
	  long_axis=LONG_Y;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.8: b=0.4: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	 VECamera @[5] {
	  name="LeftEye";
	  desc=;
	  flags=;
	  init_pos {x=0.04: y=0.35: z=0.1: };
	  init_rot {x=0: y=1: z=0: rot=3.14159: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.04: y=0.35: z=0.1: };
	  cur_rot {x=0: y=1: z=0: rot=3.14159: };
	  cur_lin_vel {x=-5.44241e-19: y=-2.333267e-18: z=-7.450581e-08: };
	  cur_ang_vel {x=5.461276e-06: y=3.24131e-08: z=6.57009e-09: };
	  shape=CYLINDER;
	  mass=0.01;
	  radius=0.01;
	  length=0.01;
	  long_axis=LONG_Z;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color=1;
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	  img_size {x=320: y=240: };
	  view_dist {
	   near=0.1;
	   focal=1;
	   far=10;
	  };
	  field_of_view=120;
	  antialias_scale=2;
	  light {
	   on=1;
	   intensity=0.2;
	   color {r=1: g=1: b=1: a=1: };
	  };
	  dir_norm {x=-2.535182e-06: y=0: z=1: };
	 };
	 VECamera @[6] {
	  name="RightEye";
	  desc=;
	  flags=;
	  init_pos {x=-0.04: y=0.35: z=0.1: };
	  init_rot {x=0: y=1: z=0: rot=3.14159: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=-0.04: y=0.35: z=0.1: };
	  cur_rot {x=0: y=1: z=0: rot=3.14159: };
	  cur_lin_vel {x=-5.598681e-19: y=-2.272033e-18: z=-7.450581e-08: };
	  cur_ang_vel {x=5.461276e-06: y=3.24131e-08: z=6.57009e-09: };
	  shape=CYLINDER;
	  mass=0.01;
	  radius=0.01;
	  length=0.01;
	  long_axis=LONG_Z;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color=1;
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	  img_size {x=320: y=240: };
	  view_dist {
	   near=0.1;
	   focal=1;
	   far=10;
	  };
	  field_of_view=120;
	  antialias_scale=2;
	  light {
	   on=1;
	   intensity=0.2;
	   color {r=1: g=1: b=1: a=1: };
	  };
	  dir_norm {x=-2.535182e-06: y=0: z=1: };
	 };
	 VEBody @[7] {
	  name="Pectoralis";
	  desc=;
	  flags=;
	  init_pos {x=0.3: y=0.25: z=0.05: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.3: y=0.25: z=0.05: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.15;
	  radius=0.01;
	  length=0.1282123;
	  long_axis=LONG_X;
	  box {x=0.27: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.1176471: b=0.2039216: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	 VEBody @[8] {
	  name="Deltoid";
	  desc=;
	  flags=;
	  init_pos {x=0.3: y=0.25: z=-0.05: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.3: y=0.25: z=-0.05: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.15;
	  radius=0.01;
	  length=0.07178771;
	  long_axis=LONG_X;
	  box {x=0.27: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.1176471: b=0.2039216: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	};
	joints {
	 name=;
	 el_typ=VEMuscleJoint;
	 el_def=0;
	 VEMuscleJoint @[0] {
	  name="Shoulder";
	  desc=;
	  flags=FEEDBACK;
	  body1=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[0]$49$;
	  body2=$19$;
	  joint_type=HINGE;
	  anchor {x=0.25: y=0: z=0.03: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  stops {
	   stops_on=1;
	   lo=-0.78;
	   hi=2.8;
	   def=1;
	   bounce=0.1;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=0;
	   f_max=0.5528747;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-05;
	   no_stop_cfm=1e-05;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-05;
	  };
	  pos=0;
	  pos_norm=0.2178771;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	  flexor {
	   name="Pectoralis";
	   lambda_norm=0.4972067;
	   lambda=0.08372067;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1002793;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1282123;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[7]$50$;
	  };
	  extensor {
	   name="Deltoid";
	   lambda_norm=0.4972067;
	   lambda=0.08372067;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.09972067;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.07178771;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[8]$51$;
	  };
	  flexor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=2.802597e-45;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=1.356313e-19;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  targ_norm_angle=0.4972067;
	  targ_angle=1;
	  targ_norm_angle2=0;
	  targ_angle2=0;
	  co_contract_pct=0.4;
	 };
	 VEMuscleJoint @[1] {
	  name="Elbow";
	  desc=;
	  flags=FEEDBACK;
	  body1=$19$;
	  body2=$20$;
	  joint_type=HINGE;
	  anchor {x=0.18: y=0: z=0.025: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  stops {
	   stops_on=1;
	   lo=-0.1;
	   hi=2.8;
	   def=1;
	   bounce=0.1;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=0;
	   f_max=0.2939057;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-05;
	   no_stop_cfm=1e-05;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-05;
	  };
	  pos=0;
	  pos_norm=0.03448276;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	  flexor {
	   name="Bicep";
	   lambda_norm=0.3793104;
	   lambda=0.2981379;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.02;
	   len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	   co_contract_len=0.04;
	   rest_len=0.3358621;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.3668966;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor {
	   name="Tricep";
	   lambda_norm=0.3793104;
	   lambda=0.2981379;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.02;
	   len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	   co_contract_len=0.04;
	   rest_len=0.3141379;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.2831034;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  flexor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=5.240856e-43;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=2.127124e-19;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  targ_norm_angle=0.3793104;
	  targ_angle=1;
	  targ_norm_angle2=0;
	  targ_angle2=0;
	  co_contract_pct=0.4;
	 };
	 VEJoint @[2] {
	  name="Wrist";
	  desc=;
	  flags=FEEDBACK;
	  body1=$20$;
	  body2=$21$;
	  joint_type=FIXED;
	  anchor {x=0.15: y=0: z=0: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  stops {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-05;
	   no_stop_cfm=1e-05;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-05;
	  };
	  pos=0;
	  pos_norm=0;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	 VEJoint @[3] {
	  name="LeftEyeJoint";
	  desc=;
	  flags=FEEDBACK;
	  body1=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[4]$52$;
	  body2=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[5]$53$;
	  joint_type=UNIVERSAL;
	  anchor {x=0.04: y=0: z=0.1: };
	  axis {x=1: y=0: z=0: };
	  axis2 {x=0: y=1: z=0: };
	  stops {
	   stops_on=1;
	   lo=-1;
	   hi=1;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=1;
	   lo=-3;
	   hi=3;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=-0.1;
	   f_max=10;
	   servo_on=1;
	   trg_pos=-0.2;
	   gain=0.5;
	  };
	  motor2 {
	   motor_on=1;
	   vel=0;
	   f_max=10;
	   servo_on=1;
	   trg_pos=0;
	   gain=0.5;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-05;
	   no_stop_cfm=1e-05;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-05;
	  };
	  pos=0;
	  pos_norm=0.5;
	  vel=0;
	  pos2=0;
	  pos2_norm=0.5;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	 VEJoint @[4] {
	  name="RightEyeJoint";
	  desc=;
	  flags=FEEDBACK;
	  body1=$52$;
	  body2=.projects[0].programs.gp[0][0].objs[0].objects[0].bodies[6]$54$;
	  joint_type=UNIVERSAL;
	  anchor {x=-0.04: y=0: z=0.1: };
	  axis {x=1: y=0: z=0: };
	  axis2 {x=0: y=1: z=0: };
	  stops {
	   stops_on=1;
	   lo=-1;
	   hi=1;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=1;
	   lo=-3;
	   hi=3;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=-0.1;
	   f_max=10;
	   servo_on=1;
	   trg_pos=-0.2;
	   gain=0.5;
	  };
	  motor2 {
	   motor_on=1;
	   vel=0;
	   f_max=10;
	   servo_on=1;
	   trg_pos=0;
	   gain=0.5;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-05;
	   no_stop_cfm=1e-05;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-05;
	  };
	  pos=0;
	  pos_norm=0.5;
	  vel=0;
	  pos2=0;
	  pos2_norm=0.5;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	};
	space_type=SIMPLE_SPACE;
	hash_levels {min=1: max=4: };
       };
       VEObject @[1] {
	name="Target";
	desc=;
	bodies {
	 name=;
	 el_typ=VEBody;
	 el_def=0;
	 VEBody @[0] {
	  name="TargetBody";
	  desc=;
	  flags=FIXED;
	  init_pos {x=-0.4218768: y=0.12: z=0.2188128: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=-0.4218768: y=0.12: z=0.2188128: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=SPHERE;
	  mass=1;
	  radius=0.02;
	  length=0.1;
	  long_axis=LONG_Y;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname="Banana.iv";
	  set_color=1;
	  color {r=1: g=1: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0.5;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	};
	joints {
	 name=;
	 el_typ=VEJoint;
	 el_def=0;
	};
	space_type=SIMPLE_SPACE;
	hash_levels {min=1: max=4: };
       };
      };
      spaces {
       name=;
       el_typ=VESpace;
       el_def=0;
       VESpace @[0] {
	name="RoomSpace";
	desc=;
	static_els {
	 name=;
	 el_typ=VEStatic;
	 el_def=0;
	 VEStatic @[0] {
	  name="Ground";
	  desc=;
	  flags=;
	  pos {x=0: y=0: z=0: };
	  rot {x=0: y=0: z=1: rot=0: };
	  shape=PLANE;
	  radius=0.2;
	  length=1;
	  long_axis=LONG_X;
	  box {x=1: y=1: z=1: };
	  plane_norm=NORM_Y;
	  plane_height=0;
	  plane_vis_size {x=3: y=3: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.4: g=0.4: b=0.4: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	 VEStatic @[1] {
	  name="BackWall";
	  desc=;
	  flags=;
	  pos {x=0: y=1.5: z=-1.5: };
	  rot {x=0: y=0: z=1: rot=0: };
	  shape=BOX;
	  radius=0.2;
	  length=1;
	  long_axis=LONG_X;
	  box {x=3: y=3: z=0.01: };
	  plane_norm=NORM_Y;
	  plane_height=2.28735e-14;
	  plane_vis_size {x=100: y=100: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.7019608: g=0.7019608: b=0.7019608: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-05;
	  };
	 };
	};
	space_type=HASH_SPACE;
	hash_levels {min=-3: max=10: };
       };
      };
      textures {
       name=;
       el_typ=VETexture;
       el_def=0;
      };
      camera_0=$53$;
      camera_1=$54$;
      bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      sun_light {
       on=1;
       intensity=0.5;
       color {r=1: g=1: b=1: a=1: };
      };
      light_0=NULL;
      light_1=NULL;
     };
     DataTable @[1] {
      name="ArmOutputData";
      desc=;
      data {
       name="data";
       el_typ=String_Data;
       el_def=0;
       String_Data @[0] {
	name="Reach_Name";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[1] {
	name="Reach_No";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[2] {
	name="Hand_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[3] {
	name="Hand_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[4] {
	name="Hand_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[5] {
	name="Target_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[6] {
	name="Target_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[7] {
	name="Target_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[8] {
	name="Hand_cur_lin_vel_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[9] {
	name="Hand_cur_lin_vel_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[10] {
	name="Hand_cur_lin_vel_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[11] {
	name="Should_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[12] {
	name="Should_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[13] {
	name="Should_force_in";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[14] {
	name="Elbow_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[15] {
	name="Elbow_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[16] {
	name="Elbow_force_in";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[17] {
	name="n_steps";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[18] {
	name="angle_err";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[19] {
	name="trg_dist";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[2] {
      name="ReachOutputData";
      desc=;
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @[0] {
	name="time";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[1] {
	name="Hand_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[2] {
	name="Hand_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[3] {
	name="Hand_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[4] {
	name="Target_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[5] {
	name="Target_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[6] {
	name="Target_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[7] {
	name="Hand_cur_lin_vel_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[8] {
	name="Hand_cur_lin_vel_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[9] {
	name="Hand_cur_lin_vel_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[10] {
	name="Should_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[11] {
	name="Should_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[12] {
	name="Should_flexor_len";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[13] {
	name="Should_flexor_dlen";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[14] {
	name="Should_flexor_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[15] {
	name="Should_flexor_m_act_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[16] {
	name="Should_flexor_m_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[17] {
	name="Should_flexor_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[18] {
	name="Should_extensor_len";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[19] {
	name="Should_extensor_dlen";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[20] {
	name="Should_extensor_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[21] {
	name="Should_extensor_m_act_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[22] {
	name="Should_extensor_m_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[23] {
	name="Should_extensor_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[24] {
	name="should_cur_trg";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[25] {
	name="Elbow_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[26] {
	name="Elbow_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[27] {
	name="Elbow_force_in";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @[28] {
	name="elbow_cur_trg";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[0] 	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     NetMonitor @[3] {
      name="ArmMonitor";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="Reach_Name";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="Reach_No";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="Hand_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="Hand_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="Hand_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="Target_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=.projects[0].programs.gp[0][0].objs[0].objects[1].bodies[0]$55$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="Target_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$55$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="Target_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$55$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="Hand_cur_lin_vel_x";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_lin_vel.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="Hand_cur_lin_vel_y";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_lin_vel.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="Hand_cur_lin_vel_z";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_lin_vel.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="Should_pos";
	computed=0;
	object_type=VEJoint;
	object=.projects[0].programs.gp[0][0].objs[0].objects[0].joints[0]$56$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="Should_vel";
	computed=0;
	object_type=VEJoint;
	object=$56$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="Should_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="Elbow_pos";
	computed=0;
	object_type=VEJoint;
	object=.projects[0].programs.gp[0][0].objs[0].objects[0].joints[1]$57$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="Elbow_vel";
	computed=0;
	object_type=VEJoint;
	object=$57$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="Elbow_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="n_steps";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="angle_err";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="trg_dist";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=.projects[0].networks[0]$58$;
      data=.projects[0].programs.gp[0][0].objs[1]$59$;
      rmv_orphan_cols=1;
     };
     NetMonitor @[4] {
      name="ReachMonitor";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="time";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="Hand_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="Hand_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="Hand_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="Target_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$55$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="Target_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$55$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="Target_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$55$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="Hand_cur_lin_vel_x";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_lin_vel.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="Hand_cur_lin_vel_y";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_lin_vel.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="Hand_cur_lin_vel_z";
	computed=0;
	object_type=VEBody;
	object=$21$;
	variable="cur_lin_vel.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="Should_pos";
	computed=0;
	object_type=VEJoint;
	object=$56$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="Should_vel";
	computed=0;
	object_type=VEJoint;
	object=$56$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="Should_flexor_len";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="flexor.len";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="Should_flexor_dlen";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="flexor.dlen";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="Should_flexor_act";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="flexor.act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="Should_flexor_m_act_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="flexor.m_act_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="Should_flexor_m_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="flexor.m_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="Should_flexor_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="flexor.force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="Should_extensor_len";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="extensor.len";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="Should_extensor_dlen";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="extensor.dlen";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="Should_extensor_act";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="extensor.act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="Should_extensor_m_act_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="extensor.m_act_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="Should_extensor_m_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="extensor.m_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="Should_extensor_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$56$;
	variable="extensor.force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="should_cur_trg";
	computed=1;
	object_type=VEMuscleJoint;
	object=NULL;
	variable="extensor.force";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="Elbow_pos";
	computed=0;
	object_type=VEJoint;
	object=$57$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="Elbow_vel";
	computed=0;
	object_type=VEJoint;
	object=$57$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[27] {
	name="Elbow_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[28] {
	name="elbow_cur_trg";
	computed=1;
	object_type=VEMuscleJoint;
	object=NULL;
	variable="extensor.force";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$58$;
      data=.projects[0].programs.gp[0][0].objs[2]$60$;
      rmv_orphan_cols=1;
     };
     taImage @[5] {
      name="LeftEyeImage";
     };
     taImage @[6] {
      name="RightEyeImage";
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="gen_rnd_angles";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="generate a new random angles";
     };
     ProgVar @[1] {
      name="shoulder_trg_angle_norm";
      var_type=T_Real;
      real_val=0.699999988079071;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="normalized 0..1 angle value";
     };
     ProgVar @[2] {
      name="elbow_trg_angle_norm";
      var_type=T_Real;
      real_val=0.6000000238418579;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="normalized 0..1 angle value";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="VEEmerWorld";
      var_type=T_Object;
      object_type=VEWorld;
      object_val=$15$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$56$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$57$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="Hand";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$21$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="Torso";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$49$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="Humerus";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$19$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="Ulna";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$20$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$55$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="co_contract_pct";
      var_type=T_Real;
      real_val=0.4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how much to co-contract the muscles for the movement";
     };
     ProgVar @[9] {
      name="angle_inc";
      var_type=T_Real;
      real_val=0.02;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="increment in angle control to provide";
     };
     ProgVar @[10] {
      name="angle_updt_interval";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how frequently to provide new angle commands";
     };
     ProgVar @[11] {
      name="ve_step";
      var_type=T_Int;
      int_val=133;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="max_ve_steps";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of ve steps to take per movement";
     };
     ProgVar @[13] {
      name="min_ve_steps";
      var_type=T_Int;
      int_val=20;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="minimum number of ve steps to take per movement";
     };
     ProgVar @[14] {
      name="reach_mon_on";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="whether to monitor at the reach level";
     };
     ProgVar @[15] {
      name="capture_images";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="whether to monitor at the reach level";
     };
     ProgVar @[16] {
      name="shoulder_cur_trg_angle";
      var_type=T_Real;
      real_val=0.2178771048784256;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current target angle: is incremented linearly to produce the control trajectory";
     };
     ProgVar @[17] {
      name="shoulder_pos_dir";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="positive angle direction (else neg)";
     };
     ProgVar @[18] {
      name="shoulder_angle_err";
      var_type=T_Real;
      real_val=0.01639445871113838;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="angle err relative to target";
     };
     ProgVar @[19] {
      name="elbow_cur_trg_angle";
      var_type=T_Real;
      real_val=0.03448275849223137;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[20] {
      name="elbow_pos_dir";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[21] {
      name="elbow_angle_err";
      var_type=T_Real;
      real_val=0.01911342144012451;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="angle err relative to target";
     };
     ProgVar @[22] {
      name="angle_err";
      var_type=T_Real;
      real_val=0.01775394007563145;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="total angular error across both joints";
     };
     ProgVar @[23] {
      name="hand_vel";
      var_type=T_Real;
      real_val=0.3945106267929077;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[24] {
      name="hand_vel_thr";
      var_type=T_Real;
      real_val=0.0001;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="threshold for stopping movement in hand velocity";
     };
     ProgVar @[25] {
      name="ArmOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$59$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[26] {
      name="ArmMonitor";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][0].objs[3]$61$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[27] {
      name="ReachMonitor";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][0].objs[4]$62$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[28] {
      name="ReachOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$60$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[29] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="total length of the arm, for target range computations";
     };
     ProgVar @[30] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[31] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[32] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[33] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[34] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[35] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[36] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=0.7051532255802703;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[37] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.4950937811564071;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[38] {
      name="targ_pos_x_norm";
      var_type=T_Real;
      real_val=0.9790345654009081;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[39] {
      name="targ_pos_z_norm";
      var_type=T_Real;
      real_val=0.437086005836738;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[40] {
      name="trg_dist";
      var_type=T_Real;
      real_val=0.2799569368362427;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="distance from target";
     };
     ProgVar @[41] {
      name="LeftEyeImage";
      var_type=T_Object;
      object_type=taImage;
      object_val=.projects[0].programs.gp[0][0].objs[5]$63$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[42] {
      name="RightEyeImage";
      var_type=T_Object;
      object_type=taImage;
      object_val=.projects[0].programs.gp[0][0].objs[6]$64$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][0].vars[0]$65$;
      method=VEWorld::Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][0].vars[26]$66$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][0].vars[27]$67$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     ResetDataRows @[3] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[0][0].vars[25]$68$;
     };
     ResetDataRows @[4] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[0][0].vars[28]$69$;
     };
     AssignExpr @[5] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[16]$70$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[19]$71$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[29]$72$;
      expr {
       expr="Humerus.length + Ulna.length + Hand.radius+.04";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[30]$73$;
      expr {
       expr="Torso.cur_pos.x + .5 * Torso.box.x + .03";
      };
     };
     AssignExpr @[9] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[31]$74$;
      expr {
       expr="Torso.cur_pos.z";
      };
     };
     AssignExpr @[10] {
      desc="assume reaching out in front of plane";
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[32]$75$;
      expr {
       expr="shoulder_x_pos + arm_tot_len";
      };
     };
     AssignExpr @[11] {
      desc="can stick hand through torso now..";
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[33]$76$;
      expr {
       expr="shoulder_z_pos - Ulna.length";
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[34]$77$;
      expr {
       expr="shoulder_x_pos - arm_tot_len";
      };
     };
     AssignExpr @[13] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[35]$78$;
      expr {
       expr="shoulder_z_pos + arm_tot_len";
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     If @[0] {
      desc=;
      flags=;
      cond {
       expr="gen_rnd_angles";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       Comment @[0] {
	desc="= Generate Random Forces =";
	flags=;
       };
       RandomCall @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][0].args[1]$79$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=0;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=0;
	  def_val=;
	  expr {
	   expr="1.0";
	  };
	 };
	};
       };
       RandomCall @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][0].args[2]$80$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=0;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=0;
	  def_val=;
	  expr {
	   expr="1.0";
	  };
	 };
	};
       };
      };
     };
     Comment @[1] {
      desc="= Run the World =";
      flags=;
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=$70$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=;
      result_var=$71$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[17]$81$;
      expr {
       expr="(shoulder_trg_angle_norm > shoulder_cur_trg_angle)";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[20]$82$;
      expr {
       expr="(elbow_trg_angle_norm > elbow_cur_trg_angle)";
      };
     };
     ResetDataRows @[6] {
      desc=;
      flags=;
      data_var=$69$;
     };
     ForLoop @[7] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       If @[0] {
	desc="provide new target EP angles at given increments along trajectory";
	flags=;
	cond {
	 expr="ve_step % angle_updt_interval == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="shoulder_pos_dir";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=;
	    var=$70$;
	    expr {
	     expr="angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=;
	    result_var=$70$;
	    expr {
	     expr="MIN(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=;
	    var=$70$;
	    expr {
	     expr="-angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=;
	    result_var=$70$;
	    expr {
	     expr="MAX(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 IfElse @[1] {
	  desc=;
	  flags=;
	  cond {
	   expr="elbow_pos_dir";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=;
	    var=$71$;
	    expr {
	     expr="angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=;
	    result_var=$71$;
	    expr {
	     expr="MIN(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=;
	    var=$71$;
	    expr {
	     expr="-angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=;
	    result_var=$71$;
	    expr {
	     expr="MAX(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 MethodCall @[2] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=.projects[0].programs.gp[0][0].vars[1]$83$;
	  method=VEMuscleJoint::SetTargNormAngle;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle";
	    required=1;
	    def_val=;
	    expr {
	     expr="shoulder_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="co_contract";
	    required=1;
	    def_val=;
	    expr {
	     expr="co_contract_pct";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle2";
	    required=0;
	    def_val="0.0f";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=.projects[0].programs.gp[0][0].vars[2]$84$;
	  method=VEMuscleJoint::SetTargNormAngle;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle";
	    required=1;
	    def_val=;
	    expr {
	     expr="elbow_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="co_contract";
	    required=1;
	    def_val=;
	    expr {
	     expr="co_contract_pct";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle2";
	    required=0;
	    def_val="0.0f";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	};
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$65$;
	method=VEWorld::Step;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       If @[2] {
	desc="monitor details about the reach itself -- slows things down quite a bit..";
	flags=;
	cond {
	 expr="reach_mon_on";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AddNewDataRow @[0] {
	  desc=;
	  flags=;
	  data_var=$69$;
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$67$;
	  method=NetMonitor::GetMonVals;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[2] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$69$;
	  method=DataBlock::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="const Variant&";
	    name="data";
	    required=0;
	    def_val=;
	    expr {
	     expr="ve_step";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="ch_nm";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="\"time\"";
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$69$;
	  method=DataBlock::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="const Variant&";
	    name="data";
	    required=0;
	    def_val=;
	    expr {
	     expr="shoulder_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="ch_nm";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="\"should_cur_trg\"";
	    };
	   };
	  };
	 };
	 MethodCall @[4] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$69$;
	  method=DataBlock::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="const Variant&";
	    name="data";
	    required=0;
	    def_val=;
	    expr {
	     expr="elbow_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="ch_nm";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="\"elbow_cur_trg\"";
	    };
	   };
	  };
	 };
	 DoneWritingDataRow @[5] {
	  desc=;
	  flags=;
	  data_var=$68$;
	 };
	};
       };
       If @[3] {
	desc="see if hand velocity is sufficiently slow in magnitude that we can consider the movement over";
	flags=;
	cond {
	 expr="ve_step > min_ve_steps";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][0].vars[23]$85$;
	  expr {
	   expr="Hand.cur_lin_vel.Mag()";
	  };
	 };
	 IfBreak @[1] {
	  desc=;
	  flags=;
	  cond {
	   expr="hand_vel < hand_vel_thr";
	  };
	 };
	};
       };
       StopStepPoint @[4] {
	desc=;
	flags=;
       };
      };
      init {
       expr="ve_step = 0";
      };
      test {
       expr="ve_step < max_ve_steps";
      };
      iter {
       expr="ve_step++";
      };
     };
     Comment @[8] {
      desc="= Compute Distance to Target =";
      flags=;
     };
     AssignExpr @[9] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[36]$86$;
      expr {
       expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[10] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[37]$87$;
      expr {
       expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[11] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[38]$88$;
      expr {
       expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[39]$89$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[13] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[40]$90$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     MathCall @[14] {
      desc=;
      flags=;
      result_var=$90$;
      object_type=taMath_float;
      method=taMath_float::euc_dist;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="x1";
	required=0;
	def_val=;
	expr {
	 expr="targ_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=float;
	type="float";
	name="y1";
	required=0;
	def_val=;
	expr {
	 expr="targ_pos_z_norm";
	};
       };
       ProgArg @[2] {
	arg_type=float;
	type="float";
	name="x2";
	required=0;
	def_val=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[3] {
	arg_type=float;
	type="float";
	name="y2";
	required=0;
	def_val=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
      };
     };
     Comment @[15] {
      desc="= Read Out the State =";
      flags=;
     };
     AssignExpr @[16] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[18]$91$;
      expr {
       expr="fabs(Shoulder.pos_norm - shoulder_trg_angle_norm)";
      };
     };
     AssignExpr @[17] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[21]$92$;
      expr {
       expr="fabs(Elbow.pos_norm - elbow_trg_angle_norm)";
      };
     };
     AssignExpr @[18] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[22]$93$;
      expr {
       expr=".5 * (shoulder_angle_err + elbow_angle_err)";
      };
     };
     AddNewDataRow @[19] {
      desc=;
      flags=;
      data_var=$68$;
     };
     MethodCall @[20] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$66$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[21] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$68$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="shoulder_cur_trg_angle";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Should_force_in\"";
	};
       };
      };
     };
     MethodCall @[22] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$68$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="elbow_cur_trg_angle";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Elbow_force_in\"";
	};
       };
      };
     };
     MethodCall @[23] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$68$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="ve_step";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"n_steps\"";
	};
       };
      };
     };
     MethodCall @[24] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$68$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="angle_err";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"angle_err\"";
	};
       };
      };
     };
     MethodCall @[25] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$68$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="trg_dist";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"trg_dist\"";
	};
       };
      };
     };
     MethodCall @[26] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$68$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="ArmOutputData.rows";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Reach_No\"";
	};
       };
      };
     };
     MethodCall @[27] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$68$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="ArmOutputData.rows";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Reach_Name\"";
	};
       };
      };
     };
     DoneWritingDataRow @[28] {
      desc=;
      flags=;
      data_var=$68$;
     };
     Comment @[29] {
      desc="= Capture Eye Images =";
      flags=;
     };
     If @[30] {
      desc=;
      flags=;
      cond {
       expr="capture_images";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$65$;
	method=VEWorld::GetCameraTaImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taImage_ref;
	  type="taImage&";
	  name="ta_img";
	  required=0;
	  def_val=;
	  expr {
	   expr="LeftEyeImage";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="camera_no";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$65$;
	method=VEWorld::GetCameraTaImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taImage_ref;
	  type="taImage&";
	  name="ta_img";
	  required=0;
	  def_val=;
	  expr {
	   expr="RightEyeImage";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="camera_no";
	  required=0;
	  def_val=;
	  expr {
	   expr="1";
	  };
	 };
	};
       };
       MethodCall @[2] {
	desc=;
	flags=OFF;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][0].vars[41]$94$;
	method=taImage::SaveImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"test_image_\" + ArmOutputData.rows + \".jpg\"";
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @[1] {
    name="SetTarget";
    tags=;
    desc=;
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="gen_rnd_targ";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="generate a new random target location";
     };
     ProgVar @[1] {
      name="targ_angle";
      var_type=T_Real;
      real_val=2.828927804927618;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="target angle from shoulder joint";
     };
     ProgVar @[2] {
      name="targ_dist";
      var_type=T_Real;
      real_val=0.7113658017407445;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="target distance from shoulder joint";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$55$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="total length of the arm, for target range computations";
     };
     ProgVar @[2] {
      name="targ_x";
      var_type=T_Real;
      real_val=-0.4218768404294073;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="location of target";
     };
     ProgVar @[3] {
      name="targ_z";
      var_type=T_Real;
      real_val=0.2188128306236989;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="location of target";
     };
     ProgVar @[4] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[5] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[6] {
      name="rnd_angle_min";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="minimum angle for rnd gen";
     };
     ProgVar @[7] {
      name="rnd_angle_max";
      var_type=T_Real;
      real_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum angle for rnd gen";
     };
     ProgVar @[8] {
      name="rnd_dist_min";
      var_type=T_Real;
      real_val=0.2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="minimum radial distance for rnd gen";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][1].vars[1]$95$;
      var_2=.projects[0].programs.gp[0][1].vars[4]$96$;
      var_3=.projects[0].programs.gp[0][1].vars[5]$97$;
      var_4=NULL;
     };
     If @[1] {
      desc=;
      flags=;
      cond {
       expr="gen_rnd_targ";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].args[1]$98$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=0;
	  def_val=;
	  expr {
	   expr="rnd_angle_min";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=0;
	  def_val=;
	  expr {
	   expr="rnd_angle_max";
	  };
	 };
	};
       };
       RandomCall @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].args[2]$99$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=0;
	  def_val=;
	  expr {
	   expr="rnd_dist_min";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=0;
	  def_val=;
	  expr {
	   expr="arm_tot_len";
	  };
	 };
	};
       };
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[2]$100$;
      expr {
       expr="shoulder_x_pos + targ_dist * cos(targ_angle)";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[3]$101$;
      expr {
       expr="shoulder_z_pos + targ_dist * sin(targ_angle)";
      };
     };
     MemberAssign @[4] {
      desc=;
      flags=;
      obj=.projects[0].programs.gp[0][1].vars[0]$102$;
      path="init_pos.x";
      expr {
       expr="targ_x";
      };
      update_after=0;
     };
     MemberAssign @[5] {
      desc=;
      flags=;
      obj=$102$;
      path="init_pos.z";
      expr {
       expr="targ_z";
      };
      update_after=0;
     };
     MethodCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$102$;
      method=VEBody::SetValsToODE;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="RobotGetCurInputs";
    tags=;
    desc="get input data for forward model: current status inputs -- before running Robot";
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$55$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="Hand";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$21$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$56$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$57$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="total length of the arm, for target range computations";
     };
     ProgVar @[5] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[6] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[7] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[8] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[9] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[10] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[11] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=0.7051532255802703;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[12] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.4950937811564071;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[13] {
      name="targ_pos_x_norm";
      var_type=T_Real;
      real_val=0.04572024500232568;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[14] {
      name="targ_pos_z_norm";
      var_type=T_Real;
      real_val=0.5150348582067115;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[15] {
      name="shoulder_ang_norm";
      var_type=T_Real;
      real_val=0.01639445871114731;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized angle";
     };
     ProgVar @[16] {
      name="elbow_ang_norm";
      var_type=T_Real;
      real_val=0.8191134929656982;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized angle";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][2].vars[4]$103$;
      var_2=.projects[0].programs.gp[0][2].vars[5]$104$;
      var_3=.projects[0].programs.gp[0][2].vars[6]$105$;
      var_4=NULL;
     };
     OtherProgramVar @[1] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][2].vars[7]$106$;
      var_2=.projects[0].programs.gp[0][2].vars[9]$107$;
      var_3=.projects[0].programs.gp[0][2].vars[8]$108$;
      var_4=.projects[0].programs.gp[0][2].vars[10]$109$;
     };
     Comment @[2] {
      desc="= get all the data  -- compute here b/c this is BEFORE Arm is run =";
      flags=;
     };
     AssignExpr @[3] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[11]$110$;
      expr {
       expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[12]$111$;
      expr {
       expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[13]$112$;
      expr {
       expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[14]$113$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[15]$114$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[16]$115$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     Comment @[9] {
      desc="= write to the data table -- assumes row added and set as target =";
      flags=;
     };
     MethodCall @[10] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].args[0]$116$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[11] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$116$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     MethodCall @[12] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$116$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="targ_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"VisTarget_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[13] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$116$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="targ_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"VisTarget_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     MethodCall @[14] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$116$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="shoulder_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"SomaShoulderAngle_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[15] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$116$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="elbow_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"SomaElbowAngle_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="FwdModelPredTargs";
    tags=;
    desc="get input data for forward mode: targets for predictions (after running Robot)";
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$56$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$57$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="total length of the arm, for target range computations";
     };
     ProgVar @[3] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[4] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="position of shoulder joint";
     };
     ProgVar @[5] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[6] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[7] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[8] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed max hand pos";
     };
     ProgVar @[9] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=0.9311804767873835;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[10] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.4031269190452951;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized pos";
     };
     ProgVar @[11] {
      name="shoulder_trg_angle_norm";
      var_type=T_Real;
      real_val=0.09080483280671336;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized 0..1 motor control value";
     };
     ProgVar @[12] {
      name="elbow_trg_angle_norm";
      var_type=T_Real;
      real_val=0.4336864937837698;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[13] {
      name="shoulder_ang_norm";
      var_type=T_Real;
      real_val=0.08846060186624527;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized angle";
     };
     ProgVar @[14] {
      name="elbow_ang_norm";
      var_type=T_Real;
      real_val=0.4091070890426636;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized angle";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     Comment @[0] {
      desc="== get all the data in normalized form ==";
      flags=;
     };
     OtherProgramVar @[1] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][3].vars[2]$117$;
      var_2=.projects[0].programs.gp[0][3].vars[3]$118$;
      var_3=.projects[0].programs.gp[0][3].vars[4]$119$;
      var_4=NULL;
     };
     OtherProgramVar @[2] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][3].vars[5]$120$;
      var_2=.projects[0].programs.gp[0][3].vars[7]$121$;
      var_3=.projects[0].programs.gp[0][3].vars[6]$122$;
      var_4=.projects[0].programs.gp[0][3].vars[8]$123$;
     };
     OtherProgramVar @[3] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][3].vars[9]$124$;
      var_2=.projects[0].programs.gp[0][3].vars[10]$125$;
      var_3=NULL;
      var_4=NULL;
     };
     AssignExpr @[4] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][3].vars[13]$126$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][3].vars[14]$127$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     OtherProgramVar @[6] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][3].vars[11]$128$;
      var_2=.projects[0].programs.gp[0][3].vars[12]$129$;
      var_3=NULL;
      var_4=NULL;
     };
     Comment @[7] {
      desc="== write to the data table -- assumes row added and set as target ==";
      flags=;
     };
     MethodCall @[8] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][3].args[0]$130$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[9] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$130$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     MethodCall @[10] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$130$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="shoulder_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"SomaShoulderAngle_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[11] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$130$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="elbow_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"SomaElbowAngle_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[12] {
      desc="this must be done here because random forces generated after grabbing cur inputs";
      flags=;
      result_var=NULL;
      obj=$130$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="shoulder_trg_angle_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"MotorShoulderForce\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[13] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$130$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="elbow_trg_angle_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"MotorElbowForce\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     DoneWritingDataRow @[14] {
      desc=;
      flags=;
      data_var=$130$;
     };
    };
   };
   Program @[4] {
    name="RLModelRew";
    tags=;
    desc="get input data for RL model: reward value (after running Robot)";
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trg_dist";
      var_type=T_Real;
      real_val=0.2799569368362427;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="distance from target";
     };
     ProgVar @[1] {
      name="rew_val";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="reward value";
     };
     ProgVar @[2] {
      name="rew_dist_thr";
      var_type=T_Real;
      real_val=0.4;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="threshold on distance to get a reward: updated as a function of network performance";
     };
     ProgVar @[3] {
      name="rew_dist_thr_init";
      var_type=T_Real;
      real_val=0.4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="initial threshold on distance to get a reward at start of training";
     };
     ProgVar @[4] {
      name="rew_dist_thr_incr";
      var_type=T_Real;
      real_val=0.01;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how much to change the distance threshold when network is doing well or poorly (see avg_rew_*_thr)";
     };
     ProgVar @[5] {
      name="avg_rew_dec_thr";
      var_type=T_Real;
      real_val=0.8;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="threshold on network avg_rew for decreasing the reward threshold (makes the task harder -- when doing well)";
     };
     ProgVar @[6] {
      name="avg_rew_inc_thr";
      var_type=T_Real;
      real_val=0.2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="threshold on network avg_rew for increasing the reward threshold (makes task easier -- when doing poorly)";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][4].vars[2]$131$;
      expr {
       expr="rew_dist_thr_init";
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=;
      other_prog=$22$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][4].vars[0]$132$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     If @[1] {
      desc="on first trial of new epoch, update the reward threshold based on performance";
      flags=;
      cond {
       expr="network.trial == 0";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       IfElse @[0] {
	desc=;
	flags=;
	cond {
	 expr="network.epoch == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$131$;
	  expr {
	   expr="rew_dist_thr_init";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="network.avg_ext_rew >= avg_rew_dec_thr";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=;
	    var=$131$;
	    expr {
	     expr="-rew_dist_thr_incr";
	    };
	   };
	  };
	 };
	 If @[1] {
	  desc=;
	  flags=;
	  cond {
	   expr="network.avg_ext_rew <= avg_rew_inc_thr";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=;
	    var=$131$;
	    expr {
	     expr="rew_dist_thr_incr";
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="by threshold";
      flags=;
      result_var=.projects[0].programs.gp[0][4].vars[1]$133$;
      expr {
       expr="trg_dist < rew_dist_thr ? 1.0 : 0.0";
      };
     };
     AssignExpr @[3] {
      desc="just inverse distance for now..";
      flags=OFF;
      result_var=$133$;
      expr {
       expr="rew_val > 0.0 ? rew_val : 0.0";
      };
     };
     Comment @[4] {
      desc="== write to the data table -- assumes row added and set as target ==";
      flags=;
     };
     MethodCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][4].args[1]$134$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="data";
	required=0;
	def_val=;
	expr {
	 expr="rew_val";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ch_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"PVe\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     DoneWritingDataRow @[6] {
      desc=;
      flags=;
      data_var=$134$;
     };
    };
   };
   Program @[5] {
    name="RobotTrialInit";
    tags=;
    desc="interfacing between the robot and the model(s) at the start of the Trial level of processing";
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cur_net_name";
      var_type=T_String;
      string_val="RLNet";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="current network name -- used for a switch to determine what to perform";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][5].vars[0]$135$;
      expr {
       expr="network.name";
      };
     };
     Switch @[1] {
      desc=;
      flags=;
      switch_var=$135$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="capture current arm configuration prior to running Arm";
	  flags=;
	  target=.projects[0].programs.gp[0][2]$136$;
	  targ_ld_init="*GetCurInputs*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	 };
	 ProgramCall @[1] {
	  desc="run the arm to generate target predictions -- random forces generated now";
	  flags=;
	  target=$22$;
	  targ_ld_init="*Arm*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="gen_rnd_angles";
	    required=1;
	    def_val=;
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="shoulder_trg_angle_norm";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=double;
	    type="double";
	    name="elbow_trg_angle_norm";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	  };
	 };
	 ProgramCall @[2] {
	  desc="capture prediction targets (actual outputs of motor system) after running arm";
	  flags=;
	  target=.projects[0].programs.gp[0][3]$137$;
	  targ_ld_init="*FwdModelPredTargs*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	 };
	};
	case_val {
	 expr="\"FwdModelNet\"";
	};
       };
       CaseBlock @[1] {
	desc=;
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="set new random target location";
	  flags=;
	  target=.projects[0].programs.gp[0][1]$138$;
	  targ_ld_init="*SetTarget*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="gen_rnd_targ";
	    required=1;
	    def_val=;
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="targ_angle";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=double;
	    type="double";
	    name="targ_dist";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	  };
	 };
	 ProgramCall @[1] {
	  desc="capture current arm configuration prior to running Arm";
	  flags=;
	  target=$136$;
	  targ_ld_init="*GetCurInputs*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	 };
	};
	case_val {
	 expr="\"RLNet\"";
	};
       };
      };
     };
    };
   };
   Program @[6] {
    name="RobotSettleInit";
    tags=;
    desc="interfacing between the robot and the model(s) at the start of the Settle level of processing";
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cur_net_name";
      var_type=T_String;
      string_val="RLNet";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="current network name -- used for a switch to determine what to perform";
     };
     ProgVar @[1] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects[0].networks[1].layers[9]$139$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects[0].networks[1].layers[8]$140$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][6].vars[0]$141$;
      expr {
       expr="network.name";
      };
     };
     Switch @[1] {
      desc=;
      flags=;
      switch_var=$141$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	  flags=;
	  target=.projects[0].programs.gp[1][6]$142$;
	  targ_ld_init="*ApplyInputs*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	case_val {
	 expr="\"FwdModelNet\"";
	};
       };
       CaseBlock @[1] {
	desc=;
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="network.phase_no == 1";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=.projects[0].programs.gp[0][6].vars[1]$143$;
	    expr {
	     expr="network.layers.MotorShoulderForce";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=;
	    result_var=.projects[0].programs.gp[0][6].vars[2]$144$;
	    expr {
	     expr="network.layers.MotorElbowForce";
	    };
	   };
	   ProgramCall @[2] {
	    desc="run the arm using forces from the network force layers";
	    flags=;
	    target=$22$;
	    targ_ld_init="*Arm*";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=bool;
	      type="bool";
	      name="gen_rnd_angles";
	      required=1;
	      def_val=;
	      expr {
	       expr="false";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=double;
	      type="double";
	      name="shoulder_trg_angle_norm";
	      required=1;
	      def_val=;
	      expr {
	       expr="MotorShoulderForce.units[0].act_m";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=double;
	      type="double";
	      name="elbow_trg_angle_norm";
	      required=1;
	      def_val=;
	      expr {
	       expr="MotorElbowForce.units[0].act_m";
	      };
	     };
	    };
	   };
	   ProgramCall @[3] {
	    desc="get reward value based on action";
	    flags=;
	    target=$42$;
	    targ_ld_init="*RLModelRew*";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=LeabraNetwork;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      expr {
	       expr="network";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable;
	      type="DataTable*";
	      name="input_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="input_data";
	      };
	     };
	    };
	   };
	  };
	 };
	 ProgramCall @[1] {
	  desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	  flags=;
	  target=.projects[0].programs.gp[1][7]$145$;
	  targ_ld_init="*ApplyInputs*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	case_val {
	 expr="\"RLNet\"";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[1][3]$146$;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="batch counter";
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of batch runs to perform";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[1][0].args[0]$147$;
      local_ctr_var=.projects[0].programs.gp[1][0].vars[0]$148$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$147$;
      local_ctr_var=$148$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=$13$;
	targ_ld_init="*LeabraTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$147$;
	local_ctr_var=$148$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrain";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="datatable with training patterns";
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of epochs to run";
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[1][1].types[0]$149$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     };
     ProgVar @[5] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="save the network's weights at the end of training?  Note: you can also just call SaveWeights program inside training loop to save more frequently";
     };
     ProgVar @[6] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[1][1].objs[0]$150$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
     };
     ProgVar @[7] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[1].train_time$151$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][1].args[2]$152$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=$0$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[1][1].vars[7]$153$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[1][1].vars[6]$154$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$154$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$0$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$153$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$153$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$0$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$0$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[1][1].vars[1]$155$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	target=.projects[0].programs.gp[1][2]$156$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$0$;
	local_ctr_var=$155$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$153$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc=;
      flags=;
      cond {
       expr="save_final_wts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=$48$;
	targ_ld_init="*SaveWeights*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trials_per_epoch";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how many trials to create per epoch?";
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$38$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[1].epoch_time$157$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=95;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
     ProgVar @[6] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call Compute_AvgAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
     ProgVar @[7] {
      name="adapt_rel_abs_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="use the computed rel and abs netin values to adapt the wt_scale.abs and wt_scale.rel params of network conspecs to match target values that are set on the projections -- see conspec rel_net_adapt and layerspec abs_net_adapt parmeters and comments for more information";
     };
     ProgVar @[8] {
      name="ArmOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$59$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[1][2].args[0]$158$;
      local_ctr_var=.projects[0].programs.gp[1][2].vars[1]$159$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[1][2].vars[4]$160$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$158$;
      local_ctr_var=$159$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$160$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$160$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][2].vars[3]$161$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][2].vars[8]$162$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc="set to target number of rows -- will iterate over";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][2].args[1]$163$;
      method=DataTable::EnforceRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val=;
	expr {
	 expr="trials_per_epoch";
	};
       };
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=$146$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      data_var=$163$;
      index_var=.projects[0].programs.gp[1][2].vars[5]$164$;
      order_var=.projects[0].programs.gp[1][2].vars[0]$165$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$158$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$158$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[9] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$158$;
	method=LeabraNetwork::Compute_AvgAbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="adapt_rel_abs_netin";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$158$;
	  method=LeabraNetwork::Compute_AdaptRelNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$158$;
	  method=LeabraNetwork::Compute_AdaptAbsNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
       };
      };
     };
     MethodCall @[10] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$160$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[11] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[1][9]$166$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[1][3].args[0]$167$;
      local_ctr_var=.projects[0].programs.gp[1][3].vars[0]$168$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$167$;
      local_ctr_var=$168$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$167$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="arm stuff at start of trial";
      flags=NON_STD;
      target=.projects[0].programs.gp[0][5]$169$;
      targ_ld_init="*ArmTrialInit*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=.projects[0].programs.gp[1][4]$170$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$167$;
	local_ctr_var=$168$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$167$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$167$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=;
	result_var=NULL;
	obj=$167$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[6] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$167$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[1][8]$171$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$167$;
      update_var=.projects[0].programs.gp[1][3].vars[1]$172$;
     };
    };
   };
   Program @[4] {
    name="LeabraSettle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
     ProgVar @[3] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$140$;
      objs_ptr=0;
      flags=;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$139$;
      objs_ptr=0;
      flags=;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[1][4].args[0]$173$;
      local_ctr_var=.projects[0].programs.gp[1][4].vars[0]$174$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$173$;
      local_ctr_var=$174$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$173$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=NON_STD;
      target=.projects[0].programs.gp[0][6]$175$;
      targ_ld_init="*ArmSettleInit*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$173$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[1][4].vars[1]$176$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$176$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[1][5]$177$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$173$;
	local_ctr_var=$174$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$173$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$173$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$173$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$173$;
      update_var=.projects[0].programs.gp[1][4].vars[2]$178$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].args[0]$179$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$179$;
      update_var=$2$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs_FwdModel";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=.projects[0].data.gp[0][0]$180$;
      network=$58$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	chan_name="MotorShoulderForce";
	net_target=LAYER;
	layer_name="MotorShoulderForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[5] {
	chan_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[6] {
	chan_name="VisHand_Pred";
	net_target=LAYER;
	layer_name="VisHand_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[7] {
	chan_name="SomaShoulderAngle_Pred";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[8] {
	chan_name="SomaElbowAngle_Pred";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[9] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$58$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$180$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
     ProgVar @[2] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[1][6].objs[0]$181$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[2]$182$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$182$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$182$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$182$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="ApplyInputs_RLModel";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$35$;
      network=$34$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="PVe";
	net_target=LAYER;
	layer_name="PVe";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	chan_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[5] {
	chan_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[6] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
     ProgVar @[2] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[1][7].objs[0]$183$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][7].vars[2]$184$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$184$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$184$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$184$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[8] {
    name="LeabraTrialMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="pvlv_pvi";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="pvlv_pvi";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="trg_dist";
	computed=0;
	object_type=ProgVar;
	object=$132$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$34$;
      data=$38$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$38$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][8].objs[0]$185$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][8].vars[1]$186$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$186$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$186$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][8].vars[0]$187$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$186$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$187$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][8].args[0]$188$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[9] {
    name="LeabraEpochMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_trg_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$38$;
	agg_col {
	 col_name="trg_dist";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="rew_dist_thr";
	computed=0;
	object_type=ProgVar;
	object=$131$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="avg_pvi";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$38$;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$34$;
      data=$37$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$37$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][9].objs[0]$189$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$157$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[1][9].vars[2]$190$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][9].vars[1]$191$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$191$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$191$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][9].vars[0]$192$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$191$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$190$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$192$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$192$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$192$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[10] {
    name="SaveWeights";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[1][10].vars[4]$193$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[1][10].vars[3]$194$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[1][10].vars[5]$195$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[1][10].vars[2]$196$;
      obj=.projects[0].programs.gp[1][10].args[0]$197$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$197$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[2] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[2][1]$198$;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @[0] {
    name="LeabraEpochTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][2]$199$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$157$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=7;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
     ProgVar @[6] {
      name="load_weights";
      var_type=T_String;
      string_val="ve_arm_curbest.wts.gz";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="file name of weights to load";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$4$;
      local_ctr_var=.projects[0].programs.gp[2][0].vars[2]$200$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[2][0].vars[4]$201$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     If @[0] {
      desc=;
      flags=;
      cond {
       expr="load_weights.nonempty()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$4$;
	method=Network::LoadWeights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="load_weights";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="quiet";
	  required=0;
	  def_val="false";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       PrintVar @[1] {
	desc=;
	flags=;
	message="Loaded weights:";
	print_var=.projects[0].programs.gp[2][0].vars[6]$202$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
       };
      };
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$4$;
      local_ctr_var=$200$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[2] {
      desc="set to testing mode";
      flags=NEW_EL;
      obj=$4$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$201$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$201$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][0].vars[3]$203$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=$198$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      data_var=$5$;
      index_var=.projects[0].programs.gp[2][0].vars[5]$204$;
      order_var=.projects[0].programs.gp[2][0].vars[1]$205$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$4$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$4$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$201$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[10] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[2][5]$206$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MemberAssign @[11] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$4$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
   };
   Program @[1] {
    name="LeabraTrialTest";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[2][1].args[0]$207$;
      local_ctr_var=.projects[0].programs.gp[2][1].vars[0]$208$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$207$;
      local_ctr_var=$208$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$207$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="arm stuff at start of trial";
      flags=NON_STD;
      target=$169$;
      targ_ld_init="*ArmTrialInit*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=.projects[0].programs.gp[2][2]$209$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$207$;
	local_ctr_var=$208$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$207$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$207$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=NEW_EL;
      cond {
       expr="compute_rel_netin";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=;
	result_var=NULL;
	obj=$207$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[6] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$207$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[2][4]$210$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$207$;
      update_var=.projects[0].programs.gp[2][1].vars[1]$211$;
     };
    };
   };
   Program @[2] {
    name="LeabraSettleTest";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
     ProgVar @[3] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$140$;
      objs_ptr=0;
      flags=;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$139$;
      objs_ptr=0;
      flags=;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[2][2].args[0]$212$;
      local_ctr_var=.projects[0].programs.gp[2][2].vars[0]$213$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$212$;
      local_ctr_var=$213$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$212$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=NON_STD;
      target=$175$;
      targ_ld_init="*ArmSettleInit*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$212$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[2][2].vars[1]$214$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$214$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[2][3]$215$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$212$;
	local_ctr_var=$213$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$212$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$212$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$212$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$212$;
      update_var=.projects[0].programs.gp[2][2].vars[2]$216$;
     };
    };
   };
   Program @[3] {
    name="LeabraCycleTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][3].args[0]$217$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$217$;
      update_var=.projects[0].programs.gp[2][3].vars[0]$218$;
     };
    };
   };
   Program @[4] {
    name="LeabraTrialMonitorTest";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="pvlv_pvi";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="pvlv_pvi";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="trg_dist";
	computed=0;
	object_type=ProgVar;
	object=$132$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$34$;
      data=$199$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$199$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[2][4].objs[0]$219$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][4].vars[1]$220$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$220$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$220$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][4].vars[0]$221$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$220$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$221$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][4].args[0]$222$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[5] {
    name="LeabraEpochMonitorTest";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_trg_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$38$;
	agg_col {
	 col_name="trg_dist";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="rew_dist_thr";
	computed=0;
	object_type=ProgVar;
	object=$131$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$34$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="avg_pvi";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$38$;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$34$;
      data=.projects[0].data.gp[1][3]$223$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$223$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[2][5].objs[0]$224$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$157$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[2][5].vars[2]$225$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][5].vars[1]$226$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$226$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$226$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][5].vars[0]$227$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$226$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$225$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$227$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$227$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$227$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$228$;
   name="Browser3";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$228$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="VEArmWorld";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 VEWorldView @[0] {
	  m_data=$15$;
	  m_transform=NULL;
	  children {
	   name=;
	   el_typ=T3DataView;
	   el_def=0;
	   VESpaceView @[0] {
	    m_data=.projects[0].programs.gp[0][0].objs[0].spaces[0]$229$;
	    m_transform=NULL;
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	     VEStaticView @[0] {
	      m_data=.projects[0].programs.gp[0][0].objs[0].spaces[0].static_els[0]$230$;
	      m_transform=NULL;
	      name="Ground";
	     };
	     VEStaticView @[1] {
	      m_data=.projects[0].programs.gp[0][0].objs[0].spaces[0].static_els[1]$231$;
	      m_transform=NULL;
	      name="BackWall";
	     };
	    };
	    name="RoomSpace";
	   };
	   VEObjectView @[1] {
	    m_data=.projects[0].programs.gp[0][0].objs[0].objects[0]$232$;
	    m_transform=NULL;
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @[0] {
	      m_data=$49$;
	      m_transform=NULL;
	      name="Torso";
	     };
	     VEBodyView @[1] {
	      m_data=$19$;
	      m_transform=NULL;
	      name="Humerus";
	     };
	     VEBodyView @[2] {
	      m_data=$20$;
	      m_transform=NULL;
	      name="Ulna";
	     };
	     VEBodyView @[3] {
	      m_data=$21$;
	      m_transform=NULL;
	      name="Hand";
	     };
	     VEBodyView @[4] {
	      m_data=$52$;
	      m_transform=NULL;
	      name="Head";
	     };
	     VEBodyView @[5] {
	      m_data=$53$;
	      m_transform=NULL;
	      name="LeftEye";
	     };
	     VEBodyView @[6] {
	      m_data=$54$;
	      m_transform=NULL;
	      name="RightEye";
	     };
	     VEBodyView @[7] {
	      m_data=$50$;
	      m_transform=NULL;
	      name="Pectoralis";
	     };
	     VEBodyView @[8] {
	      m_data=$51$;
	      m_transform=NULL;
	      name="Deltoid";
	     };
	    };
	    name="Emer";
	   };
	   VEObjectView @[2] {
	    m_data=.projects[0].programs.gp[0][0].objs[0].objects[1]$233$;
	    m_transform=NULL;
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @[0] {
	      m_data=$55$;
	      m_transform=NULL;
	      name="TargetBody";
	     };
	    };
	    name="Target";
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  display_on=1;
	  drag_objs=0;
	 };
	 GraphTableView @[1] {
	  m_data=$59$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[0]$234$;
	    m_transform=NULL;
	    name="Reach_Name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[1]$235$;
	    m_transform=NULL;
	    name="Reach_No";
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=68: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[2]$236$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[3]$237$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[4]$238$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[5]$239$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[6]$240$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[7]$241$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[8]$242$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[9]$243$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[10]$244$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[11]$245$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[12]$246$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[13]$247$;
	    m_transform=NULL;
	    name="Should_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[14]$248$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[15]$249$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[16]$250$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[17]$251$;
	    m_transform=NULL;
	    name="n_steps";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[18]$252$;
	    m_transform=NULL;
	    name="angle_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=.projects[0].programs.gp[0][0].objs[1].data[19]$253$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Target_cur_pos_x";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Target_cur_pos_z";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=6: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=1: max=6: };
	   range {min=1: max=6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=.colorspecs[0]$254$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[2] {
	  m_data=$59$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$234$;
	    m_transform=NULL;
	    name="Reach_Name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$235$;
	    m_transform=NULL;
	    name="Reach_No";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$236$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$237$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$238$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$239$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$240$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$241$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$242$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=$243$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=$244$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=$245$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=$246$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=$247$;
	    m_transform=NULL;
	    name="Should_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=$248$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=$249$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=$250$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=$251$;
	    m_transform=NULL;
	    name="n_steps";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=$252$;
	    m_transform=NULL;
	    name="angle_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=$253$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Hand_cur_pos_z";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.5: max=1: };
	   range {min=-0.5: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[3] {
	  m_data=$59$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$234$;
	    m_transform=NULL;
	    name="Reach_Name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$235$;
	    m_transform=NULL;
	    name="Reach_No";
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=2: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$236$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$237$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$238$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$239$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$240$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$241$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$242$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=$243$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=$244$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=$245$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=$246$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=$247$;
	    m_transform=NULL;
	    name="Should_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=$248$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=$249$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=$250$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=$251$;
	    m_transform=NULL;
	    name="n_steps";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=$252$;
	    m_transform=NULL;
	    name="angle_err";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0292521: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=$253$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.8: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=-1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-1: max=0: };
	   range {min=-1: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=1;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="trg_dist";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=0.8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0.8: };
	   range {min=0: max=0.8: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="angle_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="n_steps";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=500: };
	   range {min=0: max=500: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=2: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=1: max=2: };
	   range {min=1: max=2: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[4] {
	  m_data=$60$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[0]$255$;
	    m_transform=NULL;
	    name="time";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=999: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[1]$256$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[2]$257$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[3]$258$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[4]$259$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[5]$260$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[6]$261$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[7]$262$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[8]$263$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[9]$264$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[10]$265$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[11]$266$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[12]$267$;
	    m_transform=NULL;
	    name="Should_flexor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0.103447: fix_max=0: max=0.150032: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[13]$268$;
	    m_transform=NULL;
	    name="Should_flexor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[14]$269$;
	    m_transform=NULL;
	    name="Should_flexor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0583177: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[15]$270$;
	    m_transform=NULL;
	    name="Should_flexor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[16]$271$;
	    m_transform=NULL;
	    name="Should_flexor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[17]$272$;
	    m_transform=NULL;
	    name="Should_flexor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=13.2941: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[18]$273$;
	    m_transform=NULL;
	    name="Should_extensor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0.0499678: fix_max=0: max=0.0965525: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[19]$274$;
	    m_transform=NULL;
	    name="Should_extensor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[20]$275$;
	    m_transform=NULL;
	    name="Should_extensor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0465601: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[21]$276$;
	    m_transform=NULL;
	    name="Should_extensor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[22]$277$;
	    m_transform=NULL;
	    name="Should_extensor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[23]$278$;
	    m_transform=NULL;
	    name="Should_extensor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=10.4362: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[24]$279$;
	    m_transform=NULL;
	    name="should_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0.000951253: fix_max=0: max=0.23532: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[25]$280$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[26]$281$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[27]$282$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    m_data=.projects[0].programs.gp[0][0].objs[2].data[28]$283$;
	    m_transform=NULL;
	    name="elbow_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0.365413: fix_max=0: max=0.535126: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=10;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Should_flexor_len";
	   fixed_range {fix_min=0: min=0.103447: fix_max=0: max=0.150032: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0.0009512525: max=0.5351256: };
	   range {min=0: max=0.6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Should_extensor_len";
	   fixed_range {fix_min=0: min=0.0499678: fix_max=0: max=0.0965525: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0.0009512525: max=0.5351256: };
	   range {min=0: max=0.6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Should_flexor_force";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Should_extensor_force";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=1;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="should_cur_trg";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="elbow_cur_trg";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[5] {
	  m_data=$60$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$255$;
	    m_transform=NULL;
	    name="time";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$256$;
	    m_transform=NULL;
	    name="Hand_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$257$;
	    m_transform=NULL;
	    name="Hand_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$258$;
	    m_transform=NULL;
	    name="Hand_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$259$;
	    m_transform=NULL;
	    name="Target_cur_pos_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$260$;
	    m_transform=NULL;
	    name="Target_cur_pos_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$261$;
	    m_transform=NULL;
	    name="Target_cur_pos_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$262$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_x";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$263$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=$264$;
	    m_transform=NULL;
	    name="Hand_cur_lin_vel_z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=$265$;
	    m_transform=NULL;
	    name="Should_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=$266$;
	    m_transform=NULL;
	    name="Should_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=$267$;
	    m_transform=NULL;
	    name="Should_flexor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=$268$;
	    m_transform=NULL;
	    name="Should_flexor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    m_data=$269$;
	    m_transform=NULL;
	    name="Should_flexor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    m_data=$270$;
	    m_transform=NULL;
	    name="Should_flexor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    m_data=$271$;
	    m_transform=NULL;
	    name="Should_flexor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    m_data=$272$;
	    m_transform=NULL;
	    name="Should_flexor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    m_data=$273$;
	    m_transform=NULL;
	    name="Should_extensor_len";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    m_data=$274$;
	    m_transform=NULL;
	    name="Should_extensor_dlen";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    m_data=$275$;
	    m_transform=NULL;
	    name="Should_extensor_act";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    m_data=$276$;
	    m_transform=NULL;
	    name="Should_extensor_m_act_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    m_data=$277$;
	    m_transform=NULL;
	    name="Should_extensor_m_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    m_data=$278$;
	    m_transform=NULL;
	    name="Should_extensor_force";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    m_data=$279$;
	    m_transform=NULL;
	    name="should_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    m_data=$280$;
	    m_transform=NULL;
	    name="Elbow_pos";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    m_data=$281$;
	    m_transform=NULL;
	    name="Elbow_vel";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    m_data=$282$;
	    m_transform=NULL;
	    name="Elbow_force_in";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    m_data=$283$;
	    m_transform=NULL;
	    name="elbow_cur_trg";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=1;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=10;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Hand_cur_pos_z";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=0.0516234: y=1.50916: z=2.0973: };
       camera_orient {x=-1: y=0: z=0: rot=0.410319: };
       camera_focdist=1.76353;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=0;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="FwdModelNet";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @[0] {
	  m_data=$58$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=52: y=10: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ VisTarget_Cur=0;VisHand_Cur=0;SomaShoulderAngle_Cur=0;SomaElbowAngle_Cur=0;MotorShoulderForce=0;MotorElbowForce=0;VisFwdHidden=0;SomaFwdHidden=0;VisHand_Pred=0;SomaShoulderAngle_Pred=0;SomaElbowAngle_Pred=0;	  };
	 };
	};
       };
       camera_pos {x=0.4875: y=0.662193: z=1.52499: };
       camera_orient {x=-1: y=0: z=0: rot=0.170966: };
       camera_focdist=1.93174;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="EpochOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$37$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[1][1].data[0]$284$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[1][1].data[1]$285$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[1][1].data[2]$286$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.444586: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].data.gp[1][1].data[3]$287$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=100: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].data.gp[1][1].data[4]$288$;
	    m_transform=NULL;
	    name="avg_trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].data.gp[1][1].data[5]$289$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].data.gp[1][1].data[6]$290$;
	    m_transform=NULL;
	    name="rew_dist_thr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].data.gp[1][1].data[7]$291$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].data.gp[1][1].data[8]$292$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].data.gp[1][1].data[9]$293$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].data.gp[1][1].data[10]$294$;
	    m_transform=NULL;
	    name="avg_pvi";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=500;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=8: };
	   range {min=0: max=8: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="avg_sse";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0.444586: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0.5636492: };
	   range {min=0: max=0.6: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_ext_rew";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_pvi";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="rew_dist_thr";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_trg_dist";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.465: y=0.445: z=1.686163: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=2.196163;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[3] {
       m_data=NULL;
       name="RLNet";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @[0] {
	  m_data=$34$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=1;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=38: y=10: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.001;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ RewTarg=0;PVe=0;PVr=0;PVi=0;LVe=0;LVi=0;NV=0;DA=0;MotorElbowForce=0;MotorShoulderForce=0;RLHidden=0;SomaElbowAngle_Cur=0;SomaElbowAngle_Pred=0;SomaShoulderAngle_Cur=0;SomaShoulderAngle_Pred=0;VisHand_Cur=0;VisHand_Pred=0;VisTarget_Cur=0;	  };
	 };
	};
       };
       camera_pos {x=0.4989164: y=0.8137509: z=1.577247: };
       camera_orient {x=-1: y=0: z=0: rot=0.2393518: };
       camera_focdist=2.044936;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[4] {
       m_data=NULL;
       name="TrialOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$38$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[1][0].data[0]$295$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[1][0].data[1]$296$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[1][0].data[2]$297$;
	    m_transform=NULL;
	    name="trial";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].data.gp[1][0].data[3]$298$;
	    m_transform=NULL;
	    name="trial_name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].data.gp[1][0].data[4]$299$;
	    m_transform=NULL;
	    name="group_name";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].data.gp[1][0].data[5]$300$;
	    m_transform=NULL;
	    name="phase_no";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].data.gp[1][0].data[6]$301$;
	    m_transform=NULL;
	    name="minus_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].data.gp[1][0].data[7]$302$;
	    m_transform=NULL;
	    name="sse";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].data.gp[1][0].data[8]$303$;
	    m_transform=NULL;
	    name="ext_rew";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].data.gp[1][0].data[9]$304$;
	    m_transform=NULL;
	    name="pvlv_pvi";
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].data.gp[1][0].data[10]$305$;
	    m_transform=NULL;
	    name="trg_dist";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="trial";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=83: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=83: };
	   range {min=0: max=83: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=5: };
	   range {min=0: max=5: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="ext_rew";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="pvlv_pvi";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="trg_dist";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$254$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.528036: y=0.445: z=1.482394: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.972394;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc="lambda arm muscle code in place, with minimal rl and forward model learning, and all programs cleaned up.
";
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
    };
   };
   name="FwdModelNet";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$306$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: learn=0.01: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_2";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_4";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_4";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
     xcal_c {s_dt=0.2: m_dt=0.1: };
     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
    ScalarValLayerSpec @[4] {
     name="NormScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @[5] {
     name="ForceScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    TwoDValLayerSpec @[6] {
     name="VisTwoDVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="VisTarget_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.7,1";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [11 10] ;;;;;;;;;;;"-0.5,-0.5";"-0.3,-0.5";"-0.1,-0.5";"0.1,-0.5";"0.3,-0.5";"0.5,-0.5";"0.7,-0.5";"0.9,-0.5";"1.1,-0.5";"1.3,-0.5";"1.5,-0.5";"-0.5,-0.25";"-0.3,-0.25";"-0.1,-0.25";"0.1,-0.25";"0.3,-0.25";"0.5,-0.25";"0.7,-0.25";"0.9,-0.25";"1.1,-0.25";"1.3,-0.25";"1.5,-0.25";"-0.5,0";"-0.3,0";"-0.1,0";"0.1,0";"0.3,0";"0.5,0";"0.7,0";"0.9,0";"1.1,0";"1.3,0";"1.5,0";"-0.5,0.25";"-0.3,0.25";"-0.1,0.25";"0.1,0.25";"0.3,0.25";"0.5,0.25";"0.7,0.25";"0.9,0.25";"1.1,0.25";"1.3,0.25";"1.5,0.25";"-0.5,0.5";"-0.3,0.5";"-0.1,0.5";"0.1,0.5";"0.3,0.5";"0.5,0.5";"0.7,0.5";"0.9,0.5";"1.1,0.5";"1.3,0.5";"1.5,0.5";"-0.5,0.75";"-0.3,0.75";"-0.1,0.75";"0.1,0.75";"0.3,0.75";"0.5,0.75";"0.7,0.75";"0.9,0.75";"1.1,0.75";"1.3,0.75";"1.5,0.75";"-0.5,1";"-0.3,1";"-0.1,1";"0.1,1";"0.3,1";"0.5,1";"0.7,1";"0.9,1";"1.1,1";"1.3,1";"1.5,1";"-0.5,1.25";"-0.3,1.25";"-0.1,1.25";"0.1,1.25";"0.3,1.25";"0.5,1.25";"0.7,1.25";"0.9,1.25";"1.1,1.25";"1.3,1.25";"1.5,1.25";"-0.5,1.5";"-0.3,1.5";"-0.1,1.5";"0.1,1.5";"0.3,1.5";"0.5,1.5";"0.7,1.5";"0.9,1.5";"1.1,1.5";"1.3,1.5";"1.5,1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.0462189: max=0.8746769: max_i=83: };
     acts_m {cmpt=1: avg=0.0462189: max=0.8746769: max_i=83: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=.projects[0].networks[0].specs[6]$308$: };
     hard_clamped=0;
     ravg_l_avg=7.513472e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="VisHand_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=13: y=0: z=0: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.7,1";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [11 10] ;;;;;;;;;;;"-0.5,-0.5";"-0.3,-0.5";"-0.1,-0.5";"0.1,-0.5";"0.3,-0.5";"0.5,-0.5";"0.7,-0.5";"0.9,-0.5";"1.1,-0.5";"1.3,-0.5";"1.5,-0.5";"-0.5,-0.25";"-0.3,-0.25";"-0.1,-0.25";"0.1,-0.25";"0.3,-0.25";"0.5,-0.25";"0.7,-0.25";"0.9,-0.25";"1.1,-0.25";"1.3,-0.25";"1.5,-0.25";"-0.5,0";"-0.3,0";"-0.1,0";"0.1,0";"0.3,0";"0.5,0";"0.7,0";"0.9,0";"1.1,0";"1.3,0";"1.5,0";"-0.5,0.25";"-0.3,0.25";"-0.1,0.25";"0.1,0.25";"0.3,0.25";"0.5,0.25";"0.7,0.25";"0.9,0.25";"1.1,0.25";"1.3,0.25";"1.5,0.25";"-0.5,0.5";"-0.3,0.5";"-0.1,0.5";"0.1,0.5";"0.3,0.5";"0.5,0.5";"0.7,0.5";"0.9,0.5";"1.1,0.5";"1.3,0.5";"1.5,0.5";"-0.5,0.75";"-0.3,0.75";"-0.1,0.75";"0.1,0.75";"0.3,0.75";"0.5,0.75";"0.7,0.75";"0.9,0.75";"1.1,0.75";"1.3,0.75";"1.5,0.75";"-0.5,1";"-0.3,1";"-0.1,1";"0.1,1";"0.3,1";"0.5,1";"0.7,1";"0.9,1";"1.1,1";"1.3,1";"1.5,1";"-0.5,1.25";"-0.3,1.25";"-0.1,1.25";"0.1,1.25";"0.3,1.25";"0.5,1.25";"0.7,1.25";"0.9,1.25";"1.1,1.25";"1.3,1.25";"1.5,1.25";"-0.5,1.5";"-0.3,1.5";"-0.1,1.5";"0.1,1.5";"0.3,1.5";"0.5,1.5";"0.7,1.5";"0.9,1.5";"1.1,1.5";"1.3,1.5";"1.5,1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.04577775: max=0.9096908: max_i=83: };
     acts_m {cmpt=1: avg=0.04577775: max=0.9096908: max_i=83: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$308$: };
     hard_clamped=0;
     ravg_l_avg=7.513472e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="SomaShoulderAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=0: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2162403: max=0.95: max_i=6: };
     acts_m {cmpt=1: avg=0.2162403: max=0.95: max_i=6: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=.projects[0].networks[0].specs[4]$309$: };
     hard_clamped=0;
     ravg_l_avg=2.237259e-21;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[3] {
     name="SomaElbowAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=3: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.3";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.214652: max=0.95: max_i=5: };
     acts_m {cmpt=1: avg=0.214652: max=0.95: max_i=5: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$309$: };
     hard_clamped=0;
     ravg_l_avg=8.598187e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[4] {
     name="MotorShoulderForce";
     flags=;
     layer_type=INPUT;
     pos {x=40: y=0: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[7].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2161191: max=0.95: max_i=4: };
     acts_m {cmpt=1: avg=0.2161191: max=0.95: max_i=4: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$309$: };
     hard_clamped=0;
     ravg_l_avg=7.215596e-18;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[5] {
     name="MotorElbowForce";
     flags=;
     layer_type=INPUT;
     pos {x=40: y=3: z=0: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[2];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[7].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2086742: max=0.9357619: max_i=6: };
     acts_m {cmpt=1: avg=0.2086742: max=0.9357619: max_i=6: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$309$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[6] {
     name="VisFwdHidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=15: y=2: z=1: };
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$310$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[3]$312$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[4]$313$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[5]$314$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[8]$315$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[8].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=7: y=7: n_not_xy=0: n=49: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [7 7] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.09679781: max=0.9208624: max_i=24: };
     acts_m {cmpt=1: avg=0.09412758: max=0.9269682: max_i=26: };
     phase_dif_ratio=0.9724144;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=7: pct=0.1428571: pct_c=0.8571429: adth_k=1: k_ithr=3.114074: k1_ithr=2.250072: ithr_r=0.3249695: ithr_diff=0.2774506: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1428571: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$316$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[7] {
     name="SomaFwdHidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=26: y=2: z=1: };
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[2]$317$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[3]$318$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=$313$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=$314$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_SomaShoulderAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[9]$319$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[5] {
       name="Fm_SomaElbowAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[10]$320$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[9].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[10].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=7: y=7: n_not_xy=0: n=49: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [7 7] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.1281596: max=0.7573113: max_i=29: };
     acts_m {cmpt=1: avg=0.1250271: max=0.7651332: max_i=29: };
     phase_dif_ratio=0.9755577;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=7: pct=0.1428571: pct_c=0.8571429: adth_k=1: k_ithr=3.153238: k1_ithr=2.795386: ithr_r=0.1204594: ithr_diff=0.1134869: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1428571: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$316$: };
     hard_clamped=0;
     ravg_l_avg=0.06578948;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[8] {
     name="VisHand_Pred";
     flags=;
     layer_type=TARGET;
     pos {x=12: y=0: z=2: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_VisFwdHidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[6]$321$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.9,0.5";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [11 10] ;;;;;;;;;;;"-0.5,-0.5";"-0.3,-0.5";"-0.1,-0.5";"0.1,-0.5";"0.3,-0.5";"0.5,-0.5";"0.7,-0.5";"0.9,-0.5";"1.1,-0.5";"1.3,-0.5";"1.5,-0.5";"-0.5,-0.25";"-0.3,-0.25";"-0.1,-0.25";"0.1,-0.25";"0.3,-0.25";"0.5,-0.25";"0.7,-0.25";"0.9,-0.25";"1.1,-0.25";"1.3,-0.25";"1.5,-0.25";"-0.5,0";"-0.3,0";"-0.1,0";"0.1,0";"0.3,0";"0.5,0";"0.7,0";"0.9,0";"1.1,0";"1.3,0";"1.5,0";"-0.5,0.25";"-0.3,0.25";"-0.1,0.25";"0.1,0.25";"0.3,0.25";"0.5,0.25";"0.7,0.25";"0.9,0.25";"1.1,0.25";"1.3,0.25";"1.5,0.25";"-0.5,0.5";"-0.3,0.5";"-0.1,0.5";"0.1,0.5";"0.3,0.5";"0.5,0.5";"0.7,0.5";"0.9,0.5";"1.1,0.5";"1.3,0.5";"1.5,0.5";"-0.5,0.75";"-0.3,0.75";"-0.1,0.75";"0.1,0.75";"0.3,0.75";"0.5,0.75";"0.7,0.75";"0.9,0.75";"1.1,0.75";"1.3,0.75";"1.5,0.75";"-0.5,1";"-0.3,1";"-0.1,1";"0.1,1";"0.3,1";"0.5,1";"0.7,1";"0.9,1";"1.1,1";"1.3,1";"1.5,1";"-0.5,1.25";"-0.3,1.25";"-0.1,1.25";"0.1,1.25";"0.3,1.25";"0.5,1.25";"0.7,1.25";"0.9,1.25";"1.1,1.25";"1.3,1.25";"1.5,1.25";"-0.5,1.5";"-0.3,1.5";"-0.1,1.5";"0.1,1.5";"0.3,1.5";"0.5,1.5";"0.7,1.5";"0.9,1.5";"1.1,1.5";"1.3,1.5";"1.5,1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.04687428: max=0.8913006: max_i=62: };
     acts_m {cmpt=1: avg=0.04619429: max=0.4859317: max_i=83: };
     phase_dif_ratio=0.9854932;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0.5058727: k1_ithr=0.3506964: ithr_r=0.366364: ithr_diff=0.3067496: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$308$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[9] {
     name="SomaShoulderAngle_Pred";
     flags=;
     layer_type=TARGET;
     pos {x=25: y=0: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaFwdHidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[7]$322$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[4];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2160379: max=0.95: max_i=4: };
     acts_m {cmpt=1: avg=0.2147014: max=0.9039337: max_i=4: };
     phase_dif_ratio=0.9938134;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.378915: k1_ithr=1.74764: ithr_r=0.3083784: ithr_diff=0.2653627: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$309$: };
     hard_clamped=0;
     ravg_l_avg=1.0901e-17;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[10] {
     name="SomaElbowAngle_Pred";
     flags=;
     layer_type=TARGET;
     pos {x=25: y=3: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaFwdHidden";
       from_type=CUSTOM;
       from=$322$;
       spec {type=FullPrjnSpec: spec=$311$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$312$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[7].projections[5];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$307$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";"1.3";"1.5";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2107818: max=0.9047918: max_i=6: };
     acts_m {cmpt=1: avg=0.1945973: max=0.8631099: max_i=6: };
     phase_dif_ratio=0.9232167;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.100982: k1_ithr=1.564851: ithr_r=0.2946139: ithr_diff=0.2551809: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$309$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="TimeUsed_8": start={usr=6200: sys=969: tot=3657784089: }: end={usr=33965: sys=4126: tot=3554750557: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="TimeUsed_9": start={usr=11767: sys=1703: tot=3657790345: }: end={usr=11767: sys=1703: tot=3657790345: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="TimeUsed_11": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="TimeUsed_12": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="TimeUsed_13": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="TimeUsed_14": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="TimeUsed_15": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    log_timing=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=500;
   n_cons=22050;
   max_size {x=52: y=10: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=2;
   ct_cycle=61;
   time_inc=1;
   cycle_max=60;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=5;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=0;
    m_nrm=0;
    do_s=0;
   };
   minus_cycles=0;
   avg_cycles=0;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=0;
   avg_send_pct=0;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
  LeabraNetwork @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
    };
   };
   name="RLNet";
   desc="Model that learns from reinforcement learning (PVLV)";
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @[0] {
       name="MotorUnits";
       desc=;
       unique{        };
       children {
	name=;
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=LeabraCon;
       bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[1].specs[3].children[0]$323$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=NO_AH: };
       spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
       depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
       syn_delay {
	on=0;
	delay=4;
       };
       opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
       dt {vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
       g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
       da_mod {on=1: mod=PLUS_CONT: gain=1: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       noise_type=NETIN_NOISE;
       noise {name="": type=GAUSSIAN: mean=0: var=0.01: par=1: };
       noise_adapt {trial_fixed=1: mode=PVLV_PVI: min_pct=0.5: min_pct_c=0.5: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=1;
	cur_val=0;
       };
      };
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=$323$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=NO_AH: };
     spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     da_mod {on=1: mod=PLUS_CONT: gain=1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NETIN_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.01: par=1: };
     noise_adapt {trial_fixed=1: mode=PVLV_PVI: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_2";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_4";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_4";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=CTLEABRA_XCAL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.02;
       cur_lrate=0.002;
       lrs_value=EXT_REW_STAT;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=97;
	default_val=1;
	interpolate=0;
	cur_val=0.1;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=70;
	 step=-0.01285714;
	};
	SchedItem @[1] {
	 start_ctr=70;
	 start_val=0.1;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=CTLEABRA_XCAL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.02;
     cur_lrate=0.002;
     lrs_value=EXT_REW_STAT;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=97;
      default_val=1;
      interpolate=0;
      cur_val=0.1;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=70;
       step=-0.01285714;
      };
      SchedItem @[1] {
       start_ctr=70;
       start_val=0.1;
       duration=1;
       step=1;
      };
     };
     wt_sig {gain=6: off=1: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
     xcal_c {s_dt=0.2: m_dt=0.1: };
     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
    ScalarValLayerSpec @[4] {
     name="NormScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @[5] {
     name="ForceScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.8;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=0: max=1: range=1: scale=1: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=0: max=1: range=1: scale=1: };
    };
    TwoDValLayerSpec @[6] {
     name="VisTwoDVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    BaseSpec_Group @.gp[0] {
     name="PFC_BG_Units";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @[0] {
      name="PVUnits";
      desc=;
      unique{ g_bar;act;act_fun;dt;opt_thresh;      };
      children {
       name=;
       el_typ=LeabraUnitSpec;
       el_def=0;
       LeabraUnitSpec @[0] {
	name="LVUnits";
	desc=;
	unique{ 	};
	children {
	 name=;
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_con_type=LeabraCon;
	bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[1].specs.gp[1][0].children[1]$324$: };
	sse_tol=0.5;
	act_fun=NOISY_LINEAR;
	act {thr=0.17: gain=220: nvar=0.01: avg_dt=0: avg_init=0.15: i_thr=STD: };
	spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
	depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
	syn_delay {
	 on=0;
	 delay=4;
	};
	opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=1: range=1: scale=1: };
	v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
	dt {vm=0.05: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: };
	g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
	e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
	hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
	acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
	da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
	maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
	noise_type=NO_NOISE;
	noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
	noise_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=1;
	 cur_val=0;
	};
       };
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=$324$: };
      sse_tol=0.5;
      act_fun=NOISY_LINEAR;
      act {thr=0.17: gain=220: nvar=0.01: avg_dt=0: avg_init=0.15: i_thr=STD: };
      spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
      depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
      syn_delay {
       on=0;
       delay=4;
      };
      opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.05: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
     };
     LeabraUnitSpec @[1] {
      name="DaUnits";
      desc=;
      unique{ act_range;clamp_range;act;      };
      children {
       name=;
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=-2: max=2: range=4: scale=0.25: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[1].specs.gp[1][0].children[1].children[0]$325$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.25: gain=600: nvar=0.005: avg_dt=0: avg_init=0.15: i_thr=STD: };
      spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
      depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
      syn_delay {
       on=0;
       delay=4;
      };
      opt_thresh {send=0.1: delta=0.005: learn=-1: phase_dif=0: };
      clamp_range {min=-2: max=2: range=4: scale=0.25: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
      dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      noise_type=NO_NOISE;
      noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=1;
       cur_val=0;
      };
     };
    };
    BaseSpec_Group @.gp[1] {
     name="PFC_BG_Cons";
     el_typ=LeabraConSpec;
     el_def=0;
     LeabraConSpec @[0] {
      name="LearnCons";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=PVConSpec;
       el_def=0;
       PVConSpec @[0] {
	name="PVi";
	desc=;
	unique{ lmix;rnd;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	};
	children {
	 name=;
	 el_typ=PVrConSpec;
	 el_def=0;
	 PVrConSpec @[0] {
	  name="PVr";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVrConSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  wt_sig {gain=1: off=1: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  wt_dec_mult=0.01;
	 };
	 PVConSpec @[1] {
	  name="LVe";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	   PVConSpec @[0] {
	    name="LVi";
	    desc=;
	    unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	    };
	    children {
	     name=;
	     el_typ=PVConSpec;
	     el_def=0;
	    };
	    rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	    learn_rule=CTLEABRA_XCAL;
	    inhib=0;
	    wt_scale {abs=1: rel=1: };
	    wt_scale_init {init=0: abs=1: rel=1: };
	    lrate=0.001;
	    cur_lrate=0.001;
	    lrs_value=NO_LRS;
	    lrate_sched {
	     name=;
	     el_typ=SchedItem;
	     el_def=0;
	     last_ctr=-1;
	     default_val=1;
	     interpolate=0;
	     cur_val=0;
	    };
	    wt_sig {gain=1: off=1: };
	    lmix {hebb=0: err=1: err_sb=0: };
	    xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	    xcal_c {s_dt=0.2: m_dt=0.1: };
	    xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	    savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	    rel_net_adapt {
	     on=0;
	     trg_fm_input=0.85;
	     trg_fm_output=0.15;
	     trg_lateral=0;
	     trg_sum=1;
	     tol_lg=0.05;
	     tol_sm=0.2;
	     rel_lrate=0.2;
	    };
	   };
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0.05;
	  cur_lrate=0.05;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  wt_sig {gain=1: off=1: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	 };
	 PVConSpec @[2] {
	  name="NV";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0.0005;
	  cur_lrate=0.0005;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=0;
	  };
	  wt_sig {gain=1: off=1: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	 };
	};
	rnd {name="": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=NO_LRS;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=0;
	 cur_val=0;
	};
	wt_sig {gain=1: off=1: };
	lmix {hebb=0: err=1: err_sb=0: };
	xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	xcal_c {s_dt=0.2: m_dt=0.1: };
	xcalm {ml_mix=0: sm_mix=1: use_sb=0: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
       };
       LeabraBiasSpec @[1] {
	name="BgBias";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	};
	children {
	 name=;
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	 LeabraBiasSpec @[0] {
	  name="FixedBias";
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	  };
	  children {
	   name=;
	   el_typ=LeabraBiasSpec;
	   el_def=0;
	  };
	  rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  lrate=0;
	  cur_lrate=0;
	  lrs_value=EPOCH;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   last_ctr=-1;
	   default_val=1;
	   interpolate=0;
	   cur_val=1;
	  };
	  wt_sig {gain=6: off=1: };
	  lmix {hebb=0.001: err=0.999: err_sb=1: };
	  xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	  xcal_c {s_dt=0.2: m_dt=0.1: };
	  xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  dwt_thresh=0.1;
	 };
	};
	rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: };
	wt_scale_init {init=0: abs=1: rel=1: };
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 last_ctr=-1;
	 default_val=1;
	 interpolate=0;
	 cur_val=1;
	};
	wt_sig {gain=6: off=1: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	xcal_c {s_dt=0.2: m_dt=0.1: };
	xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
      };
      rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: };
      wt_scale_init {init=0: abs=1: rel=1: };
      lrate=0.02;
      cur_lrate=0.01;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=0;
       cur_val=0;
      };
      wt_sig {gain=6: off=1: };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
      xcal_c {s_dt=0.2: m_dt=0.1: };
      xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     MarkerConSpec @[1] {
      name="MarkerCons";
      desc=;
      unique{ rnd;wt_limits;wt_scale;lrate;      };
      children {
       name=;
       el_typ=MarkerConSpec;
       el_def=0;
      };
      rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=0: };
      wt_scale_init {init=0: abs=1: rel=1: };
      lrate=0;
      cur_lrate=0;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       last_ctr=-1;
       default_val=1;
       interpolate=0;
       cur_val=1;
      };
      wt_sig {gain=6: off=1: };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
      xcal_c {s_dt=0.2: m_dt=0.1: };
      xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
    };
    BaseSpec_Group @.gp[2] {
     name="PFC_BG_Layers";
     el_typ=ExtRewLayerSpec;
     el_def=0;
     ExtRewLayerSpec @[0] {
      name="PVeLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=ExtRewLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
      val_range {min=0: max=1: range=1: scale=1: };
      rew_type=EXT_REW;
      avg_rew {sub_avg=0: avg_dt=0.005: };
      out_err {err_tol=0.5: graded=0: no_off_err=0: scalar_val_max=1: };
      rew {err_val=0: norew_val=0.5: rew_val=1: };
     };
     PVrLayerSpec @[1] {
      name="PVrLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PVrLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv_detect {thr_min=0.2: thr_max=0.8: };
     };
     PViLayerSpec @[2] {
      name="PViLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PViLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv {min_pvi=0.4: prior_discount=1: er_reset_prior=1: };
     };
     LVeLayerSpec @[3] {
      name="LVeLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=LViLayerSpec;
       el_def=0;
       LViLayerSpec @[0] {
	name="LViLayer";
	desc=;
	unique{ ct_inhib_mod;inhib_group;inhib;decay;ct_inhib_mod;	};
	children {
	 name=;
	 el_typ=LViLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 min_i=0;
	 comp_thr=0.5;
	 comp_gain=2;
	 gp_pt=0.2;
	};
	kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	clamp {hard=1: gain=0.2: };
	decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
	ct_inhib_mod {
	 use_sin=1;
	 burst_i=0;
	 trough_i=0;
	 use_fin=0;
	 inhib_i=0;
	};
	net_rescale {on=0: max_net=0.6: net_extra=0.2: };
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
	unit_range {min=0: max=1: range=1: scale=1: };
	bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
	val_range {min=0: max=1: range=1: scale=1: };
	lv {min_lvi=0.1: prior_discount=1: er_reset_prior=1: };
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      lv {min_lvi=0.1: prior_discount=1: er_reset_prior=1: };
     };
     NVLayerSpec @[4] {
      name="NVLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=NVLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=1: };
      val_range {min=0: max=1: range=1: scale=1: };
      nv {
       da_gain=1;
       val_thr=0.1;
       prior_discount=1;
       er_reset_prior=1;
      };
     };
     PVLVDaLayerSpec @[5] {
      name="DALayer";
      desc=;
      unique{ decay;kwta;inhib_group;inhib;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PVLVDaLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_INHIB;
       kwta_pt=0.25;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: };
      decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
      ct_inhib_mod {
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      net_rescale {on=0: max_net=0.6: net_extra=0.2: };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      da {da_gain=1: tonic_da=0: };
     };
    };
    BaseSpec_Group @.gp[3] {
     name="PFC_BG_Prjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjn";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
     };
     OneToOnePrjnSpec @[1] {
      name="OneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="RewTarg";
     flags=;
     layer_type=INPUT;
     pos {x=12: y=4: z=0: };
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.0622335: max=0.0622335: max_i=0: };
     i_thrs {cmpt=1: avg=-0.1: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0.9865372: max=0.9865372: max_i=0: };
     acts_p {cmpt=1: avg=0.9915431: max=0.9915431: max_i=0: };
     acts_m {cmpt=1: avg=0.9865372: max=0.9865372: max_i=0: };
     phase_dif_ratio=0.9984199;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=1: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.0002172589;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[1].specs[1]$326$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="PVe";
     flags=;
     layer_type=TARGET;
     pos {x=0: y=0: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_RewTarg";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[0]$327$;
       spec {type=OneToOnePrjnSpec: spec=.projects[0].networks[1].specs.gp[3][1]$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=.projects[0].networks[1].specs.gp[1][1]$329$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=$140$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=$139$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_SomaElbowAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[12]$330$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_SomaShoulderAngle_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[14]$331$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[5] {
       name="Fm_VisHand_Pred";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[16]$332$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[2].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[3].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs.gp[0][0]$333$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="1";
     sse=0.25;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
     acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=3: };
     acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.9: gp_g_i=0: g_i_orig=0.9: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ExtRewLayerSpec: spec=$28$: };
     hard_clamped=1;
     ravg_l_avg=0.02325581;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0.5;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="PVr";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=4: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVe";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[1]$334$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[11]$335$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[1].specs.gp[3][0]$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$23$: };
       recv_idx=1;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[13]$337$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$23$: };
       recv_idx=2;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[15]$338$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$23$: };
       recv_idx=3;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[17]$339$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$23$: };
       recv_idx=4;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[4].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[5].projections[0];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[7].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$333$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.3591143: max=0.6924419: max_i=3: };
     i_thrs {cmpt=1: avg=14.82825: max=28.63634: max_i=3: };
     acts {cmpt=1: avg=0.3837274: max=0.7787879: max_i=3: };
     acts_p {cmpt=1: avg=0.3893034: max=0.7781158: max_i=1: };
     acts_m {cmpt=1: avg=0.3837274: max=0.7787879: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=28.63634: k1_ithr=10.22554: ithr_r=1.029788: ithr_diff=0.6429173: tie_brk=0: };
     i_val {kwta=26.79527: g_i=26.79527: gp_g_i=0: g_i_orig=26.79527: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=PVrLayerSpec: spec=$31$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[3] {
     name="PVi";
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=2: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVe";
       from_type=CUSTOM;
       from=$334$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$335$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=1;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$337$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=2;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$338$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=3;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$339$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$24$: };
       recv_idx=4;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$333$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.02573802: max=0.06334797: max_i=3: };
     i_thrs {cmpt=1: avg=0.9931281: max=2.528941: max_i=3: };
     acts {cmpt=1: avg=0.2438169: max=0.81884: max_i=3: };
     acts_p {cmpt=1: avg=0.2175473: max=0.8534505: max_i=1: };
     acts_m {cmpt=1: avg=0.2438169: max=0.81884: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.528941: k1_ithr=0.4811904: ithr_r=1.659293: ithr_diff=0.8097265: tie_brk=0: };
     i_val {kwta=2.324166: g_i=2.324166: gp_g_i=0: g_i_orig=2.324166: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=PViLayerSpec: spec=$29$: };
     hard_clamped=0;
     ravg_l_avg=0.2543678;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[4] {
     name="LVe";
     flags=;
     layer_type=HIDDEN;
     pos {x=6: y=0: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[2]$340$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$335$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=1;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$337$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=2;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$338$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=3;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$339$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$25$: };
       recv_idx=4;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs.gp[0][0].children[0]$341$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.03075196: max=0.07115627: max_i=3: };
     i_thrs {cmpt=1: avg=1.201207: max=2.852986: max_i=3: };
     acts {cmpt=1: avg=0.2684295: max=0.8091419: max_i=3: };
     acts_p {cmpt=1: avg=0.2181313: max=0.8498374: max_i=1: };
     acts_m {cmpt=1: avg=0.2684295: max=0.8091419: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.852986: k1_ithr=0.6506137: ithr_r=1.478205: ithr_diff=0.7719535: tie_brk=0: };
     i_val {kwta=2.632749: g_i=2.632749: gp_g_i=0: g_i_orig=2.632749: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LVeLayerSpec: spec=$30$: };
     hard_clamped=0;
     ravg_l_avg=2.869696e-19;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[5] {
     name="LVi";
     flags=;
     layer_type=HIDDEN;
     pos {x=6: y=2: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=$340$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$335$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$337$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=2;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$338$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=3;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$339$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$26$: };
       recv_idx=4;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$341$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.0146431: max=0.03055568: max_i=3: };
     i_thrs {cmpt=1: avg=0.5326887: max=1.168061: max_i=3: };
     acts {cmpt=1: avg=0.3369862: max=0.7866306: max_i=3: };
     acts_p {cmpt=1: avg=0.2288929: max=0.8253596: max_i=1: };
     acts_m {cmpt=1: avg=0.3369862: max=0.7866306: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.168061: k1_ithr=0.3208979: ithr_r=1.291978: ithr_diff=0.725273: tie_brk=0: };
     i_val {kwta=1.083345: g_i=1.083345: gp_g_i=0: g_i_orig=1.083345: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LViLayerSpec: spec=.projects[0].networks[1].specs.gp[2][3].children[0]$342$: };
     hard_clamped=0;
     ravg_l_avg=0.15;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[6] {
     name="NV";
     flags=;
     layer_type=HIDDEN;
     pos {x=6: y=4: z=0: };
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=4: y=1: n_not_xy=0: n=4: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$335$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$27$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$337$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$27$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$338$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$27$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$339$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$27$: };
       recv_idx=3;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[7].projections[4];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=1: n_not_xy=0: n=4: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$333$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.1401277: max=0.5133411: max_i=1: };
     i_thrs {cmpt=1: avg=5.7403: max=21.20366: max_i=1: };
     acts {cmpt=1: avg=0.2200211: max=0.8765381: max_i=1: };
     acts_p {cmpt=1: avg=0.2204396: max=0.8785468: max_i=1: };
     acts_m {cmpt=1: avg=0.2200211: max=0.8765381: max_i=1: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=21.20366: k1_ithr=0.5858462: ithr_r=3.588872: ithr_diff=0.9723705: tie_brk=0: };
     i_val {kwta=19.14188: g_i=19.14188: gp_g_i=0: g_i_orig=19.14188: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.9: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=NVLayerSpec: spec=$32$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[7] {
     name="DA";
     flags=;
     layer_type=HIDDEN;
     pos {x=12: y=0: z=0: };
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_PVi";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[3]$343$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_LVe";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[4]$344$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_LVi";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[5]$345$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_PVr";
       from_type=CUSTOM;
       from=$340$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_NV";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[6]$346$;
       spec {type=OneToOnePrjnSpec: spec=$328$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[8].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[9].projections[1];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[10].projections[6];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs.gp[0][1]$347$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0.6: max=0.6: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=0;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=1: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=PVLVDaLayerSpec: spec=$33$: };
     hard_clamped=0;
     ravg_l_avg=0.015;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[8] {
     name="MotorElbowForce";
     flags=;
     layer_type=OUTPUT;
     pos {x=26: y=9: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_RLHidden";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[10]$348$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[1].specs[2]$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[1].specs[3]$350$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[7]$351$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[5];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs[0].children[0]$352$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.6";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";"0.9";"1";     };
     netin {cmpt=1: avg=0.1714053: max=0.3192814: max_i=7: };
     i_thrs {cmpt=1: avg=1.210228: max=2.3106: max_i=7: };
     acts {cmpt=1: avg=0.07042875: max=0.845145: max_i=7: };
     acts_p {cmpt=1: avg=0.06206649: max=0.7447979: max_i=9: };
     acts_m {cmpt=1: avg=0.07042875: max=0.845145: max_i=7: };
     phase_dif_ratio=0.9280818;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=2.3106: k1_ithr=1.110194: ithr_r=0.7329724: ithr_diff=0.5195213: tie_brk=0: };
     i_val {kwta=2.070519: g_i=2.070519: gp_g_i=0: g_i_orig=2.070519: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08333334: i_kwta_pt=0.8: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$12$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[9] {
     name="MotorShoulderForce";
     flags=;
     layer_type=OUTPUT;
     pos {x=26: y=6: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_RLHidden";
       from_type=CUSTOM;
       from=$348$;
       spec {type=FullPrjnSpec: spec=$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$350$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$351$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[4];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[1].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$352$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.7";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";"0.9";"1";     };
     netin {cmpt=1: avg=0.1685549: max=0.3177858: max_i=8: };
     i_thrs {cmpt=1: avg=1.188473: max=2.292493: max_i=8: };
     acts {cmpt=1: avg=0.06670891: max=0.800507: max_i=8: };
     acts_p {cmpt=1: avg=0.07412142: max=0.889457: max_i=1: };
     acts_m {cmpt=1: avg=0.06670891: max=0.800507: max_i=8: };
     phase_dif_ratio=0.9876639;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=2.292493: k1_ithr=1.088108: ithr_r=0.7451998: ithr_diff=0.5253605: tie_brk=0: };
     i_val {kwta=2.051616: g_i=2.051616: gp_g_i=0: g_i_orig=2.051616: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08333334: i_kwta_pt=0.8: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$12$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[10] {
     name="RLHidden";
     flags=;
     layer_type=HIDDEN;
     pos {x=8: y=0: z=1: };
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_VisTarget_Cur";
       from_type=CUSTOM;
       from=$339$;
       spec {type=FullPrjnSpec: spec=$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$350$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_VisHand_Cur";
       from_type=CUSTOM;
       from=$338$;
       spec {type=FullPrjnSpec: spec=$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$350$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_SomaShoulderAngle_Cur";
       from_type=CUSTOM;
       from=$337$;
       spec {type=FullPrjnSpec: spec=$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$350$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[3] {
       name="Fm_SomaElbowAngle_Cur";
       from_type=CUSTOM;
       from=$335$;
       spec {type=FullPrjnSpec: spec=$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$350$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[4] {
       name="Fm_MotorShoulderForce";
       from_type=CUSTOM;
       from=$139$;
       spec {type=FullPrjnSpec: spec=$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$350$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[5] {
       name="Fm_MotorElbowForce";
       from_type=CUSTOM;
       from=$140$;
       spec {type=FullPrjnSpec: spec=$349$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$350$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[6] {
       name="Fm_DA";
       from_type=CUSTOM;
       from=$351$;
       spec {type=FullPrjnSpec: spec=$336$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$329$: };
       recv_idx=6;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[9].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[8].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=7: y=7: n_not_xy=0: n=49: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.16239: max=0.2496288: max_i=38: };
     i_thrs {cmpt=1: avg=1.123908: max=1.779473: max_i=38: };
     acts {cmpt=1: avg=0.1031627: max=0.9360201: max_i=38: };
     acts_p {cmpt=1: avg=0.1110669: max=0.9474235: max_i=39: };
     acts_m {cmpt=1: avg=0.1031627: max=0.9360201: max_i=38: };
     phase_dif_ratio=0.9779499;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=7: pct=0.1428571: pct_c=0.8571429: adth_k=1: k_ithr=1.553157: k1_ithr=1.052366: ithr_r=0.3892485: ithr_diff=0.3224341: tie_brk=0: };
     i_val {kwta=1.352841: g_i=1.352841: gp_g_i=0: g_i_orig=1.352841: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1428571: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=2.264977e-06;
     spec {type=LeabraLayerSpec: spec=$326$: };
     hard_clamped=0;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[11] {
     name="SomaElbowAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=3: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[3];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[1];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[1];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[1];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[1];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.210216: max=0.9185686: max_i=8: };
     acts_p {cmpt=1: avg=0.2156418: max=0.95: max_i=8: };
     acts_m {cmpt=1: avg=0.210216: max=0.9185686: max_i=8: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=.projects[0].networks[1].specs[4]$353$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[12] {
     name="SomaElbowAngle_Pred";
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=6: z=1: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.2353046: max=0.3001999: max_i=4: };
     i_thrs {cmpt=1: avg=1.699318: max=2.178182: max_i=4: };
     acts {cmpt=1: avg=0.2105052: max=0.9129162: max_i=4: };
     acts_p {cmpt=1: avg=0.2105052: max=0.9129162: max_i=4: };
     acts_m {cmpt=1: avg=0.2270163: max=0.8653816: max_i=4: };
     phase_dif_ratio=1.078436;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.088846: k1_ithr=1.569475: ithr_r=0.285871: ithr_diff=0.2486405: tie_brk=0: };
     i_val {kwta=1.881098: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$353$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[13] {
     name="SomaShoulderAngle_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=26: y=0: z=2: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[2];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[2];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[2];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[2];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[2];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.3";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.2104094: max=0.9149837: max_i=4: };
     acts_p {cmpt=1: avg=0.2161847: max=0.95: max_i=5: };
     acts_m {cmpt=1: avg=0.2104094: max=0.9149837: max_i=4: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$353$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[14] {
     name="SomaShoulderAngle_Pred";
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=9: z=1: };
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=12: y=1: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[4];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=12: y=1: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.1";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.2362774: max=0.304078: max_i=5: };
     i_thrs {cmpt=1: avg=1.705543: max=2.20583: max_i=5: };
     acts {cmpt=1: avg=0.2150649: max=0.948966: max_i=4: };
     acts_p {cmpt=1: avg=0.2150649: max=0.948966: max_i=4: };
     acts_m {cmpt=1: avg=0.224658: max=0.8710293: max_i=5: };
     phase_dif_ratio=1.044605;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.113612: k1_ithr=1.569521: ithr_r=0.2976281: ithr_diff=0.2574225: tie_brk=0: };
     i_val {kwta=1.895975: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=ScalarValLayerSpec: spec=$353$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[15] {
     name="VisHand_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=13: y=0: z=2: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[3];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[3];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[3];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[3];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.3,0.75";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.04408608: max=0.95: max_i=61: };
     acts_p {cmpt=1: avg=0.04870487: max=0.8676552: max_i=60: };
     acts_m {cmpt=1: avg=0.04408608: max=0.95: max_i=61: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=.projects[0].networks[1].specs[6]$354$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[16] {
     name="VisHand_Pred";
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=20: y=6: z=1: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[5];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.9,0.25";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.1106858: max=0.1428737: max_i=51: };
     i_thrs {cmpt=1: avg=0.7798139: max=1.02634: max_i=51: };
     acts {cmpt=1: avg=0.04698165: max=0.9139487: max_i=51: };
     acts_p {cmpt=1: avg=0.04698165: max=0.9139487: max_i=51: };
     acts_m {cmpt=1: avg=0.05990579: max=0.7300268: max_i=51: };
     phase_dif_ratio=1.275089;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0.9875029: k1_ithr=0.761307: ithr_r=0.2601427: ithr_diff=0.2290585: tie_brk=0: };
     i_val {kwta=0.8970246: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$354$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[17] {
     name="VisTarget_Cur";
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=2: };
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=11: y=10: n_not_xy=0: n=110: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[10].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[1].layers[2].projections[4];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[1].layers[3].projections[4];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[1].layers[4].projections[4];
	    Projection_Group @. = [4] = LeabraPrjn .projects[0].networks[1].layers[5].projections[4];
	    Projection_Group @. = [5] = LeabraPrjn .projects[0].networks[1].layers[6].projections[3];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=11: y=10: n_not_xy=0: n=110: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$7$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="0.5,0.5";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.04635016: max=0.95: max_i=58: };
     acts_p {cmpt=1: avg=0.04714963: max=0.8928071: max_i=62: };
     acts_m {cmpt=1: avg=0.04635016: max=0.95: max_i=58: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=9: pct=0.08181818: pct_c=0.9181818: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.6: gp_g_i=0: g_i_orig=0.6: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08181818: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=TwoDValLayerSpec: spec=$354$: };
     hard_clamped=1;
     ravg_l_avg=0;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
     misc_iar{      };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TEST;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=500;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=44680;
   group_name=;
   trial_name=;
   output_name="0.6_0.7";
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0.25;
   sum_sse=108.2656;
   avg_sse=0.3075728;
   cnt_err_tol=0;
   cnt_err=352;
   pct_err=1;
   pct_cor=0;
   cur_sum_sse=2.944521;
   avg_sse_n=8;
   cur_cnt_err=8;
   train_time {name="": start={usr=12007: sys=1730: tot=3657791847: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="": start={usr=5858: sys=1090: tot=3675512800: }: end={usr=5073: sys=844: tot=3675478652: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    log_timing=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=477;
   n_cons=19303;
   max_size {x=38: y=10: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   learn_rule=CTLEABRA_XCAL;
   phase_order=MINUS_PLUS;
   no_plus_test=0;
   sequence_init=DO_NOTHING;
   phase=PLUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=2;
   ct_cycle=50;
   time_inc=1;
   cycle_max=50;
   min_cycles=0;
   min_cycles_phase2=0;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=5;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=4;
    m_nrm=0;
    do_s=0;
   };
   minus_cycles=50;
   avg_cycles=50;
   avg_cycles_sum=400;
   avg_cycles_n=8;
   minus_output_name="0.6_0.7";
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=307;
   avg_send_pct=0.01373867;
   avg_send_pct_sum=6.837129;
   avg_send_pct_n=540;
   maxda_stopcrit=-1;
   maxda=0.0002172589;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=-1.1;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0.9713467;
   pvlv_pvi=0.8401663;
   pvlv_lve=0.7540973;
   pvlv_lvi=0.5840271;
   pv_detected=0;
   avg_ext_rew_sum=7;
   avg_ext_rew_n=7;
   off_errs=1;
   on_errs=1;
   norm_err=0.25;
   avg_norm_err=0.2895148;
   avg_norm_err_sum=2.682069;
   avg_norm_err_n=8;
  };
 };
};

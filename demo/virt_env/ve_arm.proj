// ta_Dump File v3.0 -- code v6.2.0.0 rev6106
LeabraProject .projects["ve_arm"] { 
  taBase_Group @.templates = [0] {
  };

  Doc_Group @.docs = [2] {
    taDoc @["ChangeLog"] { };
    taDoc @["ProjectDocs"] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @["LeabraWizard_1"] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @["NO_CLIP"] { };
   };
};
  };

  SelectEdit_Group @.edits = [4] {
    SelectEdit @["ControlPanel"] { 
      EditMbrItem_Group @.mbrs = [7] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem_Group @.gp["RLNet_Params"] = [7] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	  EditMbrItem @[6] { };
	};
      };

      EditMthItem_Group @.mths = [8] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
	EditMthItem @[6] { };
	EditMthItem @[7] { };
      };
    };
    SelectEdit @["VEInfo"] { 
      EditMbrItem_Group @.mbrs = [0] {
	EditMbrItem_Group @.gp["VE_Arm"] = [6] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	};
	EditMbrItem_Group @.gp["Shoulder"] { 
	};
	EditMbrItem_Group @.gp["Elbow"] { 
	};
	EditMbrItem_Group @.gp["Joints"] { 
	  EditMbrItem_Group @.gp["Elbow"] { 
	  };
	  EditMbrItem_Group @.gp["Shoulder"] { 
	  };
	};
	EditMbrItem_Group @.gp["Limbs"] = [0] { 
	  EditMbrItem_Group @.gp["Humerus"] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	  EditMbrItem_Group @.gp["Ulna"] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	  EditMbrItem_Group @.gp["Hand"] = [3] { 
	    EditMbrItem @[0] { };
	    EditMbrItem @[1] { };
	    EditMbrItem @[2] { };
	  };
	};
      };

      EditMthItem_Group @.mths = [3] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
      };
    };
    SelectEdit @["PVLV"] { 
      EditMbrItem_Group @.mbrs = [11] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
      };

      EditMthItem_Group @.mths = [0] {
      };
    };
    ClusterRun @["ClusterRun"] { 
      EditMbrItem_Group @.mbrs = [0] {
      };

      EditMthItem_Group @.mths = [0] {
      };

      DataTableCols @.data = [19] {
	String_Data @["model_svn"] { };
	String_Data @["submit_svn"] { };
	String_Data @["submit_job"] { };
	String_Data @["job_no"] { };
	String_Data @["tag"] { };
	String_Data @["status"] { };
	String_Data @["job_out"] { };
	String_Data @["job_out_file"] { };
	String_Data @["dat_files"] { };
	int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	String_Data @["command"] { };
	String_Data @["notes"] { };
	String_Data @["repo_url"] { };
	String_Data @["cluster"] { };
	String_Data @["queue"] { };
	String_Data @["run_time"] { };
	int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
      };

      DataTableCols @.data = [19] {
	String_Data @["model_svn"] { };
	String_Data @["submit_svn"] { };
	String_Data @["submit_job"] { };
	String_Data @["job_no"] { };
	String_Data @["tag"] { };
	String_Data @["status"] { };
	String_Data @["job_out"] { };
	String_Data @["job_out_file"] { };
	String_Data @["dat_files"] { };
	int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	String_Data @["command"] { };
	String_Data @["notes"] { };
	String_Data @["repo_url"] { };
	String_Data @["cluster"] { };
	String_Data @["queue"] { };
	String_Data @["run_time"] { };
	int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
      };

      DataTableCols @.data = [19] {
	String_Data @["model_svn"] { };
	String_Data @["submit_svn"] { };
	String_Data @["submit_job"] { };
	String_Data @["job_no"] { };
	String_Data @["tag"] { };
	String_Data @["status"] { };
	String_Data @["job_out"] { };
	String_Data @["job_out_file"] { };
	String_Data @["dat_files"] { };
	int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	String_Data @["command"] { };
	String_Data @["notes"] { };
	String_Data @["repo_url"] { };
	String_Data @["cluster"] { };
	String_Data @["queue"] { };
	String_Data @["run_time"] { };
	int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
	int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @["NARROW"] { };
     };
};
      };

      ParamSearchAlgo_List @.search_algos = [0] {
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp["InputData"] = [2] { 
      DataTable @["FwdModelInputData"] { 
	DataTableCols @.data = [10] {
	  String_Data @["Name"] { };
	  float_Data @["VisTarget_Cur"] { };
	  float_Data @["VisHand_Cur"] { };
	  float_Data @["SomaShoulderAngle_Cur"] { };
	  float_Data @["SomaElbowAngle_Cur"] { };
	  float_Data @["MotorShoulderForce"] { };
	  float_Data @["MotorElbowForce"] { };
	  float_Data @["VisHand_Pred"] { };
	  float_Data @["SomaShoulderAngle_Pred"] { };
	  float_Data @["SomaElbowAngle_Pred"] { };
	};
      };
      DataTable @["RLModelInputData"] { 
	DataTableCols @.data = [7] {
	  String_Data @["Name"] { };
	  float_Data @["VisTarget_Cur"] { };
	  float_Data @["VisHand_Cur"] { };
	  float_Data @["SomaShoulderAngle_Cur"] { };
	  float_Data @["SomaElbowAngle_Cur"] { };
	  float_Data @["MotorElbowForce"] { };
	  float_Data @["PVe"] { };
	};
      };
    };
    DataTable_Group @.gp["OutputData"] = [4] { 
      DataTable @["TrialOutputData"] { 
	DataTableCols @.data = [11] {
	  int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  String_Data @["trial_name"] { };
	  String_Data @["group_name"] { };
	  int_Data @["phase_no"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  float_Data @["minus_cycles"] { };
	  float_Data @["sse"] { };
	  float_Data @["ext_rew"] { };
	  float_Data @["pvlv_pvi"] { };
	  double_Data @["trg_dist"] { };
	};
      };
      DataTable @["EpochOutputData"] { 
	DataTableCols @.data = [11] {
	  int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  float_Data @["avg_sse"] { };
	  float_Data @["cnt_err"] { };
	  float_Data @["avg_trg_dist"] { };
	  float_Data @["avg_ext_rew"] { };
	  double_Data @["rew_dist_thr"] { };
	  float_Data @["avg_cycles"] { };
	  float_Data @["epoch_time_tot"] { };
	  float_Data @["epoch_time_usr"] { };
	  float_Data @["avg_pvi"] { };
	};
      };
      DataTable @["TestTrialOutputData"] { 
	DataTableCols @.data = [11] {
	  int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  String_Data @["trial_name"] { };
	  String_Data @["group_name"] { };
	  int_Data @["phase_no"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  float_Data @["minus_cycles"] { };
	  float_Data @["sse"] { };
	  float_Data @["ext_rew"] { };
	  float_Data @["pvlv_pvi"] { };
	  double_Data @["trg_dist"] { };
	};
      };
      DataTable @["TestEpochOutputData"] { 
	DataTableCols @.data = [11] {
	  int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @["NARROW"] { };
      };
};
	  float_Data @["avg_sse"] { };
	  float_Data @["cnt_err"] { };
	  float_Data @["avg_trg_dist"] { };
	  float_Data @["avg_ext_rew"] { };
	  double_Data @["rew_dist_thr"] { };
	  float_Data @["avg_cycles"] { };
	  float_Data @["epoch_time_tot"] { };
	  float_Data @["epoch_time_usr"] { };
	  float_Data @["avg_pvi"] { };
	};
      };
    };
    DataTable_Group @.gp["AnalysisData"] { 
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @["data_base"] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @["NO_CLIP"] { };
   };
};
    taDataAnal @["data_anal"] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @["NO_CLIP"] { };
   };
};
    taDataGen @["data_gen"] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @["NO_CLIP"] { };
   };
};
    taImageProc @["image_proc"] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @["NO_CLIP"] { };
   };
};
  };

  Program_Group @.programs = [1] {
    Program @["LeabraStartup"] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [2] {
	ProgVar @["network"] { };
	ProgVar @["input_data"] { };
      };

      ProgVar_List @.vars = [8] {
	ProgVar @["batch"] { };
	ProgVar @["tag"] { };
	ProgVar @["log_dir"] { };
	ProgVar @["log_file_nm"] { };
	ProgVar @["EpochOutputData"] { };
	ProgVar @["TrialOutputData"] { };
	ProgVar @["LeabraUnitSpec_0"] { };
	ProgVar @["ForceScalarVal"] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [30] {
	IfReturn @[0] { };
	Comment @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	RegisterArgs @[4] { };
	Comment @[5] { };
	PrintExpr @[6] { };
	MethodCall @[7] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
	MiscCall @[8] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MiscCall @[9] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	ProgVarFmArg @[10] { };
	ProgVarFmArg @[11] { };
	Comment @[12] { };
	ProgVarFmArg @[13] { };
	ProgVarFmArg @[14] { };
	ProgVarFmArg @[15] { };
	ProgVarFmArg @[16] { };
	MemberFmArg @[17] { };
	MemberFmArg @[18] { };
	MemberFmArg @[19] { };
	Comment @[20] { };
	MethodCall @[21] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MiscCall @[22] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[23] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[24] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[25] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[26] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	OtherProgramVar @[27] { };
	PrintExpr @[28] { };
	ProgramCall @[29] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program_Group @.gp["RobotProgs"] = [7] { 
      Program @["EmerRobot"] { 
	ProgObjList @.objs = [7] {
	  VEWorld @["VEEmerWorld"] { 
	    VEObject_Group @.objects = [2] {
	      VEObject @["Emer"] { 
		VEBody_Group @.bodies = [9] {
		  VEBody @["Torso"] { };
		  VEBody @["Humerus"] { };
		  VEBody @["Ulna"] { };
		  VEBody @["Hand"] { };
		  VEBody @["Head"] { };
		  VECamera @["LeftEye"] { };
		  VECamera @["RightEye"] { };
		  VEBody @["Pectoralis"] { };
		  VEBody @["Deltoid"] { };
		};

		VEJoint_Group @.joints = [5] {
		  VEMuscleJoint @["Shoulder"] { };
		  VEMuscleJoint @["Elbow"] { };
		  VEJoint @["Wrist"] { };
		  VEJoint @["LeftEyeJoint"] { };
		  VEJoint @["RightEyeJoint"] { };
		};
	      };
	      VEObject @["Target"] { 
		VEBody_Group @.bodies = [1] {
		  VEBody @["TargetBody"] { };
		};

		VEJoint_Group @.joints = [0] {
		};
	      };
	    };

	    VESpace_Group @.spaces = [1] {
	      VESpace @["RoomSpace"] { 
		VEStatic_Group @.static_els = [2] {
		  VEStatic @["Ground"] { };
		  VEStatic @["BackWall"] { };
		};
	      };
	    };

	    VETexture_List @.textures = [0] {
	    };
	  };
	  DataTable @["ArmOutputData"] { 
	    DataTableCols @.data = [20] {
	      String_Data @["Reach_Name"] { };
	      float_Data @["Reach_No"] { };
	      float_Data @["Hand_cur_pos_x"] { };
	      float_Data @["Hand_cur_pos_y"] { };
	      float_Data @["Hand_cur_pos_z"] { };
	      float_Data @["Target_cur_pos_x"] { };
	      float_Data @["Target_cur_pos_y"] { };
	      float_Data @["Target_cur_pos_z"] { };
	      float_Data @["Hand_cur_lin_vel_x"] { };
	      float_Data @["Hand_cur_lin_vel_y"] { };
	      float_Data @["Hand_cur_lin_vel_z"] { };
	      float_Data @["Should_pos"] { };
	      float_Data @["Should_vel"] { };
	      float_Data @["Should_force_in"] { };
	      float_Data @["Elbow_pos"] { };
	      float_Data @["Elbow_vel"] { };
	      float_Data @["Elbow_force_in"] { };
	      float_Data @["n_steps"] { };
	      float_Data @["angle_err"] { };
	      float_Data @["trg_dist"] { };
	    };
	  };
	  DataTable @["ReachOutputData"] { 
	    DataTableCols @.data = [29] {
	      float_Data @["time"] { };
	      float_Data @["Hand_cur_pos_x"] { };
	      float_Data @["Hand_cur_pos_y"] { };
	      float_Data @["Hand_cur_pos_z"] { };
	      float_Data @["Target_cur_pos_x"] { };
	      float_Data @["Target_cur_pos_y"] { };
	      float_Data @["Target_cur_pos_z"] { };
	      float_Data @["Hand_cur_lin_vel_x"] { };
	      float_Data @["Hand_cur_lin_vel_y"] { };
	      float_Data @["Hand_cur_lin_vel_z"] { };
	      float_Data @["Should_pos"] { };
	      float_Data @["Should_vel"] { };
	      float_Data @["Should_flexor_len"] { };
	      float_Data @["Should_flexor_dlen"] { };
	      float_Data @["Should_flexor_act"] { };
	      float_Data @["Should_flexor_m_act_force"] { };
	      float_Data @["Should_flexor_m_force"] { };
	      float_Data @["Should_flexor_force"] { };
	      float_Data @["Should_extensor_len"] { };
	      float_Data @["Should_extensor_dlen"] { };
	      float_Data @["Should_extensor_act"] { };
	      float_Data @["Should_extensor_m_act_force"] { };
	      float_Data @["Should_extensor_m_force"] { };
	      float_Data @["Should_extensor_force"] { };
	      float_Data @["should_cur_trg"] { };
	      float_Data @["Elbow_pos"] { };
	      float_Data @["Elbow_vel"] { };
	      float_Data @["Elbow_force_in"] { };
	      float_Data @["elbow_cur_trg"] { };
	    };
	  };
	  NetMonitor @["ArmMonitor"] { 
	    NetMonItem_List @.items = [20] {
	      NetMonItem @["Reach_Name"] { };
	      NetMonItem @["Reach_No"] { };
	      NetMonItem @["Hand_cur_pos_x"] { };
	      NetMonItem @["Hand_cur_pos_y"] { };
	      NetMonItem @["Hand_cur_pos_z"] { };
	      NetMonItem @["Target_cur_pos_x"] { };
	      NetMonItem @["Target_cur_pos_y"] { };
	      NetMonItem @["Target_cur_pos_z"] { };
	      NetMonItem @["Hand_cur_lin_vel_x"] { };
	      NetMonItem @["Hand_cur_lin_vel_y"] { };
	      NetMonItem @["Hand_cur_lin_vel_z"] { };
	      NetMonItem @["Should_pos"] { };
	      NetMonItem @["Should_vel"] { };
	      NetMonItem @["Should_force_in"] { };
	      NetMonItem @["Elbow_pos"] { };
	      NetMonItem @["Elbow_vel"] { };
	      NetMonItem @["Elbow_force_in"] { };
	      NetMonItem @["n_steps"] { };
	      NetMonItem @["angle_err"] { };
	      NetMonItem @["trg_dist"] { };
	    };
	  };
	  NetMonitor @["ReachMonitor"] { 
	    NetMonItem_List @.items = [29] {
	      NetMonItem @["time"] { };
	      NetMonItem @["Hand_cur_pos_x"] { };
	      NetMonItem @["Hand_cur_pos_y"] { };
	      NetMonItem @["Hand_cur_pos_z"] { };
	      NetMonItem @["Target_cur_pos_x"] { };
	      NetMonItem @["Target_cur_pos_y"] { };
	      NetMonItem @["Target_cur_pos_z"] { };
	      NetMonItem @["Hand_cur_lin_vel_x"] { };
	      NetMonItem @["Hand_cur_lin_vel_y"] { };
	      NetMonItem @["Hand_cur_lin_vel_z"] { };
	      NetMonItem @["Should_pos"] { };
	      NetMonItem @["Should_vel"] { };
	      NetMonItem @["Should_flexor_len"] { };
	      NetMonItem @["Should_flexor_dlen"] { };
	      NetMonItem @["Should_flexor_act"] { };
	      NetMonItem @["Should_flexor_m_act_force"] { };
	      NetMonItem @["Should_flexor_m_force"] { };
	      NetMonItem @["Should_flexor_force"] { };
	      NetMonItem @["Should_extensor_len"] { };
	      NetMonItem @["Should_extensor_dlen"] { };
	      NetMonItem @["Should_extensor_act"] { };
	      NetMonItem @["Should_extensor_m_act_force"] { };
	      NetMonItem @["Should_extensor_m_force"] { };
	      NetMonItem @["Should_extensor_force"] { };
	      NetMonItem @["should_cur_trg"] { };
	      NetMonItem @["Elbow_pos"] { };
	      NetMonItem @["Elbow_vel"] { };
	      NetMonItem @["Elbow_force_in"] { };
	      NetMonItem @["elbow_cur_trg"] { };
	    };
	  };
	  taImage @["LeftEyeImage"] { };
	  taImage @["RightEyeImage"] { };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [3] {
	  ProgVar @["gen_rnd_angles"] { };
	  ProgVar @["shoulder_trg_angle_norm"] { };
	  ProgVar @["elbow_trg_angle_norm"] { };
	};

	ProgVar_List @.vars = [43] {
	  ProgVar @["VEEmerWorld"] { };
	  ProgVar @["Shoulder"] { };
	  ProgVar @["Elbow"] { };
	  ProgVar @["Hand"] { };
	  ProgVar @["Torso"] { };
	  ProgVar @["Humerus"] { };
	  ProgVar @["Ulna"] { };
	  ProgVar @["TargetBody"] { };
	  ProgVar @["co_contract_pct"] { };
	  ProgVar @["angle_inc"] { };
	  ProgVar @["angle_updt_interval"] { };
	  ProgVar @["ve_step"] { };
	  ProgVar @["max_ve_steps"] { };
	  ProgVar @["min_ve_steps"] { };
	  ProgVar @["reach_mon_on"] { };
	  ProgVar @["capture_images"] { };
	  ProgVar @["shoulder_cur_trg_angle"] { };
	  ProgVar @["shoulder_pos_dir"] { };
	  ProgVar @["shoulder_angle_err"] { };
	  ProgVar @["elbow_cur_trg_angle"] { };
	  ProgVar @["elbow_pos_dir"] { };
	  ProgVar @["elbow_angle_err"] { };
	  ProgVar @["angle_err"] { };
	  ProgVar @["hand_vel"] { };
	  ProgVar @["hand_vel_thr"] { };
	  ProgVar @["ArmOutputData"] { };
	  ProgVar @["ArmMonitor"] { };
	  ProgVar @["ReachMonitor"] { };
	  ProgVar @["ReachOutputData"] { };
	  ProgVar @["arm_tot_len"] { };
	  ProgVar @["shoulder_x_pos"] { };
	  ProgVar @["shoulder_z_pos"] { };
	  ProgVar @["hand_max_x"] { };
	  ProgVar @["hand_min_z"] { };
	  ProgVar @["hand_min_x"] { };
	  ProgVar @["hand_max_z"] { };
	  ProgVar @["hand_pos_x_norm"] { };
	  ProgVar @["hand_pos_z_norm"] { };
	  ProgVar @["targ_pos_x_norm"] { };
	  ProgVar @["targ_pos_z_norm"] { };
	  ProgVar @["trg_dist"] { };
	  ProgVar @["LeftEyeImage"] { };
	  ProgVar @["RightEyeImage"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [14] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  ResetDataRows @[3] { };
	  ResetDataRows @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  AssignExpr @[9] { };
	  AssignExpr @[10] { };
	  AssignExpr @[11] { };
	  AssignExpr @[12] { };
	  AssignExpr @[13] { };
	};

	ProgEl_List @.prog_code = [31] {
	  IfElse @[0] { 
	    ProgEl_List @.true_code = [3] {
	      Comment @[0] { };
	      RandomCall @[1] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      RandomCall @[2] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  Comment @[1] { };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  ResetDataRows @[6] { };
	  ForLoop @[7] { 
	    ProgEl_List @.loop_code = [5] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [4] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };

		    ProgEl_List @.false_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };
		  };
		  IfElse @[1] { 
		    ProgEl_List @.true_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };

		    ProgEl_List @.false_code = [2] {
		      VarIncr @[0] { };
		      AssignExpr @[1] { };
		    };
		  };
		  MethodCall @[2] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [0] {
		};
	      };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      IfElse @[2] { 
		ProgEl_List @.true_code = [6] {
		  AddNewDataRow @[0] { };
		  MethodCall @[1] { 
		    ProgArg_List @.meth_args = [0] {
		    };
		  };
		  MethodCall @[2] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[4] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  DoneWritingDataRow @[5] { };
		};

		ProgEl_List @.false_code = [0] {
		};
	      };
	      IfElse @[3] { 
		ProgEl_List @.true_code = [2] {
		  AssignExpr @[0] { };
		  IfBreak @[1] { };
		};

		ProgEl_List @.false_code = [0] {
		};
	      };
	      StopStepPoint @[4] { };
	    };
	  };
	  Comment @[8] { };
	  AssignExpr @[9] { };
	  AssignExpr @[10] { };
	  AssignExpr @[11] { };
	  AssignExpr @[12] { };
	  AssignExpr @[13] { };
	  MathCall @[14] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  Comment @[15] { };
	  AssignExpr @[16] { };
	  AssignExpr @[17] { };
	  AssignExpr @[18] { };
	  AddNewDataRow @[19] { };
	  MethodCall @[20] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[21] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[22] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[23] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[24] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[25] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[26] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[27] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  DoneWritingDataRow @[28] { };
	  Comment @[29] { };
	  IfElse @[30] { 
	    ProgEl_List @.true_code = [3] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	};
      };
      Program @["SetTarget"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [3] {
	  ProgVar @["gen_rnd_targ"] { };
	  ProgVar @["targ_angle"] { };
	  ProgVar @["targ_dist"] { };
	};

	ProgVar_List @.vars = [9] {
	  ProgVar @["TargetBody"] { };
	  ProgVar @["arm_tot_len"] { };
	  ProgVar @["targ_x"] { };
	  ProgVar @["targ_z"] { };
	  ProgVar @["shoulder_x_pos"] { };
	  ProgVar @["shoulder_z_pos"] { };
	  ProgVar @["rnd_angle_min"] { };
	  ProgVar @["rnd_angle_max"] { };
	  ProgVar @["rnd_dist_min"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [7] {
	  OtherProgramVar @[0] { };
	  IfElse @[1] { 
	    ProgEl_List @.true_code = [2] {
	      RandomCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      RandomCall @[1] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  MemberAssign @[4] { };
	  MemberAssign @[5] { };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @["RobotGetCurInputs"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [17] {
	  ProgVar @["TargetBody"] { };
	  ProgVar @["Hand"] { };
	  ProgVar @["Shoulder"] { };
	  ProgVar @["Elbow"] { };
	  ProgVar @["arm_tot_len"] { };
	  ProgVar @["shoulder_x_pos"] { };
	  ProgVar @["shoulder_z_pos"] { };
	  ProgVar @["hand_max_x"] { };
	  ProgVar @["hand_min_x"] { };
	  ProgVar @["hand_max_z"] { };
	  ProgVar @["hand_min_z"] { };
	  ProgVar @["hand_pos_x_norm"] { };
	  ProgVar @["hand_pos_z_norm"] { };
	  ProgVar @["targ_pos_x_norm"] { };
	  ProgVar @["targ_pos_z_norm"] { };
	  ProgVar @["shoulder_ang_norm"] { };
	  ProgVar @["elbow_ang_norm"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [16] {
	  OtherProgramVar @[0] { };
	  OtherProgramVar @[1] { };
	  Comment @[2] { };
	  AssignExpr @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  Comment @[9] { };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[11] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[14] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[15] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	};
      };
      Program @["FwdModelPredTargs"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [15] {
	  ProgVar @["Shoulder"] { };
	  ProgVar @["Elbow"] { };
	  ProgVar @["arm_tot_len"] { };
	  ProgVar @["shoulder_x_pos"] { };
	  ProgVar @["shoulder_z_pos"] { };
	  ProgVar @["hand_max_x"] { };
	  ProgVar @["hand_min_x"] { };
	  ProgVar @["hand_max_z"] { };
	  ProgVar @["hand_min_z"] { };
	  ProgVar @["hand_pos_x_norm"] { };
	  ProgVar @["hand_pos_z_norm"] { };
	  ProgVar @["shoulder_trg_angle_norm"] { };
	  ProgVar @["elbow_trg_angle_norm"] { };
	  ProgVar @["shoulder_ang_norm"] { };
	  ProgVar @["elbow_ang_norm"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [15] {
	  Comment @[0] { };
	  OtherProgramVar @[1] { };
	  OtherProgramVar @[2] { };
	  OtherProgramVar @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  OtherProgramVar @[6] { };
	  Comment @[7] { };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[11] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  DoneWritingDataRow @[14] { };
	};
      };
      Program @["RLModelRew"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @["trg_dist"] { };
	  ProgVar @["rew_val"] { };
	  ProgVar @["rew_dist_thr"] { };
	  ProgVar @["rew_dist_thr_init"] { };
	  ProgVar @["rew_dist_thr_incr"] { };
	  ProgVar @["avg_rew_dec_thr"] { };
	  ProgVar @["avg_rew_inc_thr"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  AssignExpr @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  OtherProgramVar @[0] { };
	  IfElse @[1] { 
	    ProgEl_List @.true_code = [1] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [1] {
		  AssignExpr @[0] { };
		};

		ProgEl_List @.false_code = [2] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [1] {
		      VarIncr @[0] { };
		    };

		    ProgEl_List @.false_code = [0] {
		    };
		  };
		  IfElse @[1] { 
		    ProgEl_List @.true_code = [1] {
		      VarIncr @[0] { };
		    };

		    ProgEl_List @.false_code = [0] {
		    };
		  };
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  Comment @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  DoneWritingDataRow @[6] { };
	};
      };
      Program @["RobotTrialInit"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @["cur_net_name"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  AssignExpr @[0] { };
	  Switch @[1] { 
	    ProgEl_List @.cases = [2] {
	      CaseBlock @[0] { 
		ProgEl_List @.prog_code = [3] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  ProgramCall @[2] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	      CaseBlock @[1] { 
		ProgEl_List @.prog_code = [2] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	    };
	  };
	};
      };
      Program @["RobotSettleInit"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @["cur_net_name"] { };
	  ProgVar @["MotorShoulderForce"] { };
	  ProgVar @["MotorElbowForce"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  AssignExpr @[0] { };
	  Switch @[1] { 
	    ProgEl_List @.cases = [2] {
	      CaseBlock @[0] { 
		ProgEl_List @.prog_code = [1] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [0] {
		    };
		  };
		};
	      };
	      CaseBlock @[1] { 
		ProgEl_List @.prog_code = [2] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [4] {
		      AssignExpr @[0] { };
		      AssignExpr @[1] { };
		      ProgramCall @[2] { 
			ProgArg_List @.prog_args = [3] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			};
		      };
		      ProgramCall @[3] { 
			ProgArg_List @.prog_args = [2] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			};
		      };
		    };

		    ProgEl_List @.false_code = [0] {
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [0] {
		    };
		  };
		};
	      };
	    };
	  };
	};
      };
    };
    Program_Group @.gp["LeabraAll_Std"] = [11] { 
      Program @["LeabraBatch"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @["batch"] { };
	  ProgVar @["max_batch"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @["LeabraTrain"] { 
	ProgObjList @.objs = [1] {
	  RndSeed @["rnd_seed"] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @["RndInitType"] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @["OLD_SEED"] { };
	      DynEnumItem @["NEW_SEED"] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	  ProgVar @["no_prompts"] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @["max_epoch"] { };
	  ProgVar @["epoch"] { };
	  ProgVar @["train_mode"] { };
	  ProgVar @["rnd_init"] { };
	  ProgVar @["err_stopcrit"] { };
	  ProgVar @["save_final_wts"] { };
	  ProgVar @["rnd_seed"] { };
	  ProgVar @["train_timer"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [8] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	};
      };
      Program @["LeabraEpoch"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [9] {
	  ProgVar @["data_loop_order"] { };
	  ProgVar @["trial"] { };
	  ProgVar @["trials_per_epoch"] { };
	  ProgVar @["trial_mon_data"] { };
	  ProgVar @["epoch_timer"] { };
	  ProgVar @["data_loop_index"] { };
	  ProgVar @["compute_rel_netin"] { };
	  ProgVar @["adapt_rel_abs_netin"] { };
	  ProgVar @["ArmOutputData"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[9] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [2] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [0] {
		    };
		  };
		  MethodCall @[1] { 
		    ProgArg_List @.meth_args = [0] {
		    };
		  };
		};

		ProgEl_List @.false_code = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[11] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @["LeabraTrial"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @["phase_no"] { };
	  ProgVar @["update_net_view"] { };
	  ProgVar @["trial"] { };
	  ProgVar @["compute_rel_netin"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @["LeabraSettle"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @["cycle"] { };
	  ProgVar @["min_cycles"] { };
	  ProgVar @["update_net_view"] { };
	  ProgVar @["MotorElbowForce"] { };
	  ProgVar @["MotorShoulderForce"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @["LeabraCycle"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @["update_net_view"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @["ApplyInputs_FwdModel"] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @["LayerWriter_0"] { 
	    LayerDataEl_List @.layer_data = [10] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	      LayerWriterEl @[5] { };
	      LayerWriterEl @[6] { };
	      LayerWriterEl @[7] { };
	      LayerWriterEl @[8] { };
	      LayerWriterEl @[9] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [0] {
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	  ProgVar @["LayerWriter_0"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @["ApplyInputs_RLModel"] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @["LayerWriter_0"] { 
	    LayerDataEl_List @.layer_data = [7] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	      LayerWriterEl @[4] { };
	      LayerWriterEl @[5] { };
	      LayerWriterEl @[6] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [0] {
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	  ProgVar @["LayerWriter_0"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @["LeabraTrialMonitor"] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @["trial_netmon"] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @["batch"] { };
	      NetMonItem @["epoch"] { };
	      NetMonItem @["trial"] { };
	      NetMonItem @["trial_name"] { };
	      NetMonItem @["group_name"] { };
	      NetMonItem @["phase_no"] { };
	      NetMonItem @["minus_cycles"] { };
	      NetMonItem @["sse"] { };
	      NetMonItem @["ext_rew"] { };
	      NetMonItem @["pvlv_pvi"] { };
	      NetMonItem @["trg_dist"] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @["trial_mon_data"] { };
	  ProgVar @["trial_netmon"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @["LeabraEpochMonitor"] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @["epoch_netmon"] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @["batch"] { };
	      NetMonItem @["epoch"] { };
	      NetMonItem @["avg_sse"] { };
	      NetMonItem @["cnt_err"] { };
	      NetMonItem @["avg_trg_dist"] { };
	      NetMonItem @["avg_ext_rew"] { };
	      NetMonItem @["rew_dist_thr"] { };
	      NetMonItem @["avg_cycles"] { };
	      NetMonItem @["epoch_time_tot"] { };
	      NetMonItem @["epoch_time_usr"] { };
	      NetMonItem @["avg_pvi"] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @["epoch_mon_data"] { };
	  ProgVar @["epoch_netmon"] { };
	  ProgVar @["epoch_timer"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @["SaveWeights"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @["tag"] { };
	  ProgVar @["wts_subdir"] { };
	  ProgVar @["fname"] { };
	  ProgVar @["epoch_str"] { };
	  ProgVar @["batch_str"] { };
	  ProgVar @["final_tag"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp["LeabraAll_Test"] = [6] { 
      Program @["LeabraEpochTest"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @["input_data"] { };
	  ProgVar @["data_loop_order"] { };
	  ProgVar @["trial"] { };
	  ProgVar @["trial_mon_data"] { };
	  ProgVar @["epoch_timer"] { };
	  ProgVar @["data_loop_index"] { };
	  ProgVar @["load_weights"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [12] {
	  IfElse @[0] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      PrintVar @[1] { };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  NetCounterInit @[1] { };
	  MemberAssign @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[10] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[11] { };
	};
      };
      Program @["LeabraTrialTest"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @["phase_no"] { };
	  ProgVar @["update_net_view"] { };
	  ProgVar @["trial"] { };
	  ProgVar @["compute_rel_netin"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @["LeabraSettleTest"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @["network"] { };
	  ProgVar @["input_data"] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @["cycle"] { };
	  ProgVar @["min_cycles"] { };
	  ProgVar @["update_net_view"] { };
	  ProgVar @["MotorElbowForce"] { };
	  ProgVar @["MotorShoulderForce"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @["LeabraCycleTest"] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @["update_net_view"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @["LeabraTrialMonitorTest"] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @["trial_netmon"] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @["batch"] { };
	      NetMonItem @["epoch"] { };
	      NetMonItem @["trial"] { };
	      NetMonItem @["trial_name"] { };
	      NetMonItem @["group_name"] { };
	      NetMonItem @["phase_no"] { };
	      NetMonItem @["minus_cycles"] { };
	      NetMonItem @["sse"] { };
	      NetMonItem @["ext_rew"] { };
	      NetMonItem @["pvlv_pvi"] { };
	      NetMonItem @["trg_dist"] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @["trial_mon_data"] { };
	  ProgVar @["trial_netmon"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @["LeabraEpochMonitorTest"] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @["epoch_netmon"] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @["batch"] { };
	      NetMonItem @["epoch"] { };
	      NetMonItem @["avg_sse"] { };
	      NetMonItem @["cnt_err"] { };
	      NetMonItem @["avg_trg_dist"] { };
	      NetMonItem @["avg_ext_rew"] { };
	      NetMonItem @["rew_dist_thr"] { };
	      NetMonItem @["avg_cycles"] { };
	      NetMonItem @["epoch_time_tot"] { };
	      NetMonItem @["epoch_time_usr"] { };
	      NetMonItem @["avg_pvi"] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @["network"] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @["epoch_mon_data"] { };
	  ProgVar @["epoch_netmon"] { };
	  ProgVar @["epoch_timer"] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
    };
  };

  taViewer_List @.viewers = [1] {
    MainWindowViewer @["Browser3"] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @["Application"] { };
      };

      FrameViewer_List @.frames = [3] {
	BrowseViewerTaBase @["Tree"] { };
	PanelViewer @["Panels"] { };
	T3PanelViewer @["T3Frames"] { 
	  T3Panel_List @.panels = [5] {
	    T3Panel @["VEArmWorld"] { 
	      T3DataView_List @.children = [6] {
		VEWorldView @["VEEmerWorld_View"] { 
		  T3DataView_List @.children = [3] {
		    VESpaceView @["RoomSpace"] { 
		      T3DataView_List @.children = [2] {
			VEStaticView @["Ground"] { };
			VEStaticView @["BackWall"] { };
		      };
		    };
		    VEObjectView @["Emer"] { 
		      T3DataView_List @.children = [14] {
			VEBodyView @["Torso"] { };
			VEBodyView @["Humerus"] { };
			VEBodyView @["Ulna"] { };
			VEBodyView @["Hand"] { };
			VEBodyView @["Head"] { };
			VEBodyView @["LeftEye"] { };
			VEBodyView @["RightEye"] { };
			VEBodyView @["Pectoralis"] { };
			VEBodyView @["Deltoid"] { };
			VEJointView @["Shoulder"] { };
			VEJointView @["Elbow"] { };
			VEJointView @["Wrist"] { };
			VEJointView @["LeftEyeJoint"] { };
			VEJointView @["RightEyeJoint"] { };
		      };
		    };
		    VEObjectView @["Target"] { 
		      T3DataView_List @.children = [1] {
			VEBodyView @["TargetBody"] { };
		      };
		    };
		  };
		};
		GraphTableView @["ArmOutputData_Graph"] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @["Reach_Name"] { };
		    GraphColView @["Reach_No"] { };
		    GraphColView @["Hand_cur_pos_x"] { };
		    GraphColView @["Hand_cur_pos_y"] { };
		    GraphColView @["Hand_cur_pos_z"] { };
		    GraphColView @["Target_cur_pos_x"] { };
		    GraphColView @["Target_cur_pos_y"] { };
		    GraphColView @["Target_cur_pos_z"] { };
		    GraphColView @["Hand_cur_lin_vel_x"] { };
		    GraphColView @["Hand_cur_lin_vel_y"] { };
		    GraphColView @["Hand_cur_lin_vel_z"] { };
		    GraphColView @["Should_pos"] { };
		    GraphColView @["Should_vel"] { };
		    GraphColView @["Should_force_in"] { };
		    GraphColView @["Elbow_pos"] { };
		    GraphColView @["Elbow_vel"] { };
		    GraphColView @["Elbow_force_in"] { };
		    GraphColView @["n_steps"] { };
		    GraphColView @["angle_err"] { };
		    GraphColView @["trg_dist"] { };
		  };
		};
		GraphTableView @["ArmOutputData_Graph_2"] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @["Reach_Name"] { };
		    GraphColView @["Reach_No"] { };
		    GraphColView @["Hand_cur_pos_x"] { };
		    GraphColView @["Hand_cur_pos_y"] { };
		    GraphColView @["Hand_cur_pos_z"] { };
		    GraphColView @["Target_cur_pos_x"] { };
		    GraphColView @["Target_cur_pos_y"] { };
		    GraphColView @["Target_cur_pos_z"] { };
		    GraphColView @["Hand_cur_lin_vel_x"] { };
		    GraphColView @["Hand_cur_lin_vel_y"] { };
		    GraphColView @["Hand_cur_lin_vel_z"] { };
		    GraphColView @["Should_pos"] { };
		    GraphColView @["Should_vel"] { };
		    GraphColView @["Should_force_in"] { };
		    GraphColView @["Elbow_pos"] { };
		    GraphColView @["Elbow_vel"] { };
		    GraphColView @["Elbow_force_in"] { };
		    GraphColView @["n_steps"] { };
		    GraphColView @["angle_err"] { };
		    GraphColView @["trg_dist"] { };
		  };
		};
		GraphTableView @["ArmOutputData_Graph_3"] { 
		  T3DataView_List @.children = [20] {
		    GraphColView @["Reach_Name"] { };
		    GraphColView @["Reach_No"] { };
		    GraphColView @["Hand_cur_pos_x"] { };
		    GraphColView @["Hand_cur_pos_y"] { };
		    GraphColView @["Hand_cur_pos_z"] { };
		    GraphColView @["Target_cur_pos_x"] { };
		    GraphColView @["Target_cur_pos_y"] { };
		    GraphColView @["Target_cur_pos_z"] { };
		    GraphColView @["Hand_cur_lin_vel_x"] { };
		    GraphColView @["Hand_cur_lin_vel_y"] { };
		    GraphColView @["Hand_cur_lin_vel_z"] { };
		    GraphColView @["Should_pos"] { };
		    GraphColView @["Should_vel"] { };
		    GraphColView @["Should_force_in"] { };
		    GraphColView @["Elbow_pos"] { };
		    GraphColView @["Elbow_vel"] { };
		    GraphColView @["Elbow_force_in"] { };
		    GraphColView @["n_steps"] { };
		    GraphColView @["angle_err"] { };
		    GraphColView @["trg_dist"] { };
		  };
		};
		GraphTableView @["ReachOutputData_Graph"] { 
		  T3DataView_List @.children = [29] {
		    GraphColView @["time"] { };
		    GraphColView @["Hand_cur_pos_x"] { };
		    GraphColView @["Hand_cur_pos_y"] { };
		    GraphColView @["Hand_cur_pos_z"] { };
		    GraphColView @["Target_cur_pos_x"] { };
		    GraphColView @["Target_cur_pos_y"] { };
		    GraphColView @["Target_cur_pos_z"] { };
		    GraphColView @["Hand_cur_lin_vel_x"] { };
		    GraphColView @["Hand_cur_lin_vel_y"] { };
		    GraphColView @["Hand_cur_lin_vel_z"] { };
		    GraphColView @["Should_pos"] { };
		    GraphColView @["Should_vel"] { };
		    GraphColView @["Should_flexor_len"] { };
		    GraphColView @["Should_flexor_dlen"] { };
		    GraphColView @["Should_flexor_act"] { };
		    GraphColView @["Should_flexor_m_act_force"] { };
		    GraphColView @["Should_flexor_m_force"] { };
		    GraphColView @["Should_flexor_force"] { };
		    GraphColView @["Should_extensor_len"] { };
		    GraphColView @["Should_extensor_dlen"] { };
		    GraphColView @["Should_extensor_act"] { };
		    GraphColView @["Should_extensor_m_act_force"] { };
		    GraphColView @["Should_extensor_m_force"] { };
		    GraphColView @["Should_extensor_force"] { };
		    GraphColView @["should_cur_trg"] { };
		    GraphColView @["Elbow_pos"] { };
		    GraphColView @["Elbow_vel"] { };
		    GraphColView @["Elbow_force_in"] { };
		    GraphColView @["elbow_cur_trg"] { };
		  };
		};
		GraphTableView @["ReachOutputData_Graph_5"] { 
		  T3DataView_List @.children = [29] {
		    GraphColView @["time"] { };
		    GraphColView @["Hand_cur_pos_x"] { };
		    GraphColView @["Hand_cur_pos_y"] { };
		    GraphColView @["Hand_cur_pos_z"] { };
		    GraphColView @["Target_cur_pos_x"] { };
		    GraphColView @["Target_cur_pos_y"] { };
		    GraphColView @["Target_cur_pos_z"] { };
		    GraphColView @["Hand_cur_lin_vel_x"] { };
		    GraphColView @["Hand_cur_lin_vel_y"] { };
		    GraphColView @["Hand_cur_lin_vel_z"] { };
		    GraphColView @["Should_pos"] { };
		    GraphColView @["Should_vel"] { };
		    GraphColView @["Should_flexor_len"] { };
		    GraphColView @["Should_flexor_dlen"] { };
		    GraphColView @["Should_flexor_act"] { };
		    GraphColView @["Should_flexor_m_act_force"] { };
		    GraphColView @["Should_flexor_m_force"] { };
		    GraphColView @["Should_flexor_force"] { };
		    GraphColView @["Should_extensor_len"] { };
		    GraphColView @["Should_extensor_dlen"] { };
		    GraphColView @["Should_extensor_act"] { };
		    GraphColView @["Should_extensor_m_act_force"] { };
		    GraphColView @["Should_extensor_m_force"] { };
		    GraphColView @["Should_extensor_force"] { };
		    GraphColView @["should_cur_trg"] { };
		    GraphColView @["Elbow_pos"] { };
		    GraphColView @["Elbow_vel"] { };
		    GraphColView @["Elbow_force_in"] { };
		    GraphColView @["elbow_cur_trg"] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @["View_0"] { };
		T3SavedView @["TopDown"] { };
		T3SavedView @["Side"] { };
		T3SavedView @["View_3"] { };
		T3SavedView @["View_4"] { };
		T3SavedView @["View_5"] { };
	      };
	    };
	    T3Panel @["FwdModelNet"] { 
	      T3DataView_List @.children = [1] {
		NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_FwdModelNet_root_view_children_0"] { 
		  ScaleRange_List @.scale_ranges = [6] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		    ScaleRange @[5] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @["View_0"] { };
		T3SavedView @["View_1"] { };
		T3SavedView @["View_2"] { };
		T3SavedView @["View_3"] { };
		T3SavedView @["View_4"] { };
		T3SavedView @["View_5"] { };
	      };
	    };
	    T3Panel @["EpochOutputData"] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0"] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @["batch"] { };
		    GraphColView @["epoch"] { };
		    GraphColView @["avg_sse"] { };
		    GraphColView @["cnt_err"] { };
		    GraphColView @["avg_trg_dist"] { };
		    GraphColView @["avg_ext_rew"] { };
		    GraphColView @["rew_dist_thr"] { };
		    GraphColView @["avg_cycles"] { };
		    GraphColView @["epoch_time_tot"] { };
		    GraphColView @["epoch_time_usr"] { };
		    GraphColView @["avg_pvi"] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @["View_0"] { };
		T3SavedView @["View_1"] { };
		T3SavedView @["View_2"] { };
		T3SavedView @["View_3"] { };
		T3SavedView @["View_4"] { };
		T3SavedView @["View_5"] { };
	      };
	    };
	    T3Panel @["RLNet"] { 
	      T3DataView_List @.children = [1] {
		NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_RLNet_root_view_children_0"] { 
		  ScaleRange_List @.scale_ranges = [3] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @["View_0"] { };
		T3SavedView @["View_1"] { };
		T3SavedView @["View_2"] { };
		T3SavedView @["View_3"] { };
		T3SavedView @["View_4"] { };
		T3SavedView @["View_5"] { };
	      };
	    };
	    T3Panel @["TrialOutputData"] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0"] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @["batch"] { };
		    GraphColView @["epoch"] { };
		    GraphColView @["trial"] { };
		    GraphColView @["trial_name"] { };
		    GraphColView @["group_name"] { };
		    GraphColView @["phase_no"] { };
		    GraphColView @["minus_cycles"] { };
		    GraphColView @["sse"] { };
		    GraphColView @["ext_rew"] { };
		    GraphColView @["pvlv_pvi"] { };
		    GraphColView @["trg_dist"] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @["View_0"] { };
		T3SavedView @["View_1"] { };
		T3SavedView @["View_2"] { };
		T3SavedView @["View_3"] { };
		T3SavedView @["View_4"] { };
		T3SavedView @["View_5"] { };
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @["Tools"] { };
      };
    };
  };

  Network_Group @.networks = [2] {
    LeabraNetwork @["FwdModelNet"] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @["cos_err"] { };
	UserDataItem @["norm_err"] { };
	UserDataItem @["ext_rew"] { };
	UserDataItem @["maxda"] { };
	UserDataItem @["minus_output_name"] { };
	UserDataItem @["minus_cycles"] { };
	UserDataItem @["ct_cycle"] { };
	UserDataItem @["phase_no"] { };
	UserDataItem @["phase"] { };
	UserDataItem @["sse"] { };
	UserDataItem @["output_name"] { };
	UserDataItem @["trial_name"] { };
	UserDataItem @["group_name"] { };
	UserDataItem @["time"] { };
	UserDataItem @["cycle"] { };
	UserDataItem @["tick"] { };
	UserDataItem @["trial"] { };
	UserDataItem @["group"] { };
	UserDataItem @["epoch"] { };
	UserDataItem @["batch"] { };
   };

      BaseSpec_Group @.specs = [7] {
	LeabraUnitSpec @["LeabraUnitSpec_0"] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	LeabraLayerSpec @["HiddenLayer"] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @["Input_Output"] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	  };
	};
	FullPrjnSpec @["FullPrjnSpec_2"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	LeabraConSpec @["LeabraConSpec_4"] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @["LeabraBiasSpec_4"] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	ScalarValLayerSpec @["NormScalarVal"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	ScalarValLayerSpec @["ForceScalarVal"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	TwoDValLayerSpec @["VisTwoDVal"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
      };

      Layer_Group @.layers = [11] {
	TwoDValLeabraLayer @["VisTarget_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [110] {
	  };
	};
	TwoDValLeabraLayer @["VisHand_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @["SomaShoulderAngle_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["SomaElbowAngle_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["MotorShoulderForce"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["MotorElbowForce"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["VisFwdHidden"] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @["Fm_MotorShoulderForce"] { };
	    LeabraPrjn @["Fm_MotorElbowForce"] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @["SomaFwdHidden"] { 
	  Projection_Group @.projections = [6] {
	    LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
	    LeabraPrjn @["Fm_MotorShoulderForce"] { };
	    LeabraPrjn @["Fm_MotorElbowForce"] { };
	    LeabraPrjn @["Fm_SomaShoulderAngle_Pred"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Pred"] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	TwoDValLeabraLayer @["VisHand_Pred"] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @["Fm_VisFwdHidden"] { };
	  };

	  Unit_Group @.units = [110] {
	  };
	};
	LeabraLayer @["SomaShoulderAngle_Pred"] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @["Fm_SomaFwdHidden"] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["SomaElbowAngle_Pred"] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @["Fm_SomaFwdHidden"] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
    LeabraNetwork @["RLNet"] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @["cos_err"] { };
	UserDataItem @["norm_err"] { };
	UserDataItem @["ext_rew"] { };
	UserDataItem @["maxda"] { };
	UserDataItem @["minus_output_name"] { };
	UserDataItem @["minus_cycles"] { };
	UserDataItem @["ct_cycle"] { };
	UserDataItem @["phase_no"] { };
	UserDataItem @["phase"] { };
	UserDataItem @["sse"] { };
	UserDataItem @["output_name"] { };
	UserDataItem @["trial_name"] { };
	UserDataItem @["group_name"] { };
	UserDataItem @["time"] { };
	UserDataItem @["cycle"] { };
	UserDataItem @["tick"] { };
	UserDataItem @["trial"] { };
	UserDataItem @["group"] { };
	UserDataItem @["epoch"] { };
	UserDataItem @["batch"] { };
   };

      BaseSpec_Group @.specs = [7] {
	LeabraUnitSpec @["LeabraUnitSpec_0"] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraUnitSpec @["MotorUnits"] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.noise_sched = [0] {
	      };
	    };
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	LeabraLayerSpec @["HiddenLayer"] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @["Input_Output"] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	  };
	};
	FullPrjnSpec @["FullPrjnSpec_2"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	LeabraConSpec @["LeabraConSpec_4"] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @["LeabraBiasSpec_4"] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [2] {
		SchedItem @[0] { };
		SchedItem @[1] { };
	      };
	    };
	  };

	  Schedule @.lrate_sched = [2] {
	    SchedItem @[0] { };
	    SchedItem @[1] { };
	  };
	};
	ScalarValLayerSpec @["NormScalarVal"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	ScalarValLayerSpec @["ForceScalarVal"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	TwoDValLayerSpec @["VisTwoDVal"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	BaseSpec_Group @.gp["PFC_BG_Units"] = [2] { 
	  LeabraUnitSpec @["PVUnits"] { 
	    BaseSpec_Group @.children = [1] {
	      LeabraUnitSpec @["LVUnits"] { 
		BaseSpec_Group @.children = [0] {
		};

		Schedule @.noise_sched = [0] {
		};
	      };
	    };

	    Schedule @.noise_sched = [0] {
	    };
	  };
	  LeabraUnitSpec @["DaUnits"] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.noise_sched = [0] {
	    };
	  };
	};
	BaseSpec_Group @.gp["PFC_BG_Cons"] = [2] { 
	  LeabraConSpec @["LearnCons"] { 
	    BaseSpec_Group @.children = [2] {
	      PVConSpec @["PVi"] { 
		BaseSpec_Group @.children = [3] {
		  PVrConSpec @["PVr"] { 
		    BaseSpec_Group @.children = [0] {
		    };

		    Schedule @.lrate_sched = [0] {
		    };
		  };
		  PVConSpec @["LVe"] { 
		    BaseSpec_Group @.children = [1] {
		      PVConSpec @["LVi"] { 
			BaseSpec_Group @.children = [0] {
			};

			Schedule @.lrate_sched = [0] {
			};
		      };
		    };

		    Schedule @.lrate_sched = [0] {
		    };
		  };
		  PVConSpec @["NV"] { 
		    BaseSpec_Group @.children = [0] {
		    };

		    Schedule @.lrate_sched = [0] {
		    };
		  };
		};

		Schedule @.lrate_sched = [0] {
		};
	      };
	      LeabraBiasSpec @["BgBias"] { 
		BaseSpec_Group @.children = [1] {
		  LeabraBiasSpec @["FixedBias"] { 
		    BaseSpec_Group @.children = [0] {
		    };

		    Schedule @.lrate_sched = [0] {
		    };
		  };
		};

		Schedule @.lrate_sched = [0] {
		};
	      };
	    };

	    Schedule @.lrate_sched = [0] {
	    };
	  };
	  MarkerConSpec @["MarkerCons"] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.lrate_sched = [0] {
	    };
	  };
	};
	BaseSpec_Group @.gp["PFC_BG_Layers"] = [6] { 
	  ExtRewLayerSpec @["PVeLayer"] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  PVrLayerSpec @["PVrLayer"] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  PViLayerSpec @["PViLayer"] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  LVeLayerSpec @["LVeLayer"] { 
	    BaseSpec_Group @.children = [1] {
	      LViLayerSpec @["LViLayer"] { 
		BaseSpec_Group @.children = [0] {
		};
	      };
	    };
	  };
	  NVLayerSpec @["NVLayer"] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  PVLVDaLayerSpec @["DALayer"] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	};
	BaseSpec_Group @.gp["PFC_BG_Prjns"] = [2] { 
	  FullPrjnSpec @["FullPrjn"] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  OneToOnePrjnSpec @["OneToOne"] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	};
      };

      Layer_Group @.layers = [18] {
	LeabraLayer @["RewTarg"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @["PVe"] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @["Fm_RewTarg"] { };
	    LeabraPrjn @["Fm_MotorElbowForce"] { };
	    LeabraPrjn @["Fm_MotorShoulderForce"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Pred"] { };
	    LeabraPrjn @["Fm_SomaShoulderAngle_Pred"] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @["PVr"] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @["Fm_PVe"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
	    LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @["PVi"] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @["Fm_PVe"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
	    LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @["LVe"] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @["Fm_PVr"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
	    LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @["LVi"] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @["Fm_PVr"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
	    LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @["NV"] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
	    LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
	  };

	  Unit_Group @.units = [4] {
	  };
	};
	LeabraLayer @["DA"] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @["Fm_PVi"] { };
	    LeabraPrjn @["Fm_LVe"] { };
	    LeabraPrjn @["Fm_LVi"] { };
	    LeabraPrjn @["Fm_PVr"] { };
	    LeabraPrjn @["Fm_NV"] { };
	  };

	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @["MotorElbowForce"] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @["Fm_RLHidden"] { };
	    LeabraPrjn @["Fm_DA"] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["MotorShoulderForce"] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @["Fm_RLHidden"] { };
	    LeabraPrjn @["Fm_DA"] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["RLHidden"] { 
	  Projection_Group @.projections = [5] {
	    LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
	    LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
	    LeabraPrjn @["Fm_MotorShoulderForce"] { };
	    LeabraPrjn @["Fm_MotorElbowForce"] { };
	    LeabraPrjn @["Fm_DA"] { };
	  };

	  Unit_Group @.units = [49] {
	  };
	};
	LeabraLayer @["SomaElbowAngle_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["SomaElbowAngle_Pred"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [0] {
	  };
	};
	LeabraLayer @["SomaShoulderAngle_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @["SomaShoulderAngle_Pred"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [0] {
	  };
	};
	TwoDValLeabraLayer @["VisHand_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [110] {
	  };
	};
	TwoDValLeabraLayer @["VisHand_Pred"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [0] {
	  };
	};
	TwoDValLeabraLayer @["VisTarget_Cur"] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [110] {
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
  };
};
LeabraProject .projects["ve_arm"] {
 name="ve_arm";
 desc="arm-only version of emer the robot model";
 tags="robot, arm, motor learning, reinforcement learning, forward model";
 version {
  major=0;
  minor=1;
  step=1;
 };
 license {
  owner="Regents of the University of Colorado";
  license=NO_LIC;
  org="CCNLab at the University of Colorado Boulder";
  year="2012";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @["ChangeLog"] {
   name="ChangeLog";
   desc=;
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>

<li>Tue Apr  7 23:42:10 2009 0.1.1. oreilly <code>EmerRobot_Arm.proj</code><br>
  lambda arm muscle code in place, with minimal rl and forward model learning, and all programs cleaned up, docs added.


</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>

<li>Tue Apr  7 23:42:10 2009 0.1.1. oreilly <code>EmerRobot_Arm.proj</code><br>
  lambda arm muscle code in place, with minimal rl and forward model learning, and all programs cleaned up, docs added.


</ul>
</body>
</html>
";
  };
  taDoc @["ProjectDocs"] {
   name="ProjectDocs";
   desc=;
   auto_open=1;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
= Emer Robot (Arm) =

This project demonstrates how to use the virtual environment (VE) code to simulate a simple robot with a two-joint arm, which learns to reach to a target location (sort of).

The focus of this project so far is on building a clean infrastructure for the modeling work, including a robust VE model and numerous programs in RobotProgs for interfacing between the robot and the networks.  We are not so much interested in the details of individual reach movements, but rather on the learning and higher-level coordination of such movements.  Thus, each reach is considred to be a ballistic event that occurs within the \"Trial\" level of processing, although it is possible to have subsequent trials include corrective reaches or something like that. 

The models contain both joint-level and simluated visual information about the body and world, including current joint angles (somatosensory) and current hand location (visual), and they use scalar value layer specs to represent graded joint angle information.

There networks are:

* [[.T3Tab.FwdModelNet]] -- a forward model that currently is ''only'' a forward model (does not train an \"inverse\" model to control the robot to reach the target), which learns to predict the arm location based on random motor commands.

* [[.T3Tab.RLNet]] -- a reinforcement-learning model using the PVLV dopamine-based RL system to learn to reach the target, based on reward signals that are based on how close the hand got to the target.  Due to the strongly nonlinear properties of the Leabra unit functions, and kwta inhibitory competition, etc, the system does not do a very good job of learning based on graded distance information, and instead learns a set of \"good enough\" reaches that get close but not right on the target.  In general, we think this form of learning is much better for more discrete trial-and-error learning, e.g., for deciding which larger-scale motor plan to execute, rather than learning the fine details of motor control itself.

== Arm Model: Lambda Equilibrium Point (EP) Controller ==

The arm control signals are target final joint angles, which then determine the \"set points\" of muscles that are modeled based on the Gribble, Ostry, Sanguineti, and Labossiere, 1998 version of the Lambda model. There are flexor and extensor muscles for each joint, and each muscle has an equilibrium point (EP) at which no force is generated, based on the muscle spindle fiber reflex system. To move the arm from one joint angle to another, the system generates a smooth trajectory of EP values between the current and target joint angles, and this causes forces to be generated that move the arm.  In addition to joint angles, one can specify the degree of co-contraction (0-1), whereby the muscle set point is reduced by a fixed amount on both sides, causing a constant contraction force at the EP from both muscles, which serves to stabilize the arm.  See co_contract_pct in the EmerRobot program -- it defaults to .4, which produces very stable movements with little oscillation at the end of the reach.  Lower values are \"lower effort\" but result in more oscillations.

The detailed parameters for each muscle can be found under the [[.programs.EmerRobot.objs.VEEmerWorld]] object in the [[.programs.EmerRobot]] program -- just double-click on that World guy and everything will open up below it in the left hand browser, and you'll see the Shoulder and Elbow joints, and their associated flexor and extensor muscles.  All of the parameters are from Gribble et al, 1998 except the muscle recruitment gradient (m_rec_grad) parameter, which needed to be higher to produce faster reaches.  Note that this muscle model is quite realistic in many respects, including temporal delays in the reflex action, and time constants for the build-up of Calcium that actually activates the muscle contraction, etc.  

== Simple Demo of the Model ==

To see the model in action, go to the [[.PanelTab.ControlPanel]] and do Test Init, Test Run -- this will load weights into the RLNet and use that to control the arm to reach for the target -- it is not great as explained above, but much better than chance..

</body>
</html>
";
   html_text="<html><head></head>
<body>
<h1> Emer Robot (Arm) </h1>

This project demonstrates how to use the virtual environment (VE) code to simulate a simple robot with a two-joint arm, which learns to reach to a target location (sort of).

The focus of this project so far is on building a clean infrastructure for the modeling work, including a robust VE model and numerous programs in RobotProgs for interfacing between the robot and the networks.  We are not so much interested in the details of individual reach movements, but rather on the learning and higher-level coordination of such movements.  Thus, each reach is considred to be a ballistic event that occurs within the \"Trial\" level of processing, although it is possible to have subsequent trials include corrective reaches or something like that. 

The models contain both joint-level and simluated visual information about the body and world, including current joint angles (somatosensory) and current hand location (visual), and they use scalar value layer specs to represent graded joint angle information.

There networks are:

<ul><li> <a href=\"ta:.T3Tab.FwdModelNet\">FwdModelNet</a> -- a forward model that currently is  <i>only</i>  a forward model (does not train an \"inverse\" model to control the robot to reach the target), which learns to predict the arm location based on random motor commands.

</li></ul>
<ul><li> <a href=\"ta:.T3Tab.RLNet\">RLNet</a> -- a reinforcement-learning model using the PVLV dopamine-based RL system to learn to reach the target, based on reward signals that are based on how close the hand got to the target.  Due to the strongly nonlinear properties of the Leabra unit functions, and kwta inhibitory competition, etc, the system does not do a very good job of learning based on graded distance information, and instead learns a set of \"good enough\" reaches that get close but not right on the target.  In general, we think this form of learning is much better for more discrete trial-and-error learning, e.g., for deciding which larger-scale motor plan to execute, rather than learning the fine details of motor control itself.

</li></ul>
<h2> Arm Model: Lambda Equilibrium Point (EP) Controller </h2>

The arm control signals are target final joint angles, which then determine the \"set points\" of muscles that are modeled based on the Gribble, Ostry, Sanguineti, and Labossiere, 1998 version of the Lambda model. There are flexor and extensor muscles for each joint, and each muscle has an equilibrium point (EP) at which no force is generated, based on the muscle spindle fiber reflex system. To move the arm from one joint angle to another, the system generates a smooth trajectory of EP values between the current and target joint angles, and this causes forces to be generated that move the arm.  In addition to joint angles, one can specify the degree of co-contraction (0-1), whereby the muscle set point is reduced by a fixed amount on both sides, causing a constant contraction force at the EP from both muscles, which serves to stabilize the arm.  See co_contract_pct in the EmerRobot program -- it defaults to .4, which produces very stable movements with little oscillation at the end of the reach.  Lower values are \"lower effort\" but result in more oscillations.

The detailed parameters for each muscle can be found under the <a href=\"ta:.programs.EmerRobot.objs.VEEmerWorld\">VEEmerWorld</a> object in the <a href=\"ta:.programs.EmerRobot\">EmerRobot</a> program -- just double-click on that World guy and everything will open up below it in the left hand browser, and you'll see the Shoulder and Elbow joints, and their associated flexor and extensor muscles.  All of the parameters are from Gribble et al, 1998 except the muscle recruitment gradient (m_rec_grad) parameter, which needed to be higher to produce faster reaches.  Note that this muscle model is quite realistic in many respects, including temporal delays in the reflex action, and time constants for the build-up of Calcium that actually activates the muscle contraction, etc.  

<h2> Simple Demo of the Model </h2>

To see the model in action, go to the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> and do Test Init, Test Run -- this will load weights into the RLNet and use that to control the arm to reach for the target -- it is not great as explained above, but much better than chance..



</body></html>";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_1"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @["ControlPanel"] {
   name="ControlPanel";
   auto_edit=1;
   desc="main control panel for the system";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraTrain_network";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="LeabraTrain_input_data";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["input_data"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="LeabraCycle_update_net_view";
     desc=" boolean value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[3] {
     label="LeabraAll_Std_step_prog";
     desc=" this is just here for loading prior versions and is no longer used in any fashion";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]$$;
     mbr=Program_Group::step_prog;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[4] {
     label="LeabraEpochTest_network";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[5] {
     label="LeabraEpochTest_input_data";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[6] {
     label="LeabraAll_Test_step_prog";
     desc=" this is just here for loading prior versions and is no longer used in any fashion";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]$$;
     mbr=Program_Group::step_prog;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem_Group @.gp["RLNet_Params"] {
     name="RLNet_Params";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="LeabraUnitSpec_0_noise";
      desc=" distribution parameters for random added noise<br>  type:  type of random variable to generate<br>   * UNIFORM:  uniform with var = range on either side of the mean<br>   * BINOMIAL:  binomial with var = p, par = n<br>   * POISSON:  poisson with lambda = var<br>   * GAMMA:  gamma with var and par = stages<br>   * GAUSSIAN:  normal with var<br>   * NONE:  just the mean<br>  mean:  mean of random distribution<br>  var:  'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)<br>  par:  extra parameter for distribution (depends on each one)";
      cust_desc=0;
      base=.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$$;
      mbr=LeabraUnitSpec::noise;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[1] {
      label="LeabraUnitSpec_0_da_mod";
      desc=" da modulation of activations (for da-based learning, and other effects)<br>  on:  whether to actually modulate activations by da values<br>  mod: [Default: PLUS_CONT]  how to apply DA modulation<br>   * PLUS CONT:  da modulates plus-phase activations (only) in a continuous manner<br>   * PLUS POST:  da modulates plus-phase activations (only), at the end of the plus phase<br>  gain:  gain multiplier of da values";
      cust_desc=0;
      base=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$;
      mbr=LeabraUnitSpec::da_mod;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[2] {
      label="RLModelRew_rew_dist_hr_init";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr_init"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[3] {
      label="RLModelRew_rew_dist_hr_incr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr_incr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[4] {
      label="RLModelRew_avg_rew_dec_thr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["avg_rew_dec_thr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[5] {
      label="RLModelRew_avg_rew_inc_thr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["avg_rew_inc_thr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[6] {
      label="ForceScalarVal_inhib";
      desc=" how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer<br>  type:  how to compute inhibition (g_i)<br>   * KWTA INHIB:  between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .2 std for gelin, .25 otherwise)<br>   * KWTA AVG INHIB:  average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .5 std for gelin, .6 otherwise)<br>   * KWTA KV2K:  average of top k vs avg of next k (2k) -- avoids long 'tail' of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std for non-gelin -- doesn't seem to work as well for gelin and is thus somewhat deprecated<br>   * KWTA COMP COST:  competitor cost kwta function: inhibition is i_kwta_pt below the k'th unit's threshold inhibition value if there are no strong competitors (>comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility<br>   * AVG MAX PT INHIB:  put inhib value at i_kwta_pt between avg and max values for layer<br>   * MAX INHIB:  put inhib value at i_kwta_pt below max guy in layer<br>   * UNIT INHIB:  unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)<br>  kwta pt: [Default: 0.2;0.5;0.25;0.6]  [Defaults: for gelin: .2 for KWTA_INHIB, .5 for KWTA_AVG, for non-gelin: .25 for KWTA_INHIB, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)<br>  avg boost:  proportion of the netin.avg value for unit's inhibitory group (unit group or layer) that increments the net inputs for each unit in inhib group, in proportion to the unit activation (only favors the 'winners') -- this produces a more intuitive and plausible reflection of overall excitation levels on layer activity, counteracting the tendency of kwta to completely neutralize such effects <br>  low0:  CONDSHOW_ON_type:KWTA_INHIB||type:KWTA_AVG_INHIB use 0 for the low side of the kwta equation -- i.e., the kwta_pt sets the point between 0 and the either the top-k AVG or k'th unit inhib threshold -- ignore all the neurons below the top-k -- this may be more realistic and should give the most flexibility -- works a lot like the gp_g spreading inhib dynamic at the group level -- will generally need to set kwta_pt higher<br>  min i: [Default: 0]  minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation<br>  comp thr:  [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k'th inhibition and those above this threshold are counted as competitors <br>  comp gain:  Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level<br>  gp pt: [Default: 0.2]  for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB";
      cust_desc=0;
      base=.projects["ve_arm"].networks["RLNet"].specs["ForceScalarVal"]$$;
      mbr=LeabraLayerSpec::inhib;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Test_Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Test_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[6] {
     label="Test_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[7] {
     label="Test_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Stop;
    };
   };
  };
  SelectEdit @["VEInfo"] {
   name="VEInfo";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem_Group @.gp["VE_Arm"] {
     name="VE_Arm";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="VEArmWorld_stepsize";
      desc=" how big of a step to take";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$$;
      mbr=VEWorld::stepsize;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[1] {
      label="VEArmWorld_ode_params";
      desc=" parameters for tuning the ODE engine<br>  erp: [Default: 0.2]  (0-1, .1-.8 useful range) error reduction parameter: how much of the joint error is reduced at the next time step<br>  cfm: [Default: 1e-05]  (0-1, 1e-9 - 1 useful range) constraint force mixing parameter: how 'soft' is the constraint (0 = hard, 1 = soft)<br>  max cor vel: [Default: 1e+06]  maximum correcting velocity for contacts (how quickly they can pop things out of contact)<br>  contact depth: [Default: 0.001]  depth of the surface layer arond all geometry objects -- allows things to go this deep into a surface before actual contact is made -- increased value can help prevent jittering<br>  max col pts: [Default: 4]  maximum number of collision points to get (must be less than 64, which is a hard maximum)";
      cust_desc=0;
      base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
      mbr=VEWorld::ode_params;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[2] {
      label="VEArmWorld_updt_display";
      desc=" if true, will update any attached display after each time step";
      cust_desc=0;
      base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
      mbr=VEWorld::updt_display;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[3] {
      label="Arm_max_ve_steps";
      desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["max_ve_steps"]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[4] {
      label="Arm_hand_vel_thr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_vel_thr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[5] {
      label="Arm_co_contract_pct";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["co_contract_pct"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
    };
    EditMbrItem_Group @.gp["Shoulder"] {
     name="Shoulder";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp["Elbow"] {
     name="Elbow";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp["Joints"] {
     name="Joints";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp["Elbow"] {
      name="Elbow";
      el_typ=EditMbrItem;
      el_def=0;
     };
     EditMbrItem_Group @.gp["Shoulder"] {
      name="Shoulder";
      el_typ=EditMbrItem;
      el_def=0;
     };
    };
    EditMbrItem_Group @.gp["Limbs"] {
     name="Limbs";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp["Humerus"] {
      name="Humerus";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Humerus_cur_pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$$;
       mbr=VEBody::cur_pos;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
      EditMbrItem @[1] {
       label="Humerus_cur_lin_vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
       mbr=VEBody::cur_lin_vel;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
      EditMbrItem @[2] {
       label="Humerus_cur_ang_vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
       mbr=VEBody::cur_ang_vel;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
     };
     EditMbrItem_Group @.gp["Ulna"] {
      name="Ulna";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Ulna_cur_pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$$;
       mbr=VEBody::cur_pos;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
      EditMbrItem @[1] {
       label="Ulna_cur_lin_vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
       mbr=VEBody::cur_lin_vel;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
      EditMbrItem @[2] {
       label="Ulna_cur_ang_vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
       mbr=VEBody::cur_ang_vel;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
     };
     EditMbrItem_Group @.gp["Hand"] {
      name="Hand";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Hand_cur_pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$$;
       mbr=VEBody::cur_pos;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
      EditMbrItem @[1] {
       label="Hand_cur_lin_vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
       mbr=VEBody::cur_lin_vel;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
      EditMbrItem @[2] {
       label="Hand_cur_ang_vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
       mbr=VEBody::cur_ang_vel;
       is_numeric=0;
       param_search {
	search=0;
	min_val=0;
	max_val=1;
	next_val=0;
	incr=0.1000000014901161;
       };
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Arm_Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Arm_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Arm_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
     mth=Program::Step_Gui;
    };
   };
  };
  SelectEdit @["PVLV"] {
   name="PVLV";
   auto_edit=0;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="pvr_lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["PVr"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="pvi_lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="lve_lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["LVe"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[3] {
     label="lvi_lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["LVe"].children["LVi"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[4] {
     label="nv_lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["NV"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[5] {
     label="pve_rew";
     desc=" misc reward computation specifications<br>  err val: [Default: 0]  reward value for errors (when network does not respond correctly)<br>  norew val: [Default: 0.5]  reward value when no feedback information is present<br>  rew val: [Default: 1]  reward value for correct responses (positive rewards)";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PVeLayer"]$$;
     mbr=ExtRewLayerSpec::rew;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[6] {
     label="pvi_pv";
     desc=" misc parameters for the PV computation<br>  min pvi: [Default: 0.4]  minimum pvi value -- PVi is not allowed to go below this value for the purposes of computing the PV delta value: pvd = PVe - MAX(PVi,min_pvi)<br>  pvi scale min:  if both the PVe and PVi values are below min_pvi, then scale the result by (PVi/min_pvi) -- as PVi gets lower, meaning that it expects to be doing poorly, then punish the system less (but still punish it)<br>  no y dot: [Default: false]  if true do not use y-dot for phasic DA calculation (PVi)";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PViLayer"]$$;
     mbr=PViLayerSpec::pv;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[7] {
     label="lve_lv";
     desc=" misc parameters controlling the LV computation (note: only the LVe instance of these parameters are used)<br>  min lvi: [Default: 0.1;0.4]  minimum lvi value -- LVi is not allowed to go below this value for the purposes of computing the LV delta value: lvd = LVe - MAX(LVi,min_lvi)<br>  lvi scale min:  if both the LVe and LVi values are below min_lvi, then scale the result by (LVi/min_lvi) -- as LVi gets lower, meaning that it expects to be doing poorly, then punish the system less (but still punish it)<br>  lrn pv only: [Default: true]  only compute weight changes on trials where primary rewards are expected or actually received -- the target PV value is only presented on such trials, but if this flag is off, it actually learns on other trials, but with whatever plus phase activation state happens to arise<br>  nopv val:  value to apply for learning on non-pv trials -- simulates a baseline effort cost for non-reward trials. only works when lrn_pv_only is false. see nopv_lrate for lrate multiplier for these trials, to independently manipulate how rapidly learning takes place<br>  nopv lrate:  learning rate for learning on non-pv trials -- see nopv_val for value that is clamped. this can be used to simulate a baseline effort cost for non-reward trials. only works when lrn_pv_only is false.<br>  no y dot: [Default: false]  don't use y-dot temporal derivative at all in computing LVe phasic DA <br>  pos y dot only: [Default: false]  use only positive deviations for computing LVe phasic DA -- mutex with no_y_dot";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["LVeLayer"]$$;
     mbr=LVeLayerSpec::lv;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[8] {
     label="pvr_pv_detect";
     desc=" primary reward value detection spec: detect if a primary reward is expected based on PVr value<br>  thr: [Default: 0.7]  threshold on PVr value, above which PV is considered present (i.e., reward) -- PVr learns a 1 for all reward-valence cases, regardless of value, and .5 for reward absent";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PVrLayer"]$$;
     mbr=PVrLayerSpec::pv_detect;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[9] {
     label="nv_nv";
     desc=" novelty value specs<br>  da gain: [Default: 0:1]  gain for novelty value dopamine signal<br>  val thr: [Default: 0.1]  threshold for value (training value is 0) -- value is zero below this threshold";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["NVLayer"]$$;
     mbr=NVLayerSpec::nv;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[10] {
     label="vta_da";
     desc=" parameters for the pvlv da computation<br>  da gain: [Default: 0:2]  multiplier for dopamine values<br>  tonic da: [Default: 0]  set a tonic 'dopamine' (DA) level (offset to add to da values)<br>  pv gain: [Default: 1;0.1;0.5]  extra gain modulation of PV generated DA -- it can be much larger in general than lv so sometimes it is useful to turn it down (e.g., in new version of PBWM)<br>  add pv lv: [Default: false]  for cases where reward is expected/delivered, add PV and LV dopamine signals (otherwise, only use PV signal)";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["DALayer"]$$;
     mbr=PVLVDaLayerSpec::da;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @["ClusterRun"] {
   name="ClusterRun";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_submit {
    name="jobs_submit";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["model_svn"] {
      name="model_svn";
      desc="svn revision for the model";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the job submission commands";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output files generated by model -- files are named as  tag_<extra>.out -- this list automatically generated by parsing the result files checked into svn";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  -1 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["model_svn"] {
      name="model_svn";
      desc="svn revision for the model";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the job submission commands";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output files generated by model -- files are named as  tag_<extra>.out -- this list automatically generated by parsing the result files checked into svn";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  -1 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["model_svn"] {
      name="model_svn";
      desc="svn revision for the model";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the job submission commands";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output files generated by model -- files are named as  tag_<extra>.out -- this list automatically generated by parsing the result files checked into svn";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  -1 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   search_algos {
    name=;
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   cur_search_algo=NULL;
   notes=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @["FwdModelInputData"] {
    name="FwdModelInputData";
    desc="input data for training the forward model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [100] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
      };
     };
     float_Data @["VisTarget_Cur"] {
      name="VisTarget_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [2 1 100] 0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
      };
     };
     float_Data @["VisHand_Cur"] {
      name="VisHand_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [2 1 100] 0.51096886;1.0057883;0.98583239;0.3451024;0.44195947;0.65126932;0.38861054;0.48832265;0.66205519;0.53255314;
0.6596058;0.92258739;0.95375198;0.45181084;0.36383644;0.24425653;0.61100787;0.97552675;0.93118048;0.40312693;
0.11928414;0.34118894;0.9586153;0.4367142;0.75255936;0.63351345;0.24052298;0.43413293;0.39201331;0.67528093;
0.5410893;0.73877692;0.31896567;0.7229318;0.068093747;0.43243209;0.40452397;0.68079478;0.97379756;0.19044572;
0.85874432;0.49126884;0.48163995;0.95218903;0.88519216;-0.068391003;0.3751882;0.74437666;0.95216393;0.30389342;
0.6970439;0.81935495;0.33170971;0.26718122;0.98218679;0.28160131;0.54452336;0.85651392;0.81826943;0.46205655;
0.34804788;0.21560074;0.28006718;0.86589748;0.6611374;0.90024334;0.97526175;0.27605537;0.39124697;0.53117371;
0.47819534;0.54073048;0.59838259;0.48595592;0.35130996;0.36739612;0.5287981;0.76502192;0.30706015;0.44300655;
0.7092272;0.94864357;0.34805217;0.98352641;0.030797562;0.38978413;0.81786662;0.83963251;0.25918132;0.76147586;
0.71592993;0.66539508;0.39644489;0.63703686;0.9389835;0.62636024;0.39096233;0.48032311;0.32935658;0.97441483;
0.76055068;0.87796301;0.84824944;0.41036087;0.50842828;1.0139002;0.84102994;0.72123355;0.5778082;0.68729031;
0.29931307;0.18306667;0.26868653;0.46602589;0.49766716;0.96234369;0.63614589;0.64010441;0.64369768;0.65791285;
0.2391618;0.46822801;0.89684182;0.35061622;0.93383086;0.24119882;0.24600235;0.24585356;0.5058946;0.64491332;
0.88982457;0.39749727;0.21341392;0.14141205;0.55723369;0.80791354;0.85786039;-0.11404549;0.21654943;0.32500115;
0.25272369;0.66723716;0.34969652;0.22677732;0.8558079;0.43460101;0.38645953;0.99704599;0.95774937;0.56762618;
0.12542969;0.69740433;0.4112727;0.55433714;0.72453099;0.49169356;0.8735885;-0.09030807;0.89773095;0.38663048;
0.083248667;0.70317793;0.34648946;0.63766944;0.3536399;0.79801697;0.97525668;0.31574252;0.26485482;0.25541425;
0.53608727;1.0131906;0.90539497;0.65301037;0.14797363;0.66124892;0.48879674;0.55789983;0.2972132;0.69384331;
0.067379393;0.5239287;0.36603716;0.24352379;0.65098757;0.67542326;0.4055177;0.95881212;0.94788855;0.26166767;
0.5681352;0.9579919;0.92348158;0.64649618;0.82683045;0.82272071;0.24098451;0.87004811;0.93054515;0.1736328;
      };
     };
     float_Data @["SomaShoulderAngle_Cur"] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.57998103;0.22518763;0.38028118;0.47049239;0.058510389;0.41968873;0.14982431;0.82348925;0.4965421;0.088460602;
0.87170714;0.14852306;0.14852871;0.70538491;0.45231146;0.31832713;0.54974592;0.88984936;0.43775126;0.11211802;
0.077095099;0.5191406;0.036686327;0.4903608;0.071024418;0.31165045;0.79462916;0.13776471;0.39860865;0.02980607;
0.86130315;0.64547497;0.39408389;0.1111737;0.45000878;0.28046104;0.030960269;0.6472742;0.34580439;0.6262033;
0.51993692;0.71466446;0.96298558;0.38772517;0.62709665;0.17550565;0.43952128;0.29198238;0.47021601;0.74641091;
0.38882509;0.013759866;0.64819831;0.2553384;0.25188237;0.89702308;0.65656531;0.51962101;0.17491531;0.18716566;
0.68794841;0.021919759;0.021969657;0.84924096;0.29387057;0.041062959;0.95246172;0.35475335;0.0082387114;0.80125797;
0.62289637;0.84672827;0.035637967;0.68312114;0.27241889;0.78934944;0.41126227;0.01622382;0.016224485;0.04242802;
0.93279421;0.50713933;0.53233218;0.12239111;0.83190405;0.61745018;0.24927789;0.7509743;0.26901615;0.57132906;
0.87046993;0.82484913;0.19932453;0.58660209;0.049780622;0.48004273;0.27400658;0.36886147;0.70018834;0.0023305418;
      };
     };
     float_Data @["SomaElbowAngle_Cur"] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.19668387;0.02117639;0.82606035;0.94943124;0.85155845;0.35256702;0.31129858;0.95226562;0.25333425;0.40910709;
0.56112671;0.29789189;0.65184355;0.77293807;0.77293777;0.72485203;0.65744293;0.41880628;0.77448899;0.13568404;
0.5591225;0.3821584;0.030640706;0.68023801;0.34301764;0.50444424;0.9175784;0.16560508;0.55878872;0.65083313;
0.91615731;0.40155777;0.40192395;0.22222605;0.91675037;0.95783311;0.95783252;0.95783126;0.69382095;0.87146533;
0.06200251;0.1006135;0.29789931;0.19242719;0.53846252;0.67196208;0.81761771;0.14965834;0.95798683;0.052095149;
0.2761603;0.60793012;0.038589478;0.39336422;0.77301818;0.83252227;0.80506855;0.35738292;0.78342998;0.75829691;
0.75829542;0.5083366;0.389137;0.78110611;0.84348899;0.52016443;0.67931211;0.62773645;0.039899629;0.74687517;
0.637299;0.9245373;0.58648014;0.1218732;0.13280872;0.35560825;0.91185743;0.79286349;0.052526277;0.50296277;
0.043978229;0.77604836;0.59352189;0.23540485;0.81388474;0.074177809;0.29583311;0.45923567;0.94064236;0.66646582;
0.36800423;0.95477158;0.73311329;0.33258;0.34826711;0.34826729;0.21957879;0.21667665;0.31901348;0.36364707;
      };
     };
     float_Data @["MotorShoulderForce"] {
      name="MotorShoulderForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.24357438;0.35429925;0.47382393;0.055935245;0.42502031;0.17021513;0.83672357;0.48577076;0.09080483;0.89008445;
0.17965175;0.16782473;0.70577246;0.46330741;0.32852945;0.51846647;0.88337022;0.43204433;0.11665879;0.056507301;
0.51559621;0.019900462;0.51081628;0.07677675;0.30179051;0.79092532;0.15122773;0.39710256;0.019407135;0.8729803;
0.65361613;0.41346136;0.12016647;0.43633068;0.2882933;0.011766178;0.6568988;0.34425628;0.6460731;0.51356232;
0.68320054;0.94369459;0.40789983;0.62600064;0.17727923;0.40565076;0.29901046;0.44552279;0.75045019;0.41935867;
0.0083638988;0.63332725;0.26158589;0.22853248;0.90312248;0.66341096;0.52372926;0.19329761;0.22073123;0.68058914;
0.045036659;0.035535209;0.84672761;0.2839438;0.056387201;0.94379252;0.36901349;0.032305136;0.81490099;0.65307456;
0.8180753;0.044336386;0.64861327;0.27043495;0.79647917;0.39451793;0.012139625;0.021184931;0.066545464;0.93148702;
0.50233346;0.55708158;0.14569671;0.84671801;0.63822722;0.27489194;0.75094491;0.26900652;0.58232939;0.84869421;
0.80573171;0.19670925;0.59522933;0.064474724;0.49141636;0.29005995;0.36832175;0.67797649;0.039749444;0.56626338;
      };
     };
     float_Data @["MotorElbowForce"] {
      name="MotorElbowForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.029047899;0.84847653;0.96682566;0.84430641;0.34201056;0.31409979;0.97372288;0.23113051;0.43368649;0.58344293;
0.29420042;0.6729731;0.80640244;0.76142597;0.70602936;0.65222567;0.38303342;0.79286551;0.11090475;0.57986915;
0.36261871;0.018711248;0.70158541;0.32821575;0.50022084;0.94872755;0.14414093;0.536717;0.65726662;0.93182808;
0.37786913;0.41052893;0.24415851;0.94116014;0.99381036;0.93887287;0.9390353;0.67667967;0.8996973;0.039504025;
0.10362258;0.26918381;0.18173558;0.51937199;0.69853139;0.85146743;0.1264759;0.9806394;0.029567888;0.31525078;
0.64761537;0.0073662223;0.4268018;0.79467279;0.87073499;0.78312659;0.33241615;0.79563743;0.72460854;0.74313259;
0.50166869;0.37619519;0.80859137;0.86631054;0.49487001;0.70486844;0.61449647;0.020879801;0.76290947;0.62820095;
0.94206434;0.56813341;0.10066778;0.1374016;0.36819014;0.93367016;0.78872091;0.030822;0.52546477;0.023157002;
0.79597127;0.5695563;0.22560678;0.84576905;0.051884502;0.33510715;0.47740871;0.96671987;0.64252442;0.33831713;
0.97712648;0.71555424;0.29666898;0.35793853;0.35852194;0.22860298;0.20211278;0.31843811;0.37341881;0.17890175;
      };
     };
     float_Data @["VisHand_Pred"] {
      name="VisHand_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [2 1 100] 0.98583239;0.3451024;0.44195947;0.65126932;0.38861054;0.48832265;0.66205519;0.53255314;0.6596058;0.92258739;
0.95375198;0.45181084;0.36383644;0.24425653;0.61100787;0.97552675;0.93118048;0.40312693;0.11928414;0.34118894;
0.9586153;0.4367142;0.75255936;0.63351345;0.24052298;0.43413293;0.39201331;0.67528093;0.5410893;0.73877692;
0.31896567;0.7229318;0.068093747;0.43243209;0.40452397;0.68079478;0.97379756;0.19044572;0.85874432;0.49126884;
0.48163995;0.95218903;0.88519216;-0.068391003;0.3751882;0.74437666;0.95216393;0.30389342;0.6970439;0.81935495;
0.33170971;0.26718122;0.98218679;0.28160131;0.54452336;0.85651392;0.81826943;0.46205655;0.34804788;0.21560074;
0.28006718;0.86589748;0.6611374;0.90024334;0.97526175;0.27605537;0.39124697;0.53117371;0.47819534;0.54073048;
0.59838259;0.48595592;0.35130996;0.36739612;0.5287981;0.76502192;0.30706015;0.44300655;0.7092272;0.94864357;
0.34805217;0.98352641;0.030797562;0.38978413;0.81786662;0.83963251;0.25918132;0.76147586;0.71592993;0.66539508;
0.39644489;0.63703686;0.9389835;0.62636024;0.39096233;0.48032311;0.32935658;0.97441483;0.76055068;0.87796301;
0.84824944;0.41036087;0.50842828;1.0139002;0.84102994;0.72123355;0.5778082;0.68729031;0.29931307;0.18306667;
0.26868653;0.46602589;0.49766716;0.96234369;0.63614589;0.64010441;0.64369768;0.65791285;0.2391618;0.46822801;
0.89684182;0.35061622;0.93383086;0.24119882;0.24600235;0.24585356;0.5058946;0.64491332;0.88982457;0.39749727;
0.21341392;0.14141205;0.55723369;0.80791354;0.85786039;-0.11404549;0.21654943;0.32500115;0.25272369;0.66723716;
0.34969652;0.22677732;0.8558079;0.43460101;0.38645953;0.99704599;0.95774937;0.56762618;0.12542969;0.69740433;
0.4112727;0.55433714;0.72453099;0.49169356;0.8735885;-0.09030807;0.89773095;0.38663048;0.083248667;0.70317793;
0.34648946;0.63766944;0.3536399;0.79801697;0.97525668;0.31574252;0.26485482;0.25541425;0.53608727;1.0131906;
0.90539497;0.65301037;0.14797363;0.66124892;0.48879674;0.55789983;0.2972132;0.69384331;0.067379393;0.5239287;
0.36603716;0.24352379;0.65098757;0.67542326;0.4055177;0.95881212;0.94788855;0.26166767;0.5681352;0.9579919;
0.92348158;0.64649618;0.82683045;0.82272071;0.24098451;0.87004811;0.93054515;0.1736328;0.51096886;1.0057883;
      };
     };
     float_Data @["SomaShoulderAngle_Pred"] {
      name="SomaShoulderAngle_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.22518763;0.38028118;0.47049239;0.058510389;0.41968873;0.14982431;0.82348925;0.4965421;0.088460602;0.87170714;
0.14852306;0.14852871;0.70538491;0.45231146;0.31832713;0.54974592;0.88984936;0.43775126;0.11211802;0.077095099;
0.5191406;0.036686327;0.4903608;0.071024418;0.31165045;0.79462916;0.13776471;0.39860865;0.02980607;0.86130315;
0.64547497;0.39408389;0.1111737;0.45000878;0.28046104;0.030960269;0.6472742;0.34580439;0.6262033;0.51993692;
0.71466446;0.96298558;0.38772517;0.62709665;0.17550565;0.43952128;0.29198238;0.47021601;0.74641091;0.38882509;
0.013759866;0.64819831;0.2553384;0.25188237;0.89702308;0.65656531;0.51962101;0.17491531;0.18716566;0.68794841;
0.021919759;0.021969657;0.84924096;0.29387057;0.041062959;0.95246172;0.35475335;0.0082387114;0.80125797;0.62289637;
0.84672827;0.035637967;0.68312114;0.27241889;0.78934944;0.41126227;0.01622382;0.016224485;0.04242802;0.93279421;
0.50713933;0.53233218;0.12239111;0.83190405;0.61745018;0.24927789;0.7509743;0.26901615;0.57132906;0.87046993;
0.82484913;0.19932453;0.58660209;0.049780622;0.48004273;0.27400658;0.36886147;0.70018834;0.0023305418;0.57998103;
      };
     };
     float_Data @["SomaElbowAngle_Pred"] {
      name="SomaElbowAngle_Pred";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.02117639;0.82606035;0.94943124;0.85155845;0.35256702;0.31129858;0.95226562;0.25333425;0.40910709;0.56112671;
0.29789189;0.65184355;0.77293807;0.77293777;0.72485203;0.65744293;0.41880628;0.77448899;0.13568404;0.5591225;
0.3821584;0.030640706;0.68023801;0.34301764;0.50444424;0.9175784;0.16560508;0.55878872;0.65083313;0.91615731;
0.40155777;0.40192395;0.22222605;0.91675037;0.95783311;0.95783252;0.95783126;0.69382095;0.87146533;0.06200251;
0.1006135;0.29789931;0.19242719;0.53846252;0.67196208;0.81761771;0.14965834;0.95798683;0.052095149;0.2761603;
0.60793012;0.038589478;0.39336422;0.77301818;0.83252227;0.80506855;0.35738292;0.78342998;0.75829691;0.75829542;
0.5083366;0.389137;0.78110611;0.84348899;0.52016443;0.67931211;0.62773645;0.039899629;0.74687517;0.637299;
0.9245373;0.58648014;0.1218732;0.13280872;0.35560825;0.91185743;0.79286349;0.052526277;0.50296277;0.043978229;
0.77604836;0.59352189;0.23540485;0.81388474;0.074177809;0.29583311;0.45923567;0.94064236;0.66646582;0.36800423;
0.95477158;0.73311329;0.33258;0.34826711;0.34826729;0.21957879;0.21667665;0.31901348;0.36364707;0.19668387;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @["RLModelInputData"] {
    name="RLModelInputData";
    desc="input data for training the RL model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [100] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
      };
     };
     float_Data @["VisTarget_Cur"] {
      name="VisTarget_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [2 1 100] 0.78291655;0.52314895;0.26698485;0.58771402;0.53311116;0.7048409;0.67144209;0.90172303;0.25343728;0.77759403;
0.41200456;0.47875258;0.36268064;0.37600109;0.046678059;0.57764792;0.84458596;0.59558135;0.56024134;0.47992578;
0.70047957;0.90869403;0.51541263;0.7818163;0.76908064;0.62168163;0.71556455;0.36583501;0.3187111;0.73407286;
0.32429066;0.58565253;0.65037489;0.82524621;0.73683333;0.55629456;0.66972148;0.6785031;0.53589416;0.80360711;
0.6597684;0.43058196;0.94460547;0.43173656;0.96418399;0.41039598;0.9881621;0.33556414;0.29329875;0.74876493;
0.12845618;0.55061245;0.64474368;0.79807919;0.1070187;0.53205544;0.68105024;0.61593002;0.2377062;0.42132309;
0.62555391;0.53855276;0.45721605;0.59473974;0.41140085;0.76571375;0.77928931;0.84629291;0.29540259;0.62458658;
0.56650263;0.86247796;0.43918985;0.632312;0.95424634;0.56625414;0.70374715;0.46909302;0.71898526;0.33605999;
0.50952196;0.66155541;0.83110434;0.54316455;0.70033014;0.39511669;0.75455064;0.68538183;0.10475238;0.40890858;
0.23633604;0.5781641;0.89710057;0.63809443;0.58183342;0.65386742;0.29134536;0.84421766;0.7757507;0.41800207;
0.72597569;0.51551104;0.49603808;0.60303223;0.44012842;0.64557636;0.64176363;0.75123858;0.33630782;0.67286938;
0.26168939;0.76051521;0.26834983;0.53521639;0.4509514;0.82518971;0.51798874;0.71244943;0.13794455;0.78104508;
0.36176074;0.77521461;0.62730914;0.47361675;0.41154182;0.53458995;0.5343526;0.80036944;0.72799939;0.37084442;
0.54615879;0.61848348;0.50812936;0.91432166;0.50103134;0.57871515;0.25881758;0.85103428;0.50557232;0.75227737;
0.35272118;0.58939809;0.68415117;0.81598544;0.34403995;0.80049032;0.67628211;0.57133269;0.76528543;0.45565635;
0.023283897;0.44482815;0.47406551;0.69202936;0.75478232;0.54499823;0.28192714;0.49281859;0.79241443;0.34957752;
0.75311887;0.42381117;0.74159288;0.78514522;0.75551003;0.61850232;0.14521138;0.45838109;0.66132534;0.33116412;
0.69900244;0.54662991;0.27125716;0.60507035;0.28227058;0.57973915;0.33467433;0.49805981;0.98113823;0.33744302;
0.01871876;0.47371909;0.24950455;0.37637889;0.84852779;0.38323534;0.32763293;0.41747409;0.68261933;0.56003714;
0.47959718;0.54546815;0.76102972;0.57015514;0.37011504;0.54655617;0.1309645;0.61220646;0.93352169;0.34421337;
      };
     };
     float_Data @["VisHand_Cur"] {
      name="VisHand_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [2 1 100] 0.98657721;0.34101382;0.24267985;0.23175931;0.54014075;0.96761894;0.63031167;0.97734821;0.63031143;0.97734225;
0.63031155;0.97734225;0.63031167;0.97734219;0.63031179;0.97734219;0.63031191;0.97734219;0.63031209;0.97734219;
0.6303122;0.97734219;0.63031232;0.97734213;0.63031244;0.97734213;0.63031256;0.97734213;0.63031274;0.97734213;
0.63031286;0.97734213;0.63031298;0.97734213;1.3260803;0.97141218;1.3260798;0.97140533;1.3260797;0.97140533;
1.3260796;0.97140533;1.3260796;0.97140533;1.4104414;0.91860312;1.604166;0.070759118;1.5691482;-0.047292881;
1.5690882;-0.045901235;1.5690882;-0.04589434;1.5230513;0.80604482;1.4119124;0.46986288;0.66238749;0.96290982;
0.66238767;0.96290952;0.66238773;0.9629094;0.9300257;0.63723934;0.21255161;0.89041692;0.33026639;0.71987569;
0.86188608;0.76841116;0.21570165;0.89347774;0.21570532;0.89347351;0.21570534;0.89347351;0.21570534;0.89347351;
0.21570534;0.89347351;0.20461786;0.51897937;0.39545396;0.75716609;0.39545488;0.75715917;0.56432706;0.89991641;
0.56538546;0.89966571;0.89915299;0.45492464;0.16618028;0.67260176;0.695481;0.84405929;0.19837399;0.87407637;
0.51039737;0.62571281;0.56348062;0.87415874;0.48777536;0.62009603;0.19425389;0.57127726;0.19425839;0.5712747;
0.75222284;0.46805927;0.55810601;0.87128955;0.17284992;0.57613462;0.75363642;0.46660522;0.5579226;0.87148541;
0.60322052;0.78270328;0.94378304;0.36028165;0.63641483;0.93464631;0.25151253;0.5565021;0.62812066;0.65950811;
0.90938592;0.52116972;0.91056001;0.51599491;0.91056025;0.51599455;0.98091704;0.23528983;0.29661921;0.18679646;
0.57999998;0.63016164;0.87575334;0.63836896;0.56111175;0.60897356;0.73211581;0.6990667;0.93045133;0.41811374;
0.66792971;0.56224138;0.89214337;0.34880996;0.68589699;0.95985788;0.41524339;0.68128204;0.93945098;0.40108487;
0.96567965;0.1452907;0.42375314;0.68470538;0.56255472;0.60053962;0.80721855;0.67343724;0.76837373;0.90110141;
0.66154891;0.77388805;0.94075245;0.36024147;0.94075084;0.36024073;0.96726972;0.20346706;0.24443744;0.20170416;
0.43603966;0.89380872;0.95730168;0.1389448;0.5286544;0.69528466;0.89503926;0.44157496;0.25018981;0.15957654;
0.27864453;0.39528492;0.57581991;0.79719537;0.93821532;0.43427095;0.97381735;0.18703447;0.35961789;0.86695707;
      };
     };
     float_Data @["SomaShoulderAngle_Cur"] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.2178771;0.86339498;0.50313067;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;
0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.50031495;0.50031495;0.50031495;
0.50031495;0.50031495;0.44690174;0.014084279;0.010899642;0.010851775;0.010851709;0.40067303;-1.9979211e-07;0.48337513;
0.48337486;0.48337471;0.27779275;0.7973038;0.53598613;0.33269271;0.79523474;0.79523474;0.79523474;0.79523474;
0.79523474;0.70429444;0.47221008;0.47221047;0.42302606;0.42230001;0.085279718;0.72793853;0.33489534;0.79656416;
0.27645215;0.40168732;0.30375734;0.7017262;0.7017262;0.0024660507;0.40225381;0.72557658;0.001709055;0.40251258;
0.30902854;0.082668044;0.43580315;0.63901359;0.19613199;0.14055082;0.138007;0.13800694;0.13800712;0.89327067;
0.20405683;0.20405644;0.2040565;0.2040565;0.096151307;0.088061601;0.016175503;0.49733087;0.42437732;0.097977422;
0.098172791;0.41477251;0.19529559;0.19529584;0.45391378;0.27851442;0.078389898;0.07839004;0.0807584;0.88984269;
0.50478166;0.060653675;0.30057278;0.072890639;0.92654419;0.69426423;0.33532664;0.11566903;0.11569729;0.55867505;
      };
     };
     float_Data @["SomaElbowAngle_Cur"] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0.034482758;0.77094489;0.33516788;0.21275541;0.21275525;0.21275508;0.21275492;0.21275476;0.21275459;0.21275443;
0.21275426;0.21275394;0.21275377;0.21275361;0.21275344;0.21275328;0.21275312;0.18524799;0.18524799;0.18524815;
0.18524832;0.18524832;0.18524881;0.23706228;0.11997325;0.11997325;0.11997341;0.10538417;0.77862102;0.21295042;
0.21295026;0.21295026;0.19830626;0.10996132;0.67221582;0.22962755;0.10965827;0.10965827;0.10965827;0.10965827;
0.10965827;0.67719579;0.67720664;0.67720717;0.47746599;0.47746614;0.48161677;0.48593345;0.46638164;0.13668689;
0.86500472;0.52343601;0.87176341;0.62690628;0.62690628;0.76139879;0.53031695;0.58500129;0.75975323;0.53005439;
0.64050597;0.37522057;0.35054311;0.72832012;0.77016848;0.42060429;0.42060363;0.42060316;0.11947043;0.83094394;
0.83562344;0.4100157;0.86853421;0.61581159;0.40743634;0.8217476;0.51965737;0.14892597;0.77983314;0.38329509;
0.12295743;0.78006136;0.8768307;0.52384627;0.12595904;0.6068505;0.38538116;0.38538164;0.22070791;0.76133615;
0.49150324;0.20251031;0.78125149;0.49651924;0.74807447;0.84338862;0.63532555;0.37724581;0.12393001;0.49229512;
      };
     };
     float_Data @["MotorElbowForce"] {
      name="MotorElbowForce";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] -0.73469126;-0.60151935;0.20184834;-0.48843822;0.48594826;0.13401362;-0.38050148;0.48811355;0.28011894;-0.41765282;
0.89781833;0.089683339;-0.86163032;0.33843315;0.11588536;0.84703922;-0.4322457;0.35043433;0.64192826;-0.22558181;
-0.66848999;0.82946682;-0.022540553;0.50963497;0.600959;-0.90989804;-0.043371368;-0.79434448;-0.98404121;0.62802809;
0.81581569;-0.49091306;0.97907567;-0.072904132;-0.82864767;-0.55000192;0.46971512;-0.59208679;-0.54537368;0.096817248;
-0.45785889;-0.90135747;0.87465531;0.85663986;0.89224154;-0.12027332;-0.47391951;-0.68255836;0.95434546;0.49101153;
-0.50469005;-0.83671427;0.76754683;-0.57895017;0.11945336;0.39258355;-0.59352791;-0.24481332;0.018050764;-0.99382603;
-0.35690859;0.26967862;-0.22808613;-0.77872318;0.83556592;0.092091642;0.61840111;-0.50033665;0.013712303;-0.49442145;
-0.28825286;-0.39384967;-0.33434546;-0.86959803;0.056412239;-0.85636848;0.9980666;-0.44892493;-0.020048987;0.53062081;
-0.70407444;-0.15912402;0.9393791;0.72548652;0.94637257;0.74011981;-0.71793795;-0.87050468;-0.88583416;0.68270022;
-0.79229909;-0.56759483;-0.99372041;-0.19247654;-0.62906557;0.71824396;0.027107283;-0.36480534;0.9920463;-0.75794393;
      };
     };
     float_Data @["PVe"] {
      name="PVe";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 100] 0;0;1;1;0;0;0;0;0;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;1;0;0;1;1;0;0;0;
1;0;0;1;0;0;0;1;1;1;
1;1;1;0;0;1;1;0;1;0;
0;0;1;1;1;1;0;0;0;1;
0;1;0;1;1;0;1;1;0;1;
0;1;1;0;0;1;0;0;1;0;
0;0;1;1;0;1;1;0;1;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @["TrialOutputData"] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_38";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_39";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_40";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;      };
     };
     String_Data @["trial_name"] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;      };
     };
     String_Data @["group_name"] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;      };
     };
     int_Data @["phase_no"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_41";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;      };
     };
     float_Data @["minus_cycles"] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;      };
     };
     float_Data @["sse"] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 0;0;0;0;0;0;0;0;0;0;
0.4869324;0;0;0;0;0.41865978;0;0;0;0;
0;0.38918242;0;0;0;0;0;0;      };
     };
     float_Data @["ext_rew"] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 0;0;1;1;0;0;0;0;0;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
     float_Data @["pvlv_pvi"] {
      name="pvlv_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 0.5;0.49874574;0.44290403;0.50734288;0.58113897;0.48271841;0.39906788;0.33435813;0.2831001;0.24292317;
0.21117331;0.34035686;0.48292926;0.59623319;0.45695424;0.58624536;0.44059584;0.33692899;0.27198681;0.2252167;
0.19055732;0.16405855;0.14389522;0.2672472;0.23633109;0.20749992;0.18389712;0.090908743;      };
     };
     double_Data @["trg_dist"] {
      name="trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [28] 0.6138107180595398;0.4679122865200043;0.2893236577510834;0.08608134835958481;0.4265367090702057;0.544288158416748;0.6582078337669373;0.7073782682418823;0.4377837479114532;0.5023276209831238;
0.09816315025091171;0.2267869412899017;0.381773442029953;0.6174210906028748;0.3953170776367188;0.4970617592334747;0.6913337111473083;0.7207831740379333;0.7187474370002747;0.8078052401542664;
0.8581727743148804;0.6738265156745911;0.7245206832885742;0.6966218948364258;1.50304126739502;1.55924379825592;0.8783437609672546;1.306375026702881;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @["EpochOutputData"] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_40";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_41";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_sse"] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["cnt_err"] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_trg_dist"] {
      name="avg_trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_ext_rew"] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     double_Data @["rew_dist_thr"] {
      name="rew_dist_thr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_cycles"] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["epoch_time_tot"] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["epoch_time_usr"] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_pvi"] {
      name="avg_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @["TestTrialOutputData"] {
    name="TestTrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["trial_name"] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @["group_name"] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["phase_no"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["minus_cycles"] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["sse"] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["ext_rew"] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["pvlv_pvi"] {
      name="pvlv_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     double_Data @["trg_dist"] {
      name="trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @["TestEpochOutputData"] {
    name="TestEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_sse"] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["cnt_err"] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_trg_dist"] {
      name="avg_trg_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_ext_rew"] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     double_Data @["rew_dist_thr"] {
      name="rew_dist_thr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_cycles"] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["epoch_time_tot"] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["epoch_time_usr"] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @["avg_pvi"] {
      name="avg_pvi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @["data_base"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_base";
  };
  taDataAnal @["data_anal"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_anal";
  };
  taDataGen @["data_gen"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_gen";
  };
  taImageProc @["image_proc"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program @["LeabraStartup"] {
   name="LeabraStartup";
   short_nm="Start";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
   flags=NO_STOP_STEP|STARTUP_RUN;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["network"] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["ve_arm"].networks["RLNet"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @["input_data"] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["batch"] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @["tag"] {
     name="tag";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["log_dir"] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @["log_file_nm"] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @["EpochOutputData"] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["TrialOutputData"] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["ForceScalarVal"] {
     name="ForceScalarVal";
     var_type=T_Object;
     object_type=ScalarValLayerSpec;
     object_val=$.projects["ve_arm"].networks["RLNet"].specs["ForceScalarVal"]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=0;
     orig_prog_code=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=0;
     orig_prog_code=;
    };
    MiscCall @[2] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    RegisterArgs @[4] {
     desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
     flags=0;
     orig_prog_code=;
    };
    Comment @[5] {
     desc="Initialize and set variables from args";
     flags=0;
     orig_prog_code=;
    };
    PrintExpr @[6] {
     desc=;
     flags=0;
     orig_prog_code=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     my_mask=NULL;
     debug_level=NULL;
    };
    MethodCall @[7] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["batch"]$$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MiscCall @[8] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["ve_arm"].programs["LeabraStartup"].vars["tag"]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[9] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["ve_arm"].programs["LeabraStartup"].vars["log_dir"]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    ProgVarFmArg @[10] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[11] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="max_batch";
     arg_name="batches";
    };
    Comment @[12] {
     desc="Custom Params";
     flags=0;
     orig_prog_code=;
    };
    ProgVarFmArg @[13] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$$;
     var_name="rew_dist_thr_init";
     arg_name="rew_dist_thr_init";
    };
    ProgVarFmArg @[14] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
     var_name="rew_dist_thr_incr";
     arg_name="rew_dist_thr_incr";
    };
    ProgVarFmArg @[15] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
     var_name="avg_rew_dec_thr";
     arg_name="avg_rew_dec_thr";
    };
    ProgVarFmArg @[16] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
     var_name="avg_rew_inc_thr";
     arg_name="avg_rew_inc_thr";
    };
    MemberFmArg @[17] {
     desc=;
     flags=0;
     orig_prog_code=;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["LeabraUnitSpec_0"]$$;
     path="noise.var";
     arg_name="noise_var";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[18] {
     desc=;
     flags=0;
     orig_prog_code=;
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["LeabraUnitSpec_0"]$;
     path="da_mod.gain";
     arg_name="da_mod_gain";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[19] {
     desc=;
     flags=0;
     orig_prog_code=;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["ForceScalarVal"]$$;
     path="inhib.kwta_pt";
     arg_name="kwta_pt";
     update_after=1;
     quiet=0;
    };
    Comment @[20] {
     desc="Set log files";
     flags=0;
     orig_prog_code=;
    };
    MethodCall @[21] {
     desc="save args to file: last arg is to include dmem proc number";
     flags=0;
     orig_prog_code=;
     result_var=.projects["ve_arm"].programs["LeabraStartup"].vars["log_file_nm"]$$;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["EpochOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".args\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MiscCall @[22] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::FullArgStringToFile;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
     };
    };
    MethodCall @[23] {
     desc="last arg is to include dmem proc number";
     flags=0;
     orig_prog_code=;
     result_var=$.projects["ve_arm"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[24] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[25] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     orig_prog_code=;
     result_var=$.projects["ve_arm"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["TrialOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[26] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["TrialOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="false";
       };
      };
     };
    };
    OtherProgramVar @[27] {
     desc=;
     flags=0;
     orig_prog_code=;
     other_prog=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"]$$;
     set_other=1;
     var_1=$.projects["ve_arm"].programs["LeabraStartup"].vars["tag"]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     desc=;
     flags=0;
     orig_prog_code=;
     expr {
      expr="\"Running: \" << batch.name";
     };
     my_mask=NULL;
     debug_level=NULL;
    };
    ProgramCall @[29] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
     target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program_Group @.gp["RobotProgs"] {
   name="RobotProgs";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   Program @["EmerRobot"] {
    name="EmerRobot";
    short_nm="Robot";
    tags=;
    desc="main code for controlling Emer the robot, including the virtual environment objects for emer etc.";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=VEWorld;
     el_def=0;
     VEWorld @["VEEmerWorld"] {
      name="VEEmerWorld";
      desc=;
      space_type=HASH_SPACE;
      hash_levels {min=-3: max=10: };
      step_type=STD_STEP;
      stepsize=0.02;
      quick_iters=20;
      gravity {x=0: y=0: z=0: };
      updt_display=1;
      ode_params {
       erp=0.2;
       cfm=1e-5;
       max_cor_vel=1000000;
       contact_depth=0.001;
       max_col_pts=4;
      };
      objects {
       name=;
       el_typ=VEObject;
       el_def=0;
       VEObject @["Emer"] {
	name="Emer";
	desc="emer the robot";
	bodies {
	 name=;
	 el_typ=VEBody;
	 el_def=0;
	 VEBody @["Torso"] {
	  name="Torso";
	  desc=;
	  flags=FIXED;
	  init_rel=0;
	  rel_body=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0: y=0.1: z=0: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0: y=0.1: z=0: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_euler {x=0: y=-0: z=0: };
	  cur_quat {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=BOX;
	  mass=1;
	  radius=0.5;
	  length=1;
	  long_axis=LONG_X;
	  box {x=0.45: y=0.1: z=0.02: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0: g=1: b=0: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Humerus"] {
	  name="Humerus";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$$;
	  rel_pos {x=0.42: y=0.1: z=0.03: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.42: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.42: y=0.2: z=0.03: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CAPSULE;
	  mass=2.1;
	  radius=0.03;
	  length=0.34;
	  long_axis=LONG_X;
	  box {x=0.34: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.2: g=0.2: b=0.4901961: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Ulna"] {
	  name="Ulna";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.77: y=0.1: z=0.03: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.77: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.77: y=0.2: z=0.03: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CAPSULE;
	  mass=1.65;
	  radius=0.02;
	  length=0.34;
	  long_axis=LONG_X;
	  box {x=0.34: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0: g=0: b=1: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Hand"] {
	  name="Hand";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.98: y=0.1: z=0.03: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.98: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.98: y=0.2: z=0.03: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_euler {x=0: y=-0: z=0: };
	  cur_quat {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=SPHERE;
	  mass=0.05;
	  radius=0.025;
	  length=1;
	  long_axis=LONG_X;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0: b=1: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Head"] {
	  name="Head";
	  desc=;
	  flags=FIXED;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0: y=0.25: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0: y=0.35: z=0: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0: y=0.35: z=0: };
	  cur_rot {x=-0.9999999: y=0: z=0: rot=1.5708: };
	  cur_euler {x=-1.5708: y=0: z=0: };
	  cur_quat {s=0.7071055: x=-0.7071081: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CAPSULE;
	  mass=1;
	  radius=0.1;
	  length=0.25;
	  long_axis=LONG_Y;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.8: b=0.4: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VECamera @["LeftEye"] {
	  name="LeftEye";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$$;
	  rel_pos {x=0.04: y=0: z=0.1: };
	  rel_rot {x=0: y=1: z=0: rot=3.14159: };
	  rel_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.04: y=0.35: z=0.1: };
	  init_rot {x=0: y=1: z=0: rot=3.14159: };
	  init_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  init_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.04: y=0.35: z=0.1: };
	  cur_rot {x=0: y=1: z=0: rot=3.14159: };
	  cur_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  cur_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  mass=0.01;
	  radius=0.01;
	  length=0.01;
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.2: g=0.2: b=0.4980392: a=0.4980392: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	  shape=CYLINDER;
	  long_axis=LONG_Z;
	  box {x=1: y=1: z=1: };
	  img_size {x=320: y=240: };
	  color_cam=1;
	  view_dist {
	   near=0.1;
	   focal=1;
	   far=10;
	  };
	  field_of_view=120;
	  light {
	   on=1;
	   intensity=0.2;
	   color {r=1: g=1: b=1: a=1: };
	  };
	  dir_norm {x=-2.535182e-6: y=0: z=1: };
	 };
	 VECamera @["RightEye"] {
	  name="RightEye";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	  rel_pos {x=-0.04: y=0: z=0.1: };
	  rel_rot {x=0: y=1: z=0: rot=3.14159: };
	  rel_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=-0.04: y=0.35: z=0.1: };
	  init_rot {x=0: y=1: z=0: rot=3.14159: };
	  init_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  init_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=-0.04: y=0.35: z=0.1: };
	  cur_rot {x=0: y=1: z=0: rot=3.14159: };
	  cur_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  cur_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  mass=0.01;
	  radius=0.01;
	  length=0.01;
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.2: g=0.2: b=0.4980392: a=0.4980392: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	  shape=CYLINDER;
	  long_axis=LONG_Z;
	  box {x=1: y=1: z=1: };
	  img_size {x=320: y=240: };
	  color_cam=1;
	  view_dist {
	   near=0.1;
	   focal=1;
	   far=10;
	  };
	  field_of_view=120;
	  light {
	   on=1;
	   intensity=0.2;
	   color {r=1: g=1: b=1: a=1: };
	  };
	  dir_norm {x=-2.535182e-6: y=0: z=1: };
	 };
	 VEBody @["Pectoralis"] {
	  name="Pectoralis";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.3: y=0.15: z=0.05: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.3: y=0.25: z=0.05: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.3: y=0.25: z=0.05: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.15;
	  radius=0.01;
	  length=0.1282123;
	  long_axis=LONG_X;
	  box {x=0.27: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.1176471: b=0.2039216: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Deltoid"] {
	  name="Deltoid";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.3: y=0.15: z=-0.05: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.3: y=0.25: z=-0.05: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.3: y=0.25: z=-0.05: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.15;
	  radius=0.01;
	  length=0.07178771;
	  long_axis=LONG_X;
	  box {x=0.27: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.1176471: b=0.2039216: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	};
	joints {
	 name=;
	 el_typ=VEMuscleJoint;
	 el_def=0;
	 VEMuscleJoint @["Shoulder"] {
	  name="Shoulder";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  body2=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
	  joint_type=HINGE;
	  anchor {x=0.25: y=0: z=0.03: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  vis_size=0.1;
	  stops {
	   stops_on=1;
	   lo=-0.78;
	   hi=2.8;
	   def=1;
	   bounce=0.1;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=0;
	   f_max=0.6145509;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.2178771;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	  flexor {
	   name="Pectoralis";
	   lambda_norm=0.4972067;
	   lambda=0.08372067;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1002793;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1282123;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Pectoralis"]$$;
	  };
	  extensor {
	   name="Deltoid";
	   lambda_norm=0.4972067;
	   lambda=0.08372067;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.09972067;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.07178771;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Deltoid"]$$;
	  };
	  flexor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=2.802597e-45;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=1.356313e-19;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  targ_norm_angle=0.4972067;
	  targ_angle=1;
	  targ_norm_angle2=0;
	  targ_angle2=0;
	  co_contract_pct=0.4;
	 };
	 VEMuscleJoint @["Elbow"] {
	  name="Elbow";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
	  body2=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
	  joint_type=HINGE;
	  anchor {x=0.18: y=0: z=0.025: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  vis_size=0.1;
	  stops {
	   stops_on=1;
	   lo=-0.1;
	   hi=2.8;
	   def=1;
	   bounce=0.1;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=0;
	   f_max=0.2031384;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.03448276;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	  flexor {
	   name="Bicep";
	   lambda_norm=0.3793104;
	   lambda=0.2981379;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.02;
	   len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	   co_contract_len=0.04;
	   rest_len=0.3358621;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.3668966;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor {
	   name="Tricep";
	   lambda_norm=0.3793104;
	   lambda=0.2981379;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.02;
	   len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	   co_contract_len=0.04;
	   rest_len=0.3141379;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.2831034;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  flexor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=5.240856e-43;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor2 {
	   name=;
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=2.127124e-19;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  targ_norm_angle=0.3793104;
	  targ_angle=1;
	  targ_norm_angle2=0;
	  targ_angle2=0;
	  co_contract_pct=0.4;
	 };
	 VEJoint @["Wrist"] {
	  name="Wrist";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
	  body2=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	  joint_type=FIXED;
	  anchor {x=0.18: y=0: z=0: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  vis_size=0.1;
	  stops {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	 VEJoint @["LeftEyeJoint"] {
	  name="LeftEyeJoint";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	  body2=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["LeftEye"]$$;
	  joint_type=UNIVERSAL;
	  anchor {x=0.04: y=0: z=0.1: };
	  axis {x=1: y=0: z=0: };
	  axis2 {x=0: y=1: z=0: };
	  vis_size=0.04;
	  stops {
	   stops_on=1;
	   lo=-1;
	   hi=1;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=1;
	   lo=-3;
	   hi=3;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=-0.1;
	   f_max=10;
	   servo_on=1;
	   trg_pos=-0.2;
	   gain=0.5;
	  };
	  motor2 {
	   motor_on=1;
	   vel=0;
	   f_max=10;
	   servo_on=1;
	   trg_pos=0;
	   gain=0.5;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.5;
	  vel=0;
	  pos2=0;
	  pos2_norm=0.5;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	 VEJoint @["RightEyeJoint"] {
	  name="RightEyeJoint";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	  body2=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["RightEye"]$$;
	  joint_type=UNIVERSAL;
	  anchor {x=-0.04: y=0: z=0.1: };
	  axis {x=1: y=0: z=0: };
	  axis2 {x=0: y=1: z=0: };
	  vis_size=0.04;
	  stops {
	   stops_on=1;
	   lo=-1;
	   hi=1;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=1;
	   lo=-3;
	   hi=3;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=-0.1;
	   f_max=10;
	   servo_on=1;
	   trg_pos=-0.2;
	   gain=0.5;
	  };
	  motor2 {
	   motor_on=1;
	   vel=0;
	   f_max=10;
	   servo_on=1;
	   trg_pos=0;
	   gain=0.5;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.5;
	  vel=0;
	  pos2=0;
	  pos2_norm=0.5;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	};
	space_type=SIMPLE_SPACE;
	hash_levels {min=1: max=4: };
       };
       VEObject @["Target"] {
	name="Target";
	desc=;
	bodies {
	 name=;
	 el_typ=VEBody;
	 el_def=0;
	 VEBody @["TargetBody"] {
	  name="TargetBody";
	  desc=;
	  flags=FIXED;
	  init_rel=0;
	  rel_body=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.5247648: y=0.12: z=0.3282841: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.5247648: y=0.12: z=0.3282841: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_euler {x=0: y=-0: z=0: };
	  cur_quat {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=SPHERE;
	  mass=1;
	  radius=0.02;
	  length=0.1;
	  long_axis=LONG_Y;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname="Banana.iv";
	  set_color=1;
	  color {r=1: g=1: b=0: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0.5;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	};
	joints {
	 name=;
	 el_typ=VEJoint;
	 el_def=0;
	};
	space_type=SIMPLE_SPACE;
	hash_levels {min=1: max=4: };
       };
      };
      spaces {
       name=;
       el_typ=VESpace;
       el_def=0;
       VESpace @["RoomSpace"] {
	name="RoomSpace";
	desc=;
	static_els {
	 name=;
	 el_typ=VEStatic;
	 el_def=0;
	 VEStatic @["Ground"] {
	  name="Ground";
	  desc=;
	  flags=4096;
	  relative=0;
	  rel_static=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  pos {x=0: y=0: z=0: };
	  rot {x=0: y=0: z=1: rot=0: };
	  rot_euler {x=0: y=-0: z=0: };
	  rot_quat {s=1: x=0: y=0: z=0: };
	  shape=PLANE;
	  radius=0.2;
	  length=1;
	  long_axis=LONG_X;
	  box {x=1: y=1: z=1: };
	  plane_norm=NORM_Y;
	  plane_height=0;
	  plane_vis_size {x=3: y=3: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.4: g=0.4: b=0.4: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	 };
	 VEStatic @["BackWall"] {
	  name="BackWall";
	  desc=;
	  flags=4096;
	  relative=0;
	  rel_static=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  pos {x=0: y=1.5: z=-1.5: };
	  rot {x=0: y=0: z=1: rot=0: };
	  rot_euler {x=0: y=-0: z=0: };
	  rot_quat {s=1: x=0: y=0: z=0: };
	  shape=BOX;
	  radius=0.2;
	  length=1;
	  long_axis=LONG_X;
	  box {x=3: y=3: z=0.01: };
	  plane_norm=NORM_Y;
	  plane_height=2.28735e-14;
	  plane_vis_size {x=100: y=100: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.7019608: g=0.7019608: b=0.7019608: a=1: };
	  full_colors=0;
	  ambient_color {r=0.2: g=0.2: b=0.2: a=1: };
	  specular_color {r=1: g=1: b=1: a=0: };
	  emissive_color {r=0: g=0: b=0: a=1: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	 };
	};
	space_type=HASH_SPACE;
	hash_levels {min=-3: max=10: };
       };
      };
      textures {
       name=;
       el_typ=VETexture;
       el_def=0;
      };
      camera_0=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["LeftEye"]$;
      camera_1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["RightEye"]$;
      bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      sun_light {
       on=1;
       intensity=0.5;
       color {r=1: g=1: b=1: a=1: };
      };
      light_0=NULL;
      light_1=NULL;
     };
     DataTable @["ArmOutputData"] {
      name="ArmOutputData";
      desc=;
      data {
       name="data";
       el_typ=String_Data;
       el_def=0;
       String_Data @["Reach_Name"] {
	name="Reach_Name";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] "1";"2";"3";"4";"5";"6";"7";"8";"9";"10";
"11";"12";"13";"14";"15";"16";"17";"18";"19";"20";
"21";"22";"23";"24";"25";"26";"27";"28";	};
       };
       float_Data @["Reach_No"] {
	name="Reach_No";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 1;2;3;4;5;6;7;8;9;10;
11;12;13;14;15;16;17;18;19;20;
21;22;23;24;25;26;27;28;	};
       };
       float_Data @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] -0.12840703;0.31480974;0.44916439;0.449164;0.44916421;0.44916439;0.4491646;0.44916478;0.44916499;0.44916517;
0.44916534;0.44916552;0.44916573;0.44916594;0.44916612;0.44916633;1.4858596;1.4858589;1.4858588;1.4858587;
1.4858587;1.6115576;1.9002074;1.8480308;1.8479415;1.8479415;1.7793463;1.6137495;	};
       };
       float_Data @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.20000002;0.19999997;0.19999999;0.19999999;0.19999999;0.19999999;0.19999999;0.19999999;0.19999999;0.19999999;
0.19999999;0.19999999;0.19999999;0.19999999;0.19999999;0.19999999;0.2;0.2;0.2;0.2;
0.2;0.2;0.20000003;0.19998802;0.19999994;0.19999999;0.2;0.20000003;	};
       };
       float_Data @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] -0.08854115;0.70986658;0.7204228;0.72041637;0.72041637;0.72041631;0.72041631;0.72041631;0.72041631;0.72041631;
0.72041625;0.72041625;0.72041625;0.72041625;0.72041625;0.72041619;0.71398222;0.71397477;0.71397477;0.71397477;
0.71397477;0.6566844;-0.26322636;-0.39131278;-0.38980284;-0.38979536;0.53455865;0.16980122;	};
       };
       float_Data @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.67654562;-0.09219259;0.30433559;0.51044875;-0.11237846;0.12388677;0.050394136;-0.4204497;0.76843309;0.34475955;
0.55371457;0.27796483;0.65593016;0.57619119;-0.015120477;-0.0068069012;0.47905859;0.60788167;0.50788504;0.30848229;
0.4930549;0.91746217;0.94663417;0.98236144;-0.052984856;-0.29860032;0.47066805;-0.33054215;	};
       };
       float_Data @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.12;0.12;0.12;0.12;0.12;0.12;0.12;0.12;0.12;0.12;
0.12;0.12;0.12;0.12;0.12;0.12;0.12;0.12;0.12;0.12;
0.12;0.12;0.12;0.12000006;0.12;0.12;0.12;0.12;	};
       };
       float_Data @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.22761664;0.29766968;0.42475235;0.6383695;0.50368953;0.17944655;0.067961194;0.28674799;0.30620578;0.18071947;
0.64593303;0.50827068;0.3345246;0.056930974;0.45646909;0.29543301;0.55539215;0.26357958;0.39617589;0.5319137;
0.12718141;0.12843418;0.10527965;0.025724232;0.47240993;0.25741449;0.52591592;0.23728013;	};
       };
       float_Data @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 4.1173778e-05;2.2087061e-05;-6.6984448e-06;6.3888672e-07;7.8221734e-07;6.3227435e-07;7.9367271e-07;6.9728094e-07;8.3353342e-07;1.2597066e-06;
5.4463726e-07;7.0007491e-07;5.6931725e-07;7.5027327e-07;5.9446302e-07;7.9264851e-07;-9.0867061e-06;-2.4950612e-06;-2.03032e-06;-2.6886255e-06;
-2.7387773e-06;-3.6807731e-05;-5.6037683e-05;-7.845943e-05;-8.9133272e-07;-2.3482003e-06;-5.7353467e-05;-2.1285196e-05;	};
       };
       float_Data @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] -1.7607422e-07;3.3113949e-07;1.563036e-07;1.461639e-07;1.514213e-07;1.4792693e-07;1.5408175e-07;1.4171127e-07;1.5351429e-07;1.4740827e-07;
1.6012541e-07;1.4422677e-07;1.4199391e-07;1.4206638e-07;1.5904725e-07;1.4907845e-07;2.5100208e-08;-3.1944873e-09;-7.2090085e-09;7.8089615e-09;
7.1449646e-09;-7.0857382e-09;-3.9549553e-07;-1.1227233e-06;8.0820564e-07;1.5065517e-07;2.3304551e-08;-3.3388062e-07;	};
       };
       float_Data @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 8.4588937e-05;-7.9527861e-05;-8.1612976e-05;-1.3238456e-06;-1.3215403e-06;-1.622241e-06;-1.0299199e-06;-1.3255451e-06;-1.3267095e-06;-1.3180713e-06;
-1.0305486e-06;-1.3203528e-06;-1.3231698e-06;-1.3231233e-06;-1.3220288e-06;-1.0304319e-06;-9.4169853e-05;-1.7621447e-06;-1.1436156e-06;-1.1514968e-06;
-1.2614948e-06;-5.0095376e-05;5.7991216e-05;5.3806154e-05;9.6384378e-05;5.3769247e-07;-8.0522164e-05;-8.4135863e-05;	};
       };
       float_Data @["Should_pos"] {
	name="Should_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 2.3109539;1.0212078;1.0207839;1.0207839;1.0207839;1.0207839;1.0207839;1.0207839;1.0207839;1.0207839;
1.0207839;1.0207839;1.0207839;1.0207839;1.0207839;1.0207839;1.0111275;1.0111275;1.0111275;1.0111275;
1.0111275;0.81990814;-0.72957826;-0.74097925;-0.74115062;-0.74115086;0.65440941;-0.78000069;	};
       };
       float_Data @["Should_vel"] {
	name="Should_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] -4.7372287e-06;-6.2320385e-07;-3.9996542e-07;-4.1354488e-07;-4.095142e-07;-4.2235777e-07;-4.1757551e-07;-4.2966744e-07;-4.0951417e-07;-4.0661092e-07;
-4.2160607e-07;-4.267641e-07;-4.1429638e-07;-4.1392056e-07;-4.2273345e-07;-4.2526088e-07;-4.700496e-08;-3.5793633e-08;-2.9837963e-08;-3.7698459e-08;
-5.6924489e-07;-4.8615871e-06;-1.0410745e-06;-2.2193744e-06;1.6765305e-06;-1.2821304e-06;-4.1769636e-06;-4.7784897e-07;	};
       };
       float_Data @["Should_force_in"] {
	name="Should_force_in";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.82970542;0.49852332;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.49997026;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.49999839;
0.49621519;0.4312371;0.0060123592;0.00054992025;0.023195304;0.0012107723;0.36970073;3.5042372e-06;	};
       };
       float_Data @["Elbow_pos"] {
	name="Elbow_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 2.1357403;0.87198687;0.51699066;0.51699018;0.51698971;0.51698923;0.51698875;0.51698828;0.5169878;0.51698732;
0.51698637;0.51698589;0.51698542;0.51698494;0.51698446;0.51698399;0.43721914;0.43721914;0.43721962;0.4372201;
0.4372201;0.43722153;0.58748055;0.24792242;0.24792242;0.2479229;0.20561409;2.1580009;	};
       };
       float_Data @["Elbow_vel"] {
	name="Elbow_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 1.8761148e-06;-7.1947011e-07;-7.7639049e-07;-7.9260394e-07;-7.9663459e-07;-7.8258404e-07;-7.9859319e-07;-7.7648133e-07;-7.8661469e-07;-7.826975e-07;
-7.7452285e-07;-7.6254435e-07;-7.9064546e-07;-7.9663471e-07;-7.765949e-07;-7.8650135e-07;9.0253002e-07;9.0184284e-07;9.0357457e-07;8.8963742e-07;
9.6664303e-07;3.3713877e-07;5.137631e-07;-1.1045386e-06;-7.190938e-07;6.7219133e-07;-3.2054413e-07;1.1487064e-06;	};
       };
       float_Data @["Elbow_force_in"] {
	name="Elbow_force_in";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.79836649;0.32358149;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.20001295;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.20001572;
0.20106044;0.20562193;0.24503899;0.10134912;0.10742161;0.13135636;0.10096051;0.7975834;	};
       };
       float_Data @["n_steps"] {
	name="n_steps";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 202;128;55;21;21;21;21;21;21;21;
21;21;21;21;21;21;189;21;21;21;
21;62;133;54;23;21;115;192;	};
       };
       float_Data @["angle_err"] {
	name="angle_err";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.030555576;0.0080968738;0.0078838542;0.0078837723;0.0078836903;0.0078836083;0.0078835264;0.0078834444;0.0078833625;0.0078832805;
0.0078915134;0.0078830346;0.0078829527;0.0078828707;0.0078827888;0.0078827068;0.0075334832;0.0075334832;0.0075334013;0.0075419843;
0.0099559426;0.018018879;0.0080243153;0.014486928;0.012447583;0.010511941;0.017697982;0.009483044;	};
       };
       float_Data @["trg_dist"] {
	name="trg_dist";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[28] 0.61381072;0.46791229;0.28932366;0.086081348;0.42653671;0.54428816;0.65820783;0.70737827;0.43778375;0.50232762;
0.09816315;0.22678694;0.38177344;0.61742109;0.39531708;0.49706176;0.69133371;0.72078317;0.71874744;0.80780524;
0.85817277;0.67382652;0.72452068;0.69662189;1.5030413;1.5592438;0.87834376;1.306375;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @["ReachOutputData"] {
      name="ReachOutputData";
      desc=;
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @["time"] {
	name="time";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_pos"] {
	name="Should_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_vel"] {
	name="Should_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_flexor_len"] {
	name="Should_flexor_len";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_flexor_dlen"] {
	name="Should_flexor_dlen";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_flexor_act"] {
	name="Should_flexor_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_flexor_m_act_force"] {
	name="Should_flexor_m_act_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_flexor_m_force"] {
	name="Should_flexor_m_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_flexor_force"] {
	name="Should_flexor_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_extensor_len"] {
	name="Should_extensor_len";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_extensor_dlen"] {
	name="Should_extensor_dlen";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_extensor_act"] {
	name="Should_extensor_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_extensor_m_act_force"] {
	name="Should_extensor_m_act_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_extensor_m_force"] {
	name="Should_extensor_m_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Should_extensor_force"] {
	name="Should_extensor_force";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["should_cur_trg"] {
	name="should_cur_trg";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Elbow_pos"] {
	name="Elbow_pos";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Elbow_vel"] {
	name="Elbow_vel";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["Elbow_force_in"] {
	name="Elbow_force_in";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
       float_Data @["elbow_cur_trg"] {
	name="elbow_cur_trg";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[0] 	};
	ar {
	 name=;
		[0] 	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     NetMonitor @["ArmMonitor"] {
      name="ArmMonitor";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["Reach_Name"] {
	name="Reach_Name";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Reach_No"] {
	name="Reach_No";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_pos"] {
	name="Should_pos";
	computed=0;
	object_type=VEJoint;
	object=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_vel"] {
	name="Should_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_force_in"] {
	name="Should_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_pos"] {
	name="Elbow_pos";
	computed=0;
	object_type=VEJoint;
	object=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_vel"] {
	name="Elbow_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_force_in"] {
	name="Elbow_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["n_steps"] {
	name="n_steps";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["angle_err"] {
	name="angle_err";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trg_dist"] {
	name="trg_dist";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=.projects["ve_arm"].networks["FwdModelNet"]$$;
      data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$$;
      rmv_orphan_cols=1;
     };
     NetMonitor @["ReachMonitor"] {
      name="ReachMonitor";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["time"] {
	name="time";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_pos"] {
	name="Should_pos";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_vel"] {
	name="Should_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_len"] {
	name="Should_flexor_len";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.len";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_dlen"] {
	name="Should_flexor_dlen";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.dlen";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_act"] {
	name="Should_flexor_act";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_m_act_force"] {
	name="Should_flexor_m_act_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.m_act_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_m_force"] {
	name="Should_flexor_m_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.m_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_force"] {
	name="Should_flexor_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_len"] {
	name="Should_extensor_len";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.len";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_dlen"] {
	name="Should_extensor_dlen";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.dlen";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_act"] {
	name="Should_extensor_act";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_m_act_force"] {
	name="Should_extensor_m_act_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.m_act_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_m_force"] {
	name="Should_extensor_m_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.m_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_force"] {
	name="Should_extensor_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["should_cur_trg"] {
	name="should_cur_trg";
	computed=1;
	object_type=VEMuscleJoint;
	object=NULL;
	variable="extensor.force";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_pos"] {
	name="Elbow_pos";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_vel"] {
	name="Elbow_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_force_in"] {
	name="Elbow_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["elbow_cur_trg"] {
	name="elbow_cur_trg";
	computed=1;
	object_type=VEMuscleJoint;
	object=NULL;
	variable="extensor.force";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="Aggregate": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$$;
      rmv_orphan_cols=1;
     };
     taImage @["LeftEyeImage"] {
      name="LeftEyeImage";
     };
     taImage @["RightEyeImage"] {
      name="RightEyeImage";
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["gen_rnd_angles"] {
      name="gen_rnd_angles";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="generate a new random angles";
      init_from=NULL;
     };
     ProgVar @["shoulder_trg_angle_norm"] {
      name="shoulder_trg_angle_norm";
      var_type=T_Real;
      real_val=0.2055837064981461;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized 0..1 angle value";
      init_from=NULL;
     };
     ProgVar @["elbow_trg_angle_norm"] {
      name="elbow_trg_angle_norm";
      var_type=T_Real;
      real_val=0.2003530710935593;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized 0..1 angle value";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["VEEmerWorld"] {
      name="VEEmerWorld";
      var_type=T_Object;
      object_type=VEWorld;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Shoulder"] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Elbow"] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Hand"] {
      name="Hand";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Torso"] {
      name="Torso";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Humerus"] {
      name="Humerus";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Ulna"] {
      name="Ulna";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["TargetBody"] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["co_contract_pct"] {
      name="co_contract_pct";
      var_type=T_Real;
      real_val=0.4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how much to co-contract the muscles for the movement";
      init_from=NULL;
     };
     ProgVar @["angle_inc"] {
      name="angle_inc";
      var_type=T_Real;
      real_val=0.02;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="increment in angle control to provide";
      init_from=NULL;
     };
     ProgVar @["angle_updt_interval"] {
      name="angle_updt_interval";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how frequently to provide new angle commands";
      init_from=NULL;
     };
     ProgVar @["ve_step"] {
      name="ve_step";
      var_type=T_Int;
      int_val=125;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["max_ve_steps"] {
      name="max_ve_steps";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of ve steps to take per movement";
      init_from=NULL;
     };
     ProgVar @["min_ve_steps"] {
      name="min_ve_steps";
      var_type=T_Int;
      int_val=20;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="minimum number of ve steps to take per movement";
      init_from=NULL;
     };
     ProgVar @["reach_mon_on"] {
      name="reach_mon_on";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="whether to monitor at the reach level";
      init_from=NULL;
     };
     ProgVar @["capture_images"] {
      name="capture_images";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="whether to monitor at the reach level";
      init_from=NULL;
     };
     ProgVar @["shoulder_cur_trg_angle"] {
      name="shoulder_cur_trg_angle";
      var_type=T_Real;
      real_val=0.2055837064981461;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current target angle: is incremented linearly to produce the control trajectory";
      init_from=NULL;
     };
     ProgVar @["shoulder_pos_dir"] {
      name="shoulder_pos_dir";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="positive angle direction (else neg)";
      init_from=NULL;
     };
     ProgVar @["shoulder_angle_err"] {
      name="shoulder_angle_err";
      var_type=T_Real;
      real_val=3.704029268192244e-6;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="angle err relative to target";
      init_from=NULL;
     };
     ProgVar @["elbow_cur_trg_angle"] {
      name="elbow_cur_trg_angle";
      var_type=T_Real;
      real_val=0.2586210179328914;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["elbow_pos_dir"] {
      name="elbow_pos_dir";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["elbow_angle_err"] {
      name="elbow_angle_err";
      var_type=T_Real;
      real_val=0.01896238327026367;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="angle err relative to target";
      init_from=NULL;
     };
     ProgVar @["angle_err"] {
      name="angle_err";
      var_type=T_Real;
      real_val=0.009483043649765932;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total angular error across both joints";
      init_from=NULL;
     };
     ProgVar @["hand_vel"] {
      name="hand_vel";
      var_type=T_Real;
      real_val=0.2106637060642242;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["hand_vel_thr"] {
      name="hand_vel_thr";
      var_type=T_Real;
      real_val=0.0001;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold for stopping movement in hand velocity";
      init_from=NULL;
     };
     ProgVar @["ArmOutputData"] {
      name="ArmOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ArmMonitor"] {
      name="ArmMonitor";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmMonitor"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ReachMonitor"] {
      name="ReachMonitor";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachMonitor"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ReachOutputData"] {
      name="ReachOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["hand_max_x"] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_z"] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_x"] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_max_z"] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_x_norm"] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=1.411912413641195;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_z_norm"] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.4698628743391454;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_x_norm"] {
      name="targ_pos_x_norm";
      var_type=T_Real;
      real_val=0.1070187011512245;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_z_norm"] {
      name="targ_pos_z_norm";
      var_type=T_Real;
      real_val=0.5320554175632164;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["trg_dist"] {
      name="trg_dist";
      var_type=T_Real;
      real_val=1.306375026702881;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="distance from target";
      init_from=NULL;
     };
     ProgVar @["LeftEyeImage"] {
      name="LeftEyeImage";
      var_type=T_Object;
      object_type=taImage;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["LeftEyeImage"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["RightEyeImage"] {
      name="RightEyeImage";
      var_type=T_Object;
      object_type=taImage;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["RightEyeImage"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$$;
      method=VEWorld::Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmMonitor"]$$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachMonitor"]$$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     ResetDataRows @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$$;
     };
     ResetDataRows @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$$;
     };
     AssignExpr @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["arm_tot_len"]$$;
      expr {
       expr="Humerus.length + Ulna.length + Hand.radius+.04";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_x_pos"]$$;
      expr {
       expr="Torso.cur_pos.x + .5 * Torso.box.x + .03";
      };
     };
     AssignExpr @[9] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_z_pos"]$$;
      expr {
       expr="Torso.cur_pos.z";
      };
     };
     AssignExpr @[10] {
      desc="assume reaching out in front of plane";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_max_x"]$$;
      expr {
       expr="shoulder_x_pos + arm_tot_len";
      };
     };
     AssignExpr @[11] {
      desc="can stick hand through torso now..";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_min_z"]$$;
      expr {
       expr="shoulder_z_pos - Ulna.length";
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_min_x"]$$;
      expr {
       expr="shoulder_x_pos - arm_tot_len";
      };
     };
     AssignExpr @[13] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_max_z"]$$;
      expr {
       expr="shoulder_z_pos + arm_tot_len";
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     IfElse @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="gen_rnd_angles";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       Comment @[0] {
	desc="= Generate Random Forces =";
	flags=0;
	orig_prog_code=;
       };
       RandomCall @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].args["shoulder_trg_angle_norm"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  expr {
	   expr="1.0";
	  };
	 };
	};
       };
       RandomCall @[2] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].args["elbow_trg_angle_norm"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  expr {
	   expr="1.0";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     Comment @[1] {
      desc="= Run the World =";
      flags=0;
      orig_prog_code=;
     };
     AssignExpr @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_pos_dir"]$$;
      expr {
       expr="(shoulder_trg_angle_norm > shoulder_cur_trg_angle)";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_pos_dir"]$$;
      expr {
       expr="(elbow_trg_angle_norm > elbow_cur_trg_angle)";
      };
     };
     ResetDataRows @[6] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
     };
     ForLoop @[7] {
      desc=;
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       IfElse @[0] {
	desc="provide new target EP angles at given increments along trajectory";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="ve_step % angle_updt_interval == 0";
	};
	show_false_code=0;
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="shoulder_pos_dir";
	  };
	  show_false_code=1;
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="MIN(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="-angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="MAX(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 IfElse @[1] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="elbow_pos_dir";
	  };
	  show_false_code=1;
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="MIN(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="-angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="MAX(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 MethodCall @[2] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["Shoulder"]$$;
	  method=VEMuscleJoint::SetTargNormAngle;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle";
	    required=1;
	    def_val=;
	    expr {
	     expr="shoulder_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="co_contract";
	    required=1;
	    def_val=;
	    expr {
	     expr="co_contract_pct";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle2";
	    required=0;
	    def_val="0.0f";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["Elbow"]$$;
	  method=VEMuscleJoint::SetTargNormAngle;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle";
	    required=1;
	    def_val=;
	    expr {
	     expr="elbow_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="co_contract";
	    required=1;
	    def_val=;
	    expr {
	     expr="co_contract_pct";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle2";
	    required=0;
	    def_val="0.0f";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	};
       };
       MethodCall @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$;
	method=VEWorld::Step;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       IfElse @[2] {
	desc="monitor details about the reach itself -- slows things down quite a bit..";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="reach_mon_on";
	};
	show_false_code=0;
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AddNewDataRow @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachMonitor"]$;
	  method=NetMonitor::GetMonVals;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[2] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	  method=DataBlock::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="Variant&";
	    name="data";
	    required=1;
	    def_val=;
	    expr {
	     expr="ve_step";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="ch_nm";
	    required=1;
	    def_val="\"\"";
	    expr {
	     expr="\"time\"";
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	  method=DataBlock::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="Variant&";
	    name="data";
	    required=1;
	    def_val=;
	    expr {
	     expr="shoulder_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="ch_nm";
	    required=1;
	    def_val="\"\"";
	    expr {
	     expr="\"should_cur_trg\"";
	    };
	   };
	  };
	 };
	 MethodCall @[4] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	  method=DataBlock::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="Variant&";
	    name="data";
	    required=1;
	    def_val=;
	    expr {
	     expr="elbow_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="ch_nm";
	    required=1;
	    def_val="\"\"";
	    expr {
	     expr="\"elbow_cur_trg\"";
	    };
	   };
	  };
	 };
	 DoneWritingDataRow @[5] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	};
       };
       IfElse @[3] {
	desc="see if hand velocity is sufficiently slow in magnitude that we can consider the movement over";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="ve_step > min_ve_steps";
	};
	show_false_code=0;
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_vel"]$$;
	  expr {
	   expr="Hand.cur_lin_vel.Mag()";
	  };
	 };
	 IfBreak @[1] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="hand_vel < hand_vel_thr";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	};
       };
       StopStepPoint @[4] {
	desc=;
	flags=0;
	orig_prog_code=;
       };
      };
      init {
       expr="ve_step = 0";
      };
      test {
       expr="ve_step < max_ve_steps";
      };
      iter {
       expr="ve_step++";
      };
     };
     Comment @[8] {
      desc="= Compute Distance to Target =";
      flags=0;
      orig_prog_code=;
     };
     AssignExpr @[9] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_pos_x_norm"]$$;
      expr {
       expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[10] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_pos_z_norm"]$$;
      expr {
       expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[11] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["targ_pos_x_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["targ_pos_z_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[13] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["trg_dist"]$$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     MathCall @[14] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["trg_dist"]$;
      object_type=taMath_float;
      method=taMath_float::euc_dist;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="x1";
	required=1;
	def_val=;
	expr {
	 expr="targ_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=float;
	type="float";
	name="y1";
	required=1;
	def_val=;
	expr {
	 expr="targ_pos_z_norm";
	};
       };
       ProgArg @[2] {
	arg_type=float;
	type="float";
	name="x2";
	required=1;
	def_val=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[3] {
	arg_type=float;
	type="float";
	name="y2";
	required=1;
	def_val=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
      };
     };
     Comment @[15] {
      desc="= Read Out the State =";
      flags=0;
      orig_prog_code=;
     };
     AssignExpr @[16] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_angle_err"]$$;
      expr {
       expr="fabs(Shoulder.pos_norm - shoulder_trg_angle_norm)";
      };
     };
     AssignExpr @[17] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_angle_err"]$$;
      expr {
       expr="fabs(Elbow.pos_norm - elbow_trg_angle_norm)";
      };
     };
     AssignExpr @[18] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["angle_err"]$$;
      expr {
       expr=".5 * (shoulder_angle_err + elbow_angle_err)";
      };
     };
     AddNewDataRow @[19] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
     };
     MethodCall @[20] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmMonitor"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[21] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="shoulder_cur_trg_angle";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"Should_force_in\"";
	};
       };
      };
     };
     MethodCall @[22] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="elbow_cur_trg_angle";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"Elbow_force_in\"";
	};
       };
      };
     };
     MethodCall @[23] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="ve_step";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"n_steps\"";
	};
       };
      };
     };
     MethodCall @[24] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="angle_err";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"angle_err\"";
	};
       };
      };
     };
     MethodCall @[25] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="trg_dist";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"trg_dist\"";
	};
       };
      };
     };
     MethodCall @[26] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="ArmOutputData.rows";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"Reach_No\"";
	};
       };
      };
     };
     MethodCall @[27] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataBlock::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="ArmOutputData.rows";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"Reach_Name\"";
	};
       };
      };
     };
     DoneWritingDataRow @[28] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
     };
     Comment @[29] {
      desc="= Capture Eye Images =";
      flags=0;
      orig_prog_code=;
     };
     IfElse @[30] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="capture_images";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$;
	method=VEWorld::GetCameraTaImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taImage_ref;
	  type="taImage&";
	  name="ta_img";
	  required=1;
	  def_val=;
	  expr {
	   expr="LeftEyeImage";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="camera_no";
	  required=1;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$;
	method=VEWorld::GetCameraTaImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taImage_ref;
	  type="taImage&";
	  name="ta_img";
	  required=1;
	  def_val=;
	  expr {
	   expr="RightEyeImage";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="camera_no";
	  required=1;
	  def_val=;
	  expr {
	   expr="1";
	  };
	 };
	};
       };
       MethodCall @[2] {
	desc=;
	flags=OFF;
	orig_prog_code=;
	result_var=NULL;
	obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["LeftEyeImage"]$$;
	method=taImage::SaveImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="fname";
	  required=1;
	  def_val="\"\"";
	  expr {
	   expr="\"test_image_\" + ArmOutputData.rows + \".jpg\"";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["SetTarget"] {
    name="SetTarget";
    short_nm="Target";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["gen_rnd_targ"] {
      name="gen_rnd_targ";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="generate a new random target location";
      init_from=NULL;
     };
     ProgVar @["targ_angle"] {
      name="targ_angle";
      var_type=T_Real;
      real_val=0.8829378330809791;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="target angle from shoulder joint";
      init_from=NULL;
     };
     ProgVar @["targ_dist"] {
      name="targ_dist";
      var_type=T_Real;
      real_val=0.4249041063892947;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="target distance from shoulder joint";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["TargetBody"] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["targ_x"] {
      name="targ_x";
      var_type=T_Real;
      real_val=0.5247648533838436;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="location of target";
      init_from=NULL;
     };
     ProgVar @["targ_z"] {
      name="targ_z";
      var_type=T_Real;
      real_val=0.3282840542722578;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="location of target";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["rnd_angle_min"] {
      name="rnd_angle_min";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="minimum angle for rnd gen";
      init_from=NULL;
     };
     ProgVar @["rnd_angle_max"] {
      name="rnd_angle_max";
      var_type=T_Real;
      real_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum angle for rnd gen";
      init_from=NULL;
     };
     ProgVar @["rnd_dist_min"] {
      name="rnd_dist_min";
      var_type=T_Real;
      real_val=0.2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="minimum radial distance for rnd gen";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["arm_tot_len"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["shoulder_x_pos"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["shoulder_z_pos"]$$;
      var_4=NULL;
     };
     IfElse @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="gen_rnd_targ";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].args["targ_angle"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  expr {
	   expr="rnd_angle_min";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  expr {
	   expr="rnd_angle_max";
	  };
	 };
	};
       };
       RandomCall @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].args["targ_dist"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  expr {
	   expr="rnd_dist_min";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  expr {
	   expr="arm_tot_len";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["targ_x"]$$;
      expr {
       expr="shoulder_x_pos + targ_dist * cos(targ_angle)";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["targ_z"]$$;
      expr {
       expr="shoulder_z_pos + targ_dist * sin(targ_angle)";
      };
     };
     MemberAssign @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["TargetBody"]$$;
      path="init_pos.x";
      expr {
       expr="targ_x";
      };
      update_after=0;
     };
     MemberAssign @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["TargetBody"]$;
      path="init_pos.z";
      expr {
       expr="targ_z";
      };
      update_after=0;
     };
     MethodCall @[6] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["TargetBody"]$;
      method=VEBody::SetValsToODE;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["RobotGetCurInputs"] {
    name="RobotGetCurInputs";
    short_nm="AplyIn";
    tags=;
    desc="get input data for forward model: current status inputs -- before running Robot";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["TargetBody"] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Hand"] {
      name="Hand";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Shoulder"] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Elbow"] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["hand_max_x"] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_x"] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_max_z"] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_z"] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_x_norm"] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=1.411912413641195;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_z_norm"] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.4698628743391454;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_x_norm"] {
      name="targ_pos_x_norm";
      var_type=T_Real;
      real_val=0.6810502275638459;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_z_norm"] {
      name="targ_pos_z_norm";
      var_type=T_Real;
      real_val=0.6159300015974175;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["shoulder_ang_norm"] {
      name="shoulder_ang_norm";
      var_type=T_Real;
      real_val=-1.997921117435908e-7;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
     ProgVar @["elbow_ang_norm"] {
      name="elbow_ang_norm";
      var_type=T_Real;
      real_val=0.7786210179328918;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["arm_tot_len"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["shoulder_x_pos"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["shoulder_z_pos"]$$;
      var_4=NULL;
     };
     OtherProgramVar @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_max_x"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_max_z"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_min_x"]$$;
      var_4=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_min_z"]$$;
     };
     Comment @[2] {
      desc="= get all the data  -- compute here b/c this is BEFORE Arm is run =";
      flags=0;
      orig_prog_code=;
     };
     AssignExpr @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_pos_x_norm"]$$;
      expr {
       expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_pos_z_norm"]$$;
      expr {
       expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["targ_pos_x_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["targ_pos_z_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["shoulder_ang_norm"]$$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["elbow_ang_norm"]$$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     Comment @[9] {
      desc="= write to the data table -- assumes row added and set as target =";
      flags=0;
      orig_prog_code=;
     };
     MethodCall @[10] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[11] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     MethodCall @[12] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="targ_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"VisTarget_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[13] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="targ_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"VisTarget_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     MethodCall @[14] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="shoulder_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"SomaShoulderAngle_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[15] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="elbow_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"SomaElbowAngle_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["FwdModelPredTargs"] {
    name="FwdModelPredTargs";
    short_nm="Targs";
    tags=;
    desc="get input data for forward mode: targets for predictions (after running Robot)";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["Shoulder"] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Elbow"] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["hand_max_x"] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_x"] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_max_z"] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_z"] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_x_norm"] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=0.9311804767873835;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_z_norm"] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.4031269190452951;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["shoulder_trg_angle_norm"] {
      name="shoulder_trg_angle_norm";
      var_type=T_Real;
      real_val=0.09080483280671336;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized 0..1 motor control value";
      init_from=NULL;
     };
     ProgVar @["elbow_trg_angle_norm"] {
      name="elbow_trg_angle_norm";
      var_type=T_Real;
      real_val=0.4336864937837698;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["shoulder_ang_norm"] {
      name="shoulder_ang_norm";
      var_type=T_Real;
      real_val=0.08846060186624527;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
     ProgVar @["elbow_ang_norm"] {
      name="elbow_ang_norm";
      var_type=T_Real;
      real_val=0.4091070890426636;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     Comment @[0] {
      desc="== get all the data in normalized form ==";
      flags=0;
      orig_prog_code=;
     };
     OtherProgramVar @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["arm_tot_len"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_x_pos"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_z_pos"]$$;
      var_4=NULL;
     };
     OtherProgramVar @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_max_x"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_max_z"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_min_x"]$$;
      var_4=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_min_z"]$$;
     };
     OtherProgramVar @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_pos_x_norm"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_pos_z_norm"]$$;
      var_3=NULL;
      var_4=NULL;
     };
     AssignExpr @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_ang_norm"]$$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["elbow_ang_norm"]$$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     OtherProgramVar @[6] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_trg_angle_norm"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["elbow_trg_angle_norm"]$$;
      var_3=NULL;
      var_4=NULL;
     };
     Comment @[7] {
      desc="== write to the data table -- assumes row added and set as target ==";
      flags=0;
      orig_prog_code=;
     };
     MethodCall @[8] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[9] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"VisHand_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     MethodCall @[10] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="shoulder_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"SomaShoulderAngle_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[11] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="elbow_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"SomaElbowAngle_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[12] {
      desc="this must be done here because random forces generated after grabbing cur inputs";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="shoulder_trg_angle_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"MotorShoulderForce\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[13] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="elbow_trg_angle_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"MotorElbowForce\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     DoneWritingDataRow @[14] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["RLModelRew"] {
    name="RLModelRew";
    short_nm="Rew";
    tags=;
    desc="get input data for RL model: reward value (after running Robot)";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trg_dist"] {
      name="trg_dist";
      var_type=T_Real;
      real_val=1.306375026702881;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="distance from target";
      init_from=NULL;
     };
     ProgVar @["rew_val"] {
      name="rew_val";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="reward value";
      init_from=NULL;
     };
     ProgVar @["rew_dist_thr"] {
      name="rew_dist_thr";
      var_type=T_Real;
      real_val=0.4;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold on distance to get a reward: updated as a function of network performance";
      init_from=NULL;
     };
     ProgVar @["rew_dist_thr_init"] {
      name="rew_dist_thr_init";
      var_type=T_Real;
      real_val=0.4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="initial threshold on distance to get a reward at start of training";
      init_from=NULL;
     };
     ProgVar @["rew_dist_thr_incr"] {
      name="rew_dist_thr_incr";
      var_type=T_Real;
      real_val=0.01;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how much to change the distance threshold when network is doing well or poorly (see avg_rew_*_thr)";
      init_from=NULL;
     };
     ProgVar @["avg_rew_dec_thr"] {
      name="avg_rew_dec_thr";
      var_type=T_Real;
      real_val=0.8;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold on network avg_rew for decreasing the reward threshold (makes the task harder -- when doing well)";
      init_from=NULL;
     };
     ProgVar @["avg_rew_inc_thr"] {
      name="avg_rew_inc_thr";
      var_type=T_Real;
      real_val=0.2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold on network avg_rew for increasing the reward threshold (makes task easier -- when doing poorly)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$$;
      expr {
       expr="rew_dist_thr_init";
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["trg_dist"]$$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     IfElse @[1] {
      desc="on first trial of new epoch, update the reward threshold based on performance";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.trial == 0";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       IfElse @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr="network.epoch == 0";
	};
	show_false_code=1;
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	  expr {
	   expr="rew_dist_thr_init";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="network.avg_ext_rew >= avg_rew_dec_thr";
	  };
	  show_false_code=0;
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	    expr {
	     expr="-rew_dist_thr_incr";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	  };
	 };
	 IfElse @[1] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="network.avg_ext_rew <= avg_rew_inc_thr";
	  };
	  show_false_code=0;
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	    expr {
	     expr="rew_dist_thr_incr";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="by threshold";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_val"]$$;
      expr {
       expr="trg_dist < rew_dist_thr ? 1.0 : 0.0";
      };
     };
     AssignExpr @[3] {
      desc="just inverse distance for now..";
      flags=OFF;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_val"]$;
      expr {
       expr="rew_val > 0.0 ? rew_val : 0.0";
      };
     };
     Comment @[4] {
      desc="== write to the data table -- assumes row added and set as target ==";
      flags=0;
      orig_prog_code=;
     };
     MethodCall @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].args["input_data"]$$;
      method=DataBlock::SetMatrixCellDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	expr {
	 expr="rew_val";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"PVe\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     DoneWritingDataRow @[6] {
      desc=;
      flags=0;
      orig_prog_code=;
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].args["input_data"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["RobotTrialInit"] {
    name="RobotTrialInit";
    short_nm="Init";
    tags=;
    desc="interfacing between the robot and the model(s) at the start of the Trial level of processing";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cur_net_name"] {
      name="cur_net_name";
      var_type=T_String;
      string_val="RLNet";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current network name -- used for a switch to determine what to perform";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"].vars["cur_net_name"]$$;
      expr {
       expr="network.name";
      };
     };
     Switch @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      switch_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"].vars["cur_net_name"]$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="capture current arm configuration prior to running Arm";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	  target=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"]$$;
	  targ_ld_init="*GetCurInputs*";
	 };
	 ProgramCall @[1] {
	  desc="run the arm to generate target predictions -- random forces generated now";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="gen_rnd_angles";
	    required=1;
	    def_val=;
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="shoulder_trg_angle_norm";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=double;
	    type="double";
	    name="elbow_trg_angle_norm";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	  };
	  target=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
	  targ_ld_init="*EmerRobot*";
	 };
	 ProgramCall @[2] {
	  desc="capture prediction targets (actual outputs of motor system) after running arm";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	  target=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"]$$;
	  targ_ld_init="*FwdModelPredTargs*";
	 };
	};
	case_val {
	 expr="\"FwdModelNet\"";
	};
       };
       CaseBlock @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="set new random target location";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="gen_rnd_targ";
	    required=1;
	    def_val=;
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="targ_angle";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=double;
	    type="double";
	    name="targ_dist";
	    required=1;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	  };
	  target=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"]$$;
	  targ_ld_init="*SetTarget*";
	 };
	 ProgramCall @[1] {
	  desc="capture current arm configuration prior to running Arm";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	  target=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"]$;
	  targ_ld_init="*GetCurInputs*";
	 };
	};
	case_val {
	 expr="\"RLNet\"";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["RobotSettleInit"] {
    name="RobotSettleInit";
    short_nm="Init";
    tags=;
    desc="interfacing between the robot and the model(s) at the start of the Settle level of processing";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cur_net_name"] {
      name="cur_net_name";
      var_type=T_String;
      string_val="RLNet";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current network name -- used for a switch to determine what to perform";
      init_from=NULL;
     };
     ProgVar @["MotorShoulderForce"] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$$;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["MotorElbowForce"] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$$;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["cur_net_name"]$$;
      expr {
       expr="network.name";
      };
     };
     Switch @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      switch_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["cur_net_name"]$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_FwdModel"]$$;
	  targ_ld_init="*ApplyInputs*";
	 };
	};
	case_val {
	 expr="\"FwdModelNet\"";
	};
       };
       CaseBlock @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="network.phase_no == 1";
	  };
	  show_false_code=0;
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["MotorShoulderForce"]$$;
	    expr {
	     expr="network.layers.MotorShoulderForce";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["MotorElbowForce"]$$;
	    expr {
	     expr="network.layers.MotorElbowForce";
	    };
	   };
	   ProgramCall @[2] {
	    desc="run the arm using forces from the network force layers";
	    flags=0;
	    orig_prog_code=;
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=bool;
	      type="bool";
	      name="gen_rnd_angles";
	      required=1;
	      def_val=;
	      expr {
	       expr="false";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=double;
	      type="double";
	      name="shoulder_trg_angle_norm";
	      required=1;
	      def_val=;
	      expr {
	       expr="MotorShoulderForce.units[0].act_m";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=double;
	      type="double";
	      name="elbow_trg_angle_norm";
	      required=1;
	      def_val=;
	      expr {
	       expr="MotorElbowForce.units[0].act_m";
	      };
	     };
	    };
	    target=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
	    targ_ld_init="*EmerRobot*";
	   };
	   ProgramCall @[3] {
	    desc="get reward value based on action";
	    flags=0;
	    orig_prog_code=;
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=LeabraNetwork;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      expr {
	       expr="network";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable;
	      type="DataTable*";
	      name="input_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="input_data";
	      };
	     };
	    };
	    target=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
	    targ_ld_init="*RLModelRew*";
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	  };
	 };
	 ProgramCall @[1] {
	  desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"]$$;
	  targ_ld_init="*ApplyInputs*";
	 };
	};
	case_val {
	 expr="\"RLNet\"";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["LeabraAll_Std"] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @["LeabraBatch"] {
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["max_batch"] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrain"] {
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=0;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @["rnd_seed"] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
      is_gauss_double_cached=0;
      cached_gauss_double=0;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit"] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @["save_final_wts"] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  Note: you can also just call SaveWeights program inside training loop to save more frequently";
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["ve_arm"].networks["RLNet"].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=0;
      orig_prog_code=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      show_false_code=1;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=0;
      orig_prog_code=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	my_mask=NULL;
	debug_level=NULL;
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=0;
      orig_prog_code=;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     IfElse @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="no_prompts";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	my_mask=NULL;
	debug_level=NULL;
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="save_final_wts";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraEpoch"] {
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=28;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trials_per_epoch"] {
      name="trials_per_epoch";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how many trials to create per epoch?";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["ve_arm"].networks["RLNet"].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=28;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @["compute_rel_netin"] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="call Compute_AvgAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
      init_from=NULL;
     };
     ProgVar @["adapt_rel_abs_netin"] {
      name="adapt_rel_abs_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="use the computed rel and abs netin values to adapt the wt_scale.abs and wt_scale.rel params of network conspecs to match target values that are set on the projections -- see conspec rel_net_adapt and layerspec abs_net_adapt parmeters and comments for more information";
      init_from=NULL;
     };
     ProgVar @["ArmOutputData"] {
      name="ArmOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["ArmOutputData"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc="set to target number of rows -- will iterate over";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
      method=DataTable::EnforceRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=1;
	def_val=;
	expr {
	 expr="trials_per_epoch";
	};
       };
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$;
      index_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
      order_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[9] {
      desc=;
      flags=NEW_EL;
      orig_prog_code=;
      cond {
       expr="compute_rel_netin";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=LeabraNetwork::Compute_AvgAbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       IfElse @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr="adapt_rel_abs_netin";
	};
	show_false_code=0;
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	  method=LeabraNetwork::Compute_AdaptRelNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	  method=LeabraNetwork::Compute_AdaptAbsNetin;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     MethodCall @[10] {
      desc="done with the computation in the epoch -- record time it took";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[11] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrial"] {
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["phase_no"] {
      name="phase_no";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["compute_rel_netin"] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="arm stuff at start of trial";
      flags=NON_STD;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"]$$;
      targ_ld_init="*RobotTrialInit*";
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[5] {
      desc=;
      flags=NEW_EL;
      orig_prog_code=;
      cond {
       expr="compute_rel_netin";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     IfElse @[6] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraSettle"] {
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["min_cycles"] {
      name="min_cycles";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
     ProgVar @["MotorElbowForce"] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$;
      objs_ptr=0;
      flags=SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["MotorShoulderForce"] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$;
      objs_ptr=0;
      flags=SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=NON_STD;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"]$$;
      targ_ld_init="*RobotSettleInit*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no <= 1";
      };
      show_false_code=1;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["min_cycles"]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["min_cycles"]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no == 1";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraCycle"] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
      update_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["ApplyInputs_FwdModel"] {
    name="ApplyInputs_FwdModel";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$$;
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[1] {
	chan_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[2] {
	chan_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[3] {
	chan_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[4] {
	chan_name="MotorShoulderForce";
	net_target=LAYER;
	layer_name="MotorShoulderForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[5] {
	chan_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[6] {
	chan_name="VisHand_Pred";
	net_target=LAYER;
	layer_name="VisHand_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[7] {
	chan_name="SomaShoulderAngle_Pred";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[8] {
	chan_name="SomaElbowAngle_Pred";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[9] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_FwdModel"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_FwdModel"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_FwdModel"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_FwdModel"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_FwdModel"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["ApplyInputs_RLModel"] {
    name="ApplyInputs_RLModel";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      network=$.projects["ve_arm"].networks["RLNet"]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="PVe";
	net_target=LAYER;
	layer_name="PVe";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[1] {
	chan_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=COMP;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[2] {
	chan_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[3] {
	chan_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[4] {
	chan_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[5] {
	chan_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
       LayerWriterEl @[6] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {type=NONE: mean=0: var=0.5: par=1: name="": };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrialMonitor"] {
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["phase_no"] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["minus_cycles"] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pvlv_pvi"] {
	name="pvlv_pvi";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="pvlv_pvi";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trg_dist"] {
	name="trg_dist";
	computed=0;
	object_type=ProgVar;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["trg_dist"]$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["RLNet"]$;
      data=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraEpochMonitor"] {
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_trg_dist"] {
	name="avg_trg_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
	agg_col {
	 col_name="trg_dist";
	};
	agg {op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rew_dist_thr"] {
	name="rew_dist_thr";
	computed=0;
	object_type=ProgVar;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_pvi"] {
	name="avg_pvi";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["RLNet"]$;
      data=$.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["ve_arm"].networks["RLNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["SaveWeights"] {
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=0;
      orig_prog_code=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["LeabraAll_Test"] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @["LeabraEpochTest"] {
    name="LeabraEpochTest";
    short_nm="Test";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["ve_arm"].data.gp["OutputData"]["TestTrialOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["ve_arm"].networks["RLNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=59;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @["load_weights"] {
      name="load_weights";
      var_type=T_String;
      string_val="ve_arm_curbest.wts.gz";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="file name of weights to load";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     IfElse @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="load_weights.nonempty()";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::LoadWeights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="load_weights";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="quiet";
	  required=0;
	  def_val="false";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       PrintVar @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	message="Loaded weights:";
	print_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["load_weights"]$$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
	my_mask=NULL;
	debug_level=NULL;
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[2] {
      desc="set to testing mode";
      flags=NEW_EL;
      orig_prog_code=;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$;
      index_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
      order_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="done with the computation in the epoch -- record time it took";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[10] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[11] {
      desc="set back to training mode";
      flags=NEW_EL;
      orig_prog_code=;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrialTest"] {
    name="LeabraTrialTest";
    short_nm="Test";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["phase_no"] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["compute_rel_netin"] {
      name="compute_rel_netin";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="arm stuff at start of trial";
      flags=NON_STD;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"]$;
      targ_ld_init="*RobotTrialInit*";
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[5] {
      desc=;
      flags=NEW_EL;
      orig_prog_code=;
      cond {
       expr="compute_rel_netin";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="special for adapting netin";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     IfElse @[6] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraSettleTest"] {
    name="LeabraSettleTest";
    short_nm="Test";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["min_cycles"] {
      name="min_cycles";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
     ProgVar @["MotorElbowForce"] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$;
      objs_ptr=0;
      flags=SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["MotorShoulderForce"] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$;
      objs_ptr=0;
      flags=SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=NON_STD;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"]$;
      targ_ld_init="*RobotSettleInit*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no <= 1";
      };
      show_false_code=1;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["min_cycles"]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=0;
	orig_prog_code=;
	result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["min_cycles"]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.phase_no == 1";
      };
      show_false_code=0;
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraCycleTest"] {
    name="LeabraCycleTest";
    short_nm="Test";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=0;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrialMonitorTest"] {
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["phase_no"] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["minus_cycles"] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pvlv_pvi"] {
	name="pvlv_pvi";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="pvlv_pvi";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trg_dist"] {
	name="trg_dist";
	computed=0;
	object_type=ProgVar;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["trg_dist"]$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["RLNet"]$;
      data=$.projects["ve_arm"].data.gp["OutputData"]["TestTrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TestTrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraEpochMonitorTest"] {
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_trg_dist"] {
	name="avg_trg_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
	agg_col {
	 col_name="trg_dist";
	};
	agg {op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rew_dist_thr"] {
	name="rew_dist_thr";
	computed=0;
	object_type=ProgVar;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_pvi"] {
	name="avg_pvi";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: name="": };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["RLNet"]$;
      data=.projects["ve_arm"].data.gp["OutputData"]["TestEpochOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TestEpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["ve_arm"].networks["RLNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name=;
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser3"] {
   name="Browser3";
   m_data=.projects["ve_arm"]$$;
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Tree"] {
     name="Tree";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["ve_arm"]$;
    };
    PanelViewer @["Panels"] {
     name="Panels";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["T3Frames"] {
     name="T3Frames";
     m_data=NULL;
     visible=1;
     panels {
      name=;
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["VEArmWorld"] {
       name="VEArmWorld";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=VEWorldView;
	 el_def=0;
	 VEWorldView @["VEEmerWorld_View"] {
	  name="VEEmerWorld_View";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
	  m_transform=NULL;
	  children {
	   name=;
	   el_typ=VESpaceView;
	   el_def=0;
	   VESpaceView @["RoomSpace"] {
	    name="RoomSpace";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].spaces["RoomSpace"]$$;
	    m_transform=NULL;
	    children {
	     name="T3DataView_List_0";
	     el_typ=T3DataView;
	     el_def=0;
	     VEStaticView @["Ground"] {
	      name="Ground";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].spaces["RoomSpace"].static_els["Ground"]$$;
	      m_transform=NULL;
	     };
	     VEStaticView @["BackWall"] {
	      name="BackWall";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].spaces["RoomSpace"].static_els["BackWall"]$$;
	      m_transform=NULL;
	     };
	    };
	   };
	   VEObjectView @["Emer"] {
	    name="Emer";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"]$$;
	    m_transform=NULL;
	    children {
	     name="T3DataView_List_0";
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @["Torso"] {
	      name="Torso";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["Humerus"] {
	      name="Humerus";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["Ulna"] {
	      name="Ulna";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["Hand"] {
	      name="Hand";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["Head"] {
	      name="Head";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["LeftEye"] {
	      name="LeftEye";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["LeftEye"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["RightEye"] {
	      name="RightEye";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["RightEye"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["Pectoralis"] {
	      name="Pectoralis";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Pectoralis"]$;
	      m_transform=NULL;
	     };
	     VEBodyView @["Deltoid"] {
	      name="Deltoid";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Deltoid"]$;
	      m_transform=NULL;
	     };
	     VEJointView @["Shoulder"] {
	      name="Shoulder";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	      m_transform=NULL;
	     };
	     VEJointView @["Elbow"] {
	      name="Elbow";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	      m_transform=NULL;
	     };
	     VEJointView @["Wrist"] {
	      name="Wrist";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Wrist"]$$;
	      m_transform=NULL;
	     };
	     VEJointView @["LeftEyeJoint"] {
	      name="LeftEyeJoint";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["LeftEyeJoint"]$$;
	      m_transform=NULL;
	     };
	     VEJointView @["RightEyeJoint"] {
	      name="RightEyeJoint";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["RightEyeJoint"]$$;
	      m_transform=NULL;
	     };
	    };
	   };
	   VEObjectView @["Target"] {
	    name="Target";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"]$$;
	    m_transform=NULL;
	    children {
	     name="T3DataView_List_0";
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @["TargetBody"] {
	      name="TargetBody";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	      m_transform=NULL;
	     };
	    };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  display_on=1;
	  drag_objs=0;
	  drag_size=0.1;
	  show_joints=0;
	 };
	 GraphTableView @["ArmOutputData_Graph"] {
	  name="ArmOutputData_Graph";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["Reach_Name"] {
	    name="Reach_Name";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_Name"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Reach_No"] {
	    name="Reach_No";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_No"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_x"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_y"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_z"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_x"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_y"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_z"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_x"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_y"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_z"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_pos"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_vel"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_force_in"] {
	    name="Should_force_in";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_force_in"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_pos"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_vel"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_force_in"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["n_steps"] {
	    name="n_steps";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["n_steps"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["angle_err"] {
	    name="angle_err";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["angle_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["trg_dist"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=27: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Target_cur_pos_x";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Target_cur_pos_z";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=6: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=28: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ArmOutputData_Graph_2"] {
	  name="ArmOutputData_Graph_2";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["Reach_Name"] {
	    name="Reach_Name";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_Name"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Reach_No"] {
	    name="Reach_No";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_No"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_pos"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_vel"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_force_in"] {
	    name="Should_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_force_in"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_pos"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_vel"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_force_in"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["n_steps"] {
	    name="n_steps";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["n_steps"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["angle_err"] {
	    name="angle_err";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["angle_err"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["trg_dist"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=27: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Hand_cur_pos_z";
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=28: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ArmOutputData_Graph_3"] {
	  name="ArmOutputData_Graph_3";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["Reach_Name"] {
	    name="Reach_Name";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_Name"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Reach_No"] {
	    name="Reach_No";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_No"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_pos"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_vel"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_force_in"] {
	    name="Should_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_force_in"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_pos"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_vel"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_force_in"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["n_steps"] {
	    name="n_steps";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["n_steps"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["angle_err"] {
	    name="angle_err";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["angle_err"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["trg_dist"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=27: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Reach_no";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=27: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=1;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="trg_dist";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=0.8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="angle_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0.03055558: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="n_steps";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=2: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ReachOutputData_Graph"] {
	  name="ReachOutputData_Graph";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["time"] {
	    name="time";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["time"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_x"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_y"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_z"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_x"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_y"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_z"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_x"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_y"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_z"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_pos"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_vel"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_len"] {
	    name="Should_flexor_len";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_len"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_dlen"] {
	    name="Should_flexor_dlen";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_dlen"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_act"] {
	    name="Should_flexor_act";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_act"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_act_force"] {
	    name="Should_flexor_m_act_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_act_force"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_force"] {
	    name="Should_flexor_m_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_force"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_force"] {
	    name="Should_flexor_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_force"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_len"] {
	    name="Should_extensor_len";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_len"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_dlen"] {
	    name="Should_extensor_dlen";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_dlen"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_act"] {
	    name="Should_extensor_act";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_act"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_act_force"] {
	    name="Should_extensor_m_act_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_act_force"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_force"] {
	    name="Should_extensor_m_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_force"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_force"] {
	    name="Should_extensor_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_force"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["should_cur_trg"] {
	    name="should_cur_trg";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["should_cur_trg"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_pos"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_vel"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_force_in"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["elbow_cur_trg"] {
	    name="elbow_cur_trg";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["elbow_cur_trg"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=10;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Should_flexor_len";
	   fixed_range {fix_min=0: min=0.103447: fix_max=0: max=0.150032: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="Should_extensor_len";
	   fixed_range {fix_min=0: min=0.0499678: fix_max=0: max=0.0965525: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Should_flexor_force";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Should_extensor_force";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=1;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="should_cur_trg";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="elbow_cur_trg";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ReachOutputData_Graph_5"] {
	  name="ReachOutputData_Graph_5";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["time"] {
	    name="time";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["time"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_x"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_y"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_z"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_pos"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_vel"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_len"] {
	    name="Should_flexor_len";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_len"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_dlen"] {
	    name="Should_flexor_dlen";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_dlen"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_act"] {
	    name="Should_flexor_act";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_act"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_act_force"] {
	    name="Should_flexor_m_act_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_act_force"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_force"] {
	    name="Should_flexor_m_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_force"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_force"] {
	    name="Should_flexor_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_force"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_len"] {
	    name="Should_extensor_len";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_len"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_dlen"] {
	    name="Should_extensor_dlen";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_dlen"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_act"] {
	    name="Should_extensor_act";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_act"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_act_force"] {
	    name="Should_extensor_m_act_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_act_force"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_force"] {
	    name="Should_extensor_m_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_force"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_force"] {
	    name="Should_extensor_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_force"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["should_cur_trg"] {
	    name="should_cur_trg";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["should_cur_trg"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_pos"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_vel"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_force_in"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["elbow_cur_trg"] {
	    name="elbow_cur_trg";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["elbow_cur_trg"]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=1;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=10;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Hand_cur_pos_z";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=0;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["View_0"] {
	 name="View_0";
	 view_saved=1;
	 pos {x=0.07999998: y=1.3774: z=2.003552: };
	 orient {x=-1.000001: y=0: z=0: rot=0.3819996: };
	 focal_dist=2.161878;
	};
	T3SavedView @["TopDown"] {
	 name="TopDown";
	 view_saved=1;
	 pos {x=0.2114639: y=2.290442: z=0.2542374: };
	 orient {x=-1: y=0: z=0: rot=1.524: };
	 focal_dist=1.611198;
	};
	T3SavedView @["Side"] {
	 name="Side";
	 view_saved=1;
	 pos {x=2.191079: y=0.830333: z=0.3848871: };
	 orient {x=-0.03250458: y=0.993804: z=0.1062884: rot=1.400158: };
	 focal_dist=2.161878;
	};
	T3SavedView @["View_3"] {
	 name="View_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_4"] {
	 name="View_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_5"] {
	 name="View_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["FwdModelNet"] {
       name="FwdModelNet";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_FwdModelNet_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_FwdModelNet_root_view_children_0";
	  m_data=$.projects["ve_arm"].networks["FwdModelNet"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ 	  };
	  unit_src_path=;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=52: y=10: z=2.333333: };
	  max_size2d {x=12: y=34: z=1: };
	  eff_max_size {x=52: y=10: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ VisTarget_Cur=0;VisHand_Cur=0;SomaShoulderAngle_Cur=0;SomaElbowAngle_Cur=0;MotorShoulderForce=0;MotorElbowForce=0;VisFwdHidden=0;SomaFwdHidden=0;VisHand_Pred=0;SomaShoulderAngle_Pred=0;SomaElbowAngle_Pred=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["View_0"] {
	 name="View_0";
	 view_saved=1;
	 pos {x=0.5: y=0.3359568: z=1.734998: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.138079;
	};
	T3SavedView @["View_1"] {
	 name="View_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_2"] {
	 name="View_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_3"] {
	 name="View_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_4"] {
	 name="View_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_5"] {
	 name="View_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       name="EpochOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0";
	  m_data=$.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    name="batch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    name="epoch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_sse"] {
	    name="avg_sse";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["cnt_err"] {
	    name="cnt_err";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_trg_dist"] {
	    name="avg_trg_dist";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_trg_dist"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_ext_rew"] {
	    name="avg_ext_rew";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["rew_dist_thr"] {
	    name="rew_dist_thr";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["rew_dist_thr"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_cycles"] {
	    name="avg_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch_time_tot"] {
	    name="epoch_time_tot";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch_time_usr"] {
	    name="epoch_time_usr";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_pvi"] {
	    name="avg_pvi";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_pvi"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=500;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="avg_sse";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0.444586: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_ext_rew";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_pvi";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="rew_dist_thr";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_trg_dist";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["View_0"] {
	 name="View_0";
	 view_saved=1;
	 pos {x=1.516175: y=0.4449999: z=1.729345: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.741845;
	};
	T3SavedView @["View_1"] {
	 name="View_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_2"] {
	 name="View_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_3"] {
	 name="View_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_4"] {
	 name="View_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_5"] {
	 name="View_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["RLNet"] {
       name="RLNet";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_RLNet_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_RLNet_root_view_children_0";
	  m_data=$.projects["ve_arm"].networks["RLNet"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7000002: z=0.7000002: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0.4590484: y=-0.5233579: z=-0.4999987: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ 	  };
	  unit_src_path=;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=38: y=10: z=2.333333: };
	  max_size2d {x=12: y=61: z=1: };
	  eff_max_size {x=38: y=10: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.001;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ RewTarg=0;PVe=0;PVr=0;PVi=0;LVe=0;LVi=0;NV=0;DA=0;MotorElbowForce=0;MotorShoulderForce=0;RLHidden=0;SomaElbowAngle_Cur=0;SomaElbowAngle_Pred=0;SomaShoulderAngle_Cur=0;SomaShoulderAngle_Pred=0;VisHand_Cur=0;VisHand_Pred=0;VisTarget_Cur=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["View_0"] {
	 name="View_0";
	 view_saved=1;
	 pos {x=0.4897743: y=0.6755549: z=1.577252: };
	 orient {x=-1.00002: y=0: z=0: rot=0.1299974: };
	 focal_dist=2.016901;
	};
	T3SavedView @["View_1"] {
	 name="View_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_2"] {
	 name="View_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_3"] {
	 name="View_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_4"] {
	 name="View_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_5"] {
	 name="View_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["TrialOutputData"] {
       name="TrialOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0";
	  m_data=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    name="batch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["batch"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    name="epoch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["epoch"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trial"] {
	    name="trial";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["trial"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trial_name"] {
	    name="trial_name";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["trial_name"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["group_name"] {
	    name="group_name";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["group_name"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["phase_no"] {
	    name="phase_no";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["phase_no"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["minus_cycles"] {
	    name="minus_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["minus_cycles"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["sse"] {
	    name="sse";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["sse"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["ext_rew"] {
	    name="ext_rew";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["ext_rew"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["pvlv_pvi"] {
	    name="pvlv_pvi";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["pvlv_pvi"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["trg_dist"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="trial";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="ext_rew";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="pvlv_pvi";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="trg_dist";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["View_0"] {
	 name="View_0";
	 view_saved=1;
	 pos {x=1.4275: y=0.4449999: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @["View_1"] {
	 name="View_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_2"] {
	 name="View_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_3"] {
	 name="View_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_4"] {
	 name="View_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["View_5"] {
	 name="View_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     name="Tools";
     m_data=NULL;
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 auto_name=1;
 last_change_desc="lambda arm muscle code in place, with minimal rl and forward model learning, and all programs cleaned up.
";
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["FwdModelNet"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="FwdModelNet";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"].children["LeabraBiasSpec_4"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {gelin=0: old_gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: vm_mod_max=0.95: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0;
      t_r=6;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {type=UNIFORM: mean=0.15: var=0: par=1: name="": };
     dt {integ=1: vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1.428571: };
     act_avg {l_up_dt=0.6: l_dn_dt=0.05: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=20: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     adapt {
      on=0;
      dt=0.007;
      vm_gain=0.1;
      spike_gain=0.01;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=NO_NOISE;
     noise {type=GAUSSIAN: mean=0: var=0.001: par=1: name="": };
     noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraLayerSpec @["HiddenLayer"] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	avg_boost=0;
	low0=0;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
       lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
       unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: };
       ct_inhib_mod {
	manual_sravg=0;
	sravg_delay=0;
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @["FullPrjnSpec_2"] {
     name="FullPrjnSpec_2";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     add_rnd_wts=0;
     add_rnd_wts_scale=1;
    };
    LeabraConSpec @["LeabraConSpec_4"] {
     name="LeabraConSpec_4";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_4"] {
       name="LeabraBiasSpec_4";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {type=UNIFORM: mean=0: var=0: par=1: name="": };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       learn=1;
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       wt_sig {gain=6: off=1.25: dwt_norm=0: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {type=UNIFORM: mean=0.5: var=0.25: par=1: name="": };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     learn=1;
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     wt_sig {gain=6: off=1.25: dwt_norm=0: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
    ScalarValLayerSpec @["NormScalarVal"] {
     name="NormScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @["ForceScalarVal"] {
     name="ForceScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    TwoDValLayerSpec @["VisTwoDVal"] {
     name="VisTwoDVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=52: y=10: z=3: };
    max_disp_size2d {x=30: y=52: };
    TwoDValLeabraLayer @["VisTarget_Cur"] {
     name="VisTarget_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=TwoDValLayerSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["VisTwoDVal"]$$: };
     twod_vals {
      name=;
	  [2 11 1 1 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    TwoDValLeabraLayer @["VisHand_Cur"] {
     name="VisHand_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=13: y=0: z=0: };
     pos2d {x=0: y=12: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["VisTwoDVal"]$: };
     twod_vals {
      name=;
	  [2 11 1 1 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    LeabraLayer @["SomaShoulderAngle_Cur"] {
     name="SomaShoulderAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=0: z=0: };
     pos2d {x=0: y=24: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaShoulderAngle_Cur"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$$: };
    };
    LeabraLayer @["SomaElbowAngle_Cur"] {
     name="SomaElbowAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=3: z=0: };
     pos2d {x=0: y=27: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaElbowAngle_Cur"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
    };
    LeabraLayer @["MotorShoulderForce"] {
     name="MotorShoulderForce";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=40: y=0: z=0: };
     pos2d {x=0: y=30: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["VisFwdHidden"].projections["Fm_MotorShoulderForce"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_MotorShoulderForce"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";
"0.3";"0.5";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
    };
    LeabraLayer @["MotorElbowForce"] {
     name="MotorElbowForce";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=40: y=3: z=0: };
     pos2d {x=0: y=33: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["VisFwdHidden"].projections["Fm_MotorElbowForce"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_MotorElbowForce"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";
"0.3";"0.5";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
    };
    LeabraLayer @["VisFwdHidden"] {
     name="VisFwdHidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=15: y=2: z=1: };
     pos2d {x=0: y=36: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_MotorShoulderForce"] {
       name="Fm_MotorShoulderForce";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["MotorShoulderForce"]$$;
       spec {type=FullPrjnSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_MotorElbowForce"] {
       name="Fm_MotorElbowForce";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["MotorElbowForce"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["VisHand_Pred"].projections["Fm_VisFwdHidden"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [7 7] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["HiddenLayer"]$$: };
    };
    LeabraLayer @["SomaFwdHidden"] {
     name="SomaFwdHidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=26: y=2: z=1: };
     pos2d {x=9: y=36: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaShoulderAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaElbowAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_MotorShoulderForce"] {
       name="Fm_MotorShoulderForce";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["FwdModelNet"].layers["MotorShoulderForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_MotorElbowForce"] {
       name="Fm_MotorElbowForce";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["FwdModelNet"].layers["MotorElbowForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Pred"] {
       name="Fm_SomaShoulderAngle_Pred";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaShoulderAngle_Pred"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Pred"] {
       name="Fm_SomaElbowAngle_Pred";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaElbowAngle_Pred"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaShoulderAngle_Pred"].projections["Fm_SomaFwdHidden"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaElbowAngle_Pred"].projections["Fm_SomaFwdHidden"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [7 7] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["HiddenLayer"]$: };
    };
    TwoDValLeabraLayer @["VisHand_Pred"] {
     name="VisHand_Pred";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos {x=12: y=0: z=2: };
     pos2d {x=18: y=36: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_VisFwdHidden"] {
       name="Fm_VisFwdHidden";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["VisFwdHidden"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["VisTwoDVal"]$: };
     twod_vals {
      name=;
	  [2 11 1 1 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    LeabraLayer @["SomaShoulderAngle_Pred"] {
     name="SomaShoulderAngle_Pred";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos {x=25: y=0: z=2: };
     pos2d {x=18: y=48: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaFwdHidden"] {
       name="Fm_SomaFwdHidden";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaShoulderAngle_Pred"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
    };
    LeabraLayer @["SomaElbowAngle_Pred"] {
     name="SomaElbowAngle_Pred";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos {x=25: y=3: z=2: };
     pos2d {x=18: y=51: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaFwdHidden"] {
       name="Fm_SomaFwdHidden";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaElbowAngle_Pred"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=500;
   n_cons=11270;
   max_prjns=6;
   max_disp_size {x=52: y=10: z=3: };
   max_disp_size2d {x=30: y=52: };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=2;
   time_inc=1;
   cycle_max=60;
   mid_minus_cycle=-1;
   min_cycles=15;
   min_cycles_phase2=35;
   dwt_norm_enabled=0;
   ct_time {
    use=0;
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    manual=0;
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0.001;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=0.005;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
  };
  LeabraNetwork @["RLNet"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="RLNet";
   desc="Model that learns from reinforcement learning (PVLV)";
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @["MotorUnits"] {
       name="MotorUnits";
       desc=;
       unique{        };
       children {
	name=;
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=LeabraCon;
       bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"].children["LeabraBiasSpec_4"]$$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {gelin=0: old_gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=NO_AH: vm_mod_max=0.95: };
       spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
       spike_misc {
	exp_slope=0.02;
	spk_thr=1.2;
	clamp_max_p=0.11;
	clamp_type=REGULAR;
	vm_r=0;
	t_r=6;
	vm_dend=0.3;
	vm_dend_dt=0.16;
	vm_dend_time=6.25;
       };
       opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {type=UNIFORM: mean=0.15: var=0: par=1: name="": };
       dt {integ=1: vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1.428571: };
       act_avg {l_up_dt=0.6: l_dn_dt=0.05: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=20: m_time=10: s_time=5: ss_time=1: };
       g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
       adapt {
	on=0;
	dt=0.007;
	vm_gain=0.1;
	spike_gain=0.01;
	interval=10;
	dt_time=142.8571;
       };
       depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: };
       syn_delay {
	on=0;
	delay=4;
       };
       da_mod {on=1: mod=PLUS_CONT: gain=1: };
       noise_type=NETIN_NOISE;
       noise {type=GAUSSIAN: mean=0: var=0.01: par=1: name="": };
       noise_adapt {trial_fixed=1: k_pos_noise=0: mode=PVLV_PVI: min_pct=0.5: min_pct_c=0.5: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=1;
       };
      };
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"].children["LeabraBiasSpec_4"]$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {gelin=0: old_gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=NO_AH: vm_mod_max=0.95: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0;
      t_r=6;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {type=UNIFORM: mean=0.15: var=0: par=1: name="": };
     dt {integ=1: vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1.428571: };
     act_avg {l_up_dt=0.6: l_dn_dt=0.05: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=20: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     adapt {
      on=0;
      dt=0.007;
      vm_gain=0.1;
      spike_gain=0.01;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=1: mod=PLUS_CONT: gain=1: };
     noise_type=NETIN_NOISE;
     noise {type=GAUSSIAN: mean=0: var=0.01: par=1: name="": };
     noise_adapt {trial_fixed=1: k_pos_noise=0: mode=PVLV_PVI: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraLayerSpec @["HiddenLayer"] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       name="Input_Output";
       desc=;
       unique{ inhib;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	avg_boost=0;
	low0=0;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
       lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
       unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=0: phase2=0: };
       ct_inhib_mod {
	manual_sravg=0;
	sravg_delay=0;
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=0: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    FullPrjnSpec @["FullPrjnSpec_2"] {
     name="FullPrjnSpec_2";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     add_rnd_wts=0;
     add_rnd_wts_scale=1;
    };
    LeabraConSpec @["LeabraConSpec_4"] {
     name="LeabraConSpec_4";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_4"] {
       name="LeabraBiasSpec_4";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {type=UNIFORM: mean=0: var=0: par=1: name="": };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=CTLEABRA_XCAL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       learn=1;
       lrate=0.02;
       cur_lrate=1;
       lrs_value=EXT_REW_STAT;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=70;
	 step=-0.01285714;
	};
	SchedItem @[1] {
	 start_ctr=70;
	 start_val=0.1;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1: dwt_norm=0: };
       lmix {hebb=0.001: err=0.999: err_sb=1: };
       xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {type=UNIFORM: mean=0.5: var=0.25: par=1: name="": };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=CTLEABRA_XCAL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     learn=1;
     lrate=0.02;
     cur_lrate=1;
     lrs_value=EXT_REW_STAT;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=70;
       step=-0.01285714;
      };
      SchedItem @[1] {
       start_ctr=70;
       start_val=0.1;
       duration=1;
       step=1;
      };
     };
     wt_sig {gain=6: off=1: dwt_norm=0: };
     lmix {hebb=0.001: err=0.999: err_sb=1: };
     xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.2;
     };
    };
    ScalarValLayerSpec @["NormScalarVal"] {
     name="NormScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=3: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=0: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @["ForceScalarVal"] {
     name="ForceScalarVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.8;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=0: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=0: max=1: range=1: scale=1: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     val_range {min=0: max=1: range=1: scale=1: };
    };
    TwoDValLayerSpec @["VisTwoDVal"] {
     name="VisTwoDVal";
     desc=;
     unique{ kwta;inhib_group;inhib;     };
     children {
      name=;
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      avg_boost=0;
      low0=0;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=9: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=0: phase2=0: };
     ct_inhib_mod {
      manual_sravg=0;
      sravg_delay=0;
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    BaseSpec_Group @.gp["PFC_BG_Units"] {
     name="PFC_BG_Units";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["PVUnits"] {
      name="PVUnits";
      desc=;
      unique{ g_bar;act;act_fun;dt;opt_thresh;maxda;      };
      children {
       name=;
       el_typ=LeabraUnitSpec;
       el_def=0;
       LeabraUnitSpec @["LVUnits"] {
	name="LVUnits";
	desc=;
	unique{ maxda;	};
	children {
	 name=;
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_con_type=LeabraCon;
	bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["BgBias"]$$: };
	sse_tol=0.5;
	act_fun=NOISY_LINEAR;
	act {gelin=0: old_gelin=0: thr=0.17: gain=220: nvar=0.01: avg_dt=0: avg_init=0.15: i_thr=STD: vm_mod_max=0.95: };
	spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
	spike_misc {
	 exp_slope=0.02;
	 spk_thr=1.2;
	 clamp_max_p=0.11;
	 clamp_type=REGULAR;
	 vm_r=0;
	 t_r=6;
	 vm_dend=0.3;
	 vm_dend_dt=0.16;
	 vm_dend_time=6.25;
	};
	opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
	maxda {val=NO_MAX_DA: inet_scale=1: lay_avg_thr=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=1: range=1: scale=1: };
	v_m_init {type=UNIFORM: mean=0.1500000059604645: var=0: par=1: name="": };
	dt {integ=1: vm=0.05: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: integ_time=1: vm_time=20: net_time=1.428571: };
	act_avg {l_up_dt=0.6: l_dn_dt=0.05: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=20: m_time=10: s_time=5: ss_time=1: };
	g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
	e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
	hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
	acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
	adapt {
	 on=0;
	 dt=0.007;
	 vm_gain=0.1;
	 spike_gain=0.01;
	 interval=10;
	 dt_time=142.8571;
	};
	depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: };
	syn_delay {
	 on=0;
	 delay=4;
	};
	da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
	noise_type=NO_NOISE;
	noise {type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: name="": };
	noise_adapt {trial_fixed=0: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
	noise_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["BgBias"]$: };
      sse_tol=0.5;
      act_fun=NOISY_LINEAR;
      act {gelin=0: old_gelin=0: thr=0.17: gain=220: nvar=0.01: avg_dt=0: avg_init=0.15: i_thr=STD: vm_mod_max=0.95: };
      spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.11;
       clamp_type=REGULAR;
       vm_r=0;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
      maxda {val=NO_MAX_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {type=UNIFORM: mean=0.1500000059604645: var=0: par=1: name="": };
      dt {integ=1: vm=0.05: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=100: vm_eq_dt=1: integ_time=1: vm_time=20: net_time=1.428571: };
      act_avg {l_up_dt=0.6: l_dn_dt=0.05: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=20: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.03: a=0.09: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.1;
       spike_gain=0.01;
       interval=10;
       dt_time=142.8571;
      };
      depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: name="": };
      noise_adapt {trial_fixed=0: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     LeabraUnitSpec @["DaUnits"] {
      name="DaUnits";
      desc=;
      unique{ act_range;clamp_range;act;maxda;      };
      children {
       name=;
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=-2: max=2: range=4: scale=0.25: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["BgBias"].children["FixedBias"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=0: old_gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0: avg_init=0.15: i_thr=STD: vm_mod_max=0.95: };
      spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
      spike_misc {
       exp_slope=0.02;
       spk_thr=1.2;
       clamp_max_p=0.11;
       clamp_type=REGULAR;
       vm_r=0;
       t_r=6;
       vm_dend=0.3;
       vm_dend_dt=0.16;
       vm_dend_time=6.25;
      };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
      maxda {val=NO_MAX_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=-2: max=2: range=4: scale=0.25: };
      vm_range {min=0: max=1: range=1: scale=1: };
      v_m_init {type=UNIFORM: mean=0.1500000059604645: var=0: par=1: name="": };
      dt {integ=1: vm=0.25: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=4: net_time=1.428571: };
      act_avg {l_up_dt=0.6: l_dn_dt=0.05: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=20: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {
       on=0;
       dt=0.007;
       vm_gain=0.1;
       spike_gain=0.01;
       interval=10;
       dt_time=142.8571;
      };
      depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: };
      syn_delay {
       on=0;
       delay=4;
      };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: name="": };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Cons"] {
     name="PFC_BG_Cons";
     el_typ=LeabraConSpec;
     el_def=0;
     LeabraConSpec @["LearnCons"] {
      name="LearnCons";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=PVConSpec;
       el_def=0;
       PVConSpec @["PVi"] {
	name="PVi";
	desc=;
	unique{ lmix;rnd;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	};
	children {
	 name=;
	 el_typ=PVrConSpec;
	 el_def=0;
	 PVrConSpec @["PVr"] {
	  name="PVr";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVrConSpec;
	   el_def=0;
	  };
	  rnd {type=UNIFORM: mean=0.1000000014901161: var=0: par=1: name="": };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  learn=1;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  wt_sig {gain=1: off=1: dwt_norm=0: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  send_act=ACT_P;
	  wt_dec_mult=0.01;
	 };
	 PVConSpec @["LVe"] {
	  name="LVe";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	   PVConSpec @["LVi"] {
	    name="LVi";
	    desc=;
	    unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	    };
	    children {
	     name=;
	     el_typ=PVConSpec;
	     el_def=0;
	    };
	    rnd {type=UNIFORM: mean=0.1000000014901161: var=0: par=1: name="": };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	    learn_rule=CTLEABRA_XCAL;
	    inhib=0;
	    wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	    wt_scale_init {init=0: abs=1: rel=1: };
	    learn=1;
	    lrate=0.001;
	    cur_lrate=0.001;
	    lrs_value=NO_LRS;
	    lrate_sched {
	     name=;
	     el_typ=SchedItem;
	     el_def=0;
	     default_val=1;
	     interpolate=0;
	    };
	    wt_sig {gain=1: off=1: dwt_norm=0: };
	    lmix {hebb=0: err=1: err_sb=0: };
	    xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	    savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	    rel_net_adapt {
	     on=0;
	     trg_fm_input=0.85;
	     trg_fm_output=0.15;
	     trg_lateral=0;
	     trg_sum=1;
	     tol_lg=0.05;
	     tol_sm=0.2;
	     rel_lrate=0.2;
	    };
	    send_act=ACT_P;
	   };
	  };
	  rnd {type=UNIFORM: mean=0.1000000014901161: var=0: par=1: name="": };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  learn=1;
	  lrate=0.05;
	  cur_lrate=0.05;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  wt_sig {gain=1: off=1: dwt_norm=0: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  send_act=ACT_P;
	 };
	 PVConSpec @["NV"] {
	  name="NV";
	  desc=;
	  unique{ xcalm;lrate;wt_limits;wt_sig;xcalm;lrate;lrate_sched;lrs_value;	  };
	  children {
	   name=;
	   el_typ=PVConSpec;
	   el_def=0;
	  };
	  rnd {type=UNIFORM: mean=0.1000000014901161: var=0: par=1: name="": };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  learn=1;
	  lrate=0.0005;
	  cur_lrate=0.0005;
	  lrs_value=NO_LRS;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  wt_sig {gain=1: off=1: dwt_norm=0: };
	  lmix {hebb=0: err=1: err_sb=0: };
	  xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  send_act=ACT_P;
	 };
	};
	rnd {type=UNIFORM: mean=0.1000000014901161: var=0: par=1: name="": };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=NO_LRS;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	wt_sig {gain=1: off=1: dwt_norm=0: };
	lmix {hebb=0: err=1: err_sb=0: };
	xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	send_act=ACT_P;
       };
       LeabraBiasSpec @["BgBias"] {
	name="BgBias";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	};
	children {
	 name=;
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	 LeabraBiasSpec @["FixedBias"] {
	  name="FixedBias";
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	  };
	  children {
	   name=;
	   el_typ=LeabraBiasSpec;
	   el_def=0;
	  };
	  rnd {type=UNIFORM: mean=0: var=0: par=1: name="": };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: };
	  learn_rule=CTLEABRA_XCAL;
	  inhib=0;
	  wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	  wt_scale_init {init=0: abs=1: rel=1: };
	  learn=1;
	  lrate=0;
	  cur_lrate=0;
	  lrs_value=EPOCH;
	  lrate_sched {
	   name=;
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  wt_sig {gain=6: off=1: dwt_norm=0: };
	  lmix {hebb=0.001: err=0.999: err_sb=1: };
	  xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	  rel_net_adapt {
	   on=0;
	   trg_fm_input=0.85;
	   trg_fm_output=0.15;
	   trg_lateral=0;
	   trg_sum=1;
	   tol_lg=0.05;
	   tol_sm=0.2;
	   rel_lrate=0.2;
	  };
	  dwt_thresh=0.1;
	 };
	};
	rnd {type=UNIFORM: mean=0: var=0: par=1: name="": };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name=;
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	wt_sig {gain=6: off=1: dwt_norm=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
	rel_net_adapt {
	 on=0;
	 trg_fm_input=0.85;
	 trg_fm_output=0.15;
	 trg_lateral=0;
	 trg_sum=1;
	 tol_lg=0.05;
	 tol_sm=0.2;
	 rel_lrate=0.2;
	};
	dwt_thresh=0.1;
       };
      };
      rnd {type=UNIFORM: mean=0.5: var=0.25: par=1: name="": };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.01;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      wt_sig {gain=6: off=1: dwt_norm=0: };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
     MarkerConSpec @["MarkerCons"] {
      name="MarkerCons";
      desc=;
      unique{ rnd;wt_limits;wt_scale;lrate;learn;      };
      children {
       name=;
       el_typ=MarkerConSpec;
       el_def=0;
      };
      rnd {type=UNIFORM: mean=0: var=0: par=1: name="": };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=0: sem_extra=2: old=0: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=0;
      lrate=0;
      cur_lrate=0;
      lrs_value=EPOCH;
      lrate_sched {
       name=;
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      wt_sig {gain=6: off=1: dwt_norm=0: };
      lmix {hebb=0.001: err=0.999: err_sb=1: };
      xcal {thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
      rel_net_adapt {
       on=0;
       trg_fm_input=0.85;
       trg_fm_output=0.15;
       trg_lateral=0;
       trg_sum=1;
       tol_lg=0.05;
       tol_sm=0.2;
       rel_lrate=0.2;
      };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Layers"] {
     name="PFC_BG_Layers";
     el_typ=ExtRewLayerSpec;
     el_def=0;
     ExtRewLayerSpec @["PVeLayer"] {
      name="PVeLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=ExtRewLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       avg_boost=0;
       low0=0;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
      decay {event=1: phase=0: phase2=0: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
      val_range {min=0: max=1: range=1: scale=1: };
      rew_type=EXT_REW;
      avg_rew {sub_avg=0: avg_dt=0.005: };
      out_err {err_tol=0.5: graded=0: no_off_err=0: scalar_val_max=1: };
      rew {err_val=0: norew_val=0.5: rew_val=1: };
     };
     PVrLayerSpec @["PVrLayer"] {
      name="PVrLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PVrLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       avg_boost=0;
       low0=0;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
      decay {event=1: phase=0: phase2=0: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv_detect {thr=0.7: };
     };
     PViLayerSpec @["PViLayer"] {
      name="PViLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PViLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       avg_boost=0;
       low0=0;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
      decay {event=1: phase=0: phase2=0: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      pv {min_pvi=0.4: pvi_scale_min=0: prior_gain=1: er_reset_prior=1: no_y_dot=0: };
     };
     LVeLayerSpec @["LVeLayer"] {
      name="LVeLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=LViLayerSpec;
       el_def=0;
       LViLayerSpec @["LViLayer"] {
	name="LViLayer";
	desc=;
	unique{ ct_inhib_mod;inhib_group;inhib;decay;ct_inhib_mod;	};
	children {
	 name=;
	 el_typ=LViLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {
	 type=KWTA_AVG_INHIB;
	 kwta_pt=0.9;
	 avg_boost=0;
	 low0=0;
	 min_i=0;
	 comp_thr=0.5;
	 comp_gain=2;
	 gp_pt=0.2;
	};
	kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
	decay {event=1: phase=0: phase2=0: };
	ct_inhib_mod {
	 manual_sravg=0;
	 sravg_delay=0;
	 use_sin=1;
	 burst_i=0;
	 trough_i=0;
	 use_fin=0;
	 inhib_i=0;
	};
	abs_net_adapt {
	 on=0;
	 trg_net=0.5;
	 tol=0.1;
	 abs_lrate=0.2;
	};
	scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
	unit_range {min=0: max=1: range=1: scale=1: };
	bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
	val_range {min=0: max=1: range=1: scale=1: };
	lv {min_lvi=0.1: lvi_scale_min=0: lrn_pv_only=1: nopv_val=0: nopv_lrate=0.1: prior_gain=1: er_reset_prior=1: no_y_dot=0: pos_y_dot_only=0: };
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       avg_boost=0;
       low0=0;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
      decay {event=1: phase=0: phase2=0: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0.5: };
      val_range {min=0: max=1: range=1: scale=1: };
      lv {min_lvi=0.1: lvi_scale_min=0: lrn_pv_only=1: nopv_val=0: nopv_lrate=0.1: prior_gain=1: er_reset_prior=1: no_y_dot=0: pos_y_dot_only=0: };
     };
     NVLayerSpec @["NVLayer"] {
      name="NVLayer";
      desc=;
      unique{ kwta;inhib_group;inhib;decay;ct_inhib_mod;      };
      children {
       name=;
       el_typ=NVLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_AVG_INHIB;
       kwta_pt=0.9;
       avg_boost=0;
       low0=0;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
      decay {event=1: phase=0: phase2=0: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=GC: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=1: };
      val_range {min=0: max=1: range=1: scale=1: };
      nv {
       da_gain=1;
       val_thr=0.1;
       prior_gain=1;
       er_reset_prior=1;
      };
     };
     PVLVDaLayerSpec @["DALayer"] {
      name="DALayer";
      desc=;
      unique{ decay;kwta;inhib_group;inhib;ct_inhib_mod;      };
      children {
       name=;
       el_typ=PVLVDaLayerSpec;
       el_def=0;
      };
      inhib_group=ENTIRE_LAYER;
      inhib {
       type=KWTA_INHIB;
       kwta_pt=0.25;
       avg_boost=0;
       low0=0;
       min_i=0;
       comp_thr=0.5;
       comp_gain=2;
       gp_pt=0.2;
      };
      kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: gp_g=0.5: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: };
      decay {event=1: phase=0: phase2=0: };
      ct_inhib_mod {
       manual_sravg=0;
       sravg_delay=0;
       use_sin=1;
       burst_i=0;
       trough_i=0;
       use_fin=0;
       inhib_i=0;
      };
      abs_net_adapt {
       on=0;
       trg_net=0.5;
       tol=0.1;
       abs_lrate=0.2;
      };
      da {da_gain=1: tonic_da=0: pv_gain=1: add_pv_lv=0: };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Prjns"] {
     name="PFC_BG_Prjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @["FullPrjn"] {
      name="FullPrjn";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      add_rnd_wts_scale=1;
     };
     OneToOnePrjnSpec @["OneToOne"] {
      name="OneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      add_rnd_wts=0;
      add_rnd_wts_scale=1;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=38: y=10: z=3: };
    max_disp_size2d {x=12: y=85: };
    LeabraLayer @["RewTarg"] {
     name="RewTarg";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=12: y=4: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=1: n_not_xy=0: n=1: };
     disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Fm_RewTarg"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$$: };
    };
    LeabraLayer @["PVe"] {
     name="PVe";
     desc=;
     flags=NO_ADD_SSE|NO_ADD_COMP_SSE;
     layer_type=TARGET;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=3: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_RewTarg"] {
       name="Fm_RewTarg";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["RewTarg"]$$;
       spec {type=OneToOnePrjnSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_MotorElbowForce"] {
       name="Fm_MotorElbowForce";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_MotorShoulderForce"] {
       name="Fm_MotorShoulderForce";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Pred"] {
       name="Fm_SomaElbowAngle_Pred";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Pred"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=-1;
       send_idx=-1;
       recv_n=1;
       send_n=1;
       projected=0;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Pred"] {
       name="Fm_SomaShoulderAngle_Pred";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Pred"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=-1;
       send_idx=-1;
       recv_n=1;
       send_n=1;
       projected=0;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVr"].projections["Fm_PVe"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVi"].projections["Fm_PVe"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ExtRewLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PVeLayer"]$: };
    };
    LeabraLayer @["PVr"] {
     name="PVr";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=4: z=0: };
     pos2d {x=0: y=6: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_PVe"] {
       name="Fm_PVe";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["PVe"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["PVr"]$: };
       recv_idx=1;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVrConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["PVr"]$: };
       recv_idx=2;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVe"].projections["Fm_PVr"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVi"].projections["Fm_PVr"];
	    Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Fm_PVr"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=PVrLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PVrLayer"]$: };
    };
    LeabraLayer @["PVi"] {
     name="PVi";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=2: z=0: };
     pos2d {x=0: y=9: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_PVe"] {
       name="Fm_PVe";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["PVe"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"]$: };
       recv_idx=1;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"]$: };
       recv_idx=2;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Fm_PVi"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=PViLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PViLayer"]$: };
    };
    LeabraLayer @["LVe"] {
     name="LVe";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=0: z=0: };
     pos2d {x=0: y=12: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_PVr"] {
       name="Fm_PVr";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["PVr"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["LVe"]$: };
       recv_idx=1;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["LVe"]$: };
       recv_idx=2;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Fm_LVe"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"].children["LVUnits"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LVeLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["LVeLayer"]$: };
    };
    LeabraLayer @["LVi"] {
     name="LVi";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=2: z=0: };
     pos2d {x=0: y=15: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_PVr"] {
       name="Fm_PVr";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["PVr"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["LVe"].children["LVi"]$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["LVe"].children["LVi"]$: };
       recv_idx=2;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Fm_LVi"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"].children["LVUnits"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LViLayerSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["LVeLayer"].children["LViLayer"]$$: };
    };
    LeabraLayer @["NV"] {
     name="NV";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=4: z=0: };
     pos2d {x=0: y=18: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["NV"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=PVConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["PVi"].children["NV"]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Fm_NV"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=NVLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["NVLayer"]$: };
    };
    LeabraLayer @["DA"] {
     name="DA";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=12: y=0: z=0: };
     pos2d {x=0: y=21: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=1: n_not_xy=0: n=1: };
     disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_PVi"] {
       name="Fm_PVi";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["PVi"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_LVe"] {
       name="Fm_LVe";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["LVe"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_LVi"] {
       name="Fm_LVi";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["LVi"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_PVr"] {
       name="Fm_PVr";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["PVr"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_NV"] {
       name="Fm_NV";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["NV"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"].projections["Fm_DA"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"].projections["Fm_DA"];
	    Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_DA"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["DaUnits"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=PVLVDaLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["DALayer"]$: };
    };
    LeabraLayer @["MotorElbowForce"] {
     name="MotorElbowForce";
     desc=;
     flags=0;
     layer_type=OUTPUT;
     pos {x=26: y=9: z=2: };
     pos2d {x=0: y=24: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_RLHidden"] {
       name="Fm_RLHidden";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["RLHidden"]$$;
       spec {type=FullPrjnSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_DA"] {
       name="Fm_DA";
       off=0;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["DA"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_MotorElbowForce"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Fm_MotorElbowForce"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"].children["MotorUnits"]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";
"0.9";"1";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["ForceScalarVal"]$: };
    };
    LeabraLayer @["MotorShoulderForce"] {
     name="MotorShoulderForce";
     desc=;
     flags=0;
     layer_type=OUTPUT;
     pos {x=26: y=6: z=2: };
     pos2d {x=0: y=27: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_RLHidden"] {
       name="Fm_RLHidden";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["RLHidden"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_DA"] {
       name="Fm_DA";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["DA"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_MotorShoulderForce"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Fm_MotorShoulderForce"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"].children["MotorUnits"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name=;
	  [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";
"0.9";"1";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["ForceScalarVal"]$: };
    };
    LeabraLayer @["RLHidden"] {
     name="RLHidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=8: y=0: z=1: };
     pos2d {x=0: y=30: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_MotorShoulderForce"] {
       name="Fm_MotorShoulderForce";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_MotorElbowForce"] {
       name="Fm_MotorElbowForce";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
      LeabraPrjn @["Fm_DA"] {
       name="Fm_DA";
       off=0;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["DA"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"].projections["Fm_RLHidden"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"].projections["Fm_RLHidden"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
    };
    LeabraLayer @["SomaElbowAngle_Cur"] {
     name="SomaElbowAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=3: z=2: };
     pos2d {x=0: y=39: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_SomaElbowAngle_Cur"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVr"].projections["Fm_SomaElbowAngle_Cur"];
	    Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVi"].projections["Fm_SomaElbowAngle_Cur"];
	    Projection_Group @. = [3] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVe"].projections["Fm_SomaElbowAngle_Cur"];
	    Projection_Group @. = [4] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVi"].projections["Fm_SomaElbowAngle_Cur"];
	    Projection_Group @. = [5] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["NV"].projections["Fm_SomaElbowAngle_Cur"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$$: };
    };
    LeabraLayer @["SomaElbowAngle_Pred"] {
     name="SomaElbowAngle_Pred";
     desc=;
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=6: z=1: };
     pos2d {x=0: y=42: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Fm_SomaElbowAngle_Pred"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$: };
    };
    LeabraLayer @["SomaShoulderAngle_Cur"] {
     name="SomaShoulderAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=0: z=2: };
     pos2d {x=0: y=45: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_SomaShoulderAngle_Cur"];
	    Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVr"].projections["Fm_SomaShoulderAngle_Cur"];
	    Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVi"].projections["Fm_SomaShoulderAngle_Cur"];
	    Projection_Group @. = [3] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVe"].projections["Fm_SomaShoulderAngle_Cur"];
	    Projection_Group @. = [4] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVi"].projections["Fm_SomaShoulderAngle_Cur"];
	    Projection_Group @. = [5] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["NV"].projections["Fm_SomaShoulderAngle_Cur"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$: };
    };
    LeabraLayer @["SomaShoulderAngle_Pred"] {
     name="SomaShoulderAngle_Pred";
     desc=;
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=9: z=1: };
     pos2d {x=0: y=48: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Fm_SomaShoulderAngle_Pred"];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$: };
    };
    TwoDValLeabraLayer @["VisHand_Cur"] {
     name="VisHand_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=13: y=0: z=2: };
     pos2d {x=0: y=51: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=TwoDValLayerSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["VisTwoDVal"]$$: };
     twod_vals {
      name=;
	  [2 11 1 1 1] 1.4119124;0.46986288;0;0;1.3248316;0.47522646;1.3248316;0.47522646;1.3194612;0.79662973;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    TwoDValLeabraLayer @["VisHand_Pred"] {
     name="VisHand_Pred";
     desc=;
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=20: y=6: z=1: };
     pos2d {x=0: y=63: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["VisTwoDVal"]$: };
     twod_vals {
      name=;
	  [2 11 1 1 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    TwoDValLeabraLayer @["VisTarget_Cur"] {
     name="VisTarget_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=2: };
     pos2d {x=0: y=75: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["VisTwoDVal"]$: };
     twod_vals {
      name=;
	  [2 11 1 1 1] 0.68105024;0.61593002;0;0;0.67148918;0.61461592;0.67148918;0.61461592;0.10563678;0.52459538;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=343;
   n_cons=4111;
   max_prjns=5;
   max_disp_size {x=38: y=10: z=3: };
   max_disp_size2d {x=12: y=85: };
   learn_rule=CTLEABRA_XCAL;
   phase_order=MINUS_PLUS;
   no_plus_test=0;
   sequence_init=DO_NOTHING;
   phase_max=2;
   time_inc=1;
   cycle_max=50;
   mid_minus_cycle=-1;
   min_cycles=0;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {
    use=1;
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    manual=0;
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    plus_s_only=0;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
   };
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
  };
 };
};
